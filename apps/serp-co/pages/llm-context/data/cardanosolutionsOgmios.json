[
  {
    "owner": "cardanosolutions",
    "repo": "ogmios",
    "content": "TITLE: Query Ledger Tip\nDESCRIPTION: This JSON payload is used to query the ledger tip. No parameters are required. The method called is `queryLedgerState/tip`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query UTXO Set\nDESCRIPTION: This JSON payload is used to query the entire UTXO set. No parameters are required. The method called is `queryLedgerState/utxo`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/utxo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding an Intersection with Ogmios (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to find an intersection between a client's chain and the node's chain using the `findIntersection` method.  It accepts a list of points (slot and block ID pairs) as parameters. The special keyword `\"origin\"` can also be included as a point.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"findIntersection\",\n    \"params\": {\n        \"points\": [\n            {\n              \"slot\": 39916796,\n              \"id\": \"e72579ff89dc9ed325b723a33624b596c08141c7bd573ecfff56a1f7229e4d09\"\n            },\n            {\n              \"slot\": 23068793,\n              \"id\": \"69c44ac1dda2ec74646e4223bc804d9126f719b1c245dadc2ad65e8de1b276d7\"\n            },\n            \"origin\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Protocol Parameters\nDESCRIPTION: This JSON payload is used to query the current protocol parameters of the ledger. No parameters are required. The method called is `queryLedgerState/protocolParameters`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/protocolParameters\"\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction Request - JSON\nDESCRIPTION: This JSON snippet shows the structure of a request to evaluate a transaction using Ogmios. Similar to transaction submission, the transaction is provided as a base16-encoded CBOR string. The 'method' parameter must be set to 'evaluateTransaction'. This endpoint is useful for determining script execution costs without actually submitting the transaction to the network.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"evaluateTransaction\",\n    \"params\": { \"transaction\": { \"cbor\": \"<base16>\" } }\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Submission - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to submit a transaction to the Cardano mainnet via Ogmios using the WebSocket protocol. It initializes a WebSocket connection, constructs a JSON-RPC message for transaction submission with a dummy CBOR transaction, sends the message, and handles the response.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params\n    }));\n}\n\nclient.once('open', () => {\n    const cbor =\n      \"83a4008182582000000000000000000000000000000000000000000000000000\"+\n      \"0000000000000000018282583901010101010101010101010101010101010101\"+\n      \"0101010101010101010101010101010101010101010101010101010101010101\"+\n      \"0101010101011a001e8480825839010202020202020202020202020202020202\"+\n      \"0202020202020202020202020202020202020202020202020202020202020202\"+\n      \"020202020202021a0078175c021a0001faa403191e46a1008182582001000000\"+\n      \"000000000000000000000000000000000000000000000000000000005840d7af\"+\n      \"60ae33d2af351411c1445c79590526990bfa73cbb3732b54ef322daa142e6884\"+\n      \"023410f8be3c16e9bd52076f2bb36bf38dfe034a9f04658e9f56197ab80ff6\";\n\n    rpc(\"submitTransaction\", { transaction: { cbor } });\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n    console.log(response);\n    client.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Acquiring Ledger State with a Specific Point - JSON\nDESCRIPTION: This JSON snippet demonstrates how to acquire a ledger state in Ogmios using a specific point (slot and hash). The 'acquireLedgerState' method is used with parameters specifying the desired point on the chain.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"acquireLedgerState\",\n    \"params\": {\n        \"point\": {\n            \"slot\": 1234,\n            \"hash\": \"9e871633f7aa356ef11cdcabb6fdd6d8f4b00bc919c57aed71a91af8f86df590\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ledger Tip with Ogmios REPL (JavaScript)\nDESCRIPTION: This snippet shows how to query the ledger tip using the Ogmios REPL.  It calls the `ledgerTip()` function, which returns an object containing the ID and slot of the current ledger tip. The REPL must be set up with the client functions and a connection to the Ogmios server.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/packages/repl/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nogmios> await ledgerTip()\n{\n  id: '41364e89e44370a009f083ce9963261aabf6138db519b039012232bf40f187f8',\n  slot: 25541023\n}\n```\n\n----------------------------------------\n\nTITLE: Query UTXO by Output Reference\nDESCRIPTION: This JSON payload is used to query a specific UTXO by its output reference. The `params` field contains an `outputReferences` array, with each entry specifying the `transaction` id and `index` of the UTXO. The method called is `queryLedgerState/utxo`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/utxo\",\n  \"params\": {\n    \"outputReferences\": [\n      {\n        \"transaction\": { \"id\": \"ee155ace9c40292074cb6aff8c9ccdd273c81648ff1149ef36bcea6ebb8a3e25\" },\n        \"index\": 2\n      }\n    ]\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submit Transaction Request - JSON\nDESCRIPTION: This JSON snippet shows the structure of a request to submit a transaction to the Cardano network via Ogmios. The transaction is expected to be a base16-encoded CBOR string. The 'method' parameter must be set to 'submitTransaction'.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"submitTransaction\",\n    \"params\": { \"transaction\": { \"cbor\": \"<base16>\" } }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the Epoch of the Ledger - JSON\nDESCRIPTION: This JSON snippet illustrates how to query the current epoch of the ledger using Ogmios. It utilizes the 'queryLedgerState/epoch' method to retrieve the current epoch information.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"queryLedgerState/epoch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mempool Monitoring with WebSocket (Ogmios)\nDESCRIPTION: This JavaScript code establishes a WebSocket connection to Ogmios, sends RPC requests to acquire the mempool snapshot and retrieve transaction information, and handles responses. It demonstrates the typical pattern of acquiring a snapshot, listing transactions, and re-acquiring a snapshot when the current one is exhausted.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-monitor.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\n// Helper function\nfunction rpc(method, params) {\n    client.send(JSON.stringify({\n        jsonrpc: '2.0',\n        method,\n        params\n    }));\n}\n\nclient.on('message', e => {\n  const message = JSON.parse(e);\n  if (message?.result?.transaction === null) {\n    rpc('acquireMempool');\n  } else {\n    console.log(message.result);\n    // Returns transaction id\n    rpc('nextTransaction');\n    // Returns all transaction information\n    // rpc(\"nextTransaction\", { fields: \"all\" });\n  }\n});\n\nclient.once('open', () => {\n  rpc('acquireMempool');\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Parameters with Ogmios REPL (JavaScript)\nDESCRIPTION: This snippet illustrates how to query the protocol parameters using the Ogmios REPL. It calls the `protocolParameters()` function, which returns an object containing various protocol parameters such as minimum fees, maximum block sizes, and stake pool deposits.  The REPL requires initialization with appropriate client functions and connection settings to Ogmios server.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/packages/repl/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nogmios> await protocolParameters()\n{\n  minFeeCoefficient: 44,\n  minFeeConstant: { lovelace: 155381n },\n  maxBlockBodySize: { bytes: 90112 },\n  maxBlockHeaderSize: { bytes: 1100 },\n  maxTransactionSize: { bytes: 16384 },\n  stakeCredentialDeposit: { lovelace: 2000000n },\n  stakePoolDeposit: { lovelace: 500000000n },\n  stakePoolRetirementEpochBound: 18,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Query Protocol Parameters with Ogmios\nDESCRIPTION: This JavaScript snippet establishes a WebSocket connection to an Ogmios server and sends an RPC request to query the latest protocol parameters. It listens for a response, logs the result as a formatted JSON string to the console, and then closes the connection. It depends on the 'ws' module to provide WebSocket functionality.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params = {}, id) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n    }));\n}\n\nclient.once('open', () => {\n    rpc(\"queryLedgerState/protocolParameters\");\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n    console.log(JSON.stringify(response.result, null, 4));\n    client.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Fetch Stake Distribution using Ogmios\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the stake distribution of all stake pools from the Cardano mainnet using Ogmios. It first queries the network tip, then acquires the ledger state at that tip, and finally queries the live stake distribution. It relies on the 'ws' module for WebSocket communication.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params = {}, id) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n    }));\n}\n\nclient.once('open', () => {\n    rpc(\"queryNetwork/tip\", {})\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n\n    switch (response.method) {\n        case \"queryNetwork/tip\":\n            const point = response.result;\n            rpc(\"acquireLedgerState\", { point });\n            break;\n\n        case \"acquireLedgerState\":\n            rpc(\"queryLedgerState/liveStakeDistribution\");\n            break;\n\n        default:\n            console.log(response.result);\n            client.close();\n            break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Query Genesis Configuration - Shelley Era\nDESCRIPTION: Example JSON request to query the genesis configuration for the Shelley era.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/genesisConfiguration\",\n  \"params\": {\n    \"era\": \"shelley\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to Ogmios\nDESCRIPTION: This Node.js code illustrates how to send a transaction submission request to Ogmios via an HTTP POST request. It uses the `fetch` API to send the request, containing a JSON payload with the `submitTransaction` method and the transaction data in the `params`.  It assumes Ogmios is running locally on port 1337.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require('fetch');\n\nfetch(\"http://localhost:1337\", {\n  method: \"POST\",\n  data: {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"submitTransaction\",\n    \"params\": { \"transaction\": \"...\" }\n  }\n}).then(async response => {\n  const json = await response.json();\n\n  // do something with 'response'\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Shelley Blocks using Ogmios\nDESCRIPTION: This JavaScript code snippet demonstrates how to connect to an Ogmios WebSocket server, find the intersection with the last block of the Byron era, and stream the first 14 blocks of the Shelley era. It uses the 'ws' library for WebSocket communication and sends JSON-RPC requests to the server.  The example handles responses for both intersection finding and block streaming, printing the block data to the console.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params, id) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n    }));\n}\n\nclient.once('open', () => {\n    const lastByronBlock = {\n        slot: 4492799,\n        id: \"f8084c61b6a238acec985b59310b6ecec49c0ab8352249afd7268da5cff2a457\"\n    };\n    rpc(\"findIntersection\", { points: [lastByronBlock] }, \"find-intersection\");\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n\n    switch (response.id) {\n        case \"find-intersection\":\n            if (!response.result.intersection) { throw \"Whoops? Last Byron block disappeared?\" }\n            rpc(\"nextBlock\", {}, 14);\n            break;\n\n        default:\n            if (response.result.direction === \"forward\") {\n                console.log(response.result);\n            }\n\n            if (response.id > 0) {\n                rpc(\"nextBlock\", {}, response.id - 1);\n            } else {\n                client.close();\n            }\n            break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Pipelining Block Requests with Ogmios (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to pipeline `nextBlock` requests to Ogmios using a WebSocket client.  It bursts the server's queue with multiple requests on connection open and sends a new request for each response, optimizing bandwidth utilization. The example uses `JSON.stringify` to convert the JSON object to a string.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextBlock = JSON.stringify({\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"nextBlock\",\n});\n\nclient.on('open', () => {\n  // Burst the server's queue with a few requests.\n  for (let i = 0; i < 100; i += 1) {\n    client.send(nextBlock);\n  }\n});\n\nclient.on('message', msg => {\n  client.send(nextBlock); // Ask for next request immediately\n  doSomething(msg);\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Full Transaction Details (nextTransaction)\nDESCRIPTION: This JSON snippet demonstrates how to request full transaction details when calling the `nextTransaction` method. The `fields` parameter, set to `all`, indicates that the server should return the complete transaction data instead of just the transaction ID.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-monitor.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"nextTransaction\",\n    \"params\": {\n        \"fields\": \"all\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Ogmios REPL (Testnet)\nDESCRIPTION: Starts the Ogmios Read-Eval-Print Loop (REPL) connected to the testnet network, using a specific port. Provides an interactive environment for interacting with the Ogmios server.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nyarn repl:start --port 1337\n```\n\n----------------------------------------\n\nTITLE: WebSocket Interaction with Ogmios\nDESCRIPTION: This Node.js snippet demonstrates how to interact with Ogmios using WebSocket. It initializes a WebSocket client, sends a `findIntersection` request as a JSON string after the connection is open, and defines a handler to process the incoming response. It uses the `ws` package.  It assumes Ogmios is running locally on port 1337.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nclient.once('open', () => {\n    const request = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"findIntersection\",\n        \"params\": { \"points\": [ \"origin\" ] }\n    };\n    client.send(JSON.stringify(request));\n});\n\nclient.on('message', function(msg) {\n  const response = JSON.parse(msg);\n\n  // do something with 'response'\n});\n```\n\n----------------------------------------\n\nTITLE: Query Filtered Stake Pools\nDESCRIPTION: This JSON payload is used to query stake pools based on a list of stake pool ids. The `params` field includes a `stakePools` array, each containing an `id` of the stake pool. The method called is `queryLedgerState/stakePools`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/stakePools\",\n  \"params\": {\n    \"stakePools\": [\n      { \"id\": \"pool1pk2wzarn9mu64eel89dtg3g8h75c84jsy0q349glpsewgd7sdls\" },\n      { \"id\": \"4acf2773917c7b547c576a7ff110d2ba5733c1f1ca9cdc659aea3a56\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Log Message Types - Haskell\nDESCRIPTION: This code defines an HTTP log message type (`HttpLog`) with two possible variants: `SomeHttpLog` and `SomeHttpWarning`. It derives `Generic` and `ToJSON` instances for easy serialization and implements `HasSeverityAnnotation` to associate severity levels (Info and Warning) with each variant. This allows the logging system to filter messages based on severity.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\ndata HttpLog\n    = SomeHttpLog\n    | SomeHttpWarning\n    deriving stock (Generic)\n    deriving anyclass (ToJSON)\n\nnstance HasSeverityAnnotation HttpLog\n   getSeverityAnnotation = \\case\n       SomeHttpLog -> Info\n       SomeHttpWarning -> Warning\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request Example\nDESCRIPTION: This is an example of a valid JSON-RPC request message sent to Ogmios. It includes the `jsonrpc` version, `method` name (`findIntersection`), `params` with a list of points, and an optional `id` field for tracking requests. The `method` specifies which Ouroboros mini-protocol to use, in this case, chain synchronization.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"findIntersection\",\n    \"params\": { \"points\": [ \"origin\" ] },\n    \"id\": \"init-1234-5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Stake Pools\nDESCRIPTION: This JSON payload is used to query all stake pools. No parameters are required. The method called is `queryLedgerState/stakePools`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/stakePools\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Reward Account Summaries by Keys\nDESCRIPTION: This JSON payload queries reward account summaries based on a list of keys. The `params` field contains a `keys` array specifying the accounts to query. The keys can be stake public key hashes or bech32-encoded stake addresses. The method called is `queryLedgerState/rewardAccountSummaries`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/rewardAccountSummaries\",\n  \"params\": {\n    \"keys\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"stake_vkh10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6s39tk6l\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Ledger State Tip Request (New Ogmios API)\nDESCRIPTION: This JSON snippet represents a request to query the ledger state tip in the new Ogmios API. The method used is `queryLedgerState/tip`. This showcases the new method naming convention and structure used to retrieve information about the current tip of the Cardano ledger.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Constitutional Committee\nDESCRIPTION: Example JSON request to query the constitutional committee.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/constitutionalCommittee\",\n  \"result\": {\n    \"members\": [\n      {\n        \"id\": \"5f1b4429fe3bda963a7b70ab81135112a785afcf55ccd695b122e794\",\n        \"delegate\": {\n          \"status\": \"authorized\",\n          \"credential\": \"5aa349227e4068c85c03400396bcea13c7fd57d0ec78c604bc768fc5\"\n        },\n        \"status\": \"active\",\n        \"mandate\": {\n          \"epoch\": 379\n        }\n      },\n      {\n        \"id\": \"9393c87a66b1f7dd4f9b486a49232de92e39e18b3b20ac4a539b4df2\",\n        \"delegate\": {\n          \"status\": \"authorized\",\n          \"credential\": \"670994283668cea40218e0ef33c51aff39ca00a74f68ed428cf305ce\"\n        },\n        \"status\": \"active\",\n        \"mandate\": {\n          \"epoch\": 379\n        }\n      },\n      {\n        \"id\": \"b7bfc26ddc6718133a204af6872149b69de83dd3350f60b257e55773\",\n        \"delegate\": {\n          \"status\": \"none\"\n        },\n        \"status\": \"active\",\n        \"mandate\": {\n          \"epoch\": 379\n        }\n      }\n    ],\n    \"quorum\": \"2/3\"\n  },\n  \"id\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Query Treasury and Reserves\nDESCRIPTION: This JSON payload is used to query the treasury and reserves. No parameters are required. The method called is `queryLedgerState/treasuryAndReserves`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/treasuryAndReserves\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Era Summaries\nDESCRIPTION: Example JSON request to query the era summaries.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/eraSummaries\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Filtered Stake Pools with Voting Stake\nDESCRIPTION: This JSON payload is used to query stake pools including voting stake based on a list of stake pool ids. The `params` field includes the boolean `includeStake` set to true and a `stakePools` array, each containing an `id` of the stake pool. The method called is `queryLedgerState/stakePools`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/stakePools\",\n  \"params\": {\n    \"includeStake\": true,\n    \"stakePools\": [\n      { \"id\": \"pool1pk2wzarn9mu64eel89dtg3g8h75c84jsy0q349glpsewgd7sdls\" },\n      { \"id\": \"4acf2773917c7b547c576a7ff110d2ba5733c1f1ca9cdc659aea3a56\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Build Ogmios Packages\nDESCRIPTION: Installs project dependencies and builds the TypeScript packages. This is a necessary step before running tests or distributing the packages. The command assumes that Yarn is installed and configured.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install && \\\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Query Network Tip\nDESCRIPTION: Example JSON request to query the network tip.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ogmios standalone\nDESCRIPTION: This command runs a standalone Ogmios container, assuming a Cardano node is already running and its domain socket is available under `./ipc`. It maps port 1337 for Ogmios and mounts the IPC volume.  The command also uses arguments to specify node socket, node configuration, and host.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm \\\n  --name ogmios \\\n  -p 1337:1337 \\\n  -v ./ipc:/ipc \\\n  cardanosolutions/ogmios:latest \\\n    --node-socket /ipc/node.socket \\\n    --node-config /config/mainnet/cardano-node/config.json \\\n    --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Query Live Stake Distribution\nDESCRIPTION: Example JSON request to query the live stake distribution.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/liveStakeDistribution\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cardano-node and Ogmios in one container\nDESCRIPTION: This command starts a Cardano node with an Ogmios server in a single Docker container. It maps port 1337 for Ogmios and mounts a volume for persistent storage of the Cardano node database.  It uses the `cardanosolutions/cardano-node-ogmios:latest` image.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it \\\n  --name cardano-node-ogmios \\\n  -p 1337:1337 \\\n  -v cardano-node-ogmios-mainnet-db:/db \\\n  cardanosolutions/cardano-node-ogmios:latest\n```\n\n----------------------------------------\n\nTITLE: Transaction Metadata Transformation - JSON\nDESCRIPTION: This snippet demonstrates how transaction metadata is transformed from a detailed schema representation to a CBOR or JSON representation. The old format encoded binary data as a JSON object. The new format returns metadata as a JSON object when possible, falling back to CBOR otherwise, with the option to include both or revert to the old behavior.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"14\": {\n    \"map\": [\n      {\n        \"k\": { \"string\": \"foo\" },\n        \"v\": { \"int\": 42 }\n      },\n      {\n        \"k\": { \"string\": \"bar\" },\n        \"v\": { \"list\": [ { \"int\": 1 }, { \"int\": 2 } ] }\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"14\": {\n    \"cbor\": \"A263666F6F182A63626172820102\",\n    \"json\": {\n      \"foo\": 42,\n      \"bar\": [ 1, 2 ]\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Genesis Configuration - Alonzo Era\nDESCRIPTION: Example JSON request to query the genesis configuration for the Alonzo era.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/genesisConfiguration\",\n  \"params\": {\n    \"era\": \"alonzo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding data to JSON using derived ToJSON instances in Haskell\nDESCRIPTION: This code shows how the derived `ToJSON` instances can be used to encode data to JSON. It provides two examples using the `encode` function from the `Data.Aeson` library. The first example encodes a `Foo` value, and the second example encodes a `Log` value. Note: 'now' represents the current UTCTime.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/json-via-show/README.md#_snippet_1\n\nLANGUAGE: Haskell\nCODE:\n```\n>>> encode (Foo [42] \"str\")\n{\"Foo\":{\"foo\":[\"42\"],\"bar\":\"str\"}}\n\n>>> encode (Log True (LastUpdate now))\n{\"Log\":[true,{\"LastUpdate\":\"2021-06-05 17:17:54.710264188 UTC\"}]}\n```\n\n----------------------------------------\n\nTITLE: Adding TxMonitor support in REPL using TypeScript\nDESCRIPTION: Implements support for the _TxMonitor_ mini-protocol within the REPL environment using TypeScript.  This enhancement extends Ogmios' capabilities by enabling real-time monitoring of transactions. This is part of the new features added to Ogmios.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Support for the _TxMonitor_ mini-protocol in the REPL.\n```\n\n----------------------------------------\n\nTITLE: Requesting the Next Block with Ogmios (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to request the next block from Ogmios using the `nextBlock` method. The request does not accept any arguments. Ogmios will respond with either the next block or a rollback instruction.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"nextBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Block Fetching Method\nDESCRIPTION: This JavaScript code snippet presents an alternative approach to fetching blocks using Ogmios, where multiple 'nextBlock' requests are sent without waiting for individual responses.  It is included as a contrasting example to the initial synchronous block processing, and the snippet highlights the potential for performance optimization by removing the latency caused by waiting for each response sequentially. It requires the 'find-intersection' case in the previous snippet.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nswitch (response.id) {\n    case \"find-intersection\":\n        if (!response.result.intersection) { throw \"Whoops? Last Byron block disappeared?\" }\n        for (let i = 14; i > 0; i += 1) {\n            rpc(\"nextBlock\");\n        }\n        break;\n\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Consuming Generator Responses\nDESCRIPTION: This TypeScript example demonstrates how to consume responses from the generator created by `eventEmitterToGenerator`. It sends messages through a socket and uses `await responses.next()` to retrieve the corresponding responses in a synchronous manner. The `socket` is assumed to be an EventEmitter.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/016-event-emitter-to-generator.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst responses = eventEmitterToGenerator(socket, 'message')\n\nsocket.send('foo')\nawait responses.next()\n\nsocket.send('bar')\nawait responses.next()\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction Response - JSON\nDESCRIPTION: This JSON snippet shows a successful response from the evaluateTransaction endpoint, including a map of redeemer pointers with corresponding execution units. A redeemer pointer is a key composed of a redeemer entity tag and a 0-based index related to that entity.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"evaluateTransaction\",\n  \"result\": [{\n    \"validator\": \"spend:0\",\n    \"budget\": {\n      \"memory\": 1700,\n      \"cpu\": 476468\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Transaction Execution Units with cardano-ledger\nDESCRIPTION: This Haskell function evaluates the execution units of a transaction using the Plutus evaluator. It requires network parameters, ledger state, and the transaction itself. The function returns either a `BasicFailure` or a `RedeemerReport`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/015-script-execution-units-evaluator.md#_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nevaluateTransactionExecutionUnits ::\n  Core.PParams (AlonzoEra c) ->\n  Core.Tx (AlonzoEra c) ->\n  UTxO (AlonzoEra c) ->\n  EpochInfo m ->\n  SystemStart ->\n  Array Language CostModel ->\n  m (Either (BasicFailure c) (RedeemerReport c))\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC 2.0 Request Example (New Ogmios API)\nDESCRIPTION: This snippet showcases the JSON-RPC 2.0 request structure adopted in the new Ogmios API (v6). It utilizes a lightweight payload with fields for jsonrpc version, method (queryNetwork/genesisConfiguration), parameters (era), and a request ID.  The ID field in Ogmios's implementation of JSON-RPC 2.0 is more flexible than the specification as it accepts `string`, `number`, `object`, etc..\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/genesisConfiguration\",\n  \"params\": { \"era\": \"shelley\" },\n  \"id\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: StateQueryClient point re-acquisition (TypeScript)\nDESCRIPTION: The StateQueryClient can now re-acquire new points at will, useful for long-running clients for which previously acquired points may expire.  This ensures that queries are performed against up-to-date ledger states.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `StateQueryClient` can now re-acquire new points at will, useful for long-running clients for which previously acquired points may expire.\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum UTxO Value - Cardano Protocol Parameter\nDESCRIPTION: This code snippet demonstrates how to calculate the minimum Lovelace requirement for a transaction output using the `coinsPerUTxOByte` protocol parameter introduced in the Babbage era. The formula calculates the minimum UTxO value based on the size of the serialized output and the `coinsPerUTxOByte` constant.  It supersedes the previous `coinsPerUtxoWord` parameter.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nminUTxOValue(output) =  |serialise(output)| * coinsPerUTxOByte\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum UTxO Value\nDESCRIPTION: This code snippet illustrates how to calculate the minimum Lovelace requirement for transaction outputs using the `coinsPerUTxOByte` protocol parameter. It showcases the formula used to determine the minimum value based on the serialized output size.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nminUTxOValue(output) =  |serialise(output)| * coinsPerUTxOByte\n```\n\n----------------------------------------\n\nTITLE: Fetching Health Metrics with Curl\nDESCRIPTION: This snippet demonstrates how to fetch Ogmios' health metrics using `curl`. It sends a request to the `/health` endpoint and specifies that the response should be in JSON format. This provides real-time information about the running server, including runtime metrics.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -H 'Accept: application/json' http://localhost:1337/health\n```\n\n----------------------------------------\n\nTITLE: Reference Script Tier Price Calculation\nDESCRIPTION: Illustrates the calculation of the reference script tier price for a transaction with 80KiB of reference scripts, based on specific range, multiplier, and base values. This shows how to compute the total cost based on different size ranges.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nreferenceScriptTierPrice_{80KiB} = 25600 \\times (44 + 52.8 + 63.36) + 5120 \\times 76.032 = 4489379\n```\n\n----------------------------------------\n\nTITLE: utxo query argument type (TypeScript)\nDESCRIPTION: The `utxo` query can now accept a list `TxIn` as argument, and still supports list of `Address`. Note that lists can't be heterogeneous and it's not possible to mix `TxIn` and `Address`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `utxo` query can now accept a list `TxIn` as argument, and still supports list of `Address`. Note that lists can't be heterogeneous and it's not possible to mix `TxIn` and `Address`.\n```\n\n----------------------------------------\n\nTITLE: Ogmios Prometheus Metrics Example\nDESCRIPTION: This snippet shows an example of the Prometheus metrics exposed by the Ogmios server. These metrics provide insights into various aspects of the server's performance and state, such as active connections, CPU time, heap size, network synchronization, and tip information. These can be used for monitoring and alerting.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# TYPE ogmios_active_connections gauge\nogmios_active_connections  0.0\n# TYPE ogmios_connected gauge\nogmios_connected  1.0\n# TYPE ogmios_cpu_time counter\nogmios_cpu_time  3841629783\n# TYPE ogmios_current_epoch counter\nogmios_current_epoch  363\n# TYPE ogmios_current_heap_size gauge\nogmios_current_heap_size  390.0\n# TYPE ogmios_gc_cpu_time counter\nogmios_gc_cpu_time  3142668337\n# TYPE ogmios_max_heap_size gauge\nogmios_max_heap_size  433.0\n# TYPE ogmios_network_synchronization gauge\nogmios_network_synchronization  0.99999\n# TYPE ogmios_session_duration_max gauge\nogmios_session_duration_max  0.0\n# TYPE ogmios_session_duration_mean gauge\nogmios_session_duration_mean  0.0\n# TYPE ogmios_session_duration_min gauge\nogmios_session_duration_min  0.0\n# TYPE ogmios_slot_in_epoch counter\nogmios_slot_in_epoch  150361\n# TYPE ogmios_tip_block counter\nogmios_tip_block  7756720\n# TYPE ogmios_tip_slot counter\nogmios_tip_slot  71603161\n# TYPE ogmios_total_connections counter\nogmios_total_connections  0\n# TYPE ogmios_total_messages counter\nogmios_total_messages  0\n# TYPE ogmios_total_unrouted counter\nogmios_total_unrouted  0\n```\n\n----------------------------------------\n\nTITLE: Minimum Fee Calculation Formula\nDESCRIPTION: This snippet describes the minimum fee calculation formula in the Conway era for Cardano transactions. The formula takes into account transaction size, a constant, and a tier-price based on the total size of serialized reference scripts.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nminFee = A + B + C\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{array}{lll}\nA & = & sizeOf(transaction) \\times minFeeCoefficient  \\\\\nB & = & minFeeConstant  \\\\\nC & = & referenceScriptsTierPrice  \\\\\n\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Configuration with Address Object in TypeScript\nDESCRIPTION: The ConnectionConfig in TypeScript can now accept an optional address object, allowing for URL paths instead of only host/port, providing more flexible connection options. This enhancement enables users to configure connections with greater precision and adaptability to different network configurations.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nConnectionConfig can now take an optional `address` object, so that URL with paths can be provided instead of only host/port; allowing for more flexible connection options.\n```\n\n----------------------------------------\n\nTITLE: Ogmios Health Metrics JSON Response\nDESCRIPTION: This JSON snippet is an example response from the Ogmios `/health` endpoint. It includes runtime metrics such as total unrouted messages, total messages, runtime statistics (GC CPU time, CPU time, max heap size, current heap size), total connections, session durations, active connections, start time, last tip update, last known tip, network synchronization, current era, connection status, current epoch, slot in epoch, version, and network.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"metrics\": {\n        \"totalUnrouted\": 1,\n        \"totalMessages\": 30029,\n        \"runtimeStats\": {\n            \"gcCpuTime\": 1233009354,\n            \"cpuTime\": 81064672549,\n            \"maxHeapSize\": 41630,\n            \"currentHeapSize\": 1014\n        },\n        \"totalConnections\": 10,\n        \"sessionDurations\": {\n            \"max\": 57385,\n            \"mean\": 7057,\n            \"min\": 0\n        },\n        \"activeConnections\": 0\n    },\n    \"startTime\": \"2021-03-15T16:16:41.470782977Z\",\n    \"lastTipUpdate\": \"2021-03-15T16:28:36.853115034Z\",\n    \"lastKnownTip\": {\n        \"hash\": \"c29428f386c701c1d1ba1fd259d4be78921ee9ee6c174eac898245ceb55e8061\",\n        \"blockNo\": 5034297,\n        \"slot\": 15520688\n    },\n    \"networkSynchronization\": 0.99,\n    \"currentEra\": \"mary\",\n    \"connectionStatus\": \"disconnected\",\n    \"currentEpoch\": 164,\n    \"slotInEpoch\": 324543,\n    \"version\": \"6.0.0\",\n    \"network\": \"mainnet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Ogmios and Cardano Node stack with Docker Compose\nDESCRIPTION: This command starts the services defined in the `docker-compose.yml` file. This typically includes a Cardano node and an Ogmios server, configured to communicate with each other.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum UTxO Value with coinsPerUTxOByte\nDESCRIPTION: This snippet demonstrates how the minimum UTxO value is calculated using the `coinsPerUTxOByte` protocol parameter. It calculates the minimum Lovelace requirement for a transaction output based on the serialized size of the output and the `coinsPerUTxOByte` value. This replaces the previous `coinsPerUtxoWord` parameter with a more precise byte-based calculation.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nminUTxOValue(output) =  |serialise(output)| * coinsPerUTxOByte\n```\n\n----------------------------------------\n\nTITLE: Adding `unsafeMetatumAsJSON` Helper Function in TypeScript\nDESCRIPTION: Introduces a new helper function `unsafeMetatumAsJSON` in the TypeScript client. This function converts a detailed metadata schema into plain JavaScript, where possible, primarily designed for CIP-0025 metadata formats. It's noted as 'unsound' for general cases because not all on-chain metadata can be represented as JavaScript objects.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd a new helper function `unsafeMetatumAsJSON` which converts a detailed metadata schema into plain JavaScript, whenever possible.\n  For example:\n\n  `{ \"list\": [ { \"string\": \"foo\" }, { \"int\": 42 } ] }` → `[\"foo\", 42]`\n\n  This should work for any [CIP-0025](https://cips.cardano.org/cips/cip25/) metadata, and a few other formats. Yet it is _unsound_ in the general case since not every on-chain metadata can actually be represented as JavaScript objects.\n```\n\n----------------------------------------\n\nTITLE: Query Projected Rewards by Keys\nDESCRIPTION: This JSON payload is used to query projected rewards based on a list of stake keys. The `params` field includes a `keys` array containing the stake keys to be queried.  The stake keys can be stake public key hashes or bech32-encoded stake addresses. The method called is `queryLedgerState/projectedRewards`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/projectedRewards\",\n  \"params\": {\n    \"keys\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"stake_vkh10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6s39tk6l\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EvaluateTx Error Handling\nDESCRIPTION: Fixes the parsing of `ScriptFailures` returned by the `evaluateTx` command. Previously, the client would throw `undefined` upon encountering such errors; this fix ensures that errors are properly transcribed as `EvaluateTxError`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: LedgerStateQueryClient StakePools Filter in TypeScript\nDESCRIPTION: The `stakePools` method on the `LedgerStateQueryClient` in TypeScript now supports an extra `filter`. The filters were available on the standalone query but not via the client somehow. This change provides filtering capabilities directly through the client.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `stakePools` method on the `LedgerStateQueryClient` now supports an extra `filter`. The filters were available on th standalone query but not via the client somehow.\n```\n\n----------------------------------------\n\nTITLE: Querying Epoch Information with Ogmios REPL (JavaScript)\nDESCRIPTION: This snippet demonstrates how to query the current epoch using the Ogmios REPL. It uses the `epoch()` function to retrieve the epoch number. The REPL must be initialized with the necessary client functions and connection to the Ogmios server.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/packages/repl/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nogmios> await epoch()\n256\n```\n\n----------------------------------------\n\nTITLE: Query Projected Rewards by Scripts\nDESCRIPTION: This JSON payload is used to query projected rewards based on a list of scripts. The `params` field includes a `scripts` array containing the script hashes to be queried. The method called is `queryLedgerState/projectedRewards`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/projectedRewards\",\n  \"params\": {\n    \"scripts\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"script10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6snywdma\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding isBabbageProtocolParameters helper function in TypeScript\nDESCRIPTION: Introduces a new helper function, `isBabbageProtocolParameters`, in TypeScript and expands existing helper functions to support Babbage. This addition, part of pull request #234, enhances protocol parameter handling for the Babbage era within the Ogmios project.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// New `isBabbageProtocolParameters` helper function, and extended support of the existing ones to Babbage.\n```\n\n----------------------------------------\n\nTITLE: Installing @cardano-ogmios/client\nDESCRIPTION: This command installs the @cardano-ogmios/client package using yarn, making it available for use in your project.  This package provides a client interface for interacting with Ogmios.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/packages/client/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn add @cardano-ogmios/client\n```\n\n----------------------------------------\n\nTITLE: Allow `additionalUtxoSet` in REPL in TypeScript\nDESCRIPTION: Allows `additionalUtxoSet` to be passed as an argument in the REPL (Read-Eval-Print Loop) within the TypeScript environment. This enhances the interactive debugging and testing capabilities.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nAllow `additionalUtxoSet` to be passed as argument in the repl.\n```\n\n----------------------------------------\n\nTITLE: Fixing ScriptFailures parsing in evaluateTx with TypeScript\nDESCRIPTION: Fixes the parsing of `ScriptFailures` returned by the `evaluateTx` command in TypeScript. Previously, the client would throw `undefined` when such errors occurred.  Now, errors are correctly transcribed as `EvaluateTxError`, providing more informative error handling.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fixed parsing of `ScriptFailures` coming out of the `evaluateTx` command.\n```\n\n----------------------------------------\n\nTITLE: Minimum Fee Calculation Formula - Conway Era\nDESCRIPTION: Explains the minimum fee calculation formula in the Conway era for Cardano transactions. It highlights the factors A, B, and C, where C represents the reference scripts tier price, based on the size of serialized reference scripts.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nminFee = A + B + C\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{array}{lll}\nA & = & sizeOf(transaction) \\times minFeeCoefficient  \\\\\nB & = & minFeeConstant  \\\\\nC & = & referenceScriptsTierPrice  \\\\\n\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Running Application with Tracers - Haskell\nDESCRIPTION: This code demonstrates how to use the configured tracers within the application. It uses `withStdoutTracer` to set up tracers that output to standard output, passing in an empty configuration and a lambda that receives the `tracers` record.  It then runs `myHttpApplication` and `myDbApplication` concurrently, passing each the corresponding tracer.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_4\n\nLANGUAGE: Haskell\nCODE:\n```\nmain :: IO ()\nmain = do\n    withStdoutTracer mempty emptyConfiguration $ \\tracers -> do\n        concurrently_\n            (myHttpApplication (tracerHttp tracers))\n            (myDbApplication (tracerDb  tracers))\n```\n\n----------------------------------------\n\nTITLE: State Queries Tip Behavior (TypeScript)\nDESCRIPTION: State queries (resp. the `StateQueryClient`) now automatically runs queries against the last known tip if no explicit point is provided. It used to acquire a point on the first query which would eventually become too old. The behavior is now equivalent to acquiring a new point on **every** query!\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nState queries (resp. the `StateQueryClient`) now automatically runs queries against the last known tip if no explicit point is provided. It used to acquire a point on the first query which would eventually become too old. The behavior is now equivalent to acquiring a new point on **every** query!\n```\n\n----------------------------------------\n\nTITLE: Query Stake Pools with Voting Stake\nDESCRIPTION: This JSON payload is used to query all stake pools including voting stake. The `params` field includes the boolean `includeStake` which should be set to `true`. The method called is `queryLedgerState/stakePools`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/stakePools\",\n  \"params\": {\n    \"includeStake\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TxMonitor mini-protocol support in REPL\nDESCRIPTION: This snippet highlights the addition of support for the `TxMonitor` mini-protocol within the REPL (Read-Eval-Print Loop) environment in TypeScript. This enhancement allows developers to monitor transactions more effectively during development and debugging.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nSupport for the _TxMonitor_ mini-protocol in the REPL.\n```\n\n----------------------------------------\n\nTITLE: Fixing `additionalUtxoSet` Ignored in `TxSubmissionClient` in TypeScript\nDESCRIPTION: Fixes a bug where the `additionalUtxoSet` was being ignored in the `TxSubmissionClient` of the TypeScript client. This ensures that the additional UTxO set is correctly utilized during transaction submission.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed `additionalUtxoSet` being ignored in the `TxSubmissionClient` of the TypeScript client.\n```\n\n----------------------------------------\n\nTITLE: Fixing number data-types as bigint in TypeScript\nDESCRIPTION: Corrects data-types in TypeScript where fields were incorrectly parsed as `number` instead of `bigint`. This change addresses issue #274 and ensures accurate representation of large integer values. While technically an internal breaking change, the TypeScript schema already correctly indicated 'bigint', minimizing impact.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Corrected data-types from number to bigint to address issue #274\n```\n\n----------------------------------------\n\nTITLE: Fixed proposedProtocolParameters query (TypeScript)\nDESCRIPTION: Fixed `proposedProtocolParameters` query. All fields are actually required AND, more importantly, it can now return either Shelley protocol parameters or, Alonzo protocol parameters.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed `proposedProtocolParameters` query. All fields are actually required AND, more importantly, it can now return either Shelley protocol parameters or, Alonzo protocol parameters.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Metadatum Conversion\nDESCRIPTION: Adds a helper function `unsafeMetatumAsJSON` to convert a detailed metadata schema into plain JavaScript.  This function is intended for CIP-0025 metadata and other specific formats. It is noted as 'unsound' for general on-chain metadata.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n`{ \"list\": [ { \"string\": \"foo\" }, { \"int\": 42 } ] }` → `[\"foo\", 42]`\n```\n\n----------------------------------------\n\nTITLE: Fixing `TxMonitorClient` Error in TypeScript\nDESCRIPTION: Fixes an issue where `TxMonitorClient`'s `nextTx` method was wrongly throwing an error when called with no arguments. The method signature has been slightly reworked for better call-site usage.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nFix `TxMonitorClient`'s `nextTx` wrongly throwing an error when called with no argument. The signature of that method has also been reworked slightly to provide better usage at call-site.\n```\n\n----------------------------------------\n\nTITLE: Lint Ogmios Packages\nDESCRIPTION: Runs the linter on the Ogmios TypeScript packages, checking for code style and potential errors. This helps maintain code quality and consistency.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: JSON deserialization fix in TypeScript\nDESCRIPTION: Fix JSON deserialization of metadata on web platforms. This update resolves issues related to deserializing JSON metadata specifically in web-based environments. Ensures that metadata is correctly parsed and utilized by the application.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nFix JSON deserialization of metadata on web platforms.\n```\n\n----------------------------------------\n\nTITLE: Reference Script Tier Pricing\nDESCRIPTION: Describes the tiered pricing model for reference scripts based on their size in bytes, used for minimum fee calculation. It shows how the cost per byte increases as the total size of reference scripts grows, according to a defined range, multiplier, and base.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$[    0;  range[$\n$\nfloor sizeOf(referenceScripts) \\times base\\lfloor$\n$[range;  2 \\times range[$\n$\nfloor sizeOf(referenceScripts) \\times multiplier \\times base\\lfloor$\n$[2 \\times range; 3 \\times range[$\n$\nfloor sizeOf(referenceScripts) \\times {multiplier}^2 \\times base\\lfloor$\n$[3 \\times range; 4 \\times range[$\n$\nfloor sizeOf(referenceScripts) \\times {multiplier}^3 \\times base\\lfloor$\n...                                       | ...\n$[n \\times range; (n + 1) \\times range [$ | $\\rfloor sizeOf(referenceScripts) \\times {multiplier}^n \\times base\\lfloor$\n```\n\n----------------------------------------\n\nTITLE: Docker Health Check Command\nDESCRIPTION: This Dockerfile snippet shows how to use the `ogmios health-check` command to monitor a running Ogmios server. It sets up a health check that runs every 10 seconds, times out after 5 seconds, and retries once. This is useful for container orchestration systems like Docker to automatically restart unhealthy containers.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_13\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Delegation\nDESCRIPTION: Shows the JSON structure of constitutional committee certificates after the schema adjustment. It includes the type, member ID, and delegation details, including the delegate's status and ID.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeDelegation\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"delegate\": {\n    \"status\": \"authorized\",\n    \"id\": \"000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script: StartsAt Transformation - JSON\nDESCRIPTION: This code shows the transformation of the 'startsAt' condition in native scripts, defining the slot from which the script is valid.  The older format uses key 'startsAt' with a string representation of the slot number. The new format has the 'clause' field set to 'after', and a field 'slot' that represents the starting slot.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startsAt\": \"<slot>\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"after\",\n  \"slot\": \"<slot>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate: Stake Credential Deregistration Transformation - JSON\nDESCRIPTION: This code shows the update in stake credential deregistration certificates. The old style utilized 'stakeKeyDeregistration' as the key with the credential digest as the value.  The new representation uses 'type' equal to 'stakeCredentialDeregistration' and the credential digest is now a value to the key 'credential'.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stakeKeyDeregistration\": \"<credential-digest>\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakeCredentialDeregistration\",\n  \"credential\": \"<credential-digest>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Prometheus Metrics with Curl\nDESCRIPTION: This snippet shows how to fetch Prometheus metrics from the Ogmios server using `curl`. It sends a simple GET request to the `/metrics` endpoint to retrieve the metrics in Prometheus format. These metrics can then be scraped by a Prometheus server for monitoring.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:1337/metrics\n```\n\n----------------------------------------\n\nTITLE: Start Testnet Cardano Node and Ogmios Server\nDESCRIPTION: Starts the Cardano node and Ogmios server configured for the testnet network. Requires appropriate testnet configuration files and access to the testnet network.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nyarn testnet:up\n```\n\n----------------------------------------\n\nTITLE: Certificate: Stake Credential Registration Transformation - JSON\nDESCRIPTION: This snippet illustrates the transformation of the stake credential registration certificate format. The old format uses 'stakeKeyRegistration' as the key, with the credential digest as value. The new format adds 'type' with value 'stakeCredentialRegistration', and the credential digest under the key 'credential'.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stakeKeyRegistration\": \"<credential-digest>\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakeCredentialRegistration\",\n  \"credential\": \"<credential-digest>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Testnet Cardano Node and Ogmios Server\nDESCRIPTION: Stops the Cardano node and Ogmios server that are configured for the testnet network. Assumes the node and server were started with the `yarn testnet:up` command.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nyarn testnet:down\n```\n\n----------------------------------------\n\nTITLE: Native Script: NOf Transformation - JSON\nDESCRIPTION: This example illustrates the transformation of the 'NOf' condition (requiring at least N of the provided scripts to be satisfied) in native scripts. The old approach used a JSON object with the 'NOf' key containing an object whose key represents the required integer and value is an array of native scripts.  The new format uses the 'clause' field set to 'some', an 'atLeast' field for the number, and 'from' for the array of native scripts.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NOf\": {\n    \"<integer>\": [ \"<native-script>\" ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"some\",\n  \"atLeast\": \"<integer>\",\n  \"from\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata No Schema Example - JSON\nDESCRIPTION: This JSON code snippet shows an example of metadata encoded using the \"no-schema\" format. This format is a direct conversion of compatible CBOR objects to JSON and is the default format used by Ogmios.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/configuring.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Certificate: Stake Delegation Transformation - JSON\nDESCRIPTION: This snippet displays the transformation of the stake delegation certificate format.  The old format nested the 'stakeDelegation' details under the 'stakeDelegation' key.  The new format introduces the 'type' field set to 'stakeDelegation', 'credential' stores the credential digest, and 'stakePool' with the id.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stakeDelegation\": {\n    \"delegate\": \"<credential-digest>\",\n    \"delegatee\": \"<stake-pool-id>\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakeDelegation\",\n  \"credential\": \"<credential-digest>\",\n  \"stakePool\": {\n    \"id\": \"<stake-pool-id>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Emitter to Generator Function\nDESCRIPTION: This TypeScript function converts an event emitter into an asynchronous generator. It uses two queues to manage incoming events and listeners, ensuring that events are yielded in the order they are received. It relies on the `EventEmitter` and requires an `eventName` to listen to.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/016-event-emitter-to-generator.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport function eventEmitterToGenerator (eventEmitter: EventEmitter, eventName: string) {\n  const events = [] as Event[]\n  const listeners = [] as ((e: Event) => void)[]\n\n  eventEmitter.on(eventName, async (e: Event) => {\n    if (listeners.length > 0) {\n      listeners.shift()(e)\n    } else {\n      events.push(e)\n    }\n  })\n\n  return async function * generator () {\n    while (true) {\n      yield new Promise((resolve) => {\n        if (events.length > 0) {\n          resolve(events.shift())\n        } else {\n          listeners.push(resolve)\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script: All Transformation - JSON\nDESCRIPTION: This code snippet demonstrates how an 'all' condition in a native script is transformed. The old format used a JSON object with an 'all' key containing an array of native scripts. The new format uses a `clause` field set to \"all\" and a `from` field containing an array of native scripts.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": [ \"<native-script>\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"all\",\n  \"from\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate: Stake Pool Registration Transformation - JSON\nDESCRIPTION: This snippet represents the updated style for stake pool registration certificates. The old implementation nested the stake pool parameters under the key 'poolRegistration'.  The new method utilizes 'type' with value 'stakePoolRegistration', and a nested element 'stakePool' with 'id' and 'parameters'.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"poolRegistration\": \"<stake-pool-parameters>\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakePoolRegistration\",\n  \"stakePool\": {\n    \"id\": \"<stake-pool-id>\",\n    \"parameters\": \"<stake-pool-parameters>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Ogmios Tests\nDESCRIPTION: Starts the testnet environment, and runs tests in a separate terminal. This command checks the functionality and integration of the Ogmios TypeScript client packages.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn testnet:up\n```\n\nLANGUAGE: console\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Fixing ScriptFailures parsing\nDESCRIPTION: This snippet addresses an issue where parsing `ScriptFailures` from the `evaluateTx` command resulted in an `undefined` error. The fix ensures that these errors are now properly transcribed as `EvaluateTxError` in TypeScript.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed parsing of `ScriptFailures` coming out of the `evaluateTx` command.\n```\n\n----------------------------------------\n\nTITLE: Native Script: Any Transformation - JSON\nDESCRIPTION: This snippet shows the conversion of an 'any' condition in native scripts. The previous representation used a JSON object with the key 'any' and an array of native scripts as its value.  The new representation uses the 'clause' field set to 'any' and 'from' contains the array of native scripts.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"any\": [ \"<native-script>\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"any\",\n  \"from\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pkg REPL Ogmios\nDESCRIPTION: Creates a package for the REPL. It packages the REPL into a distributable format.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nyarn repl:pkg\n```\n\n----------------------------------------\n\nTITLE: Native Script: Signature Transformation - JSON\nDESCRIPTION: This code snippet illustrates the transformation of a native script signature from the old format to the new format in JSON. The old format simply used a credential digest string. The new format wraps the credential digest within a JSON object containing a `clause` field set to \"signature\" and a `from` field containing the credential digest.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"<credential-digest>\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"signature\",\n  \"from\": \"<credential-digest>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate: Stake Pool Retirement Transformation - JSON\nDESCRIPTION: This example exhibits the transformation of the stake pool retirement certificate format. The original design nests poolId and retirementEpoch inside 'poolRetirement'. The updated design has 'type' with value 'stakePoolRetirement', and a 'stakePool' object containing 'id' and 'retirementEpoch'.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"poolRetirement\": {\n    \"poolId\": \"<stake-pool-id>\",\n    \"retirementEpoch\": \"<epoch>\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakePoolRetirement\",\n  \"stakePool\": {\n    \"id\": \"<stake-pool-id>\",\n    \"retirementEpoch\": \"<epoch>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TxMonitor Support\nDESCRIPTION: Introduces support for the _TxMonitor_ mini-protocol in the Ogmios REPL. This enables developers to monitor transaction activity and interact with the Ogmios node through the REPL.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Updating TypeScript Target to ES2020\nDESCRIPTION: Updates the target ECMAScript version for the TypeScript client to ES2020, potentially enabling newer language features and optimizations.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nNow targets ES2020.\n```\n\n----------------------------------------\n\nTITLE: Query Projected Rewards by Stake\nDESCRIPTION: This JSON payload is used to query projected rewards based on a given stake amount. The `params` field includes a `stake` array containing the stake value to be queried. The method called is `queryLedgerState/projectedRewards`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/projectedRewards\",\n  \"params\": {\n    \"stake\": [\n      1000000\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ogmios with Homebrew\nDESCRIPTION: This snippet demonstrates how to install Ogmios using the Homebrew package manager on macOS. It first adds the CardanoSolutions tap and then installs the Ogmios package.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nbrew tap CardanoSolutions/formulas\nbrew install ogmios\n```\n\n----------------------------------------\n\nTITLE: SubmitTx Error Handling (TypeScript)\nDESCRIPTION: `SubmitTx` no-longer returns Byron errors. Consequently, submit errors are no longer scoped under `errors.byron` or `errors.shelley` but simply `errors`. This simplifies error handling in the client.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n`SubmitTx` no-longer returns Byron errors. Consequently, submit errors are no longer scoped under `errors.byron` or `errors.shelley` but simply `errors`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels - Ogmios\nDESCRIPTION: This example demonstrates how to configure different logging levels for Ogmios components using command-line options. It shows disabling health logging and setting the websocket log level to debug.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/configuring.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nogmios --log-level-health Off \\\n       --log-level-websocket Debug \\\n       ...\n```\n\n----------------------------------------\n\nTITLE: Fixing Data Types\nDESCRIPTION: Addresses a bug where fields were parsed as `number` instead of `bigint`. This fix ensures that the data types are correctly represented according to the TypeScript schema, preventing potential issues with those using `number` where `bigint` is now expected.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Cloning Ogmios repository for Docker Compose\nDESCRIPTION: This command clones the Ogmios repository to get the `docker-compose.yml` file for orchestrating Ogmios and a Cardano node. It uses `git clone` with shallow cloning options to speed up the process.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git\n$ cd ogmios\n```\n\n----------------------------------------\n\nTITLE: Validating JSON schema with validateToJSON in Haskell\nDESCRIPTION: This Haskell code snippet demonstrates how to use the `validateToJSON` function from the `Test.Hspec.Json.Schema` module to validate instances of a custom data type (`MyDataType`) against a JSON schema defined in a file (`schema.json`). The `arbitrary` function is used to generate arbitrary instances of `MyDataType` for testing. The path to schema definition should be given as JSON pointer fragment. The code depends on the `Test.Hspec` and `Test.Hspec.Json.Schema` libraries.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/hspec-json-schema/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\n{-# LANGUAGE TypeApplications #-}\n\nmodule MyModule\n    ( spec\n    ) where\n\nimport Test.Hspec\n    ( Spec, SpecWith, describe )\nimport Test.Hspec.Json.Schema\n    ( validateToJSON )\n\nspec :: Spec\nspec = do\n    describe \"MyDataType\" $\n      validateToJSON (arbitrary @MyDataType) \"schema.json#/definitions/MyDataType\"\n\ninstance Arbitrary MyDataType\n    arbitrary = {- ... -}\n```\n\n----------------------------------------\n\nTITLE: Cabal configuration for external libsodium with VRF\nDESCRIPTION: This snippet configures cabal to use an external libsodium library with VRF support.  It needs to be added/created to cabal.project.local.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_1\n\nLANGUAGE: cabal\nCODE:\n```\npackage cardano-crypto-praos\n  flags: -external-libsodium-vrf\n```\n\n----------------------------------------\n\nTITLE: Installing Ogmios executable with Cabal\nDESCRIPTION: This snippet shows how to install the Ogmios executable using Cabal, copying it to a location accessible from the command line.  This avoids the need to run Ogmios through cabal.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ cabal install ogmios:exe:ogmios --install-method=copy --overwrite-policy=always\n$ ogmios --help\n```\n\n----------------------------------------\n\nTITLE: Defining Application Tracers - Haskell\nDESCRIPTION: This code defines a `Tracers` record that holds tracers for different application components (HTTP and DB). `TracerHKD` allows customization of tracer types, and when `kind` is `Concrete`, it simplifies to `Tracer m a`. This structure enables the application to have separate, configurable tracers for each component, facilitating structured logging.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_2\n\nLANGUAGE: Haskell\nCODE:\n```\ndata Tracers m (kind :: TracerDefinition) = Tracers\n    { tracerHttp :: TracerHKD kind (Tracer m HttpLog)\n    , tracerDb   :: TracerHKD kind (Tracer m DbLog)\n    } deriving stock (Generic)\n```\n\n----------------------------------------\n\nTITLE: Cabal configuration for PCRE on macOS\nDESCRIPTION: This snippet configures cabal with extra include and library directories for PCRE (Perl Compatible Regular Expressions) on macOS, specifically when installed via Homebrew. It should be added to cabal.project.local.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_4\n\nLANGUAGE: cabal\nCODE:\n```\npackage pcre-light\n  extra-include-dirs: /opt/homebrew/opt/pcre/include\n  extra-lib-dirs: /opt/homebrew/opt/pcre/lib\n```\n\n----------------------------------------\n\nTITLE: Fixing Transaction Response Identification in TypeScript\nDESCRIPTION: Addresses an issue in the TypeScript client where transaction responses were incorrectly identified. The fix uses the `method` field for identification instead of relying on the mirror to prevent conflicts with other requests.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixes identification of submit/evaluate transaction responses, now using the `method` field instead of relying on the mirror. Should fix clashes with other requests.\n```\n\n----------------------------------------\n\nTITLE: Building Ogmios server with Cabal\nDESCRIPTION: This snippet shows how to build the Ogmios server using Cabal. It first updates the Cabal package list and then builds the Ogmios executable.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cabal update\n$ cabal build ogmios:exe:ogmios\n```\n\n----------------------------------------\n\nTITLE: Building Hugo documentation\nDESCRIPTION: This snippet shows how to build the Ogmios documentation using Hugo. The first command builds the documentation to the `public` folder, while the second starts a development server to preview the documentation.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nhugo\n\n# or, alternatively for a development setup on http://localhost:1313\n\nhugo serve\n```\n\n----------------------------------------\n\nTITLE: Running Ogmios with Docker Compose on Preprod Network\nDESCRIPTION: This command runs cardano-node and ogmios on the preprod network, listening to tcp/1338. It sets the NETWORK and OGMIOS_PORT environment variables and uses the `--project-name` flag to isolate the preprod database.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ NETWORK=preprod OGMIOS_PORT=1338 docker-compose --project-name cardano-ogmios-preprod up\n```\n\n----------------------------------------\n\nTITLE: Query Ledger State Tip Response (New Ogmios API)\nDESCRIPTION: This JSON snippet illustrates the response format for a `queryLedgerState/tip` request.  The response includes the `jsonrpc` version, the `method` name mirroring the request for context, and a `result` object containing the `slot` and `id` (block hash) of the tip. The response includes the method used in the request, making it easier to link responses to their originating queries.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/tip\",\n  \"result\": {\n    \"slot\": 1234,\n    \"id\": \"1234567890abcdef\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ogmios server with Cabal\nDESCRIPTION: This snippet demonstrates how to run the Ogmios server using Cabal's `run` command, displaying the help message.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cabal run ogmios:exe:ogmios -- --help\n```\n\n----------------------------------------\n\nTITLE: Updating Git submodules\nDESCRIPTION: This snippet initializes and updates all git submodules in the project. This is required for running unit tests.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ git submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Fixing browser detection for IsomorphicWebSocket in TypeScript\nDESCRIPTION: Addresses a bug in the `IsomorphicWebSocket` abstraction related to browser detection. This fix, linked to issue #273, ensures proper handling of WebSocket connections in different browser environments, improving compatibility and reliability. The code snippet provides a comment summarizing this TypeScript fix.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fixed browser detection for the IsomorphicWebSocket abstraction. See #273\n```\n\n----------------------------------------\n\nTITLE: Query Network Tip\nDESCRIPTION: This JSON payload is used to query the network tip. No parameters are required. The method called is `queryNetwork/tip`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Block Height\nDESCRIPTION: Example JSON request to query the block height.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/blockHeight\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Metadata to JSON in TypeScript\nDESCRIPTION: This TypeScript code snippet introduces a helper function, `unsafeMetatumAsJSON`, which attempts to convert a detailed metadata schema into plain JavaScript objects. It aims to simplify CIP-0025 metadata but can be unsound in general cases where on-chain metadata cannot be represented as JavaScript objects.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n`{ \"list\": [ { \"string\": \"foo\" }, { \"int\": 42 } ] }` → `[\"foo\", 42]`\n```\n\n----------------------------------------\n\nTITLE: Cleanup Ogmios Project\nDESCRIPTION: Removes temporary files and build artifacts from the Ogmios project. This can help free up disk space and ensure a clean build environment.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nyarn cleanup\n```\n\n----------------------------------------\n\nTITLE: Ogmios Health Check Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to use the `ogmios health-check` command to monitor a running Ogmios server within a Docker container. It sets up a health check that runs every 10 seconds, with a timeout of 5 seconds and 1 retry. This is useful for automated monitoring and restarting of the container if the health check fails.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check\n```\n\n----------------------------------------\n\nTITLE: Query Epoch\nDESCRIPTION: Example JSON request to query the current epoch.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/epoch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pack Ogmios Packages\nDESCRIPTION: Creates a tarball archive of the Ogmios packages for distribution. The script is platform dependent.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n./scripts/pack.sh\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Certificate Schema Change (Before)\nDESCRIPTION: This snippet shows the schema of the constitutional committee hot key registration certificate before the change in Ogmios version 6.3.0. It includes the type, member ID, and hot key.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeHotKeyRegistration\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"hotKey\": \"0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DB Log Message Types - Haskell\nDESCRIPTION: This code defines a DB log message type (`DbLog`) with a single variant: `SomeDbLog`. It derives `Generic` and `ToJSON` instances for easy serialization. Although it mentions defining `HasSeverityAnnotation` instance for `HttpLog` again, this appears to be a documentation mistake and should have been `DbLog`. This allows the logging system to filter messages based on severity. It is assumed it's meant for DbLog.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_1\n\nLANGUAGE: Haskell\nCODE:\n```\ndata DbLog = SomeDbLog\n    deriving stock (Generic)\n    deriving anyclass (ToJSON)\n\nnstance HasSeverityAnnotation HttpLog\n   getSeverityAnnotation = \\case\n       SomeHttpLog -> Info\n       SomeHttpWarning -> Warning\n```\n\n----------------------------------------\n\nTITLE: Blocks' Properties Update\nDESCRIPTION: Blocks' properties (`header`, `headerHash`, `body`) are no longer marked as _optional_ in the JSON specification and TypeScript SDK. This change enforces that these properties are always present in block data.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Ogmios Health Check in Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to use the `ogmios health-check` command to monitor a running Ogmios server.  It configures a health check with a specified interval, timeout, and retries. This is useful for automated monitoring and recovery in containerized environments.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_25\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Certificate Schema Change (After)\nDESCRIPTION: This snippet shows the schema of the constitutional committee delegation certificate after the change in Ogmios version 6.3.0. It includes the type, member ID, delegate status, and delegate ID.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeDelegation\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"delegate\": {\n    \"status\": \"authorized\",\n    \"id\": \"000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving ToJSON instances via Show in Haskell\nDESCRIPTION: This code demonstrates how to use the `DerivingVia` extension to automatically derive `ToJSON` instances for data types that have `Show` instances. It defines three data types (`Foo`, `Log`, `LastUpdate`) and uses `deriving ToJSON via ToJSONViaShow` to generate the `ToJSON` instances automatically.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/json-via-show/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\n{-# LANGUAGE DerivingVia #-}\n\ndata Foo = Foo\n    { foo :: [Int]\n    , bar :: String\n    }\n    deriving stock Show\n    deriving ToJSON via ToJSONViaShow Foo\n\ndata Log = Log Bool LastUpdate\n    deriving stock Show\n    deriving ToJSON via ToJSONViaShow Log\n\nnewtype LastUpdate = LastUpdate\n    { unLastUpdate :: UTCTime\n    }\n    deriving stock Show\n    deriving ToJSON via ToJSONViaShow LastUpdate\n```\n\n----------------------------------------\n\nTITLE: Example JSON output from ogmios server\nDESCRIPTION: This JSON snippet demonstrates log output from an ogmios server, showing various events like network parameters, server status, health ticks, and WebSocket activity. It provides examples of nested data structures and different data types, illustrating the automatic JSON derivation functionality.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/json-via-show/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[ogmios:Info:5] [2021-06-06 13:44:58.80 UTC] {\"OgmiosNetwork\":{\"NetworkParameters\":{\"networkMagic\":\"1097911063\",\"systemStart\":[\"2019-07-24\",\"20:20:16\",{\"UTC\":[]}],\"slotsPerEpoch\":\"21600\"}}}\n\n[ogmios:Info:14] [2021-06-06 13:44:58.80 UTC] {\"OgmiosServer\":{\"ServerStarted\":{\"nodeSocket\":\"/home/ktorz/Documents/IOHK/networks/testnet/node.socket\",\"dashboardUrl\":\"http://127.0.0.1:1338/\"}}}\n\n[ogmios:Info:22] [2021-06-06 13:44:58.81 UTC] {\"OgmiosHealth\":{\"HealthTick\":{\"Health\":{\"metrics\":{\"totalUnrouted\":\"0\",\"totalMessages\":\"0\",\"runtimeStats\":{\"gcCpuTime\":\"0\",\"cpuTime\":\"5970744\",\"maxHeapSize\":\"0\",\"currentHeapSize\":\"0\"},\"totalConnections\":\"0\",\"sessionDurations\":{\"max\":\"0.0\",\"mean\":\"0.0\",\"min\":\"0.0\"},\"activeConnections\":\"0\"},\"startTime\":\"2021-06-06 13:44:58.807426705 UTC\",\"lastTipUpdate\":[\"2021-06-06\",\"13:44:58.810905762\",{\"UTC\":[]}],\"lastKnownTip\":[{\"SlotNo\":\"28617866\"},\"4cf6200d4f37f106c173612cb1473d41b93788d000f5450d2996b1e4a4b18315\",{\"BlockNo\":\"2648278\"}],\"networkSynchronization\":\"0.99999\",\"currentEra\":\"Mary\"}}}}\n\n[ogmios:Info:533] [2021-06-06 13:45:39.80 UTC] {\"OgmiosWebSocket\":{\"WebSocketConnectionEnded\":\"User-Agent unknown\"}}\n[ogmios:Info:548] [2021-06-06 13:45:40.31 UTC] {\"OgmiosWebSocket\":{\"WebSocketConnectionAccepted\":{\"mode\":\"FullSerialization\",\"userAgent\":\"User-Agent unknown\"}}}\n\n[ogmios:Info:541] [2021-06-06 13:45:39.80 UTC]{\"OgmiosWebSocket\":{\"WebSocketClient\":{\"TrTxSubmission\":{\"Send\":[{\"ClientAgency\":{\"TokIdle\":[]}},{\"MsgSubmitTx\":{\"HardForkGenTx\":{\"S\":{\"S\":{\"S\":{\"Z\":{\"TxRaw\":{\"_wits\":{\"txWitsBytes\":\"\\\\161\\\\NUL\\\\129\\\\130X \\\\207\\\\DC4\\\\209\\\\200\\\\&4\\\\206\\\\202\\\\184\\\\225\\\\245D{\\\\222U\\\\EMF\\\\128@W3(%\\\\226nd\\\\238C\\\\a\\\\157\\\\212\\\\b5X@$|^`\\\\146\\\\DC10\\\\250\\\\GS\\\\248\\\\NUL\\\\211\\\\DLE\\\\243\\\\151\\\\136\\\\244\\\\174\\\\EOT\\\\131u4\\\\173\\\\230rxu\\\\219\\\\184r\\\\CAN\\\\245\\\\180^\\\\150\\\\204\\\\209%\\\\161LE\\\\DLE\\\\232\\\\SYN\\\\148\\\\231\\\\170\\\\211\\\\186\\\\138$E\\\\138\\\\175ko\\\\156O\\\\SUBH\\\\SOH\\\\190\\\\186\\\\ENQ\",\"addrWits'\":[{\"WitVKey'\":{\"wvkKey'\":{\"VerKeyEd25519DSIGN\":{\"PublicKey\":\"\\\\207\\\\DC4\\\\209\\\\200\\\\&4\\\\206\\\\202\\\\184\\\\225\\\\245D{\\\\222U\\\\EMF\\\\128@W3(%\\\\226nd\\\\238C\\\\a\\\\157\\\\212\\\\b5\"}},\"wvkSig'\":{\"SigEd25519DSIGN\":{\"Signature\":\"$|^`\\\\146\\\\DC10\\\\250\\\\GS\\\\248\\\\NUL\\\\211\\\\DLE\\\\243\\\\151\\\\136\\\\244\\\\174\\\\EOT\\\\131u4\\\\173\\\\230rxu\\\\219\\\\184r\\\\CAN\\\\245\\\\180^\\\\150\\\\204\\\\209%\\\\161LE\\\\DLE\\\\232\\\\SYN\\\\148\\\\231\\\\170\\\\211\\\\186\\\\138$E\\\\138\\\\175ko\\\\156O\\\\SUBH\\\\SOH\\\\190\\\\186\\\\ENQ\"}},\"wvkKeyHash\":\"ff7b4521589238cfb9c26870edfa782541e61544474422d849ceb103\",\"wvkBytes\":\"\\\\130X \\\\207\\\\DC4\\\\209\\\\200\\\\&4\\\\206\\\\202\\\\184\\\\225\\\\245D{\\\\222U\\\\EMF\\\\128@W3(%\\\\226nd\\\\238C\\\\a\\\\157\\\\212\\\\b5X@$|^`\\\\146\\\\DC10\\\\250\\\\GS\\\\248\\\\NUL\\\\211\\\\DLE\\\\243\\\\151\\\\136\\\\244\\\\174\\\\EOT\\\\131u4\\\\173\\\\230rxu\\\\219\\\\184r\\\\CAN\\\\245\\\\180^\\\\150\\\\204\\\\209%\\\\161LE\\\\DLE\\\\232\\\\SYN\\\\148\\\\231\\\\170\\\\211\\\\186\\\\138$E\\\\138\\\\175ko\\\\156O\\\\SUBH\\\\SOH\\\\190\\\\186\\\\ENQ\"}}],\"bootWits'\":[],\"scriptWits'\":[]},\"_body\":{\"TxBodyRaw\":{\"adHash\":\"SNothing\",\"vldt\":{\"invalidHereafter\":{\"SlotNo\":\"100000000\"},\"invalidBefore\":\"SNothing\"},\"inputs\":[{\"TxInCompact\":[{\"TxId\":{\"SafeHash\":\"e1e86da6446c7f81da8d5e440bb0d4eed0f1530ba15bf77e49c33d6f050d8fb5\"}},\"0\"]}],\"certs\":{},\"wdrls\":{},\"outputs\":[[{\"Addr\":{\"Testnet\":[{\"KeyHashObj\":{\"KeyHash\":\"ff7b4521589238cfb9c26870edfa782541e61544474422d849ceb103\"}},{\"StakeRefNull\":[]}]}},{\"Value\":[\"1660110\",{}]}]],\"txfee\":\"169945\",\"mint\":[\"0\",{}],\"update\":\"SNothing\"}},\"_auxiliaryData\":\"SNothing\"}}}}}}]}}}}}}\n\n[ogmios:Info:541] [2021-06-06 13:45:39.80 UTC] {\"OgmiosWebSocket\":{\"WebSocketClient\":{\"TrTxSubmission\":{\"Recv\":[{\"ServerAgency\":{\"TokBusy\":[]}},{\"MsgRejectTx\":{\"HardForkApplyTxErrFromEra\":{\"S\":{\"S\":{\"S\":{\"Z\":{\"WrapApplyTxErr\":{\"ApplyTxError\":[{\"UtxowFailure\":{\"UtxoFailure\":{\"ValueNotConservedUTxO\":[{\"Value\":[\"0\",{}]},{\"Value\":[\"1830055\",{}]}]}}},{\"UtxowFailure\":{\"UtxoFailure\":{\"BadInputsUTxO\":[{\"TxInCompact\":[{\"TxId\":{\"SafeHash\":\"e1e86da6446c7f81da8d5e440bb0d4eed0f1530ba15bf77e49c33d6f050d8fb5\"}},\"0\"]}]}}]}}]}}}}}}}}]}}}}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response Example\nDESCRIPTION: This example illustrates a JSON-RPC response from Ogmios to the `findIntersection` request. It shows the `jsonrpc` version, the `method` to which it corresponds, a `result` object with intersection details and tip information (block ID, block number, slot), and the echoed `id` field from the request.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"findIntersection\",\n    \"result\": {\n      \"intersection\": \"origin\",\n      \"tip\": {\n        \"id\": \"d184f428159290bf3558b4d1d139e6a07ec6589738c28a0925a7ab776bde4d62\",\n        \"blockNo\": 4870185,\n        \"slot\": 12176171\n      }\n    },\n    \"id\": \"init-1234-5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Submission Errors using AsyncAPI\nDESCRIPTION: This snippet defines various transaction submission errors and their corresponding schema references using AsyncAPI specification. It provides a structured way to document and categorize potential failures during transaction processing in Ogmios.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nasyncapi: '2.4.0'\ninfo:\n  title: \"\"\n  version: '6.0.0'\nservers: {}\nchannels: {}\ncomponents:\n  schemas:\n    3000/IncompatibleEra:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/0\"\n    3001/UnsupportedEra:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/1\"\n    3002/OverlappingAdditionalUtxo:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/2\"\n    3003/NodeTipTooOld:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/3\"\n    3004/CannotCreateEvaluationContext:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/4\"\n    3005/EraMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/0\"\n    3010/ScriptExecutionFailure:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/5\"\n    3011/InvalidRedeemerPointers:\n      $ref: \"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/0\"\n    3012/ValidationFailure:\n      $ref: \"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/1\"\n    3013/UnsuitableOutputReference:\n      $ref: \"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/2\"\n    3100/InvalidSignatories:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/1\"\n    3101/MissingSignatories:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/2\"\n    3102/MissingScripts:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/3\"\n    3103/FailingNativeScript:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/4\"\n    3104/ExtraneousScripts:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/5\"\n    3105/MissingMetadataHash:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/6\"\n    3106/MissingMetadata:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/7\"\n    3107/MetadataHashMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/8\"\n    3108/InvalidMetadata:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/9\"\n    3109/MissingRedeemers:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/10\"\n    3110/ExtraneousRedeemers:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/11\"\n    3111/MissingDatums:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/12\"\n    3112/ExtraneousDatums:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/13\"\n    3113/ScriptIntegrityHashMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/14\"\n    3114/OrphanScriptInputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/15\"\n    3115/MissingCostModels:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/16\"\n    3116/MalformedScripts:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/17\"\n    3117/UnknownOutputReference:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/18\"\n    3118/OutsideOfValidityInterval:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/19\"\n    3119/TransactionTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/20\"\n    3120/ValueTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/21\"\n    3121/EmptyInputSet:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/22\"\n    3122/FeeTooSmall:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/23\"\n    3123/ValueNotConserved:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/24\"\n    3124/NetworkMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/25\"\n    3125/InsufficientlyFundedOutputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/26\"\n    3126/BootstrapAttributesTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/27\"\n    3127/MintingOrBurningAda:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/28\"\n    3128/InsufficientCollateral:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/29\"\n    3129/CollateralLockedByScript:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/30\"\n    3130/UnforeseeableSlot:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/31\"\n    3131/TooManyCollateralInputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/32\"\n    3132/MissingCollateralInputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/33\"\n    3133/NonAdaCollateral:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/34\"\n    3134/ExecutionUnitsTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/35\"\n    3135/TotalCollateralMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/36\"\n    3136/SpendsMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/37\"\n    3137/UnauthorizedVotes:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/38\"\n    3138/UnknownGovernanceProposals:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/39\"\n    3139/InvalidProtocolParametersUpdate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/40\"\n    3140/UnknownStakePool:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/41\"\n    3141/IncompleteWithdrawals:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/42\"\n    3142/RetirementTooLate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/43\"\n    3143/StakePoolCostTooLow:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/44\"\n    3144/MetadataHashTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/45\"\n    3145/CredentialAlreadyRegistered:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/46\"\n    3146/UnknownCredential:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/47\"\n    3147/NonEmptyRewardAccount:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/48\"\n    3148/InvalidGenesisDelegation:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/49\"\n    3149/InvalidMIRTransfer:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/50\"\n    3150/ForbiddenWithdrawal:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/51\"\n    3151/CredentialDepositMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/52\"\n    3152/DRepAlreadyRegistered:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/53\"\n    3153/DRepNotRegistered:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/54\"\n    3154/UnknownConstitutionalCommitteeMember:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/55\"\n    3155/GovernanceProposalDepositMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/56\"\n    3156/ConflictingCommitteeUpdate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/57\"\n    3157/InvalidCommitteeUpdate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/58\"\n    3158/TreasuryWithdrawalMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/59\"\n    3159/InvalidOrMissingPreviousProposals:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/60\"\n    3160/VotingOnExpiredActions:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/61\"\n    3161/ExecutionBudgetOutOfBounds:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/62\"\n    3162/InvalidHardForkVersionBump:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/63\"\n    3163/ConstitutionGuardrailsHashMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/64\"\n    3164/ConflictingInputsAndReferences:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/65\"\n    3165/UnauthorizedGovernanceAction:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/66\"\n    3166/ReferenceScriptsTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/67\"\n    3167/UnknownVoters:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/68\"\n    3168/EmptyTreasuryWithdrawal:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/69\"\n    3997/UnexpectedMempoolError:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/70\"\n    3998/UnrecognizedCertificateType:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/71\"\n\n```\n\n----------------------------------------\n\nTITLE: JSON-WSP Request Example (Old Ogmios API)\nDESCRIPTION: This snippet demonstrates a JSON-WSP request structure used in older versions of Ogmios. It includes fields for type, version, servicename, methodname, arguments (query), and a mirror ID. This format has been replaced by JSON-RPC 2.0 in the API v6 rewrite to reduce the payload size and comply with industry standards.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"jsonwsp/request\",\n  \"version\": \"1.0\",\n  \"servicename\": \"ogmios\",\n  \"methodname\": \"query\",\n  \"args\": { \"query\": \"genesisConfig\" },\n  \"mirror\": { \"id\": \"foo\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Babbage Protocol Parameters Helper\nDESCRIPTION: Adds a new `isBabbageProtocolParameters` helper function and extends support for existing functions to Babbage. This provides improved support for Babbage protocol parameters within the Ogmios TypeScript SDK.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Certificate: Genesis Delegation Transformation - JSON\nDESCRIPTION: This code illustrates the updated genesis delegation certificate format. The old schema has 'genesisDelegation' as the top-level key, containing delegateKeyHash, verificationKeyHash, and vrfVerificationKeyHash.  The new design includes 'type' with value 'genesisDelegation', 'issuer' and 'delegate' objects with respective keys.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"genesisDelegation\": {\n    \"delegateKeyHash\": \"<credential-digest>\",\n    \"verificationKeyHash\": \"<credential-digest>\",\n    \"vrfVerificationKeyHash\": \"<vrf-digest>\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"genesisDelegation\",\n  \"issuer\": {\n    \"verificationKeyHash\": \"<credential-digest>\",\n    \"vrfVerificationKeyHash\": \"<vrf-digest>\"\n  },\n  \"delegate\": {\n    \"verificationKeyHash\": \"<credential-digest>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing superfluous string concatenation\nDESCRIPTION: This snippet describes the removal of unnecessary string concatenation within the `UnknownResultError` message in TypeScript. This optimization improves code readability and potentially performance.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nRemove superfluous string concatenation in `UnknownResultError`'s message.\n```\n\n----------------------------------------\n\nTITLE: Stop Mainnet Cardano Node and Ogmios Server\nDESCRIPTION: Stops the Cardano node and Ogmios server that are configured for the mainnet network. Assumes the node and server were started with the `yarn mainnet:up` command.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nyarn mainnet:down\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction with Additional UTXO Set - JSON\nDESCRIPTION: This JSON snippet shows the structure of a request to evaluate a transaction, including an additional UTXO set to be used during evaluation. The UTXO set is an array of [OutputReference, Output] tuples.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"evaluateTransaction\",\n    \"params\": {\n      \"transaction\": {\n        \"cbor\": \"<base16>\",\n      },\n      \"additionalUtxoSet\": [\n        [\n          {\n            \"transaction\": { \"id\": \"97b2af6dfc6a4825e934146f424cdd6ede43ff98c355d2ae3aa95b0f70b63949\" },\n            \"output\": { \"index\": 3 }\n          },\n          {\n            \"address\": \"addr_test1qp9zjnc775anpndl0jh3w7vyy25syfezf70d\",\n            \"value\": { \"lovelace\": 10000000 }\n          }\n        ]\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Certificate Schema\nDESCRIPTION: This snippet showcases the schema difference for constitutional committee certificates before and after a change in Ogmios. It demonstrates how the 'type' field and nested structures were modified to harmonize responses with the new 'constitutionalCommittee' ledger query.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeHotKeyRegistration\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"hotKey\": \"0000\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeDelegation\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"delegate\": {\n    \"status\": \"authorized\",\n    \"id\": \"000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClient requestNext function removed (TypeScript)\nDESCRIPTION: `ChainSyncClient` no longer exposes a requestNext function. Instead you must invoke the callback provided as the second argument in each of rollBackward and rollForward handlers.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n`ChainSyncClient` no longer exposes a requestNext function. Instead you must invoke the callback provided as the second argument in each of rollBackward and rollForward handlers.\n```\n\n----------------------------------------\n\nTITLE: Adding isBabbageProtocolParameters helper\nDESCRIPTION: This snippet introduces a new helper function, `isBabbageProtocolParameters`, in TypeScript. It also extends the support of existing helper functions to include the Babbage era, improving protocol parameter handling.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nNew `isBabbageProtocolParameters` helper function, and extended support of the existing ones to Babbage.\n```\n\n----------------------------------------\n\nTITLE: Minimum Fee Calculation Formula\nDESCRIPTION: This snippet shows the formula to calculate the minimum fee in the Conway era. It defines components A, B, and C, along with the variables they depend on. The description provides context about the reference script tier pricing.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nminFee = A + B + C\n```\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{array}{lll}\nA & = & sizeOf(transaction) \\times minFeeCoefficient  \\\\\nB & = & minFeeConstant  \\\\\nC & = & referenceScriptsTierPrice  \\\\\n\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Encoding Bech32 Address in Haskell\nDESCRIPTION: This Haskell code snippet demonstrates how to encode a ByteString into a Bech32 address using the 'fast-bech32' library. It imports the necessary modules and defines a function 'encodeAddress' that takes a ByteString as input and returns a Text representation of the encoded Bech32 address. The address is prefixed with the human-readable part \"addr\".\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/fast-bech32/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\nimport Data.ByteString.Bech32 \n  ( HumanReadablePart(..), encodeBech32 )\n\nencodeAddress :: ByteString -> Text\nencodeAddress = encodeBech32 (HumanReadablePart \"addr\") \n```\n\n----------------------------------------\n\nTITLE: Renaming Metadatum Types in TypeScript\nDESCRIPTION: Renames types related to Metadatum in the TypeScript client to provide more meaningful and descriptive names, enhancing code clarity and maintainability.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nRenamed types regarding Metadatum in the TypeScript client to provide more meaningful names.\n```\n\n----------------------------------------\n\nTITLE: Ogmios Top-Level Modules Structure - Haskell\nDESCRIPTION: This code snippet represents the module structure of the top-level layer in the Ogmios application. It shows the dependencies between modules like Ogmios.hs, Options.hs, Prelude.hs, and Version.hs. These modules are responsible for stitching together the various parts of the application and providing a high-level interface for building an executable.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/README.md#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── Ogmios.hs\n             |      ├── Options.hs\nApplication  |      ├── Prelude.hs\n             v      └── Version.hs\n```\n\n----------------------------------------\n\nTITLE: Query Proposed Protocol Parameters\nDESCRIPTION: This JSON payload is used to query the proposed protocol parameters. No parameters are required. The method called is `queryLedgerState/proposedProtocolParameters`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/proposedProtocolParameters\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Websocket Disconnections in TypeScript\nDESCRIPTION: Adds an extra promise handler to cope with unexpected websocket disconnections when submitting messages to the server, improving the robustness of the TypeScript client.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd an extra promise handler to cope with unexpected websocket disconnections when submitting messages to the server.\n```\n\n----------------------------------------\n\nTITLE: Ogmios Data Modules Structure - Haskell\nDESCRIPTION: This code snippet represents the module structure of the Data layer in the Ogmios application. It includes modules related to data structures and non-effectful code, focusing on JSON encoding and decoding. Modules like EraTranslation.hs, Health.hs, Json.hs, Metrics.hs, and Protocol.hs are included, as well as various JSON-related submodules for different Cardano eras (Byron, Shelley, Allegra, Mary, Alonzo, Babbage).\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/README.md#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── Data\n             |       ├── EraTranslation.hs\n             |       ├── Health.hs\n             |       ├── Json.hs\n             |       ├── Json\n             |       │   ├── Prelude.hs\n             |       │   ├── Orphans.hs\n             |       │   ├── Query.hs\n             |       │   ├── Byron.hs\n             |       │   ├── Shelley.hs\n             |       │   ├── Allegra.hs\n             |       │   ├── Mary.hs\n             |       │   ├── Alonzo.hs\n       Data  |       │   └── Babbage.hs\n             |       ├── Metrics.hs\n             |       ├── Protocol.hs\n             |       └── Protocol\n             |           ├── ChainSync.hs\n             |           ├── StateQuery.hs\n             |           ├── TxMonitor.hs\n             v           └── TxSubmission.hs\n```\n\n----------------------------------------\n\nTITLE: Query Reward Account Summaries by Scripts\nDESCRIPTION: This JSON payload is used to query reward account summaries based on a list of scripts. The `params` field includes a `scripts` array containing the script hashes to be queried. The method called is `queryLedgerState/rewardAccountSummaries`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/rewardAccountSummaries\",\n  \"params\": {\n    \"scripts\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"script10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6snywdma\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Git Revision with Template Haskell\nDESCRIPTION: This code snippet demonstrates how to use the `gitRevParseHEAD` function from the `Data.Git.Revision.TH` module to embed the Git revision hash of the HEAD commit into a Haskell program at compile time. It requires the `TemplateHaskell` language extension to be enabled.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/git-th/README.md#_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Data.Git.Revision.TH\n  ( gitRevParseHEAD )\n\nmain :: IO ()\nmain = do\n  let revHEAD = $(gitRevParseHEAD)\n  putStrLn $ \"revision: \" <> revHEAD\n```\n\n----------------------------------------\n\nTITLE: Query Rewards Provenance\nDESCRIPTION: This JSON payload is used to query the rewards provenance. No parameters are required. The method called is `queryLedgerState/rewardsProvenance`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/rewardsProvenance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing number to BigInt data types\nDESCRIPTION: This snippet addresses a bug where data types were incorrectly parsed as `number` instead of `bigint` in TypeScript. While the TypeScript schema correctly indicated 'bigint', the actual implementation used `number`. This fix ensures that the correct data type is used, potentially causing issues for those who were incorrectly using `number` previously.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed a couple of data-types with fields parsed as `number` instead of `bigint`.\n```\n\n----------------------------------------\n\nTITLE: UnknownResultError Message Fix\nDESCRIPTION: Removes unnecessary string concatenation in the `UnknownResultError` message, improving the clarity and readability of error messages. This involves modifying the error message construction logic.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Removing string concatenation in UnknownResultError's message in TypeScript\nDESCRIPTION: Removes unnecessary string concatenation within the `UnknownResultError` message in TypeScript. This optimization, detailed in pull request #236, improves code efficiency and reduces potential performance overhead. The snippet is a comment that concisely describes the change.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Remove superfluous string concatenation in `UnknownResultError`'s message. See [#236](https://github.com/CardanoSolutions/ogmios/pull/236).\n```\n\n----------------------------------------\n\nTITLE: Query Governance Proposals\nDESCRIPTION: Example JSON request to query governance proposals.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/governanceProposals\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing browser detection in IsomorphicWebSocket\nDESCRIPTION: This snippet describes a fix for browser detection within the `IsomorphicWebSocket` abstraction in TypeScript. The issue is resolved to ensure accurate browser detection for the WebSocket implementation.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed browser detection for the `IsomorphicWebSocket` abstraction.\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection with Address Object - TypeScript\nDESCRIPTION: This snippet describes the new optional `address` object within `ConnectionConfig`. This allows users to provide a URL with paths instead of just host/port. It gives more flexible connection options when configuring Ogmios.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `ConnectionConfig` can now take an optional `address` object, so that URL with paths can be provided instead of only host/port; allowing for more flexible connection options.\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClientMessageHandlers must return a promise (TypeScript)\nDESCRIPTION: The `ChainSyncClientMessageHandlers` methods now must return a promise. This enforces asynchronous handling of chain synchronization events.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `ChainSyncClientMessageHandlers` methods now must return a promise.\n```\n\n----------------------------------------\n\nTITLE: Start Ogmios REPL (Mainnet)\nDESCRIPTION: Starts the Ogmios Read-Eval-Print Loop (REPL) connected to the mainnet network. Provides an interactive environment for interacting with the Ogmios server.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nyarn repl:start\n```\n\n----------------------------------------\n\nTITLE: Stake Pools Method Filter\nDESCRIPTION: This update adds a `filter` parameter to the `stakePools` method on the `LedgerStateQueryClient`. This parameter allows for more specific queries, enhancing flexibility when retrieving stake pool data and aligning the method with the standalone query capabilities.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Marking block properties as non-optional in TypeScript SDK\nDESCRIPTION: Updates the JSON specification and TypeScript SDK to remove the _optional_ marking from the `header`, `headerHash`, and `body` properties of Blocks. This change, linked to issue #238, enforces the presence of these properties, ensuring data consistency and simplifying client-side logic.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Blocks' properties (`header`, `headerHash`, `body`) are no longer marked as _optional_ in the JSON specification (and consequently, in the TypeScript SDK).\n```\n\n----------------------------------------\n\nTITLE: Cloning Ogmios TypeScript client repository\nDESCRIPTION: This snippet clones the Ogmios TypeScript client repository from GitHub using git, similar to the server.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git\n$ cd ogmios/clients/TypeScript\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript end-to-end tests with Yarn\nDESCRIPTION: This snippet demonstrates how to run the TypeScript end-to-end tests using Yarn. It assumes a synchronized node is running on the preview network and Ogmios is listening on port 1337.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ cd clients/TypeScript\n$ yarn\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClient sequential processing (TypeScript)\nDESCRIPTION: The ChainSyncClient now implements an in-memory queue to ensure `requestNext` responses are processed sequentially when there are async operations in the message handlers. This behaviour can be bypassed where sequential processsing is not required, by setting the new construction option `sequential` to `false`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `ChainSyncClient` now implements an in-memory queue to ensure `requestNext` responses are processed sequentially when there are async operations in the message handlers.  This behaviour can be bypassed where sequential processsing is not required, by setting the new construction option `sequential` to `false`.\n```\n\n----------------------------------------\n\nTITLE: Building Ogmios TypeScript client with Yarn\nDESCRIPTION: This snippet demonstrates how to install dependencies and build the Ogmios TypeScript client using Yarn.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ yarn && yarn build\n```\n\n----------------------------------------\n\nTITLE: Query Governance Proposals with Parameters\nDESCRIPTION: Example JSON request to query specific governance proposals using transaction ID and index as parameters.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/governanceProposals\",\n  \"params\": {\n    \"proposals\": [\n      {\n        \"transaction\": { \"id\": \"ee155ace9c40292074cb6aff8c9ccdd273c81648ff1149ef36bcea6ebb8a3e25\" },\n        \"index\": 2\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Missing `required` Constraints in TypeScript JSON Schema\nDESCRIPTION: Adds missing `required` constraints in the JSON schema for Byron witness representation. This ensures that the TypeScript types are generated correctly, marking the fields as required instead of optional.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd missing `required` constraints in the JSON schema for Byron witness representation that caused TypeScript types to be generated as optional.\n```\n\n----------------------------------------\n\nTITLE: Publish Ogmios Packages to npm.org\nDESCRIPTION: Publishes the Ogmios packages to the npm.org registry, making them available for others to use. The script is platform dependent.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n./scripts/publish.sh\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Hot Key Registration\nDESCRIPTION: Shows the JSON structure of constitutional committee certificates before the schema adjustment. It includes the type, member ID, and the hot key.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeHotKeyRegistration\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"hotKey\": \"0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping the Ogmios and Cardano Node stack with Docker Compose\nDESCRIPTION: This command stops and removes the services defined in the `docker-compose.yml` file, effectively tearing down the Ogmios and Cardano node stack.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Query Era Start\nDESCRIPTION: Example JSON request to query the era start.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/eraStart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cardano Ogmios Schema\nDESCRIPTION: This code snippet demonstrates how to install the Cardano Ogmios schema package using yarn. It adds the @cardano-ogmios/schema package as a dependency to your project.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/packages/schema/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @cardano-ogmios/schema\n```\n\n----------------------------------------\n\nTITLE: Fixing Browser Detection\nDESCRIPTION: Corrects browser detection within the `IsomorphicWebSocket` abstraction. This ensures that the WebSocket implementation is compatible with various browsers and environments.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Running Haskell unit tests with Cabal\nDESCRIPTION: This snippet demonstrates how to run all unit tests in the project using Cabal.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ cabal test all\n```\n\n----------------------------------------\n\nTITLE: Query Start Time\nDESCRIPTION: Example JSON request to query the network start time.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/startTime\"\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script: ExpiresAt Transformation - JSON\nDESCRIPTION: This snippet illustrates the transformation of the 'expiresAt' condition in native scripts, denoting the slot at which the script expires. Previously, it was a JSON object with key 'expiresAt' and the slot number as a string. Now, the 'clause' is 'before', and the 'slot' field indicates the slot number.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expiresAt\": \"<slot>\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"before\",\n  \"slot\": \"<slot>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Stake Pool Filtering - TypeScript\nDESCRIPTION: This snippet shows the extension of the `stakePools` method in `LedgerStateQueryClient`. It supports an extra filter, which was previously only available on standalone queries. This provides more filtering options when using the client.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `stakePools` method on the `LedgerStateQueryClient` now supports an extra `filter`. The filters were available on th standalone query but not via the client somehow.\n```\n\n----------------------------------------\n\nTITLE: Metadata Detailed Schema Example - JSON\nDESCRIPTION: This JSON code snippet shows an example of metadata encoded using the \"detailed schema\" format. This format describes the shape of the CBOR data using a small domain-specific language designed for that purpose. It can be enabled with the `--metadata-detailed-schema` flag.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/configuring.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"list\":\n    [ { \"int\": 1 }\n    , { \"int\": 2 }\n    , { \"int\": 3 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping 'constructor' Key in Metadata in TypeScript\nDESCRIPTION: Escapes the word 'constructor' to `constr` when it's present as a key in metadata and when not using `--metadata-detailed-schema`. This resolves a conflict because JavaScript (and therefore TypeScript) forbids using 'constructor' as an object key.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nEscape the word 'constructor' to `constr` when present as key in metadata, and when not using `--metadata-detailed-schema`. JavaScript (and thus TypeScript) forbids using that word as an object key.\n```\n\n----------------------------------------\n\nTITLE: ExecutionUnitsEvaluator Interface\nDESCRIPTION: This Haskell data type defines the interface for an execution units evaluator. It includes a function `evaluateExecutionUnitsM` that takes a UTxO set and a serialized transaction, and returns an `EvaluateTxResponse`.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/015-script-execution-units-evaluator.md#_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ndata ExecutionUnitsEvaluator m block = ExecutionUnitsEvaluator\n    {\n        evaluateExecutionUnitsM\n            :: UTxO (MostRecentEra block)\n            -> SerializedTx block\n            -> m (EvaluateTxResponse block)\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Ogmios using Homebrew\nDESCRIPTION: This code snippet demonstrates how to install Ogmios using Homebrew. It first taps the CardanoSolutions/formulas repository and then installs the ogmios package. This assumes Homebrew is already installed on the system.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbrew tap CardanoSolutions/formulas\nbrew install ogmios\n```\n\n----------------------------------------\n\nTITLE: Ogmios App Modules Structure - Haskell\nDESCRIPTION: This code snippet shows the module structure for the App layer in Ogmios, handling effectful code. It includes modules related to client-side implementations of Ouroboros mini-protocols such as ChainSync, StateQuery, TxMonitor, and TxSubmission. It also includes modules for the HTTP server (Http.hs) and WebSocket server (WebSocket.hs) handlers.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/README.md#_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── App\n             |      ├── Health.hs\n             |      ├── Metrics.hs\n             |      ├── Configuration.hs\n             |      ├── Protocol.hs\n             |      ├── Protocol\n             |      │   ├── ChainSync.hs\n      Logic  |      │   ├── StateQuery.hs\n             |      │   ├── TxMonitor.hs\n             |      │      └── TxSubmission.hs\n             |      ├── Server.hs\n             |      └── Server\n             |          ├── Http.hs\n             |          └── WebSocket.hs\n             v\n```\n\n----------------------------------------\n\nTITLE: Cloning and building secp256k1 with Schnorr signature support\nDESCRIPTION: This set of commands clones a specific revision of the bitcoin-core's secp256k1 repository, configures it with Schnorr signature support, and installs it.  It requires autoconf and libtool to be installed.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/bitcoin-core/secp256k1.git\ncd secp256k1\ngit reset --hard ac83be33d0956faf6b7f61a60ab524ef7d6a473a\n./autogen.sh\n./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental\nmake\nmake check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Query Constitution\nDESCRIPTION: Example JSON request to query the constitution.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/constitution\",\n  \"result\": {\n    \"metadata\": {\n      \"url\": \"\",\n      \"hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"guardrails\": null\n  },\n  \"id\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and building BLST library\nDESCRIPTION: This set of commands clones the BLST library, checks out a specific version, builds it, creates a pkg-config file, and installs the library and headers. BLST is required for BLS12-381 cryptography.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/supranational/blst\ncd blst\ngit checkout v0.3.10\n./build.sh\ncat > libblst.pc << EOF\nprefix=/usr/local\nexec_prefix=\\${prefix}\nlibdir=\\${exec_prefix}/lib\nincludedir=\\${prefix}/include\n\nName: libblst\nDescription: Multilingual BLS12-381 signature library\nURL: https://github.com/supranational/blst\nVersion: 0.3.10\nCflags: -I\\${includedir}\nLibs: -L\\${libdir} -lblst\nEOF\nsudo cp libblst.pc /usr/local/lib/pkgconfig/\nsudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/\nsudo cp libblst.a /usr/local/lib\nsudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}}\n```\n\n----------------------------------------\n\nTITLE: Query Ledger-state Constitution\nDESCRIPTION: Example JSON request to query the ledger-state constitution.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/constitution\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ogmios Control Modules Structure - Haskell\nDESCRIPTION: This code snippet outlines the module structure of the Control layer in Ogmios, representing a thin abstraction layer for I/O effects. It includes modules related to exception handling (Exception.hs), asynchronous operations (MonadAsync.hs), clock management (MonadClock.hs), logging (MonadLog.hs), metrics (MonadMetrics.hs), Ouroboros integration (MonadOuroboros.hs), STM (MonadSTM.hs), and WebSocket functionality (MonadWebSocket.hs). These modules provide a tailored interface for effects and encapsulate their actual interpretation.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/README.md#_snippet_3\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── Control\n             |      ├── Exception.hs\n             |      ├── MonadAsync.hs\n             |      ├── MonadClock.hs\n    Effects  |      ├── MonadLog.hs\n             |      ├── MonadMetrics.hs\n             |      ├── MonadOuroboros.hs\n             |      ├── MonadSTM.hs\n             v      └── MonadWebSocket.hs\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies with Monad Constraints in Haskell\nDESCRIPTION: This code snippet demonstrates how to declare the dependencies of a function using Monad constraints in Haskell. The `newHealthCheckClient` function requires several Monad instances, including `MonadAsync`, `MonadClock`, `MonadLog`, `MonadMetrics`, `MonadReader`, and `MonadThrow`. This approach clarifies the effects required by the function and facilitates testing with simulated IO.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/architectural-decisions/accepted/002-server_use-of-simulated-io.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\nnewHealthCheckClient\n  :: forall m env.\n      ( MonadAsync m\n      , MonadClock m\n      , MonadLog m\n      , MonadMetrics m\n      , MonadReader env m\n      , MonadThrow m\n      )\n```\n\n----------------------------------------\n\nTITLE: Cloning Ogmios server repository\nDESCRIPTION: This snippet demonstrates how to clone the Ogmios server repository from GitHub using git. It uses shallow cloning to reduce download size.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git\n$ cd ogmios/server\n```\n\n----------------------------------------\n\nTITLE: Start Mainnet Cardano Node and Ogmios Server\nDESCRIPTION: Starts the Cardano node and Ogmios server configured for the mainnet network. Requires appropriate mainnet configuration files and access to the mainnet network.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/clients/TypeScript/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn mainnet:up\n```\n\n----------------------------------------\n\nTITLE: Connection Configuration with Address Object\nDESCRIPTION: Introduces an optional `address` object to the `ConnectionConfig` in TypeScript, enabling the provision of URLs with paths instead of solely host/port combinations for more flexible connection options. This change allows users to specify more complex connection endpoints for Ogmios.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Default Tracer Configuration - Haskell\nDESCRIPTION: This code creates a default configuration for the `Tracers` record, setting the minimum severity level for all tracers to `Info`. It uses `defaultTracers` function to initialize the configuration. This demonstrates how to configure the logging system, although in practice, the configuration would likely come from a config file or command-line options.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_3\n\nLANGUAGE: Haskell\nCODE:\n```\nemptyConfiguration :: Tracers m MinSeverities\nemptyConfiguration = defaultTracers Info\n```\n\n----------------------------------------\n\nTITLE: Fixing JSON Parser Bug for Coins Quantity in TypeScript\nDESCRIPTION: Addresses a bug in the JSON parser that caused 'coins' quantities from eras before Mary to be parsed as `Number` instead of `BigInt` in the TypeScript client, ensuring accurate representation of large coin values.\nSOURCE: https://github.com/cardanosolutions/ogmios/blob/master/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed a bug in the JSON parser where `coins` quantities from all eras prior to Mary would be parsed as `Number` instead of `BigInt`.\n```"
  }
]