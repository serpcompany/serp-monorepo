[
  {
    "owner": "node-cron",
    "repo": "node-cron",
    "content": "TITLE: Scheduling a task using CommonJS\nDESCRIPTION: This code snippet demonstrates how to schedule a task to run every minute using the node-cron module in a CommonJS environment. It imports the `node-cron` module, then uses the `cron.schedule` method to define the cron expression and the function to be executed.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('running a task every minute');\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling a task using ES6 (module)\nDESCRIPTION: This code snippet demonstrates how to schedule a task to run every minute using the node-cron module in an ES6 module environment. It imports the `node-cron` module using the `import` syntax and then uses the `cron.schedule` method to define the cron expression and the function to be executed.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\ncron.schedule('* * * * *', () => {\n  console.log('running a task every minute');\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping a scheduled task\nDESCRIPTION: This code snippet demonstrates how to stop a currently running scheduled task using the `task.stop()` method. After stopping, the task will no longer be executed until it is restarted.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\nconst task = cron.schedule('* * * * *', () =>  {\n  console.log('will execute every minute until stopped');\n});\n\ntask.stop();\n```\n\n----------------------------------------\n\nTITLE: Starting a scheduled task\nDESCRIPTION: This code snippet shows how to start a scheduled task that was initially created with the `scheduled` option set to `false`. The `task.start()` method is called to begin the execution of the cron job.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\nconst task = cron.schedule('* * * * *', () =>  {\n  console.log('stopped task');\n}, {\n  scheduled: false\n});\n\ntask.start();\n```\n\n----------------------------------------\n\nTITLE: Using step values in cron syntax\nDESCRIPTION: This code demonstrates scheduling a task using step values in the cron expression. The cron expression '*/2 * * * *' specifies that the task should run every two minutes.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\ncron.schedule('*/2 * * * *', () => {\n  console.log('running a task every two minutes');\n});\n```\n\n----------------------------------------\n\nTITLE: Using multiples values in cron syntax\nDESCRIPTION: This code demonstrates scheduling a task using multiple values in the cron expression. The cron expression '1,2,4,5 * * * *' specifies that the task should run every minute at minutes 1, 2, 4, and 5.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\ncron.schedule('1,2,4,5 * * * *', () => {\n  console.log('running every minute 1, 2, 4 and 5');\n});\n```\n\n----------------------------------------\n\nTITLE: Using ranges in cron syntax\nDESCRIPTION: This code demonstrates scheduling a task using a range of values in the cron expression. The cron expression '1-5 * * * *' specifies that the task should run every minute from minute 1 to minute 5.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\ncron.schedule('1-5 * * * *', () => {\n  console.log('running every minute to 1 from 5');\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling a task with timezone and options\nDESCRIPTION: This code demonstrates scheduling a task with specific options, including timezone and scheduling status. The task will run at 01:00 in the America/Sao_Paulo timezone, only if scheduled is set to true.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n import cron from 'node-cron';\n\n  cron.schedule('0 1 * * *', () => {\n    console.log('Running a job at 01:00 at America/Sao_Paulo timezone');\n  }, {\n    scheduled: true,\n    timezone: \"America/Sao_Paulo\"\n  });\n \n```\n\n----------------------------------------\n\nTITLE: Using short names for month and weekday in cron syntax\nDESCRIPTION: This code demonstrates scheduling a task using short names for month and weekday in the cron expression. The cron expression '* * * Jan,Sep Sun' specifies that the task should run every Sunday in January and September.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\ncron.schedule('* * * Jan,Sep Sun', () => {\n  console.log('running on Sundays of January and September');\n});\n```\n\n----------------------------------------\n\nTITLE: Using names for month and weekday in cron syntax\nDESCRIPTION: This code demonstrates scheduling a task using names for month and weekday in the cron expression. The cron expression '* * * January,September Sunday' specifies that the task should run every Sunday in January and September.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\ncron.schedule('* * * January,September Sunday', () => {\n  console.log('running on Sundays of January and September');\n});\n```\n\n----------------------------------------\n\nTITLE: Validating a cron expression\nDESCRIPTION: This code snippet demonstrates how to validate a cron expression using the `cron.validate()` method. It checks if the given string is a valid cron expression and returns a boolean value.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\nconst valid = cron.validate('59 * * * *');\nconst invalid = cron.validate('60 * * * *');\n```\n\n----------------------------------------\n\nTITLE: Naming a scheduled task\nDESCRIPTION: This code snippet demonstrates how to assign a name to a scheduled task using the `name` option. This name can be used for identification and logging purposes.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\nconst task = cron.schedule('* * * * *', () =>  {\n  console.log('will execute every minute until stopped');\n}, {\n  name: 'my-task'\n});\n```\n\n----------------------------------------\n\nTITLE: Listing all tasks\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all scheduled tasks using the `cron.getTasks()` method. It then iterates through the tasks and logs the key and value for each task.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport cron from 'node-cron';\n\nconst tasks = cron.getTasks();\n\nfor (let [key, value] of tasks.entries()) {\n  console.log(\"key\", key)\n  console.log(\"value\", value)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node-cron with npm\nDESCRIPTION: This command installs the node-cron package using npm, adding it as a dependency to your project. The `--save` flag ensures that the package is listed in your project's `package.json` file.\nSOURCE: https://github.com/node-cron/node-cron/blob/master/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --save node-cron\n```"
  }
]