[
  {
    "owner": "comfy-org",
    "repo": "docs",
    "content": "TITLE: Defining the Basic Structure of a ComfyUI Custom Node in Python\nDESCRIPTION: Creates the basic class structure for a custom ComfyUI node, including category, input types, return types, and function name.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass ImageSelector:\n    CATEGORY = \"example\"\n    @classmethod    \n    def INPUT_TYPES(s):\n        return { \"required\":  { \"images\": (\"IMAGE\",), } }\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"choose_image\"\n```\n\n----------------------------------------\n\nTITLE: Defining NODE_DISPLAY_NAME_MAPPINGS for Custom Node in Python\nDESCRIPTION: This snippet demonstrates how to define the NODE_DISPLAY_NAME_MAPPINGS dictionary for custom nodes in ComfyUI. It provides more human-readable names for each node in the UI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nNODE_DISPLAY_NAME_MAPPINGS = {\n    \"CheckpointLoaderSimple\": \"Load Checkpoint\",\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Color-Coding for Data Types in ComfyUI (Markdown)\nDESCRIPTION: This snippet explains the color-coding system used in ComfyUI to indicate different data types for node properties, inputs, and outputs. It includes a table of common data types and their corresponding colors.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/core-concepts/links.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Color-coding\n\nThe data type of node properties is indicated by color coding of input/output ports and link connection wires. We can always tell which inputs and outputs can be connected to one another by their color. Ports can only be connected to other ports of the same color.\n\nCommon data types:\n\n| Data type                          | Color                                                                                                              |\n|------------------------------------|--------------------------------------------------------------------------------------------------------------------|\\n| diffusion model                    | lavender                                                                                                           |\n| CLIP model                         | yellow                                                                                                             |\n| VAE model                          | rose                                                                                                               |\n| conditioning                       | orange                                                                                                             |\n| latent image                       | pink                                                                                                               |\n| pixel image                        | blue                                                                                                               |\n| mask                               | green                                                                                                              |\n| number (integer or float)          | light green                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Registering the Custom Node in ComfyUI's Node Mappings\nDESCRIPTION: Adds the custom node to ComfyUI's NODE_CLASS_MAPPINGS and NODE_DISPLAY_NAME_MAPPINGS dictionaries for recognition.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nNODE_CLASS_MAPPINGS = {\n    \"Example\" : Example,\n    \"Image Selector\" : ImageSelector,\n}\n\nNODE_DISPLAY_NAME_MAPPINGS = {\n    \"Example\": \"Example Node\",\n    \"Image Selector\": \"Image Selector\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FUNCTION for Custom Node in Python\nDESCRIPTION: This snippet demonstrates how to define the FUNCTION attribute for a custom node in ComfyUI. It specifies the name of the Python function to be called when the node is invoked.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFUNCTION = \"load_checkpoint\"\n```\n\n----------------------------------------\n\nTITLE: Defining IMAGE Datatype in Python with Torch\nDESCRIPTION: The IMAGE datatype represents a batch of images specified as a torch.Tensor with a defined shape. This is pivotal for workflows that involve image processing and manipulation in the Comfy framework.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* No additional parameters in `INPUT_TYPES`\n\n* Python datatype `torch.Tensor` with *shape* [B,H,W,C]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition for Node Configuration Properties\nDESCRIPTION: A portion of a JSON schema that defines various properties for node configuration including output specifications, naming, descriptions, categorization, and status flags. The schema enforces required fields and disallows additional properties.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"boolean\"\n          }\n        },\n        \"output_name\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"output_tooltips\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"display_name\": {\n          \"type\": \"string\"\n        },\n        \"description\": {\n          \"type\": \"string\"\n        },\n        \"category\": {\n          \"type\": \"string\"\n        },\n        \"output_node\": {\n          \"type\": \"boolean\"\n        },\n        \"python_module\": {\n          \"type\": \"string\"\n        },\n        \"deprecated\": {\n          \"type\": \"boolean\"\n        },\n        \"experimental\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"display_name\",\n        \"description\",\n        \"category\",\n        \"output_node\",\n        \"python_module\"\n      ],\n      \"additionalProperties\": false\n    }\n  },\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INPUT_TYPES for Custom Node in Python\nDESCRIPTION: This snippet demonstrates how to define the INPUT_TYPES method for a custom node in ComfyUI. It specifies the input parameters the node can accept, including their types and optional attributes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"ckpt_name\": (folder_paths.\n            get_filename_list(\"checkpoints\"),),\n        }}\n```\n\n----------------------------------------\n\nTITLE: Defining NODE_CLASS_MAPPINGS for Custom Node in Python\nDESCRIPTION: This snippet shows how to define the NODE_CLASS_MAPPINGS dictionary for custom nodes in ComfyUI. It maps node names to their corresponding class implementations.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nNODE_CLASS_MAPPINGS = {\n    \"CheckpointLoaderSimple\": CheckpointLoaderSimple,\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a ComfyUI Custom Node Project with comfy-cli\nDESCRIPTION: Uses comfy-cli to set up the initial structure for a custom ComfyUI node project.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ComfyUI/custom_nodes\ncomfy node scaffold\n```\n\n----------------------------------------\n\nTITLE: Sending a Message from Server to Client in ComfyUI\nDESCRIPTION: Adds server-side code to send a message to the client with information about the selected image.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom server import PromptServer\n\n# Inside choose_image method\nPromptServer.instance.send_sync(\"example.imageselector.textmessage\", {\"message\":f\"Picked image {best+1}\"})\nreturn (result,)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating tensor shape manipulation in Python\nDESCRIPTION: This snippet shows how to manipulate tensor shapes using squeeze, unsqueeze, and reshape operations. It demonstrates the use of None for dimension insertion and -1 for automatic dimension calculation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/tensors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> a = torch.Tensor((1,2))\n>>> a.shape\ntorch.Size([2])\n>>> a[:,None].shape \ntorch.Size([2, 1])\n>>> a.reshape((1,-1)).shape\ntorch.Size([1, 2])\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Point Function for Custom Node in Python\nDESCRIPTION: This snippet shows the implementation of the entry point function for a custom node in ComfyUI. It matches the function name specified in the FUNCTION attribute and performs the main operation of the node.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef load_checkpoint(self, ckpt_name, output_vae=True, output_clip=True):\n        ckpt_path = folder_paths.get_full_path(\"checkpoints\", ckpt_name)\n        out = comfy.sd.load_checkpoint_guess_config(ckpt_path, output_vae=True, output_clip=True, embedding_directory=folder_paths.get_folder_paths(\"embeddings\"))\n        return out[:3]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Custom Node __init__.py File in Python\nDESCRIPTION: A minimal implementation of __init__.py for a custom Comfy node. This file exports a custom node class through NODE_CLASS_MAPPINGS and includes it in __all__ to make it available to Comfy.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lifecycle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom .python_file import MyCustomNode\nNODE_CLASS_MAPPINGS = { \"My Custom Node\" : MyCustomNode }\n__all__ = [\"NODE_CLASS_MAPPINGS\"]\n```\n\n----------------------------------------\n\nTITLE: Defining RETURN_TYPES for Custom Node in Python\nDESCRIPTION: This snippet shows how to define the RETURN_TYPES attribute for a custom node in ComfyUI. It specifies the types of elements in the output tuple.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRETURN_TYPES = (\"MODEL\", \"CLIP\", \"VAE\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Inputs in ComfyUI\nDESCRIPTION: Demonstrates how to create wildcard inputs that can accept any input type. Includes validation bypass to allow any input type connection.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/more_on_inputs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef INPUT_TYPES(s):\n    return {\n        \"required\": { \"anything\": (\"*\",{})},\n    }\n\n@classmethod\ndef VALIDATE_INPUTS(s, input_types):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Capturing Node Click Events in ComfyUI\nDESCRIPTION: Shows how to detect mouse clicks on a specific node type by extending the node's onMouseDown method. This technique allows custom handling of mouse interactions while preserving the original functionality.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync nodeCreated(node) {\n    if (node?.comfyClass === \"My Node Name\") {\n        const original_onMouseDown = node.onMouseDown;\n        node.onMouseDown = function( e, pos, canvas ) {\n            alert(\"ouch!\");\n            return original_onMouseDown?.apply(this, arguments);\n        }        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Selection Options to the Custom Node's Input Types\nDESCRIPTION: Extends the INPUT_TYPES method to include a mode selection for different image selection criteria.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@classmethod    \ndef INPUT_TYPES(s):\n    return { \"required\":  { \"images\": (\"IMAGE\",), \n                            \"mode\": ([\"brightest\", \"reddest\", \"greenest\", \"bluest\"],)} }\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Extension for ComfyUI Custom Node\nDESCRIPTION: Creates a JavaScript file to handle messages sent from the server and display them to the user.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_8\n\nLANGUAGE: Javascript\nCODE:\n```\napp.registerExtension({\n\tname: \"example.imageselector\",\n    async setup() {\n        function messageHandler(event) { alert(event.detail.message); }\n        app.api.addEventListener(\"example.imageselector.textmessage\", messageHandler);\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Inputs in ComfyUI\nDESCRIPTION: Shows implementation of dynamically created inputs using ContainsAnyDict for flexible input handling. Allows accessing arbitrary input names through kwargs.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/more_on_inputs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ContainsAnyDict(dict):\n    def __contains__(self, key):\n        return True\n...\n\n@classmethod\ndef INPUT_TYPES(s):\n    return {\n        \"required\": {},\n        \"optional\": ContainsAnyDict()\n    }\n...\n\ndef main_method(self, **kwargs):\n    # the dynamically created input data will be in the dictionary kwargs\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Node Context Menu Options in ComfyUI\nDESCRIPTION: Demonstrates how to add custom options to a node's right-click menu by extending the node's getExtraMenuOptions method. This example targets a specific node type and adds a new action to its context menu.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* in beforeRegisterNodeDef() */\nif (nodeType?.comfyClass==\"MyNodeClass\") { \n    const original_getExtraMenuOptions = nodeType.prototype.getExtraMenuOptions;\n    nodeType.prototype.getExtraMenuOptions = function(_, options) {\n        original_getExtraMenuOptions?.apply(this, arguments);\n        options.push({\n            content: \"Do something fun\",\n            callback: async () => {\n                // fun thing\n            }\n        })\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for ComfyUI Node Configuration\nDESCRIPTION: This extensive JSON schema defines the structure for configuring nodes in ComfyUI. It includes detailed specifications for input types, output formats, and various UI control options. The schema covers advanced features such as remote data fetching, image and video uploads, and conditional UI behaviors.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"string\",\n      \"const\": \"COMBO\"\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"default\": {},\n            \"defaultInput\": {\n              \"type\": \"boolean\"\n            },\n            \"forceInput\": {\n              \"type\": \"boolean\"\n            },\n            \"tooltip\": {\n              \"type\": \"string\"\n            },\n            \"hidden\": {\n              \"type\": \"boolean\"\n            },\n            \"advanced\": {\n              \"type\": \"boolean\"\n            },\n            \"rawLink\": {\n              \"type\": \"boolean\"\n            },\n            \"lazy\": {\n              \"type\": \"boolean\"\n            },\n            \"control_after_generate\": {\n              \"type\": \"boolean\"\n            },\n            \"image_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"image_folder\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"input\",\n                \"output\",\n                \"temp\"\n              ]\n            },\n            \"allow_batch\": {\n              \"type\": \"boolean\"\n            },\n            \"video_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"remote\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"route\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    },\n                    {\n                      \"type\": \"string\",\n                      \"pattern\": \"^\\\\/\"\n                    }\n                  ]\n                },\n                \"refresh\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"number\",\n                      \"minimum\": -9007199254740991,\n                      \"maximum\": 9007199254740991\n                    },\n                    {\n                      \"type\": \"number\",\n                      \"maximum\": 9007199254740991,\n                      \"minimum\": -9007199254740991\n                    }\n                  ]\n                },\n                \"response_key\": {\n                  \"type\": \"string\"\n                },\n                \"query_params\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"refresh_button\": {\n                  \"type\": \"boolean\"\n                },\n                \"control_after_refresh\": {\n                  \"type\": \"string\",\n                  \"enum\": [\n                    \"first\",\n                    \"last\"\n                  ]\n                },\n                \"timeout\": {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                \"max_retries\": {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                }\n              },\n              \"required\": [\n                \"route\"\n              ],\n              \"additionalProperties\": false\n            },\n            \"options\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": [\n                  \"string\",\n                  \"number\"\n                ]\n              }\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dropdown Menu COMBO in Python\nDESCRIPTION: The COMBO datatype represents a dropdown menu in the Comfy framework. The representation includes options as a list of strings, with the first option selected by default. This allows dynamic generation of input options, ensuring flexibility in various use cases.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"\n\"ckpt_name\": (folder_paths.get_filename_list(\"checkpoints\"), )\n\"\"\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"\n\"play_sound\": ([\"no\",\"yes\"], {}),\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Expansion with Checkpoint Merging in Python\nDESCRIPTION: Example demonstrating node expansion by creating a subgraph that loads and merges two checkpoints. Uses GraphBuilder to construct a graph that loads two checkpoints and merges their model and CLIP components with a specified ratio.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/expansion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef load_and_merge_checkpoints(self, checkpoint_path1, checkpoint_path2, ratio):\n    from comfy_execution.graph_utils import GraphBuilder # Usually at the top of the file\n    graph = GraphBuilder()\n    checkpoint_node1 = graph.node(\"CheckpointLoaderSimple\", checkpoint_path=checkpoint_path1)\n    checkpoint_node2 = graph.node(\"CheckpointLoaderSimple\", checkpoint_path=checkpoint_path2)\n    merge_model_node = graph.node(\"ModelMergeSimple\", model1=checkpoint_node1.out(0), model2=checkpoint_node2.out(0), ratio=ratio)\n    merge_clip_node = graph.node(\"ClipMergeSimple\", clip1=checkpoint_node1.out(1), clip2=checkpoint_node2.out(1), ratio=ratio)\n    return {\n        # Returning (MODEL, CLIP, VAE) outputs\n        \"result\": (merge_model_node.out(0), merge_clip_node.out(0), checkpoint_node1.out(2)),\n        \"expand\": graph.finalize(),\n    }\n```\n\n----------------------------------------\n\nTITLE: Array Item Configuration Schema in ComfyUI\nDESCRIPTION: JSON schema section that defines array item structures with min/max items constraints and nested object definitions. It includes validation rules for handling remote data fetching configurations and UI display options.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": [\n          \"string\",\n          \"number\"\n        ]\n      }\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"default\": {},\n            \"defaultInput\": {\n              \"type\": \"boolean\"\n            },\n            \"forceInput\": {\n              \"type\": \"boolean\"\n            },\n            \"tooltip\": {\n              \"type\": \"string\"\n            },\n            \"hidden\": {\n              \"type\": \"boolean\"\n            },\n            \"advanced\": {\n              \"type\": \"boolean\"\n            },\n            \"rawLink\": {\n              \"type\": \"boolean\"\n            },\n            \"lazy\": {\n              \"type\": \"boolean\"\n            },\n            \"control_after_generate\": {\n              \"type\": \"boolean\"\n            },\n            \"image_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"image_folder\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"input\",\n                \"output\",\n                \"temp\"\n              ]\n            },\n            \"allow_batch\": {\n              \"type\": \"boolean\"\n            },\n            \"video_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"remote\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"route\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    },\n                    {\n                      \"type\": \"string\",\n                      \"pattern\": \"^\\\\/\"\n                    }\n                  ]\n                },\n                \"refresh\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"number\",\n                      \"minimum\": -9007199254740991,\n                      \"maximum\": 9007199254740991\n                    },\n                    {\n                      \"type\": \"number\",\n                      \"maximum\": 9007199254740991,\n                      \"minimum\": -9007199254740991\n                    }\n                  ]\n                },\n                \"response_key\": {\n                  \"type\": \"string\"\n                },\n                \"query_params\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"refresh_button\": {\n                  \"type\": \"boolean\"\n                },\n                \"control_after_refresh\": {\n                  \"type\": \"string\",\n                  \"enum\": [\n                    \"first\",\n                    \"last\"\n                  ]\n                },\n                \"timeout\": {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                },\n                \"max_retries\": {\n                  \"type\": \"number\",\n                  \"minimum\": 0\n                }\n              },\n              \"required\": [\n                \"route\"\n              ],\n              \"additionalProperties\": false\n            },\n            \"options\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": [\n                  \"string\",\n                  \"number\"\n                ]\n              }\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete LazyMixImages Node Implementation\nDESCRIPTION: A full example of a node that uses lazy evaluation to conditionally process images based on mask values, avoiding unnecessary image evaluation when the mask is all 0s or all 1s.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lazy_evaluation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass LazyMixImages:\n    @classmethod\n    def INPUT_TYPES(cls):\n        return {\n            \"required\": {\n                \"image1\": (\"IMAGE\",{\"lazy\": True}),\n                \"image2\": (\"IMAGE\",{\"lazy\": True}),\n                \"mask\": (\"MASK\",),\n            },\n        }\n\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"mix\"\n\n    CATEGORY = \"Examples\"\n\n    def check_lazy_status(self, mask, image1, image2):\n        mask_min = mask.min()\n        mask_max = mask.max()\n        needed = []\n        if image1 is None and (mask_min != 1.0 or mask_max != 1.0):\n            needed.append(\"image1\")\n        if image2 is None and (mask_min != 0.0 or mask_max != 0.0):\n            needed.append(\"image2\")\n        return needed\n\n    # Not trying to handle different batch sizes here just to keep the demo simple\n    def mix(self, mask, image1, image2):\n        mask_min = mask.min()\n        mask_max = mask.max()\n        if mask_min == 0.0 and mask_max == 0.0:\n            return (image1,)\n        elif mask_min == 1.0 and mask_max == 1.0:\n            return (image2,)\n\n        result = image1 * (1. - mask) + image2 * mask,\n        return (result[0],)\n```\n\n----------------------------------------\n\nTITLE: Implementing VALIDATE_INPUTS for ComfyUI Nodes\nDESCRIPTION: Example of creating a VALIDATE_INPUTS function to skip validation for specific inputs when working with the new execution model.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/execution_model_inversion_guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef VALIDATE_INPUTS(cls, my_size):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Using Masks as Transparency Layers in ComfyUI (Python)\nDESCRIPTION: Demonstrates how to use masks as transparency layers in ComfyUI by inverting a mask and concatenating it with an RGB image to create an RGBA image. This approach allows for flexible transparency handling before binary rounding in nodes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/snippets.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Invert mask back to original transparency layer\nmask = 1.0 - mask\n\n# Unsqueeze the `C` (channels) dimension\nmask = mask.unsqueeze(-1)\n\n# Concatenate (\"cat\") along the `C` dimension\nrgba_image = torch.cat((rgb_image, mask), dim=-1)\n```\n\n----------------------------------------\n\nTITLE: Setup Hook - setup\nDESCRIPTION: Hook called at the end of the startup process, ideal for event listener registration and menu modifications.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_hooks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync setup()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Inputs in ComfyUI Node\nDESCRIPTION: Demonstrates how to define hidden inputs in a ComfyUI custom node using INPUT_TYPES classmethod. Hidden inputs allow nodes to request server-side information like unique IDs, prompts, and PNG metadata.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/more_on_inputs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef INPUT_TYPES(s):\n    return {\n        \"required\": {...},\n        \"optional\": {...},\n        \"hidden\": {\n            \"unique_id\": \"UNIQUE_ID\",\n            \"prompt\": \"PROMPT\", \n            \"extra_pnginfo\": \"EXTRA_PNGINFO\",\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Comfy JavaScript Extension\nDESCRIPTION: This example demonstrates the basic structure of registering a Comfy extension. It imports the app object from the core scripts, then registers an extension with a unique name and a setup function that displays an alert.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app } from \"../../scripts/app.js\";\napp.registerExtension({ \n\tname: \"a.unique.name.for.a.useless.extension\",\n\tasync setup() { \n\t\talert(\"Setup complete!\")\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Extension Hook Method Signature - beforeRegisterNodeDef\nDESCRIPTION: Main hook for modifying node behavior, called once for each node type. Used to modify node templates and their behavior patterns.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync beforeRegisterNodeDef(nodeType, nodeData, app)\n```\n\n----------------------------------------\n\nTITLE: Loading an Image in ComfyUI (Python)\nDESCRIPTION: Loads an image file into a batch of size 1 tensor for processing in ComfyUI. The code handles EXIF orientation, converts special image modes, and normalizes pixel values to the range [0,1].\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/snippets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ni = Image.open(image_path)\ni = ImageOps.exif_transpose(i)\nif i.mode == 'I':\n    i = i.point(lambda i: i * (1 / 255))\nimage = i.convert(\"RGB\")\nimage = np.array(image).astype(np.float32) / 255.0\nimage = torch.from_numpy(image)[None,]\n```\n\n----------------------------------------\n\nTITLE: Implementing List Processing with ImageRebatch in ComfyUI\nDESCRIPTION: An example class that demonstrates how to implement custom list processing in ComfyUI. The ImageRebatch node takes multiple image batches as input and rebatches them into the requested batch size, showcasing the usage of INPUT_IS_LIST and OUTPUT_IS_LIST attributes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lists.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ImageRebatch:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"images\": (\"IMAGE\",),\n                              \"batch_size\": (\"INT\", {\"default\": 1, \"min\": 1, \"max\": 4096}) }}\n    RETURN_TYPES = (\"IMAGE\",)\n    INPUT_IS_LIST = True\n    OUTPUT_IS_LIST = (True, )\n    FUNCTION = \"rebatch\"\n    CATEGORY = \"image/batch\"\n\n    def rebatch(self, images, batch_size):\n        batch_size = batch_size[0]    # everything comes as a list, so batch_size is list[int]\n\n        output_list = []\n        all_images = []\n        for img in images:                    # each img is a batch of images\n            for i in range(img.shape[0]):     # each i is a single image\n                all_images.append(img[i:i+1])\n\n        for i in range(0, len(all_images), batch_size): # take batch_size chunks and turn each into a new batch\n            output_list.append(torch.cat(all_images[i:i+batch_size], dim=0))  # will die horribly if the image batches had different width or height!\n\n        return (output_list,)\n```\n\n----------------------------------------\n\nTITLE: Adding Settings to ComfyUI Extension\nDESCRIPTION: Demonstrates how to register a new setting in a ComfyUI extension using the app.registerExtension method. Shows basic boolean setting configuration.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app } from \"../../scripts/app.js\";\n\napp.registerExtension({\n    name: \"My Extension\",\n    settings: [\n        {\n            id: \"example.boolean\",\n            name: \"Example boolean setting\",\n            type: \"boolean\",\n            defaultValue: false,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Main Function for Image Selection in Python\nDESCRIPTION: Defines the choose_image function that selects the brightest image from a batch using PyTorch operations.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport torch\n\ndef choose_image(self, images):\n    brightness = list(torch.mean(image.flatten()).item() for image in images)\n    brightest = brightness.index(max(brightness))\n    result = images[brightest].unsqueeze(0)\n    return (result,)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Options to Canvas Menu in ComfyUI\nDESCRIPTION: Shows how to extend the background canvas right-click menu by hijacking the LGraphCanvas.prototype.getCanvasMenuOptions method. This technique adds a custom menu option with a divider to the standard canvas context menu.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* in setup() */\n    const original_getCanvasMenuOptions = LGraphCanvas.prototype.getCanvasMenuOptions;\n    LGraphCanvas.prototype.getCanvasMenuOptions = function () {\n        // get the basic options \n        const options = original_getCanvasMenuOptions.apply(this, arguments);\n        options.push(null); // inserts a divider\n        options.push({\n            content: \"The text for the menu\",\n            callback: async () => {\n                // do whatever\n            }\n        })\n        return options;\n    }\n```\n\n----------------------------------------\n\nTITLE: Detecting Workflow Execution Start in ComfyUI\nDESCRIPTION: Shows how to listen for the workflow execution start event using the ComfyUI API. This example imports the API and adds an event listener for the 'execution_start' event.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { api } from \"../../scripts/api.js\";\n/* in setup() */\n    function on_execution_start() { \n        /* do whatever */\n    }\n    api.addEventListener(\"execution_start\", on_execution_start);\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Node Connections in Comfy UI\nDESCRIPTION: Demonstrates how to traverse node connections by accessing the graph object to get node details and follow link references between nodes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_objects_and_hijacking.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ComfyNode_object_for_my_node = app.graph._nodes_by_id(my_node_id) \nComfyNode_object_for_my_node.inputs.forEach(input => {\n    const link_id = input.link;\n    if (link_id) {\n        const LLink_object = app.graph.links[link_id]\n        const id_of_upstream_node = LLink_object.origin_id\n        // etc\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling tensor truthiness in Python\nDESCRIPTION: This snippet illustrates the difference in truthiness between Python lists and torch.Tensors. It shows how to use .all() and .any() methods to evaluate the truthiness of tensors with multiple elements.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/tensors.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> a = torch.Tensor((1,2))\n>>> print(\"yes\" if a else \"no\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: Boolean value of Tensor with more than one value is ambiguous\n>>> a.all()\ntensor(False)\n>>> a.any()\ntensor(True)\n```\n\n----------------------------------------\n\nTITLE: Defining CATEGORY for Custom Node in Python\nDESCRIPTION: This snippet demonstrates how to define the CATEGORY attribute for a custom node in ComfyUI. It specifies the category under which the node will appear in the UI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/interface.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCATEGORY = \"loaders\"\n```\n\n----------------------------------------\n\nTITLE: Using VariantSupport Decorator for Composite Types in ComfyUI\nDESCRIPTION: Example of using the VariantSupport decorator to handle composite types for both inputs and outputs in ComfyUI nodes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/execution_model_inversion_guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@VariantSupport\nclass MyCustomNode:\n\n    @classmethod\n    def INPUT_TYPES(cls):\n        return {\n            \"required\": {\n                \"input\": (\"FOO,BAR\", {}),\n            }\n        }\n    \n    RETURN_TYPES = (MakeSmartType(\"FOO,BAR\"),)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Performing elementwise operations on tensors in Python\nDESCRIPTION: This code demonstrates elementwise operations on tensors, including multiplication, division, and comparison. It shows how these operations work with tensors of the same shape and with scalars, as well as the error that occurs when shapes don't match.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/tensors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import torch\n>>> a = torch.Tensor((1,2))\n>>> b = torch.Tensor((3,2))\n>>> a*b\ntensor([3., 4.])\n>>> a/b\ntensor([0.3333, 1.0000])\n>>> a==b\ntensor([False,  True])\n>>> a==1\ntensor([ True, False])\n>>> c = torch.Tensor((3,2,1)) \n>>> a==c\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 0\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Datatype Input in ComfyUI\nDESCRIPTION: Shows how to create a custom datatype input with forceInput option. This allows passing custom data types between nodes while ensuring type safety in the ComfyUI client.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/more_on_inputs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef INPUT_TYPES(s):\n    return {\n        \"required\": { \"my_cheese\": (\"CHEESE\", {\"forceInput\":True}) }\n    }\n```\n\n----------------------------------------\n\nTITLE: Saving Image Batches in ComfyUI (Python)\nDESCRIPTION: Saves a batch of tensor images to disk as image files. The code converts tensors back to numpy arrays, scales values to the 0-255 range, clips values, and saves each image in the batch to a unique filepath.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/snippets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor (batch_number, image) in enumerate(images):\n    i = 255. * image.cpu().numpy()\n    img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))\n    filepath = # some path that takes the batch number into account\n    img.save(filepath)\n```\n\n----------------------------------------\n\nTITLE: Writing ComfyUI Settings\nDESCRIPTION: Demonstrates how to programmatically update a setting value using the extensionManager.setting.set method.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app } from \"../../scripts/app.js\";\n\ntry {\n    await app.extensionManager.setting.set(\"example.boolean\", true);\n} catch (error) {\n    console.error(`Error changing setting: ${error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Inputs as Lazy in INPUT_TYPES Definition\nDESCRIPTION: Shows how to declare lazy inputs in a node's INPUT_TYPES class method by adding a 'lazy: True' key-value pair to the input's options dictionary.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lazy_evaluation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef INPUT_TYPES(cls):\n    return {\n        \"required\": {\n            \"image1\": (\"IMAGE\",{\"lazy\": True}),\n            \"image2\": (\"IMAGE\",{\"lazy\": True}),\n            \"mask\": (\"MASK\",),\n        },\n    }\n```\n\n----------------------------------------\n\nTITLE: Using MakeSmartType for Composite Types as Outputs\nDESCRIPTION: Example of using a MakeSmartType wrapper to handle composite types in ComfyUI nodes' outputs, maintaining compatibility with the new execution model.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/execution_model_inversion_guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomNode:\n\n    @classmethod\n    def INPUT_TYPES(cls):\n        return {\n            \"required\": {\n                \"input\": (MakeSmartType(\"FOO,BAR\"), {}),\n            }\n        }\n\n    RETURN_TYPES = (MakeSmartType(\"FOO,BAR\"),)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using ExecutionBlocker for Silent Execution Blocking\nDESCRIPTION: Shows how to use ExecutionBlocker to silently block node execution based on a condition, useful for conditionally disabling outputs.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lazy_evaluation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef silent_passthrough(self, passthrough, blocked):\n    if blocked:\n        return (ExecutionBlocker(None),)\n    else:\n        return (passthrough,)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Route with aiohttp in Python\nDESCRIPTION: This snippet demonstrates how to define a custom route in `server.py` using the aiohttp framework. It imports necessary modules, retrieves the routes instance from the PromptServer, and defines an asynchronous function to handle POST requests to a specified path. The function extracts data from the request, processes it using a class method, and returns a JSON response.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_routes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom server import PromptServer\nfrom aiohttp import web\nroutes = PromptServer.instance.routes\n@routes.post('/my_new_path')\nasync def my_function(request):\n    the_data = await request.post()\n    # the_data now holds a dictionary of the values sent\n    MyClass.handle_my_message(the_data)\n    return web.json_response({})\n```\n\n----------------------------------------\n\nTITLE: Using ExecutionBlocker with Error Messages\nDESCRIPTION: Demonstrates how to use ExecutionBlocker with a custom error message to provide meaningful feedback when blocking execution due to invalid conditions.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lazy_evaluation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef load_checkpoint(self, ckpt_name):\n    ckpt_path = folder_paths.get_full_path(\"checkpoints\", ckpt_name)\n    model, clip, vae = load_checkpoint(ckpt_path)\n    if vae is None:\n        # This error is more useful than a \"'NoneType' has no attribute\" error\n        # in a later node\n        vae = ExecutionBlocker(f\"No VAE contained in the loaded model {ckpt_name}\")\n    return (model, clip, vae)\n```\n\n----------------------------------------\n\nTITLE: Implementing check_lazy_status Method for Lazy Evaluation\nDESCRIPTION: Demonstrates how to implement the check_lazy_status method that determines which lazy inputs need to be evaluated based on current input values.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/lazy_evaluation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef check_lazy_status(self, mask, image1, image2):\n    mask_min = mask.min()\n    mask_max = mask.max()\n    needed = []\n    if image1 is None and (mask_min != 1.0 or mask_max != 1.0):\n        needed.append(\"image1\")\n    if image2 is None and (mask_min != 0.0 or mask_max != 0.0):\n        needed.append(\"image2\")\n    return needed\n```\n\n----------------------------------------\n\nTITLE: Loading and Saving Images using PIL\nDESCRIPTION: This snippet demonstrates how to import the necessary modules from the PIL library to handle image loading and processing in PyTorch applications. Dependencies include the PIL library, which must be installed in your environment.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/images_and_masks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import Image, ImageOps\n```\n\n----------------------------------------\n\nTITLE: Inverting a Mask in ComfyUI (Python)\nDESCRIPTION: Inverts a normalized mask by subtracting it from 1.0. Since masks in ComfyUI are normalized to the range [0,1], this simple operation flips the values appropriately.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/snippets.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmask = 1.0 - mask\n```\n\n----------------------------------------\n\nTITLE: Exporting WEB_DIRECTORY in Python for Comfy Extensions\nDESCRIPTION: This code snippet shows how to export WEB_DIRECTORY in your Python __init__.py file to enable JavaScript extensions in your custom node directory. It sets the web directory path and exports necessary mappings.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWEB_DIRECTORY = \"./js\"\n__all__ = [\"NODE_CLASS_MAPPINGS\", \"NODE_DISPLAY_NAME_MAPPINGS\", \"WEB_DIRECTORY\"]\n```\n\n----------------------------------------\n\nTITLE: Validating Custom Node Inputs in ComfyUI\nDESCRIPTION: This code example demonstrates how to implement input validation for a custom node using the VALIDATE_INPUTS method. It shows a node that accepts INT or FLOAT inputs and validates their types, while still leveraging the frontend's min/max validation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/server_overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AddNumbers:\n    @classmethod\n    def INPUT_TYPES(cls):\n        return {\n            \"required\": {\n                \"input1\" : (\"INT,FLOAT\", {\"min\": 0, \"max\": 1000})\n                \"input2\" : (\"INT,FLOAT\", {\"min\": 0, \"max\": 1000})\n            },\n        }\n\n    @classmethod\n    def VALIDATE_INPUTS(cls, input_types):\n        # The min and max of input1 and input2 are still validated because\n        # we didn't take `input1` or `input2` as arguments\n        if input_types[\"input1\"] not in (\"INT\", \"FLOAT\"):\n            return \"input1 must be an INT or FLOAT type\"\n        if input_types[\"input2\"] not in (\"INT\", \"FLOAT\"):\n            return \"input2 must be an INT or FLOAT type\"\n        return True\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for ComfyUI Workflow Templates\nDESCRIPTION: Example file structure showing required JSON workflow files and optional JPG thumbnails in the example_workflows directory of a custom node module.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/workflow_templates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nComfyUI-MyCustomNodeModule/example_workflows/\n - My_example_workflow_1.json\n - My_example_workflow_1.jpg\n - My_example_workflow_2.json\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Noise Variations in ComfyUI (Python)\nDESCRIPTION: Implements a class for mixing two noise sources with a weighting factor. This can be used to create variations in noise patterns by adjusting the weight parameter, which controls the influence of the second noise source.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/snippets.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Noise_MixedNoise:\n    def __init__(self, nosie1, noise2, weight2):\n        self.noise1  = noise1\n        self.noise2  = noise2\n        self.weight2 = weight2\n\n    @property\n    def seed(self): return self.noise1.seed\n\n    def generate_noise(self, input_latent:torch.Tensor) -> torch.Tensor:\n        noise1 = self.noise1.generate_noise(input_latent)\n        noise2 = self.noise2.generate_noise(input_latent)\n        return noise1 * (1.0-self.weight2) + noise2 * (self.weight2)\n```\n\n----------------------------------------\n\nTITLE: Converting Masks to Image Shape in ComfyUI (Python)\nDESCRIPTION: Reshapes masks to match the expected image tensor format [B,H,W,C] with C=1. The code handles different input mask shapes and inserts the batch and channel dimensions as needed.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/snippets.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# We want [B,H,W,C] with C = 1\nif len(mask.shape)==2: # we have [H,W], so insert B and C as dimension 1\n    mask = mask[None,:,:,None]\nelif len(mask.shape)==3 and mask.shape[2]==1: # we have [H,W,C]\n    mask = mask[None,:,:,:]\nelif len(mask.shape)==3:                      # we have [B,H,W]\n    mask = mask[:,:,:,None]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Invert Image Node in ComfyUI\nDESCRIPTION: This example demonstrates a simple custom node implementation that inverts an image. It defines required inputs, output types, category placement, and the inversion function that takes an image input and returns its inverted version.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/server_overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass InvertImageNode:\n    @classmethod\n    def INPUT_TYPES(cls):\n        return {\n            \"required\": { \"image_in\" : (\"IMAGE\", {}) },\n        }\n\n    RETURN_TYPES = (\"IMAGE\",)\n    RETURN_NAMES = (\"image_out\",)\n    CATEGORY = \"examples\"\n    FUNCTION = \"invert\"\n\n    def invert(self, image_in):\n        image_out = 1 - image_in\n        return (image_out,)\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive and Reroute Nodes\nDESCRIPTION: Primitive and reroute nodes exist solely on the client side and take on the datatype of their connected inputs or outputs. They are fundamental in ensuring data type compatibility throughout connections, allowing safe data workflows.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"\n/* they do not have an intrinsic datatype, but when connected they take on\nthe datatype of the input or output to which they have been connected (which is why they can’t connect to a * input...) */\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Toggle Settings\nDESCRIPTION: Example of implementing a boolean toggle switch setting based on PrimeVue ToggleSwitch component.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.boolean\",\n    name: \"Example boolean setting\",\n    type: \"boolean\",\n    defaultValue: false,\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Comfy Model CLI Usage\nDESCRIPTION: Shows the basic usage of the `comfy model` command, including options for installing completion, showing completion, and displaying help information. It also lists the available subcommands: download, list, and remove.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ comfy model [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Defining ComfyNode Structure in JSON Schema\nDESCRIPTION: This JSON Schema segment defines the structure for ComfyNode objects, detailing types and properties. Each property is restricted to a defined set of allowable types and constraints, such as required fields and data formats. The schema facilitates validation of node definitions for the Comfy framework.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/definitions/ComfyNodeDefV1\",\n  \"definitions\": {\n    \"ComfyNodeDefV1\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"input\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"required\": {\n              \"type\": \"object\",\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"string\",\n                        \"const\": \"INT\"\n                      },\n                      {\n                        \"anyOf\": [\n                          {\n                            \"not\": {}\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"default\": {\n                                \"anyOf\": [\n                                  {\n                                    \"type\": \"number\"\n                                  },\n                                  {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                ]\n                              },\n                              \"defaultInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"forceInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"tooltip\": {\n                                \"type\": \"string\"\n                              },\n                              \"hidden\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"advanced\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"rawLink\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"lazy\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"min\": {\n                                \"type\": \"number\"\n                              },\n                              \"max\": {\n                                \"type\": \"number\"\n                              },\n                              \"step\": {\n                                \"type\": \"number\"\n                              },\n                              \"display\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                  \"slider\",\n                                  \"number\",\n                                  \"knob\"\n                                ]\n                              },\n                              \"control_after_generate\": {\n                                \"type\": \"boolean\"\n                              }\n                            },\n                            \"additionalProperties\": true\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"string\",\n                        \"const\": \"FLOAT\"\n                      },\n                      {\n                        \"anyOf\": [\n                          {\n                            \"not\": {}\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"default\": {\n                                \"anyOf\": [\n                                  {\n                                    \"type\": \"number\"\n                                  },\n                                  {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                      \"type\": \"number\"\n                                    }\n                                  }\n                                ]\n                              },\n                              \"defaultInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"forceInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"tooltip\": {\n                                \"type\": \"string\"\n                              },\n                              \"hidden\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"advanced\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"rawLink\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"lazy\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"min\": {\n                                \"type\": \"number\"\n                              },\n                              \"max\": {\n                                \"type\": \"number\"\n                              },\n                              \"step\": {\n                                \"type\": \"number\"\n                              },\n                              \"display\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                  \"slider\",\n                                  \"number\",\n                                  \"knob\"\n                                ]\n                              },\n                              \"round\": {\n                                \"anyOf\": [\n                                  {\n                                    \"type\": \"number\"\n                                  },\n                                  {\n                                    \"type\": \"boolean\",\n                                    \"const\": false\n                                  }\n                                ]\n                              }\n                            },\n                            \"additionalProperties\": true\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"string\",\n                        \"const\": \"BOOLEAN\"\n                      },\n                      {\n                        \"anyOf\": [\n                          {\n                            \"not\": {}\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"default\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"defaultInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"forceInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"tooltip\": {\n                                \"type\": \"string\"\n                              },\n                              \"hidden\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"advanced\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"rawLink\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"lazy\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"label_on\": {\n                                \"type\": \"string\"\n                              },\n                              \"label_off\": {\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"additionalProperties\": true\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"string\",\n                        \"const\": \"STRING\"\n                      },\n                      {\n                        \"anyOf\": [\n                          {\n                            \"not\": {}\n                          },\n                          {\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"default\": {\n                                \"type\": \"string\"\n                              },\n                              \"defaultInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"forceInput\": {\n                                \"type\": \"boolean\"\n                              },\n                              \"tooltip\": {\n                                \"type\": \"string\"\n                              },\n                              \"hidden\": {\n                                \"type\": \"boolean\"\n                              },\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Image Selection Logic in Python\nDESCRIPTION: Updates the choose_image function to handle different selection modes based on color characteristics.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef choose_image(self, images, mode):\n    batch_size = images.shape[0]\n    brightness = list(torch.mean(image.flatten()).item() for image in images)\n    if (mode==\"brightest\"):\n        scores = brightness\n    else:\n        channel = 0 if mode==\"reddest\" else (1 if mode==\"greenest\" else 2)\n        absolute = list(torch.mean(image[:,:,channel].flatten()).item() for image in images)\n        scores = list( absolute[i]/(brightness[i]+1e-8) for i in range(batch_size) )\n    best = scores.index(max(scores))\n    result = images[best].unsqueeze(0)\n    return (result,)\n```\n\n----------------------------------------\n\nTITLE: Defining ComfyUI Workflow JSON Schema v1.0\nDESCRIPTION: This JSON schema defines the structure for ComfyUI workflows version 1.0. It includes definitions for workflow configuration, state, groups, nodes, and links. The schema specifies required properties, data types, and constraints for each component of the workflow.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/definitions/ComfyWorkflow1_0\",\n  \"definitions\": {\n    \"ComfyWorkflow1_0\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"version\": {\n          \"type\": \"number\",\n          \"const\": 1\n        },\n        \"config\": {\n          \"anyOf\": [\n            {\n              \"anyOf\": [\n                {\n                  \"not\": {}\n                },\n                {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"links_ontop\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"align_to_grid\": {\n                      \"type\": \"boolean\"\n                    }\n                  },\n                  \"additionalProperties\": true\n                }\n              ]\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"state\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"lastGroupid\": {\n              \"type\": \"number\"\n            },\n            \"lastNodeId\": {\n              \"type\": \"number\"\n            },\n            \"lastLinkId\": {\n              \"type\": \"number\"\n            },\n            \"lastRerouteId\": {\n              \"type\": \"number\"\n            }\n          },\n          \"additionalProperties\": true\n        },\n        \"groups\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"bounding\": {\n                \"type\": \"array\",\n                \"minItems\": 4,\n                \"maxItems\": 4,\n                \"items\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  }\n                ]\n              },\n              \"color\": {\n                \"type\": \"string\"\n              },\n              \"font_size\": {\n                \"type\": \"number\"\n              },\n              \"locked\": {\n                \"type\": \"boolean\"\n              }\n            },\n            \"required\": [\n              \"title\",\n              \"bounding\"\n            ],\n            \"additionalProperties\": true\n          }\n        },\n        \"nodes\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  }\n                ]\n              },\n              \"type\": {\n                \"type\": \"string\"\n              },\n              \"pos\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"0\": {\n                        \"type\": \"number\"\n                      },\n                      \"1\": {\n                        \"type\": \"number\"\n                      }\n                    },\n                    \"required\": [\n                      \"0\",\n                      \"1\"\n                    ],\n                    \"additionalProperties\": true\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  }\n                ]\n              },\n              \"size\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"0\": {\n                        \"type\": \"number\"\n                      },\n                      \"1\": {\n                        \"type\": \"number\"\n                      }\n                    },\n                    \"required\": [\n                      \"0\",\n                      \"1\"\n                    ],\n                    \"additionalProperties\": true\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  }\n                ]\n              },\n              \"flags\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"collapsed\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"pinned\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"allow_interaction\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"horizontal\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"skip_repeated_outputs\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"additionalProperties\": true\n              },\n              \"order\": {\n                \"type\": \"number\"\n              },\n              \"mode\": {\n                \"type\": \"number\"\n              },\n              \"inputs\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"string\"\n                        },\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        {\n                          \"type\": \"number\"\n                        }\n                      ]\n                    },\n                    \"link\": {\n                      \"type\": [\n                        \"number\",\n                        \"null\"\n                      ]\n                    },\n                    \"slot_index\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"integer\"\n                        },\n                        {\n                          \"type\": \"string\"\n                        }\n                      ]\n                    }\n                  },\n                  \"required\": [\n                    \"name\",\n                    \"type\"\n                  ],\n                  \"additionalProperties\": true\n                }\n              },\n              \"outputs\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"string\"\n                        },\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        {\n                          \"type\": \"number\"\n                        }\n                      ]\n                    },\n                    \"links\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"number\"\n                          }\n                        },\n                        {\n                          \"type\": \"null\"\n                        }\n                      ]\n                    },\n                    \"slot_index\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"integer\"\n                        },\n                        {\n                          \"type\": \"string\"\n                        }\n                      ]\n                    }\n                  },\n                  \"required\": [\n                    \"name\",\n                    \"type\"\n                  ],\n                  \"additionalProperties\": true\n                }\n              },\n              \"properties\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"Node name for S&R\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"additionalProperties\": true\n              },\n              \"widgets_values\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"array\"\n                  },\n                  {\n                    \"type\": \"object\",\n                    \"additionalProperties\": {}\n                  }\n                ]\n              },\n              \"color\": {\n                \"type\": \"string\"\n              },\n              \"bgcolor\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"id\",\n              \"type\",\n              \"pos\",\n              \"size\",\n              \"flags\",\n              \"order\",\n              \"mode\",\n              \"properties\"\n            ],\n            \"additionalProperties\": true\n          }\n        },\n        \"links\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"number\"\n              },\n              \"origin_id\": {\n                \"anyOf\": [\n                  {\n\n```\n\n----------------------------------------\n\nTITLE: Defining FLOAT Datatype in Python\nDESCRIPTION: The FLOAT datatype represents floating-point numbers. It requires a default value and optionally allows setting min, max, and step parameters, which can finely control input values throughout the application.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* Additional parameters in `INPUT_TYPES`:\n\n  * `default` is required\n\n  * `min`, `max`, `step` are optional\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to Settings\nDESCRIPTION: Shows how to add hover tooltips to settings for additional context and help information.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.boolean\",\n    name: \"Example boolean setting\",\n    type: \"boolean\",\n    defaultValue: false,\n    tooltip: \"This is some helpful information\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for ComfyUI Node Configuration Options\nDESCRIPTION: JSON schema fragment that defines the structure and validation rules for UI control configuration options in ComfyUI nodes. This includes properties for advanced options, text input configurations, remote data fetching, and combo controls.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"advanced\": {\n  \"type\": \"boolean\"\n},\n\"rawLink\": {\n  \"type\": \"boolean\"\n},\n\"lazy\": {\n  \"type\": \"boolean\"\n},\n\"multiline\": {\n  \"type\": \"boolean\"\n},\n\"dynamicPrompts\": {\n  \"type\": \"boolean\"\n},\n\"defaultVal\": {\n  \"type\": \"string\"\n},\n\"placeholder\": {\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload Settings\nDESCRIPTION: Demonstrates how to implement an image upload setting that stores images as data URLs.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.image\",\n    name: \"Example image setting\",\n    type: \"image\",\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Workflow Components\nDESCRIPTION: This JSON schema defines the structure for various components of a workflow, including nodes, links, reroutes, and extra information. It specifies data types, required fields, and allowed values for each component, ensuring consistent data representation across the workflow.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"integer\"\n},\n{\n  \"type\": \"string\"\n}\n]\n},\n\"origin_slot\": {\n\"anyOf\": [\n{\n  \"type\": \"integer\"\n},\n{\n  \"type\": \"string\"\n}\n]\n},\n\"target_id\": {\n\"anyOf\": [\n{\n  \"type\": \"integer\"\n},\n{\n  \"type\": \"string\"\n}\n]\n},\n\"target_slot\": {\n\"anyOf\": [\n{\n  \"type\": \"integer\"\n},\n{\n  \"type\": \"string\"\n}\n]\n},\n\"type\": {\n\"anyOf\": [\n{\n  \"type\": \"string\"\n},\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  }\n},\n{\n  \"type\": \"number\"\n}\n]\n},\n\"parentId\": {\n\"type\": \"number\"\n}\n},\n\"required\": [\n\"id\",\n\"origin_id\",\n\"origin_slot\",\n\"target_id\",\n\"target_slot\",\n\"type\"\n],\n\"additionalProperties\": true\n}\n},\n\"reroutes\": {\n\"type\": \"array\",\n\"items\": {\n\"type\": \"object\",\n\"properties\": {\n\"id\": {\n\"type\": \"number\"\n},\n\"parentId\": {\n\"type\": \"number\"\n},\n\"pos\": {\n\"anyOf\": [\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"0\": {\n      \"type\": \"number\"\n    },\n    \"1\": {\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\n    \"0\",\n    \"1\"\n  ],\n  \"additionalProperties\": true\n},\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"number\"\n    },\n    {\n      \"type\": \"number\"\n    }\n  ]\n}\n]\n},\n\"linkIds\": {\n\"anyOf\": [\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"number\"\n  }\n},\n{\n  \"type\": \"null\"\n}\n]\n}\n},\n\"required\": [\n\"id\",\n\"pos\"\n],\n\"additionalProperties\": true\n}\n},\n\"extra\": {\n\"anyOf\": [\n{\n\"anyOf\": [\n{\n  \"not\": {}\n},\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"ds\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"scale\": {\n          \"type\": \"number\"\n        },\n        \"offset\": {\n          \"anyOf\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"0\": {\n                  \"type\": \"number\"\n                },\n                \"1\": {\n                  \"type\": \"number\"\n                }\n              },\n              \"required\": [\n                \"0\",\n                \"1\"\n              ],\n              \"additionalProperties\": true\n            },\n            {\n              \"type\": \"array\",\n              \"minItems\": 2,\n              \"maxItems\": 2,\n              \"items\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"type\": \"number\"\n                }\n              ]\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"scale\",\n        \"offset\"\n      ],\n      \"additionalProperties\": true\n    },\n    \"info\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"author\": {\n          \"type\": \"string\"\n        },\n        \"description\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\"\n        },\n        \"created\": {\n          \"type\": \"string\"\n        },\n        \"modified\": {\n          \"type\": \"string\"\n        },\n        \"software\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"author\",\n        \"description\",\n        \"version\",\n        \"created\",\n        \"modified\",\n        \"software\"\n      ],\n      \"additionalProperties\": true\n    },\n    \"linkExtensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\"\n          },\n          \"parentId\": {\n            \"type\": \"number\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"parentId\"\n        ],\n        \"additionalProperties\": true\n      }\n    },\n    \"reroutes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\"\n          },\n          \"parentId\": {\n            \"type\": \"number\"\n          },\n          \"pos\": {\n            \"anyOf\": [\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"0\": {\n                    \"type\": \"number\"\n                  },\n                  \"1\": {\n                    \"type\": \"number\"\n                  }\n                },\n                \"required\": [\n                  \"0\",\n                  \"1\"\n                ],\n                \"additionalProperties\": true\n              },\n              {\n                \"type\": \"array\",\n                \"minItems\": 2,\n                \"maxItems\": 2,\n                \"items\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  }\n                ]\n              }\n            ]\n          },\n          \"linkIds\": {\n            \"anyOf\": [\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"number\"\n                }\n              },\n              {\n                \"type\": \"null\"\n              }\n            ]\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"pos\"\n        ],\n        \"additionalProperties\": true\n      }\n    }\n  },\n  \"additionalProperties\": true\n}\n]\n},\n{\n\"type\": \"null\"\n}\n]\n},\n```\n\n----------------------------------------\n\nTITLE: Node Metadata Specification for Comfy - TOML\nDESCRIPTION: This TOML configuration outlines the metadata for a Comfy custom node, setting properties like `name`, `version`, and `PublisherId`. It includes dependencies, project URLs, and optional display settings. The metadata is essential for node registration in the Comfy Registry.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/publishing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# pyproject.toml\n[project]\nname = \"\" # Unique identifier for your node. Immutable after creation.\ndescription = \"\"\nversion = \"1.0.0\" # Custom Node version. Must be semantically versioned.\nlicense = { file = \"LICENSE.txt\" }\ndependencies  = [] # Filled in from requirements.txt\n\n[project.urls]\nRepository = \"https://github.com/...\"\n\n[tool.comfy]\nPublisherId = \"\" # TODO (fill in Publisher ID from Comfy Registry Website).\nDisplayName = \"\" # Display name for the Custom Node. Can be changed later.\nIcon = \"https://example.com/icon.png\" # SVG, PNG, JPG or GIF (MAX. 800x400px)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages from Server to Client in Python\nDESCRIPTION: Messages are sent from the server to the client using the 'send_sync' method of the PromptServer instance. This method likely handles the synchronous sending of socket messages.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nserver.send_sync()\n```\n\n----------------------------------------\n\nTITLE: Node Input Types with Hidden ID in Python\nDESCRIPTION: Example of how to access the node_id through hidden inputs in a node's INPUT_TYPES configuration and main function.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_messages.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    @classmethod    \n    def INPUT_TYPES(s):\n        return {\"required\" : { }, # whatever your required inputs are \n                \"hidden\": { \"node_id\": \"UNIQUE_ID\" } } # Add the hidden key\n\n    def my_main_function(self, required_inputs, node_id):\n        # do some things\n        PromptServer.instance.send_sync(\"my.custom.message\", {\"node\": node_id, \"other_things\": etc})\n```\n\n----------------------------------------\n\nTITLE: Implementing Categorized Settings\nDESCRIPTION: Demonstrates how to organize settings into categories and sections using the category property.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.boolean\",\n    name: \"Example boolean setting\",\n    type: \"boolean\",\n    defaultValue: false,\n    category: [\"Category name\", \"Section heading\", \"Setting label\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Model Configuration Schema Definition\nDESCRIPTION: Defines the JSON schema for model configurations including required and optional fields. The schema specifies properties for model name, URL, hash information, and directory location with validation rules.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"models\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\",\n          \"format\": \"uri\"\n        },\n        \"hash\": {\n          \"type\": \"string\"\n        },\n        \"hash_type\": {\n          \"type\": \"string\"\n        },\n        \"directory\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"url\",\n        \"directory\"\n      ],\n      \"additionalProperties\": false\n    }\n  },\n  \"required\": [\n    \"version\",\n    \"state\",\n    \"nodes\"\n  ],\n  \"additionalProperties\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Method Hijacking Pattern in beforeRegisterNodeDef\nDESCRIPTION: Common pattern for extending existing node behavior by preserving and wrapping the original method implementation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync beforeRegisterNodeDef(nodeType, nodeData, app) {\n\tif (nodeType.comfyClass==\"MyNodeClass\") { \n\t\tconst onConnectionsChange = nodeType.prototype.onConnectionsChange;\n\t\tnodeType.prototype.onConnectionsChange = function (side,slot,connect,link_info,output) {     \n\t\t\tconst r = onConnectionsChange?.apply(this, arguments);   \n\t\t\tconsole.log(\"Someone changed my connection!\");\n\t\t\treturn r;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Node Outputs in Graphs - Python\nDESCRIPTION: The `prompt.output` structure is designed to map each node in a graph to an object containing details about the node's class type and its inputs. This facilitates tracking node connections and configurations efficiently.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_objects_and_hijacking.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nprompt.output[node_id].class_type, the unique name of the custom node class, as defined in the Python code\nprompt.output[node_id].inputs, which contains the value of each input (or widget) as a map from the input name to:\n    - the selected value, if it is a widget, or\n    - an array containing (`upstream_node_id`, `upstream_node_output_slot`) if there is a link connected to the input, or\n    - undefined, if it is a widget that has been converted to an input and is not connected\n    - other unconnected inputs are not included in `.inputs`\n```\n\n----------------------------------------\n\nTITLE: Handling Message Events in JavaScript\nDESCRIPTION: Example of a message handler function that processes incoming CustomEvent objects, demonstrating how to access event details and check for specific node IDs.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_messages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction messageHandler(event) {\n    if (event.detail.node == aNodeIdThatIsInteresting) {\n        // do something with event.detail.other_things\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Input Settings\nDESCRIPTION: Shows how to configure a number input setting with additional attributes like increment buttons.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.number\",\n    name: \"Example number setting\",\n    type: \"number\",\n    defaultValue: 0,\n    attrs: {\n        showButtons: true,\n    },\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ComfyWorkflow 0.4 JSON Schema\nDESCRIPTION: This JSON schema defines the structure of a ComfyWorkflow version 0.4. It includes definitions for workflow properties, nodes, links, and groups, with detailed specifications for each component's attributes and data types.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json_0.4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/definitions/ComfyWorkflow0_4\",\n  \"definitions\": {\n    \"ComfyWorkflow0_4\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"last_node_id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"last_link_id\": {\n          \"type\": \"number\"\n        },\n        \"nodes\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  }\n                ]\n              },\n              \"type\": {\n                \"type\": \"string\"\n              },\n              \"pos\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"0\": {\n                        \"type\": \"number\"\n                      },\n                      \"1\": {\n                        \"type\": \"number\"\n                      }\n                    },\n                    \"required\": [\n                      \"0\",\n                      \"1\"\n                    ],\n                    \"additionalProperties\": true\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  }\n                ]\n              },\n              \"size\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"0\": {\n                        \"type\": \"number\"\n                      },\n                      \"1\": {\n                        \"type\": \"number\"\n                      }\n                    },\n                    \"required\": [\n                      \"0\",\n                      \"1\"\n                    ],\n                    \"additionalProperties\": true\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"minItems\": 2,\n                    \"maxItems\": 2,\n                    \"items\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  }\n                ]\n              },\n              \"flags\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"collapsed\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"pinned\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"allow_interaction\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"horizontal\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"skip_repeated_outputs\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"additionalProperties\": true\n              },\n              \"order\": {\n                \"type\": \"number\"\n              },\n              \"mode\": {\n                \"type\": \"number\"\n              },\n              \"inputs\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"string\"\n                        },\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        {\n                          \"type\": \"number\"\n                        }\n                      ]\n                    },\n                    \"link\": {\n                      \"type\": [\n                        \"number\",\n                        \"null\"\n                      ]\n                    },\n                    \"slot_index\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"integer\"\n                        },\n                        {\n                          \"type\": \"string\"\n                        }\n                      ]\n                    }\n                  },\n                  \"required\": [\n                    \"name\",\n                    \"type\"\n                  ],\n                  \"additionalProperties\": true\n                }\n              },\n              \"outputs\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"string\"\n                        },\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        {\n                          \"type\": \"number\"\n                        }\n                      ]\n                    },\n                    \"links\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"array\",\n                          \"items\": {\n                            \"type\": \"number\"\n                          }\n                        },\n                        {\n                          \"type\": \"null\"\n                        }\n                      ]\n                    },\n                    \"slot_index\": {\n                      \"anyOf\": [\n                        {\n                          \"type\": \"integer\"\n                        },\n                        {\n                          \"type\": \"string\"\n                        }\n                      ]\n                    }\n                  },\n                  \"required\": [\n                    \"name\",\n                    \"type\"\n                  ],\n                  \"additionalProperties\": true\n                }\n              },\n              \"properties\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"Node name for S&R\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"additionalProperties\": true\n              },\n              \"widgets_values\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"array\"\n                  },\n                  {\n                    \"type\": \"object\",\n                    \"additionalProperties\": {}\n                  }\n                ]\n              },\n              \"color\": {\n                \"type\": \"string\"\n              },\n              \"bgcolor\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"id\",\n              \"type\",\n              \"pos\",\n              \"size\",\n              \"flags\",\n              \"order\",\n              \"mode\",\n              \"properties\"\n            ],\n            \"additionalProperties\": true\n          }\n        },\n        \"links\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"array\",\n            \"minItems\": 6,\n            \"maxItems\": 6,\n            \"items\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"anyOf\": [\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  }\n                ]\n              },\n              {\n                \"anyOf\": [\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  }\n                ]\n              },\n              {\n                \"anyOf\": [\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  }\n                ]\n              },\n              {\n                \"anyOf\": [\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  }\n                ]\n              },\n              {\n                \"anyOf\": [\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  {\n                    \"type\": \"number\"\n                  }\n                ]\n              }\n            ]\n          }\n        },\n        \"groups\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"bounding\": {\n                \"type\": \"array\",\n                \"minItems\": 4,\n                \"maxItems\": 4,\n                \"items\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"number\"\n                  }\n                ]\n\n```\n\n----------------------------------------\n\nTITLE: Detecting Workflow Interruption in ComfyUI\nDESCRIPTION: Demonstrates how to hijack the API's interrupt method to detect when a workflow is interrupted. This pattern allows execution of custom code before and/or after the original method is called.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { api } from \"../../scripts/api.js\";\n/* in setup() */\n    const original_api_interrupt = api.interrupt;\n    api.interrupt = function () {\n        /* Do something before the original method is called */\n        original_api_interrupt.apply(this, arguments);\n        /* Or after */\n    }\n```\n\n----------------------------------------\n\nTITLE: Capturing UI Button Events in ComfyUI\nDESCRIPTION: Demonstrates how to add event listeners to UI elements in ComfyUI. This example shows how to detect when the Queue button is clicked by attaching a standard DOM event listener.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction queue_button_pressed() { console.log(\"Queue button was pressed!\") }\ndocument.getElementById(\"queue-button\").addEventListener(\"click\", queue_button_pressed);\n```\n\n----------------------------------------\n\nTITLE: Steps for Inpainting Workflow Execution\nDESCRIPTION: This snippet provides a step-by-step guide to execute the inpainting workflow within ComfyUI. Each step ensures that the necessary models are loaded and the input image is processed correctly.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-fill-dev.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Ensure the `Load Diffusion Model` node has `flux1-fill-dev.safetensors` loaded.\n2. Ensure the `DualCLIPLoader` node has the following models loaded:\n   - clip_name1: `t5xxl_fp16.safetensors`\n   - clip_name2: `clip_l.safetensors`\n3. Ensure the `Load VAE` node has `ae.safetensors` loaded.\n4. Upload the input image provided in the document to the `Load Image` node; if you're using the version without a mask, remember to complete the mask drawing using the mask editor\n5. Click the `Queue` button, or use the shortcut `Ctrl(cmd) + Enter` to run the workflow\n```\n\n----------------------------------------\n\nTITLE: Sending API Requests from Client to Server in JavaScript\nDESCRIPTION: Client-to-server communication is handled by the 'fetchApi()' method defined in api.js. This method is used to send HTTP requests to the server's defined routes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napi.fetchApi()\n```\n\n----------------------------------------\n\nTITLE: Reading ComfyUI Settings\nDESCRIPTION: Shows how to read a setting value using the extensionManager.setting.get method.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app } from \"../../scripts/app.js\";\n\nif (app.extensionManager.setting.get('example.boolean')) {\n    console.log(\"Setting is enabled.\");\n} else {\n    console.log(\"Setting is disabled.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Version and Models for ComfyUI Workflow\nDESCRIPTION: This snippet defines the schema for the version number and models used in a ComfyUI workflow. It specifies the structure for model information, including name, URL, hash, and directory.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json_0.4.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"version\": {\n  \"type\": \"number\"\n},\n\"models\": {\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"url\": {\n        \"type\": \"string\",\n        \"format\": \"uri\"\n      },\n      \"hash\": {\n        \"type\": \"string\"\n      },\n      \"hash_type\": {\n        \"type\": \"string\"\n      },\n      \"directory\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"name\",\n      \"url\",\n      \"directory\"\n    ],\n    \"additionalProperties\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Submenu in Context Menus for ComfyUI\nDESCRIPTION: Shows how to create nested submenus in context menus using LiteGraph.ContextMenu. This example creates a menu with multiple options that trigger a callback when selected.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_examples.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction make_submenu(value, options, e, menu, node) {\n    const submenu = new LiteGraph.ContextMenu(\n        [\"option 1\", \"option 2\", \"option 3\"],\n        { \n            event: e, \n            callback: function (v) { \n                // do something with v (==\"option x\")\n            }, \n            parentMenu: menu, \n            node:node\n        }\n    )\n}\n\n/* ... */\n    options.push(\n        {\n            content: \"Menu with options\",\n            has_submenu: true,\n            callback: make_submenu,\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for ComfyUI Workflow Components\nDESCRIPTION: This code snippet defines the JSON schema for various components of a ComfyUI workflow, including nodes, links, configurations, and metadata. It specifies data types, required fields, and constraints for each element.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json_0.4.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"properties\": {\n    \"color\": {\n      \"type\": \"string\"\n    },\n    \"font_size\": {\n      \"type\": \"number\"\n    },\n    \"locked\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"title\",\n    \"bounding\"\n  ],\n  \"additionalProperties\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Properties in Graph Structures - Python\nDESCRIPTION: The `prompt.workflow` object encapsulates various properties related to the graph workflow, including configuration settings, group definitions, node and link management. It is crucial for representing the state and layout of the graph at any given time.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_objects_and_hijacking.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n`config` - a dictionary of additional configuration options (empty by default)\n`extra` - a dictionary containing extra information about the workflow. By default it contains:\n    - `extra.ds` - describes the current view of the graph (`scale` and `offset`)\n`groups` - all groups in the workflow\n`last_link_id` - the id of the last link added \n`last_node_id` - the id of the last node added\n`links` - a list of all links in the graph. Each entry is an array of five integers and one string:\n    - (`link_id`, `upstream_node_id`, `upstream_node_output_slot`, `downstream_node_id`, `downstream_node_input_slot`, `data type`)\n`nodes` - a list of all nodes in the graph. Each entry is a map of a subset of the properties of the node as described [above](#comfynode)\n    - The following properties are included: `flags`, `id`, `inputs`, `mode`, `order`, `pos`, `properties`, `size`, `type`, `widgets_values`\n    - In addition, unless a node has no outputs, there is an `outputs` property, which is a list of the outputs of the node, each of which contains:\n        - `name` - the name of the output\n        - `type` - the data type of the output\n        - `links` - a list of the `link_id` of all links from this output (if there are no connections, may be an empty list, or null), \n        - `shape` - the shape used to draw the output (default 3 for a dot)\n        - `slot_index` - the slot number of the output\n`version` - the LiteGraph version number (at time of writing, `0.4`)\n```\n\n----------------------------------------\n\nTITLE: Initialization Hook - init\nDESCRIPTION: Hook called during webpage load after graph creation but before node registration.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_hooks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync init()\n```\n\n----------------------------------------\n\nTITLE: Defining Links and Display Options in ComfyUI (Markdown)\nDESCRIPTION: This snippet defines links in ComfyUI, explains their various display options, and discusses the importance of link visibility in different scenarios.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/core-concepts/links.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Links connect nodes\n\nIn the terminology of ComfyUI, the lines or curves between nodes are called **_links_**. They're also known as **_connections_** or wires. Links can be displayed in several ways, such as straight lines (the default), spline curves, or completely hidden. Display of links is controlled from the ComfyUI **Setup** window and the **Toggle Link Visibility** button on the display toolbar at the lower right of the ComfyUI main window.\n\nLink display is crucial. Depending on the situation, it may be necessary to see all links. Especially when learning, sharing, or even just understanding workflows, the visibility of links enables users to follow the flow of data through the graph. For packaged workflows that aren't intended to be altered, it might make sense to hide the links to reduce clutter.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Widget Parameters in ComfyUI Nodes\nDESCRIPTION: Example of using non-reserved parameter keys like 'uiMin' and 'uiMax' for custom widgets to avoid validation issues with the new execution model.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/execution_model_inversion_guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef INPUT_TYPES(cls):\n    return {\n        \"required\": {\n            \"my_size\": (\"VEC2\", {\"uiMin\": 0.0, \"uiMax\": 1.0}),\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Properties for ComfyUI Workflow\nDESCRIPTION: This snippet defines the schema for extra properties in a ComfyUI workflow, including display scale, offset, workflow information, link extensions, and reroutes. It specifies complex nested structures and constraints.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json_0.4.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"extra\": {\n  \"anyOf\": [\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"ds\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"scale\": {\n                  \"type\": \"number\"\n                },\n                \"offset\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"0\": {\n                          \"type\": \"number\"\n                        },\n                        \"1\": {\n                          \"type\": \"number\"\n                        }\n                      },\n                      \"required\": [\n                        \"0\",\n                        \"1\"\n                      ],\n                      \"additionalProperties\": true\n                    },\n                    {\n                      \"type\": \"array\",\n                      \"minItems\": 2,\n                      \"maxItems\": 2,\n                      \"items\": [\n                        {\n                          \"type\": \"number\"\n                        },\n                        {\n                          \"type\": \"number\"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              },\n              \"required\": [\n                \"scale\",\n                \"offset\"\n              ],\n              \"additionalProperties\": true\n            },\n            \"info\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"author\": {\n                  \"type\": \"string\"\n                },\n                \"description\": {\n                  \"type\": \"string\"\n                },\n                \"version\": {\n                  \"type\": \"string\"\n                },\n                \"created\": {\n                  \"type\": \"string\"\n                },\n                \"modified\": {\n                  \"type\": \"string\"\n                },\n                \"software\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"name\",\n                \"author\",\n                \"description\",\n                \"version\",\n                \"created\",\n                \"modified\",\n                \"software\"\n              ],\n              \"additionalProperties\": true\n            },\n            \"linkExtensions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"number\"\n                  },\n                  \"parentId\": {\n                    \"type\": \"number\"\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"parentId\"\n                ],\n                \"additionalProperties\": true\n              }\n            },\n            \"reroutes\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"number\"\n                  },\n                  \"parentId\": {\n                    \"type\": \"number\"\n                  },\n                  \"pos\": {\n                    \"anyOf\": [\n                      {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"0\": {\n                            \"type\": \"number\"\n                          },\n                          \"1\": {\n                            \"type\": \"number\"\n                          }\n                        },\n                        \"required\": [\n                          \"0\",\n                          \"1\"\n                        ],\n                        \"additionalProperties\": true\n                      },\n                      {\n                        \"type\": \"array\",\n                        \"minItems\": 2,\n                        \"maxItems\": 2,\n                        \"items\": [\n                          {\n                            \"type\": \"number\"\n                          },\n                          {\n                            \"type\": \"number\"\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  \"linkIds\": {\n                    \"anyOf\": [\n                      {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"number\"\n                        }\n                      },\n                      {\n                        \"type\": \"null\"\n                      }\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"pos\"\n                ],\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    },\n    {\n      \"type\": \"null\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ComfyUI Manager using Git\nDESCRIPTION: Commands to clone the ComfyUI Manager repository into the custom_nodes directory of ComfyUI. This allows users to manage custom node installations through the Manager interface.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/manager.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ComfyUI/custom_nodes\ngit clone https://github.com/ltdrdata/ComfyUI-Manager.git\n```\n\n----------------------------------------\n\nTITLE: Node Creation Hook - nodeCreated\nDESCRIPTION: Hook called when a specific node instance is created, used for instance-specific modifications.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_hooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync nodeCreated(node)\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to a Custom Route using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to send a message to a custom route defined on the server using the `FormData` API. It creates a `FormData` object, appends the message and node ID to it, and then uses the `api.fetchApi` function to send a POST request to the specified route (`/my_new_path`). This sends the data to the server, where it can be processed.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_routes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { api } from \"../../scripts/api.js\";\nfunction send_message(node_id, message) {\n    const body = new FormData();\n    body.append('message',message);\n    body.append('node_id', node_id);\n    api.fetchApi(\"/my_new_path\", { method: \"POST\", body, });\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Type Validation with VALIDATE_INPUTS in ComfyUI\nDESCRIPTION: Example of using VALIDATE_INPUTS with input_types parameter to skip type validation for composite input types in ComfyUI nodes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/execution_model_inversion_guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef VALIDATE_INPUTS(cls, input_types):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Number, Boolean, String, and Array Inputs\nDESCRIPTION: This extensive JSON schema defines the structure and validation rules for various input types including numbers, booleans, strings, and arrays. It specifies properties like min/max values, default inputs, tooltips, and display options for each input type.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"string\",\n      \"const\": \"NUMBER\"\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min\": {\n              \"type\": \"number\"\n            },\n            \"max\": {\n              \"type\": \"number\"\n            },\n            \"step\": {\n              \"type\": \"number\"\n            },\n            \"display\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"slider\",\n                \"number\",\n                \"knob\"\n              ]\n            },\n            \"round\": {\n              \"anyOf\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"type\": \"boolean\",\n                  \"const\": false\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    }\n  ]\n},\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"string\",\n      \"const\": \"BOOLEAN\"\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"default\": {\n              \"type\": \"boolean\"\n            },\n            \"defaultInput\": {\n              \"type\": \"boolean\"\n            },\n            \"forceInput\": {\n              \"type\": \"boolean\"\n            },\n            \"tooltip\": {\n              \"type\": \"string\"\n            },\n            \"hidden\": {\n              \"type\": \"boolean\"\n            },\n            \"advanced\": {\n              \"type\": \"boolean\"\n            },\n            \"rawLink\": {\n              \"type\": \"boolean\"\n            },\n            \"lazy\": {\n              \"type\": \"boolean\"\n            },\n            \"label_on\": {\n              \"type\": \"string\"\n            },\n            \"label_off\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    }\n  ]\n},\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"string\",\n      \"const\": \"STRING\"\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"default\": {\n              \"type\": \"string\"\n            },\n            \"defaultInput\": {\n              \"type\": \"boolean\"\n            },\n            \"forceInput\": {\n              \"type\": \"boolean\"\n            },\n            \"tooltip\": {\n              \"type\": \"string\"\n            },\n            \"hidden\": {\n              \"type\": \"boolean\"\n            },\n            \"advanced\": {\n              \"type\": \"boolean\"\n            },\n            \"rawLink\": {\n              \"type\": \"boolean\"\n            },\n            \"lazy\": {\n              \"type\": \"boolean\"\n            },\n            \"multiline\": {\n              \"type\": \"boolean\"\n            },\n            \"dynamicPrompts\": {\n              \"type\": \"boolean\"\n            },\n            \"defaultVal\": {\n              \"type\": \"string\"\n            },\n            \"placeholder\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    }\n  ]\n},\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": [\n          \"string\",\n          \"number\"\n        ]\n      }\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"default\": {},\n            \"defaultInput\": {\n              \"type\": \"boolean\"\n            },\n            \"forceInput\": {\n              \"type\": \"boolean\"\n            },\n            \"tooltip\": {\n              \"type\": \"string\"\n            },\n            \"hidden\": {\n              \"type\": \"boolean\"\n            },\n            \"advanced\": {\n              \"type\": \"boolean\"\n            },\n            \"rawLink\": {\n              \"type\": \"boolean\"\n            },\n            \"lazy\": {\n              \"type\": \"boolean\"\n            },\n            \"control_after_generate\": {\n              \"type\": \"boolean\"\n            },\n            \"image_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"image_folder\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"input\",\n                \"output\",\n                \"temp\"\n              ]\n            },\n            \"allow_batch\": {\n              \"type\": \"boolean\"\n            },\n            \"video_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"remote\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"route\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    },\n                    {\n                      \"type\": \"string\",\n                      \"pattern\": \"^\\\\/\"\n                    }\n                  ]\n                },\n                \"refresh\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"number\",\n                      \"minimum\": -9007199254740991,\n                      \"maximum\": 9007199254740991\n                    },\n                    {\n                      \"type\": \"number\",\n                      \"maximum\": 9007199254740991,\n                      \"minimum\": -9007199254740991\n                    }\n                  ]\n                },\n                \"response_key\": {\n                  \"type\": \"string\"\n                },\n                \"query_params\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input Settings\nDESCRIPTION: Shows how to implement a text input setting using PrimeVue InputText component.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.text\",\n    name: \"Example text setting\",\n    type: \"text\",\n    defaultValue: \"Foo\",\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Logging Implementation\nDESCRIPTION: Debug code for tracking extension hook execution sequence through console logging.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n#invokeExtensions(method, ...args) {\n\tconsole.log(`invokeExtensions      ${method}`)\n\t// ...\n}\n\nasync #invokeExtensionsAsync(method, ...args) {\n\tconsole.log(`invokeExtensionsAsync ${method}`)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Messages in Python\nDESCRIPTION: Shows how to send custom messages from the server side using PromptServer.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_messages.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom server import PromptServer\n# then, in your main execution function (normally)\n        PromptServer.instance.send_sync(\"my.custom.message\", a_dictionary)\n```\n\n----------------------------------------\n\nTITLE: Installing ControlNet Models in ComfyUI\nDESCRIPTION: Provides manual download links and specifies the directory structure needed to properly install ControlNet models for ComfyUI. Dependencies include pre-downloaded model files and the ComfyUI software. Users must download the specified models and place them in the correct directory structure as shown.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/controlnet/depth-controlnet.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── architecturerealmix_v11.safetensors\n│   └── controlnet/\n│       └── control_v11f1p_sd15_depth_fp16.safetensors\n```\n\n----------------------------------------\n\nTITLE: Displaying MacOS Shortcuts Table in Markdown\nDESCRIPTION: A markdown table listing keyboard and mouse shortcuts for ComfyUI on MacOS. It covers similar operations as the Windows/Linux table but with MacOS-specific key combinations, including the Command (⌘) and Option (⌥) keys.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/shortcuts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Keybind                              | Explanation                                                                                                        |\n|--------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Implementing Combo Box Settings\nDESCRIPTION: Example of implementing a combo box setting with custom options and search/edit functionality.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.combo\",\n    name: \"Example combo setting\",\n    type: \"combo\",\n    defaultValue: \"first\",\n    options: [\n        { text: \"My first option\", value: \"first\" },\n        \"My second option\",\n    ],\n    attrs: {\n        editable: true,\n        filter: true,\n    },\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Returning UI Updates in Python\nDESCRIPTION: Shows how to return both UI updates and output values from a node's main function to trigger an 'executed' message.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_messages.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn { \"ui\":a_new_dictionary, \"result\": the_tuple_of_output_values }\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Input Settings with Decimal Support\nDESCRIPTION: Demonstrates how to configure a number input setting with decimal places and buttons.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.number\",\n    name: \"Example number setting\",\n    type: \"number\",\n    defaultValue: 42,\n    attrs: {\n        showButtons: true,\n        maxFractionDigits: 1,\n    },\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Executing install-deps Command\nDESCRIPTION: This command installs dependencies. It can accept a dependency spec file or a workflow file as input. The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"$ install-deps [OPTIONS]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Settings\nDESCRIPTION: Shows how to implement a slider input setting with min, max, and step values.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.slider\",\n    name: \"Example slider setting\",\n    type: \"slider\",\n    attrs: {\n        min: -10,\n        max: 10,\n        step: 0.5,\n    },\n    defaultValue: 0,\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Message Handler in JavaScript\nDESCRIPTION: Demonstrates how to register a listener for custom message types on the client side.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_messages.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napi.addEventListener(\"my.custom.message\", messageHandler);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Settings\nDESCRIPTION: Shows how to implement a hidden setting that can be accessed programmatically but isn't visible in the UI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.hidden\",\n    name: \"Example hidden setting\",\n    type: \"hidden\",\n}\n```\n\n----------------------------------------\n\nTITLE: Executing ComfyUI Node Command\nDESCRIPTION: This command shows the basic structure for executing a ComfyUI node command.  It shows the base command, possible options, the specific command to execute and any arguments that need to be passed to the command.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ comfy node [OPTIONS] COMMAND [ARGS]...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication in OpenAPI\nDESCRIPTION: OpenAPI security configuration snippet showing bearer token authentication setup for API endpoints.\nSOURCE: https://github.com/comfy-org/docs/blob/main/api-reference/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"security\": [\n  {\n    \"bearerAuth\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker Settings\nDESCRIPTION: Shows how to implement a color picker setting that accepts hex color values.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.color\",\n    name: \"Example color setting\",\n    type: \"color\",\n    defaultValue: \"ff0000\",\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining STRING Datatype in Python\nDESCRIPTION: The STRING datatype is used for text input and requires a default value. It is essential in handling string data in applications, ensuring type safety and consistency when processing string values.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* Additional parameters in `INPUT_TYPES`:\n\n  * `default` is required\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Node with Comfy CLI - Bash\nDESCRIPTION: The command `comfy node init` initializes a new Comfy node by generating necessary metadata. It requires the comfortable CLI to be installed and creates a `pyproject.toml` with node configuration details. This snippet helps prepare the node for publication.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/publishing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomfy node init\n```\n\n----------------------------------------\n\nTITLE: Executing reinstall Command\nDESCRIPTION: This command reinstalls specified custom nodes. It requires the ARGS... argument representing the custom nodes to reinstall. The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"$ reinstall [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition\nDESCRIPTION: This snippet defines an OpenAPI endpoint for retrieving installation details of a specific node using a GET request. It specifies the path as `/nodes/{nodeId}/install`, where `nodeId` is a path parameter representing the unique identifier of the node.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/nodes/returns-a-node-version-to-be-installed.mdx#2025-04-21_snippet_0\n\nLANGUAGE: OpenAPI\nCODE:\n```\n\"openapi: get /nodes/{nodeId}/install\"\n```\n\n----------------------------------------\n\nTITLE: Handling Setting Changes\nDESCRIPTION: Example of implementing an onChange handler for settings to react to user changes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_settings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"example.boolean\",\n    name: \"Example boolean setting\",\n    type: \"boolean\",\n    defaultValue: false,\n    onChange: (newVal, oldVal) => {\n        console.log(`Setting was changed from ${oldVal} to ${newVal}`);\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BOOLEAN Datatype in Python\nDESCRIPTION: The BOOLEAN datatype allows for true/false values and requires a default input. This is crucial for applications that depend on binary decision-making processes, enhancing logical control.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* Additional parameters in `INPUT_TYPES`:\n\n  * `default` is required\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Publishing when changing pyproject.toml\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure the Github Action to publish a new version of a custom node when the pyproject.toml file is modified. The specifics of the configuration need to be added to this snippet.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/cd.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n\n```\n```\n\n----------------------------------------\n\nTITLE: List Command Usage\nDESCRIPTION: Shows how to use the `list` subcommand, which displays a list of all currently downloaded models in a table format. It includes an option to specify the relative path where the models are stored, defaulting to 'models/checkpoints'.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/models.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n$ list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing Comfy CLI with Homebrew\nDESCRIPTION: Install the Comfy CLI tool using Homebrew package manager, which includes tapping the repository and installing the package\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-comfycli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap Comfy-Org/comfy-cli\nbrew install comfy-org/comfy-cli/comfy-cli\n```\n\n----------------------------------------\n\nTITLE: Installing ComfyUI\nDESCRIPTION: Installs the ComfyUI package using the `comfy install` command. This command is assumed to be provided by ComfyUI and handles the installation process.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-comfy-from-cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomfy install\n```\n\n----------------------------------------\n\nTITLE: Defining LATENT Datatype in Python with Torch\nDESCRIPTION: The LATENT datatype represents a dictionary containing a torch.Tensor for batch latent samples. This structure is important for complex data representations in models like stable diffusion.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* No additional parameters in `INPUT_TYPES`\n\n* Python datatype `dict`, containing a `torch.Tensor` with *shape* [B,C,H,W]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for UI Component Configuration in Comfy UI\nDESCRIPTION: This code defines part of a JSON schema for validating UI component configurations in Comfy UI. It includes specifications for routes, refresh parameters, query parameters, numeric constraints, and various display options.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"string\",\n\"pattern\": \"^\\\\/\"\n}\n]\n},\n\"refresh\": {\n\"anyOf\": [\n{\n\"type\": \"number\",\n\"minimum\": -9007199254740991,\n\"maximum\": 9007199254740991\n},\n{\n\"type\": \"number\",\n\"maximum\": 9007199254740991,\n\"minimum\": -9007199254740991\n}\n]\n},\n\"response_key\": {\n\"type\": \"string\"\n},\n\"query_params\": {\n\"type\": \"object\",\n\"additionalProperties\": {\n\"type\": \"string\"\n}\n},\n\"refresh_button\": {\n\"type\": \"boolean\"\n},\n\"control_after_refresh\": {\n\"type\": \"string\",\n\"enum\": [\n\"first\",\n\"last\"\n]\n},\n\"timeout\": {\n\"type\": \"number\",\n\"minimum\": 0\n},\n\"max_retries\": {\n\"type\": \"number\",\n\"minimum\": 0\n}\n},\n\"required\": [\n\"route\"\n],\n\"additionalProperties\": false\n},\n\"options\": {\n\"type\": \"array\",\n\"items\": {\n\"type\": [\n\"string\",\n\"number\"\n]\n}\n}\n},\n\"additionalProperties\": true\n}\n]\n}\n]\n},\n{\n\"type\": \"array\",\n\"minItems\": 2,\n\"maxItems\": 2,\n\"items\": [\n{\n\"type\": \"string\"\n},\n{\n\"anyOf\": [\n{\n\"not\": {}\n},\n{\n\"type\": \"object\",\n\"properties\": {\n\"default\": {},\n\"defaultInput\": {\n\"type\": \"boolean\"\n},\n\"forceInput\": {\n\"type\": \"boolean\"\n},\n\"tooltip\": {\n\"type\": \"string\"\n},\n\"hidden\": {\n\"type\": \"boolean\"\n},\n\"advanced\": {\n\"type\": \"boolean\"\n},\n\"rawLink\": {\n\"type\": \"boolean\"\n},\n\"lazy\": {\n\"type\": \"boolean\"\n}\n},\n\"additionalProperties\": true\n}\n]\n}\n]\n}\n]\n}\n},\n\"optional\": {\n\"type\": \"object\",\n\"additionalProperties\": {\n\"anyOf\": [\n{\n\"type\": \"array\",\n\"minItems\": 2,\n\"maxItems\": 2,\n\"items\": [\n{\n\"type\": \"string\",\n\"const\": \"INT\"\n},\n{\n\"anyOf\": [\n{\n\"not\": {}\n},\n{\n\"type\": \"object\",\n\"properties\": {\n\"default\": {\n\"anyOf\": [\n{\n\"type\": \"number\"\n},\n{\n\"type\": \"array\",\n\"items\": {\n\"type\": \"number\"\n}\n}\n]\n},\n\"defaultInput\": {\n\"type\": \"boolean\"\n},\n\"forceInput\": {\n\"type\": \"boolean\"\n},\n\"tooltip\": {\n\"type\": \"string\"\n},\n\"hidden\": {\n\"type\": \"boolean\"\n},\n\"advanced\": {\n\"type\": \"boolean\"\n},\n\"rawLink\": {\n\"type\": \"boolean\"\n},\n\"lazy\": {\n\"type\": \"boolean\"\n},\n\"min\": {\n\"type\": \"number\"\n},\n\"max\": {\n\"type\": \"number\"\n},\n\"step\": {\n\"type\": \"number\"\n},\n\"display\": {\n\"type\": \"string\",\n\"enum\": [\n\"slider\",\n\"number\",\n\"knob\"\n]\n},\n\"control_after_generate\": {\n\"type\": \"boolean\"\n}\n},\n\"additionalProperties\": true\n}\n]\n}\n]\n},\n{\n\"type\": \"array\",\n\"minItems\": 2,\n\"maxItems\": 2,\n\"items\": [\n{\n\"type\": \"string\",\n\"const\": \"FLOAT\"\n},\n{\n\"anyOf\": [\n{\n\"not\": {}\n},\n{\n\"type\": \"object\",\n\"properties\": {\n\"default\": {\n\"anyOf\": [\n{\n\"type\": \"number\"\n},\n{\n\"type\": \"array\",\n\"items\": {\n\"type\": \"number\"\n}\n}\n]\n},\n\"defaultInput\": {\n\"type\": \"boolean\"\n},\n\"forceInput\": {\n\"type\": \"boolean\"\n},\n\"tooltip\": {\n\"type\": \"string\"\n},\n\"hidden\": {\n\"type\": \"boolean\"\n},\n\"advanced\": {\n\"type\": \"boolean\"\n},\n\"rawLink\": {\n\"type\": \"boolean\"\n},\n\"lazy\": {\n\"type\": \"boolean\"\n},\n\"min\": {\n```\n\n----------------------------------------\n\nTITLE: Publishing when a new release is created\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure the Github Action to publish a new version of a custom node when a new release is created. The specifics of the configuration need to be added to this snippet.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/cd.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n\n```\n```\n\n----------------------------------------\n\nTITLE: Remove Command Usage\nDESCRIPTION: Illustrates the usage of the `remove` subcommand for removing downloaded models. Models can be removed by specifying their filenames or through interactive selection. The relative path can be specified, defaulting to 'models/checkpoints'.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/models.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n$ remove [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Stable with Conda\nDESCRIPTION: This snippet installs the stable version of PyTorch, TorchVision, and TorchAudio along with CUDA 12.1 support using Conda. It leverages the `pytorch` and `nvidia` channels to resolve dependencies.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/nvidia-install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia\n```\n\n----------------------------------------\n\nTITLE: Defining INT Datatype in Python\nDESCRIPTION: The INT datatype in Python is defined with required additional parameters, including a default value. It allows specification of minimum and maximum value constraints, making it suitable for numerous applications requiring numeric inputs.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* Additional parameters in `INPUT_TYPES`:\n\n  * `default` is required\n\n  * `min` and `max` are optional\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Node Components Definition\nDESCRIPTION: A comprehensive JSON Schema (draft-07) that defines the structure of node components including inputs, outputs, and metadata properties. The schema enforces property types, required fields, and validates against specific constraints like enumerations and numeric ranges.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"inputs\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"required\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"oneOf\": [\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {},\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"combobox\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"route\": {\n                        \"type\": \"string\"\n                      },\n                      \"path\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"oneOf\": [\n                            {\n                              \"type\": \"string\"\n                            },\n                            {\n                              \"type\": \"number\",\n                              \"minimum\": -9007199254740991,\n                              \"maximum\": 9007199254740991\n                            },\n                            {\n                              \"type\": \"number\",\n                              \"maximum\": 9007199254740991,\n                              \"minimum\": -9007199254740991\n                            }\n                          ]\n                        }\n                      },\n                      \"response_key\": {\n                        \"type\": \"string\"\n                      },\n                      \"query_params\": {\n                        \"type\": \"object\",\n                        \"additionalProperties\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"refresh_button\": {\n                        \"type\": \"boolean\"\n                      },\n                      \"control_after_refresh\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                          \"first\",\n                          \"last\"\n                        ]\n                      },\n                      \"timeout\": {\n                        \"type\": \"number\",\n                        \"minimum\": 0\n                      },\n                      \"max_retries\": {\n                        \"type\": \"number\",\n                        \"minimum\": 0\n                      }\n                    },\n                    \"required\": [\n                      \"route\"\n                    ],\n                    \"additionalProperties\": false\n                  },\n                  \"options\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": [\n                        \"string\",\n                        \"number\"\n                      ]\n                    }\n                  },\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"const\": \"COMBO\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"isOptional\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"type\",\n                  \"name\"\n                ],\n                \"additionalProperties\": true\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {},\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"type\": {\n                    \"type\": \"string\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"isOptional\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"type\",\n                  \"name\"\n                ],\n                \"additionalProperties\": true\n              }\n            ]\n          }\n        },\n        \"outputs\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"index\": {\n                \"type\": \"number\"\n              },\n              \"name\": {\n                \"type\": \"string\"\n              },\n              \"type\": {\n                \"type\": \"string\"\n              },\n              \"is_list\": {\n                \"type\": \"boolean\"\n              },\n              \"options\": {\n                \"type\": \"array\"\n              },\n              \"tooltip\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"index\",\n              \"name\",\n              \"type\",\n              \"is_list\"\n            ],\n            \"additionalProperties\": false\n          }\n        },\n        \"hidden\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {}\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"display_name\": {\n          \"type\": \"string\"\n        },\n        \"description\": {\n          \"type\": \"string\"\n        },\n        \"category\": {\n          \"type\": \"string\"\n        },\n        \"output_node\": {\n          \"type\": \"boolean\"\n        },\n        \"python_module\": {\n          \"type\": \"string\"\n        },\n        \"deprecated\": {\n          \"type\": \"boolean\"\n        },\n        \"experimental\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"inputs\",\n        \"outputs\",\n        \"name\",\n        \"display_name\",\n        \"description\",\n        \"category\",\n        \"output_node\",\n        \"python_module\"\n      ],\n      \"additionalProperties\": false\n    }\n  },\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Publisher Node Version OpenAPI Specification\nDESCRIPTION: Defines an HTTP POST endpoint for creating new versions of a specific node under a publisher, using path parameters to identify the unique node\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/versions/publish-a-new-version-of-a-node.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /publishers/{publisherId}/nodes/{nodeId}/versions\n```\n\n----------------------------------------\n\nTITLE: Publishing Node to Comfy Registry with CLI - Bash\nDESCRIPTION: Utilize the command `comfy node publish` to manually upload a custom node to the Comfy Registry. The user will be prompted to enter their API key for authentication. This method provides a straightforward way to deploy a node to the registry.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/publishing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomfy node publish\n\nAPI Key for publisher '<publisher id>': ****************************************************\n\n...Version 1.0.0 Published. \nSee it here: https://registry.comfy.org/publisherId/your-node\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Nightly with Conda\nDESCRIPTION: This snippet installs the nightly version of PyTorch, TorchVision, and TorchAudio along with CUDA 12.1 support using Conda. It uses the `pytorch-nightly` and `nvidia` channels, providing access to the latest features and bug fixes but potentially introducing instability.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/nvidia-install.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch-nightly -c nvidia\n```\n\n----------------------------------------\n\nTITLE: Defining AUDIO Datatype in Python with Torch\nDESCRIPTION: The AUDIO datatype represents a dictionary consisting of a torch.Tensor for audio samples. It includes a sample rate, making it essential for audio processing workflows in the Comfy framework.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* No additional parameters in `INPUT_TYPES`\n\n* Python datatype `dict`, containing a `torch.Tensor` with *shape* [B, C, T] and a sample rate.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Schema in JSON\nDESCRIPTION: This JSON schema defines the input properties for nodes under ComfyNode v2.0. It includes multiple data types like INT, FLOAT, BOOLEAN, and STRING, each having specific attributes and constraints. Dependencies involve adherence to JSON Schema specifications. Key elements include type distinctions, optional properties, and additional characteristics like min, max, and enum attributes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/definitions/ComfyNodeDefV2\",\n  \"definitions\": {\n    \"ComfyNodeDefV2\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"inputs\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {\n                    \"anyOf\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    ]\n                  },\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"min\": {\n                    \"type\": \"number\"\n                  },\n                  \"max\": {\n                    \"type\": \"number\"\n                  },\n                  \"step\": {\n                    \"type\": \"number\"\n                  },\n                  \"display\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"slider\",\n                      \"number\",\n                      \"knob\"\n                    ]\n                  },\n                  \"control_after_generate\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"const\": \"INT\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"isOptional\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"type\",\n                  \"name\"\n                ],\n                \"additionalProperties\": true\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {\n                    \"anyOf\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"number\"\n                        }\n                      }\n                    ]\n                  },\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"min\": {\n                    \"type\": \"number\"\n                  },\n                  \"max\": {\n                    \"type\": \"number\"\n                  },\n                  \"step\": {\n                    \"type\": \"number\"\n                  },\n                  \"display\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"slider\",\n                      \"number\",\n                      \"knob\"\n                    ]\n                  },\n                  \"round\": {\n                    \"anyOf\": [\n                      {\n                        \"type\": \"number\"\n                      },\n                      {\n                        \"type\": \"boolean\",\n                        \"const\": false\n                      }\n                    ]\n                  },\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"const\": \"FLOAT\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"isOptional\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"type\",\n                  \"name\"\n                ],\n                \"additionalProperties\": true\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"label_on\": {\n                    \"type\": \"string\"\n                  },\n                  \"label_off\": {\n                    \"type\": \"string\"\n                  },\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"const\": \"BOOLEAN\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"isOptional\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"type\",\n                  \"name\"\n                ],\n                \"additionalProperties\": true\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {\n                    \"type\": \"string\"\n                  },\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"multiline\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"dynamicPrompts\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"defaultVal\": {\n                    \"type\": \"string\"\n                  },\n                  \"placeholder\": {\n                    \"type\": \"string\"\n                  },\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"const\": \"STRING\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"isOptional\": {\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"type\",\n                  \"name\"\n                ],\n                \"additionalProperties\": true\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"default\": {},\n                  \"defaultInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"forceInput\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"tooltip\": {\n                    \"type\": \"string\"\n                  },\n                  \"hidden\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"advanced\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"rawLink\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"lazy\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"control_after_generate\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"image_upload\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"image_folder\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"input\",\n                      \"output\",\n                      \"temp\"\n                    ]\n                  },\n                  \"allow_batch\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"video_upload\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"remote\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"route\": {\n                        \"anyOf\": [\n                          {\n                            \"type\": \"string\",\n                            \"format\": \"uri\"\n                          },\n                          {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\/\"\n                          }\n                        ]\n                      },\n                      \"refresh\": {\n                        \"anyOf\": [\n                          {\n\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition for Publisher Tokens\nDESCRIPTION: This snippet defines an OpenAPI path for publishing tokens to a specific publisher. It specifies the HTTP method as POST and includes a path parameter, publisherId, to identify the target publisher.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/token-management/create-a-new-personal-access-token.mdx#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"openapi: post /publishers/{publisherId}/tokens\"\n```\n\n----------------------------------------\n\nTITLE: Locating ComfyUI Model Configuration Template\nDESCRIPTION: The file path to the model configuration template that can be used to customize model storage locations or share models with other applications like Automatic1111.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nComfyUI_windows_portable\n└─ 📂ComfyUI\n  └── extra_model_paths.yaml.example  // This file is the configuration template\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Stable Version\nDESCRIPTION: Installs the stable versions of PyTorch, torchvision, and torchaudio using pip3. The --index-url flag specifies the repository for ROCm 6.0 builds.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/amd-install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.0\n```\n\n----------------------------------------\n\nTITLE: Guider Datatype in Python\nDESCRIPTION: The GUIDER datatype generalizes the denoising process, allowing conditioning based on prompts. It requires a callable Python object, facilitating dynamic noise prediction and enhancement in the overall sampling process.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* A GUIDER is represented by a `callable` Python object providing a `__call__(*args, **kwargs)` method.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: COMBO Control Type Schema Definition for ComfyUI\nDESCRIPTION: JSON schema fragment that defines the structure for COMBO type controls in ComfyUI. It specifies the validation rules for combo controls, including their properties, remote data fetching capabilities, and display options.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/nodedef_json_1_0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"items\": [\n    {\n      \"type\": \"string\",\n      \"const\": \"COMBO\"\n    },\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"default\": {},\n            \"defaultInput\": {\n              \"type\": \"boolean\"\n            },\n            \"forceInput\": {\n              \"type\": \"boolean\"\n            },\n            \"tooltip\": {\n              \"type\": \"string\"\n            },\n            \"hidden\": {\n              \"type\": \"boolean\"\n            },\n            \"advanced\": {\n              \"type\": \"boolean\"\n            },\n            \"rawLink\": {\n              \"type\": \"boolean\"\n            },\n            \"lazy\": {\n              \"type\": \"boolean\"\n            },\n            \"control_after_generate\": {\n              \"type\": \"boolean\"\n            },\n            \"image_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"image_folder\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"input\",\n                \"output\",\n                \"temp\"\n              ]\n            },\n            \"allow_batch\": {\n              \"type\": \"boolean\"\n            },\n            \"video_upload\": {\n              \"type\": \"boolean\"\n            },\n            \"remote\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"route\": {\n                  \"anyOf\": [\n                    {\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    },\n                    {\n                      \"type\": \"string\",\n                      \"pattern\": \"^\\\\/\"\n                    }\n                  ]\n                }\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Custom Nodes\nDESCRIPTION: Command to install Python dependencies listed in the requirements.txt file of a custom node repository. This is executed automatically by ComfyUI Manager when installing a custom node.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/manager.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Model Paths in ComfyUI\nDESCRIPTION: A YAML configuration template for defining custom model paths in ComfyUI, which allows sharing models with other UIs like Automatic1111 or setting custom model storage locations.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#Rename this to extra_model_paths.yaml and ComfyUI will load it\n\n\n#config for a1111 ui\n#all you have to do is change the base_path to where yours is installed\na111:\n    base_path: path/to/stable-diffusion-webui/\n\n    checkpoints: models/Stable-diffusion\n    configs: models/Stable-diffusion\n    vae: models/VAE\n    loras: |\n         models/Lora\n         models/LyCORIS\n    upscale_models: |\n                  models/ESRGAN\n                  models/RealESRGAN\n                  models/SwinIR\n    embeddings: embeddings\n    hypernetworks: models/hypernetworks\n    controlnet: models/ControlNet\n\n#config for comfyui\n#your base path should be either an existing comfy install or a central folder where you store all of your models, loras, etc.\n\n#comfyui:\n#     base_path: path/to/comfyui/\n#     # You can use is_default to mark that these folders should be listed first, and used as the default dirs for eg downloads\n#     #is_default: true\n#     checkpoints: models/checkpoints/\n#     clip: models/clip/\n#     clip_vision: models/clip_vision/\n#     configs: models/configs/\n#     controlnet: models/controlnet/\n#     diffusion_models: |\n#                  models/diffusion_models\n#                  models/unet\n#     embeddings: models/embeddings/\n#     loras: models/loras/\n#     upscale_models: models/upscale_models/\n#     vae: models/vae/\n\n#other_ui:\n#    base_path: path/to/ui\n#    checkpoints: models/checkpoints\n#    gligen: models/gligen\n#    custom_nodes: path/custom_nodes\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment\nDESCRIPTION: This code snippet demonstrates how to create and activate a Conda environment named 'comfyenv' to manage dependencies for ComfyUI. It requires Miniconda to be installed prior to executing these commands. The environment will isolate packages required by ComfyUI from other projects.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/conda.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n comfyenv\nconda activate comfyenv\n```\n\n----------------------------------------\n\nTITLE: Installing Comfy CLI with pip\nDESCRIPTION: Install the Comfy CLI tool using Python's pip package manager for easy deployment and management\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-comfycli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install comfy-cli\n```\n\n----------------------------------------\n\nTITLE: Load LoRA Node Input and Output Parameters\nDESCRIPTION: Details of the input types and output types for the Load LoRA node, specifying how models and parameters interact in ComfyUI workflows.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/lora.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter Name   | Function                                                                                               |\n|------------------|--------------------------------------------------------------------------------------------------------|\n| `model`          | Connect to the base model                                                                              |\n| `clip`           | Connect to the CLIP model                                                                              |\n| `lora_name`      | Select the LoRA model to load and use                                                                  |\n| `strength_model` | Affects how strongly the LoRA influences the model weights; higher values make the LoRA style stronger |\n| `strength_clip`  | Affects how strongly the LoRA influences the CLIP text embeddings                                      |\n\n### Output Types\n\n| Parameter Name | Function                                             |\n|----------------|------------------------------------------------------|\n| `model`        | Outputs the model with LoRA adjustments applied      |\n| `clip`         | Outputs the CLIP model with LoRA adjustments applied |\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition\nDESCRIPTION: This snippet defines an OpenAPI endpoint for retrieving publishers. It specifies the HTTP method (GET) and the endpoint path (/users/publishers/).\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/publishers/retrieve-all-publishers-for-a-given-user.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"openapi: get /users/publishers/\"\n```\n\n----------------------------------------\n\nTITLE: Link to Download example workflow\nDESCRIPTION: This code snippet facilitates downloading a sample workflow in JSON format, providing users with an option to explore predefined configurations for text-to-image generation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/get_started/first_generation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<a className=\"prose\" href=\"https://github.com/Comfy-Org/docs/blob/main/public/text-to-image.json\" download style={{ display: 'inline-block', backgroundColor: '#0078D6', color: '#ffffff', padding: '10px 20px', borderRadius: '8px', borderColor: \"transparent\", textDecoration: 'none', fontWeight: 'bold'}}>\n    <p className=\"prose\" style={{ margin: 0, fontSize: \"0.8rem\" }}>Download text-to-image.json</p>\n  </a>\n```\n\n----------------------------------------\n\nTITLE: File Storage Structure for ComfyUI\nDESCRIPTION: This code snippet illustrates the directory structure needed for storing models in the ComfyUI application. This organization is crucial for the application to locate and use the different models effectively.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/wan/wan-video.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── diffusion_models/\n│   ├── ...                  # Let's download the models in the corresponding workflow\n│   ├── text_encoders/\n│   │   └─── umt5_xxl_fp8_e4m3fn_scaled.safetensors\n│   └── vae/\n│   │   └──  wan_2.1_vae.safetensors\n│   └── clip_vision/\n│       └──  clip_vision_h.safetensors   \n```\n\n----------------------------------------\n\nTITLE: Running PyTorch Docker Container for ComfyUI\nDESCRIPTION: Command to run the Nvidia PyTorch Docker container with GPU support and port forwarding for ComfyUI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/system_requirements.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8188:8188 --gpus all -it --rm nvcr.io/nvidia/pytorch:25.01-py3\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Nodes using Bash\nDESCRIPTION: This snippet shows how to install a custom node using the comfy CLI. The command requires the NODE_NAME as a parameter to identify which node to install.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomfy node install <NODE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Displaying Windows/Linux Shortcuts Table in Markdown\nDESCRIPTION: A markdown table listing keyboard and mouse shortcuts for ComfyUI on Windows and Linux platforms. It includes shortcuts for various operations like graph generation, undo/redo, workflow management, node selection and manipulation, and interface navigation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/shortcuts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Shortcut                           | Command                                                                                                        |\n|------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Importing Installation Link\nDESCRIPTION: This snippet demonstrates importing an installation link from the specified path to ensure users can access installation guidance within the documentation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/get_started/first_generation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport InstallLink from \"/snippets/install/install-link.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Manual Model Installation for Hunyuan3D-2mv-turbo\nDESCRIPTION: This snippet explains how to download and save the Hunyuan3D-2mv-turbo model for the specific workflow in ComfyUI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nDownload the model below and save it to the corresponding ComfyUI folder\n\n- hunyuan3d-dit-v2-mv-turbo: [model.fp16.safetensors](https://huggingface.co/tencent/Hunyuan3D-2mv/resolve/main/hunyuan3d-dit-v2-mv-turbo/model.fp16.safetensors?download=true) - after downloading, you can rename it to `hunyuan3d-dit-v2-mv-turbo.safetensors`\n\n```\nComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── hunyuan3d-dit-v2-mv-turbo.safetensors  // renamed file\n``\n```\n\n----------------------------------------\n\nTITLE: Installing ComfyUI Manager using Git\nDESCRIPTION: Command to clone the ComfyUI Manager repository from GitHub into the custom_nodes directory of a ComfyUI server installation. This is required when running the ComfyUI server application which doesn't include the Manager by default.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/core-concepts/nodes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ltdrdata/ComfyUI-Manager.git\n```\n\n----------------------------------------\n\nTITLE: Launching ComfyUI using Bash\nDESCRIPTION: This snippet provides the command to launch ComfyUI using the comfy CLI. The command is simple and requires no additional parameters.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomfy launch\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Nightly Build with CUDA 12.8 Support\nDESCRIPTION: Command for manually installing the PyTorch nightly version with CUDA 12.8 support, required for Nvidia 50 Series GPUs with Blackwell architecture.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/system_requirements.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu128\n```\n\n----------------------------------------\n\nTITLE: Flux.1 Dev Model Storage Paths\nDESCRIPTION: Specifies the directory structure for manually installing the Flux.1 Dev model files within the ComfyUI environment. This is required if the models are not automatically downloaded. The structure includes separate directories for text encoders, VAE, and diffusion models.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-text-to-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors\n│   │   └── t5xxl_fp16.safetensors\n│   ├── vae/\n│   │   └── ae.safetensors\n│   └── diffusion_models/\n│       └── flux1-dev.safetensors\n\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hunyuan3D-2mv-turbo Model\nDESCRIPTION: This code snippet shows the directory structure required for placing the downloaded Hunyuan3D-2mv-turbo model checkpoint file. The model file should be placed in the `checkpoints` subdirectory within the `models` directory of your ComfyUI installation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── hunyuan3d-dit-v2-mv-turbo.safetensors  // 重命名后的文件\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Models using Bash\nDESCRIPTION: This snippet explains how to download models using the comfy CLI. It requires a URL as input and specifies the target folder 'models/checkpoints' for storing the downloaded model.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomfy model download <url> models/checkpoints\n```\n\n----------------------------------------\n\nTITLE: Setting Up ComfyUI in Docker Container\nDESCRIPTION: Series of commands to clone ComfyUI repository, install requirements (excluding torch-related packages), and run the application with network listening enabled.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/system_requirements.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/comfyanonymous/ComfyUI\ncd ComfyUI\ngrep -v 'torchaudio\\|torchvision' requirements.txt > temp_requirements.txt\npip install -r temp_requirements.txt\npython main.py --listen\n```\n\n----------------------------------------\n\nTITLE: File Storage Structure for Model Files\nDESCRIPTION: This snippet outlines the directory structure to store the model files required for the Flux.1 fill dev model. Proper organization of model files is crucial for seamless integration and functionality within the ComfyUI framework.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-fill-dev.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │    ├── clip_l.safetensors\n│   │    └── t5xxl_fp16.safetensors\n│   ├── vae/\n│   │    └── ae.safetensors\n│   └── diffusion_models/\n│        └── flux1-fill-dev.safetensors\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for Flux Schnell Model Installation\nDESCRIPTION: Shows the directory structure for installing Flux Schnell model files in ComfyUI, highlighting differences from the Dev version.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/flux/flux-1-text-to-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors\n│   │   └── t5xxl_fp8_e4m3fn.safetensors\n│   ├── vae/\n│   │   └── ae.safetensors\n│   └── diffusion_models/\n│       └── flux1-schnell.safetensors\n```\n\n----------------------------------------\n\nTITLE: Github Actions Workflow for Comfy Node Publishing - YAML\nDESCRIPTION: This YAML configuration automates the process of deploying a Comfy custom node to the registry through GitHub Actions. Triggered by changes to `pyproject.toml` on the main branch, it uses a workflow to execute the Comfy publish-node-action. Requires storing API key in GitHub Secrets as `REGISTRY_ACCESS_TOKEN`.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/publishing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish to Comfy registry\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - \"pyproject.toml\"\n\njobs:\n  publish-node:\n    name: Publish Custom Node to registry\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v4\n      - name: Publish Custom Node\n        uses: Comfy-Org/publish-node-action@main\n        with:\n          personal_access_token: ${{ secrets.REGISTRY_ACCESS_TOKEN }} ## Add your own personal access token to your Github Repository secrets and reference it here.\n```\n\n----------------------------------------\n\nTITLE: LTX-Video Model Directory Structure\nDESCRIPTION: This code snippet shows the directory structure required for the LTX-Video model and its dependencies within the ComfyUI environment.  The model weights (ltx-video-2b-v0.9.5.safetensors) should be placed in the checkpoints directory, and the text encoder weights (t5xxl_fp16.safetensors) should be placed in the text_encoders directory.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/ltxv.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"├── checkpoints/\\n│   └── ltx-video-2b-v0.9.5.safetensors\\n└── text_encoders/\\n    └── t5xxl_fp16.safetensors\"\n```\n\n----------------------------------------\n\nTITLE: Executing update Command\nDESCRIPTION: This command updates specified custom nodes. It requires the ARGS... argument representing the custom nodes to update. The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n\"$ update [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository using Bash\nDESCRIPTION: This snippet demonstrates how to clone the ComfyUI repository from GitHub using the git command line tool. It requires access to the repository's URL and Git installed on the local machine. The command copies the repository to the local file system, allowing for offline work and modifications.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/git-clone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:comfyanonymous/ComfyUI.git\n```\n\n----------------------------------------\n\nTITLE: Define ComfyUI Image-to-Video v2 Model Storage Structure\nDESCRIPTION: This code snippet defines the directory structure for storing models required by the Hunyuan Image-to-Video v2 workflow in ComfyUI. It includes specific locations for shared models and the v2 \"replace\" version model, and defines where to place the clip_vision model along with the text_encoders, vae, and diffusion_models directories.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── clip_vision/\n│   │   └── llava_llama3_vision.safetensors                                // I2V shared model\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors                                             // Shared model\n│   │   └── llava_llama3_fp8_scaled.safetensors                            // Shared model\n│   ├── vae/\n│   │   └── hunyuan_video_vae_bf16.safetensors                             // Shared model\n│   └── diffusion_models/\n│       └── hunyuan_video_v2_replace_image_to_video_720p_bf16.safetensors  // V2 \\\"replace\\\" version model\"\n```\n\n----------------------------------------\n\nTITLE: Running PyTorch Docker Container\nDESCRIPTION: This command runs a PyTorch Docker container provided by Nvidia. It maps port 8188 to the host and utilizes all available GPUs. The container is removed after execution.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/installation/system_requirements.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8188:8188 --gpus all -it --rm nvcr.io/nvidia/pytorch:25.01-py3\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition - GET /plants\nDESCRIPTION: This snippet defines the OpenAPI specification for retrieving plant data. It specifies the HTTP method (GET) and the endpoint (/plants).\nSOURCE: https://github.com/comfy-org/docs/blob/main/api-reference/endpoint/get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Get Plants'\nopenapi: 'GET /plants'\n---\n```\n\n----------------------------------------\n\nTITLE: Executing uninstall Command\nDESCRIPTION: This command uninstalls specified custom nodes. It requires the ARGS... argument representing the custom nodes to uninstall.  The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n\"$ uninstall [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Navigating and Installing in Bash\nDESCRIPTION: This snippet demonstrates how to change the directory to ComfyUI and install the required Python dependencies listed in requirements.txt using pip. It relies on the presence of a requirements.txt file in the ComfyUI directory.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/pip-install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ComfyUI\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Define ComfyUI Image-to-Video v1 Model Storage Structure\nDESCRIPTION: This code snippet defines the directory structure for storing models required by the Hunyuan Image-to-Video v1 workflow in ComfyUI. It includes specific locations for shared models and the v1 \"concat\" version model. It shows where to place the clip_vision model, along with the text_encoders, vae, and diffusion_models directories.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── clip_vision/\n│   │   └── llava_llama3_vision.safetensors                     // I2V shared model\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors                                  // Shared model\n│   │   └── llava_llama3_fp8_scaled.safetensors                 // Shared model\n│   ├── vae/\n│   │   └── hunyuan_video_vae_bf16.safetensors                  // Shared model\n│   └── diffusion_models/\n│       └── hunyuan_video_image_to_video_720p_bf16.safetensors  // I2V v1 \\\"concat\\\" version model\"\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Nightly Build (CUDA 12.8)\nDESCRIPTION: This command installs the nightly version of PyTorch, torchvision, and torchaudio using pip. It uses the specified index URL to download the CUDA 12.8 version.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/installation/system_requirements.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu128\n```\n\n----------------------------------------\n\nTITLE: Executing show Command\nDESCRIPTION: This command shows information about nodes.  It requires the ARGS... argument representing the types of information to show (installed, enabled, etc.). The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n\"$ show [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment\nDESCRIPTION: Creates a Conda virtual environment named 'comfy-env' using Python 3.11 and then activates it. This allows for isolated dependency management for the ComfyUI project.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-comfy-from-cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n comfy-env python=3.11\nconda activate comfy-env\n```\n\n----------------------------------------\n\nTITLE: Creating Samurai Sword Action Video with Hunyuan Video I2V\nDESCRIPTION: Prompt for generating a video of a samurai waving a sword with dynamic camera movements and fast action.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nSamurai waving sword and hitting the camera. camera angle movement, zoom in, fast scene, super fast, dynamic\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running ComfyUI in Docker\nDESCRIPTION: These commands clone the ComfyUI repository, install dependencies from requirements.txt (excluding torchaudio and torchvision), and then starts the ComfyUI server in listen mode.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/installation/system_requirements.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/comfyanonymous/ComfyUI\ncd ComfyUI\ngrep -v 'torchaudio\\|torchvision' requirements.txt > temp_requirements.txt\npip install -r temp_requirements.txt\npython main.py --listen\n```\n\n----------------------------------------\n\nTITLE: Executing disable Command\nDESCRIPTION: This command disables specified custom nodes. It requires the ARGS... argument representing the custom nodes to disable.  The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"$ disable [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Executing deps-in-workflow Command\nDESCRIPTION: This command runs the deps-in-workflow command. It requires specifying a workflow file and an output file. The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"$ deps-in-workflow [OPTIONS]\"\n```\n\n----------------------------------------\n\nTITLE: Creating venv Environment\nDESCRIPTION: Creates a Python virtual environment named 'comfy-env' using the venv module and then activates it. This provides an isolated environment for Python packages for the ComfyUI installation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-comfy-from-cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv comfy-env\nsource comfy-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: ComfyUI Model Directory Structure\nDESCRIPTION: Demonstrates the recommended directory structure for storing ComfyUI models, including checkpoints, VAE, and ControlNet models\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/controlnet/controlnet.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── dreamCreationVirtual3DECommerce_v10.safetensors\n│   ├── vae/\n│   │   └── vae-ft-mse-840000-ema-pruned.safetensors\n│   └── controlnet/\n│       └── control_v11p_sd15_scribble_fp16.safetensors\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Nightly with Conda\nDESCRIPTION: This command installs the nightly builds of PyTorch, torchvision, and torchaudio using the Conda package manager. It specifies the `pytorch-nightly` channel to ensure that the nightly builds are installed instead of the stable releases. The command needs Conda to be installed and configured.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/mac-silicon-install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"conda install pytorch-nightly::pytorch torchvision torchaudio -c pytorch-nightly\"\n```\n\n----------------------------------------\n\nTITLE: Executing enable Command\nDESCRIPTION: This command enables specified custom nodes. It requires the ARGS... argument representing the custom nodes to enable. The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"$ enable [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Executing save-snapshot Command\nDESCRIPTION: This command saves a snapshot of the current ComfyUI environment. The output file path can be specified using the --output option.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n\"$ save-snapshot [OPTIONS]\"\n```\n\n----------------------------------------\n\nTITLE: Node Creation Debug Example\nDESCRIPTION: Example code for debugging node creation by adding a console log statement in the nodeCreated extension hook.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/js/javascript_objects_and_hijacking.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync nodeCreated(node) {\n    console.log(\"nodeCreated\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Completion for Comfy CLI\nDESCRIPTION: Enable shell completion hints to improve command-line usability and provide interactive suggestions for the Comfy CLI tool\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-comfycli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomfy --install-completion\n```\n\n----------------------------------------\n\nTITLE: Executing fix Command\nDESCRIPTION: This command fixes dependencies for specified custom nodes. It requires the ARGS... argument representing the custom nodes to fix dependencies for. The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"$ fix [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Starting Application - Python\nDESCRIPTION: This snippet shows how to navigate to the ComfyUI directory and execute the main application script using Python. Ensure that Python is installed on your system before running the command.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/run-comfy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ComfyUI\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Executing simple-show Command\nDESCRIPTION: This command shows simple information about nodes.  It requires the ARGS... argument representing the types of information to show (installed, enabled, etc.). The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n\"$ simple-show [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Download Command Usage\nDESCRIPTION: Demonstrates the usage of the `download` subcommand, which allows users to download a model from a specified URL to a specified relative path. The URL is a required parameter, while the relative path defaults to 'models/checkpoints'.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/models.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ download [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: React Download Button Component for ComfyUI Desktop\nDESCRIPTION: A React JSX component that renders a styled download button for ComfyUI Desktop Windows version, linking to the NVIDIA version download page.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/desktop/windows.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<a className=\"prose\" href=\"https://download.comfy.org/windows/nsis/x64\" style={{ display: 'inline-block', backgroundColor: '#0078D6', color: '#ffffff', padding: '10px 20px', borderRadius: '8px', borderColor: \"transparent\", textDecoration: 'none', fontWeight: 'bold'}}>\n    <p className=\"prose\" style={{ margin: 0, fontSize: \"0.8rem\" }}>Download for Windows (NVIDIA)</p>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Executing install Command\nDESCRIPTION: This command installs specified custom nodes. It requires the ARGS... argument representing the custom nodes to install.  The channel and mode options allow for specifying the operation mode (remote, local, or cache).\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"$ install [OPTIONS] ARGS...\"\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Options for ComfyUI Workflow\nDESCRIPTION: This snippet defines the schema for configuration options in a ComfyUI workflow, including properties like 'links_ontop' and 'align_to_grid'. It allows for null values and additional properties.\nSOURCE: https://github.com/comfy-org/docs/blob/main/specs/workflow_json_0.4.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"config\": {\n  \"anyOf\": [\n    {\n      \"anyOf\": [\n        {\n          \"not\": {}\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"links_ontop\": {\n              \"type\": \"boolean\"\n            },\n            \"align_to_grid\": {\n              \"type\": \"boolean\"\n            }\n          },\n          \"additionalProperties\": true\n        }\n      ]\n    },\n    {\n      \"type\": \"null\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ER Diagram of Custom Node Registry\nDESCRIPTION: This ER diagram illustrates the database schema for the Custom Node Registry, defining entities like PUBLISHER, USER, CUSTOM_NODE, and NODE_VERSION and their relationships.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    PUBLISHER {\n        string id PK\n    }\n\n    USER {\n        string id PK\n        string name\n        string publisher_id FK\n    }\n\n    CUSTOM_NODE {\n        string id PK\n        string name\n        string publisher_id FK\n    }\n\n    NODE_VERSION {\n        string id PK\n        string version\n        string node_id FK\n    }\n\n    PUBLISHER ||--o{ USER: \"has many\"\n    PUBLISHER ||--o{ CUSTOM_NODE: \"has many\"\n    CUSTOM_NODE ||--o{ NODE_VERSION: \"has many\"\n\n```\n\n----------------------------------------\n\nTITLE: Executing restore-snapshot Command\nDESCRIPTION: This command restores from a snapshot. It requires a PATH argument specifying the snapshot location.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"$ restore-snapshot [OPTIONS] PATH\"\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Nightly Version\nDESCRIPTION: Installs the nightly (pre-release) versions of PyTorch, torchvision, and torchaudio using pip3. The --pre flag enables installation of pre-release packages, and --index-url points to the ROCm 6.0 nightly builds.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/amd-install.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.0\n```\n\n----------------------------------------\n\nTITLE: Publishing manually\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure the Github Action to publish a new version of a custom node manually. The specifics of the configuration need to be added to this snippet.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/cd.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Nodes CLI Reference Component in MDX\nDESCRIPTION: Displays the imported Nodes CLI reference component within the documentation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<NodesCliReference/>\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Structure\nDESCRIPTION: Example of the configuration JSON file structure used by Comfy Desktop application\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install/troubleshooting-feedback.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_path\": \"{log_path}\",\n  \"config_path\": \"{config_path}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing ComfyUI Portable File Structure\nDESCRIPTION: The directory structure of ComfyUI Portable after extraction, showing the main components including the ComfyUI program, Python environment, update scripts, and launch batch files.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nComfyUI_windows_portable\n├── 📂ComfyUI                   // ComfyUI main program\n├── 📂python_embeded            // Independent Python environment\n├── 📂update                    // Batch scripts for upgrading portable version\n├── README_VERY_IMPORTANT.txt   // ComfyUI Portable usage instructions in English\n├── run_cpu.bat                 // Double click to start ComfyUI (CPU only)\n└── run_nvidia_gpu.bat          // Double click to start ComfyUI (Nvidia GPU)\n```\n\n----------------------------------------\n\nTITLE: Define OpenAPI Path for PUT Request\nDESCRIPTION: This snippet defines the OpenAPI path for updating a publisher. It specifies the HTTP method (PUT) and the endpoint URL `/publishers/{publisherId}`, where `{publisherId}` is a path parameter.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/publishers/update-a-publisher.mdx#2025-04-21_snippet_0\n\nLANGUAGE: OpenAPI\nCODE:\n```\n\"openapi: put /publishers/{publisherId}\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hunyuan3D-2 Model\nDESCRIPTION: This code snippet shows the directory structure required for placing the downloaded Hunyuan3D-2 model checkpoint file. The model file should be placed in the `checkpoints` subdirectory within the `models` directory of your ComfyUI installation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── hunyuan3d-dit-v2-mv.safetensors  // 重命名后的文件\"\n```\n\n----------------------------------------\n\nTITLE: Manual Model Installation for Hunyuan3D-2mv\nDESCRIPTION: This snippet provides instructions for downloading and saving the model required for the Hunyuan3D-2mv workflow in ComfyUI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDownload the model below and save it to the corresponding ComfyUI folder\n\n- hunyuan3d-dit-v2-mv: [model.fp16.safetensors](https://huggingface.co/tencent/Hunyuan3D-2mv/resolve/main/hunyuan3d-dit-v2-mv/model.fp16.safetensors?download=true) - after downloading, you can rename it to `hunyuan3d-dit-v2-mv.safetensors`\n\n```\nComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── hunyuan3d-dit-v2-mv.safetensors  // renamed file\n``\n```\n\n----------------------------------------\n\nTITLE: Identifying ComfyUI Service Start Message\nDESCRIPTION: The command line output that indicates the ComfyUI service has successfully started and is ready to use, displaying the local URL to access the web interface.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTo see the GUI go to: http://127.0.0.1:8188\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI PUT Endpoint\nDESCRIPTION: This snippet defines a PUT endpoint within an OpenAPI specification. It specifies the HTTP method as PUT and the path, which includes two path parameters: publisherId and nodeId, used to identify the resource being updated.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/nodes/update-a-specific-node.mdx#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"openapi: put /publishers/{publisherId}/nodes/{nodeId}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling CLI Tracking using Bash\nDESCRIPTION: This snippet demonstrates how to disable usage tracking for the comfy CLI. It requires no additional parameters.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomfy tracking disable\n```\n\n----------------------------------------\n\nTITLE: Manual Model Installation for Hunyuan3D-2\nDESCRIPTION: Instruction on how to download and save the model required for the Hunyuan3D-2 workflow in ComfyUI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nDownload the model below and save it to the corresponding ComfyUI folder\n\n- hunyuan3d-dit-v2-0: [model.fp16.safetensors](https://huggingface.co/tencent/Hunyuan3D-2/resolve/main/hunyuan3d-dit-v2-0/model.fp16.safetensors?download=true) - after downloading, you can rename it to `hunyuan3d-dit-v2.safetensors`\n\n```\nComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── hunyuan3d-dit-v2.safetensors  // renamed file\n``\n```\n\n----------------------------------------\n\nTITLE: MDX Import Statements for ComfyUI Documentation\nDESCRIPTION: Import statements for MDX components used throughout the ComfyUI Desktop installation documentation, including snippets for maintenance, troubleshooting, and update procedures.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/desktop/windows.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport MirrorLinks from \"/snippets/install/mirror-links.mdx\"\nimport MaintenancePage from \"/snippets/install/maintenance-page.mdx\"\nimport UpdateComfyui from \"/snippets/install/update-comfyui.mdx\"\nimport FirstGeneration from \"/snippets/install/first-generation.mdx\"\nimport TroubleshootingGpt from \"/snippets/install/troubleshooting-gpt.mdx\"\nimport TroubleshootingFeedback from \"/snippets/install/troubleshooting-feedback.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Sample Automatic1111 Model Path Configuration for ComfyUI\nDESCRIPTION: An example YAML configuration showing how to configure ComfyUI to use models from an Automatic1111 WebUI installation located at a specific directory path.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\na111:\n    base_path: D:\\stable-diffusion-webui\\\n    checkpoints: models/Stable-diffusion\n    configs: models/Stable-diffusion\n    vae: models/VAE\n    loras: |\n         models/Lora\n         models/LyCORIS\n    upscale_models: |\n                  models/ESRGAN\n                  models/RealESRGAN\n                  models/SwinIR\n    embeddings: embeddings\n    hypernetworks: models/hypernetworks\n    controlnet: models/ControlNet\n```\n\n----------------------------------------\n\nTITLE: Enabling CLI Tracking using Bash\nDESCRIPTION: This snippet shows how to re-enable usage tracking for the comfy CLI. Similar to disabling, it requires no parameters.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomfy tracking enable\n```\n\n----------------------------------------\n\nTITLE: File Storage Location Example\nDESCRIPTION: Illustrates the expected file structure for storing the downloaded models required for the Wan2.1 FLF2V ComfyUI workflow. It shows the directory structure under the ComfyUI directory, including diffusion_models, text_encoders, vae, and clip_vision, and the placement of the downloaded .safetensors files.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/wan/wan-flf.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── diffusion_models/\n│   ├── wan2.1_flf2v_720p_14B_fp16.safetensors\n│   ├── text_encoders/\n│   │   └─── umt5_xxl_fp8_e4m3fn_scaled.safetensors           # or your chosen version\n│   └── vae/\n│   │   └──  wan_2.1_vae.safetensors\n│   └── clip_vision/\n│       └──  clip_vision_h.safetensors   \"\n```\n\n----------------------------------------\n\nTITLE: Adding a New Language to Mintlify Documentation\nDESCRIPTION: JSON configuration example for adding a new language (French) to the docs.json file. This demonstrates how to structure the languages array with proper language code and content organization.\nSOURCE: https://github.com/comfy-org/docs/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"languages\": [\n    ...\n    {\n        \"language\": \"fr\",\n        \"groups\": [\n              {\n                \"group\": \"Get Started\",\n                \"pages\": [\n                  \"fr-FR/get_started/introduction\",\n                  ...\n                ]\n              }\n          ]\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding ComfyUI Portable Update Directory Structure\nDESCRIPTION: The file structure of the update folder in ComfyUI Portable, showing available batch scripts for updating the installation to different versions.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nComfyUI_windows_portable\n└─ 📂update\n   ├── update.py\n   ├── update_comfyui.bat                          // Update ComfyUI to the latest commit version\n   ├── update_comfyui_and_python_dependencies.bat  // Only use when you have issues with your runtime environment\n   └── update_comfyui_stable.bat                   // Update ComfyUI to the latest stable version\n```\n\n----------------------------------------\n\nTITLE: Flux.1 Schnell Model Storage Paths\nDESCRIPTION: Specifies the directory structure for manually installing the Flux.1 Schnell model files within the ComfyUI environment.  This is required if the models are not automatically downloaded. The structure includes separate directories for text encoders, VAE, and diffusion models.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-text-to-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors\n│   │   └── t5xxl_fp8_e4m3fn.safetensors\n│   ├── vae/\n│   │   └── ae.safetensors\n│   └── diffusion_models/\n│       └── flux1-schnell.safetensors\n\"\n```\n\n----------------------------------------\n\nTITLE: Model File Storage Structure for ComfyUI\nDESCRIPTION: Defines the recommended directory structure for storing Flux.1 model files, including text encoders, VAE, diffusion models, and LoRA models\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-controlnet.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors\n│   │   └── t5xxl_fp16.safetensors\n│   ├── vae/\n│   │   └── ae.safetensors\n│   ├── diffusion_models/\n│   │   └── flux1-dev.safetensors\n│   └── loras/\n│       └── flux1-depth-dev-lora.safetensors\n```\n\n----------------------------------------\n\nTITLE: Rendering Models Reference Component in MDX\nDESCRIPTION: Displays the imported Models reference component within the documentation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<ModelsReference/>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in JavaScript\nDESCRIPTION: Shows how to register an event listener for receiving messages from the server in the client-side code. This is typically done in the setup() function.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/comfyui-server/comms_messages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napi.addEventListener(message_type, messageHandler);\n```\n\n----------------------------------------\n\nTITLE: 配置Flux.1 Fill dev模型文件目录结构\nDESCRIPTION: 展示了Flux.1 Fill dev模型文件在ComfyUI目录中的正确存放位置。包括文本编码器、VAE和扩散模型文件的路径。\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/flux/flux-1-fill-dev.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │    ├── clip_l.safetensors\n│   │    └── t5xxl_fp16.safetensors\n│   ├── vae/\n│   │    └── ae.safetensors\n│   └── diffusion_models/\n│        └── flux1-fill-dev.safetensors\n```\n\n----------------------------------------\n\nTITLE: Define ComfyUI Model Storage Structure\nDESCRIPTION: This code snippet defines the directory structure for storing models required by ComfyUI for the Hunyuan Video workflows. It includes directories for text encoders, VAE (Variational Autoencoder), and diffusion models, essential for both Text-to-Video and Image-to-Video generation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors\n│   │   └── llava_llama3_fp8_scaled.safetensors\n│   ├── vae/\n│   │   └── hunyuan_video_vae_bf16.safetensors\"\n```\n\n----------------------------------------\n\nTITLE: Realistic Style Negative Prompts in CLIP Text Encoder\nDESCRIPTION: Negative prompts to prevent undesirable artifacts in realistic image generation\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/text-to-image.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n(deformed, cartoon, anime, doll, plastic skin, overexposed, blurry, extra fingers)\n```\n\n----------------------------------------\n\nTITLE: Anime Style Positive Prompts in CLIP Text Encoder\nDESCRIPTION: Example of positive prompts for generating an anime-style image with specific characteristics and quality enhancements\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/text-to-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nanime style, 1girl with long pink hair, cherry blossom background, studio ghibli aesthetic, soft lighting, intricate details\n\nmasterpiece, best quality, 4k\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Directory for Client-Side JavaScript in ComfyUI\nDESCRIPTION: Modifies the __init__.py file to specify the location of client-side JavaScript files for the custom node.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/walkthrough.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nWEB_DIRECTORY = \"./web/js\"\n__all__ = ['NODE_CLASS_MAPPINGS', 'WEB_DIRECTORY']\n```\n\n----------------------------------------\n\nTITLE: KSampler Flow Diagram - Mermaid\nDESCRIPTION: Flow diagram showing the KSampler process with inputs from Diffusion Model, Random Noise Latent Space, and CLIP Semantic Vectors, outputting a Denoised Latent.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/text-to-image.mdx#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\nA[Diffusion Model] --> B{KSampler}\nC[Random Noise<br>Latent Space] --> B\nD[CLIP Semantic Vectors] --> B\nB --> E[Denoised Latent]\n```\n\n----------------------------------------\n\nTITLE: Realistic Style Positive Prompts in CLIP Text Encoder\nDESCRIPTION: Detailed positive prompts for generating a highly realistic portrait with specific stylistic and technical parameters\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/text-to-image.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n(ultra realistic portrait:1.3), (elegant woman in crimson silk dress:1.2), \nfull body, soft cinematic lighting, (golden hour:1.2), \n(fujifilm XT4:1.1), shallow depth of field, \n(skin texture details:1.3), (film grain:1.1), \ngentie wind flow, warm color grading, (perfect facial symmetry:1.3)\n```\n\n----------------------------------------\n\nTITLE: Creating Accordions for Installation Guides - HTML\nDESCRIPTION: This snippet generates an accordion component for displaying installation guides for ComfyUI Desktop across different operating systems. It presents installation options for Windows, MacOS (with Apple Silicon), and provides a note for Linux users indicating the lack of prebuilt versions.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install/install-link.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<AccordionGroup>\n  <Accordion title=\"ComfyUI Desktop (Recommended)\">\n    ComfyUI Desktop currently supports standalone installation for **Windows and MacOS (ARM)**, currently in Beta\n    - Code is open source on [Github](https://github.com/Comfy-Org/desktop)\n\n    You can choose the appropriate installation for your system and hardware below\n    <Tabs>\n      <Tab title=\"Windows\">\n        <Card title=\"ComfyUI Desktop (Windows) Installation Guide\" icon=\"link\" href=\"/installation/desktop/windows\">\n        Suitable for **Windows** version with **Nvidia** GPU\n        </Card>\n      </Tab>\n      <Tab title=\"MacOS(Apple Silicon)\">\n        <Card title=\"ComfyUI Desktop (MacOS) Installation Guide\" icon=\"link\" href=\"/installation/desktop/macos\">\n          Suitable for MacOS with **Apple Silicon**\n        </Card>\n      </Tab>\n      <Tab title=\"Linux\">\n        <Note>ComfyUI Desktop **currently has no Linux prebuilds**, please visit the [Manual Installation](/installation/manual_install) section to install ComfyUI</Note>\n      </Tab>\n    </Tabs>\n  </Accordion>\n\n  <Accordion title=\"ComfyUI Portable (Windows)\">\n    <Card title=\"ComfyUI Portable (Windows) Installation Guide\" icon=\"link\" href=\"/installation/comfyui_portable_windows\">\n    Supports **Windows** ComfyUI version running on **Nvidia GPUs** or **CPU-only**, always use the latest commits and completely portable.\n    </Card>\n  </Accordion>\n\n  <Accordion title=\"Manual Installation\">\n    <Card title=\"ComfyUI Manual Installation Guide\" icon=\"link\" href=\"/installation/manual_install\">\n    Supports all system types and GPU types (Nvidia, AMD, Intel, Apple Silicon, Ascend NPU, Cambricon MLU)\n    </Card>\n  </Accordion>\n</AccordionGroup>\n```\n\n----------------------------------------\n\nTITLE: Steps to Run Hunyuan3D-2 Workflow\nDESCRIPTION: Detailed steps for executing the Hunyuan3D-2 workflow after the installation of the model.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n1. Ensure that the `Image Only Checkpoint Loader(img2vid model)` node has loaded our renamed `hunyuan3d-dit-v2.safetensors` model\n2. Load the image in the `Load Image` node\n3. Click the `Queue` button, or use the shortcut `Ctrl(cmd) + Enter` to run the workflow\n```\n\n----------------------------------------\n\nTITLE: Generating Futuristic Robot Ballet Video with Hunyuan Video I2V\nDESCRIPTION: Prompt for creating a video of a futuristic robot dancing ballet with dynamic and fast motion.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nFuturistic robot dancing ballet, dynamic motion, fast motion, fast shot, moving scene\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram of Diffusion Process\nDESCRIPTION: Illustrates the key stages of text-to-image generation using diffusion models\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/text-to-image.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\nA[Pure Gaussian Noise] --> B[Iterative Denoising]\nB --> C[Intermediate Latents]\nC --> D[Final Generated Image]\nE[Text Prompts] --> F[CLIP Encoder]\nF --> G[Semantic Vectors]\nG --> B\n```\n\n----------------------------------------\n\nTITLE: Displaying Installation Instructions - JavaScript\nDESCRIPTION: This snippet demonstrates how to render installation instructions for GPU dependencies in an accordion format using React. Each accordion section corresponds to a different GPU brand and contains the relevant installation guide component.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-gpu-dependencies.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Accordion title=\"Nvidia\">\n  <NvidiaInstall />\n</Accordion>\n<Accordion title=\"AMD\">\n  <AmdInstall />\n</Accordion>\n<Accordion title=\"Mac ARM Silicon\">\n  <MacInstall />\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Steps to Run Hunyuan3D-2mv-turbo Workflow\nDESCRIPTION: This snippet outlines the steps to execute the Hunyuan3D-2mv-turbo workflow after the model is set up.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Ensure that the `Image Only Checkpoint Loader(img2vid model)` node has loaded our renamed `hunyuan3d-dit-v2-mv-turbo.safetensors` model\n2. Load the corresponding view images in each of the `Load Image` nodes\n3. Click the `Queue` button, or use the shortcut `Ctrl(cmd) + Enter` to run the workflow\n```\n\n----------------------------------------\n\nTITLE: Modifying ComfyUI Batch File for LAN Access\nDESCRIPTION: A modified Windows batch file command that enables LAN access to ComfyUI by adding the --listen parameter, allowing other devices on the network to connect to the ComfyUI interface.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/comfyui_portable_windows.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bat\nCODE:\n```\n.\\python_embeded\\python.exe -s ComfyUI\\main.py --listen --windows-standalone-build\npause\n```\n\n----------------------------------------\n\nTITLE: Creating Cyberpunk Car Race Video with Hunyuan Video I2V\nDESCRIPTION: Prompt for generating a dynamic and fast-paced video of a cyberpunk car race in a night city setting.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\ncyberpunk car race in night city, dynamic, super fast, fast shot\n```\n\n----------------------------------------\n\nTITLE: Importing Installation Components - JavaScript\nDESCRIPTION: This snippet imports React components necessary for displaying GPU installation instructions specific to different platforms. It relies on the respective Markdown files to provide detailed installation guides for Nvidia, AMD, and Mac ARM Silicon GPUs.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install-gpu-dependencies.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AmdInstall from \"/snippets/amd-install.mdx\";\nimport NvidiaInstall from \"/snippets/nvidia-install.mdx\";\nimport MacInstall from \"/snippets/mac-silicon-install.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Steps to Run Hunyuan3D-2mv Workflow\nDESCRIPTION: This snippet details the steps to execute the Hunyuan3D-2mv workflow after installing the necessary model.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Ensure that the Image Only Checkpoint Loader(img2vid model) has loaded our downloaded and renamed `hunyuan3d-dit-v2-mv.safetensors` model\n2. Load the corresponding view images in each of the `Load Image` nodes\n3. Click the `Queue` button, or use the shortcut `Ctrl(cmd) + Enter` to run the workflow\n```\n\n----------------------------------------\n\nTITLE: Executing restore-dependencies Command\nDESCRIPTION: This command restores dependencies. No arguments are explicitly required.\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/cli-reference/nodes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"$ restore-dependencies [OPTIONS]\"\n```\n\n----------------------------------------\n\nTITLE: Model Download Links for Flux.1 ControlNet\nDESCRIPTION: Comprehensive list of model download URLs for Flux.1 ControlNet implementations, including text encoders, VAE, and specific ControlNet models\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-controlnet.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  - clip_l: https://huggingface.co/comfyanonymous/flux_text_encoders/resolve/main/clip_l.safetensors\n  - t5xxl_fp16: https://huggingface.co/comfyanonymous/flux_text_encoders/resolve/main/t5xxl_fp16.safetensors\n  - ae_vae: https://huggingface.co/black-forest-labs/FLUX.1-schnell/resolve/main/ae.safetensors\n  - flux1_canny_dev: https://huggingface.co/black-forest-labs/FLUX.1-Canny-dev/resolve/main/flux1-canny-dev.safetensors\n```\n\n----------------------------------------\n\nTITLE: Importing InstallLink Component in JSX\nDESCRIPTION: Import statement that brings in an InstallLink component from a snippet directory, likely containing installation instructions for ComfyUI.\nSOURCE: https://github.com/comfy-org/docs/blob/main/get_started/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport InstallLink from \"/snippets/install/install-link.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Anime Style Negative Prompts in CLIP Text Encoder\nDESCRIPTION: Example of negative prompts to exclude undesirable image characteristics\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/text-to-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlow quality, blurry, deformed hands, extra fingers\n```\n\n----------------------------------------\n\nTITLE: ComfyUI Model Directory Structure for ControlNet Models\nDESCRIPTION: Recommended file structure for organizing ControlNet, checkpoint, and VAE models in ComfyUI\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/controlnet/mixing-controlnets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── awpainting_v14.safetensors\n│   ├── controlnet/\n│   │   └── control_v11p_sd15_scribble_fp16.safetensors\n│   │   └── control_v11p_sd15_openpose_fp16.safetensors\n│   ├── vae/\n│   │   └── vae-ft-mse-840000-ema-pruned.safetensors\n```\n\n----------------------------------------\n\nTITLE: Configuring Mintlify Navigation for Internationalization\nDESCRIPTION: JSON configuration example for setting up multilingual navigation in docs.json. This demonstrates how to organize content in different languages (English and Chinese) while maintaining the same structure.\nSOURCE: https://github.com/comfy-org/docs/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"navigation\": {\n    \"languages\": [\n      {\n        \"language\": \"en\",\n        \"groups\": [\n              {\n                \"group\": \"Get Started\",\n                \"pages\": [\n                  \"get_started/introduction\",\n                ...\n                ]\n              },\n            ...\n        ]\n      },\n      {\n        \"language\": \"cn\",\n         \"groups\": [\n              {\n                \"group\": \"开始行动\",\n                \"pages\": [\n                  \"zh-CN/get_started/introduction\",\n                  ...\n                ]\n              }\n            ]\n      }\n    ]\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Prompt Technique for Regional ControlNet Mixing\nDESCRIPTION: Example prompt demonstrating how to describe multiple regions when using mixed ControlNets to generate an image with multiple elements\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/controlnet/mixing-controlnets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"A woman in red dress, a cat riding a scooter, detailed background, high quality\"\n```\n\n----------------------------------------\n\nTITLE: Importing CLI Reference Components in MDX\nDESCRIPTION: Imports MDX components for Nodes and Models CLI references to be used in the documentation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/comfy-cli/reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport NodesCliReference from '/snippets/cli-reference/nodes.mdx'\nimport ModelsReference from '/snippets/cli-reference/models.mdx'\n```\n\n----------------------------------------\n\nTITLE: Generating API Reference Documentation with OpenAPI\nDESCRIPTION: Command to generate MDX files for API endpoints using Mintlify's scraping tool from an OpenAPI specification file. This should be run in the registry/api-reference directory.\nSOURCE: https://github.com/comfy-org/docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd registry/api-reference # Keep API files separated by products.\nnpx @mintlify/scraping@latest openapi-file <path-to-openapi-file>\n```\n\n----------------------------------------\n\nTITLE: Define ComfyUI Text-to-Video Model Storage Structure\nDESCRIPTION: This code snippet defines the directory structure specifically for the Text-to-Video workflow models in ComfyUI. It shows the location of shared models in the text_encoders and vae directories, along with the location of the hunyuan_video_t2v_720p_bf16.safetensors model in the diffusion_models directory, which is specific to the Text-to-Video workflow.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors                       // Shared model\n│   │   └── llava_llama3_fp8_scaled.safetensors      // Shared model\n│   ├── vae/\n│   │   └── hunyuan_video_vae_bf16.safetensors       // Shared model\n│   └── diffusion_models/\n│       └── hunyuan_video_t2v_720p_bf16.safetensors  // T2V model\"\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Development Server with Mintlify\nDESCRIPTION: Command to run Mintlify in development mode at the root of the documentation directory where docs.json is located, enabling local preview of documentation changes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx mintlify dev\n```\n\n----------------------------------------\n\nTITLE: Generating Flying Car City Video with Hunyuan Video I2V\nDESCRIPTION: Prompt for creating a video of a flying car moving quickly through a city landscape.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/video/hunyuan-video.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nflying car fastly moving and flying through the city\n```\n\n----------------------------------------\n\nTITLE: Deleting Publisher by ID with OpenAPI\nDESCRIPTION: This snippet defines a DELETE operation for removing a publisher based on its ID. The path parameter `publisherId` is used to identify the publisher to be deleted.\nSOURCE: https://github.com/comfy-org/docs/blob/main/registry/api-reference/publishers/delete-a-publisher.mdx#2025-04-21_snippet_0\n\nLANGUAGE: OpenAPI\nCODE:\n```\n\"openapi: delete /publishers/{publisherId}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Documentation Development\nDESCRIPTION: Command to install the Mintlify CLI package via npm, which allows for local preview of documentation changes.\nSOURCE: https://github.com/comfy-org/docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mintlify\n```\n\n----------------------------------------\n\nTITLE: Log File Configuration YAML Example\nDESCRIPTION: Sample YAML configuration showing log and configuration file paths for ComfyUI desktop application\nSOURCE: https://github.com/comfy-org/docs/blob/main/snippets/install/troubleshooting-feedback.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextra_models_config.yaml:\n  log_path: {log_path}\n  config_path: {config_path}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Metadata Configuration\nDESCRIPTION: YAML frontmatter defining the page title and description for the MacOS Desktop installation guide.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/desktop/macos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"MacOS Desktop Version\"\ndescription: \"This article introduces how to download, install and use ComfyUI Desktop for MacOS\"\n---\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hunyuan3D-2 Single View Model\nDESCRIPTION: This code snippet shows the directory structure required for placing the downloaded Hunyuan3D-2 single view model checkpoint file. The model file should be placed in the `checkpoints` subdirectory within the `models` directory of your ComfyUI installation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/3d/hunyuan3D-2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── hunyuan3d-dit-v2.safetensors  // 重命名后的文件\"\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for Flux Model Installation\nDESCRIPTION: Illustrates the directory structure for installing Flux model files in ComfyUI, including text encoders, VAE, and diffusion models.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/flux/flux-1-text-to-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nComfyUI/\n├── models/\n│   ├── text_encoders/\n│   │   ├── clip_l.safetensors\n│   │   └── t5xxl_fp16.safetensors\n│   ├── vae/\n│   │   └── ae.safetensors\n│   └── diffusion_models/\n│       └── flux1-dev.safetensors\n```\n\n----------------------------------------\n\nTITLE: Model Directory Structure for ComfyUI\nDESCRIPTION: This snippet shows the directory structure required for placing the downloaded models for the ComfyUI workflow. The `interiordesignsuperm_v2.safetensors` file should be placed in the `checkpoints` directory, and the `t2iadapter_depth_sd15v2.pth` file should be placed in the `controlnet` directory. This ensures that ComfyUI can properly load and utilize these models.\nSOURCE: https://github.com/comfy-org/docs/blob/main/zh-CN/tutorials/controlnet/depth-t2i-adapter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ComfyUI/\n├── models/\n│   ├── checkpoints/\n│   │   └── interiordesignsuperm_v2.safetensors\n│   └── controlnet/\n│       └── t2iadapter_depth_sd15v2.pth\"\n```\n\n----------------------------------------\n\nTITLE: Windows System Path for Uninstallation\nDESCRIPTION: File paths that need to be manually deleted to completely remove ComfyUI Desktop from a Windows system, including application data folders and program files.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/desktop/windows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- C:\\Users\\<your username>\\AppData\\Local\\@comfyorgcomfyui-electron-updater\n- C:\\Users\\<your username>\\AppData\\Local\\Programs\\@comfyorgcomfyui-electron\n- C:\\Users\\<your username>\\AppData\\Roaming\\ComfyUI\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for ComfyUI Models\nDESCRIPTION: This code snippet shows the expected directory structure for HiDream-I1 model files within the ComfyUI environment. It specifies where to place text encoders, VAE, and diffusion models after downloading them from the provided links. This structured organization is crucial for ComfyUI to correctly load and utilize the models during workflow execution.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/advanced/hidream.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"📂 ComfyUI/\n├── 📂 models/\n│   ├── 📂 text_encoders/\n│   │   ├─── clip_l_hidream.safetensors\n│   │   ├─── clip_g_hidream.safetensors\n│   │   ├─── t5xxl_fp8_e4m3fn_scaled.safetensors\n│   │   └─── llama_3.1_8b_instruct_fp8_scaled.safetensors\n│   └── 📂 vae/\n│   │   └── ae.safetensors\n│   └── 📂 diffusion_models/\n│       └── ...               # We will guide you to install in the corresponding version workflow       \n\"\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Declarations\nDESCRIPTION: Import statements for various MDX components used throughout the installation guide documentation.\nSOURCE: https://github.com/comfy-org/docs/blob/main/installation/desktop/macos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport MirrorLinks from \"/snippets/install/mirror-links.mdx\"\nimport MaintenancePage from \"/snippets/install/maintenance-page.mdx\"\nimport UpdateComfyui from \"/snippets/install/update-comfyui.mdx\"\nimport FirstGeneration from \"/snippets/install/first-generation.mdx\"\nimport TroubleshootingGpt from \"/snippets/install/troubleshooting-gpt.mdx\"\nimport TroubleshootingFeedback from \"/snippets/install/troubleshooting-feedback.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Hero Image in JSX\nDESCRIPTION: JSX code that displays a screenshot of ComfyUI. The code includes responsive display logic that shows different versions based on light/dark theme settings.\nSOURCE: https://github.com/comfy-org/docs/blob/main/get_started/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  className=\"block dark:hidden\"\n  src=\"/images/comfyui_screenshot.png\"\n  alt=\"Hero Light\"\n/>\n<img\n  className=\"hidden dark:block\"\n  src=\"/images/comfyui_screenshot.png\"\n  alt=\"Hero Dark\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Steps for Outpainting Workflow Execution\nDESCRIPTION: This snippet outlines the necessary steps to execute the outpainting workflow in ComfyUI. Similar to the inpainting workflow, it ensures that appropriate models are loaded and the input image is being processed correctly.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/flux/flux-1-fill-dev.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Ensure the `Load Diffusion Model` node has `flux1-fill-dev.safetensors` loaded.\n2. Ensure the `DualCLIPLoader` node has the following models loaded:\n   - clip_name1: `t5xxl_fp16.safetensors`\n   - clip_name2: `clip_l.safetensors`\n3. Ensure the `Load VAE` node has `ae.safetensors` loaded.\n4. Upload the input image provided in the document to the `Load Image` node\n5. Click the `Queue` button, or use the shortcut `Ctrl(cmd) + Enter` to run the workflow\n```\n\n----------------------------------------\n\nTITLE: Defining SIGMAS Datatype in Python\nDESCRIPTION: The SIGMAS datatype represents a one-dimensional tensor holding noise values at each sampling step. This structure is critical for managing noise in diffusion models and requires a specific input for correct functioning.\nSOURCE: https://github.com/comfy-org/docs/blob/main/custom-nodes/backend/datatypes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n* SIGMAS is represented as a one-dimensional tensor, of length `steps+1`, where each element represents the noise expected to be present\n* before the corresponding step, with the final value representing the noise present after the final step.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Explaining the Reroute Node in ComfyUI (Markdown)\nDESCRIPTION: This snippet introduces the Reroute node in ComfyUI, explaining its purpose in improving the legibility of graph structures by allowing manual routing of link wires.\nSOURCE: https://github.com/comfy-org/docs/blob/main/essentials/core-concepts/links.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Reroute node\n\nIf legibility of the graph structure is important, then link wires can be manually routed in the 2D space of the graph with a tiny node called **Reroute**. Its purpose is to position the beginning and/or end points of link wires to ensure visibility. We can design a workflow so that link wires don't pass behind nodes, don't cross other link wires, and so on.\n```\n\n----------------------------------------\n\nTITLE: Loading LoRA Models in ComfyUI\nDESCRIPTION: Instructions for downloading and setting up LoRA models within the ComfyUI framework, specifically detailing the installation paths required for model files.\nSOURCE: https://github.com/comfy-org/docs/blob/main/tutorials/basic/lora.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDownload the [dreamshaper_8.safetensors](https://civitai.com/api/download/models/128713?type=Model&format=SafeTensor&size=pruned&fp=fp16) file and put it in your `ComfyUI/models/checkpoints` folder.\n\nDownload the [blindbox_V1Mix.safetensors](https://civitai.com/api/download/models/32988?type=Model&format=SafeTensor&size=full&fp=fp16) file and put it in your `ComfyUI/models/loras` folder.\n```"
  }
]