[
  {
    "owner": "sipgate-io",
    "repo": "sipgateio-node",
    "content": "TITLE: Installing sipgateio npm Package\nDESCRIPTION: Command to install the sipgateio package via npm package manager.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install sipgateio --save\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Personal Access Token\nDESCRIPTION: Creates a sipgate.io client instance using personal access token authentication.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = sipgateIO({\n\ttokenId: '<your tokenId>',\n\ttoken: '<your personal access token>',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with OAuth Token\nDESCRIPTION: Creates a sipgate.io client instance using OAuth token authentication.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = sipgateIO({\n\ttoken: '<valid Token>',\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Call Initialization\nDESCRIPTION: Example of initiating a basic call between two numbers using the sipgate.io API.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst call = createCallModule(client);\nconst callData = {\n\tfrom: 'e14',\n\tto: '+4921165432',\n};\n\ncall.initiate(callData);\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Interface for Webhook Server in TypeScript\nDESCRIPTION: Example of setting up a webhook server using the fluent interface, configuring port, address, and event listeners for various call events.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew FluentWebhookServer()\n\t.setServerPort(port)\n\t.setServerAddress(serverAddress)\n\t.setOnNewCallListener((newCallEvent) => {\n\t\tconsole.log(`New call from ${newCallEvent.from} \tto ${newCallEvent.to}`);\n\t})\n\t.setOnAnswerListener((answerEvent) => {\n\t\tconsole.log(`Answer from: ${answerEvent.from}`);\n\t})\n\t.setOnHangupListener((hangupEvent) => {\n\t\tconsole.log(`Hangup with cause: ${hangupEvent.cause}`);\n\t})\n\t.setOnDataListener((dataEvent) => {\n\t\tconsole.log(`Data from Call: ${dataEvent.originalCallId}`);\n\t})\n\t.startServer();\n```\n\n----------------------------------------\n\nTITLE: Authentication Interface Definitions\nDESCRIPTION: TypeScript interface definitions for OAuth and Personal Access Token authentication methods.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OAuthCredentials {\n\ttoken: string;\n}\n\ninterface PersonalAccessTokenCredentials {\n\ttokenId: string;\n\ttoken: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Group Call Example\nDESCRIPTION: Shows how to initiate a group call where multiple devices can ring simultaneously.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst callData = {\n\tfrom: '+4921123456',\n\tdeviceId: 'e14',\n\tto: '+4921165432',\n};\n\ncall.initiate(callData);\n```\n\n----------------------------------------\n\nTITLE: Custom Caller ID Call Example\nDESCRIPTION: Demonstrates how to initiate a call with a custom caller ID displayed to the recipient.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst callData = {\n\tfrom: 'p0',\n\tto: '+4921165432',\n\tcallerId: '+4917012345678',\n};\n\ncall.initiate(callData);\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Response Interface in TypeScript\nDESCRIPTION: Defines the interface for webhook responses that allows for various call handling operations like redirecting calls, sending to voicemail, rejecting calls, playing audio, and gathering DTMF tones.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebhookResponseInterface {\n\tredirectCall: (redirectOptions: RedirectOptions) => RedirectObject;\n\tsendToVoicemail: () => VoicemailObject;\n\trejectCall: (rejectOptions: RejectOptions) => RejectObject;\n\tplayAudio: (playOptions: PlayOptions) => PlayObject;\n\tplayAudioAndTransfer: (\n\t\tplayOptions: PlayOptions,\n\t\ttransferOptions: TransferOptions,\n\t\tclient: SipgateIOClient,\n\t\tcallId: string,\n\t\ttimeout?: number\n\t) => Promise<PlayObject>;\n\tplayAudioAndHangUp: (\n\t\tplayOptions: PlayOptions,\n\t\tclient: SipgateIOClient,\n\t\tcallId: string,\n\t\ttimeout?: number\n\t) => Promise<PlayObject>;\n\tgatherDTMF: (gatherOptions: GatherOptions) => GatherObject;\n\thangUpCall: () => HangUpObject;\n}\n```\n\n----------------------------------------\n\nTITLE: WebhookServer Interface for Event Handling in TypeScript\nDESCRIPTION: The WebhookServer interface defines methods for registering event callbacks for different webhook event types (NewCall, Answer, Hangup, and Data) and a method to stop the server. It returns a Promise that resolves to this interface.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebhookServer {\n\tonNewCall: (fn: HandlerCallback<NewCallEvent, ResponseObject | void>) => void;\n\tonAnswer: (fn: HandlerCallback<AnswerEvent, void>) => void;\n\tonHangup: (fn: HandlerCallback<HangUpEvent, void>) => void;\n\tonData: (fn: HandlerCallback<DataEvent, ResponseObject | void>) => void;\n\tstop: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: ServerOptions Interface for Webhook Server Configuration in TypeScript\nDESCRIPTION: The ServerOptions interface defines the configuration object required when creating a webhook server. It specifies the local port, public server address, optional hostname, and security settings.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ServerOptions {\n\t// the local port to listen on\n\tport: number;\n\t// the publicly accessible server address\n\t// (including the port, if not standard)\n\tserverAddress: string;\n\t// an optional hostname (default: localhost)\n\thostname?: string;\n\t// you can optionally skip the signature verification\n\tskipSignatureVerification?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Settings Module Functions in TypeScript\nDESCRIPTION: Functions for managing webhook settings, including setting and clearing URLs for incoming and outgoing webhooks, managing the whitelist of extensions, and toggling logging.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync function setIncomingUrl(url: string): Promise<void>;\nasync function clearIncomingUrl(): Promise<void>;\n\nasync function setOutgoingUrl(url: string): Promise<void>;\nasync function clearOutgoingUrl(): Promise<void>;\n\nasync function setWhitelist(extensions: string[]): Promise<void>;\nasync function clearWhitelist(): Promise<void>;\nasync function disableWhitelist(): Promise<void>;\n\nasync function setLog(value: boolean): Promise<void>;\n\ninterface WebhookSettings {\n\tincomingUrl: string;\n\toutgoingUrl: string;\n\tlog: boolean;\n\twhitelist: string[] | null;\n}\n\nasync function getWebhookSettings(): Promise<WebhookSettings>;\n```\n\n----------------------------------------\n\nTITLE: Defining RTCMModule Interface for Real Time Call Manipulation in TypeScript\nDESCRIPTION: Defines the Real Time Call Manipulation module that provides functions for managing active calls. Includes methods for retrieving calls and performing operations like muting, recording, and transferring.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RTCMModule {\n\tgetEstablishedCalls: () => Promise<RTCMCall[]>;\n\tmute: (call: RTCMCall, status: boolean) => Promise<void>;\n\trecord: (call: RTCMCall, recordOptions: RecordOptions) => Promise<void>;\n\tannounce: (call: RTCMCall, announcement: string) => Promise<void>;\n\ttransfer: (call: RTCMCall, transferOptions: TransferOptions) => Promise<void>;\n\tsendDTMF: (call: RTCMCall, sequence: string) => Promise<void>;\n\thold: (call: RTCMCall, status: boolean) => Promise<void>;\n\thangUp: (call: RTCMCall) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the History Module Interface in TypeScript\nDESCRIPTION: Defines the HistoryModule interface containing methods for fetching, updating, deleting, and exporting history events. The module provides comprehensive functionality for managing call history records through the sipgate API.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HistoryModule {\n\tfetchAll: (\n\t\tfilter?: HistoryFilter,\n\t\tpagination?: Pagination\n\t) => Promise<HistoryEntry[]>;\n\tfetchById: (entryId: string) => Promise<HistoryEntry>;\n\tdeleteByListOfIds: (entryIds: string[]) => Promise<void>;\n\tdeleteById: (entryId: string) => Promise<void>;\n\tbatchUpdateEvents: (\n\t\tevents: HistoryEntry[],\n\t\tcallback: (entry: HistoryEntry) => HistoryEntryUpdateOptions\n\t) => Promise<void>;\n\texportAsCsvString: (\n\t\tfilter?: BaseHistoryFilter,\n\t\tpagination?: Pagination\n\t) => Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Contacts Module Interface in TypeScript\nDESCRIPTION: Interface definition for the contacts module, providing methods for creating, updating, deleting, importing, and exporting contacts in various formats.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ContactImport {\n\tfirstname: string;\n\tlastname: string;\n\taddress?: Address;\n\tphone?: PhoneNumber;\n\temail?: Email;\n\torganization?: string[];\n}\n\ntype ContactUpdate = ContactResponse;\n\ninterface ContactResponse {\n\tid: string;\n\tname: string;\n\tpicture: string;\n\temails: Email[];\n\tnumbers: PhoneNumber[];\n\taddresses: Address[];\n\torganization: string[][];\n\tscope: Scope;\n}\n\ninterface ContactsModule {\n\tcreate: (contact: ContactImport, scope: Scope) => Promise<void>;\n\tupdate: (contact: ContactUpdate) => Promise<void>;\n\tdelete: (id: string) => Promise<void>;\n\tdeleteAllPrivate: () => Promise<void>;\n\tdeleteAllShared: () => Promise<void>;\n\timportFromCsvString: (csvContent: string) => Promise<void>;\n\timportVCardString: (vcardContent: string, scope: Scope) => Promise<void>;\n\texportAsCsv: (\n\t\tscope: ExportScope,\n\t\tdelimiter?: string,\n\t\tpagination?: Pagination,\n\t\tfilter?: ContactsExportFilter\n\t) => Promise<string>;\n\texportAsVCards: (\n\t\tscope: ExportScope,\n\t\tpagination?: Pagination,\n\t\tfilter?: ContactsExportFilter\n\t) => Promise<string[]>;\n\texportAsSingleVCard: (\n\t\tscope: ExportScope,\n\t\tpagination?: Pagination,\n\t\tfilter?: ContactsExportFilter\n\t) => Promise<string>;\n\tget: (\n\t\tscope: ExportScope,\n\t\tpagination?: Pagination,\n\t\tfilter?: ContactsExportFilter\n\t) => Promise<ContactResponse[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RedirectOptions Type in TypeScript\nDESCRIPTION: Specifies the options for redirecting calls, including the destination numbers, whether the call should be anonymous, and the caller ID to use.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype RedirectOptions = {\n\tnumbers: string[];\n\tanonymous?: boolean;\n\tcallerId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RTCMCall and Participant Interfaces in TypeScript\nDESCRIPTION: Specifies the structure for active calls and call participants in real-time call manipulation. Includes properties for call and participant states such as mute status, recording status, and hold status.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RTCMCall {\n\tcallId: string;\n\tmuted: boolean;\n\trecording: boolean;\n\thold: boolean;\n\tparticipants: Participant[];\n}\n\ninterface Participant {\n\tparticipantId: string;\n\tphoneNumber: string;\n\tmuted: boolean;\n\thold: boolean;\n\towner: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NumbersModule Interface in TypeScript\nDESCRIPTION: Defines the Numbers module interface that provides functionality to retrieve all phone numbers associated with a sipgate account. Returns number information including type and endpoint details.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumbersModule {\n\tgetAllNumbers: (pagination?: Pagination) => Promise<NumberResponseItem[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContactRequest Interface for Contact Management in TypeScript\nDESCRIPTION: Specifies the structure for contact records in the sipgate system. Contains fields for contact information including ID, name, picture, emails, phone numbers, addresses, organization, and scope.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ContactRequest {\n\tid: string;\n\tname: string;\n\tpicture: string;\n\temails: { email: string; type: string[] }[];\n\tnumbers: { number: string; type: string[] }[];\n\taddresses: Address[];\n\torganization: string[][];\n\tscope: Scope;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseHistoryEntry Interface for Call Records in TypeScript\nDESCRIPTION: Defines the BaseHistoryEntry interface which represents the common structure for all history events in the sipgate system. Contains properties for identifying, tracking, and managing communication records.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseHistoryEntry {\n\tid: string;\n\tsource: string;\n\ttarget: string;\n\tsourceAlias: string;\n\ttargetAlias: string;\n\ttype: HistoryEntryType;\n\tcreated: Date;\n\tlastModified: Date;\n\tdirection: Direction;\n\tincoming: boolean;\n\tstatus: string;\n\tconnectionIds: string[];\n\tread: boolean;\n\tarchived: boolean;\n\tnote: string;\n\tendpoints: RoutedEndpoint[];\n\tstarred: boolean;\n\tlabels: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransferOptions Interface in TypeScript\nDESCRIPTION: Specifies options for transferring calls in the Real Time Call Manipulation module. Controls whether the transfer is attended and the destination phone number for the transfer.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransferOptions {\n\tattended: boolean;\n\tphoneNumber: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GatherOptions Type in TypeScript\nDESCRIPTION: Specifies the options for gathering DTMF tones from callers, including an optional announcement, maximum number of digits to collect, and timeout period.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype GatherOptions = {\n\tannouncement?: string;\n\tmaxDigits: number;\n\ttimeout: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining History Filter and Pagination Interfaces in TypeScript\nDESCRIPTION: Specifies interfaces for filtering history entries and implementing pagination. HistoryFilter allows filtering by connection IDs, event types, directions, and other parameters, while Pagination controls the number of results returned.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HistoryFilter {\n\tconnectionIds?: string[];\n\ttypes?: HistoryEntryType[];\n\tdirections?: Direction[];\n\tarchived?: boolean;\n\tstarred?: boolean;\n\tfrom?: Date;\n\tto?: Date;\n\tphonenumber?: string;\n}\n\ninterface Pagination {\n\toffset?: number;\n\tlimit?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Device Module Function in TypeScript\nDESCRIPTION: Declares the getDevices function for retrieving device information associated with a specific web user. Takes a web user ID parameter and returns a Promise containing an array of Device objects.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getDevices(webuserId: string): Promise<Device[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining Voicemail Module Function in TypeScript\nDESCRIPTION: Declares the getVoicemails function for retrieving voicemail information. Returns a Promise containing an array of Voicemail objects with details about each voicemail configuration.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getVoicemails(): Promise<Voicemail[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining Device Types and Interfaces in TypeScript\nDESCRIPTION: Specifies types and interfaces for device information in the sipgate system. Includes device types, active routing information, and the main Device interface with properties for device status and settings.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DeviceType = 'REGISTER' | 'MOBILE' | 'EXTERNAL';\n\nexport interface ActiveRouting {\n\tid: string;\n\talias: string;\n}\n\nexport interface Device {\n\tid: string;\n\talias: string;\n\ttype: DeviceType;\n\tdnd: boolean;\n\tonline: boolean;\n\tcallerId?: string;\n\towner?: string;\n\tactivePhonelines: ActiveRouting[];\n\tactiveGroups: ActiveRouting[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntryUpdateOptions Interface in TypeScript\nDESCRIPTION: Specifies the options that can be updated for history entries. Provides a structure for modifying properties like archived status, starred status, notes, and read status of call history records.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HistoryEntryUpdateOptions {\n\tarchived?: boolean;\n\tstarred?: boolean;\n\tnote?: string;\n\tread?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NumberResponseItem Interface in TypeScript\nDESCRIPTION: Specifies the structure for phone number information returned by the Numbers module. Contains details about the number, its type, associated endpoint, and mobile number portability state if applicable.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberResponseItem {\n\tid: string;\n\tnumber: string;\n\tlocalized: string;\n\ttype: NumberResponseItemType;\n\tendpointId: string;\n\tendpointAlias: string;\n\tendpointUrl: string;\n\tmnpState?: NumberMnpState;\n\tportId?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Voicemail Interface in TypeScript\nDESCRIPTION: Specifies the structure for voicemail objects returned by the Voicemail module. Contains information about the voicemail ID, alias, and associated endpoint details.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Voicemail {\n\tid: string;\n\talias: string;\n\tbelongsToEndpoint: {\n\t\textension: string;\n\t\ttype: string;\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Audio Files with mpg123 Shell Command\nDESCRIPTION: Shell command for converting audio files to a format compatible with the sipgate.io API (mono 16bit PCM WAV with 8kHz sampling rate).\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmpg123 --rate 8000 --mono -w output.wav input.mp3\n```\n\n----------------------------------------\n\nTITLE: Defining RejectReason Enum in TypeScript\nDESCRIPTION: Enumeration of possible reasons for rejecting an incoming call, which can be either BUSY or REJECTED.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nenum RejectReason {\n\tBUSY = 'busy',\n\tREJECTED = 'rejected',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseHistoryFilter Interface for CSV Export in TypeScript\nDESCRIPTION: Specifies filtering options for exporting history entries as CSV. Allows filtering by connection IDs, types, directions, and date ranges to customize the exported data.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BaseHistoryFilter {\n\tconnectionIds?: string[];\n\ttypes?: HistoryEntryType[];\n\tdirections?: HistoryDirection[];\n\tarchived?: boolean;\n\tstarred?: boolean;\n\tstartDate?: Date;\n\tendDate?: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NumberResponseItemType Enum in TypeScript\nDESCRIPTION: Enumerates the possible types of phone numbers in the sipgate system. Categorizes numbers as mobile, landline, quickdial, or international for type-specific handling.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nenum NumberResponseItemType {\n\tMOBILE = 'MOBILE',\n\tLANDLINE = 'LANDLINE',\n\tQUICKDIAL = 'QUICKDIAL',\n\tINTERNATIONAL = 'INTERNATIONAL',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NumberMnpState Interface in TypeScript\nDESCRIPTION: Specifies the mobile number portability state for mobile numbers. Contains information about whether a number is released and until when it remains released.\nSOURCE: https://github.com/sipgate-io/sipgateio-node/blob/main/README.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberMnpState {\n\tisReleased: boolean;\n\treleasedUntil: Date;\n}\n```"
  }
]