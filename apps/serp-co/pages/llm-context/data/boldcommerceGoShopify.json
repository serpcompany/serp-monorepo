[
  {
    "owner": "bold-commerce",
    "repo": "go-shopify",
    "content": "TITLE: Implementing OAuth Flow for Shopify API Authentication\nDESCRIPTION: This code demonstrates the OAuth flow for authenticating with the Shopify API, including creating an app, generating an authorization URL, and obtaining an access token in the callback handler.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create an app somewhere.\napp := goshopify.App{\n    ApiKey: \"abcd\",\n    ApiSecret: \"efgh\",\n    RedirectUrl: \"https://example.com/shopify/callback\",\n    Scope: \"read_products,read_orders\",\n}\n\n// Create an oauth-authorize url for the app and redirect to it.\n// In some request handler, you probably want something like this:\nfunc MyHandler(w http.ResponseWriter, r *http.Request) {\n    shopName := r.URL.Query().Get(\"shop\")\n    state := \"nonce\"\n    authUrl := app.AuthorizeUrl(shopName, state)\n    http.Redirect(w, r, authUrl, http.StatusFound)\n}\n\n// Fetch a permanent access token in the callback\nfunc MyCallbackHandler(w http.ResponseWriter, r *http.Request) {\n    // Check that the callback signature is valid\n    if ok, _ := app.VerifyAuthorizationURL(r.URL); !ok {\n        http.Error(w, \"Invalid Signature\", http.StatusUnauthorized)\n        return\n    }\n\n    query := r.URL.Query()\n    shopName := query.Get(\"shop\")\n    code := query.Get(\"code\")\n    ctx := context.TODO() // adds context which will be used in GetAccessToken below\n    token, err := app.GetAccessToken(ctx, shopName, code)\n\n    // Do something with the token, like store it in a DB.\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Calls with Shopify Access Token\nDESCRIPTION: This code demonstrates how to create a Shopify API client using an access token and make API calls, such as counting products.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Create an app somewhere.\napp := goshopify.App{\n    ApiKey: \"abcd\",\n    ApiSecret: \"efgh\",\n    RedirectUrl: \"https://example.com/shopify/callback\",\n    Scope: \"read_products\",\n}\n\n// Create a new API client\nclient, err := goshopify.NewClient(app, \"shopname\", \"token\")\n\n// Fetch the number of products.\nnumProducts, err := client.Product.Count(nil)\n```\n\n----------------------------------------\n\nTITLE: Verifying Shopify Webhook Requests\nDESCRIPTION: This code demonstrates how to verify that a webhook request was legitimately sent from Shopify by validating the request signature.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidateWebhook(httpRequest *http.Request) (bool) {\n    shopifyApp := goshopify.App{ApiSecret: \"ratz\"}\n    return shopifyApp.VerifyWebhookRequest(httpRequest)\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a Private Shopify App\nDESCRIPTION: This code shows how to authenticate and make API calls as a Private Shopify app using basic authentication instead of OAuth.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Create an app somewhere.\napp := goshopify.App{\n\tApiKey: \"apikey\",\n\tPassword: \"apipassword\",\n}\n\n// Create a new API client (notice the token parameter is the empty string)\nclient, err := goshopify.NewClient(app, \"shopname\", \"\")\n\n// Fetch the number of products.\nnumProducts, err := client.Product.Count(nil)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shopify Resource Models\nDESCRIPTION: This code shows how to implement and use custom models for Shopify resources not directly supported by the library, such as fetching webhooks.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Declare a model for the webhook\ntype Webhook struct {\n    Id int         `json:\"id\"`\n    Address string `json:\"address\"`\n}\n\n// Declare a model for the resource root.\ntype WebhooksResource struct {\n    Webhooks []Webhook `json:\"webhooks\"`\n}\n\nfunc FetchWebhooks() ([]Webhook, error) {\n    path := \"admin/webhooks.json\"\n    resource := new(WebhooksResource)\n    client, _ := goshopify.NewClient(app, \"shopname\", \"token\")\n\n    // resource gets modified when calling Get\n    err := client.Get(path, resource, nil)\n\n    return resource.Webhooks, err\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Options with Shopify API\nDESCRIPTION: This example shows how to create custom query options using struct tags for API requests, such as filtering orders by status.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// Create custom options for the orders.\n// Notice the `url:\"status\"` tag\noptions := struct {\n    Status string `url:\"status\"`\n}{\"any\"}\n\n// Fetch the order count for orders with status=\"any\"\norderCount, err := client.Order.Count(options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Logic for Rate Limited API Calls\nDESCRIPTION: This code shows how to configure automatic retries for rate-limited API calls using the WithRetry option, specifying the number of retry attempts.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nclient, err := goshopify.NewClient(app, \"shopname\", \"\", goshopify.WithRetry(3))\n```\n\n----------------------------------------\n\nTITLE: Using Standard Query Options with Shopify API\nDESCRIPTION: This example demonstrates how to use the library's built-in CountOptions to filter results by date when counting products.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Create standard CountOptions\ndate := time.Date(2016, time.January, 1, 0, 0, 0, 0, time.UTC)\noptions := goshopify.CountOptions{createdAtMin: date}\n\n// Use the options when calling the API.\nnumProducts, err := client.Product.Count(options)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific API Version for Shopify Client\nDESCRIPTION: This code demonstrates how to specify a particular Shopify API version when creating a client using the WithVersion option.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient, err := goshopify.NewClient(app, \"shopname\", \"\", goshopify.WithVersion(\"2019-04\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Shopify v4 Using Go Get\nDESCRIPTION: This command installs version 4 of the Go-Shopify library using the Go package manager.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/bold-commerce/go-shopify/v4\n```\n\n----------------------------------------\n\nTITLE: Importing Go-Shopify v4 in Go Code\nDESCRIPTION: This snippet shows how to import version 4 of the Go-Shopify package in a Go application.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bold-commerce/go-shopify/v4\"\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Shopify v3 Using Go Get\nDESCRIPTION: This command installs version 3 of the Go-Shopify library using the Go package manager.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/bold-commerce/go-shopify/v3\n```\n\n----------------------------------------\n\nTITLE: Importing Go-Shopify v3 in Go Code\nDESCRIPTION: This snippet shows how to import version 3 of the Go-Shopify package in a Go application.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bold-commerce/go-shopify/v3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Shopify v2 Using Go Get\nDESCRIPTION: This command installs version 2 of the Go-Shopify library using the Go package manager.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/bold-commerce/go-shopify\n```\n\n----------------------------------------\n\nTITLE: Importing Go-Shopify v2 in Go Code\nDESCRIPTION: This snippet shows how to import version 2 of the Go-Shopify package in a Go application.\nSOURCE: https://github.com/bold-commerce/go-shopify/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bold-commerce/go-shopify\"\n```"
  }
]