[
  {
    "owner": "jetbrains",
    "repo": "exposed",
    "content": "TITLE: Implementing DAO with Exposed in Kotlin\nDESCRIPTION: This snippet shows how to use Exposed's DAO (Data Access Object) approach to define entities, create relationships between them, and perform database operations. It includes examples of entity definition, data insertion, and querying using the DAO pattern.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.exposed.dao.*\nimport org.jetbrains.exposed.dao.id.EntityID\nimport org.jetbrains.exposed.dao.id.IntIdTable\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nobject Users : IntIdTable() {\n    val name = varchar(\"name\", 50).index()\n    val city = reference(\"city\", Cities)\n    val age = integer(\"age\")\n}\n\nobject Cities: IntIdTable() {\n    val name = varchar(\"name\", 50)\n}\n\nclass User(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<User>(Users)\n\n    var name by Users.name\n    var city by City referencedOn Users.city\n    var age by Users.age\n}\n\nclass City(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<City>(Cities)\n\n    var name by Cities.name\n    val users by User referrersOn Users.city\n}\n\nfun main() {\n    Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\", user = \"root\", password = \"\")\n\n    transaction {\n        addLogger(StdOutSqlLogger)\n\n        SchemaUtils.create(Cities, Users)\n\n        val stPete = City.new {\n            name = \"St. Petersburg\"\n        }\n\n        val munich = City.new {\n            name = \"Munich\"\n        }\n\n        User.new {\n            name = \"a\"\n            city = stPete\n            age = 5\n        }\n\n        User.new {\n            name = \"b\"\n            city = stPete\n            age = 27\n        }\n\n        User.new {\n            name = \"c\"\n            city = munich\n            age = 42\n        }\n\n        println(\"Cities: ${City.all().joinToString { it.name }}\")\n        println(\"Users in ${stPete.name}: ${stPete.users.joinToString { it.name }}\")\n        println(\"Adults: ${User.find { Users.age greaterEq 18 }.joinToString { it.name }}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL DSL with Exposed in Kotlin\nDESCRIPTION: This snippet demonstrates how to use Exposed's SQL DSL to define tables, insert data, perform queries, and execute joins. It includes examples of table creation, data insertion, updates, deletes, and various types of queries including manual joins and group by operations.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.SqlExpressionBuilder.like\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nobject Users : Table() {\n    val id: Column<String> = varchar(\"id\", 10)\n    val name: Column<String> = varchar(\"name\", length = 50)\n    val cityId: Column<Int?> = (integer(\"city_id\") references Cities.id).nullable()\n\n    override val primaryKey = PrimaryKey(id, name = \"PK_User_ID\") // name is optional here\n}\n\nobject Cities : Table() {\n    val id: Column<Int> = integer(\"id\").autoIncrement()\n    val name: Column<String> = varchar(\"name\", 50)\n\n    override val primaryKey = PrimaryKey(id, name = \"PK_Cities_ID\")\n}\n\nfun main() {\n    Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\", user = \"root\", password = \"\")\n\n    transaction {\n        addLogger(StdOutSqlLogger)\n\n        SchemaUtils.create(Cities, Users)\n\n        val saintPetersburgId = Cities.insert {\n            it[name] = \"St. Petersburg\"\n        } get Cities.id\n\n        val munichId = Cities.insert {\n            it[name] = \"Munich\"\n        } get Cities.id\n\n        val pragueId = Cities.insert {\n            it.update(name, stringLiteral(\"   Prague   \").trim().substring(1, 2))\n        }[Cities.id]\n\n        val pragueName = Cities.selectAll().where { Cities.id eq pragueId }.single()[Cities.name]\n        println(\"pragueName = $pragueName\")\n\n        Users.insert {\n            it[id] = \"andrey\"\n            it[name] = \"Andrey\"\n            it[Users.cityId] = saintPetersburgId\n        }\n\n        Users.insert {\n            it[id] = \"sergey\"\n            it[name] = \"Sergey\"\n            it[Users.cityId] = munichId\n        }\n\n        Users.insert {\n            it[id] = \"eugene\"\n            it[name] = \"Eugene\"\n            it[Users.cityId] = munichId\n        }\n\n        Users.insert {\n            it[id] = \"alex\"\n            it[name] = \"Alex\"\n            it[Users.cityId] = null\n        }\n\n        Users.insert {\n            it[id] = \"smth\"\n            it[name] = \"Something\"\n            it[Users.cityId] = null\n        }\n\n        Users.update({ Users.id eq \"alex\" }) {\n            it[name] = \"Alexey\"\n        }\n\n        Users.deleteWhere{ Users.name like \"%thing\" }\n\n        println(\"All cities:\")\n\n        for (city in Cities.selectAll()) {\n            println(\"${city[Cities.id]}: ${city[Cities.name]}\")\n        }\n\n        println(\"Manual join:\")\n        \n        (Users innerJoin Cities)\n            .select(Users.name, Cities.name)\n            .where {\n                (Users.id.eq(\"andrey\") or Users.name.eq(\"Sergey\")) and\n                    Users.id.eq(\"sergey\") and Users.cityId.eq(Cities.id)\n            }.forEach { \n                println(\"${it[Users.name]} lives in ${it[Cities.name]}\") \n            }\n\n        println(\"Join with foreign key:\")\n\n        (Users innerJoin Cities)\n            .select(Users.name, Users.cityId, Cities.name)\n            .where { Cities.name.eq(\"St. Petersburg\") or Users.cityId.isNull() }\n            .forEach { \n                if (it[Users.cityId] != null) { \n                    println(\"${it[Users.name]} lives in ${it[Cities.name]}\") \n                } \n                else { \n                    println(\"${it[Users.name]} lives nowhere\") \n                } \n            }\n\n        println(\"Functions and group by:\")\n\n        ((Cities innerJoin Users)\n            .select(Cities.name, Users.id.count())\n            .groupBy(Cities.name)\n            ).forEach {\n                val cityName = it[Cities.name]\n                val userCount = it[Users.id.count()]\n\n                if (userCount > 0) {\n                    println(\"$userCount user(s) live(s) in $cityName\")\n                } else {\n                    println(\"Nobody lives in $cityName\")\n                }\n            }\n\n        SchemaUtils.drop(Users, Cities)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite with Exposed in Kotlin\nDESCRIPTION: This snippet shows how to connect to a SQLite database using Exposed. It includes adding the SQLite JDBC driver dependency, establishing connections to both file-based and in-memory databases, and setting a compatible isolation level.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.xerial:sqlite-jdbc:3.44.1.0\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\"jdbc:sqlite:/data/data.db\", \"org.sqlite.JDBC\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\"jdbc:sqlite:file:test?mode=memory&cache=shared\", \"org.sqlite.JDBC\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nTransactionManager.manager.defaultIsolationLevel = Connection.TRANSACTION_SERIALIZABLE\n// or Connection.TRANSACTION_READ_UNCOMMITTED\n```\n\n----------------------------------------\n\nTITLE: Connecting to H2 Database with Exposed in Kotlin\nDESCRIPTION: This snippet demonstrates how to connect to an H2 database using Exposed. It includes adding the H2 driver dependency and establishing connections to both file-based and in-memory databases.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.h2database:h2:2.2.224\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\"jdbc:h2:./myh2file\", \"org.h2.Driver\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\"jdbc:h2:mem:regular\", \"org.h2.Driver\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;\", \"org.h2.Driver\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL with Exposed in Kotlin\nDESCRIPTION: This snippet demonstrates how to connect to a MySQL database using Exposed. It includes adding the MySQL Connector/J dependency and establishing a connection with user credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"mysql:mysql-connector-java:8.0.33\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\n    \"jdbc:mysql://localhost:3306/test\",\n    driver = \"com.mysql.cj.jdbc.Driver\",\n    user = \"user\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using pgjdbc-ng with Exposed in Kotlin\nDESCRIPTION: This snippet shows how to connect to a PostgreSQL database using the pgjdbc-ng JDBC driver with Exposed. It includes adding the pgjdbc-ng dependency and establishing a connection with user credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.impossibl.pgjdbc-ng\", \"pgjdbc-ng\", \"0.8.9\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\n    \"jdbc:pgsql://localhost:12346/test\",\n    driver = \"com.impossibl.postgres.jdbc.PGDriver\",\n    user = \"user\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Transactions in Exposed\nDESCRIPTION: Demonstrates how to create and execute a basic transaction with default parameters in Exposed. All CRUD operations must be executed within a transaction block.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    // DSL/DAO operations go here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HikariCP for MySQL Connection in Kotlin\nDESCRIPTION: This code sets up a HikariConfig object for MySQL connection using HikariCP. It includes configuration for JDBC URL, driver, credentials, and connection pool size. It also mentions required Gradle dependencies.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-DataSource.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = HikariConfig().apply {\n    jdbcUrl = \"jdbc:mysql://localhost/dbname\"\n    driverClassName = \"com.mysql.cj.jdbc.Driver\"\n    username = \"username\"\n    password = \"password\"\n    maximumPoolSize = 6\n    // as of version 0.46.0, if these options are set here, they do not need to be duplicated in DatabaseConfig\n    isReadOnly = false\n    transactionIsolation = \"TRANSACTION_SERIALIZABLE\"\n}\n\n// Gradle\nimplementation \"mysql:mysql-connector-java:8.0.33\"\nimplementation \"com.zaxxer:HikariCP:4.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Using Independent Nested Transactions\nDESCRIPTION: Shows how to configure nested transactions to function independently using the useNestedTransactions=true setting. This makes rollbacks in nested transactions not affect the parent transaction.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval db = Database.connect(\n    // connection parameters\n)\ndb.useNestedTransactions = true\n\ntransaction {\n    println(\"Transaction # ${this.id}\") // Transaction # 1\n    FooTable.insert{ it[id] = 1 }\n    println(FooTable.selectAll().count()) // 1\n    \n    transaction {\n        println(\"Transaction # ${this.id}\") // Transaction # 2\n        FooTable.insert{ it[id] = 2 }\n        println(FooTable.selectAll().count()) // 2\n    \n        rollback() \n    }\n\n    println(FooTable.selectAll().count()) // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database using DataSource in Kotlin with Exposed\nDESCRIPTION: This snippet demonstrates how to connect to a database using a DataSource object with the Exposed framework. It allows for more advanced features like connection pooling.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-DataSource.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval db = Database.connect(dataSource)\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction with Advanced Parameters in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a transaction with specific isolation level, read-only mode, and database selection. It shows the basic structure for using advanced transaction parameters in Exposed.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction (Connection.TRANSACTION_SERIALIZABLE, true, db = db) {\n    // DSL/DAO operations go here\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application Configuration\nDESCRIPTION: Main application class configuration with Exposed auto-configuration and transaction manager settings.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.exposed.spring.autoconfigure.ExposedAutoConfiguration\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\n@ImportAutoConfiguration(\n    value = [ExposedAutoConfiguration::class],\n    exclude = [DataSourceTransactionManagerAutoConfiguration::class]\n)\nclass MyApplication\n\nfun main(args: Array<String>) {\n    runApplication<MyApplication>(*args)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database using HikariCP DataSource in Kotlin with Exposed\nDESCRIPTION: This snippet shows how to create a HikariDataSource using the previously configured HikariConfig and connect to the database using Exposed. It also demonstrates how to set additional database configuration parameters.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-DataSource.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval dataSource = HikariDataSource(config)\n\nDatabase.connect(\n    datasource = dataSource,\n    databaseConfig = DatabaseConfig {\n        // set other parameters here\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to MariaDB with Exposed in Kotlin\nDESCRIPTION: This snippet shows how to connect to a MariaDB database using Exposed. It includes adding the MariaDB JDBC driver dependency and establishing a connection with user credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.mariadb.jdbc:mariadb-java-client:3.3.1\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\"jdbc:mariadb://localhost:3306/test\",\n    driver = \"org.mariadb.jdbc.Driver\",\n    user = \"root\",\n    password = \"your_pwd\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed Core Dependencies in Kotlin Gradle\nDESCRIPTION: Add core Exposed modules and H2 database driver to the project dependencies using Kotlin Gradle DSL.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.jetbrains.exposed:exposed-core:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-dao:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-jdbc:$exposedVersion\")\n    implementation(\"com.h2database:h2:$h2Version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Coroutines in Exposed\nDESCRIPTION: Demonstrates using Exposed with Kotlin Coroutines through newSuspendedTransaction, withSuspendTransaction, and transaction functions, showing how they interact across different dispatchers.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    println(\"Transaction # ${this.id}\") // Transaction # 1\n    SchemaUtils.create(FooTable) // Table will be created on a current thread\n\n    runBlocking {\n        newSuspendedTransaction(Dispatchers.Default) {\n            println(\"Transaction # ${this.id}\") // Transaction # 2\n            FooTable.insert { it[id] = 1 }  // This insert will be executed in one of the Default dispatcher threads\n\n            withSuspendTransaction {\n                println(\"Transaction # ${this.id}\") // Transaction # 2\n                // This select also will be executed on some thread from Default dispatcher using the same transaction as its parent\n                FooTable.selectAll().where { FooTable.id eq 1 }.single()[FooTable.id]\n            }\n        }\n    }\n\n    transaction {\n        println(\"Transaction # ${this.id}\") // Transaction # 1\n    }\n\n    runBlocking {\n        val result = newSuspendedTransaction(Dispatchers.IO) {\n            println(\"Transaction # ${this.id}\") // Transaction # 3\n            FooTable.selectAll().where { FooTable.id eq 1 }.single()[FooTable.id] // This select will be executed on some thread from IO dispatcher\n        }\n        println(\"Result: $result\") // Result: 1\n    }\n\n    SchemaUtils.drop(Testing)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database with Exposed in Kotlin\nDESCRIPTION: This snippet shows how to connect to an Oracle database using Exposed. It includes adding the Oracle JDBC driver dependency and establishing a connection with user credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.oracle.database.jdbc:ojdbc8:12.2.0.1\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\n    \"jdbc:oracle:thin:@//localhost:1521/test\",\n    driver = \"oracle.jdbc.OracleDriver\",\n    user = \"user\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection in Exposed\nDESCRIPTION: Code snippet showing how to establish a connection to a PostgreSQL database using Exposed. It includes the JDBC URL, driver class, and authentication credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-data-types/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval postgreSQL = Database.connect(\n    \"jdbc:postgresql://localhost:5432/postgres\",\n    driver = \"org.postgresql.Driver\",\n    user = \"user\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with Exposed in Kotlin\nDESCRIPTION: This snippet demonstrates how to connect to a PostgreSQL database using Exposed. It includes adding the PostgreSQL JDBC driver dependency and establishing a connection with user credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.postgresql:postgresql:42.7.1\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\n    \"jdbc:postgresql://localhost:12346/test\",\n    driver = \"org.postgresql.Driver\",\n    user = \"user\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Returned Values from Transactions\nDESCRIPTION: Shows how to return values directly from transactions to enable immutability. The example demonstrates selecting users with the first name 'James' and returning the result as a list.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval jamesList = transaction {\n    Users.selectAll().where { Users.firstName eq \"James\" }.toList()\n}\n// jamesList is now a List<ResultRow> containing Users data\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Statement Interceptor in Exposed\nDESCRIPTION: Instructions for creating a configuration file to enable global statement interceptors in Exposed. This file should be placed in the resources folder and list the fully qualified class names of custom GlobalStatementInterceptor implementations.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Statement-Interceptors.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMETA-INF/services/org.jetbrains.exposed.sql.statements.GlobalStatementInterceptor\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed Dependencies with Gradle Kotlin DSL\nDESCRIPTION: Gradle build script using Kotlin DSL to configure Exposed dependencies with a version variable. Shows how to include required modules and select one of the date-time implementations.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exposedVersion: String by project\ndependencies {\n    implementation(\"org.jetbrains.exposed:exposed-core:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-crypt:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-dao:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-jdbc:$exposedVersion\")\n    \n    implementation(\"org.jetbrains.exposed:exposed-jodatime:$exposedVersion\")\n    // or\n    implementation(\"org.jetbrains.exposed:exposed-java-time:$exposedVersion\")\n    // or\n    implementation(\"org.jetbrains.exposed:exposed-kotlin-datetime:$exposedVersion\")\n    \n    implementation(\"org.jetbrains.exposed:exposed-json:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-money:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-spring-boot-starter:$exposedVersion\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Connection with Exposed DSL\nDESCRIPTION: Establishes a connection to a MySQL database using the Exposed framework. Configures essential connection parameters including JDBC URL, driver class, username and password.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dsl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysqlDb = Database.connect(\n        \"jdbc:mysql://localhost:3306/test\",\n        driver = \"com.mysql.cj.jdbc.Driver\",\n        user = \"root\",\n        password = \"password\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Foreign Key in Exposed Tables (Kotlin)\nDESCRIPTION: Demonstrates how to define a composite foreign key between parent and child tables using Exposed DSL. The foreign key references multiple columns in the parent table's primary key.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ParentTable : Table(\"parent1\") {\n    val idA = integer(\"id_a\")\n    val idB = integer(\"id_b\")\n    override val primaryKey = PrimaryKey(idA, idB)\n}\n\nobject ChildTable : Table(\"child1\") {\n    val idA = integer(\"id_a\")\n    val idB = integer(\"id_b\")\n\n    init {\n        foreignKey(\n            idA, idB,\n            target = ParentTable.primaryKey,\n            onUpdate = ReferenceOption.RESTRICT,\n            onDelete = ReferenceOption.RESTRICT,\n            name = \"MyForeignKey1\"\n        )\n        \n        // or\n        foreignKey(\n            idA to ParentTable.idA, idB to ParentTable.idB,\n            onUpdate = ReferenceOption.RESTRICT,\n            onDelete = ReferenceOption.RESTRICT,\n            name = \"MyForeignKey1\"\n        ) \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Databases in Exposed\nDESCRIPTION: Shows how to connect to multiple databases and switch between them in transactions. The example demonstrates using two different H2 in-memory databases and executing queries across them.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval db1 = connect(\"jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;\", \"org.h2.Driver\", \"root\", \"\")\nval db2 = connect(\"jdbc:h2:mem:db2;DB_CLOSE_DELAY=-1;\", \"org.h2.Driver\", \"root\", \"\")\ntransaction(db1) {\n   //...\n   val result = transaction(db2) {\n      Table1.selectAll().where { }.map { it[Table1.name] }\n   }\n   \n   val count = Table2.selectAll().where { Table2.name inList result }.count()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Upsert Syntax in Kotlin with Exposed ORM\nDESCRIPTION: Demonstrates the change in syntax for the 'upsert' function in Exposed 0.54.0. The 'onUpdate' parameter now takes a lambda with an UpdateStatement instead of a list of column-value pairs, allowing for more flexible update expressions.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// before\nTestTable.upsert(\n    onUpdate = listOf(Words.count to Words.count.plus(1))\n) {\n    it[word] = \"Kotlin\"\n    it[count] = 3\n}\n\n// after\nTestTable.upsert(\n    onUpdate = {\n        it[Words.count] = Words.count + 1\n    }\n) {\n    it[word] = \"Kotlin\"\n    it[count] = 3\n}\n\n// after - with new value from insert used in update expression\nTestTable.upsert(\n    onUpdate = {\n        it[Words.count] = Words.count + insertValue(Words.count)\n    }\n) {\n    it[word] = \"Kotlin\"\n    it[count] = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming SQL Results in Exposed\nDESCRIPTION: Shows how to retrieve and transform results from an SQL query, in this case getting the current database version.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    exec(\"SELECT VERSION()\") { rs ->\n        rs.next()\n        rs.getString(1)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Server with Exposed in Kotlin\nDESCRIPTION: This snippet demonstrates how to connect to a SQL Server database using Exposed. It includes adding the Microsoft JDBC driver dependency and establishing a connection with user credentials.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-Database.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.microsoft.sqlserver:mssql-jdbc:9.4.1.jre8\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.connect(\n    \"jdbc:sqlserver://localhost:32768;databaseName=test\",\n    \"com.microsoft.sqlserver.jdbc.SQLServerDriver\",\n    user = \"user\",\n    password = \"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Database in Exposed\nDESCRIPTION: Demonstrates how to explicitly set a default database for transactions instead of using the latest connected database. This approach provides better control over which database is used.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval db = Database.connect()\nTransactionManager.defaultDatabase = db\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Statements in Exposed (MySQL)\nDESCRIPTION: Demonstrates how to execute multiple SQL statements in a single prepared statement using MySQL, performing an insert and then querying the last inserted ID.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    val result = exec(\n        \"\"\"\n        INSERT INTO my_table (name) VALUES ('John');\n        SELECT LAST_INSERT_ID();\n        \"\"\".trimIndent(),\n        explicitStatementType = StatementType.MULTI\n    ) { rs ->\n        rs.next()\n        rs.getInt(1)\n    }\n    println(\"Inserted row ID: $result\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed Dependencies in Maven\nDESCRIPTION: Maven configuration for including all Exposed modules: core, crypt, dao, java-time, jdbc, jodatime, json, kotlin-datetime, money, and spring-boot-starter.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-core</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-crypt</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-dao</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-java-time</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-jdbc</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-jodatime</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-json</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-kotlin-datetime</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-money</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-spring-boot-starter</artifactId>\n        <version>0.61.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL in Exposed Transaction\nDESCRIPTION: Demonstrates how to execute a raw SQL string within an Exposed transaction using the .exec() function.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    exec(\"CREATE TABLE IF NOT EXISTS my_table (id INT PRIMARY KEY, name VARCHAR(255))\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Check Constraints in Exposed\nDESCRIPTION: Demonstrates creating an integer column with check constraints to restrict values to a non-negative range, as an alternative to using uint() columns.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ninteger(\"number\").check { it.between(0, Int.MAX_VALUE) }\n// OR\ninterger(\"number\").check { (it greaterEq 0) and (it lessEq Int.MAX_VALUE) }\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout in Exposed Transactions in Kotlin\nDESCRIPTION: This snippet illustrates how to set a query timeout within a transaction block. It sets a 3-second timeout for each statement in the block and includes error handling for timeout exceptions.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    queryTimeout = 3\n    try {\n        // operation that may run for more than 3 seconds\n    } catch (cause: ExposedSQLException) {\n        // logic to perform if execution timed out\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyword Casing Preservation in Exposed Tables\nDESCRIPTION: Demonstrates how to preserve keyword identifier casing in table and column names using DatabaseConfig. This affects databases like H2, Oracle, and PostgreSQL that perform case folding on identifiers.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TestTable : Table(\"table\") {\n    val col = integer(\"select\")\n}\n\n// without opt-in (default set to false)\n// H2 generates SQL -> CREATE TABLE IF NOT EXISTS \"TABLE\" (\"SELECT\" INT NOT NULL)\n\n// with opt-in\nDatabase.connect(\n    url = \"jdbc:h2:mem:test\",\n    driver = \"org.h2.Driver\",\n    databaseConfig = DatabaseConfig {\n        @OptIn(ExperimentalKeywordApi::class)\n        preserveKeywordCasing = true\n    }\n)\n// H2 generates SQL -> CREATE TABLE IF NOT EXISTS \"table\" (\"select\" INT NOT NULL)\n```\n\n----------------------------------------\n\nTITLE: SQLite Long Column Check Constraint Implementation\nDESCRIPTION: Implementation of CHECK constraints for long columns in SQLite to ensure value range validation. Includes both nullable and non-nullable column implementations with custom type checking.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval long = long(\"long_column\").check { column ->\n    fun typeOf(value: String) = object : ExpressionWithColumnType<String>() {\n        override fun toQueryBuilder(queryBuilder: QueryBuilder) = queryBuilder { append(\"typeof($value)\") }\n        override val columnType: IColumnType<String> = TextColumnType()\n    }\n    Expression.build { typeOf(column.name) eq stringLiteral(\"integer\") }\n}\n\nval long = long(\"long_column\").nullable().check { column ->\n    fun typeOf(value: String) = object : ExpressionWithColumnType<String>() {\n        override fun toQueryBuilder(queryBuilder: QueryBuilder) = queryBuilder { append(\"typeof($value)\") }\n        override val columnType: IColumnType<String> = TextColumnType()\n    }\n\n    val typeCondition = Expression.build { typeOf(column.name) eq stringLiteral(\"integer\") }\n    column.isNull() or typeCondition\n}\n```\n\n----------------------------------------\n\nTITLE: Query DSL Basic Syntax Changes in Kotlin\nDESCRIPTION: Examples showing the migration from the old slice() and select() syntax to the new select() and where() syntax in Exposed. Demonstrates four different query patterns and their updated equivalents.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Migration-Guide.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Example 1\n// before\nTestTable\n    .slice(TestTable.columnA)\n    .select { TestTable.columnA eq 1 }\n\n// after\nTestTable\n    .select(TestTable.columnA)\n    .where { TestTable.columnA eq 1 }\n\n// Example 2\n// before\nTestTable\n    .slice(TestTable.columnA)\n    .selectAll()\n\n// after\nTestTable\n    .select(TestTable.columnA)\n\n// Example 3\n// before\nTestTable\n    .select { TestTable.columnA eq 1 }\n\n// after\nTestTable\n    .selectAll()\n    .where { TestTable.columnA eq 1 }\n\n// Example 4 - no change\nTestTable.selectAll()\n```\n\n----------------------------------------\n\nTITLE: Using Low-Level JDBC Connection with Exposed\nDESCRIPTION: Shows how to access and use the underlying JDBC connection within an Exposed transaction for direct database operations using raw SQL.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Frequently-Asked-Questions.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    val lowLevelCx = connection.connection as java.sql.Connection\n\n    val stmt = lowLevelCx.prepareStatement(\"INSERT INTO TEST_TABLE (AMOUNT) VALUES (?)\")\n    stmt.setInt(1, 99)\n    stmt.addBatch()\n    stmt.setInt(1, 100)\n    stmt.addBatch()\n    stmt.executeBatch()\n\n    val query = lowLevelCx.createStatement()\n    val result = query.executeQuery(\"SELECT COUNT(*) FROM TEST_TABLE\")\n    result.next()\n    val count = result.getInt(1)\n    println(count) // 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Central Repository in Groovy Gradle\nDESCRIPTION: Add Maven Central repository to the project's build file for accessing Exposed modules using Groovy Gradle syntax.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized SQL Statements in Exposed\nDESCRIPTION: Shows how to use parameterized SQL statements in Exposed, using placeholders and providing column types for parameters.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    val id = 1\n    val name = \"John\"\n    exec(\n        \"INSERT INTO my_table (id, name) VALUES (?, ?)\",\n        IntegerColumnType to id,\n        VarCharColumnType(255) to name\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Nested Transactions\nDESCRIPTION: Demonstrates the default behavior of nested transactions where they share resources with their parent. Changes and rollbacks in the nested transaction affect the parent transaction.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval db = Database.connect()\ndb.useNestedTransactions = false // Default setting\n\ntransaction {\n    println(\"Transaction # ${this.id}\") // Transaction # 1\n    FooTable.insert{ it[id] = 1 }\n    println(FooTable.selectAll().count()) // 1\n    \n    transaction {\n        println(\"Transaction # ${this.id}\") // Transaction # 1\n        FooTable.insert{ it[id] = 2 }\n        println(FooTable.selectAll().count()) // 2\n    \n        rollback() \n    }\n\n    println(FooTable.selectAll().count()) // 0\n}\n```\n\n----------------------------------------\n\nTITLE: Building Exposed DAO API Examples with Gradle\nDESCRIPTION: This command builds the Exposed DAO API example application. It should be executed from the 'snippets' folder in the project directory.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dao/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-dao:build\n```\n\n----------------------------------------\n\nTITLE: Using Async Transactions with Coroutines\nDESCRIPTION: Demonstrates using suspendedTransactionAsync to execute database operations asynchronously and retrieve results later using the await function, providing non-blocking database access.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking {\n    val launchResult = suspendedTransactionAsync(Dispatchers.IO) {\n        FooTable.insert { it[id] = 2 }\n\n        FooTable.selectAll().where { FooTable.id eq 2 }.singleOrNull()?.getOrNull(FooTable.id)\n    }\n    \n    println(\"Async result: \" + (launchResult.await() ?: -1)) // Async result: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Repetition Attempts in Exposed\nDESCRIPTION: Shows the updated way to set transaction repetition attempts using the mutable property instead of the deprecated parameter approach.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// before\ntransaction(Connection.TRANSACTION_READ_COMMITTED, repetitionAttempts = 10) {\n    // statements\n}\n\n// after\ntransaction(Connection.TRANSACTION_READ_COMMITTED) {\n    repetitionAttempts = 10\n    // statements\n}\n```\n\n----------------------------------------\n\nTITLE: Building Exposed DSL Project\nDESCRIPTION: Gradle command to build the Exposed DSL application from the snippets directory.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dsl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-dsl:build\n```\n\n----------------------------------------\n\nTITLE: Exposed Configuration Class\nDESCRIPTION: Custom configuration class for Exposed with nested transactions enabled and transaction manager configuration.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.exposed.spring.autoconfigure.ExposedAutoConfiguration\nimport org.jetbrains.exposed.sql.DatabaseConfig\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\n@ImportAutoConfiguration(\n    value = [ExposedAutoConfiguration::class],\n    exclude = [DataSourceTransactionManagerAutoConfiguration::class]\n)\nclass ExposedConfig {\n    @Bean\n    fun databaseConfig() = DatabaseConfig {\n        useNestedTransactions = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over SQL Results in Exposed\nDESCRIPTION: Demonstrates how to iterate over SQL query results and collect them into a list, retrieving database schema information.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    exec(\"SHOW TABLES\") { rs ->\n        val tables = mutableListOf<String>()\n        while (rs.next()) {\n            tables += rs.getString(\"table_name\")\n        }\n        tables\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Exposed Kotlin Gradle Example Project\nDESCRIPTION: Command to build the Exposed Kotlin Gradle example project. This command should be run from the snippets folder to build the exposed-modules-kotlin-gradle project.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-modules-kotlin-gradle/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-modules-kotlin-gradle:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings with DatabaseConfig in Exposed (Kotlin)\nDESCRIPTION: Demonstrates how to use the new DatabaseConfig class to configure common settings for a database connection, including SQL logging, transaction behavior, and caching options.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// An example with current available settings and their defaults\nval dbConfig = DatabaseConfig {\n    sqlLogger = Slf4jSqlDebugLogger\n    useNestedTransactions = false\n    defaultFetchSize = null // unlimited\n    defaultIsolationLevel = -1 // DB specific\n    defaultRepetitionAttempts = 3\n    warnLongQueriesDuration = null // no long query tracing\n    maxEntitiesToStoreInCachePerEntity = Int.MAX_VALUE // unlimited \n    keepLoadedReferencesOutOfTransaction = false\n}\n// databaseConfig available on each connect/connectPool functions\nval database = Database.connect(datasource, databaseConfig = dbConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Max Attempts for Transactions in Kotlin\nDESCRIPTION: This code shows how to set up a database connection with a default maximum number of transaction attempts. It demonstrates the use of DatabaseConfig to set a global default for max attempts.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval db = Database.connect(\n    datasource = datasource,\n    databaseConfig = DatabaseConfig {\n        defaultMaxAttempts = 3\n    }\n)\n\n// property set in transaction block overrides default DatabaseConfig\ntransaction(db = db) {\n    maxAttempts = 25\n    // operation that may need multiple attempts\n}\n```\n\n----------------------------------------\n\nTITLE: Running Exposed DAO Relationships Example (Shell)\nDESCRIPTION: Command to run the Gradle application for Exposed DAO relationships examples. This executes queries to create new tables and run all functions in the '/examples' folder. It should be run from the 'snippets' folder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dao-relationships/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-dao-relationships:run\n```\n\n----------------------------------------\n\nTITLE: Using Savepoints in Exposed Transactions\nDESCRIPTION: Demonstrates how to use savepoints to roll back to specific points in a transaction without affecting the entire transaction, using the connection's setSavepoint method.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    val initialCount = FooTable.selectAll().count()\n    \n    val savepoint = connection.setSavepoint(\"savepoint-1\")\n    FooTable.insert{ it[id] = 1 }\n    FooTable.insert{ it[id] = 2 }\n    \n    val countAfterInserts = FooTable.selectAll().count()\n    connection.rollback(savepoint)\n    \n    val countAfterRollback = FooTable.selectAll().count()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed Dependencies with Gradle Groovy DSL\nDESCRIPTION: Gradle build script using Groovy DSL to configure Exposed dependencies. Shows how to include core modules and select one of the available date-time implementations.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.jetbrains.exposed:exposed-core:0.61.0'\n    implementation 'org.jetbrains.exposed:exposed-crypt:0.61.0'\n    implementation 'org.jetbrains.exposed:exposed-dao:0.61.0'\n    implementation 'org.jetbrains.exposed:exposed-jdbc:0.61.0'\n    \n    implementation 'org.jetbrains.exposed:exposed-jodatime:0.61.0'\n    // or\n    implementation 'org.jetbrains.exposed:exposed-java-time:0.61.0'\n    // or\n    implementation 'org.jetbrains.exposed:exposed-kotlin-datetime:0.61.0'\n    \n    implementation 'org.jetbrains.exposed:exposed-json:0.61.0'\n    implementation 'org.jetbrains.exposed:exposed-money:0.61.0'\n    implementation 'org.jetbrains.exposed:exposed-spring-boot-starter:0.61.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Exposed-Ktor Application with Gradle\nDESCRIPTION: Command to execute the Exposed-Ktor application from the repository's root directory using the Gradle wrapper.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/samples/exposed-ktor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Configuring JetBrains Exposed BOM and dependencies in Maven\nDESCRIPTION: Shows how to set up the JetBrains Exposed BOM in a Maven project's dependencyManagement section and include individual Exposed modules without specifying their versions. This approach ensures version compatibility across all Exposed modules in the project.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-bom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.exposed</groupId>\n            <artifactId>exposed-bom</artifactId>\n            <version>0.61.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-core</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-dao</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-jdbc</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed Core Dependencies in Groovy Gradle\nDESCRIPTION: Add core Exposed modules and H2 database driver to the project dependencies using Groovy Gradle syntax.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.jetbrains.exposed:exposed-core:$exposedVersion\"\n    implementation \"org.jetbrains.exposed:exposed-dao:$exposedVersion\"\n    implementation \"org.jetbrains.exposed:exposed-jdbc:$exposedVersion\"\n    implementation \"com.h2database:h2:$h2Version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Dependency in Groovy Gradle\nDESCRIPTION: Add SLF4J Simple logging implementation to the project dependencies using Groovy Gradle syntax.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.slf4j:slf4j-simple:$slf4jVersion\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Transformation Syntax in Kotlin with Exposed ORM\nDESCRIPTION: Shows the changes in entity transformation syntax for Exposed 0.53.0. The 'transform' and 'memoizedTransform' functions now use 'wrap' and 'unwrap' instead of 'toColumn' and 'toReal'. The 'ColumnWithTransform' class has been renamed to 'EntityFieldWithTransform'.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Old:\nvar name by EmployeeTable.name.transform(toColumn = { it.uppercase() }, toReal = { it.lowercase() })\n// New:\nvar name by EmployeeTable.name.transform(wrap = { it.uppercase() }, unwrap = { it.lowercase() })\n\nEntityFieldWithTransform(column, object : ColumnTransformer<String, Int> {\n        override fun unwrap(value: Int): String = value.toString()\n        override fun wrap(value: String): Int = value.toInt()\n    })\n\nval tester = object : Table() {\n        val value = integer(\"value\")\n            .transform(wrap = { ... }, unwrap = { ... })\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed Core Dependencies in Maven\nDESCRIPTION: Add core Exposed modules and H2 database driver to the project dependencies using Maven POM file.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.exposed</groupId>\n            <artifactId>exposed-core</artifactId>\n            <version>${exposed.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.exposed</groupId>\n            <artifactId>exposed-dao</artifactId>\n            <version>${exposed.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.exposed</groupId>\n            <artifactId>exposed-jdbc</artifactId>\n            <version>${exposed.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <version>${h2.version}</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Lines in Markdown Documentation\nDESCRIPTION: Shows how to include specific lines from a Kotlin source file in Markdown documentation using a code block with include-lines attribute.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```kotlin\n```\n{src=\"exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt\" include-lines=\"9-13\"}\n```\n\n----------------------------------------\n\nTITLE: Generating Plain SQL Query with Exposed DSL\nDESCRIPTION: Demonstrates how to get the SQL representation of a query without executing it using the prepareSQL() method with QueryBuilder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Frequently-Asked-Questions.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval plainSQL = StarWarsFilmsTable.selectAll()\n    .where{ StarWarsFilmsTable.sequelId eq ActorsTable.sequelId }\n    .prepareSQL(QueryBuilder(false))\n```\n\n----------------------------------------\n\nTITLE: Configuring JetBrains Exposed BOM and dependencies in Gradle with Kotlin DSL\nDESCRIPTION: Demonstrates how to set up the JetBrains Exposed BOM in a Gradle project using Kotlin DSL. It includes repository configuration and dependency declarations for individual Exposed modules without version specifications.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-bom/README.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    // Versions after 0.33.1\n    mavenCentral()\n}\n\ndependencies {\n    implementation(platform(\"org.jetbrains.exposed:exposed-bom:0.61.0\"))\n    implementation(\"org.jetbrains.exposed\", \"exposed-core\")\n    implementation(\"org.jetbrains.exposed\", \"exposed-dao\")\n    implementation(\"org.jetbrains.exposed\", \"exposed-jdbc\")\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Symbols in XML Documentation\nDESCRIPTION: Demonstrates how to include specific symbols from a Kotlin source file in XML documentation using the code-block element with include-symbol attribute.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<code-block lang=\"kotlin\" src=\"exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt\" include-symbol=\"MAX_VARCHAR_LENGTH, StarWarsFilmsTable\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Text and Blob Fields with Eager Loading\nDESCRIPTION: Demonstrates two approaches to handle text fields: without eager loading where content must be accessed within the transaction, and with eager loading where content is available outside the transaction.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// without eagerLoading\nval idsAndContent = transaction {\n   Documents.selectAll().limit(10).map { it[Documents.id] to it[Documents.content] }\n}\n\n// with eagerLoading for text fields\nobject Documents : Table() {\n  //...\n  val content = text(\"content\", eagerLoading = true)\n}\n\nval documentsWithContent = transaction {\n   Documents.selectAll().limit(10)\n}\n```\n\n----------------------------------------\n\nTITLE: Version 0.61.0 Release Notes\nDESCRIPTION: Documents infrastructure updates, new features for H2 migrations and entity caching, bug fixes, and documentation improvements.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.61.0\n## What's Changed\nInfrastructure:\n* Spring Framework 6.2.5\n* junit-bom 5.12.1\n* Spring Boot 3.4.4\n* moneta 1.4.5\n* Joda Time 2.14.0\n* Kotlinx Serialization 1.8.1\n* logcaptor 2.10.2\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Lists - Markdown\nDESCRIPTION: A structured changelog using markdown formatting to document version changes, features and bug fixes for the Exposed ORM library. Includes version numbers, contributor attributions, and issue references.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.20.1\nFeatures:\n* New way to define primary keys on tables were implemented by [hfazai](https://github.com/hfazai) to support custom primary key constraint keys.\nIf have to use `override val primaryKey: PrimaryKey?` on your table if you want to define a custom name.\nFor all users of predefined `IntIdTable`/`LongIdTable`/`UUIDTable` nothing changed.\nOld `Column.primaryKey` function was depricated and will be removed in the future releases.\n* `java.time.Instant` supported with `timestamp` column type (`exposed-java-time` module only) ([#724](https://github.com/JetBrains/Exposed/issues/724))\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedded Entities in Exposed (Kotlin)\nDESCRIPTION: Shows how to initialize embedded entities with nested structure using Exposed's DAO API. This allows creating complex object graphs in a single expression.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval post = Post.new {\n    parent = Post.new {\n        board = Board.new {\n            name = \"Parent Board\"\n        }\n        category = Category.new {\n            title = \"Parent Category\"\n        }\n    }\n    category = Category.new {\n        title = \"Child Category\"\n    }\n\n    optCategory = parent!!.category\n}\n```\n\n----------------------------------------\n\nTITLE: Version 0.60.0 Release Notes\nDESCRIPTION: Details infrastructure updates, breaking changes related to H2 timestamp columns and MySQL locking modes, new features for Oracle and CHECK constraints.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.60.0\nInfrastructure:\n* Joda Time 2.13.1\n* SQLite driver 3.49.1.0\n* Kotlinx Datetime JVM 0.6.2\n* Spring Framework 6.2.3\n* Spring Boot 3.4.3\n* detekt 1.23.8\n* junit-bom 5.12.0\n```\n\n----------------------------------------\n\nTITLE: Custom Transaction Annotation\nDESCRIPTION: Example of creating a custom transaction annotation for Exposed.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Transactional(transactionManager = \"springTransactionManager\")\nannotation class ExposedTransactional\n\n@ExposedTransactional\nfun doSomething() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Version 0.58.0 Release Notes\nDESCRIPTION: Contains breaking changes for SchemaUtils.listTables(), features for MariaDB RETURNING clause and customizable check constraints, along with infrastructure updates.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.58.0\n\nBreaking changes:\n* fix: EXPOSED-662 SchemaUtils.listTables() returns empty list & closes db connection by @joc-a in https://github.com/JetBrains/Exposed/pull/2331\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed in Gradle Kotlin DSL\nDESCRIPTION: Gradle Kotlin DSL configuration for adding Exposed dependency with version specified in properties file.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exposedVersion: String by project\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    implementation(\"org.jetbrains.exposed:exposed-spring-boot-starter:$exposedVersion\")\n}\n```\n\nLANGUAGE: properties\nCODE:\n```\nexposedVersion=0.61.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Short Check Constraints in Exposed\nDESCRIPTION: Shows how to create a signed short column with check constraints to restrict values to a non-negative range, as an alternative to using ushort() columns.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nshort(\"number\").check { it.between(0, Short.MAX_VALUE) }\n// OR\nshort(\"number\").check { (it greaterEq 0) and (it lessEq Short.MAX_VALUE) }\n```\n\n----------------------------------------\n\nTITLE: Batched Query Migration in Kotlin\nDESCRIPTION: Examples showing the migration from selectBatched() and selectAllBatched() to using fetchBatchedResults() as a terminal operation on Query instances.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Migration-Guide.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Example 1\n// before\nTestTable\n    .selectBatched(50) { TestTable.columnA eq 1 }\n\n// after\nTestTable\n    .selectAll()\n    .where { TestTable.columnA eq 1 }\n    .fetchBatchedResults(50)\n\n// Example 2\n// before\nTestTable\n    .slice(TestTable.columnA)\n    .selectAllBatched(50)\n\n// after\nTestTable\n    .select(TestTable.columnA)\n    .fetchBatchedResults(50)\n```\n\n----------------------------------------\n\nTITLE: Explicit Statement Type in Exposed SQL Execution\nDESCRIPTION: Demonstrates how to specify an explicit statement type when executing SQL, useful for overriding default behavior.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    exec(\"CREATE INDEX idx_name ON my_table (name)\", explicitStatementType = StatementType.DDL)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Execution Function in Exposed\nDESCRIPTION: Defines a custom extension function 'execAndMap' to simplify SQL string execution and result mapping in Exposed.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> Transaction.execAndMap(sql: String, transform: (ResultSet) -> T): List<T> {\n    val result = arrayListOf<T>()\n    exec(sql) { rs ->\n        while (rs.next()) {\n            result += transform(rs)\n        }\n    }\n    return result\n}\n```\n\n----------------------------------------\n\nTITLE: Executing EXPLAIN Query with Explicit Statement Type in Exposed\nDESCRIPTION: Shows how to execute an EXPLAIN query by overriding the default statement type to expect results.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    exec(\n        \"EXPLAIN SELECT * FROM my_table WHERE id = 1\",\n        explicitStatementType = StatementType.EXEC\n    ) { rs ->\n        while (rs.next()) {\n            println(rs.getString(1))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom SQL Execution Function in Exposed\nDESCRIPTION: Demonstrates how to use the custom 'execAndMap' function to execute an SQL query and map results.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Working-with-SQL-Strings.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntransaction {\n    execAndMap(\"SHOW TABLES\") { rs -> rs.getString(\"table_name\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Where Operation\nDESCRIPTION: Example of using Table.deleteWhere functionality with implicit table capture\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nTable.deleteWhere { it.column eq value }\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Central Repository with Kotlin DSL\nDESCRIPTION: Gradle Kotlin DSL configuration for adding Maven Central repository to access Exposed library. Note that Kotlin JVM target should be set to 8, or 17 when using Spring.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    // Versions after 0.30.1\n    // Versions before 0.30.1 is unavailable for now\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: For Update Lock Mode\nDESCRIPTION: PostgreSQL NOWAIT/SKIP LOCKED modes for FOR UPDATE operations\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... FOR UPDATE NOWAIT\n```\n\n----------------------------------------\n\nTITLE: Version 0.59.0 Release Notes\nDESCRIPTION: Covers infrastructure updates, breaking changes for PostgreSQL sequences and timestamp columns, new features for MariaDB sequences and comparison operators.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.59.0\nInfrastructure:\n* Spring Framework 6.2.2\n* PostgreSQL driver 42.7.5\n* SQLite driver 3.48.0.0\n* Spring Boot 3.4.2\n```\n\n----------------------------------------\n\nTITLE: Creating Check Constraints for Byte Columns in Exposed\nDESCRIPTION: Shows how to create a signed byte column with check constraints to restrict values to a non-negative range, as an alternative to using ubyte() columns.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nbyte(\"number\").check { it.between(0, Byte.MAX_VALUE) }\n// OR\nbyte(\"number\").check { (it greaterEq 0) and (it lessEq Byte.MAX_VALUE) }\n```\n\n----------------------------------------\n\nTITLE: H2 Database Configuration\nDESCRIPTION: Spring Boot application properties configuration for H2 database connection.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\n```\n\n----------------------------------------\n\nTITLE: Custom JDBC Driver Registration\nDESCRIPTION: Shows the function name for registering custom JDBC drivers in version 0.28.1.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nDatabase.registerJdbcDriver\n```\n\n----------------------------------------\n\nTITLE: Running the Exposed Data Types Application\nDESCRIPTION: Terminal command to run the Exposed data types example application from the snippets folder using Gradle. This will execute all examples unless the App.kt file is modified.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-data-types/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-data-types:run\n```\n\n----------------------------------------\n\nTITLE: Schema Generation Properties\nDESCRIPTION: Application properties for enabling automatic schema generation and package exclusion.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nspring.exposed.generate-ddl=true\nspring.exposed.excluded-packages=com.example.models.ignore,com.example.utils\n```\n\n----------------------------------------\n\nTITLE: SQL Logging Configuration\nDESCRIPTION: Property configuration for enabling SQL statement logging in Exposed.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nspring.exposed.show-sql=true\n```\n\n----------------------------------------\n\nTITLE: Query Adjustment Migration in Kotlin\nDESCRIPTION: Example showing the migration from adjustSlice() to adjustSelect() for modifying existing queries.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Migration-Guide.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// before\nval originalQuery = TestTable.select { TestTable.columnA eq 1 }\noriginalQuery.adjustSlice { slice(TestTable.columnA) }\n\n// after\nval originalQuery = TestTable.selectAll().where { TestTable.columnA eq 1 }\noriginalQuery.adjustSelect { select(TestTable.columnA) }\n```\n\n----------------------------------------\n\nTITLE: Database Insert Statement Example\nDESCRIPTION: Demonstration of how insert statements with default values are handled in version 0.57.0 and later, showing the difference in SQL generation between versions.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Breaking-Changes.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TestTable : IntIdTable(\"test\") { \n    val number = integer(\"number\").default(100)\n    val expression = integer(\"exp\")\n        .defaultExpression(intLiteral(100) + intLiteral(200))\n}\n\nTestTable.insert { }\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- For versions before 0.57.0\nINSERT INTO TEST (\"number\", \"exp\") VALUES (100, (100 + 200))\n\n-- Starting from version 0.57.0\nINSERT INTO TEST DEFAULT VALUES\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Central Repository in Kotlin Gradle\nDESCRIPTION: Add Maven Central repository to the project's build file for accessing Exposed modules.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed Dependency in Gradle Groovy\nDESCRIPTION: Gradle Groovy configuration to include Exposed Spring Boot Starter dependency.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    implementation 'org.jetbrains.exposed:exposed-spring-boot-starter:0.61.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed Spring Boot Starter Maven Dependency\nDESCRIPTION: Maven dependency configuration to include Exposed Spring Boot Starter in a project.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.jetbrains.exposed</groupId>\n    <artifactId>exposed-spring-boot-starter</artifactId>\n    <version>0.61.0</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Gradle\nDESCRIPTION: Command to run the Spring Boot application using Gradle wrapper. This command should be executed in the repository's root directory.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/samples/exposed-spring/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew bootRun\n```\n\n----------------------------------------\n\nTITLE: Adding Exposed Migration Dependency in Kotlin\nDESCRIPTION: Adds the Exposed Migration library dependency to the project's build file. This dependency is required for generating migration scripts with Exposed.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/samples/exposed-migration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.jetbrains.exposed:exposed-migration:$exposedVersion\")\n```\n\n----------------------------------------\n\nTITLE: Running Exposed DAO Example with Gradle\nDESCRIPTION: Demonstrates how to run the exposed-dao example using the Gradle run task from the snippets folder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :exposed-dao:run\n```\n\n----------------------------------------\n\nTITLE: Defining Exposed Version in Gradle Properties\nDESCRIPTION: A property definition for the Gradle properties file that specifies the Exposed version to be used with the Kotlin DSL configuration.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nexposedVersion=0.61.0\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Project with Exposed\nDESCRIPTION: Command to execute the Gradle project from the repository's root directory. This runs the application built using the Exposed SQL framework for Kotlin.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/get-started-with-exposed/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Connection with Exposed\nDESCRIPTION: Code snippet showing how to configure a MySQL database connection using Exposed's Database.connect() method. It specifies the JDBC URL, driver class, username, and password for authentication.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-transactions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysqlDb = Database.connect(\n        \"jdbc:mysql://localhost:3306/test\",\n        driver = \"com.mysql.cj.jdbc.Driver\",\n        user = \"root\",\n        password = \"password\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migration using Gradle in Bash\nDESCRIPTION: Runs the Gradle task to apply the generated migration script to the database using Flyway. This command should be executed after generating the migration script.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/samples/exposed-migration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew run\n```\n\n----------------------------------------\n\nTITLE: Building the Exposed Transactions Application\nDESCRIPTION: Shell command for building the application from the snippets folder using Gradle.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-transactions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-transactions:build\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Dependency in Kotlin Gradle\nDESCRIPTION: Add SLF4J Simple logging implementation to the project dependencies using Kotlin Gradle DSL.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"org.slf4j:slf4j-simple:$slf4jVersion\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Exposed Transactions Application\nDESCRIPTION: Shell command for running the application from the snippets folder using Gradle. This will execute queries to create tables and run all functions in the examples folder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-transactions/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-transactions:run\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Dependency in Maven\nDESCRIPTION: Add SLF4J Simple logging implementation to the project dependencies using Maven POM file.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Exposed-Modules.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Building Exposed SQL Functions Example\nDESCRIPTION: Gradle command to build the SQL functions example application from the snippets folder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-sql-functions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-sql-functions:build\n```\n\n----------------------------------------\n\nTITLE: EntityID Expression Example\nDESCRIPTION: Code example showing the use of mod/rem operations with EntityID expressions\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.jetbrains.exposed.sql.SqlExpressionBuilder.eq\n```\n\n----------------------------------------\n\nTITLE: Running Exposed SQL Functions Example\nDESCRIPTION: Gradle command to run the SQL functions example application. This executes queries to create tables and run all functions in the examples folder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-sql-functions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-sql-functions:run\n```\n\n----------------------------------------\n\nTITLE: GraalVM Native Hints Configuration\nDESCRIPTION: Runtime hints configuration for GraalVM native image support with Exposed.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/exposed-spring-boot-starter/README.md#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.aot.hint.MemberCategory\nimport org.springframework.aot.hint.RuntimeHints\nimport org.springframework.aot.hint.RuntimeHintsRegistrar\n\nclass ExposedHints : RuntimeHintsRegistrar {\n    override fun registerHints(hints: RuntimeHints, classLoader: ClassLoader?) {\n        hints.reflection().registerType(IntegerColumnType::class.java, *MemberCategory.entries.toTypedArray())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Exposed DAO API Examples with Gradle\nDESCRIPTION: This command runs the Exposed DAO API example application. It creates new tables and executes all functions in the '/examples' folder. To run a specific example, modify the 'App.kt' file before execution.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dao/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-dao:run\n```\n\n----------------------------------------\n\nTITLE: Referencing Full Kotlin File in XML Documentation\nDESCRIPTION: Shows how to include the entire contents of a Kotlin source file in XML documentation using the code-block element.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<code-block lang=\"kotlin\" src=\"exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt\" />\n```\n\n----------------------------------------\n\nTITLE: Running Exposed DSL Project\nDESCRIPTION: Gradle command to run the Exposed DSL application, which executes queries to create tables and run all example functions.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dsl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-dsl:run\n```\n\n----------------------------------------\n\nTITLE: Referencing Kotlin File in Markdown Documentation\nDESCRIPTION: Shows how to include a Kotlin source file in Markdown documentation using a code block with src attribute.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```kotlin\n```\n{src=\"exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt\"}\n```\n\n----------------------------------------\n\nTITLE: Building Exposed Maven Example Project with Gradle\nDESCRIPTION: This command builds the Exposed Maven example project using Gradle. It should be executed from the 'snippets' folder of the project.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-modules-maven/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-modules-maven:build\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Lines in XML Documentation\nDESCRIPTION: Demonstrates how to include specific lines from a SQL file in XML documentation using the code-block element with include-lines attribute.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<code-block lang=\"sql\" src=\"exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt\" include-lines=\"9-13\" />\n```\n\n----------------------------------------\n\nTITLE: Building the Exposed Data Types Application\nDESCRIPTION: Terminal command to build the Exposed data types example application from the snippets folder using Gradle.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-data-types/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-data-types:build\n```\n\n----------------------------------------\n\nTITLE: Documenting Line-Specific References in Kotlin\nDESCRIPTION: Illustrates how to add a comment in Kotlin code to document line-specific references used in documentation, including a SQL table creation example.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/README.md#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n/*\n    ...\n\n    Important: The SQL query is referenced by line number in `TOPIC_NAME.topic`.\n    If you add, remove, or modify any lines before the SELECT statement, ensure you update the corresponding\n    line numbers in the `code-block` element of the referenced file.\n\n    CREATE TABLE IF NOT EXISTS STARWARSFILMS\n    (ID INT AUTO_INCREMENT PRIMARY KEY,\n    SEQUEL_ID INT NOT NULL,\n    \"name\" VARCHAR(50) NOT NULL,\n    DIRECTOR VARCHAR(50) NOT NULL);\n */\nobject StarWarsFilmsTable : IntIdTable() {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Exposed DAO Relationships Example (Shell)\nDESCRIPTION: Command to build the Gradle application for Exposed DAO relationships examples. This should be executed from the 'snippets' folder.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-dao-relationships/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-dao-relationships:build\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates for version 0.29.1\nDESCRIPTION: Lists the updated dependencies and infrastructure components for version 0.29.1, including Kotlin, Coroutines, and Spring Framework versions.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nKotlin 1.4.21\nKotlin Coroutines 1.4.1\nSpring Framework 5.3.3\nSpring Boot 2.4.2\n```\n\n----------------------------------------\n\nTITLE: Building Exposed Groovy Gradle Example Project via Command Line\nDESCRIPTION: Command to build the Exposed Groovy Gradle example project. This should be executed from the snippets folder to properly locate and build the project.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/snippets/exposed-modules-groovy-gradle/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :exposed-modules-groovy-gradle:build\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates for version 0.28.1\nDESCRIPTION: Lists the updated dependencies and infrastructure components for version 0.28.1.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nKotlin 1.4.10\nKotlin Coroutines 1.3.9\nSpring Framework 5.2.9\nSpring Boot 2.3.3\n```\n\n----------------------------------------\n\nTITLE: Installing Colima for Oracle XE Testing on Apple Silicon\nDESCRIPTION: Command to install Colima container runtime via Homebrew for testing Oracle XE on Apple Silicon machines.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install colima\n```\n\n----------------------------------------\n\nTITLE: Setting Default Docker Context\nDESCRIPTION: Command to switch Docker context back to default after using Colima.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker context use default\n```\n\n----------------------------------------\n\nTITLE: Starting Colima Daemon for x86_64 Architecture\nDESCRIPTION: Command to start Colima daemon in x86_64 architecture mode with 4GB memory allocation and network address configuration.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncolima start --arch x86_64 --memory 4 --network-address\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Contexts\nDESCRIPTION: Command to verify the current Docker context configuration and ensure default is set as the default context.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/documentation-website/Writerside/topics/Contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker context list\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script using Gradle in Bash\nDESCRIPTION: Executes a Gradle task to generate the migration script using Exposed. The script will be created in the 'migrations' directory of the project.\nSOURCE: https://github.com/jetbrains/exposed/blob/main/samples/exposed-migration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew generateMigrationScript\n```"
  }
]