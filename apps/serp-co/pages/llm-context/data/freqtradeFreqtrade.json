[
  {
    "owner": "freqtrade",
    "repo": "freqtrade",
    "content": "TITLE: Implementing a Basic Freqtrade Trading Strategy (Python)\nDESCRIPTION: A complete minimal implementation of a Freqtrade strategy that uses RSI (Relative Strength Index) for trade signals. The strategy enters long positions when RSI is below 30 (oversold condition) and exits when RSI is above 70 (overbought condition). It includes a 10% stoploss and takes profit at 1% gain.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-101.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.strategy import IStrategy\nfrom pandas import DataFrame\nimport talib.abstract as ta\n\nclass MyStrategy(IStrategy):\n\n    timeframe = '15m'\n\n    # set the initial stoploss to -10%\n    stoploss = -0.10\n\n    # exit profitable positions at any time when the profit is greater than 1%\n    minimal_roi = {\"0\": 0.01}\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # generate values for technical analysis indicators\n        dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # generate entry signals based on indicator values\n        dataframe.loc[\n            (dataframe['rsi'] < 30),\n            'enter_long'] = 1\n\n        return dataframe\n\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # generate exit signals based on indicator values\n        dataframe.loc[\n            (dataframe['rsi'] > 70),\n            'exit_long'] = 1\n\n        return dataframe\n```\n\n----------------------------------------\n\nTITLE: Configuring FreqAI in Freqtrade JSON Config\nDESCRIPTION: Minimum required parameters for setting up FreqAI in the Freqtrade configuration file. Includes settings for model management, training period, feature parameters, and data split parameters.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"freqai\": {\n        \"enabled\": true,\n        \"purge_old_models\": 2,\n        \"train_period_days\": 30,\n        \"backtest_period_days\": 7,\n        \"identifier\" : \"unique-id\",\n        \"feature_parameters\" : {\n            \"include_timeframes\": [\"5m\",\"15m\",\"4h\"],\n            \"include_corr_pairlist\": [\n                \"ETH/USD\",\n                \"LINK/USD\",\n                \"BNB/USD\"\n            ],\n            \"label_period_candles\": 24,\n            \"include_shifted_candles\": 2,\n            \"indicator_periods_candles\": [10, 20]\n        },\n        \"data_split_parameters\" : {\n            \"test_size\": 0.25\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FreqAI Feature Engineering Functions in Python\nDESCRIPTION: This code snippet demonstrates the implementation of the required feature engineering functions for FreqAI in a Freqtrade strategy. It includes methods for feature expansion, standard feature engineering, and target definition, with proper prepending of '%' for features and '&' for targets.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-feature-engineering.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef feature_engineering_expand_all(self, dataframe: DataFrame, period, metadata, **kwargs) -> DataFrame:\n    \"\"\"\n    *Only functional with FreqAI enabled strategies*\n    This function will automatically expand the defined features on the config defined\n    `indicator_periods_candles`, `include_timeframes`, `include_shifted_candles`, and\n    `include_corr_pairs`. In other words, a single feature defined in this function\n    will automatically expand to a total of\n    `indicator_periods_candles` * `include_timeframes` * `include_shifted_candles` *\n    `include_corr_pairs` numbers of features added to the model.\n\n    All features must be prepended with `%` to be recognized by FreqAI internals.\n\n    Access metadata such as the current pair/timeframe/period with:\n\n    `metadata[\"pair\"]` `metadata[\"tf\"]`  `metadata[\"period\"]`\n\n    :param df: strategy dataframe which will receive the features\n    :param period: period of the indicator - usage example:\n    :param metadata: metadata of current pair\n    dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n    \"\"\"\n\n    dataframe[\"%-rsi-period\"] = ta.RSI(dataframe, timeperiod=period)\n    dataframe[\"%-mfi-period\"] = ta.MFI(dataframe, timeperiod=period)\n    dataframe[\"%-adx-period\"] = ta.ADX(dataframe, timeperiod=period)\n    dataframe[\"%-sma-period\"] = ta.SMA(dataframe, timeperiod=period)\n    dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n\n    bollinger = qtpylib.bollinger_bands(\n        qtpylib.typical_price(dataframe), window=period, stds=2.2\n    )\n    dataframe[\"bb_lowerband-period\"] = bollinger[\"lower\"]\n    dataframe[\"bb_middleband-period\"] = bollinger[\"mid\"]\n    dataframe[\"bb_upperband-period\"] = bollinger[\"upper\"]\n\n    dataframe[\"%-bb_width-period\"] = (\n        dataframe[\"bb_upperband-period\"]\n        - dataframe[\"bb_lowerband-period\"]\n    ) / dataframe[\"bb_middleband-period\"]\n    dataframe[\"%-close-bb_lower-period\"] = (\n        dataframe[\"close\"] / dataframe[\"bb_lowerband-period\"]\n    )\n\n    dataframe[\"%-roc-period\"] = ta.ROC(dataframe, timeperiod=period)\n\n    dataframe[\"%-relative_volume-period\"] = (\n        dataframe[\"volume\"] / dataframe[\"volume\"].rolling(period).mean()\n    )\n\n    return dataframe\n\ndef feature_engineering_expand_basic(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n    \"\"\"\n    *Only functional with FreqAI enabled strategies*\n    This function will automatically expand the defined features on the config defined\n    `include_timeframes`, `include_shifted_candles`, and `include_corr_pairs`.\n    In other words, a single feature defined in this function\n    will automatically expand to a total of\n    `include_timeframes` * `include_shifted_candles` * `include_corr_pairs`\n    numbers of features added to the model.\n\n    Features defined here will *not* be automatically duplicated on user defined\n    `indicator_periods_candles`\n\n    Access metadata such as the current pair/timeframe with:\n\n    `metadata[\"pair\"]` `metadata[\"tf\"]`\n\n    All features must be prepended with `%` to be recognized by FreqAI internals.\n\n    :param df: strategy dataframe which will receive the features\n    :param metadata: metadata of current pair\n    dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n    dataframe[\"%-ema-200\"] = ta.EMA(dataframe, timeperiod=200)\n    \"\"\"\n    dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n    dataframe[\"%-raw_volume\"] = dataframe[\"volume\"]\n    dataframe[\"%-raw_price\"] = dataframe[\"close\"]\n    return dataframe\n\ndef feature_engineering_standard(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n    \"\"\"\n    *Only functional with FreqAI enabled strategies*\n    This optional function will be called once with the dataframe of the base timeframe.\n    This is the final function to be called, which means that the dataframe entering this\n    function will contain all the features and columns created by all other\n    freqai_feature_engineering_* functions.\n\n    This function is a good place to do custom exotic feature extractions (e.g. tsfresh).\n    This function is a good place for any feature that should not be auto-expanded upon\n    (e.g. day of the week).\n\n    Access metadata such as the current pair with:\n\n    `metadata[\"pair\"]`\n\n    All features must be prepended with `%` to be recognized by FreqAI internals.\n\n    :param df: strategy dataframe which will receive the features\n    :param metadata: metadata of current pair\n    usage example: dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n    \"\"\"\n    dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n    dataframe[\"%-hour_of_day\"] = (dataframe[\"date\"].dt.hour + 1) / 25\n    return dataframe\n\ndef set_freqai_targets(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n    \"\"\"\n    *Only functional with FreqAI enabled strategies*\n    Required function to set the targets for the model.\n    All targets must be prepended with `&` to be recognized by the FreqAI internals.\n\n    Access metadata such as the current pair with:\n\n    `metadata[\"pair\"]`\n\n    :param df: strategy dataframe which will receive the targets\n    :param metadata: metadata of current pair\n    usage example: dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n    \"\"\"\n    dataframe[\"&-s_close\"] = (\n        dataframe[\"close\"]\n        .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n        .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n        .mean()\n        / dataframe[\"close\"]\n        - 1\n        )\n    \n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Complete EMA Cross Strategy with Hyperoptable Parameters\nDESCRIPTION: A complete implementation of an EMA cross strategy with hyperoptable parameters for the EMA periods. This example demonstrates how to calculate indicator values for all parameter options and how to use those values in entry and exit signals.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pandas import DataFrame\nfrom functools import reduce\n\nimport talib.abstract as ta\n\nfrom freqtrade.strategy import (BooleanParameter, CategoricalParameter, DecimalParameter, \n                                IStrategy, IntParameter)\nimport freqtrade.vendor.qtpylib.indicators as qtpylib\n\nclass MyAwesomeStrategy(IStrategy):\n    stoploss = -0.05\n    timeframe = '15m'\n    minimal_roi = {\n        \"0\":  0.10\n    }\n    # Define the parameter spaces\n    buy_ema_short = IntParameter(3, 50, default=5)\n    buy_ema_long = IntParameter(15, 200, default=50)\n\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"Generate all indicators used by the strategy\"\"\"\n        \n        # Calculate all ema_short values\n        for val in self.buy_ema_short.range:\n            dataframe[f'ema_short_{val}'] = ta.EMA(dataframe, timeperiod=val)\n        \n        # Calculate all ema_long values\n        for val in self.buy_ema_long.range:\n            dataframe[f'ema_long_{val}'] = ta.EMA(dataframe, timeperiod=val)\n        \n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        conditions = []\n        conditions.append(qtpylib.crossed_above(\n                dataframe[f'ema_short_{self.buy_ema_short.value}'], dataframe[f'ema_long_{self.buy_ema_long.value}']\n            ))\n\n        # Check that volume is not 0\n        conditions.append(dataframe['volume'] > 0)\n\n        if conditions:\n            dataframe.loc[\n                reduce(lambda x, y: x & y, conditions),\n                'enter_long'] = 1\n        return dataframe\n\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        conditions = []\n        conditions.append(qtpylib.crossed_above(\n                dataframe[f'ema_long_{self.buy_ema_long.value}'], dataframe[f'ema_short_{self.buy_ema_short.value}']\n            ))\n\n        # Check that volume is not 0\n        conditions.append(dataframe['volume'] > 0)\n\n        if conditions:\n            dataframe.loc[\n                reduce(lambda x, y: x & y, conditions),\n                'exit_long'] = 1\n        return dataframe\n```\n\n----------------------------------------\n\nTITLE: Launching FreqAI for Live Trading with LightGBM Regressor\nDESCRIPTION: Command to start FreqAI in live trading mode using the FreqaiExampleStrategy and LightGBMRegressor model. This initiates model training based on config settings and uses the model for predictions on incoming data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --strategy FreqaiExampleStrategy --config config_freqai.example.json --freqaimodel LightGBMRegressor\n```\n\n----------------------------------------\n\nTITLE: Journald Logging Configuration in Freqtrade\nDESCRIPTION: Configuration for sending log messages to journald system service. Requires cysystemd package and includes journald-specific formatter and handler.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_config\": {\n    \"version\": 1,\n    \"formatters\": {\n      \"journald_fmt\": {\n        \"format\": \"%(name)s - %(levelname)s - %(message)s\"\n      }\n    },\n    \"handlers\": {\n      \"journald\": {\n         \"class\": \"cysystemd.journal.JournaldLogHandler\",\n          \"formatter\": \"journald_fmt\"\n      }\n    },\n    \"root\": {\n      \"handlers\": [\n        \"journald\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dry-Run Mode to False in Freqtrade Configuration\nDESCRIPTION: Configuration snippet to disable dry-run mode in Freqtrade's config.json file, which enables real trading with actual funds.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"dry_run\": false,\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hyperopt Loss Function in Python for Freqtrade\nDESCRIPTION: Demonstrates how to create a custom hyperopt loss function class that inherits from IHyperOptLoss. The function evaluates trade results based on profit, duration, and trade count with configurable weights to produce a loss value for optimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import Any, Dict\n\nfrom pandas import DataFrame\n\nfrom freqtrade.constants import Config\nfrom freqtrade.optimize.hyperopt import IHyperOptLoss\n\nTARGET_TRADES = 600\nEXPECTED_MAX_PROFIT = 3.0\nMAX_ACCEPTED_TRADE_DURATION = 300\n\nclass SuperDuperHyperOptLoss(IHyperOptLoss):\n    \"\"\"\n    Defines the default loss function for hyperopt\n    \"\"\"\n\n    @staticmethod\n    def hyperopt_loss_function(\n        *,\n        results: DataFrame,\n        trade_count: int,\n        min_date: datetime,\n        max_date: datetime,\n        config: Config,\n        processed: dict[str, DataFrame],\n        backtest_stats: dict[str, Any],\n        starting_balance: float,\n        **kwargs,\n    ) -> float:\n        \"\"\"\n        Objective function, returns smaller number for better results\n        This is the legacy algorithm (used until now in freqtrade).\n        Weights are distributed as follows:\n        * 0.4 to trade duration\n        * 0.25: Avoiding trade loss\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\n        \"\"\"\n        total_profit = results['profit_ratio'].sum()\n        trade_duration = results['trade_duration'].mean()\n\n        trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n        profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n        duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n        result = trade_loss + profit_loss + duration_loss\n        return result\n```\n\n----------------------------------------\n\nTITLE: Building FreqAI Strategy in Python\nDESCRIPTION: Essential code structure for a FreqAI strategy in Freqtrade. Includes methods for populating indicators, feature engineering, and setting FreqAI targets. This template shows how to integrate FreqAI functionality into a Freqtrade strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstartup_candle_count: int = 20\n\ndef populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe = self.freqai.start(dataframe, metadata, self)\n    return dataframe\n\ndef feature_engineering_expand_all(self, dataframe: DataFrame, period, **kwargs) -> DataFrame:\n    dataframe[\"%-rsi-period\"] = ta.RSI(dataframe, timeperiod=period)\n    dataframe[\"%-mfi-period\"] = ta.MFI(dataframe, timeperiod=period)\n    dataframe[\"%-adx-period\"] = ta.ADX(dataframe, timeperiod=period)\n    dataframe[\"%-sma-period\"] = ta.SMA(dataframe, timeperiod=period)\n    dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n    return dataframe\n\ndef feature_engineering_expand_basic(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n    dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n    dataframe[\"%-raw_volume\"] = dataframe[\"volume\"]\n    dataframe[\"%-raw_price\"] = dataframe[\"close\"]\n    return dataframe\n\ndef feature_engineering_standard(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n    dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n    dataframe[\"%-hour_of_day\"] = (dataframe[\"date\"].dt.hour + 1) / 25\n    return dataframe\n\ndef set_freqai_targets(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n    dataframe[\"&-s_close\"] = (\n        dataframe[\"close\"]\n        .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n        .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n        .mean()\n        / dataframe[\"close\"]\n        - 1\n        )\n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Data Storage in Freqtrade Strategy\nDESCRIPTION: Demonstrates how to store and retrieve custom data associated with trades using the Trade object's set_custom_data and get_custom_data methods. The example shows usage in bot_loop_start, adjust_entry_price, and custom_exit functions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.persistence import Trade\nfrom datetime import timedelta\n\nclass AwesomeStrategy(IStrategy):\n\n    def bot_loop_start(self, **kwargs) -> None:\n        for trade in Trade.get_open_order_trades():\n            fills = trade.select_filled_orders(trade.entry_side)\n            if trade.pair == 'ETH/USDT':\n                trade_entry_type = trade.get_custom_data(key='entry_type')\n                if trade_entry_type is None:\n                    trade_entry_type = 'breakout' if 'entry_1' in trade.enter_tag else 'dip'\n                elif fills > 1:\n                    trade_entry_type = 'buy_up'\n                trade.set_custom_data(key='entry_type', value=trade_entry_type)\n        return super().bot_loop_start(**kwargs)\n\n    def adjust_entry_price(self, trade: Trade, order: Order | None, pair: str,\n                           current_time: datetime, proposed_rate: float, current_order_rate: float,\n                           entry_tag: str | None, side: str, **kwargs) -> float:\n        # Limit orders to use and follow SMA200 as price target for the first 10 minutes since entry trigger for BTC/USDT pair.\n        if (\n            pair == 'BTC/USDT' \n            and entry_tag == 'long_sma200' \n            and side == 'long' \n            and (current_time - timedelta(minutes=10)) > trade.open_date_utc \n            and order.filled == 0.0\n        ):\n            dataframe, _ = self.dp.get_analyzed_dataframe(pair=pair, timeframe=self.timeframe)\n            current_candle = dataframe.iloc[-1].squeeze()\n            # store information about entry adjustment\n            existing_count = trade.get_custom_data('num_entry_adjustments', default=0)\n            if not existing_count:\n                existing_count = 1\n            else:\n                existing_count += 1\n            trade.set_custom_data(key='num_entry_adjustments', value=existing_count)\n\n            # adjust order price\n            return current_candle['sma_200']\n\n        # default: maintain existing order\n        return current_order_rate\n\n    def custom_exit(self, pair: str, trade: Trade, current_time: datetime, current_rate: float, current_profit: float, **kwargs):\n\n        entry_adjustment_count = trade.get_custom_data(key='num_entry_adjustments')\n        trade_entry_type = trade.get_custom_data(key='entry_type')\n        if entry_adjustment_count is None:\n            if current_profit > 0.01 and (current_time - timedelta(minutes=100) > trade.open_date_utc):\n                return True, 'exit_1'\n        else\n            if entry_adjustment_count > 0 and if current_profit > 0.05:\n                return True, 'exit_2'\n            if trade_entry_type == 'breakout' and current_profit > 0.1:\n                return True, 'exit_3\n\n        return False, None\n```\n\n----------------------------------------\n\nTITLE: Adding Exchange API Keys to Freqtrade Configuration\nDESCRIPTION: Configuration snippet for adding exchange API credentials to Freqtrade's config.json. This example shows Binance API key and secret configuration with an optional password field.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"exchange\": {\n        \"name\": \"binance\",\n        \"key\": \"af8ddd35195e9dc500b9a6f799f6f5c93d89193b\",\n        \"secret\": \"08a9dc6db3d7b53e1acebd9275677f4b0a04f1a5\",\n        //\"password\": \"\", // Optional, not needed by all exchanges)\n        // ...\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Stop Loss with Offset in Freqtrade (Python)\nDESCRIPTION: This configuration sets up a trailing stop loss that only activates once the price has reached a 3% offset from the entry price. The initial stoploss is set at -10%, and once activated, the trailing stop will maintain a 2% distance below the highest price.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    stoploss = -0.10\n    trailing_stop = True\n    trailing_stop_positive = 0.02\n    trailing_stop_positive_offset = 0.03\n    trailing_only_offset_is_reached = True\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PyTorch Logistic Regression Model in FreqAI\nDESCRIPTION: This code snippet shows a complete implementation of a custom PyTorch model (LogisticRegression) and a custom FreqAI model class (MyCoolPyTorchClassifier) that uses it. It demonstrates how to define the neural network architecture, initialize model parameters, and implement the required fit method.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass LogisticRegression(nn.Module):\n    def __init__(self, input_size: int):\n        super().__init__()\n        # Define your layers\n        self.linear = nn.Linear(input_size, 1)\n        self.activation = nn.Sigmoid()\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        # Define the forward pass\n        out = self.linear(x)\n        out = self.activation(out)\n        return out\n\nclass MyCoolPyTorchClassifier(BasePyTorchClassifier):\n    \"\"\"\n    This is a custom IFreqaiModel showing how a user might setup their own \n    custom Neural Network architecture for their training.\n    \"\"\"\n\n    @property\n    def data_convertor(self) -> PyTorchDataConvertor:\n        return DefaultPyTorchDataConvertor(target_tensor_type=torch.float)\n\n    def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)\n        config = self.freqai_info.get(\"model_training_parameters\", {})\n        self.learning_rate: float = config.get(\"learning_rate\",  3e-4)\n        self.model_kwargs: dict[str, Any] = config.get(\"model_kwargs\",  {})\n        self.trainer_kwargs: dict[str, Any] = config.get(\"trainer_kwargs\",  {})\n\n    def fit(self, data_dictionary: dict, dk: FreqaiDataKitchen, **kwargs) -> Any:\n        \"\"\"\n        User sets up the training and test data to fit their desired model here\n        :param data_dictionary: the dictionary holding all data for train, test,\n            labels, weights\n        :param dk: The datakitchen object for the current coin/model\n        \"\"\"\n\n        class_names = self.get_class_names()\n        self.convert_label_column_to_int(data_dictionary, dk, class_names)\n        n_features = data_dictionary[\"train_features\"].shape[-1]\n        model = LogisticRegression(\n            input_dim=n_features\n        )\n        model.to(self.device)\n        optimizer = torch.optim.AdamW(model.parameters(), lr=self.learning_rate)\n        criterion = torch.nn.CrossEntropyLoss()\n        init_model = self.get_init_model(dk.pair)\n        trainer = PyTorchModelTrainer(\n            model=model,\n            optimizer=optimizer,\n            criterion=criterion,\n            model_meta_data={\"class_names\": class_names},\n            device=self.device,\n            init_model=init_model,\n            data_convertor=self.data_convertor,\n            **self.trainer_kwargs,\n        )\n        trainer.fit(data_dictionary, self.splits)\n        return trainer\n```\n\n----------------------------------------\n\nTITLE: Configuring Historical Prediction Analysis in FreqAI\nDESCRIPTION: JSON configuration for enabling historical prediction tracking in FreqAI. This sets the number of candles to consider when generating statistics for dynamic target thresholds based on previous predictions rather than training data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"freqai\": {\n        \"fit_live_predictions_candles\": 300,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Exchange in Freqtrade\nDESCRIPTION: Basic configuration for connecting to Binance exchange in Freqtrade. Includes the exchange name and API credentials.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"binance\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"ccxt_config\": {},\n    \"ccxt_async_config\": {},\n    // ... \n```\n\n----------------------------------------\n\nTITLE: Running Multiple Freqtrade Instances with Custom Databases\nDESCRIPTION: Command examples for running multiple Freqtrade instances with different database configurations for BTC and USDT trading in both dry-run and live modes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade -c MyConfig.json -s MyStrategy\n# is equivalent to\nfreqtrade trade -c MyConfig.json -s MyStrategy --db-url sqlite:///tradesv3.dryrun.sqlite\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1:\nfreqtrade trade -c MyConfigBTC.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesBTC.dryrun.sqlite\n# Terminal 2:\nfreqtrade trade -c MyConfigUSDT.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesUSDT.dryrun.sqlite\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1:\nfreqtrade trade -c MyConfigBTC.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesBTC.live.sqlite\n# Terminal 2:\nfreqtrade trade -c MyConfigUSDT.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesUSDT.live.sqlite\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Target Thresholds with Z-scores in FreqAI\nDESCRIPTION: This code demonstrates how to create dynamic target thresholds for trade entries and exits using statistical values returned from FreqAI models. It establishes targets that are 1.25 standard deviations away from the mean of predicted values.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndataframe[\"target_roi\"] = dataframe[\"&-s_close_mean\"] + dataframe[\"&-s_close_std\"] * 1.25\ndataframe[\"sell_roi\"] = dataframe[\"&-s_close_mean\"] - dataframe[\"&-s_close_std\"] * 1.25\n```\n\n----------------------------------------\n\nTITLE: Displaying FreqAI Configuration Parameters Table in Markdown\nDESCRIPTION: This markdown snippet presents a table of FreqAI configuration parameters, including their descriptions, data types, and default values. It covers essential settings such as train_period_days, backtest_period_days, identifier, and various other parameters for controlling FreqAI behavior.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-parameter-table.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Parameter table\n\nThe table below will list all configuration parameters available for FreqAI. Some of the parameters are exemplified in `config_examples/config_freqai.example.json`.\n\nMandatory parameters are marked as **Required** and have to be set in one of the suggested ways.\n\n### General configuration parameters\n\n|  Parameter | Description |\n|------------|-------------|\n|  |  **General configuration parameters within the `config.freqai` tree**\n| `freqai` | **Required.** <br> The parent dictionary containing all the parameters for controlling FreqAI. <br> **Datatype:** Dictionary.\n| `train_period_days` | **Required.** <br> Number of days to use for the training data (width of the sliding window). <br> **Datatype:** Positive integer.\n| `backtest_period_days` | **Required.** <br> Number of days to inference from the trained model before sliding the `train_period_days` window defined above, and retraining the model during backtesting (more info [here](freqai-running.md#backtesting)). This can be fractional days, but beware that the provided `timerange` will be divided by this number to yield the number of trainings necessary to complete the backtest. <br> **Datatype:** Float.\n| `identifier` | **Required.** <br> A unique ID for the current model. If models are saved to disk, the `identifier` allows for reloading specific pre-trained models/data. <br> **Datatype:** String.\n| `live_retrain_hours` | Frequency of retraining during dry/live runs. <br> **Datatype:** Float > 0. <br> Default: `0` (models retrain as often as possible).\n| `expiration_hours` | Avoid making predictions if a model is more than `expiration_hours` old. <br> **Datatype:** Positive integer. <br> Default: `0` (models never expire).\n| `purge_old_models` | Number of models to keep on disk (not relevant to backtesting). Default is 2, which means that dry/live runs will keep the latest 2 models on disk. Setting to 0 keeps all models. This parameter also accepts a boolean to maintain backwards compatibility. <br> **Datatype:** Integer. <br> Default: `2`.\n| `save_backtest_models` | Save models to disk when running backtesting. Backtesting operates most efficiently by saving the prediction data and reusing them directly for subsequent runs (when you wish to tune entry/exit parameters). Saving backtesting models to disk also allows to use the same model files for starting a dry/live instance with the same model `identifier`. <br> **Datatype:** Boolean. <br> Default: `False` (no models are saved).\n| `fit_live_predictions_candles` | Number of historical candles to use for computing target (label) statistics from prediction data, instead of from the training dataset (more information can be found [here](freqai-configuration.md#creating-a-dynamic-target-threshold)). <br> **Datatype:** Positive integer.\n| `continual_learning` | Use the final state of the most recently trained model as starting point for the new model, allowing for incremental learning (more information can be found [here](freqai-running.md#continual-learning)). Beware that this is currently a naive approach to incremental learning, and it has a high probability of overfitting/getting stuck in local minima while the market moves away from your model. We have the connections here primarily for experimental purposes and so that it is ready for more mature approaches to continual learning in chaotic systems like the crypto market. <br> **Datatype:** Boolean. <br> Default: `False`.\n| `write_metrics_to_disk` | Collect train timings, inference timings and cpu usage in json file. <br> **Datatype:** Boolean. <br> Default: `False`\n| `data_kitchen_thread_count` | <br> Designate the number of threads you want to use for data processing (outlier methods, normalization, etc.). This has no impact on the number of threads used for training. If user does not set it (default), FreqAI will use max number of threads - 2 (leaving 1 physical core available for Freqtrade bot and FreqUI) <br> **Datatype:** Positive integer.\n| `activate_tensorboard` | <br> Indicate whether or not to activate tensorboard for the tensorboard enabled modules (currently Reinforcment Learning, XGBoost, Catboost, and PyTorch). Tensorboard needs Torch installed, which means you will need the torch/RL docker image or you need to answer \"yes\" to the install question about whether or not you wish to install Torch. <br> **Datatype:** Boolean. <br> Default: `True`.\n| `wait_for_training_iteration_on_reload` | <br> When using /reload or ctrl-c, wait for the current training iteration to finish before completing graceful shutdown. If set to `False`, FreqAI will break the current training iteration, allowing you to shutdown gracefully more quickly, but you will lose your current training iteration. <br> **Datatype:** Boolean. <br> Default: `True`.\n```\n\n----------------------------------------\n\nTITLE: Setting Class Names for FreqAI Classifiers\nDESCRIPTION: Example of how to set class names for classification tasks in FreqAI. This code snippet shows how to override the IFreqaiModel.class_names attribute in a trading strategy to define binary classification targets.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef set_freqai_targets(self, dataframe: DataFrame, metadata: dict, **kwargs) -> DataFrame:\n    self.freqai.class_names = [\"down\", \"up\"]\n    dataframe['&s-up_or_down'] = np.where(dataframe[\"close\"].shift(-100) >\n                                              dataframe[\"close\"], 'up', 'down')\n\n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Logic with Hyperoptable Parameters\nDESCRIPTION: This code shows how to use the defined hyperoptable parameters in the populate_entry_trend method of a Freqtrade strategy. It constructs entry conditions based on parameter values being tested during hyperopt runs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    conditions = []\n    # GUARDS AND TRENDS\n    if self.buy_adx_enabled.value:\n        conditions.append(dataframe['adx'] > self.buy_adx.value)\n    if self.buy_rsi_enabled.value:\n        conditions.append(dataframe['rsi'] < self.buy_rsi.value)\n\n    # TRIGGERS\n    if self.buy_trigger.value == 'bb_lower':\n        conditions.append(dataframe['close'] < dataframe['bb_lowerband'])\n    if self.buy_trigger.value == 'macd_cross_signal':\n        conditions.append(qtpylib.crossed_above(\n            dataframe['macd'], dataframe['macdsignal']\n        ))\n\n    # Check that volume is not 0\n    conditions.append(dataframe['volume'] > 0)\n\n    if conditions:\n        dataframe.loc[\n            reduce(lambda x, y: x & y, conditions),\n            'enter_long'] = 1\n\n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Main Configuration File with Import References\nDESCRIPTION: Example of a main configuration file that imports another configuration file. This demonstrates how to set up configuration inheritance where the parent config overrides values from imported configs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"max_open_trades\": 3,\n    \"stake_currency\": \"USDT\",\n    \"add_config_files\": [\n        \"config-import.json\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Consumer Strategy in Freqtrade\nDESCRIPTION: Python code for a consumer strategy that receives pre-calculated indicators from a producer. This strategy uses websocket API to fetch analysis data instead of computing indicators itself.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/producer-consumer.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ConsumerStrategy(IStrategy):\n    #...\n    process_only_new_candles = False # required for consumers\n\n    _columns_to_expect = ['rsi_default', 'tema_default', 'bb_middleband_default']\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Use the websocket api to get pre-populated indicators from another freqtrade instance.\n        Use `self.dp.get_producer_df(pair)` to get the dataframe\n        \"\"\"\n        pair = metadata['pair']\n        timeframe = self.timeframe\n\n        producer_pairs = self.dp.get_producer_pairs()\n        # You can specify which producer to get pairs from via:\n        # self.dp.get_producer_pairs(\"my_other_producer\")\n\n        # This func returns the analyzed dataframe, and when it was analyzed\n        producer_dataframe, _ = self.dp.get_producer_df(pair)\n        # You can get other data if the producer makes it available:\n        # self.dp.get_producer_df(\n        #   pair,\n        #   timeframe=\"1h\",\n        #   candle_type=CandleType.SPOT,\n        #   producer_name=\"my_other_producer\"\n        # )\n\n        if not producer_dataframe.empty:\n            # If you plan on passing the producer's entry/exit signal directly,\n            # specify ffill=False or it will have unintended results\n            merged_dataframe = merge_informative_pair(dataframe, producer_dataframe,\n                                                      timeframe, timeframe,\n                                                      append_timeframe=False,\n                                                      suffix=\"default\")\n            return merged_dataframe\n        else:\n            dataframe[self._columns_to_expect] = 0\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Populates the entry signal for the given dataframe\n        \"\"\"\n        # Use the dataframe columns as if we calculated them ourselves\n        dataframe.loc[\n            (\n                (qtpylib.crossed_above(dataframe['rsi_default'], self.buy_rsi.value)) &\n                (dataframe['tema_default'] <= dataframe['bb_middleband_default']) &\n                (dataframe['tema_default'] > dataframe['tema_default'].shift(1)) &\n                (dataframe['volume'] > 0)\n            ),\n            'enter_long'] = 1\n\n        return dataframe\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxies for Exchange Connections in Freqtrade\nDESCRIPTION: JSON configuration snippet for setting up proxies specifically for exchange connections in Freqtrade using ccxt_config options.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"exchange\": {\n    \"ccxt_config\": {\n      \"httpsProxy\": \"http://addr:port\",\n      \"wsProxy\": \"http://addr:port\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Strategy with Specific Strategy Path\nDESCRIPTION: Command to run Freqtrade with a custom strategy and specifying an additional directory to search for strategy files.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --strategy AwesomeStrategy --strategy-path /some/directory\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Strategies in Freqtrade\nDESCRIPTION: Demonstrates how to create derived strategies through inheritance to override specific attributes and methods.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    ...\n    stoploss = 0.13\n    trailing_stop = False\n    # All other attributes and methods are here as they\n    # should be in any custom strategy...\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom myawesomestrategy import MyAwesomeStrategy\nclass MyAwesomeStrategy2(MyAwesomeStrategy):\n    # Override something\n    stoploss = 0.08\n    trailing_stop = True\n```\n\n----------------------------------------\n\nTITLE: Full Pairlist Configuration Example in Freqtrade (JSON)\nDESCRIPTION: This snippet provides a comprehensive example of configuring multiple pairlist handlers and filters in Freqtrade. It includes VolumePairList, AgeFilter, PrecisionFilter, PriceFilter, SpreadFilter, RangeStabilityFilter, VolatilityFilter, and ShuffleFilter.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"pair_whitelist\": [],\n    \"pair_blacklist\": [\"BNB/BTC\"]\n},\n\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\"\n    },\n    {\"method\": \"AgeFilter\", \"min_days_listed\": 10},\n    {\"method\": \"PrecisionFilter\"},\n    {\"method\": \"PriceFilter\", \"low_price_ratio\": 0.01},\n    {\"method\": \"SpreadFilter\", \"max_spread_ratio\": 0.005},\n    {\n        \"method\": \"RangeStabilityFilter\",\n        \"lookback_days\": 10,\n        \"min_rate_of_change\": 0.01,\n        \"refresh_period\": 86400\n    },\n    {\n        \"method\": \"VolatilityFilter\",\n        \"lookback_days\": 10,\n        \"min_volatility\": 0.05,\n        \"max_volatility\": 0.50,\n        \"refresh_period\": 86400\n    },\n    {\"method\": \"ShuffleFilter\", \"seed\": 42}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reward Function for Reinforcement Learning in Python\nDESCRIPTION: Example of a custom Reinforcement Learning model class with a customized reward calculation function, demonstrating various reward scenarios based on trading actions and market conditions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.freqai.prediction_models.ReinforcementLearner import ReinforcementLearner\nfrom freqtrade.freqai.RL.Base5ActionRLEnv import Actions, Base5ActionRLEnv, Positions\n\n\nclass MyCoolRLModel(ReinforcementLearner):\n    \"\"\"\n    User created RL prediction model.\n\n    Save this file to `freqtrade/user_data/freqaimodels`\n\n    then use it with:\n\n    freqtrade trade --freqaimodel MyCoolRLModel --config config.json --strategy SomeCoolStrat\n\n    Here the users can override any of the functions\n    available in the `IFreqaiModel` inheritance tree. Most importantly for RL, this\n    is where the user overrides `MyRLEnv` (see below), to define custom\n    `calculate_reward()` function, or to override any other parts of the environment.\n\n    This class also allows users to override any other part of the IFreqaiModel tree.\n    For example, the user can override `def fit()` or `def train()` or `def predict()`\n    to take fine-tuned control over these processes.\n\n    Another common override may be `def data_cleaning_predict()` where the user can\n    take fine-tuned control over the data handling pipeline.\n    \"\"\"\n    class MyRLEnv(Base5ActionRLEnv):\n        \"\"\"\n        User made custom environment. This class inherits from BaseEnvironment and gym.Env.\n        Users can override any functions from those parent classes. Here is an example\n        of a user customized `calculate_reward()` function.\n\n        Warning!\n        This is function is a showcase of functionality designed to show as many possible\n        environment control features as possible. It is also designed to run quickly\n        on small computers. This is a benchmark, it is *not* for live production.\n        \"\"\"\n        def calculate_reward(self, action: int) -> float:\n            # first, penalize if the action is not valid\n            if not self._is_valid(action):\n                return -2\n            pnl = self.get_unrealized_profit()\n\n            factor = 100\n\n            pair = self.pair.replace(':', '')\n\n            # you can use feature values from dataframe\n            # Assumes the shifted RSI indicator has been generated in the strategy.\n            rsi_now = self.raw_features[f\"%-rsi-period_10_shift-1_{pair}_\"\n                            f\"{self.config['timeframe']}\"].iloc[self._current_tick]\n\n            # reward agent for entering trades\n            if (action in (Actions.Long_enter.value, Actions.Short_enter.value)\n                    and self._position == Positions.Neutral):\n                if rsi_now < 40:\n                    factor = 40 / rsi_now\n                else:\n                    factor = 1\n                return 25 * factor\n\n            # discourage agent from not entering trades\n            if action == Actions.Neutral.value and self._position == Positions.Neutral:\n                return -1\n            max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n            trade_duration = self._current_tick - self._last_trade_tick\n            if trade_duration <= max_trade_duration:\n                factor *= 1.5\n            elif trade_duration > max_trade_duration:\n                factor *= 0.5\n            # discourage sitting in position\n            if self._position in (Positions.Short, Positions.Long) and \\\n            action == Actions.Neutral.value:\n                return -1 * trade_duration / max_trade_duration\n            # close long\n            if action == Actions.Long_exit.value and self._position == Positions.Long:\n                if pnl > self.profit_aim * self.rr:\n                    factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n                return float(pnl * factor)\n            # close short\n            if action == Actions.Short_exit.value and self._position == Positions.Short:\n                if pnl > self.profit_aim * self.rr:\n                    factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n                return float(pnl * factor)\n            return 0.\n```\n\n----------------------------------------\n\nTITLE: Using FreqTrade Backtesting Command with Options\nDESCRIPTION: Complete command line reference for FreqTrade's backtesting functionality. Shows all available options including timeframe configuration, data settings, strategy selection, and export capabilities for performing historical backtests of trading strategies.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/backtesting.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade backtesting [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                             [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-i TIMEFRAME] [--timerange TIMERANGE]\n                             [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                             [--max-open-trades INT]\n                             [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                             [-p PAIRS [PAIRS ...]] [--eps]\n                             [--enable-protections]\n                             [--dry-run-wallet DRY_RUN_WALLET]\n                             [--timeframe-detail TIMEFRAME_DETAIL]\n                             [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                             [--export {none,trades,signals}]\n                             [--export-filename PATH]\n                             [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n                             [--cache {none,day,week,month}]\n                             [--freqai-backtest-live-models]\n```\n\n----------------------------------------\n\nTITLE: Configuring FreqAI Feature Parameters in JSON\nDESCRIPTION: This JSON configuration snippet shows how to set up feature parameters for FreqAI in Freqtrade. It defines timeframes to include, correlated pairs to analyze, label period candles, number of shifted candles to include, and indicator periods for feature calculation.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-feature-engineering.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"freqai\": {\n    //...\n    \"feature_parameters\" : {\n        \"include_timeframes\": [\"5m\",\"15m\",\"4h\"],\n        \"include_corr_pairlist\": [\n            \"ETH/USD\",\n            \"LINK/USD\",\n            \"BNB/USD\"\n        ],\n        \"label_period_candles\": 24,\n        \"include_shifted_candles\": 2,\n        \"indicator_periods_candles\": [10, 20]\n    },\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Orderflow Processing Parameters in Freqtrade\nDESCRIPTION: JSON configuration for orderflow settings in Freqtrade, defining parameters such as cache size, maximum candles, scale for price bin size, and various imbalance detection thresholds.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-orderflow.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"orderflow\": {\n    \"cache_size\": 1000, \n    \"max_candles\": 1500, \n    \"scale\": 0.5, \n    \"stacked_imbalance_range\": 3, //  needs at least this amount of imbalance next to each other\n    \"imbalance_volume\": 1, //  filters out below\n    \"imbalance_ratio\": 3 //  filters out ratio lower than\n  },\n```\n\n----------------------------------------\n\nTITLE: Setting Regression Target for Price Prediction in FreqAI\nDESCRIPTION: This code snippet demonstrates how to set a regression target in FreqAI to predict the price 100 candles into the future. It shifts the close price value to create a target column that the regression model will learn to predict.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf['&s-close_price'] = df['close'].shift(-100)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tensorboard Logging in FreqAI Environment\nDESCRIPTION: Example of using the tensorboard_log method inside a custom RL environment's calculate_reward function to track invalid actions. This demonstrates how to integrate custom metrics into FreqAI's built-in episodic logging system.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    class MyRLEnv(Base5ActionRLEnv):\n        \"\"\"\n        User made custom environment. This class inherits from BaseEnvironment and gym.Env.\n        Users can override any functions from those parent classes. Here is an example\n        of a user customized `calculate_reward()` function.\n        \"\"\"\n        def calculate_reward(self, action: int) -> float:\n            if not self._is_valid(action):\n                self.tensorboard_log(\"invalid\")\n                return -2\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Types in JSON Configuration\nDESCRIPTION: JSON configuration for order types in FreqTrade, defining how different actions (entry, exit, stoploss) are executed on the exchange. This configuration overwrites any values set in the strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"order_types\": {\n    \"entry\": \"limit\",\n    \"exit\": \"limit\",\n    \"emergency_exit\": \"market\",\n    \"force_entry\": \"market\",\n    \"force_exit\": \"market\",\n    \"stoploss\": \"market\",\n    \"stoploss_on_exchange\": false,\n    \"stoploss_on_exchange_interval\": 60\n}\n```\n\n----------------------------------------\n\nTITLE: Using Freqtrade Trade Command with CLI Arguments\nDESCRIPTION: This command syntax shows how to use the 'freqtrade trade' command with various arguments. It includes options for database configuration, dry-run trading, fee specification, logging, strategy selection, and FreqAI model configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/trade.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade [-h] [-v] [--no-color] [--logfile FILE] [-V] [-c PATH]\n                       [-d PATH] [--userdir PATH] [-s NAME]\n                       [--strategy-path PATH] [--recursive-strategy-search]\n                       [--freqaimodel NAME] [--freqaimodel-path PATH]\n                       [--db-url PATH] [--sd-notify] [--dry-run]\n                       [--dry-run-wallet DRY_RUN_WALLET] [--fee FLOAT]\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal ROI in a Strategy\nDESCRIPTION: Example of adding the optimized minimal ROI table to a trading strategy. This defines when to take profit based on trade duration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n    # Minimal ROI designed for the strategy.\n    # This attribute will be overridden if the config file contains \"minimal_roi\"\n    minimal_roi = {\n        0: 0.10674,\n        21: 0.09158,\n        78: 0.03634,\n        118: 0\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimizable Protections in Python Strategy for Freqtrade\nDESCRIPTION: This code demonstrates how to define a strategy with optimizable protection parameters using the Parameter classes. It shows the implementation of CooldownPeriod and StoplossGuard protections with parameters that can be tuned during hyperoptimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pandas import DataFrame\nfrom functools import reduce\n\nimport talib.abstract as ta\n\nfrom freqtrade.strategy import (BooleanParameter, CategoricalParameter, DecimalParameter, \n                                IStrategy, IntParameter)\nimport freqtrade.vendor.qtpylib.indicators as qtpylib\n\nclass MyAwesomeStrategy(IStrategy):\n    stoploss = -0.05\n    timeframe = '15m'\n    # Define the parameter spaces\n    cooldown_lookback = IntParameter(2, 48, default=5, space=\"protection\", optimize=True)\n    stop_duration = IntParameter(12, 200, default=5, space=\"protection\", optimize=True)\n    use_stop_protection = BooleanParameter(default=True, space=\"protection\", optimize=True)\n\n\n    @property\n    def protections(self):\n        prot = []\n\n        prot.append({\n            \"method\": \"CooldownPeriod\",\n            \"stop_duration_candles\": self.cooldown_lookback.value\n        })\n        if self.use_stop_protection.value:\n            prot.append({\n                \"method\": \"StoplossGuard\",\n                \"lookback_period_candles\": 24 * 3,\n                \"trade_limit\": 4,\n                \"stop_duration_candles\": self.stop_duration.value,\n                \"only_per_pair\": False\n            })\n\n        return prot\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Running Freqtrade Hyperopt with Full Configuration\nDESCRIPTION: Command to run hyperopt with a specific config file, hyperopt loss function, strategy, number of evaluations, and optimization spaces. This demonstrates the typical usage pattern for hyperopt.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt --config config.json --hyperopt-loss <hyperoptlossname> --strategy <strategyname> -e 500 --spaces all\n```\n\n----------------------------------------\n\nTITLE: Defining Order Types and Stop Loss Settings in Freqtrade Strategy\nDESCRIPTION: This code snippet shows how to define order types and stop loss settings within a Freqtrade strategy file, including entry, exit, emergency exit, and on-exchange stop loss configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\norder_types = {\n    \"entry\": \"limit\",\n    \"exit\": \"limit\",\n    \"emergency_exit\": \"market\",\n    \"stoploss\": \"market\",\n    \"stoploss_on_exchange\": True,\n    \"stoploss_on_exchange_interval\": 60,\n    \"stoploss_on_exchange_limit_ratio\": 0.99\n}\n```\n\n----------------------------------------\n\nTITLE: Load and Run Trading Strategy\nDESCRIPTION: Loads a trading strategy and generates buy/sell signals using the loaded historical data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/freqtrade/templates/strategy_analysis_example.ipynb#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.data.dataprovider import DataProvider\nfrom freqtrade.resolvers import StrategyResolver\n\nstrategy = StrategyResolver.load_strategy(config)\nstrategy.dp = DataProvider(config, None, None)\nstrategy.ft_bot_start()\n\ndf = strategy.analyze_ticker(candles, {\"pair\": pair})\ndf.tail()\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimized Trailing Stop Parameters in a Python Strategy\nDESCRIPTION: Code snippet showing how to implement the trailing stop parameters found by Hyperopt into a custom trading strategy. These parameters control when to exit a profitable trade using trailing stops.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n    # Trailing stop\n    # These attributes will be overridden if the config file contains corresponding values.\n    trailing_stop = True\n    trailing_stop_positive = 0.02001\n    trailing_stop_positive_offset = 0.06038\n    trailing_only_offset_is_reached = True\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Trade Amount in Python\nDESCRIPTION: Python code that calculates the trade amount for dynamic stake sizing by dividing available currency balance by the number of remaining trade slots.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncurrency_balance / (max_open_trades - current_open_trades)\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Types in Python Strategy\nDESCRIPTION: Python dictionary defining various order types for a FreqTrade strategy, including entry, exit, emergency exit, and stoploss configurations. This determines how orders are placed on the exchange.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\norder_types = {\n    \"entry\": \"limit\",\n    \"exit\": \"limit\",\n    \"emergency_exit\": \"market\",\n    \"force_entry\": \"market\",\n    \"force_exit\": \"market\",\n    \"stoploss\": \"market\",\n    \"stoploss_on_exchange\": False,\n    \"stoploss_on_exchange_interval\": 60,\n    \"stoploss_on_exchange_limit_ratio\": 0.99,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exit Tags in Freqtrade Strategy\nDESCRIPTION: Shows how to implement exit tags in a trading strategy to specify exit conditions and reasons.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (dataframe['rsi'] > 70) &\n            (dataframe['volume'] > 0)\n        ),\n        ['exit_long', 'exit_tag']] = (1, 'exit_rsi')\n\n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Feature Engineering for RL Models in FreqAI\nDESCRIPTION: Implementation of feature engineering for Reinforcement Learning models. This function passes raw OHLCV price data to the agent, which is necessary for the training environment to function properly.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef feature_engineering_standard(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n    # The following features are necessary for RL models\n    dataframe[f\"%-raw_close\"] = dataframe[\"close\"]\n    dataframe[f\"%-raw_open\"] = dataframe[\"open\"]\n    dataframe[f\"%-raw_high\"] = dataframe[\"high\"]\n    dataframe[f\"%-raw_low\"] = dataframe[\"low\"]\nreturn dataframe\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Tags in Freqtrade Strategy\nDESCRIPTION: Demonstrates how to implement and use entry tags in a trading strategy, including signal naming and custom exit conditions based on entry tags.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (dataframe['rsi'] < 35) &\n            (dataframe['volume'] > 0)\n        ),\n        ['enter_long', 'enter_tag']] = (1, 'buy_signal_rsi')\n\n    return dataframe\n\ndef custom_exit(self, pair: str, trade: Trade, current_time: datetime, current_rate: float,\n                current_profit: float, **kwargs):\n    dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n    last_candle = dataframe.iloc[-1].squeeze()\n    if trade.enter_tag == 'buy_signal_rsi' and last_candle['rsi'] > 80:\n        return 'sell_signal_rsi'\n    return None\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Classification Target for Price Direction in FreqAI\nDESCRIPTION: This code snippet shows how to create a binary classification target that predicts whether the price will go up or down 100 candles into the future. It uses np.where to create categorical labels 'up' or 'down' based on future price comparison.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf['&s-up_or_down'] = np.where( df[\"close\"].shift(-100) > df[\"close\"], 'up', 'down')\n```\n\n----------------------------------------\n\nTITLE: FreqTrade Backtesting Command Options Description\nDESCRIPTION: Detailed description of all backtesting command options including timeframe settings, data configuration, strategy selection, export options, and more. Each option includes its syntax and a brief explanation of its purpose.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/backtesting.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noptions:\n  -h, --help            show this help message and exit\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        Specify timeframe (`1m`, `5m`, `30m`, `1h`, `1d`).\n  --timerange TIMERANGE\n                        Specify what timerange of data to use.\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        Storage format for downloaded candle (OHLCV) data.\n                        (default: `feather`).\n  --max-open-trades INT\n                        Override the value of the `max_open_trades`\n                        configuration setting.\n  --stake-amount STAKE_AMOUNT\n                        Override the value of the `stake_amount` configuration\n                        setting.\n  --fee FLOAT           Specify fee ratio. Will be applied twice (on trade\n                        entry and exit).\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        Limit command to these pairs. Pairs are space-\n                        separated.\n  --eps, --enable-position-stacking\n                        Allow buying the same pair multiple times (position\n                        stacking).\n  --enable-protections, --enableprotections\n                        Enable protections for backtesting.Will slow\n                        backtesting down by a considerable amount, but will\n                        include configured protections\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        Starting balance, used for backtesting / hyperopt and\n                        dry-runs.\n  --timeframe-detail TIMEFRAME_DETAIL\n                        Specify detail timeframe for backtesting (`1m`, `5m`,\n                        `30m`, `1h`, `1d`).\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        Provide a space-separated list of strategies to\n                        backtest. Please note that timeframe needs to be set\n                        either in config or via command line. When using this\n                        together with `--export trades`, the strategy-name is\n                        injected into the filename (so `backtest-data.json`\n                        becomes `backtest-data-SampleStrategy.json`\n  --export {none,trades,signals}\n                        Export backtest results (default: trades).\n  --export-filename PATH, --backtest-filename PATH\n                        Use this filename for backtest results.Requires\n                        `--export` to be set as well. Example: `--export-filen\n                        ame=user_data/backtest_results/backtest_today.json`\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        Show backtesting breakdown per [day, week, month,\n                        year].\n  --cache {none,day,week,month}\n                        Load a cached backtest result no older than specified\n                        age (default: day).\n  --freqai-backtest-live-models\n                        Run backtest with ready models.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Producer Strategy in Freqtrade\nDESCRIPTION: Python code for a producer strategy that calculates technical indicators for trading. This example demonstrates how indicators are computed and can be broadcast to consumer instances.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/producer-consumer.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ProducerStrategy(IStrategy):\n    #...\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Calculate indicators in the standard freqtrade way which can then be broadcast to other instances\n        \"\"\"\n        dataframe['rsi'] = ta.RSI(dataframe)\n        bollinger = qtpylib.bollinger_bands(qtpylib.typical_price(dataframe), window=20, stds=2)\n        dataframe['bb_lowerband'] = bollinger['lower']\n        dataframe['bb_middleband'] = bollinger['mid']\n        dataframe['bb_upperband'] = bollinger['upper']\n        dataframe['tema'] = ta.TEMA(dataframe, timeperiod=9)\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Populates the entry signal for the given dataframe\n        \"\"\"\n        dataframe.loc[\n            (\n                (qtpylib.crossed_above(dataframe['rsi'], self.buy_rsi.value)) &\n                (dataframe['tema'] <= dataframe['bb_middleband']) &\n                (dataframe['tema'] > dataframe['tema'].shift(1)) &\n                (dataframe['volume'] > 0)\n            ),\n            'enter_long'] = 1\n\n        return dataframe\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Types in Python Strategy\nDESCRIPTION: Defines order types in a Python strategy to use limit orders instead of market orders for exchanges that don't support market orders.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\norder_types = {\n    ...\n    \"stoploss\": \"limit\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RSI Indicator to Dataframe in Freqtrade Strategy (Python)\nDESCRIPTION: Example of how to add a Relative Strength Index (RSI) indicator to a dataframe in a Freqtrade strategy. This code uses ta-lib's RSI function to calculate the indicator value with default parameters and assigns it to a new column named 'rsi' in the dataframe.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-101.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndataframe['rsi'] = ta.RSI(dataframe)\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-in-Force Settings in Python\nDESCRIPTION: Configuration for order_time_in_force parameter that defines how orders are executed on the exchange. This example sets both entry and exit orders to GTC (Good Till Canceled).\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"order_time_in_force\": {\n    \"entry\": \"GTC\",\n    \"exit\": \"GTC\"\n},\n```\n\n----------------------------------------\n\nTITLE: RL Strategy Entry and Exit Logic\nDESCRIPTION: Implementation of populate_entry_trend and populate_exit_trend functions for an RL strategy. These functions use the agent's action outputs to determine when to enter and exit trades, with each action value corresponding to a specific trading decision.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef populate_entry_trend(self, df: DataFrame, metadata: dict) -> DataFrame:\n\n    enter_long_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 1]\n\n    if enter_long_conditions:\n        df.loc[\n            reduce(lambda x, y: x & y, enter_long_conditions), [\"enter_long\", \"enter_tag\"]\n        ] = (1, \"long\")\n\n    enter_short_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 3]\n\n    if enter_short_conditions:\n        df.loc[\n            reduce(lambda x, y: x & y, enter_short_conditions), [\"enter_short\", \"enter_tag\"]\n        ] = (1, \"short\")\n\n    return df\n\ndef populate_exit_trend(self, df: DataFrame, metadata: dict) -> DataFrame:\n    exit_long_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 2]\n    if exit_long_conditions:\n        df.loc[reduce(lambda x, y: x & y, exit_long_conditions), \"exit_long\"] = 1\n\n    exit_short_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 4]\n    if exit_short_conditions:\n        df.loc[reduce(lambda x, y: x & y, exit_short_conditions), \"exit_short\"] = 1\n\n    return df\n```\n\n----------------------------------------\n\nTITLE: Analyzing Trade Parallelism in Python\nDESCRIPTION: Examines the number of simultaneously open trades over time. This analysis helps determine the optimal max_open_trades parameter by providing insights into trade concurrency patterns.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.data.btanalysis import analyze_trade_parallelism\n\n\n# Analyze the above\nparallel_trades = analyze_trade_parallelism(trades, \"5m\")\n\nparallel_trades.plot()\n```\n\n----------------------------------------\n\nTITLE: Launching FreqAI Trade Bot with Example Configuration\nDESCRIPTION: Command to start FreqAI in dry mode using example configuration files and the LightGBMRegressor model. This command is intended for testing and demonstration purposes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --config config_examples/config_freqai.example.json --strategy FreqaiExampleStrategy --freqaimodel LightGBMRegressor --strategy-path freqtrade/templates\n```\n\n----------------------------------------\n\nTITLE: Running Backtests with Multiple Strategies in Freqtrade\nDESCRIPTION: This command runs a backtest for two strategies (Strategy001 and Strategy002) over a specific time range with a 5-minute timeframe. The results will be exported as trade data, which allows detailed comparison between strategies.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --timerange 20180401-20180410 --timeframe 5m --strategy-list Strategy001 Strategy002 --export trades\n```\n\n----------------------------------------\n\nTITLE: Loading a Custom Strategy in Freqtrade\nDESCRIPTION: Command to start Freqtrade with a custom trading strategy class named 'AwesomeStrategy' from the default strategies directory.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --strategy AwesomeStrategy\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Backtesting Report in Terminal Output\nDESCRIPTION: Sample output of a Freqtrade backtesting report showing trade statistics by pair, exit reasons, and summary metrics. The report includes profit calculations, trade counts, win percentages, and performance indicators like CAGR, Sortino, and Sharpe ratios.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n================================================ BACKTESTING REPORT =================================================\n| Pair     | Trades |   Avg Profit % |   Tot Profit BTC |   Tot Profit % | Avg Duration |  Wins Draws Loss   Win%  |\n|----------+--------+----------------+------------------+----------------+--------------+--------------------------|  \n| ADA/BTC  |     35 |          -0.11 |      -0.00019428 |          -1.94 | 4:35:00      |    14     0    21   40.0 |\n| ARK/BTC  |     11 |          -0.41 |      -0.00022647 |          -2.26 | 2:03:00      |     3     0     8   27.3 |\n| BTS/BTC  |     32 |           0.31 |       0.00048938 |           4.89 | 5:05:00      |    18     0    14   56.2 |\n| DASH/BTC |     13 |          -0.08 |      -0.00005343 |          -0.53 | 4:39:00      |     6     0     7   46.2 |\n| ENG/BTC  |     18 |           1.36 |       0.00122807 |          12.27 | 2:50:00      |     8     0    10   44.4 |\n| EOS/BTC  |     36 |           0.08 |       0.00015304 |           1.53 | 3:34:00      |    16     0    20   44.4 |\n| ETC/BTC  |     26 |           0.37 |       0.00047576 |           4.75 | 6:14:00      |    11     0    15   42.3 |\n| ETH/BTC  |     33 |           0.30 |       0.00049856 |           4.98 | 7:31:00      |    16     0    17   48.5 |\n| IOTA/BTC |     32 |           0.03 |       0.00005444 |           0.54 | 3:12:00      |    14     0    18   43.8 |\n| LSK/BTC  |     15 |           1.75 |       0.00131413 |          13.13 | 2:58:00      |     6     0     9   40.0 |\n| LTC/BTC  |     32 |          -0.04 |      -0.00006886 |          -0.69 | 4:49:00      |    11     0    21   34.4 |\n| NANO/BTC |     17 |           1.26 |       0.00107058 |          10.70 | 1:55:00      |    10     0     7   58.5 |\n| NEO/BTC  |     23 |           0.82 |       0.00094936 |           9.48 | 2:59:00      |    10     0    13   43.5 |\n| REQ/BTC  |      9 |           1.17 |       0.00052734 |           5.27 | 3:47:00      |     4     0     5   44.4 |\n| XLM/BTC  |     16 |           1.22 |       0.00097800 |           9.77 | 3:15:00      |     7     0     9   43.8 |\n| XMR/BTC  |     23 |          -0.18 |      -0.00020696 |          -2.07 | 5:30:00      |    12     0    11   52.2 |\n| XRP/BTC  |     35 |           0.66 |       0.00114897 |          11.48 | 3:49:00      |    12     0    23   34.3 |\n| ZEC/BTC  |     22 |          -0.46 |      -0.00050971 |          -5.09 | 2:22:00      |     7     0    15   31.8 |\n| TOTAL    |    429 |           0.36 |       0.00762792 |          76.20 | 4:12:00      |   186     0   243   43.4 |\n============================================= LEFT OPEN TRADES REPORT =============================================\n| Pair     |  Trades |   Avg Profit % |   Tot Profit BTC |   Tot Profit % | Avg Duration   |  Win Draw Loss Win% |\n|----------+---------+----------------+------------------+----------------+----------------+---------------------|\n| ADA/BTC  |       1 |           0.89 |       0.00004434 |           0.44 | 6:00:00        |    1    0    0  100 |\n| LTC/BTC  |       1 |           0.68 |       0.00003421 |           0.34 | 2:00:00        |    1    0    0  100 |\n| TOTAL    |       2 |           0.78 |       0.00007855 |           0.78 | 4:00:00        |    2    0    0  100 |\n==================== EXIT REASON STATS ====================\n| Exit Reason        |   Exits |  Wins |  Draws |  Losses |\n|--------------------+---------+-------+--------+---------|\n| trailing_stop_loss |     205 |   150 |      0 |      55 |\n| stop_loss          |     166 |     0 |      0 |     166 |\n| exit_signal        |      56 |    36 |      0 |      20 |\n| force_exit         |       2 |     0 |      0 |       2 |\n\n================== SUMMARY METRICS ==================\n| Metric                      | Value               |\n|-----------------------------+---------------------|\n| Backtesting from            | 2019-01-01 00:00:00 |\n| Backtesting to              | 2019-05-01 00:00:00 |\n| Trading Mode                | Spot                |\n| Max open trades             | 3                   |\n|                             |                     |\n| Total/Daily Avg Trades      | 429 / 3.575         |\n| Starting balance            | 0.01000000 BTC      |\n| Final balance               | 0.01762792 BTC      |\n| Absolute profit             | 0.00762792 BTC      |\n| Total profit %              | 76.2%               |\n| CAGR %                      | 460.87%             |\n| Sortino                     | 1.88                |\n| Sharpe                      | 2.97                |\n| Calmar                      | 6.29                |\n| SQN                         | 2.45                |\n| Profit factor               | 1.11                |\n| Expectancy (Ratio)          | -0.15 (-0.05)       |\n| Avg. stake amount           | 0.001      BTC      |\n| Total trade volume          | 0.429      BTC      |\n|                             |                     |\n| Long / Short                | 352 / 77            |\n| Total profit Long %         | 1250.58%            |\n| Total profit Short %        | -15.02%             |\n| Absolute profit Long        | 0.00838792 BTC      |\n| Absolute profit Short       | -0.00076 BTC        |\n|                             |                     |\n| Best Pair                   | LSK/BTC 26.26%      |\n| Worst Pair                  | ZEC/BTC -10.18%     |\n| Best Trade                  | LSK/BTC 4.25%       |\n| Worst Trade                 | ZEC/BTC -10.25%     |\n| Best day                    | 0.00076 BTC         |\n| Worst day                   | -0.00036 BTC        |\n| Days win/draw/lose          | 12 / 82 / 25        |\n| Avg. Duration Winners       | 4:23:00             |\n| Avg. Duration Loser         | 6:55:00             |\n| Max Consecutive Wins / Loss | 3 / 4               |\n| Rejected Entry signals      | 3089                |\n| Entry/Exit Timeouts         | 0 / 0               |\n| Canceled Trade Entries      | 34                  |\n| Canceled Entry Orders       | 123                 |\n| Replaced Entry Orders       | 89                  |\n|                             |                     |\n| Min balance                 | 0.00945123 BTC      |\n| Max balance                 | 0.01846651 BTC      |\n| Max % of account underwater | 25.19%              |\n| Absolute Drawdown (Account) | 13.33%              |\n| Drawdown                    | 0.0015 BTC          |\n| Drawdown high               | 0.0013 BTC          |\n| Drawdown low                | -0.0002 BTC         |\n| Drawdown Start              | 2019-02-15 14:10:00 |\n| Drawdown End                | 2019-04-11 18:15:00 |\n| Market change               | -5.88%              |\n=====================================================\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Trading Protection Strategy Implementation\nDESCRIPTION: Complete example combining all protection types with multiple configurations for comprehensive risk management in an hourly timeframe strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/protections.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.strategy import IStrategy\n\nclass AwesomeStrategy(IStrategy)\n    timeframe = '1h'\n    \n    @property\n    def protections(self):\n        return [\n            {\n                \"method\": \"CooldownPeriod\",\n                \"stop_duration_candles\": 5\n            },\n            {\n                \"method\": \"MaxDrawdown\",\n                \"lookback_period_candles\": 48,\n                \"trade_limit\": 20,\n                \"stop_duration_candles\": 4,\n                \"max_allowed_drawdown\": 0.2\n            },\n            {\n                \"method\": \"StoplossGuard\",\n                \"lookback_period_candles\": 24,\n                \"trade_limit\": 4,\n                \"stop_duration_candles\": 2,\n                \"only_per_pair\": False\n            },\n            {\n                \"method\": \"LowProfitPairs\",\n                \"lookback_period_candles\": 6,\n                \"trade_limit\": 2,\n                \"stop_duration_candles\": 60,\n                \"required_profit\": 0.02\n            },\n            {\n                \"method\": \"LowProfitPairs\",\n                \"lookback_period_candles\": 24,\n                \"trade_limit\": 4,\n                \"stop_duration_candles\": 2,\n                \"required_profit\": 0.01\n            }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Configuring PercentChangePairList with Candle Data in Freqtrade\nDESCRIPTION: Configuration for PercentChangePairList that uses candle data instead of ticker data. It looks at 72 1-hour candles (3 days) to calculate percent change, refreshing every hour and filtering for positive changes only.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"PercentChangePairList\",\n        \"number_assets\": 15,\n        \"sort_key\": \"percentage\",\n        \"min_value\": 0,\n        \"refresh_period\": 3600,\n        \"lookback_timeframe\": \"1h\",\n        \"lookback_period\": 72\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring SVM for Outlier Detection in FreqAI\nDESCRIPTION: Adds the SVMOutlierExtractor step to the feature pipeline by setting use_SVM_to_remove_outliers to true. This configuration trains a Support Vector Machine on the training data to identify and remove data points that fall outside the feature space.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-feature-engineering.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"freqai\": {\n        \"feature_parameters\" : {\n            \"use_SVM_to_remove_outliers\": true\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Additional FreqAI Parameters in Markdown\nDESCRIPTION: Documentation table defining additional FreqAI system parameters including Keras integration and performance optimization settings\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-parameter-table.md#2025-04-15_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|  Parameter | Description |\n|------------|-------------|\n|  |  **Extraneous parameters**\n| `freqai.keras` | If the selected model makes use of Keras (typical for TensorFlow-based prediction models), this flag needs to be activated so that the model save/loading follows Keras standards. <br> **Datatype:** Boolean. <br> Default: `False`.\n| `freqai.conv_width` | The width of a neural network input tensor. This replaces the need for shifting candles (`include_shifted_candles`) by feeding in historical data points as the second dimension of the tensor. Technically, this parameter can also be used for regressors, but it only adds computational overhead and does not change the model training/prediction. <br> **Datatype:** Integer. <br> Default: `2`.\n| `freqai.reduce_df_footprint` | Recast all numeric columns to float32/int32, with the objective of reducing ram/disk usage and decreasing train/inference timing. This parameter is set in the main level of the Freqtrade configuration file (not inside FreqAI). <br> **Datatype:** Boolean. <br> Default: `False`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Stop Loss with Offset in Freqtrade\nDESCRIPTION: This code snippet shows how to configure a trailing stop loss with an offset in Freqtrade, ensuring that the new stop loss locks in profits.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    stoploss = -0.10\n    trailing_stop = True\n    trailing_stop_positive = 0.02\n    trailing_stop_positive_offset = 0.03\n```\n\n----------------------------------------\n\nTITLE: Configuring Coingecko API with API Key in JSON\nDESCRIPTION: JSON configuration for setting up fiat display currency and Coingecko API integration. This allows FreqTrade to convert cryptocurrency values to fiat currency in reports.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fiat_display_currency\": \"USD\",\n    \"coingecko\": {\n        \"api_key\": \"your-api\",\n        \"is_demo\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Freqtrade Repository with Git\nDESCRIPTION: Commands to clone the Freqtrade repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# download freqtrade\ngit clone https://github.com/freqtrade/freqtrade.git\n\n# enter downloaded directory 'freqtrade'\ncd freqtrade\n```\n\n----------------------------------------\n\nTITLE: Implementing StoplossGuard Protection in Python\nDESCRIPTION: Demonstrates configuration of StoplossGuard protection that stops trading after multiple stoplosses. Monitors stoploss events across all pairs and stops trading for 4 candles if 4 stoplosses occur within 24 candles.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/protections.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef protections(self):\n    return [\n        {\n            \"method\": \"StoplossGuard\",\n            \"lookback_period_candles\": 24,\n            \"trade_limit\": 4,\n            \"stop_duration_candles\": 4,\n            \"required_profit\": 0.0,\n            \"only_per_pair\": False,\n            \"only_per_side\": False\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Multiple Freqtrade Instances Docker Configuration\nDESCRIPTION: Docker compose configuration for running multiple Freqtrade instances with separate databases, ports, and configurations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nversion: '3'\nservices:\n  freqtrade1:\n    image: freqtradeorg/freqtrade:stable\n    restart: always\n    container_name: freqtrade1\n    volumes:\n      - \"./user_data:/freqtrade/user_data\"\n    ports:\n     - \"127.0.0.1:8080:8080\"\n    command: >\n      trade\n      --logfile /freqtrade/user_data/logs/freqtrade1.log\n      --db-url sqlite:////freqtrade/user_data/tradesv3_freqtrade1.sqlite\n      --config /freqtrade/user_data/config.json\n      --config /freqtrade/user_data/config.freqtrade1.json\n      --strategy SampleStrategy\n  \n  freqtrade2:\n    image: freqtradeorg/freqtrade:stable\n    restart: always\n    container_name: freqtrade2\n    volumes:\n      - \"./user_data:/freqtrade/user_data\"\n    ports:\n      - \"127.0.0.1:8081:8080\"\n    command: >\n      trade\n      --logfile /freqtrade/user_data/logs/freqtrade2.log\n      --db-url sqlite:////freqtrade/user_data/tradesv3_freqtrade2.sqlite\n      --config /freqtrade/user_data/config.json\n      --config /freqtrade/user_data/config.freqtrade2.json\n      --strategy SampleStrategy\n```\n\n----------------------------------------\n\nTITLE: Enabling Public Trades in Freqtrade Configuration\nDESCRIPTION: JSON configuration snippet showing how to enable public trades data in the exchange section of config.json. Setting 'use_public_trades' to true allows Freqtrade to collect and use raw trade data for orderflow analysis.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-orderflow.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n   ...\n   \"use_public_trades\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PyTorch MLP Regressor in FreqAI\nDESCRIPTION: Creates a PyTorch MLP regressor class that inherits from BasePyTorchRegressor. The fit method configures the model architecture, optimizer (AdamW), and loss function (MSELoss) for training regression models in the FreqAI framework.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass PyTorchMLPRegressor(BasePyTorchRegressor):\n    def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)\n        config = self.freqai_info.get(\"model_training_parameters\", {})\n        self.learning_rate: float = config.get(\"learning_rate\",  3e-4)\n        self.model_kwargs: dict[str, Any] = config.get(\"model_kwargs\",  {})\n        self.trainer_kwargs: dict[str, Any] = config.get(\"trainer_kwargs\",  {})\n\n    def fit(self, data_dictionary: dict, dk: FreqaiDataKitchen, **kwargs) -> Any:\n        n_features = data_dictionary[\"train_features\"].shape[-1]\n        model = PyTorchMLPModel(\n            input_dim=n_features,\n            output_dim=1,\n            **self.model_kwargs\n        )\n        model.to(self.device)\n        optimizer = torch.optim.AdamW(model.parameters(), lr=self.learning_rate)\n        criterion = torch.nn.MSELoss()\n        init_model = self.get_init_model(dk.pair)\n        trainer = PyTorchModelTrainer(\n            model=model,\n            optimizer=optimizer,\n            criterion=criterion,\n            device=self.device,\n            init_model=init_model,\n            target_tensor_type=torch.float,\n            **self.trainer_kwargs,\n        )\n        trainer.fit(data_dictionary)\n        return trainer\n```\n\n----------------------------------------\n\nTITLE: Displaying FreqTrade CLI Usage and Commands\nDESCRIPTION: This snippet shows the usage syntax and available commands for the FreqTrade CLI. It includes positional arguments for various functionalities such as trading, data management, backtesting, configuration, and analysis.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/main.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade [-h] [-V]\n                 {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n                 ...\n\nFree, open source crypto trading bot\n\npositional arguments:\n  {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n    trade               Trade module.\n    create-userdir      Create user-data directory.\n    new-config          Create new config\n    show-config         Show resolved config\n    new-strategy        Create new strategy\n    download-data       Download backtesting data.\n    convert-data        Convert candle (OHLCV) data from one format to\n                        another.\n    convert-trade-data  Convert trade data from one format to another.\n    trades-to-ohlcv     Convert trade data to OHLCV data.\n    list-data           List downloaded data.\n    backtesting         Backtesting module.\n    backtesting-show    Show past Backtest results\n    backtesting-analysis\n                        Backtest Analysis module.\n    edge                Edge module.\n    hyperopt            Hyperopt module.\n    hyperopt-list       List Hyperopt results\n    hyperopt-show       Show details of Hyperopt results\n    list-exchanges      Print available exchanges.\n    list-markets        Print markets on exchange.\n    list-pairs          Print pairs on exchange.\n    list-strategies     Print available strategies.\n    list-hyperoptloss   Print available hyperopt loss functions.\n    list-freqaimodels   Print available freqAI models.\n    list-timeframes     Print available timeframes for the exchange.\n    show-trades         Show trades.\n    test-pairlist       Test your pairlist configuration.\n    convert-db          Migrate database to different system\n    install-ui          Install FreqUI\n    plot-dataframe      Plot candles with indicators.\n    plot-profit         Generate plot showing profits.\n    webserver           Webserver module.\n    strategy-updater    updates outdated strategy files to the current version\n    lookahead-analysis  Check for potential look ahead bias.\n    recursive-analysis  Check for potential recursive formula issue.\n\noptions:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal ROI Settings in JSON\nDESCRIPTION: JSON configuration for minimal ROI settings with exit conditions at different time intervals with corresponding profit thresholds.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"minimal_roi\": {\n    \"40\": 0.0,    # Exit after 40 minutes if the profit is not negative\n    \"30\": 0.01,   # Exit after 30 minutes if there is at least 1% profit\n    \"20\": 0.02,   # Exit after 20 minutes if there is at least 2% profit\n    \"0\":  0.04    # Exit immediately if there is at least 4% profit\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring VolatilityFilter in Freqtrade (JSON)\nDESCRIPTION: This snippet shows the configuration for the VolatilityFilter in Freqtrade. It removes pairs if the average volatility over the specified lookback period is outside the defined volatility range. The filter results are cached for the specified refresh period.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"VolatilityFilter\",\n        \"lookback_days\": 10,\n        \"min_volatility\": 0.05,\n        \"max_volatility\": 0.50,\n        \"refresh_period\": 86400\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Settings in JSON for Freqtrade\nDESCRIPTION: This JSON snippet demonstrates how to configure webhook settings in Freqtrade. It includes settings for various trading events such as entry, exit, and status updates. The configuration uses IFTTT as an example webhook service.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://maker.ifttt.com/trigger/<YOUREVENT>/with/key/<YOURKEY>/\",\n        \"entry\": {\n            \"value1\": \"Buying {pair}\",\n            \"value2\": \"limit {limit:8f}\",\n            \"value3\": \"{stake_amount:8f} {stake_currency}\"\n        },\n        \"entry_cancel\": {\n            \"value1\": \"Cancelling Open Buy Order for {pair}\",\n            \"value2\": \"limit {limit:8f}\",\n            \"value3\": \"{stake_amount:8f} {stake_currency}\"\n        },\n         \"entry_fill\": {\n            \"value1\": \"Buy Order for {pair} filled\",\n            \"value2\": \"at {open_rate:8f}\",\n            \"value3\": \"\"\n        },\n        \"exit\": {\n            \"value1\": \"Exiting {pair}\",\n            \"value2\": \"limit {limit:8f}\",\n            \"value3\": \"profit: {profit_amount:8f} {stake_currency} ({profit_ratio})\"\n        },\n        \"exit_cancel\": {\n            \"value1\": \"Cancelling Open Exit Order for {pair}\",\n            \"value2\": \"limit {limit:8f}\",\n            \"value3\": \"profit: {profit_amount:8f} {stake_currency} ({profit_ratio})\"\n        },\n        \"exit_fill\": {\n            \"value1\": \"Exit Order for {pair} filled\",\n            \"value2\": \"at {close_rate:8f}.\",\n            \"value3\": \"\"\n        },\n        \"status\": {\n            \"value1\": \"Status: {status}\",\n            \"value2\": \"\",\n            \"value3\": \"\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DBSCAN for Outlier Detection in FreqAI\nDESCRIPTION: Adds the DataSieveDBSCAN step to the feature pipeline by setting use_DBSCAN_to_remove_outliers to true. DBSCAN is an unsupervised clustering algorithm that identifies outliers as data points that don't belong to any cluster based on density criteria.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-feature-engineering.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"freqai\": {\n        \"feature_parameters\" : {\n            \"use_DBSCAN_to_remove_outliers\": true\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling WebSockets in Exchange Configuration\nDESCRIPTION: JSON configuration to disable websocket connections for an exchange. This can be useful when troubleshooting connection issues, as the bot will fall back to REST API calls.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    // ...\n    \"enable_ws\": false,\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Trade History Data from Kraken\nDESCRIPTION: Example showing how to download historical trades data from Kraken exchange for specific trading pairs over a defined period using the download-data command with trades option.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade download-data --exchange kraken --pairs XRP/EUR ETH/EUR --days 20 --dl-trades\n```\n\n----------------------------------------\n\nTITLE: Configuring Principal Component Analysis in FreqAI\nDESCRIPTION: Activates Principal Component Analysis for dimensionality reduction in the feature set. PCA reduces the number of features while maintaining 99.9% of the explained variance, making model training faster and potentially more up-to-date.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-feature-engineering.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"freqai\": {\n        \"feature_parameters\" : {\n            \"principal_component_analysis\": true\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Imported Configuration File with Defaults\nDESCRIPTION: Example of an imported configuration file containing default values that can be overridden by the main configuration. This allows reusing common configuration settings across multiple bot instances.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"max_open_trades\": 10,\n    \"stake_amount\": \"unlimited\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Book for Binance Futures\nDESCRIPTION: Required configuration for Binance Futures to use the order book instead of ticker data, which is not available for futures markets.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"entry_pricing\": {\n      \"use_order_book\": true,\n      \"order_book_top\": 1,\n      \"check_depth_of_market\": {\n          \"enabled\": false,\n          \"bids_to_ask_delta\": 1\n      }\n  },\n  \"exit_pricing\": {\n      \"use_order_book\": true,\n      \"order_book_top\": 1\n  },\n```\n\n----------------------------------------\n\nTITLE: FreqTrade Recursive Analysis Command Usage\nDESCRIPTION: The command signature and arguments for the 'recursive-analysis' command in FreqTrade. This command allows for recursive analysis of trading strategies with various parameters including timeframes, pairs, and strategy configurations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/recursive-analysis.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade recursive-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [-p PAIRS [PAIRS ...]]\n                                    [--startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Exchange Parameters in Freqtrade\nDESCRIPTION: JSON configuration example showing how to override default exchange behavior by setting custom parameters like order_time_in_force and ohlcv_candle_limit for the Kraken exchange.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"kraken\",\n    \"_ft_has_params\": {\n        \"order_time_in_force\": [\"GTC\", \"FOK\"],\n        \"ohlcv_candle_limit\": 200\n        }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Telegram Notification Settings for Freqtrade\nDESCRIPTION: Complete JSON configuration for controlling Telegram notification verbosity in Freqtrade. Demonstrates how to configure different notification types (on/silent/off) for various trading events including entries, exits, fills, and protection triggers.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"telegram\": {\n    \"enabled\": true,\n    \"token\": \"your_telegram_token\",\n    \"chat_id\": \"your_telegram_chat_id\",\n    \"allow_custom_messages\": true,\n    \"notification_settings\": {\n        \"status\": \"silent\",\n        \"warning\": \"on\",\n        \"startup\": \"off\",\n        \"entry\": \"silent\",\n        \"entry_fill\": \"on\",\n        \"entry_cancel\": \"silent\",\n        \"exit\": {\n            \"roi\": \"silent\",\n            \"emergency_exit\": \"on\",\n            \"force_exit\": \"on\",\n            \"exit_signal\": \"silent\",\n            \"trailing_stop_loss\": \"on\",\n            \"stop_loss\": \"on\",\n            \"stoploss_on_exchange\": \"on\",\n            \"custom_exit\": \"silent\",  // custom_exit without specifying an exit reason\n            \"partial_exit\": \"on\",\n            // \"custom_exit_message\": \"silent\",  // Disable individual custom exit reasons\n            \"*\": \"off\"  // Disable all other exit reasons\n        },\n        // \"exit\": \"off\",  // Simplistic configuration to disable all exit messages\n        \"exit_cancel\": \"on\",\n        \"exit_fill\": \"off\",\n        \"protection_trigger\": \"off\",\n        \"protection_trigger_global\": \"on\",\n        \"strategy_msg\": \"off\",\n        \"show_candle\": \"off\"\n    },\n    \"reload\": true,\n    \"balance_dust_level\": 0.01\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Hyperopt Base Estimator in Freqtrade\nDESCRIPTION: Demonstrates how to customize the machine learning estimator used in hyperopt by implementing the generate_estimator method. Includes examples for using built-in estimators like Random Forest as well as customized Gaussian Process Regressors.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    class HyperOpt:\n        def generate_estimator(dimensions: List['Dimension'], **kwargs):\n            return \"RF\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FreqAI Model Identifier and Retraining Settings\nDESCRIPTION: JSON configuration snippet for specifying a FreqAI model identifier and setting the live retraining frequency. This allows starting from a saved model while periodically retraining to adapt to changing market conditions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"freqai\": {\n        \"identifier\": \"example\",\n        \"live_retrain_hours\": 0.5\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring PerformanceFilter in Freqtrade\nDESCRIPTION: JSON configuration for PerformanceFilter, which sorts pairs by past trade performance. It allows setting a time window in minutes and a minimum profit threshold.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    // ...\n    {\n        \"method\": \"PerformanceFilter\",\n        \"minutes\": 1440,  // rolling 24h\n        \"min_profit\": 0.01  // minimal profit 1%\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring External Message Consumer in Freqtrade\nDESCRIPTION: JSON configuration for setting up a consumer instance that subscribes to a producer's messages. This defines connection parameters and behavior settings for receiving analyzed dataframes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/producer-consumer.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    //...\n   \"external_message_consumer\": {\n        \"enabled\": true,\n        \"producers\": [\n            {\n                \"name\": \"default\", // This can be any name you'd like, default is \"default\"\n                \"host\": \"127.0.0.1\", // The host from your producer's api_server config\n                \"port\": 8080, // The port from your producer's api_server config\n                \"secure\": false, // Use a secure websockets connection, default false\n                \"ws_token\": \"sercet_Ws_t0ken\" // The ws_token from your producer's api_server config\n            }\n        ],\n        // The following configurations are optional, and usually not required\n        // \"wait_timeout\": 300,\n        // \"ping_timeout\": 10,\n        // \"sleep_time\": 10,\n        // \"remove_entry_exit_signals\": false,\n        // \"message_size_limit\": 8\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Interactive Candlestick Charts in Python\nDESCRIPTION: Creates an interactive candlestick chart with indicators and trade overlays using Freqtrade's plotting module. It filters data to a specific date range and trading pair for efficient visualization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.plot.plotting import generate_candlestick_graph\n\n\n# Limit graph period to keep plotly quick and reactive\n\n# Filter trades to one pair\ntrades_red = trades.loc[trades[\"pair\"] == pair]\n\ndata_red = data[\"2019-06-01\":\"2019-06-10\"]\n# Generate candlestick graph\ngraph = generate_candlestick_graph(\n    pair=pair,\n    data=data_red,\n    trades=trades_red,\n    indicators1=[\"sma20\", \"ema50\", \"ema55\"],\n    indicators2=[\"rsi\", \"macd\", \"macdsignal\", \"macdhist\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Hyperopting Dissimilarity Index Threshold in FreqAI\nDESCRIPTION: Example of a hyperoptable parameter in FreqAI for the Dissimilarity Index (DI) threshold. It defines an integer parameter for the DI threshold and uses it to identify outliers in the dataframe.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndi_max = IntParameter(low=1, high=20, default=10, space='buy', optimize=True, load=True)\ndataframe['outlier'] = np.where(dataframe['DI_values'] > self.di_max.value/10, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Pair List in Freqtrade\nDESCRIPTION: Basic configuration for VolumePairList handler that selects trading pairs based on their trading volume. Supports volume thresholds and periodic refresh.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"max_value\": 8000000,\n        \"refresh_period\": 1800\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating a Secure WebSocket Token in Python\nDESCRIPTION: Demonstrates how to generate a secure token for WebSocket authentication using Python's secrets module. This token is used to authenticate connections to the WebSocket endpoint.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import secrets\n>>> secrets.token_urlsafe(25)\n'hZ-y58LXyX_HZ8O1cJzVyN6ePWrLpNQv4Q'\n```\n\n----------------------------------------\n\nTITLE: Running Hyperopt with Custom Data Directory in Freqtrade\nDESCRIPTION: Example command showing how to run hyperopt with a data directory other than the default, which allows using alternate historical data sets for optimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt --strategy <strategyname> --timerange 20210101-20210201\n```\n\n----------------------------------------\n\nTITLE: Configuring Expired Candle Handling in JSON\nDESCRIPTION: JSON configuration for ignoring buy signals on expired candles after a specified time period (in seconds).\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n  {\n    //...\n    \"ignore_buying_expired_candle_after\": 300,\n    // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Running FreqAI with PyTorch MLP Regressor Model from Command Line\nDESCRIPTION: This bash command demonstrates how to start freqtrade with FreqAI using a PyTorch MLP regressor model for a regression task. It specifies the configuration file, strategy, FreqAI model type, and strategy path for execution.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --config config_examples/config_freqai.example.json --strategy FreqaiExampleStrategy --freqaimodel PyTorchMLPRegressor --strategy-path freqtrade/templates\n```\n\n----------------------------------------\n\nTITLE: Running Backtesting with Detailed Timeframe in Freqtrade\nDESCRIPTION: Command to run backtesting with an improved accuracy using a detailed timeframe. This approach loads both the main timeframe (1h) and a more granular timeframe (5m) to better simulate intra-candle price movements.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy AwesomeStrategy --timeframe 1h --timeframe-detail 5m\n```\n\n----------------------------------------\n\nTITLE: FreqTrade New Strategy CLI Usage\nDESCRIPTION: Command line syntax and options for creating new trading strategies in FreqTrade. Allows specifying user directory, strategy name, lookup path, and template type (minimal, full, or advanced).\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/new-strategy.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade new-strategy [-h] [--userdir PATH] [-s NAME]\n                              [--strategy-path PATH]\n                              [--template {full,minimal,advanced}]\n\noptions:\n  -h, --help            show this help message and exit\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n  -s NAME, --strategy NAME\n                        Specify strategy class name which will be used by the\n                        bot.\n  --strategy-path PATH  Specify additional strategy lookup path.\n  --template {full,minimal,advanced}\n                        Use a template which is either `minimal`, `full`\n                        (containing multiple sample indicators) or `advanced`.\n                        Default: `full`.\n```\n\n----------------------------------------\n\nTITLE: Optimizing max_entry_position_adjustment in Freqtrade Strategy\nDESCRIPTION: Example of how to optimize the max_entry_position_adjustment parameter using CategoricalParameter in the buy space. This allows testing different values for position adjustment during hyperoptimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pandas import DataFrame\nfrom functools import reduce\n\nimport talib.abstract as ta\n\nfrom freqtrade.strategy import (BooleanParameter, CategoricalParameter, DecimalParameter, \n                                IStrategy, IntParameter)\nimport freqtrade.vendor.qtpylib.indicators as qtpylib\n\nclass MyAwesomeStrategy(IStrategy):\n    stoploss = -0.05\n    timeframe = '15m'\n\n    # Define the parameter spaces\n    max_epa = CategoricalParameter([-1, 0, 1, 3, 5, 10], default=1, space=\"buy\", optimize=True)\n\n    @property\n    def max_entry_position_adjustment(self):\n        return self.max_epa.value\n        \n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Indicators for Hyperopt Strategy in Freqtrade\nDESCRIPTION: Example of a strategy class showing how to implement the populate_indicators method to generate technical indicators that will be used for hyperopt parameter optimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Generate all indicators used by the strategy\n        \"\"\"\n        dataframe['adx'] = ta.ADX(dataframe)\n        dataframe['rsi'] = ta.RSI(dataframe)\n        macd = ta.MACD(dataframe)\n        dataframe['macd'] = macd['macd']\n        dataframe['macdsignal'] = macd['macdsignal']\n        dataframe['macdhist'] = macd['macdhist']\n\n        bollinger = ta.BBANDS(dataframe, timeperiod=20, nbdevup=2.0, nbdevdn=2.0)\n        dataframe['bb_lowerband'] = bollinger['lowerband']\n        dataframe['bb_middleband'] = bollinger['middleband']\n        dataframe['bb_upperband'] = bollinger['upperband']\n        return dataframe\n```\n\n----------------------------------------\n\nTITLE: Plotting Equity Line with Plotly in Python\nDESCRIPTION: Creates and displays an equity line chart showing the cumulative daily profit over the backtest period. It uses Plotly Express to generate an interactive visualization of trading performance.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Plotting equity line (starting with 0 on day 1 and adding daily profit for each backtested day)\n\nimport pandas as pd\nimport plotly.express as px\n\nfrom freqtrade.configuration import Configuration\nfrom freqtrade.data.btanalysis import load_backtest_stats\n\n\n# strategy = 'SampleStrategy'\n# config = Configuration.from_files([\"user_data/config.json\"])\n# backtest_dir = config[\"user_data_dir\"] / \"backtest_results\"\n\nstats = load_backtest_stats(backtest_dir)\nstrategy_stats = stats[\"strategy\"][strategy]\n\ndf = pd.DataFrame(columns=[\"dates\", \"equity\"], data=strategy_stats[\"daily_profit\"])\ndf[\"equity_daily\"] = df[\"equity\"].cumsum()\n\nfig = px.line(df, x=\"dates\", y=\"equity_daily\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Loading and Running a Trading Strategy in Python\nDESCRIPTION: Loads a trading strategy using Freqtrade's StrategyResolver, initializes it with a DataProvider, and runs the strategy's analyze_ticker method on historical data to generate buy/sell signals.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Load strategy using values set above\nfrom freqtrade.data.dataprovider import DataProvider\nfrom freqtrade.resolvers import StrategyResolver\n\n\nstrategy = StrategyResolver.load_strategy(config)\nstrategy.dp = DataProvider(config, None, None)\nstrategy.ft_bot_start()\n\n# Generate buy/sell signals using strategy\ndf = strategy.analyze_ticker(candles, {\"pair\": pair})\ndf.tail()\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Parameters in Freqtrade Strategy\nDESCRIPTION: Example of how to define hyperopt parameters dynamically in a strategy. The parameter is initialized in the bot_start callback method and will be available for optimization after the bot starts.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n\n    def bot_start(self, **kwargs) -> None:\n        self.buy_adx = IntParameter(20, 30, default=30, optimize=True)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Retries and Timeout in Freqtrade\nDESCRIPTION: This JSON snippet demonstrates how to configure webhook retries, retry delay, and timeout in Freqtrade. It sets the number of retries, delay between retries, and the timeout for webhook requests.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURHOOKURL>\",\n        \"timeout\": 10,\n        \"retries\": 3,\n        \"retry_delay\": 0.2,\n        \"status\": {\n            \"status\": \"Status: {status}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Required Imports for Freqtrade Strategy in Python\nDESCRIPTION: This code block contains all the essential imports required for developing a Freqtrade trading strategy. It includes core Python libraries like numpy and pandas, datetime handling, typing, and Freqtrade-specific imports such as IStrategy, decorator functions, hyperopt parameters, and strategy helper functions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/strategy-imports.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# flake8: noqa: F401\n# isort: skip_file\n# --- Do not remove these imports ---\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta, timezone\nfrom pandas import DataFrame\nfrom typing import Dict, Optional, Union, Tuple\n\nfrom freqtrade.strategy import (\n    IStrategy,\n    Trade, \n    Order,\n    PairLocks,\n    informative,  # @informative decorator\n    # Hyperopt Parameters\n    BooleanParameter,\n    CategoricalParameter,\n    DecimalParameter,\n    IntParameter,\n    RealParameter,\n    # timeframe helpers\n    timeframe_to_minutes,\n    timeframe_to_next_date,\n    timeframe_to_prev_date,\n    # Strategy helper functions\n    merge_informative_pair,\n    stoploss_from_absolute,\n    stoploss_from_open,\n)\n\n# --------------------------------\n# Add your lib to import here\nimport talib.abstract as ta\nfrom technical import qtpylib\n```\n\n----------------------------------------\n\nTITLE: Implementing CooldownPeriod Protection in Python\nDESCRIPTION: Sets up CooldownPeriod protection to prevent immediate re-entry after trade exit. Implements a 2-candle cooling period after each trade closure.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/protections.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef protections(self):\n    return  [\n        {\n            \"method\": \"CooldownPeriod\",\n            \"stop_duration_candles\": 2\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Optimizing PyTorch Models with torch.compile()\nDESCRIPTION: Demonstrates how to use torch.compile() to improve PyTorch model performance for specific GPU hardware. This optimization technique can enhance execution speed but may result in less informative error messages due to the removal of eager execution.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n        model = PyTorchMLPModel(\n            input_dim=n_features,\n            output_dim=1,\n            **self.model_kwargs\n        )\n        model.to(self.device)\n        model = torch.compile(model)\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Messages for Webhook in Freqtrade\nDESCRIPTION: This JSON snippet shows how to enable custom messages for webhooks in Freqtrade. It sets the 'allow_custom_messages' option to true and defines a format for strategy messages.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURHOOKURL>\",\n        \"allow_custom_messages\": true,\n        \"strategy_msg\": {\n            \"status\": \"StrategyMessage: {msg}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MaxDrawdown Protection in Python\nDESCRIPTION: Shows MaxDrawdown protection setup that monitors overall drawdown. Stops trading for 12 candles if drawdown exceeds 20% within the last 48 candles, requiring minimum 20 trades.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/protections.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef protections(self):\n    return  [\n        {\n            \"method\": \"MaxDrawdown\",\n            \"lookback_period_candles\": 48,\n            \"trade_limit\": 20,\n            \"stop_duration_candles\": 12,\n            \"max_allowed_drawdown\": 0.2\n        },\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating Profit Distribution Histogram in Python\nDESCRIPTION: Generates a distribution plot showing the frequency of different profit ratios across all trades. This visualization helps analyze the profitability distribution pattern of the trading strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\n\nhist_data = [trades.profit_ratio]\ngroup_labels = [\"profit_ratio\"]  # name of the dataset\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.01)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Pair List with Lookback Days\nDESCRIPTION: Advanced configuration for VolumePairList using historical candle data over a specified number of days to calculate volume.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"refresh_period\": 86400,\n        \"lookback_days\": 7\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Data Download Command - Bash\nDESCRIPTION: Simple command to download historical candle data from Binance using a config file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade download-data --exchange binance\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperoptable Parameters in Freqtrade Strategy\nDESCRIPTION: This snippet demonstrates how to define various types of hyperoptable parameters (decimal, integer, boolean, categorical) within a Freqtrade strategy class. These parameters will be optimized by Freqtrade's hyperopt functionality.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    buy_adx = DecimalParameter(20, 40, decimals=1, default=30.1, space=\"buy\")\n    buy_rsi = IntParameter(20, 40, default=30, space=\"buy\")\n    buy_adx_enabled = BooleanParameter(default=True, space=\"buy\")\n    buy_rsi_enabled = CategoricalParameter([True, False], default=False, space=\"buy\")\n    buy_trigger = CategoricalParameter([\"bb_lower\", \"macd_cross_signal\"], default=\"bb_lower\", space=\"buy\")\n```\n\n----------------------------------------\n\nTITLE: Applying Hyperopt Parameters to a Strategy Class\nDESCRIPTION: Example of how to implement Hyperopt results in a custom strategy class. The buy parameters are pasted into the strategy class for automatic loading.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    # Buy hyperspace params:\n    buy_params = {\n        'buy_adx': 44,\n        'buy_rsi': 29,\n        'buy_adx_enabled': False,\n        'buy_rsi_enabled': True,\n        'buy_trigger': 'bb_lower'\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Freqtrade Environment in Python\nDESCRIPTION: Initializes a Freqtrade configuration object and sets up basic configuration parameters including timeframe, strategy name, and data location. This provides the foundation for further analysis.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.configuration import Configuration\n\n\n# Customize these according to your needs.\n\n# Initialize empty configuration object\nconfig = Configuration.from_files([])\n# Optionally (recommended), use existing configuration file\n# config = Configuration.from_files([\"user_data/config.json\"])\n\n# Define some constants\nconfig[\"timeframe\"] = \"5m\"\n# Name of the strategy class\nconfig[\"strategy\"] = \"SampleStrategy\"\n# Location of the data\ndata_location = config[\"datadir\"]\n# Pair to analyze - Only use one pair here\npair = \"BTC/USDT\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Trailing Stop Loss in Freqtrade\nDESCRIPTION: This code snippet shows how to enable trailing stop loss in Freqtrade, which automatically adjusts the stop loss as the asset price increases.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    stoploss = -0.10\n    trailing_stop = True\n```\n\n----------------------------------------\n\nTITLE: Understanding Hyperopt Results Format\nDESCRIPTION: Example of Hyperopt optimization results showing the best parameter set found. This includes buy parameters and performance metrics.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nBest result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180.4 mins. Objective: 1.94367\n\n    # Buy hyperspace params:\n    buy_params = {\n        'buy_adx': 44,\n        'buy_rsi': 29,\n        'buy_adx_enabled': False,\n        'buy_rsi_enabled': True,\n        'buy_trigger': 'bb_lower'\n    }\n```\n\n----------------------------------------\n\nTITLE: Plotting Multiple Pairs in Freqtrade\nDESCRIPTION: Demonstrates how to plot dataframes for multiple trading pairs simultaneously using the plot-dataframe command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH XRP/ETH\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Webhook in Freqtrade\nDESCRIPTION: This JSON snippet demonstrates how to configure a Discord webhook in Freqtrade. It includes settings for exit_fill and entry_fill notifications, specifying the information to be included in each notification type.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"discord\": {\n    \"enabled\": true,\n    \"webhook_url\": \"https://discord.com/api/webhooks/<Your webhook URL ...>\",\n    \"exit_fill\": [\n        {\"Trade ID\": \"{trade_id}\"},\n        {\"Exchange\": \"{exchange}\"},\n        {\"Pair\": \"{pair}\"},\n        {\"Direction\": \"{direction}\"},\n        {\"Open rate\": \"{open_rate}\"},\n        {\"Close rate\": \"{close_rate}\"},\n        {\"Amount\": \"{amount}\"},\n        {\"Open date\": \"{open_date:%Y-%m-%d %H:%M:%S}\"},\n        {\"Close date\": \"{close_date:%Y-%m-%d %H:%M:%S}\"},\n        {\"Profit\": \"{profit_amount} {stake_currency}\"},\n        {\"Profitability\": \"{profit_ratio:.2%}\"},\n        {\"Enter tag\": \"{enter_tag}\"},\n        {\"Exit Reason\": \"{exit_reason}\"},\n        {\"Strategy\": \"{strategy}\"},\n        {\"Timeframe\": \"{timeframe}\"}\n    ],\n    \"entry_fill\": [\n        {\"Trade ID\": \"{trade_id}\"},\n        {\"Exchange\": \"{exchange}\"},\n        {\"Pair\": \"{pair}\"},\n        {\"Direction\": \"{direction}\"},\n        {\"Open rate\": \"{open_rate}\"},\n        {\"Amount\": \"{amount}\"},\n        {\"Open date\": \"{open_date:%Y-%m-%d %H:%M:%S}\"},\n        {\"Enter tag\": \"{enter_tag}\"},\n        {\"Strategy\": \"{strategy} {timeframe}\"}\n    ]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FreqTrade API for Docker in JSON\nDESCRIPTION: JSON configuration for setting up the FreqTrade API to listen to incoming connections when running in a Docker container.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"0.0.0.0\",\n        \"listen_port\": 8080,\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Analyzing Orderflow Data in Freqtrade Strategy\nDESCRIPTION: Python code example demonstrating how to access and utilize orderflow data in a Freqtrade strategy, including calculating cumulative delta from trade data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-orderflow.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    # Calculating cumulative delta\n    dataframe[\"cum_delta\"] = cumulative_delta(dataframe[\"delta\"])\n    # Accessing total trades\n    total_trades = dataframe[\"total_trades\"]\n    ...\n\ndef cumulative_delta(delta: Series):\n    cumdelta = delta.cumsum()\n    return cumdelta\n```\n\n----------------------------------------\n\nTITLE: Configure Freqtrade Environment\nDESCRIPTION: Initializes Freqtrade configuration with basic settings for timeframe, strategy, and data location for analysis.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/freqtrade/templates/strategy_analysis_example.ipynb#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.configuration import Configuration\n\nconfig = Configuration.from_files([])\nconfig[\"timeframe\"] = \"5m\"\nconfig[\"strategy\"] = \"SampleStrategy\"\ndata_location = config[\"datadir\"]\npair = \"BTC/USDT\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Strategy Comparison Backtesting\nDESCRIPTION: Compare multiple trading strategies in a single backtesting run.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy-list SampleStrategy1 AwesomeStrategy --timeframe 5m\n```\n\n----------------------------------------\n\nTITLE: Running Backtesting with Docker\nDESCRIPTION: Command to run backtesting with the SampleStrategy using Docker, specifying a timerange and 5-minute timeframe intervals.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm freqtrade backtesting --config user_data/config.json --strategy SampleStrategy --timerange 20190801-20191001 -i 5m\n```\n\n----------------------------------------\n\nTITLE: Using FreqTrade Hyperopt-List Command with Options\nDESCRIPTION: Command syntax for the 'hyperopt-list' feature which shows hyperparameter optimization results. The command supports various filtering options to narrow down results based on metrics like trade count, profitability, and time, with options for output formatting including JSON export and CSV export.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/hyperopt-list.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade hyperopt-list [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [--min-trades INT]\n                               [--max-trades INT] [--min-avg-time FLOAT]\n                               [--max-avg-time FLOAT] [--min-avg-profit FLOAT]\n                               [--max-avg-profit FLOAT]\n                               [--min-total-profit FLOAT]\n                               [--max-total-profit FLOAT]\n                               [--min-objective FLOAT] [--max-objective FLOAT]\n                               [--print-json] [--no-details]\n                               [--hyperopt-filename FILENAME]\n                               [--export-csv FILE]\n```\n\n----------------------------------------\n\nTITLE: Loading Backtest Trade Data in Python\nDESCRIPTION: Loads and analyzes trade data from backtest results. It creates a trades dataframe and performs group analysis to count exit reasons by trading pair.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Load backtested trades as dataframe\ntrades = load_backtest_data(backtest_dir)\n\n# Show value-counts per pair\ntrades.groupby(\"pair\")[\"exit_reason\"].value_counts()\n```\n\n----------------------------------------\n\nTITLE: Configuring Futures Trading Mode in Freqtrade\nDESCRIPTION: JSON configuration for enabling futures trading mode with isolated margin in Freqtrade. This setting is required to enable shorting and leverage capabilities.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/leverage.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"trading_mode\": \"futures\",\n\"margin_mode\": \"isolated\"\n```\n\n----------------------------------------\n\nTITLE: Load Historical Trading Data\nDESCRIPTION: Loads historical trading data for a specific pair using Freqtrade's data loading utilities.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/freqtrade/templates/strategy_analysis_example.ipynb#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.data.history import load_pair_history\nfrom freqtrade.enums import CandleType\n\ncandles = load_pair_history(\n    datadir=data_location,\n    timeframe=config[\"timeframe\"],\n    pair=pair,\n    data_format=\"json\",\n    candle_type=CandleType.SPOT,\n)\n\nprint(f\"Loaded {len(candles)} rows of data for {pair} from {data_location}\")\ncandles.head()\n```\n\n----------------------------------------\n\nTITLE: Configuring RemotePairList in Freqtrade\nDESCRIPTION: Configuration for RemotePairList that fetches a pairlist from a remote server. It includes options for whitelisting, filtering, rate limiting, and failure handling with a bearer token for authentication.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"RemotePairList\",\n        \"mode\": \"whitelist\",\n        \"processing_mode\": \"filter\",\n        \"pairlist_url\": \"https://example.com/pairlist\",\n        \"number_assets\": 10,\n        \"refresh_period\": 1800,\n        \"keep_pairlist_on_failure\": true,\n        \"read_timeout\": 60,\n        \"bearer_token\": \"my-bearer-token\",\n        \"save_to_file\": \"user_data/filename.json\" \n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring minimal ROI in Freqtrade Strategy JSON\nDESCRIPTION: Example configuration for minimal_roi parameter in a Freqtrade strategy. This setting determines the minimum profit percentage required for the bot to exit a trade. A value of 0.01 means the bot will exit when profit reaches 1%.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"minimal_roi\": {\n    \"0\":  0.01\n},\n```\n\n----------------------------------------\n\nTITLE: Freqtrade Download Data CLI Usage\nDESCRIPTION: Command line usage syntax and options for the freqtrade download-data command. Includes parameters for specifying pairs, timeframes, data formats, and other download configurations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/download-data.md#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: freqtrade download-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH]\n                               [-p PAIRS [PAIRS ...]] [--pairs-file FILE]\n                               [--days INT] [--new-pairs-days INT]\n                               [--include-inactive-pairs]\n                               [--timerange TIMERANGE] [--dl-trades]\n                               [--convert] [--exchange EXCHANGE]\n                               [-t TIMEFRAMES [TIMEFRAMES ...]] [--erase]\n                               [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                               [--data-format-trades {json,jsongz,feather,parquet}]\n                               [--trading-mode {spot,margin,futures}]\n                               [--prepend]\n\noptions:\n  -h, --help            show this help message and exit\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        Limit command to these pairs. Pairs are space-\n                        separated.\n  --pairs-file FILE     File containing a list of pairs. Takes precedence over\n                        --pairs or pairs configured in the configuration.\n  --days INT            Download data for given number of days.\n  --new-pairs-days INT  Download data of new pairs for given number of days.\n                        Default: `None`.\n  --include-inactive-pairs\n                        Also download data from inactive pairs.\n  --timerange TIMERANGE\n                        Specify what timerange of data to use.\n  --dl-trades          Download trades instead of OHLCV data.\n  --convert            Convert downloaded trades to OHLCV data. Only\n                        applicable in combination with `--dl-trades`. Will be\n                        automatic for exchanges which don't have historic\n                        OHLCV (e.g. Kraken). If not provided, use `trades-to-\n                        ohlcv` to convert trades data to OHLCV data.\n  --exchange EXCHANGE   Exchange name. Only valid if no config is provided.\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        Specify which tickers to download. Space-separated\n                        list. Default: `1m 5m`.\n  --erase               Clean all existing data for the selected\n                        exchange/pairs/timeframes.\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        Storage format for downloaded candle (OHLCV) data.\n                        (default: `feather`).\n  --data-format-trades {json,jsongz,feather,parquet}\n                        Storage format for downloaded trades data. (default:\n                        `feather`).\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        Select Trading mode\n  --prepend             Allow data prepending. (Data-appending is disabled)\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Getting Total Open Trade Stakes in Python\nDESCRIPTION: Example showing how to retrieve the total stake amount currently in trades.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/trade-object.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.persistence import Trade\n\n# ...\nprofit = Trade.total_open_trades_stakes()\n```\n\n----------------------------------------\n\nTITLE: Running FreqAI Hyperopt with LightGBM Regressor\nDESCRIPTION: Command to run hyperopt for FreqAI using the LightGBM Regressor model. It specifies the loss function, strategy, model, configuration file, and timerange for optimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt --hyperopt-loss SharpeHyperOptLoss --strategy FreqaiExampleStrategy --freqaimodel LightGBMRegressor --strategy-path freqtrade/templates --config config_examples/config_freqai.example.json --timerange 20220428-20220507\n```\n\n----------------------------------------\n\nTITLE: Using the plot-profit Command in Freqtrade\nDESCRIPTION: The plot-profit command generates visualizations of trading profits from backtest results or database records. It offers various customization options including pair selection, timerange specification, data export, and visualization preferences.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/plot-profit.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-profit [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                             [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-p PAIRS [PAIRS ...]] [--timerange TIMERANGE]\n                             [--export {none,trades,signals}]\n                             [--export-filename PATH] [--db-url PATH]\n                             [--trade-source {DB,file}] [-i TIMEFRAME]\n                             [--auto-open]\n```\n\n----------------------------------------\n\nTITLE: Running FreqAI Backtesting with LightGBM Regressor\nDESCRIPTION: Command to execute FreqAI in backtesting mode with specified strategy, configuration, model, and timerange. This trains models for each pair in each backtesting window unless models with the same identifier already exist.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy FreqaiExampleStrategy --strategy-path freqtrade/templates --config config_examples/config_freqai.example.json --freqaimodel LightGBMRegressor --timerange 20210501-20210701\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Custom Export Filename\nDESCRIPTION: Run backtesting and export results to a specified filename.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy backtesting --export trades --export-filename=backtest_samplestrategy.json\n```\n\n----------------------------------------\n\nTITLE: Creating New Configuration Interactive Example\nDESCRIPTION: Demonstrates the interactive process of creating a new configuration file for Binance exchange with specific trading parameters.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade new-config --config user_data/config_binance.json\n\n? Do you want to enable Dry-run (simulated trades)?  Yes\n? Please insert your stake currency: BTC\n? Please insert your stake amount: 0.05\n? Please insert max_open_trades (Integer or -1 for unlimited open trades): 3\n? Please insert your desired timeframe (e.g. 5m): 5m\n? Please insert your display Currency (for reporting): USD\n? Select exchange  binance\n? Do you want to enable Telegram?  No\n```\n\n----------------------------------------\n\nTITLE: Analyzing Backtest Statistics in Python\nDESCRIPTION: Loads and analyzes detailed backtest statistics from previously generated backtest results. It accesses various performance metrics like results per pair, market change, maximum drawdown, and strategy comparison.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# You can get the full backtest statistics by using the following command.\n# This contains all information used to generate the backtest result.\nstats = load_backtest_stats(backtest_dir)\n\nstrategy = \"SampleStrategy\"\n# All statistics are available per strategy, so if `--strategy-list` was used during backtest,\n# this will be reflected here as well.\n# Example usages:\nprint(stats[\"strategy\"][strategy][\"results_per_pair\"])\n# Get pairlist used for this backtest\nprint(stats[\"strategy\"][strategy][\"pairlist\"])\n# Get market change (average change of all pairs from start to end of the backtest period)\nprint(stats[\"strategy\"][strategy][\"market_change\"])\n# Maximum drawdown ()\nprint(stats[\"strategy\"][strategy][\"max_drawdown_abs\"])\n# Maximum drawdown start and end\nprint(stats[\"strategy\"][strategy][\"drawdown_start\"])\nprint(stats[\"strategy\"][strategy][\"drawdown_end\"])\n\n\n# Get strategy comparison (only relevant if multiple strategies were compared)\nprint(stats[\"strategy_comparison\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Trailing Stop Loss in Freqtrade\nDESCRIPTION: This code snippet demonstrates how to configure an advanced trailing stop loss in Freqtrade with different positive loss values and offsets.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    stoploss = -0.10\n    trailing_stop = True\n    trailing_stop_positive = 0.02\n    trailing_stop_positive_offset = 0.0\n    trailing_only_offset_is_reached = False  # Default - not necessary for this example\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Configuration Files in JSON\nDESCRIPTION: Example of specifying additional configuration files within the main configuration file using the 'add_config_files' parameter. Files are resolved relative to the initial configuration file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"add_config_files\": [\n    \"config1.json\",\n    \"config-private.json\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using the Freqtrade List-Data Command in CLI\nDESCRIPTION: Displays the syntax and options for the 'list-data' command in Freqtrade. This command allows users to list available data files with various filtering options including exchange selection, pairs filtering, and data format specification.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-data.md#2025-04-15_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: freqtrade list-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n                           [--exchange EXCHANGE]\n                           [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                           [--data-format-trades {json,jsongz,feather,parquet}]\n                           [--trades] [-p PAIRS [PAIRS ...]]\n                           [--trading-mode {spot,margin,futures}]\n                           [--show-timerange]\n```\n\n----------------------------------------\n\nTITLE: Overriding Pre-defined Hyperopt Spaces in Freqtrade Strategy\nDESCRIPTION: Shows how to override default hyperopt spaces in a strategy by defining a nested HyperOpt class. Includes customization of stoploss space, ROI space with table generation, trailing stop parameters, and max open trades limits.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.optimize.space import Categorical, Dimension, Integer, SKDecimal\n\nclass MyAwesomeStrategy(IStrategy):\n    class HyperOpt:\n        # Define a custom stoploss space.\n        def stoploss_space():\n            return [SKDecimal(-0.05, -0.01, decimals=3, name='stoploss')]\n\n        # Define custom ROI space\n        def roi_space() -> List[Dimension]:\n            return [\n                Integer(10, 120, name='roi_t1'),\n                Integer(10, 60, name='roi_t2'),\n                Integer(10, 40, name='roi_t3'),\n                SKDecimal(0.01, 0.04, decimals=3, name='roi_p1'),\n                SKDecimal(0.01, 0.07, decimals=3, name='roi_p2'),\n                SKDecimal(0.01, 0.20, decimals=3, name='roi_p3'),\n            ]\n\n        def generate_roi_table(params: Dict) -> dict[int, float]:\n\n            roi_table = {}\n            roi_table[0] = params['roi_p1'] + params['roi_p2'] + params['roi_p3']\n            roi_table[params['roi_t3']] = params['roi_p1'] + params['roi_p2']\n            roi_table[params['roi_t3'] + params['roi_t2']] = params['roi_p1']\n            roi_table[params['roi_t3'] + params['roi_t2'] + params['roi_t1']] = 0\n\n            return roi_table\n\n        def trailing_space() -> List[Dimension]:\n            # All parameters here are mandatory, you can only modify their type or the range.\n            return [\n                # Fixed to true, if optimizing trailing_stop we assume to use trailing stop at all times.\n                Categorical([True], name='trailing_stop'),\n\n                SKDecimal(0.01, 0.35, decimals=3, name='trailing_stop_positive'),\n                # 'trailing_stop_positive_offset' should be greater than 'trailing_stop_positive',\n                # so this intermediate parameter is used as the value of the difference between\n                # them. The value of the 'trailing_stop_positive_offset' is constructed in the\n                # generate_trailing_params() method.\n                # This is similar to the hyperspace dimensions used for constructing the ROI tables.\n                SKDecimal(0.001, 0.1, decimals=3, name='trailing_stop_positive_offset_p1'),\n\n                Categorical([True, False], name='trailing_only_offset_is_reached'),\n        ]\n\n        # Define a custom max_open_trades space\n        def max_open_trades_space(self) -> List[Dimension]:\n            return [\n                Integer(-1, 10, name='max_open_trades'),\n            ]\n```\n\n----------------------------------------\n\nTITLE: Downloading Historical Trade Data for Backtesting in Freqtrade\nDESCRIPTION: Command line example showing how to download historical trade data for backtesting with orderflow analysis using the '--dl-trades' flag with the freqtrade download-data command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-orderflow.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade download-data -p BTC/USDT:USDT --timerange 20230101- --trading-mode futures --timeframes 5m --dl-trades\n```\n\n----------------------------------------\n\nTITLE: Configuring FreqTrade REST API in JSON\nDESCRIPTION: Sample JSON configuration for enabling and setting up the FreqTrade REST API. Includes settings for IP address, port, security credentials, and CORS origins.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"127.0.0.1\",\n        \"listen_port\": 8080,\n        \"verbosity\": \"error\",\n        \"enable_openapi\": false,\n        \"jwt_secret_key\": \"somethingrandom\",\n        \"CORS_origins\": [],\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\",\n        \"ws_token\": \"sercet_Ws_t0ken\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Backtesting Without Export\nDESCRIPTION: Execute backtesting without exporting results to file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy backtesting --export none --config config.json\n```\n\n----------------------------------------\n\nTITLE: Running Freqtrade Backtesting with Time Breakdown Options\nDESCRIPTION: Bash command to execute a backtest with daily and weekly breakdown analysis. This provides a more granular view of strategy performance across different time periods.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy MyAwesomeStrategy --breakdown day week\n```\n\n----------------------------------------\n\nTITLE: Installing Freqtrade on Raspberry Pi\nDESCRIPTION: Commands for installing Freqtrade on a Raspberry Pi running Raspbian, including system dependencies and pip configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install python3-venv libatlas-base-dev cmake curl\n# Use piwheels.org to speed up installation\nsudo echo \"[global]\\nextra-index-url=https://www.piwheels.org/simple\" > tee /etc/pip.conf\n\ngit clone https://github.com/freqtrade/freqtrade.git\ncd freqtrade\n\nbash setup.sh -i\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limits for Kraken Exchange\nDESCRIPTION: Configuration example for Kraken exchange with rate limiting enabled to avoid being banned. Sets a wait time of 3.1 seconds between API calls.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"kraken\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"ccxt_config\": {\"enableRateLimit\": true},\n    \"ccxt_async_config\": {\n        \"enableRateLimit\": true,\n        \"rateLimit\": 3100\n    },\n```\n\n----------------------------------------\n\nTITLE: Setting Default Targets for RL Strategy\nDESCRIPTION: Implementation of the set_freqai_targets function for a Reinforcement Learning strategy. Unlike Regressors, RL doesn't require specific targets, so a neutral value (0) is set in the action column as a placeholder.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef set_freqai_targets(self, dataframe, **kwargs) -> DataFrame:\n    \"\"\"\n    *Only functional with FreqAI enabled strategies*\n    Required function to set the targets for the model.\n    All targets must be prepended with `&` to be recognized by the FreqAI internals.\n\n    More details about feature engineering available:\n\n    https://www.freqtrade.io/en/latest/freqai-feature-engineering\n\n    :param df: strategy dataframe which will receive the targets\n    usage example: dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n    \"\"\"\n    # For RL, there are no direct targets to set. This is filler (neutral)\n    # until the agent sends an action.\n    dataframe[\"&-action\"] = 0\n    return dataframe\n```\n\n----------------------------------------\n\nTITLE: Downloading Historical Data with Docker\nDESCRIPTION: Command to download 5 days of historical data for ETH/BTC pair from Binance with 1-hour timeframe using Docker, storing the data in the user_data/data directory.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm freqtrade download-data --pairs ETH/BTC --exchange binance --days 5 -t 1h\n```\n\n----------------------------------------\n\nTITLE: Running Tensorboard for FreqAI Model Visualization\nDESCRIPTION: Command to start Tensorboard for visualizing FreqAI models. It specifies the log directory where the model data is stored, using the unique identifier from the FreqAI configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd freqtrade\ntensorboard --logdir user_data/models/unique-id\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Webserver Command Usage in CLI\nDESCRIPTION: This snippet shows the usage instructions and available options for the 'freqtrade webserver' command. It includes common arguments for verbosity, color output, logging, version display, configuration file specification, and data directory paths.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/webserver.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade webserver [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n\noptions:\n  -h, --help            show this help message and exit\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Updating Freqtrade Docker Installation\nDESCRIPTION: Commands to pull the latest Freqtrade Docker image and restart the containers. Note that the master tag is being replaced with stable for release images.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/updating.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Market Orders in Freqtrade\nDESCRIPTION: JSON configuration example for setting up market orders in Freqtrade. Shows how to configure both entry and exit orders as market orders with appropriate price_side settings for realistic pricing detection.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pricing.md#2025-04-15_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n  \"order_types\": {\n    \"entry\": \"market\",\n    \"exit\": \"market\"\n    // ...\n  },\n  \"entry_pricing\": {\n    \"price_side\": \"other\",\n    // ...\n  },\n  \"exit_pricing\":{\n    \"price_side\": \"other\",\n    // ...\n  },\n```\n\n----------------------------------------\n\nTITLE: Querying Trade History with get_trades_proxy in Python\nDESCRIPTION: Example demonstrating how to query trade history using the get_trades_proxy method to get trades for a specific pair and timeframe.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/trade-object.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.persistence import Trade\nfrom datetime import timedelta\n\n# ...\ntrade_hist = Trade.get_trades_proxy(pair='ETH/USDT', is_open=False, open_date=current_date - timedelta(days=2))\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Chat ID in Freqtrade\nDESCRIPTION: Example JSON snippet showing how to configure a Telegram group chat_id in the Freqtrade configuration. The chat_id must be provided as a string including the leading hyphen for group chats.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n   \"chat_id\": \"-1001332619709\"\n```\n\n----------------------------------------\n\nTITLE: Manual TA-Lib Installation\nDESCRIPTION: Commands for manually downloading, compiling, and installing TA-Lib from source.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz\ntar xvzf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\nsed -i.bak \"s|0.00000001|0.000000000000000001 |g\" src/ta_func/ta_utility.h\n./configure --prefix=/usr/local\nmake\nsudo make install\n# On debian based systems (debian, ubuntu, ...) - updating ldconfig might be necessary.\nsudo ldconfig  \ncd ..\nrm -rf ./ta-lib*\n```\n\n----------------------------------------\n\nTITLE: Loading Historical Market Data in Python\nDESCRIPTION: Loads historical price data for a specific trading pair using Freqtrade's data loading functions. It retrieves candlestick data based on the configured timeframe and displays basic information about the loaded data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Load data using values set above\nfrom freqtrade.data.history import load_pair_history\nfrom freqtrade.enums import CandleType\n\n\ncandles = load_pair_history(\n    datadir=data_location,\n    timeframe=config[\"timeframe\"],\n    pair=pair,\n    data_format=\"json\",  # Make sure to update this to your data\n    candle_type=CandleType.SPOT,\n)\n\n# Confirm success\nprint(f\"Loaded {len(candles)} rows of data for {pair} from {data_location}\")\ncandles.head()\n```\n\n----------------------------------------\n\nTITLE: Implementing LowProfitPairs Protection in Python\nDESCRIPTION: Configures LowProfitPairs protection to lock underperforming pairs. Stops trading pairs that don't achieve 2% profit within last 6 candles with minimum 2 trades.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/protections.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef protections(self):\n    return [\n        {\n            \"method\": \"LowProfitPairs\",\n            \"lookback_period_candles\": 6,\n            \"trade_limit\": 2,\n            \"stop_duration\": 60,\n            \"required_profit\": 0.02,\n            \"only_per_pair\": False,\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Setting Isolated Margin Mode in Freqtrade\nDESCRIPTION: JSON configuration for setting isolated margin mode, where each trading pair keeps collateral in a separate account. This is currently the only supported margin mode in Freqtrade.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/leverage.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"margin_mode\": \"isolated\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Freqtrade Configuration\nDESCRIPTION: Commands to create a user directory and generate a new configuration file for Freqtrade.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Step 1 - Initialize user folder\nfreqtrade create-userdir --userdir user_data\n\n# Step 2 - Create a new configuration file\nfreqtrade new-config --config user_data/config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Reinforcement Learning Parameters in JSON\nDESCRIPTION: JSON configuration for the Reinforcement Learner in FreqAI, specifying training cycles, model type, and reward parameters.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rl_config\": {\n        \"train_cycles\": 25,\n        \"add_state_info\": true,\n        \"max_trade_duration_candles\": 300,\n        \"max_training_drawdown_pct\": 0.02,\n        \"cpu_count\": 8,\n        \"model_type\": \"PPO\",\n        \"policy_type\": \"MlpPolicy\",\n        \"model_reward_parameters\": {\n            \"rr\": 1,\n            \"profit_aim\": 0.025\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FreqTrade List-Hyperoptloss CLI Usage\nDESCRIPTION: Command line interface help text showing the usage and available options for the list-hyperoptloss command. Includes both specific options for hyperopt loss function management and common arguments shared across FreqTrade commands.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-hyperoptloss.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade list-hyperoptloss [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--hyperopt-path PATH] [-1]\n\noptions:\n  -h, --help            show this help message and exit\n  --hyperopt-path PATH  Specify additional lookup path for Hyperopt Loss\n                        functions.\n  -1, --one-column      Print output in one column.\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color           Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Creating Freqtrade User Directory and Configuration with Docker\nDESCRIPTION: Commands to set up the initial Freqtrade directory structure, download the docker-compose file, pull the image, and create the user directory and configuration interactively.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ft_userdata\ncd ft_userdata/\n# Download the docker-compose file from the repository\ncurl https://raw.githubusercontent.com/freqtrade/freqtrade/stable/docker-compose.yml -o docker-compose.yml\n\n# Pull the freqtrade image\ndocker compose pull\n\n# Create user directory structure\ndocker compose run --rm freqtrade create-userdir --userdir user_data\n\n# Create configuration - Requires answering interactive questions\ndocker compose run --rm freqtrade new-config --config user_data/config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring MarketCapPairList in Freqtrade\nDESCRIPTION: JSON configuration for MarketCapPairList method, which sorts and filters pairs by their marketcap rank based on CoinGecko data. It allows setting the number of assets, maximum rank, refresh period, and specific categories.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"MarketCapPairList\",\n        \"number_assets\": 20,\n        \"max_rank\": 50,\n        \"refresh_period\": 86400,\n        \"categories\": [\"layer-1\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Closed Profit in Python\nDESCRIPTION: Example demonstrating how to get the total profit generated by the bot using get_total_closed_profit method.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/trade-object.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.persistence import Trade\n\n# ...\nprofit = Trade.get_total_closed_profit()\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Topic ID for Group Threads\nDESCRIPTION: JSON configuration showing how to set up a specific topic/thread in a Telegram group. The topic_id parameter allows the bot to respond to commands in a specific thread rather than the general channel.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n   \"chat_id\": \"-1001332619709\",\n   \"topic_id\": \"3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands for installing Python dependencies and Freqtrade package.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --upgrade pip\npython3 -m pip install -r requirements.txt\n# install freqtrade\npython3 -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Plot Settings in Freqtrade Strategy\nDESCRIPTION: Demonstrates how to configure advanced plot settings within a Freqtrade strategy, including custom colors, subplots, and indicator pairings.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef plot_config(self):\n    plot_config = {}\n    plot_config['main_plot'] = {\n        f'ema_{self.emashort.value}': {'color': 'red'},\n        f'ema_{self.emalong.value}': {'color': '#CCCCCC'},\n        'sar': {},\n        'senkou_a': {\n            'color': 'green',\n            'fill_to': 'senkou_b',\n            'fill_label': 'Ichimoku Cloud',\n            'fill_color': 'rgba(255,76,46,0.2)',\n        },\n        'senkou_b': {}\n    }\n    plot_config['subplots'] = {\n        \"MACD\": {\n            'macd': {'color': 'blue', 'fill_to': 'macdhist'},\n            'macdsignal': {'color': 'orange'},\n            'macdhist': {'type': 'bar', 'plotly': {'opacity': 0.9}}\n        },\n        \"RSI\": {\n            'rsi': {'color': 'red'}\n        }\n    }\n\n    return plot_config\n```\n\n----------------------------------------\n\nTITLE: Example of Updating a Manually Closed Trade\nDESCRIPTION: Practical example of the SQL update query with actual values to fix a trade that was manually closed on the exchange.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE trades\nSET is_open=0,\n  close_date='2020-06-20 03:08:45.103418',\n  close_rate=0.19638016,\n  close_profit=0.0496,\n  close_profit_abs = (amount * 0.19638016 * (1 - fee_close) - (amount * (open_rate * (1 - fee_open)))),\n  exit_reason='force_exit'  \nWHERE id=31;\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Pairlist Configuration\nDESCRIPTION: Shows whitelist when using a dynamic pairlist with USDT and BTC as quote currencies. Useful for testing pairlist configurations before live trading or backtesting.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade test-pairlist --config config.json --quote USDT BTC\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperopt Dependencies for Freqtrade\nDESCRIPTION: Commands to install the required dependencies for hyperopt functionality in Freqtrade using pip after activating the virtual environment.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\npip install -r requirements-hyperopt.txt\n```\n\n----------------------------------------\n\nTITLE: Custom Telegram Keyboard Configuration in Freqtrade\nDESCRIPTION: JSON configuration example showing how to create a custom Telegram keyboard in the Freqtrade configuration. This allows for creating personalized command shortcut buttons arranged in multiple rows.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"telegram\": {\n      \"enabled\": true,\n      \"token\": \"your_telegram_token\",\n      \"chat_id\": \"your_telegram_chat_id\",\n      \"keyboard\": [\n          [\"/daily\", \"/stats\", \"/balance\", \"/profit\"],\n          [\"/status table\", \"/performance\"],\n          [\"/reload_config\", \"/count\", \"/logs\"]\n      ]\n   }\n```\n\n----------------------------------------\n\nTITLE: Display Trade Analysis Results\nDESCRIPTION: Displays the analysis results including the number of entry signals generated by the strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/freqtrade/templates/strategy_analysis_example.ipynb#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Generated {df['enter_long'].sum()} entry signals\")\ndata = df.set_index(\"date\", drop=False)\ndata.tail()\n```\n\n----------------------------------------\n\nTITLE: Plotting Dataframe with Custom Indicators in Freqtrade\nDESCRIPTION: Shows how to plot a dataframe with custom indicators specified for the main plot and subplot using the plot-dataframe command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH --indicators1 sma ema --indicators2 macd\n```\n\n----------------------------------------\n\nTITLE: Analyzing Indicator Values for Signals\nDESCRIPTION: Command to analyze specific indicators along with entry and exit signals\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --analysis-groups 0 2 --enter-reason-list enter_tag_a enter_tag_b --exit-reason-list roi custom_exit_tag_a stop_loss --indicator-list rsi rsi_1h bb_lowerband ema_9 macd macdsignal\n```\n\n----------------------------------------\n\nTITLE: Displaying Weekly Profit Statistics in Markdown\nDESCRIPTION: This snippet shows the format for displaying weekly profit statistics using the /weekly command. It includes columns for the date, number of trades, profit in BTC and USD, and profit percentage.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```\nMonday (count)  Profit BTC      Profit USD   Profit %\n-------------  --------------  ------------    ----------\n2018-01-03 (5)  0.00224175 BTC  29,142 USD   4.98%\n2017-12-27 (1)  0.00033131 BTC   4,307 USD   0.00%\n2017-12-20 (4)  0.00269130 BTC  34.986 USD   5.12%\n```\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Configuration Files in Freqtrade Command\nDESCRIPTION: Example command for running Freqtrade with multiple configuration files. This allows separating configuration into multiple files, which is useful for keeping sensitive information separate from shareable configurations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --config user_data/config1.json --config user_data/config-private.json <...>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment with System-wide Jupyter\nDESCRIPTION: Commands to configure a Freqtrade virtual environment to work with a system-wide Jupyter installation. Creates a dedicated kernel for the Freqtrade environment.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-analysis.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Activate virtual environment\nsource .venv/bin/activate\n\npip install ipykernel\nipython kernel install --user --name=freqtrade\n# Restart jupyter (lab / notebook)\n# select kernel \"freqtrade\" in the notebook\n```\n\n----------------------------------------\n\nTITLE: Configuring Unlimited Stake Amount with Balance Ratio in JSON\nDESCRIPTION: JSON configuration for enabling unlimited stake amount with a tradable balance ratio to keep a minimum balance for eventual fees.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"stake_amount\" : \"unlimited\",\n\"tradable_balance_ratio\": 0.99,\n```\n\n----------------------------------------\n\nTITLE: Testing Exchange Candle Data in Python\nDESCRIPTION: Script to test exchange OHLCV data completeness by comparing last candle timestamp with current time.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nfrom datetime import datetime, timezone\nfrom freqtrade.data.converter import ohlcv_to_dataframe\nct = ccxt.binance()  # Use the exchange you're testing\ntimeframe = \"1d\"\npair = \"BTC/USDT\"  # Make sure to use a pair that exists on that exchange!\nraw = ct.fetch_ohlcv(pair, timeframe=timeframe)\n\n# convert to dataframe\ndf1 = ohlcv_to_dataframe(raw, timeframe, pair=pair, drop_incomplete=False)\n\nprint(df1.tail(1))\nprint(datetime.now(timezone.utc))\n```\n\n----------------------------------------\n\nTITLE: Starting Freqtrade with Custom Config Path\nDESCRIPTION: Command to start Freqtrade bot in trading mode with a specific configuration file located at a custom path.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade -c path/far/far/away/config.json\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Custom Export Filename\nDESCRIPTION: Command to run backtesting with a specified export filename for later analysis\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting -c <config.json> --timeframe <tf> --strategy <strategy_name> --timerange=<timerange> --export=signals --export-filename=/tmp/mystrat_backtest.json\n```\n\n----------------------------------------\n\nTITLE: Hyperliquid Exchange Configuration\nDESCRIPTION: JSON configuration for Hyperliquid DEX including wallet address and private key parameters.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"hyperliquid\",\n    \"walletAddress\": \"your_eth_wallet_address\",\n    \"privateKey\": \"your_api_private_key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PercentChangePairList for Exchange Ticker Data in Freqtrade\nDESCRIPTION: Configuration for PercentChangePairList that selects the top 15 pairs based on 24-hour price change, filtering pairs with changes between -10% and 50%. This uses the exchange's ticker data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"PercentChangePairList\",\n        \"number_assets\": 15,\n        \"min_value\": -10,\n        \"max_value\": 50\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Creating New Strategy Commands\nDESCRIPTION: Examples of different ways to create new trading strategies using the new-strategy command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade new-strategy --strategy AwesomeStrategy\n\nfreqtrade new-strategy --userdir ~/.freqtrade/ --strategy AwesomeStrategy\n\nfreqtrade new-strategy --strategy AwesomeStrategy --template advanced\n```\n\n----------------------------------------\n\nTITLE: Running Freqtrade with Multiple Config Files\nDESCRIPTION: Command to start Freqtrade trading with both a default config and a separate config containing sensitive exchange keys and secrets.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade -c ./config.json -c path/to/secrets/keys.config.json\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Configuration Files in Freqtrade\nDESCRIPTION: Python code to load and combine multiple Freqtrade configuration files using the Configuration class. This is useful for inspecting combined configurations from different sources.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-analysis.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom freqtrade.configuration import Configuration\n\n# Load config from multiple files\nconfig = Configuration.from_files([\"config1.json\", \"config2.json\"])\n\n# Show the config in memory\nprint(json.dumps(config['original_config'], indent=2))\n```\n\n----------------------------------------\n\nTITLE: Updating Freqtrade Using Docker Compose\nDESCRIPTION: Commands to update Freqtrade using docker-compose by pulling latest images and restarting containers\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/release_template.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose pull\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Example WebSocket Message Response Format\nDESCRIPTION: Shows the format of messages received from the WebSocket after subscription. This example demonstrates an analyzed dataframe message with its structure.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"analyzed_df\",\n  \"data\": {\n      \"key\": [\"NEO/BTC\", \"5m\", \"spot\"],\n      \"df\": {}, // The dataframe\n      \"la\": \"2022-09-08 22:14:41.457786+00:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FreqTrade Edge Command in CLI\nDESCRIPTION: The complete command syntax for FreqTrade's edge functionality, which is used to assess strategy performance across different stoploss values. It includes options for data selection, strategy configuration, and position sizing parameters.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/edge.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade edge [-h] [-v] [--no-color] [--logfile FILE] [-V] [-c PATH]\n                      [-d PATH] [--userdir PATH] [-s NAME]\n                      [--strategy-path PATH] [--recursive-strategy-search]\n                      [--freqaimodel NAME] [--freqaimodel-path PATH]\n                      [-i TIMEFRAME] [--timerange TIMERANGE]\n                      [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                      [--max-open-trades INT] [--stake-amount STAKE_AMOUNT]\n                      [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                      [--stoplosses STOPLOSS_RANGE]\n```\n\n----------------------------------------\n\nTITLE: Showing Specific Trades from Database\nDESCRIPTION: Prints trades with specific IDs (2 and 3) from a SQLite database in JSON format. Useful for analyzing particular trades from the trading history.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade show-trades --db-url sqlite:///tradesv3.sqlite --trade-ids 2 3 --print-json\n```\n\n----------------------------------------\n\nTITLE: Loading Live Trading Results from Database in Python\nDESCRIPTION: Loads actual trading results from a SQLite database for analysis. This allows examination of real trading performance by analyzing exit reasons grouped by trading pair.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.data.btanalysis import load_trades_from_db\n\n\n# Fetch trades from database\ntrades = load_trades_from_db(\"sqlite:///tradesv3.sqlite\")\n\n# Display results\ntrades.groupby(\"pair\")[\"exit_reason\"].value_counts()\n```\n\n----------------------------------------\n\nTITLE: Using the Freqtrade Convert-Data Command (Shell)\nDESCRIPTION: The command syntax for converting trading data between different formats in Freqtrade. It shows all available options including format specification, pair selection, timeframes, and candle types. The command requires specifying both source and destination formats.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/convert-data.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfreqtrade convert-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                              [-c PATH] [-d PATH] [--userdir PATH]\n                              [-p PAIRS [PAIRS ...]] --format-from\n                              {json,jsongz,feather,parquet} --format-to\n                              {json,jsongz,feather,parquet} [--erase]\n                              [--exchange EXCHANGE]\n                              [-t TIMEFRAMES [TIMEFRAMES ...]]\n                              [--trading-mode {spot,margin,futures}]\n                              [--candle-types {spot,futures,mark,index,premiumIndex,funding_rate} [{spot,futures,mark,index,premiumIndex,funding_rate} ...]]\n```\n\n----------------------------------------\n\nTITLE: Writing and Searching Freqtrade Logs\nDESCRIPTION: Demonstrates how to write Freqtrade logs to a file and search them using grep or tail.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade --logfile /path/to/mylogfile.log --some-options\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /path/to/mylogfile.log | grep 'something'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ tail -f /path/to/mylogfile.log | grep 'something'\n```\n\n----------------------------------------\n\nTITLE: Plotting Dataframe for a Single Pair in Freqtrade\nDESCRIPTION: Demonstrates how to use the plot-dataframe command to generate an interactive graph for a specific trading pair using a custom strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-dataframe -p BTC/ETH --strategy AwesomeStrategy\n```\n\n----------------------------------------\n\nTITLE: Starting Webserver Mode with Docker Compose\nDESCRIPTION: Demonstrates how to configure docker-compose.yml to run freqtrade in webserver mode. This allows access to FreqUI for backtesting controls without reloading data between runs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n    command: >\n      webserver\n      --config /freqtrade/user_data/config.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Strategy Version Control\nDESCRIPTION: Shows how to implement version control for a trading strategy using the version method.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef version(self) -> str:\n    \"\"\"\n    Returns version of the strategy.\n    \"\"\"\n    return \"1.1\"\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for WebSocket Support\nDESCRIPTION: Provides an Nginx configuration example for setting up a reverse proxy with WebSocket support. This configuration maps the upgrade headers necessary for WebSocket connections.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n\n    #...\n\n    server {\n        #...\n\n        location / {\n            proxy_http_version 1.1;\n            proxy_pass http://<freqtrade_listen_ip>:8080;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n            proxy_set_header Host $host;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Freqtrade Show-Trades Command\nDESCRIPTION: The command syntax for 'freqtrade show-trades' with all available options. This command allows users to display information about trades, with options to filter by trade IDs, customize output format, and specify database location.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/show-trades.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade show-trades [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH]\n                             [--db-url PATH]\n                             [--trade-ids TRADE_IDS [TRADE_IDS ...]]\n                             [--print-json]\n```\n\n----------------------------------------\n\nTITLE: Plotting Profit from Custom Backtest Export in Freqtrade\nDESCRIPTION: Shows how to plot profit data from a custom backtest export file using the plot-profit command for a specific trading pair.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-profit  -p LTC/BTC --export-filename user_data/backtest_results/backtest-result.json\n```\n\n----------------------------------------\n\nTITLE: Running Hyperopt with Custom Parameters\nDESCRIPTION: Example command for running Freqtrade's hyperopt module with a specific loss function, strategy, and number of epochs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt --hyperopt-loss SharpeHyperOptLossDaily --strategy SampleStrategy -e 1000\n```\n\n----------------------------------------\n\nTITLE: FreqTrade Hyperopt CLI Usage Pattern\nDESCRIPTION: Command line usage pattern showing the full syntax and available options for the freqtrade hyperopt command. Includes options for strategy configuration, data handling, hyperparameter optimization, and output formatting.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/hyperopt.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                          [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                          [--strategy-path PATH] [--recursive-strategy-search]\n                          [--freqaimodel NAME] [--freqaimodel-path PATH]\n                          [-i TIMEFRAME] [--timerange TIMERANGE]\n                          [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                          [--max-open-trades INT]\n                          [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                          [-p PAIRS [PAIRS ...]] [--hyperopt-path PATH]\n                          [--eps] [--enable-protections]\n                          [--dry-run-wallet DRY_RUN_WALLET]\n                          [--timeframe-detail TIMEFRAME_DETAIL] [-e INT]\n                          [--spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]]\n                          [--print-all] [--print-json] [-j JOBS]\n                          [--random-state INT] [--min-trades INT]\n                          [--hyperopt-loss NAME] [--disable-param-export]\n                          [--ignore-missing-spaces] [--analyze-per-epoch]\n```\n\n----------------------------------------\n\nTITLE: Resulting Combined Configuration Example\nDESCRIPTION: Example showing the final merged configuration after combining a main configuration with an imported one. The main configuration's values take precedence over imported values for the same keys.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"max_open_trades\": 3,\n    \"stake_currency\": \"USDT\",\n    \"stake_amount\": \"unlimited\"\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Specific Hyperopt Epoch Details\nDESCRIPTION: Prints details for a specific hyperopt epoch (number 168) from the results file. Useful for examining parameters of a particular optimization run.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt-show -n 168\n```\n\n----------------------------------------\n\nTITLE: FreqTrade Backtesting Show Command Usage\nDESCRIPTION: Displays the command structure and available options for the 'freqtrade backtesting-show' command. It includes specific options for analyzing backtesting results and common arguments used in FreqTrade commands.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/backtesting-show.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade backtesting-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--export-filename PATH] [--show-pair-list]\n                                  [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\noptions:\n  -h, --help            show this help message and exit\n  --export-filename PATH, --backtest-filename PATH\n                        Use this filename for backtest results.Requires\n                        `--export` to be set as well. Example: `--export-filen\n                        ame=user_data/backtest_results/backtest_today.json`\n  --show-pair-list      Show backtesting pairlist sorted by profit.\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        Show backtesting breakdown per [day, week, month,\n                        year].\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Listing Trading Data Pairs and Timeframes\nDESCRIPTION: Example showing how to use the list-data command to display downloaded trading pair and timeframe combinations. The command shows pairs, available timeframes, and market type.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> freqtrade list-data --userdir ~/.freqtrade/user_data/\n\n              Found 33 pair / timeframe combinations.\n┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━┓\n┃          Pair ┃                                 Timeframe ┃ Type ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━┩\n│       ADA/BTC │     5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d │ spot │\n│       ADA/ETH │     5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d │ spot │\n│       ETH/BTC │     5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d │ spot │\n│      ETH/USDT │                  5m, 15m, 30m, 1h, 2h, 4h │ spot │\n└───────────────┴───────────────────────────────────────────┴──────┘\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Configuration Command Usage\nDESCRIPTION: This snippet shows the usage and available options for the 'freqtrade show-config' command. It allows users to view the current configuration of the Freqtrade trading bot, with options to specify the user data directory, configuration file path, and whether to show sensitive information.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/show-config.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade show-config [-h] [--userdir PATH] [-c PATH]\n                             [--show-sensitive]\n\noptions:\n  -h, --help            show this help message and exit\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  --show-sensitive      Show secrets in the output.\n```\n\n----------------------------------------\n\nTITLE: Plotting Dataframe from Database in Freqtrade\nDESCRIPTION: Demonstrates how to plot a dataframe using trade data stored in a SQLite database using the plot-dataframe command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-dataframe --strategy AwesomeStrategy --db-url sqlite:///tradesv3.dry_run.sqlite -p BTC/ETH --trade-source DB\n```\n\n----------------------------------------\n\nTITLE: Using FreqTrade Client in Python Scripts\nDESCRIPTION: Python code example demonstrating how to use the FreqTrade client package programmatically to interact with the FreqTrade API.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade_client import FtRestClient\n\nclient = FtRestClient(server_url, username, password)\n\n# Get the status of the bot\nping = client.ping()\nprint(ping)\n# ... \n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Test-Pairlist Command Usage in Plain Text\nDESCRIPTION: This snippet shows the usage syntax and available options for the 'freqtrade test-pairlist' command. It includes information on parameters such as userdir, verbose mode, configuration file, quote currency, output format, and exchange selection.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/test-pairlist.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade test-pairlist [-h] [--userdir PATH] [-v] [-c PATH]\n                               [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                               [-1] [--print-json] [--exchange EXCHANGE]\n\noptions:\n  -h, --help            show this help message and exit\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        Specify quote currency(-ies). Space-separated list.\n  -1, --one-column      Print output in one column.\n  --print-json          Print list of pairs or market symbols in JSON format.\n  --exchange EXCHANGE   Exchange name. Only valid if no config is provided.\n```\n\n----------------------------------------\n\nTITLE: Hyperopt Stoploss Results Format\nDESCRIPTION: Example of Hyperopt results including an optimized stoploss value along with buy parameters and performance metrics.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nBest result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180.4 mins. Objective: 1.94367\n\n    # Buy hyperspace params:\n    buy_params = {\n        'buy_adx': 44,\n        'buy_rsi': 29,\n        'buy_adx_enabled': False,\n        'buy_rsi_enabled': True,\n        'buy_trigger': 'bb_lower'\n    }\n\n    stoploss: -0.27996\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Pair List with Custom Timeframe\nDESCRIPTION: Advanced configuration for VolumePairList using specific candle timeframes and periods for volume calculation.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"refresh_period\": 3600,\n        \"lookback_timeframe\": \"1h\",\n        \"lookback_period\": 72\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Table Types to CSV Files\nDESCRIPTION: Command that exports both rejected signals and analysis groups 0 and 1 to separate CSV files in the default location.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --analysis-to-csv --rejected-signals --analysis-groups 0 1\n```\n\n----------------------------------------\n\nTITLE: Basic Backtesting Command\nDESCRIPTION: Execute basic backtesting using a custom strategy with default 5-minute candle data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy AwesomeStrategy\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Messages for Discord Webhook in Freqtrade\nDESCRIPTION: This JSON snippet shows how to enable custom messages for Discord webhooks in Freqtrade. It sets the 'allow_custom_messages' option to true, allowing strategies to send custom messages to the Discord webhook.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"discord\": {\n        \"enabled\": true,\n        \"webhook_url\": \"https://discord.com/api/webhooks/<Your webhook URL ...>\",\n        \"allow_custom_messages\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Virtual Environment Setup\nDESCRIPTION: Commands for setting up and activating a Python virtual environment for Freqtrade.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# create virtualenv in directory /freqtrade/.venv\npython3 -m venv .venv\n\n# run virtualenv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Customizing CSV Export Directory Path\nDESCRIPTION: Command that changes the default output directory for CSV files using the '--analysis-csv-path' option to specify a custom location.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --analysis-to-csv --analysis-csv-path another/data/path/\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Group ID with Freqtrade\nDESCRIPTION: JSON configuration example for setting up a Telegram group with Freqtrade. It shows how to specify the group chat_id and topic_id, which can be obtained using the /tg_info command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"enabled\": true,\n    \"token\": \"********\",\n    \"chat_id\": \"-1001332619709\",\n    \"topic_id\": \"122\"\n}\n```\n\n----------------------------------------\n\nTITLE: FreqTrade UI Installation Command Usage\nDESCRIPTION: CLI command syntax for installing and managing the FreqTrade UI. Includes options for cleaning existing installations, installing pre-release versions, and specifying particular UI versions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/install-ui.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nusage: freqtrade install-ui [-h] [--erase] [--prerelease]\n                            [--ui-version UI_VERSION]\n\noptions:\n  -h, --help            show this help message and exit\n  --erase               Clean UI folder, don't download new version.\n  --prerelease          Install the latest pre-release version of FreqUI. This\n                        is not recommended for production use.\n  --ui-version UI_VERSION\n                        Specify a specific version of FreqUI to install. Not\n                        specifying this installs the latest version.\n```\n\n----------------------------------------\n\nTITLE: Configuring Dry-Run Mode in JSON\nDESCRIPTION: JSON configuration for enabling dry-run mode with a specified database URL. This allows running the bot in simulation mode without risking real funds.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"dry_run\": true,\n\"db_url\": \"sqlite:///tradesv3.dryrun.sqlite\",\n```\n\n----------------------------------------\n\nTITLE: JWT Token Authentication Request in Freqtrade API\nDESCRIPTION: Example of obtaining JWT access and refresh tokens through a POST request to Freqtrade's login endpoint. The response includes both access and refresh tokens that can be used for subsequent API calls.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n> curl -X POST --user Freqtrader http://localhost:8080/api/v1/token/login\n{\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk2ODEsIm5iZiI6MTU4OTExOTY4MSwianRpIjoiMmEwYmY0NWUtMjhmOS00YTUzLTlmNzItMmM5ZWVlYThkNzc2IiwiZXhwIjoxNTg5MTIwNTgxLCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.qt6MAXYIa-l556OM7arBvYJ0SDI9J8bIk3_glDujF5g\",\"refresh_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk2ODEsIm5iZiI6MTU4OTExOTY4MSwianRpIjoiZWQ1ZWI3YjAtYjMwMy00YzAyLTg2N2MtNWViMjIxNWQ2YTMxIiwiZXhwIjoxNTkxNzExNjgxLCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJ0eXBlIjoicmVmcmVzaCJ9.d1AT_jYICyTAjD0fiQAr52rkRqtxCjUGEMwlNuuzgNQ\"}\n\n> access_token=\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk2ODEsIm5iZiI6MTU4OTExOTY4MSwianRpIjoiMmEwYmY0NWUtMjhmOS00YTUzLTlmNzItMmM5ZWVlYThkNzc2IiwiZXhwIjoxNTg5MTIwNTgxLCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.qt6MAXYIa-l556OM7arBvYJ0SDI9J8bIk3_glDujF5g\"\n# Use access_token for authentication\n> curl -X GET --header \"Authorization: Bearer ${access_token}\" http://localhost:8080/api/v1/count\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade List-Strategies Command Usage in CLI\nDESCRIPTION: This code snippet shows the usage syntax and available options for the 'freqtrade list-strategies' command. It includes specific options for strategy listing and common arguments used in Freqtrade commands.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-strategies.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade list-strategies [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--strategy-path PATH] [-1]\n                                 [--recursive-strategy-search]\n\noptions:\n  -h, --help            show this help message and exit\n  --strategy-path PATH  Specify additional strategy lookup path.\n  -1, --one-column      Print output in one column.\n  --recursive-strategy-search\n                        Recursively search for a strategy in the strategies\n                        folder.\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Hyperopt ROI Table Results Format\nDESCRIPTION: Example of Hyperopt results including an optimized ROI (Return on Investment) table that defines profit taking at different time intervals.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nBest result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180.4 mins. Objective: 1.94367\n\n    # ROI table:\n    minimal_roi = {\n        0: 0.10674,\n        21: 0.09158,\n        78: 0.03634,\n        118: 0\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Expiration in FreqAI\nDESCRIPTION: Sets the maximum age of a model before it expires in FreqAI. This example sets the expiration time to 0.5 hours, ensuring that only models less than 30 minutes old are used for predictions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"freqai\": {\n        \"expiration_hours\": 0.5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQLite3 via Docker with Freqtrade\nDESCRIPTION: Commands to access SQLite3 through the Freqtrade Docker container without installing it on the host system.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec freqtrade /bin/bash\nsqlite3 <database-file>.sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Pip\nDESCRIPTION: Commands to upgrade pip and install required Python packages for Freqtrade.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --upgrade pip\npython3 -m pip install -r requirements.txt\npython3 -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian/Ubuntu\nDESCRIPTION: Commands to update package repository and install required Python packages and dependencies on Debian/Ubuntu systems.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# update repository\nsudo apt-get update\n\n# install packages\nsudo apt install -y python3-pip python3-venv python3-dev python3-pandas git curl\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overall Performance in Python\nDESCRIPTION: Example demonstrating how to get overall performance statistics in live or dry run modes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/trade-object.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.persistence import Trade\n\n# ...\nif self.config['runmode'].value in ('live', 'dry_run'):\n    performance = Trade.get_overall_performance()\n```\n\n----------------------------------------\n\nTITLE: Listing All Markets on Specific Exchange\nDESCRIPTION: Prints all markets available on the Kraken exchange in tabular format. Uses the list-markets command with --exchange and --all flags.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade list-markets --exchange kraken --all\n```\n\n----------------------------------------\n\nTITLE: Plotting Trading Data with Docker\nDESCRIPTION: Command to generate a dataframe plot for a specific trading strategy and pair using the plotting-enabled Docker image.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm freqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH --timerange=20180801-20180805\n```\n\n----------------------------------------\n\nTITLE: Trading Pairs Configuration - JSON\nDESCRIPTION: Example pairs.json file format for specifying trading pairs to download.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"ETH/BTC\",\n    \"ETH/USDT\",\n    \"BTC/USDT\",\n    \"XRP/ETH\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Binance BNFCR Futures Mode\nDESCRIPTION: Configuration for using BNFCR futures mode on Binance, which is used to work around regulatory issues in Europe. Requires specific trading and margin settings.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    // ...\n    \"trading_mode\": \"futures\",\n    \"margin_mode\": \"cross\",\n    \"proxy_coin\": \"BNFCR\",\n    \"stake_currency\": \"USDT\" // or \"USDC\"\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Stop Loss in Freqtrade\nDESCRIPTION: This code snippet demonstrates how to set a static stop loss value in Freqtrade, which will trigger a sale when the loss exceeds the defined ratio.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    stoploss = -0.10\n```\n\n----------------------------------------\n\nTITLE: Listing Hyperopt Results\nDESCRIPTION: Lists all hyperopt epochs with positive profit without showing detailed results. Useful for scripting or filtering through large numbers of hyperopt results.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt-list --profitable --no-details\n```\n\n----------------------------------------\n\nTITLE: Installing Plotting Dependencies for Freqtrade\nDESCRIPTION: Installs the required plotting modules using pip. This command upgrades the necessary libraries specified in the requirements-plot.txt file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U -r requirements-plot.txt\n```\n\n----------------------------------------\n\nTITLE: Updating a Manually Closed Trade in Freqtrade Database\nDESCRIPTION: SQL update query to fix a trade that was manually closed on the exchange but is still showing as open in the Freqtrade database. All trade metrics are recalculated.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE trades\nSET is_open=0,\n  close_date=<close_date>,\n  close_rate=<close_rate>,\n  close_profit = close_rate / open_rate - 1,\n  close_profit_abs = (amount * <close_rate> * (1 - fee_close) - (amount * (open_rate * (1 - fee_open)))),\n  exit_reason=<exit_reason>\nWHERE id=<trade_ID_to_update>;\n```\n\n----------------------------------------\n\nTITLE: Usage of freqtrade convert-db command\nDESCRIPTION: Shows the command syntax for the Freqtrade database conversion utility, along with its available options for specifying database locations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/convert-db.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade convert-db [-h] [--db-url PATH] [--db-url-from PATH]\n\noptions:\n  -h, --help          show this help message and exit\n  --db-url PATH       Override trades database URL, this is useful in custom\n                      deployments (default: `sqlite:///tradesv3.sqlite` for\n                      Live Run mode, `sqlite:///tradesv3.dryrun.sqlite` for\n                      Dry Run).\n  --db-url-from PATH  Source db url to use when migrating a database.\n```\n\n----------------------------------------\n\nTITLE: Updating Freqtrade Using Setup Script\nDESCRIPTION: Command to update Freqtrade using the provided setup script after deactivating virtual environment\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/release_template.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Deactivate venv and run \n./setup.sh --update\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Custom Starting Balance\nDESCRIPTION: Execute backtesting with a defined starting balance of 1000 in stake currency.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy AwesomeStrategy --dry-run-wallet 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Data Webhook Format in Freqtrade\nDESCRIPTION: This JSON snippet illustrates how to configure a webhook with raw data format in Freqtrade. It shows the required 'data' field for the raw format and sets a custom status message.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURHOOKURL>\",\n        \"format\": \"raw\",\n        \"webhookstatus\": {\n            \"data\": \"Status: {status}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Trade History Data with Timerange\nDESCRIPTION: Example demonstrating how to list trade history data including from/to timerange and number of trades for specific pairs using the --show and --trades flags.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> freqtrade list-data --show --trades\n                     Found trades data for 1 pair.                     \n┏━━━━━━━━━┳━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓\n┃    Pair ┃ Type ┃                From ┃                  To ┃ Trades ┃\n┡━━━━━━━━━╇━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩\n│ XRP/ETH │ spot │ 2019-10-11 00:00:11 │ 2019-10-13 11:19:28 │  12477 │\n└─────────┴──────┴─────────────────────┴─────────────────────┴────────┘\n```\n\n----------------------------------------\n\nTITLE: Listing Strategies Commands\nDESCRIPTION: Examples of commands for listing available trading strategies from different directories.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade list-strategies\n\nfreqtrade list-strategies --userdir ~/.freqtrade/\n\nfreqtrade list-strategies --strategy-path ~/.freqtrade/strategies/\n```\n\n----------------------------------------\n\nTITLE: Running Backtesting with Signal Export in Freqtrade\nDESCRIPTION: Command to run backtesting with signal export enabled, generating pickled data files for analysis\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting -c <config.json> --timeframe <tf> --strategy <strategy_name> --timerange=<timerange> --export=signals\n```\n\n----------------------------------------\n\nTITLE: Setting Freqtrade Configuration via Environment Variables in Bash\nDESCRIPTION: Example of configuring Freqtrade bot settings using environment variables. The variables must be prefixed with 'FREQTRADE__' and use double underscores as level separators. This example shows how to set Telegram notifications and exchange API credentials.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFREQTRADE__TELEGRAM__CHAT_ID=<telegramchatid>\nFREQTRADE__TELEGRAM__TOKEN=<telegramToken>\nFREQTRADE__EXCHANGE__KEY=<yourExchangeKey>\nFREQTRADE__EXCHANGE__SECRET=<yourExchangeSecret>\n```\n\n----------------------------------------\n\nTITLE: Defining PyTorch General Parameters in Markdown\nDESCRIPTION: Documentation table defining the general PyTorch parameters including learning rate and model configuration options\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-parameter-table.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|  Parameter | Description |\n|------------|-------------|\n|  |  **Model training parameters within the `freqai.model_training_parameters` sub dictionary**\n| `learning_rate` | Learning rate to be passed to the optimizer. <br> **Datatype:** float. <br> Default: `3e-4`.\n| `model_kwargs` | Parameters to be passed to the model class. <br> **Datatype:** dict. <br> Default: `{}`.\n| `trainer_kwargs` | Parameters to be passed to the trainer class. <br> **Datatype:** dict. <br> Default: `{}`.\n```\n\n----------------------------------------\n\nTITLE: Listing Exchanges Example Output\nDESCRIPTION: Sample output of the list-exchanges command showing available exchanges and their support status.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n$ freqtrade list-exchanges\nExchanges available for Freqtrade:\nExchange name       Supported    Markets                 Reason\n------------------  -----------  ----------------------  ------------------------------------------------------------------------\nbinance             Official     spot, isolated futures\nbitmart             Official     spot\nbybit                            spot, isolated futures\ngate                Official     spot, isolated futures\nhtx                 Official     spot\nhuobi                            spot\nkraken              Official     spot\nokx                 Official     spot, isolated futures\n```\n\n----------------------------------------\n\nTITLE: Freqtrade Launch Command\nDESCRIPTION: Basic command to start the Freqtrade trading bot with a configuration file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --config config.json\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure Example\nDESCRIPTION: Shows the standard directory structure created by the create-userdir command, including folders for backtest results, data, hyperopt results, and strategies.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── backtest_results\n├── data\n├── hyperopt_results\n├── hyperopts\n│   ├── sample_hyperopt_loss.py\n├── notebooks\n│   └── strategy_analysis_example.ipynb\n├── plot\n└── strategies\n    └── sample_strategy.py\n```\n\n----------------------------------------\n\nTITLE: Updating Native Freqtrade Installation\nDESCRIPTION: Commands for updating a native Freqtrade installation, including pulling latest code, updating dependencies, and installing latest UI version.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/updating.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\npip install -U -r requirements.txt\npip install -e .\n\n# Ensure freqUI is at the latest version\nfreqtrade install-ui \n```\n\n----------------------------------------\n\nTITLE: Docker Compose Port Mapping for FreqTrade API\nDESCRIPTION: YAML configuration snippet for mapping ports in a Docker Compose file to expose the FreqTrade API.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  - \"127.0.0.1:8080:8080\"\n```\n\n----------------------------------------\n\nTITLE: Converting Kraken Trade Data for Backtesting\nDESCRIPTION: Command to convert downloaded Kraken CSV trade data into Feather format for use with Freqtrade backtesting.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade convert-trade-data --exchange kraken --format-from kraken_csv --format-to feather\n```\n\n----------------------------------------\n\nTITLE: Converting Trade Data - Freqtrade CLI Command\nDESCRIPTION: CLI command to convert trade data to different OHLCV timeframes for specified trading pairs on Kraken exchange.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trades-to-ohlcv -p BTC/EUR BCH/EUR --exchange kraken -t 1m 5m 15m 1h\n```\n\n----------------------------------------\n\nTITLE: Analyzing Backtesting Results with Analysis Groups\nDESCRIPTION: Command to analyze backtesting results using different analysis group levels for detailed trade statistics\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --analysis-groups 0 1 2 3 4 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Pair List in Freqtrade\nDESCRIPTION: Configuration example for StaticPairList handler that uses explicitly defined trading pairs. Supports regex patterns for pair selection and blacklisting.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"...\",\n    // ... \n    \"pair_whitelist\": [\n        \"BTC/USDT\",\n        \"ETH/USDT\",\n        // ...\n    ],\n    \"pair_blacklist\": [\n        \"BNB/USDT\",\n        // ...\n    ]\n},\n\"pairlists\": [\n    {\"method\": \"StaticPairList\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Environment in Python\nDESCRIPTION: Sets up the working directory by navigating to the Freqtrade project root. It attempts to find the project root by checking for the LICENSE file and changing directories as needed.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pathlib import Path\n\n\n# Change directory\n# Modify this cell to insure that the output shows the correct path.\n# Define all paths relative to the project root shown in the cell output\nproject_root = \"somedir/freqtrade\"\ni = 0\ntry:\n    os.chdir(project_root)\n    if not Path(\"LICENSE\").is_file():\n        i = 0\n        while i < 4 and (not Path(\"LICENSE\").is_file()):\n            os.chdir(Path(Path.cwd(), \"../\"))\n            i += 1\n        project_root = Path.cwd()\nexcept FileNotFoundError:\n    print(\"Please define the project root relative to the current directory\")\nprint(Path.cwd())\n```\n\n----------------------------------------\n\nTITLE: JWT Token Refresh in Freqtrade API\nDESCRIPTION: Example of refreshing an expired JWT access token using the refresh token. This request returns a new access token that can be used for continued API access.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n> curl -X POST --header \"Authorization: Bearer ${refresh_token}\"http://localhost:8080/api/v1/token/refresh\n{\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk5NzQsIm5iZiI6MTU4OTExOTk3NCwianRpIjoiMDBjNTlhMWUtMjBmYS00ZTk0LTliZjAtNWQwNTg2MTdiZDIyIiwiZXhwIjoxNTg5MTIwODc0LCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.1seHlII3WprjjclY6DpRhen0rqdF4j6jbvxIhUFaSbs\"}\n```\n\n----------------------------------------\n\nTITLE: Activating Tensorboard for Reinforcement Learning in FreqAI\nDESCRIPTION: Command to activate Tensorboard for tracking training metrics in FreqAI Reinforcement Learning models.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntensorboard --logdir user_data/models/unique-id\n```\n\n----------------------------------------\n\nTITLE: Setup Project Root Directory\nDESCRIPTION: Changes working directory to the project root by searching for the LICENSE file up to 4 levels up in the directory tree.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/freqtrade/templates/strategy_analysis_example.ipynb#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pathlib import Path\n\nproject_root = \"somedir/freqtrade\"\ni = 0\ntry:\n    os.chdir(project_root)\n    if not Path(\"LICENSE\").is_file():\n        i = 0\n        while i < 4 and (not Path(\"LICENSE\").is_file()):\n            os.chdir(Path(Path.cwd(), \"../\"))\n            i += 1\n        project_root = Path.cwd()\nexcept FileNotFoundError:\n    print(\"Please define the project root relative to the current directory\")\nprint(Path.cwd())\n```\n\n----------------------------------------\n\nTITLE: Plotting Dataframe with Specific Timerange in Freqtrade\nDESCRIPTION: Shows how to plot a dataframe for a specific time range using the plot-dataframe command with the timerange parameter.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH --timerange=20180801-20180805\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for Freqtrade\nDESCRIPTION: Command to create a dedicated Conda environment for Freqtrade using Python 3.12.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nconda create --name freqtrade python=3.12\n```\n\n----------------------------------------\n\nTITLE: FreqTrade Strategy-specific Command Line Arguments\nDESCRIPTION: Documentation of strategy-related arguments for FreqTrade commands. These options allow specifying which trading strategy to use, additional strategy search paths, and FreqAI model configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/backtesting.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nStrategy arguments:\n  -s NAME, --strategy NAME\n                        Specify strategy class name which will be used by the\n                        bot.\n  --strategy-path PATH  Specify additional strategy lookup path.\n  --recursive-strategy-search\n                        Recursively search for a strategy in the strategies\n                        folder.\n  --freqaimodel NAME    Specify a custom freqaimodels.\n  --freqaimodel-path PATH\n                        Specify additional lookup path for freqaimodels.\n```\n\n----------------------------------------\n\nTITLE: Downloading Trade Data - Freqtrade CLI Command\nDESCRIPTION: CLI command to download trading data from Kraken exchange for specified trading pairs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade download-data --exchange kraken --dl-trades -p BTC/EUR BCH/EUR\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Custom Timeframe\nDESCRIPTION: Run backtesting using 1-minute candle data intervals.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy AwesomeStrategy --timeframe 1m\n```\n\n----------------------------------------\n\nTITLE: Running Freqtrade with Configuration Files Specified in JSON\nDESCRIPTION: Command for running Freqtrade with a main configuration file that includes references to additional configuration files. This simplifies command execution while still using multiple config files.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --config user_data/config.json <...>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Pairlist Method in Python\nDESCRIPTION: Example implementation of the filter_pairlist method for a custom Pairlist Handler. The method filters and calculates pairs based on provided pairlist and tickers data.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    def filter_pairlist(self, pairlist: list[str], tickers: dict) -> List[str]:\n        # Generate dynamic whitelist\n        pairs = self._calculate_pairlist(pairlist, tickers)\n        return pairs\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific File in Freqtrade\nDESCRIPTION: Command to run unit tests for a specific file in the Freqtrade project. This allows testing only the components that were modified.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_<file_name>.py\n```\n\n----------------------------------------\n\nTITLE: Custom ExtraTreesRegressor for Freqtrade Hyperopt\nDESCRIPTION: Shows how to configure a custom ExtraTreesRegressor with additional parameters for hyperopt optimization, providing more control over the estimation process than using the default \"ET\" shorthand.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    class HyperOpt:\n        def generate_estimator(dimensions: List['Dimension'], **kwargs):\n            from skopt.learning import ExtraTreesRegressor\n            # Corresponds to \"ET\" - but allows additional parameters.\n            return ExtraTreesRegressor(n_estimators=100)\n```\n\n----------------------------------------\n\nTITLE: Database URL Configuration Example\nDESCRIPTION: Example showing how to specify a custom database URL for resetting the bot's database using SQLite.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--db-url sqlite:///mynewdatabase.sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Freqtrade Project with pip\nDESCRIPTION: This requirements file includes all dependencies needed for developing the Freqtrade trading bot. It references other requirement files for core functionality, plotting, hyperopt, FreqAI, and documentation. Additionally, it specifies testing tools, code quality tools, and type checking libraries.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements-dev.txt#2025-04-15_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# Include all requirements to run the bot.\n-r requirements.txt\n-r requirements-plot.txt\n-r requirements-hyperopt.txt\n-r requirements-freqai.txt\n-r requirements-freqai-rl.txt\n-r docs/requirements-docs.txt\n\ncoveralls==4.0.1\nruff==0.11.5\nmypy==1.15.0\npre-commit==4.2.0\npytest==8.3.5\npytest-asyncio==0.26.0\npytest-cov==6.1.1\npytest-mock==3.14.0\npytest-random-order==1.1.1\npytest-timeout==2.3.1\npytest-xdist==3.6.1\nisort==6.0.1\n# For datetime mocking\ntime-machine==2.16.0\n\n# Convert jupyter notebooks to markdown documents\nnbconvert==7.16.6\n\n# mypy types\ntypes-cachetools==5.5.0.20240820\ntypes-filelock==3.2.7\ntypes-requests==2.32.0.20250328\ntypes-tabulate==0.9.0.20241207\ntypes-python-dateutil==2.9.0.20241206\n```\n\n----------------------------------------\n\nTITLE: Configuring ProducerPairList in Freqtrade\nDESCRIPTION: Configuration for ProducerPairList that allows reusing pairlists from a Producer without explicit definition. This example limits to 5 assets and references a producer named 'default'.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"ProducerPairList\",\n        \"number_assets\": 5,\n        \"producer_name\": \"default\",\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: WebSocket Subscription Request Format\nDESCRIPTION: Demonstrates the JSON format for subscribing to specific message types through the WebSocket connection. The request includes a list of message types to subscribe to.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"subscribe\",\n  \"data\": [\"whitelist\", \"analyzed_df\"] // A list of string message types\n}\n```\n\n----------------------------------------\n\nTITLE: Trade Data Conversion - Bash\nDESCRIPTION: Command to convert trade data from JSONGZ to JSON format with cleanup.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade convert-trade-data --format-from jsongz --format-to json --datadir ~/.freqtrade/data/kraken --erase\n```\n\n----------------------------------------\n\nTITLE: Using Freqtrade List-Exchanges Command in Bash\nDESCRIPTION: Command syntax for listing available cryptocurrency exchanges in Freqtrade. This command displays exchanges that can be used with the trading bot, with options to show all exchanges or format the output in a single column.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-exchanges.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade list-exchanges [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-1] [-a]\n```\n\n----------------------------------------\n\nTITLE: Running Hyperopt with Protection Space in Freqtrade\nDESCRIPTION: Command to run hyperopt focusing on the protection space using SharpeHyperOptLossDaily as the loss function for the MyAwesomeStrategy strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt --hyperopt-loss SharpeHyperOptLossDaily --strategy MyAwesomeStrategy --spaces protection\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Custom Data Directory\nDESCRIPTION: Run backtesting using historical data from a specific directory location.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --strategy AwesomeStrategy --datadir user_data/data/binance-20180101\n```\n\n----------------------------------------\n\nTITLE: Plotting Dataframe from Backtesting Results in Freqtrade\nDESCRIPTION: Shows how to plot a dataframe using backtesting results stored in a JSON file using the plot-dataframe command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-dataframe --strategy AwesomeStrategy --export-filename user_data/backtest_results/backtest-result.json -p BTC/ETH\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script and Virtual Environment\nDESCRIPTION: Commands for running the setup script and activating the virtual environment.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# --install, Install freqtrade from scratch\n./setup.sh -i\n\n# activate virtual environment\nsource ./.venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing FreqAI RL Dependencies with pip\nDESCRIPTION: Requirements file that specifies Python package dependencies for FreqAI's reinforcement learning capabilities. Includes conditional installations based on platform (darwin/x86_64) and references additional requirement files.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements-freqai-rl.txt#2025-04-15_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# Include all requirements to run the bot.\n-r requirements-freqai.txt\n\n# Required for freqai-rl\ntorch==2.6.0; sys_platform != 'darwin' or platform_machine != 'x86_64'\ngymnasium==0.29.1\n# SB3 >=2.5.0 depends on torch 2.3.0 - which implies it dropped support x86 macos\nstable_baselines3==2.4.1; sys_platform == 'darwin' and platform_machine == 'x86_64'\nstable_baselines3==2.5.0; sys_platform != 'darwin' or platform_machine != 'x86_64'\nsb3_contrib>=2.2.1\n# Progress bar for stable-baselines3 and sb3-contrib\ntqdm==4.67.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Status Table in Telegram for Freqtrade Bot\nDESCRIPTION: Shows the format of the status table returned by the /status table command. It displays open trades with their ID, direction (Long/Short), trading pair, duration, and profit percentage.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```\nID L/S    Pair     Since   Profit\n----    --------  -------  --------\n  67 L   SC/BTC    1 d      13.33%\n 123 S   CVC/BTC   1 h      12.95%\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning Freqtrade Repository\nDESCRIPTION: Commands to clone the Freqtrade repository and switch between stable and develop branches.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Download `develop` branch of freqtrade repository\ngit clone https://github.com/freqtrade/freqtrade.git\n\n# Enter downloaded directory\ncd freqtrade\n\n# your choice (1): novice user\ngit checkout stable\n\n# your choice (2): advanced user\ngit checkout develop\n```\n\n----------------------------------------\n\nTITLE: Listing Pairs with Multiple Base and Quote Currencies\nDESCRIPTION: Lists all pairs on Binance with BTC or ETH as base currencies and USDT or USD as quote currencies using a specific config file. Outputs in a human-readable list with summary.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade list-pairs -c config_binance.json --all --base BTC ETH --quote USDT USD --print-list\n```\n\n----------------------------------------\n\nTITLE: Defining Reinforcement Learning Parameters in Markdown\nDESCRIPTION: Documentation table defining the configuration parameters for Reinforcement Learning models in FreqAI, including model types, training cycles, and policy configurations\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-parameter-table.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  Parameter | Description |\n|------------|-------------|\n|  |  **Reinforcement Learning Parameters within the `freqai.rl_config` sub dictionary**\n| `rl_config` | A dictionary containing the control parameters for a Reinforcement Learning model. <br> **Datatype:** Dictionary.\n| `train_cycles` | Training time steps will be set based on the `train_cycles * number of training data points. <br> **Datatype:** Integer.\n| `max_trade_duration_candles`| Guides the agent training to keep trades below desired length. Example usage shown in `prediction_models/ReinforcementLearner.py` within the customizable `calculate_reward()` function. <br> **Datatype:** int.\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Timerange Filter\nDESCRIPTION: Run backtesting using data from a specific date range.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --timerange=20190501-\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Strategy Updater CLI Usage and Options\nDESCRIPTION: This code snippet shows the usage syntax and available options for the Freqtrade strategy updater command-line interface. It includes options for strategy selection, path specification, and common arguments for verbosity, logging, and configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/strategy-updater.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade strategy-updater [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                  [--strategy-path PATH]\n                                  [--recursive-strategy-search]\n\noptions:\n  -h, --help            show this help message and exit\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        Provide a space-separated list of strategies to\n                        backtest. Please note that timeframe needs to be set\n                        either in config or via command line. When using this\n                        together with `--export trades`, the strategy-name is\n                        injected into the filename (so `backtest-data.json`\n                        becomes `backtest-data-SampleStrategy.json`\n  --strategy-path PATH  Specify additional strategy lookup path.\n  --recursive-strategy-search\n                        Recursively search for a strategy in the strategies\n                        folder.\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Running Hyperopt with Timerange\nDESCRIPTION: Demonstrates how to run Freqtrade's hyperopt module with a specific configuration, strategy, number of epochs, and date range.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade --config config.json --strategy SampleStrategy --hyperopt SampleHyperopt -e 1000 --timerange 20190601-20200601\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Schema Reference to Configuration\nDESCRIPTION: Example showing how to add a JSON schema reference to a Freqtrade configuration file. This enables autocompletion and validation in editors that support JSON schema.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://schema.freqtrade.io/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PyTorch Trainer Parameters in Markdown\nDESCRIPTION: Documentation table defining specific trainer parameters for PyTorch including epochs, steps, and batch size configurations\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-parameter-table.md#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description |\n|--------------|-------------|\n|              |  **Model training parameters within the `freqai.model_training_parameters.model_kwargs` sub dictionary**\n| `n_epochs`   | The `n_epochs` parameter is a crucial setting in the PyTorch training loop that determines the number of times the entire training dataset will be used to update the model's parameters. An epoch represents one full pass through the entire training dataset. Overrides `n_steps`. Either `n_epochs` or `n_steps` must be set. <br><br> **Datatype:** int. optional. <br> Default: `10`.\n| `n_steps`    | An alternative way of setting `n_epochs` -  the number of training iterations to run. Iteration here refer to the number of times we call `optimizer.step()`. Ignored if `n_epochs` is set. A simplified version of the function: <br><br> n_epochs = n_steps / (n_obs / batch_size) <br><br> The motivation here is that `n_steps` is easier to optimize and keep stable across different n_obs - the number of data points.  <br> <br> **Datatype:** int. optional. <br> Default: `None`.\n| `batch_size` | The size of the batches to use during training. <br><br> **Datatype:** int. <br> Default: `64`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Recursive Analysis Results Table in Markdown\nDESCRIPTION: This code snippet shows an example output of the recursive-analysis command in Freqtrade. It displays a table with indicators and their variance percentages for different startup candle counts.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/recursive-analysis.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| indicators   | 20      | 40      | 80     | 100    | 150     | 300     | 999    |\n|--------------+---------+---------+--------+--------+---------+---------+--------|\n| rsi_30       | nan%    | -6.025% | 0.612% | 0.828% | -0.140% | 0.000%  | 0.000% |\n| rsi_14       | 24.141% | -0.876% | 0.070% | 0.007% | -0.000% | -0.000% | -      |\n```\n\n----------------------------------------\n\nTITLE: Opening an SQLite Database\nDESCRIPTION: Commands to start SQLite3 and open a database file for querying.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3\n.open <filepath>\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Steps for Freqtrade\nDESCRIPTION: Commands for manual installation including virtual environment setup, ta-lib installation, and package dependencies\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/windows_installation.md#2025-04-15_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ncd \\path\\freqtrade\npython -m venv .venv\n.venv\\Scripts\\activate.ps1\n# optionally install ta-lib from wheel\n# Eventually adjust the below filename to match the downloaded wheel\npip install --find-links build_helpers\\ TA-Lib -U\npip install -r requirements.txt\npip install -e .\nfreqtrade\n```\n\n----------------------------------------\n\nTITLE: Plotting Profit from Custom Database in Freqtrade\nDESCRIPTION: Demonstrates how to plot profit data from a custom SQLite database using the plot-profit command for a specific trading pair.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade plot-profit  -p LTC/BTC --db-url sqlite:///tradesv3.sqlite --trade-source DB\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Convert Trade Data Command Usage\nDESCRIPTION: This code snippet shows the usage information and available options for the 'freqtrade convert-trade-data' command. It includes specific options for data conversion as well as common arguments used in Freqtrade commands.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/convert-trade-data.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade convert-trade-data [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-p PAIRS [PAIRS ...]] --format-from\n                                    {json,jsongz,feather,parquet,kraken_csv}\n                                    --format-to {json,jsongz,feather,parquet}\n                                    [--erase] [--exchange EXCHANGE]\n\noptions:\n  -h, --help            show this help message and exit\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        Limit command to these pairs. Pairs are space-\n                        separated.\n  --format-from {json,jsongz,feather,parquet,kraken_csv}\n                        Source format for data conversion.\n  --format-to {json,jsongz,feather,parquet}\n                        Destination format for data conversion.\n  --erase               Clean all existing data for the selected\n                        exchange/pairs/timeframes.\n  --exchange EXCHANGE   Exchange name. Only valid if no config is provided.\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Backtesting with Custom Fee\nDESCRIPTION: Execute backtesting with a custom fee ratio of 0.001 (0.1%).\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting --fee 0.001\n```\n\n----------------------------------------\n\nTITLE: Analyzing Specific Entry and Exit Tags\nDESCRIPTION: Command to analyze specific entry and exit signals with selected analysis groups\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --analysis-groups 0 2 --enter-reason-list enter_tag_a enter_tag_b --exit-reason-list roi custom_exit_tag_a stop_loss\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Structure in SQLite\nDESCRIPTION: SQLite command to show the schema/structure of a specific table.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n.schema <table_name>\n```\n\n----------------------------------------\n\nTITLE: Getting Open Trade Count in Python\nDESCRIPTION: Example showing how to retrieve the number of currently open trades using get_open_trade_count method.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/trade-object.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.persistence import Trade\n# ...\nopen_trades = Trade.get_open_trade_count()\n```\n\n----------------------------------------\n\nTITLE: Cloning Freqtrade Repository using Git\nDESCRIPTION: Command to clone the Freqtrade repository from GitHub to local machine\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/windows_installation.md#2025-04-15_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngit clone https://github.com/freqtrade/freqtrade.git\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Backtesting Summary Metrics Output Example\nDESCRIPTION: An example of the summary metrics table generated after running a backtest in Freqtrade. This table shows comprehensive performance statistics including profitability metrics, trade counts, drawdown information, and market comparison.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n================== SUMMARY METRICS ==================\n| Metric                      | Value               |\n|-----------------------------+---------------------|\n| Backtesting from            | 2019-01-01 00:00:00 |\n| Backtesting to              | 2019-05-01 00:00:00 |\n| Trading Mode                | Spot                |\n| Max open trades             | 3                   |\n|                             |                     |\n| Total/Daily Avg Trades      | 429 / 3.575         |\n| Starting balance            | 0.01000000 BTC      |\n| Final balance               | 0.01762792 BTC      |\n| Absolute profit             | 0.00762792 BTC      |\n| Total profit %              | 76.2%               |\n| CAGR %                      | 460.87%             |\n| Sortino                     | 1.88                |\n| Sharpe                      | 2.97                |\n| Calmar                      | 6.29                |\n| SQN                         | 2.45                |\n| Profit factor               | 1.11                |\n| Expectancy (Ratio)          | -0.15 (-0.05)       |\n| Avg. stake amount           | 0.001      BTC      |\n| Total trade volume          | 0.429      BTC      |\n|                             |                     |\n| Long / Short                | 352 / 77            |\n| Total profit Long %         | 1250.58%            |\n| Total profit Short %        | -15.02%             |\n| Absolute profit Long        | 0.00838792 BTC      |\n| Absolute profit Short       | -0.00076 BTC        |\n|                             |                     |\n| Best Pair                   | LSK/BTC 26.26%      |\n| Worst Pair                  | ZEC/BTC -10.18%     |\n| Best Trade                  | LSK/BTC 4.25%       |\n| Worst Trade                 | ZEC/BTC -10.25%     |\n| Best day                    | 0.00076 BTC         |\n| Worst day                   | -0.00036 BTC        |\n| Days win/draw/lose          | 12 / 82 / 25        |\n| Avg. Duration Winners       | 4:23:00             |\n| Avg. Duration Loser         | 6:55:00             |\n| Max Consecutive Wins / Loss | 3 / 4               |\n| Rejected Entry signals      | 3089                |\n| Entry/Exit Timeouts         | 0 / 0               |\n| Canceled Trade Entries      | 34                  |\n| Canceled Entry Orders       | 123                 |\n| Replaced Entry Orders       | 89                  |\n|                             |                     |\n| Min balance                 | 0.00945123 BTC      |\n| Max balance                 | 0.01846651 BTC      |\n| Max % of account underwater | 25.19%              |\n| Absolute Drawdown (Account) | 13.33%              |\n| Drawdown                    | 0.0015 BTC          |\n| Drawdown high               | 0.0013 BTC          |\n| Drawdown low                | -0.0002 BTC         |\n| Drawdown Start              | 2019-02-15 14:10:00 |\n| Drawdown End                | 2019-04-11 18:15:00 |\n| Market change               | -5.88%              |\n=====================================================\n```\n\n----------------------------------------\n\nTITLE: Optimizing DataFrame Performance\nDESCRIPTION: Demonstrates how to optimize DataFrame operations to avoid fragmentation warnings and improve performance.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nframes = [dataframe]\nfor val in self.buy_ema_short.range:\n    frames.append(DataFrame({\n        f'ema_short_{val}': ta.EMA(dataframe, timeperiod=val)\n    }))\n\n# Combine all dataframes, and reassign the original dataframe column\ndataframe = pd.concat(frames, axis=1)\n```\n\n----------------------------------------\n\nTITLE: Searching Bot Logs with Process Substitution\nDESCRIPTION: Shows how to use Bash process substitution syntax to search Freqtrade logs for specific content.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade --some-options 2> >(grep 'something') >/dev/null\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade --some-options 2> >(grep -v 'something' 1>&2)\n```\n\n----------------------------------------\n\nTITLE: Printing Best Hyperopt Epoch as JSON\nDESCRIPTION: Outputs the best hyperopt epoch results in JSON format without headers. This is useful for programmatic processing of optimization results.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade hyperopt-show --best -n -1 --print-json --no-header\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorized Telegram Users for Freqtrade\nDESCRIPTION: JSON configuration example showing how to restrict bot command access to specific users by setting the authorized_users parameter. Only users with IDs listed in this array will be able to control the bot.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n   \"chat_id\": \"-1001332619709\",\n   \"topic_id\": \"3\",\n   \"authorized_users\": [\"1234567\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Passwords in Python\nDESCRIPTION: Python code snippet to generate a secure password or JWT secret key using the secrets module.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport secrets\nsecrets.token_hex()\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Requirements for Freqtrade Client Library\nDESCRIPTION: This code snippet defines the required Python packages and their versions for the Freqtrade client library. It specifies requests version 2.32.3 for HTTP operations and python-rapidjson version 1.20 for efficient JSON processing.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/ft_client/requirements.txt#2025-04-15_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Requirements for freqtrade client library\nrequests==2.32.3\npython-rapidjson==1.20\n```\n\n----------------------------------------\n\nTITLE: Running Freqtrade with Custom Database URL\nDESCRIPTION: Command to run Freqtrade with a specified SQLite database URL for storing trading data, useful in both dry-run and production modes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade -c config.json --db-url sqlite:///tradesv3.dry_run.sqlite\n```\n\n----------------------------------------\n\nTITLE: Analyzing Specific Backtest Results\nDESCRIPTION: Command to analyze a specific backtest result file using the export filename\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --export-filename=/tmp/mystrat_backtest-2022-06-14_16-28-32.json\n```\n\n----------------------------------------\n\nTITLE: Data Format Conversion - Bash\nDESCRIPTION: Command to convert OHLCV data from JSON to JSONGZ format with cleanup.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade convert-data --format-from json --format-to jsongz --datadir ~/.freqtrade/data/binance -t 5m 15m --erase\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Token in API Server Configuration\nDESCRIPTION: Shows how to configure the WebSocket token in the Freqtrade API server configuration. The token is used to authenticate WebSocket connections to the message endpoint.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"api_server\": {\n    \"enabled\": true,\n    \"listen_ip_address\": \"127.0.0.1\",\n    \"listen_port\": 8080,\n    \"verbosity\": \"error\",\n    \"enable_openapi\": false,\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [],\n    \"username\": \"Freqtrader\",\n    \"password\": \"SuperSecret1!\",\n    \"ws_token\": \"hZ-y58LXyX_HZ8O1cJzVyN6ePWrLpNQv4Q\" // <-----\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Lists via Environment Variables in Bash\nDESCRIPTION: Example showing how to set JSON lists in Freqtrade's configuration through environment variables. The value must be formatted as a valid JSON string to be properly parsed by the application.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport FREQTRADE__EXCHANGE__PAIR_WHITELIST='[\"BTC/USDT\", \"ETH/USDT\"]'\n```\n\n----------------------------------------\n\nTITLE: Importing Lookahead Analysis Command Reference in Markdown\nDESCRIPTION: This snippet imports the lookahead-analysis command reference documentation from an external file using MkDocs syntax.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/lookahead-analysis.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"commands/lookahead-analysis.md\"\n```\n\n----------------------------------------\n\nTITLE: Trades to OHLCV Conversion - Bash\nDESCRIPTION: Command to convert trade data to OHLCV format for multiple timeframes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trades-to-ohlcv --exchange kraken -t 5m 1h 1d --pairs BTC/EUR ETH/EUR\n```\n\n----------------------------------------\n\nTITLE: Patching Conda libta-lib on Linux\nDESCRIPTION: Commands to patch the libta-lib library specifically for Linux Conda installations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Ensure that the environment is active!\nconda activate freqtrade\n\ncd build_helpers\nbash install_ta-lib.sh ${CONDA_PREFIX} nosudo\n```\n\n----------------------------------------\n\nTITLE: Configuring Dissimilarity Index (DI) for Outlier Detection in FreqAI\nDESCRIPTION: Adds the DissimilarityIndex step to the feature pipeline with a threshold of 1. This configuration enables FreqAI to remove outlier data points from training/test datasets using the Dissimilarity Index, which quantifies prediction uncertainty by measuring distances between data points.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-feature-engineering.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"freqai\": {\n        \"feature_parameters\" : {\n            \"DI_threshold\": 1\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Pairs with Quote Currency in JSON Format\nDESCRIPTION: Prints active pairs with USD quote currency on the default exchange (Binance) in JSON format. Uses the list-pairs command with the --quote and --print-json flags.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade list-pairs --quote USD --print-json\n```\n\n----------------------------------------\n\nTITLE: User Data Directory Configuration for Jupyter\nDESCRIPTION: JSON configuration snippet to specify the user_data_dir for Freqtrade when running in Jupyter notebooks. This avoids issues with relative paths in interactive environments.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-analysis.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user_data_dir\": \"~/.freqtrade/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Static Protection Configuration in Freqtrade Strategy\nDESCRIPTION: Example of a strategy with static protection configuration using a class variable before migration to property-based approach.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    protections = [\n        {\n            \"method\": \"CooldownPeriod\",\n            \"stop_duration_candles\": 4\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Running Freqtrade in Dry Mode with Default Config\nDESCRIPTION: Command to run Freqtrade in dry-run mode using the default configuration file from the current directory.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/bot-usage.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade -c ./config.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Backtesting Analysis CLI Usage and Options\nDESCRIPTION: This code snippet shows the usage syntax and available options for the 'freqtrade backtesting-analysis' command. It includes parameters for specifying analysis groups, filtering signals, selecting indicators, and controlling output formats.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/backtesting-analysis.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade backtesting-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                      [-V] [-c PATH] [-d PATH]\n                                      [--userdir PATH]\n                                      [--export-filename PATH]\n                                      [--analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]]\n                                      [--enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]]\n                                      [--exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]]\n                                      [--indicator-list INDICATOR_LIST [INDICATOR_LIST ...]]\n                                      [--entry-only] [--exit-only]\n                                      [--timerange TIMERANGE]\n                                      [--rejected-signals] [--analysis-to-csv]\n                                      [--analysis-csv-path ANALYSIS_CSV_PATH]\n\noptions:\n  -h, --help            show this help message and exit\n  --export-filename PATH, --backtest-filename PATH\n                        Use this filename for backtest results.Requires\n                        `--export` to be set as well. Example: `--export-filen\n                        ame=user_data/backtest_results/backtest_today.json`\n  --analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]\n                        grouping output - 0: simple wins/losses by enter tag,\n                        1: by enter_tag, 2: by enter_tag and exit_tag, 3: by\n                        pair and enter_tag, 4: by pair, enter_ and exit_tag\n                        (this can get quite large), 5: by exit_tag\n  --enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]\n                        Space separated list of entry signals to analyse.\n                        Default: all. e.g. 'entry_tag_a entry_tag_b'\n  --exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]\n                        Space separated list of exit signals to analyse.\n                        Default: all. e.g. 'exit_tag_a roi stop_loss\n                        trailing_stop_loss'\n  --indicator-list INDICATOR_LIST [INDICATOR_LIST ...]\n                        Space separated list of indicators to analyse. e.g.\n                        'close rsi bb_lowerband profit_abs'\n  --entry-only          Only analyze entry signals.\n  --exit-only           Only analyze exit signals.\n  --timerange TIMERANGE\n                        Specify what timerange of data to use.\n  --rejected-signals    Analyse rejected signals\n  --analysis-to-csv     Save selected analysis tables to individual CSVs\n  --analysis-csv-path ANALYSIS_CSV_PATH\n                        Specify a path to save the analysis CSVs if\n                        --analysis-to-csv is enabled. Default:\n                        user_data/basktesting_results/\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Setting Multi-class Classification Target for Price Direction in FreqAI\nDESCRIPTION: This code snippet creates a multi-class classification target with 'up', 'down', and 'same' labels to predict price direction 100 candles into the future. It first creates the binary labels and then adds the 'same' category for unchanged prices.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-configuration.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf['&s-up_or_down'] = np.where( df[\"close\"].shift(-100) > df[\"close\"], 'up', 'down')\ndf['&s-up_or_down'] = np.where( df[\"close\"].shift(-100) == df[\"close\"], 'same', df['&s-up_or_down'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Purging in FreqAI\nDESCRIPTION: JSON configuration that enables automatic purging of old models to save disk space. This example keeps only the four most recently trained models and deletes older ones.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-running.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"freqai\": {\n        \"purge_old_models\": 4,\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Freqtrade\nDESCRIPTION: This code snippet lists all the required Python packages and their specific versions for the Freqtrade project. It includes libraries for data processing, cryptocurrency trading, API interactions, and various utilities necessary for the project's functionality.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements.txt#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy==1.26.4\npandas==2.2.3\nbottleneck==1.4.2\nnumexpr==2.10.2\npandas-ta==0.3.14b\n\nccxt==4.4.75\ncryptography==44.0.2\naiohttp==3.9.5\nSQLAlchemy==2.0.40\npython-telegram-bot==22.0\n# can't be hard-pinned due to telegram-bot pinning httpx with ~\nhttpx>=0.24.1\nhumanize==4.12.2\ncachetools==5.5.2\nrequests==2.32.3\nurllib3==2.4.0\njsonschema==4.23.0\nTA-Lib==0.4.38\ntechnical==1.5.0\ntabulate==0.9.0\npycoingecko==3.2.0\njinja2==3.1.6\njoblib==1.4.2\nrich==14.0.0\npyarrow==19.0.1; platform_machine != 'armv7l'\n\n# find first, C search in arrays\npy_find_1st==1.1.7\n\n# Load ticker files 30% faster\npython-rapidjson==1.20\n# Properly format api responses\norjson==3.10.16\n\n# Notify systemd\nsdnotify==0.3.2\n\n# API Server\nfastapi==0.115.12\npydantic==2.11.3\nuvicorn==0.34.1\npyjwt==2.10.1\naiofiles==24.1.0\npsutil==7.0.0\n\n# Building config files interactively\nquestionary==2.1.0\nprompt-toolkit==3.0.50\n# Extensions to datetime library\npython-dateutil==2.9.0.post0\npytz==2025.2\n\n#Futures\nschedule==1.2.2\n\n#WS Messages\nwebsockets==15.0.1\njanus==2.0.0\n\nast-comments==1.2.2\npackaging==24.2\n```\n\n----------------------------------------\n\nTITLE: FreqTrade Common Command Line Arguments\nDESCRIPTION: Documentation of common arguments for FreqTrade commands, including verbosity, logging, configuration file path, and data directory settings. These options can be used with various FreqTrade commands, not just backtesting.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/backtesting.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: FreqAI File Structure Example\nDESCRIPTION: Demonstrates the directory structure used by FreqAI to organize model files, prediction data, and metadata. This structure is automatically generated based on the model identifier set in the configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-developers.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n├── models\n│   └── unique-id\n│       ├── config_freqai.example.json\n│       ├── historic_predictions.backup.pkl\n│       ├── historic_predictions.pkl\n│       ├── pair_dictionary.json\n│       ├── sub-train-1INCH_1662821319\n│       │   ├── cb_1inch_1662821319_metadata.json\n│       │   ├── cb_1inch_1662821319_model.joblib\n│       │   ├── cb_1inch_1662821319_pca_object.pkl\n│       │   ├── cb_1inch_1662821319_svm_model.joblib\n│       │   ├── cb_1inch_1662821319_trained_dates_df.pkl\n│       │   └── cb_1inch_1662821319_trained_df.pkl\n│       ├── sub-train-1INCH_1662821371\n│       │   ├── cb_1inch_1662821371_metadata.json\n│       │   ├── cb_1inch_1662821371_model.joblib\n│       │   ├── cb_1inch_1662821371_pca_object.pkl\n│       │   ├── cb_1inch_1662821371_svm_model.joblib\n│       │   ├── cb_1inch_1662821371_trained_dates_df.pkl\n│       │   └── cb_1inch_1662821371_trained_df.pkl\n│       ├── sub-train-ADA_1662821344\n│       │   ├── cb_ada_1662821344_metadata.json\n│       │   ├── cb_ada_1662821344_model.joblib\n│       │   ├── cb_ada_1662821344_pca_object.pkl\n│       │   ├── cb_ada_1662821344_svm_model.joblib\n│       │   ├── cb_ada_1662821344_trained_dates_df.pkl\n│       │   └── cb_ada_1662821344_trained_df.pkl\n│       └── sub-train-ADA_1662821399\n│           ├── cb_ada_1662821399_metadata.json\n│           ├── cb_ada_1662821399_model.joblib\n│           ├── cb_ada_1662821399_pca_object.pkl\n│           ├── cb_ada_1662821399_svm_model.joblib\n│           ├── cb_ada_1662821399_trained_dates_df.pkl\n│           └── cb_ada_1662821399_trained_df.pkl\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage and Options for Freqtrade List-Pairs Command\nDESCRIPTION: This snippet shows the usage syntax and available options for the 'freqtrade list-pairs' command. It includes options for specifying the exchange, output format, filtering by base and quote currencies, and selecting the trading mode.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-pairs.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade list-pairs [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                            [-c PATH] [-d PATH] [--userdir PATH]\n                            [--exchange EXCHANGE] [--print-list]\n                            [--print-json] [-1] [--print-csv]\n                            [--base BASE_CURRENCY [BASE_CURRENCY ...]]\n                            [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]] [-a]\n                            [--trading-mode {spot,margin,futures}]\n\noptions:\n  -h, --help            show this help message and exit\n  --exchange EXCHANGE   Exchange name. Only valid if no config is provided.\n  --print-list          Print list of pairs or market symbols. By default data\n                        is printed in the tabular format.\n  --print-json          Print list of pairs or market symbols in JSON format.\n  -1, --one-column      Print output in one column.\n  --print-csv           Print exchange pair or market data in the csv format.\n  --base BASE_CURRENCY [BASE_CURRENCY ...]\n                        Specify base currency(-ies). Space-separated list.\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        Specify quote currency(-ies). Space-separated list.\n  -a, --all             Print all pairs or market symbols. By default only\n                        active ones are shown.\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        Select Trading mode\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdir directory.\n```\n\n----------------------------------------\n\nTITLE: Implementing Stoploss in a Strategy\nDESCRIPTION: Example of adding the optimized stoploss value to a trading strategy. The stoploss defines when to exit a trade to limit losses.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    # Optimal stoploss designed for the strategy\n    # This attribute will be overridden if the config file contains \"stoploss\"\n    stoploss = -0.27996\n```\n\n----------------------------------------\n\nTITLE: Exchange API Configuration for Simulation\nDESCRIPTION: JSON configuration for exchange connection in dry-run mode. In dry-run, API credentials can be empty or fake as no real orders will be placed.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"binance\",\n    \"key\": \"key\",\n    \"secret\": \"secret\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default Telegram Custom Keyboard Configuration for Freqtrade\nDESCRIPTION: Python representation of the default custom keyboard layout for Telegram in Freqtrade. This keyboard provides shortcut buttons for common commands arranged in three rows.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n[\n    [\"/daily\", \"/profit\", \"/balance\"], # row 1, 3 commands\n    [\"/status\", \"/status table\", \"/performance\"], # row 2, 3 commands\n    [\"/count\", \"/start\", \"/stop\", \"/help\"] # row 3, 4 commands\n]\n```\n\n----------------------------------------\n\nTITLE: Installing FreqAI Dependencies\nDESCRIPTION: Command to manually install FreqAI dependencies if not installed during initial Freqtrade setup.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-freqai.txt\n```\n\n----------------------------------------\n\nTITLE: Kucoin Exchange Configuration\nDESCRIPTION: JSON configuration for Kucoin exchange API setup including required passphrase parameter.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"kucoin\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"password\": \"your_exchange_api_key_password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Freqtrade List-Markets Command\nDESCRIPTION: Command-line usage syntax for freqtrade's list-markets command with all available options. This command allows users to list trading pairs available on exchanges with various filtering and output format options.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-markets.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade list-markets [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                              [-c PATH] [-d PATH] [--userdir PATH]\n                              [--exchange EXCHANGE] [--print-list]\n                              [--print-json] [-1] [--print-csv]\n                              [--base BASE_CURRENCY [BASE_CURRENCY ...]]\n                              [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                              [-a] [--trading-mode {spot,margin,futures}]\n```\n\n----------------------------------------\n\nTITLE: Property-Based Protection Configuration in Freqtrade Strategy\nDESCRIPTION: The converted version of the static protection configuration using a property method, which enables more flexibility and optimization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    \n    @property\n    def protections(self):\n        return [\n            {\n                \"method\": \"CooldownPeriod\",\n                \"stop_duration_candles\": 4\n            }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Loading Backtest Results Directory in Python\nDESCRIPTION: Sets up the path to the backtest results directory for further analysis. This can point to either a directory containing backtest results or a specific backtest file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.data.btanalysis import load_backtest_data, load_backtest_stats\n\n\n# if backtest_dir points to a directory, it'll automatically load the last backtest file.\nbacktest_dir = config[\"user_data_dir\"] / \"backtest_results\"\n# backtest_dir can also point to a specific file\n# backtest_dir = (\n#   config[\"user_data_dir\"] / \"backtest_results/backtest-result-2020-07-01_20-04-22.json\"\n# )\n```\n\n----------------------------------------\n\nTITLE: Using Pairlists in Freqtrade (JSON)\nDESCRIPTION: Example of the new 'pairlists' configuration section, which replaces the deprecated 'pairlist' section and allows specifying a sequence of pairlists.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/deprecated.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n  // New configuration format\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Freqtrade Lookahead Analysis Command Usage in Command Line\nDESCRIPTION: This code snippet shows the usage syntax and available options for the 'freqtrade lookahead-analysis' command. It includes parameters for timeframes, data handling, trading configuration, and output customization.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/lookahead-analysis.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade lookahead-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [--max-open-trades INT]\n                                    [--stake-amount STAKE_AMOUNT]\n                                    [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                                    [--enable-protections]\n                                    [--dry-run-wallet DRY_RUN_WALLET]\n                                    [--timeframe-detail TIMEFRAME_DETAIL]\n                                    [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                    [--export {none,trades,signals}]\n                                    [--export-filename PATH]\n                                    [--freqai-backtest-live-models]\n                                    [--minimum-trade-amount INT]\n                                    [--targeted-trade-amount INT]\n                                    [--lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME]\n\noptions:\n  -h, --help            show this help message and exit\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        Specify timeframe (`1m`, `5m`, `30m`, `1h`, `1d`).\n  --timerange TIMERANGE\n                        Specify what timerange of data to use.\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        Storage format for downloaded candle (OHLCV) data.\n                        (default: `feather`).\n  --max-open-trades INT\n                        Override the value of the `max_open_trades`\n                        configuration setting.\n  --stake-amount STAKE_AMOUNT\n                        Override the value of the `stake_amount` configuration\n                        setting.\n  --fee FLOAT           Specify fee ratio. Will be applied twice (on trade\n                        entry and exit).\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        Limit command to these pairs. Pairs are space-\n                        separated.\n  --enable-protections, --enableprotections\n                        Enable protections for backtesting.Will slow\n                        backtesting down by a considerable amount, but will\n                        include configured protections\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        Starting balance, used for backtesting / hyperopt and\n                        dry-runs.\n  --timeframe-detail TIMEFRAME_DETAIL\n                        Specify detail timeframe for backtesting (`1m`, `5m`,\n                        `30m`, `1h`, `1d`).\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        Provide a space-separated list of strategies to\n                        backtest. Please note that timeframe needs to be set\n                        either in config or via command line. When using this\n                        together with `--export trades`, the strategy-name is\n                        injected into the filename (so `backtest-data.json`\n                        becomes `backtest-data-SampleStrategy.json`\n  --export {none,trades,signals}\n                        Export backtest results (default: trades).\n  --export-filename PATH, --backtest-filename PATH\n                        Use this filename for backtest results.Requires\n                        `--export` to be set as well. Example: `--export-filen\n                        ame=user_data/backtest_results/backtest_today.json`\n  --freqai-backtest-live-models\n                        Run backtest with ready models.\n  --minimum-trade-amount INT\n                        Minimum trade amount for lookahead-analysis\n  --targeted-trade-amount INT\n                        Targeted trade amount for lookahead analysis\n  --lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME\n                        Use this csv-filename to store lookahead-analysis-\n                        results\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n\nStrategy arguments:\n  -s NAME, --strategy NAME\n                        Specify strategy class name which will be used by the\n                        bot.\n  --strategy-path PATH  Specify additional strategy lookup path.\n  --recursive-strategy-search\n                        Recursively search for a strategy in the strategies\n                        folder.\n  --freqaimodel NAME    Specify a custom freqaimodels.\n  --freqaimodel-path PATH\n                        Specify additional lookup path for freqaimodels.\n```\n\n----------------------------------------\n\nTITLE: OKX Exchange Configuration\nDESCRIPTION: JSON configuration for OKX exchange API setup including required passphrase parameter.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"exchange\": {\n    \"name\": \"okx\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"password\": \"your_exchange_api_key_password\"\n}\n```\n\n----------------------------------------\n\nTITLE: FreqTrade List FreqAI Models Command Usage and Options\nDESCRIPTION: This snippet outlines the usage syntax and available options for the 'freqtrade list-freqaimodels' command. It includes command-specific options like specifying the FreqAI model path and output format, as well as common arguments such as verbose mode, config file specification, and data directory paths.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-freqaimodels.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade list-freqaimodels [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--freqaimodel-path PATH] [-1]\n\noptions:\n  -h, --help            show this help message and exit\n  --freqaimodel-path PATH\n                        Specify additional lookup path for freqaimodels.\n  -1, --one-column      Print output in one column.\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Messages in Freqtrade Strategies\nDESCRIPTION: Example of how to implement logging in a Freqtrade strategy to output debug messages during hyperopt runs. Uses the Python logging module to ensure messages are properly displayed in the hyperopt output.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/hyperopt.md#2025-04-15_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass MyAwesomeStrategy(IStrategy):\n    ...\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        logger.info(\"This is a debug message\")\n        ...\n```\n\n----------------------------------------\n\nTITLE: Minimal FreqTrade Client Configuration in JSON\nDESCRIPTION: Basic JSON configuration for the FreqTrade client to connect to the API server.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/rest-api.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"0.0.0.0\",\n        \"listen_port\": 8080,\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Monthly Profit Statistics in Markdown\nDESCRIPTION: This snippet demonstrates the format for showing monthly profit statistics using the /monthly command. It includes columns for the month, number of trades, profit in BTC and USD, and profit percentage.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```\nMonth (count)  Profit BTC      Profit USD    Profit %\n-------------  --------------  ------------    ----------\n2018-01 (20)    0.00224175 BTC  29,142 USD  4.98%\n2017-12 (5)    0.00033131 BTC   4,307 USD   0.00%\n2017-11 (10)    0.00269130 BTC  34.986 USD  5.10%\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring OffsetFilter in Freqtrade\nDESCRIPTION: JSON configuration for OffsetFilter, which offsets an incoming pairlist by a given offset value. This example removes the first 10 pairs from the pairlist and takes the next 20 pairs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    // ...\n    {\n        \"method\": \"OffsetFilter\",\n        \"offset\": 10,\n        \"number_assets\": 20\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Configuration in Freqtrade\nDESCRIPTION: Default logging configuration with colored terminal output and rotating file handler support. Includes basic and standard formatters with console and file handlers.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_config\": {\n      \"version\": 1,\n      \"formatters\": {\n          \"basic\": {\n              \"format\": \"%(message)s\"\n          },\n          \"standard\": {\n              \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n          }\n      },\n      \"handlers\": {\n          \"console\": {\n              \"class\": \"freqtrade.loggers.ft_rich_handler.FtRichHandler\",\n              \"formatter\": \"basic\"\n          },\n          \"file\": {\n              \"class\": \"logging.handlers.RotatingFileHandler\",\n              \"formatter\": \"standard\",\n              \"maxBytes\": 10485760,\n              \"backupCount\": 10\n          }\n      },\n      \"root\": {\n          \"handlers\": [\n              \"console\"\n          ],\n          \"level\": \"INFO\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the hyperopt-show command in FreqTrade\nDESCRIPTION: The hyperopt-show command allows users to view the results of hyperoptimization runs. It offers various options to filter epochs (--best, --profitable), specify epoch indices (-n), choose output format (--print-json), and analyze performance breakdowns by time periods.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/hyperopt-show.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade hyperopt-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [-n INT] [--print-json]\n                               [--hyperopt-filename FILENAME] [--no-header]\n                               [--disable-param-export]\n                               [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n```\n\n----------------------------------------\n\nTITLE: Custom Gaussian Process Estimator for Freqtrade Hyperopt\nDESCRIPTION: Demonstrates an advanced implementation of a custom Gaussian Process Regressor with tailored kernels for hyperopt. This example shows how to create complex, multi-component kernels with specific length scales for each dimension.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeStrategy(IStrategy):\n    class HyperOpt:\n        def generate_estimator(dimensions: List['Dimension'], **kwargs):\n            from skopt.utils import cook_estimator\n            from skopt.learning.gaussian_process.kernels import (Matern, ConstantKernel)\n            kernel_bounds = (0.0001, 10000)\n            kernel = (\n                ConstantKernel(1.0, kernel_bounds) * \n                Matern(length_scale=np.ones(len(dimensions)), length_scale_bounds=[kernel_bounds for d in dimensions], nu=2.5)\n            )\n            kernel += (\n                ConstantKernel(1.0, kernel_bounds) * \n                Matern(length_scale=np.ones(len(dimensions)), length_scale_bounds=[kernel_bounds for d in dimensions], nu=1.5)\n            )\n\n            return cook_estimator(\"GP\", space=dimensions, kernel=kernel, n_restarts_optimizer=2)\n```\n\n----------------------------------------\n\nTITLE: Remote Pairlist JSON Response Format\nDESCRIPTION: The expected JSON format returned by a remote pairlist server. Contains an array of trading pairs and an optional refresh period in seconds.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"pairs\": [\"XRP/USDT\", \"ETH/USDT\", \"LTC/USDT\"],\n    \"refresh_period\": 1800\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Ruff in Freqtrade\nDESCRIPTION: Command to automatically format code using Ruff in the Freqtrade project. This ensures consistent code formatting throughout the codebase.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nruff format .\n```\n\n----------------------------------------\n\nTITLE: Load and Plot Trading Results\nDESCRIPTION: Demonstrates loading backtest results and creating interactive plots using Plotly.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/freqtrade/templates/strategy_analysis_example.ipynb#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\nfrom freqtrade.configuration import Configuration\nfrom freqtrade.data.btanalysis import load_backtest_stats\n\nstats = load_backtest_stats(backtest_dir)\nstrategy_stats = stats[\"strategy\"][strategy]\n\ndf = pd.DataFrame(columns=[\"dates\", \"equity\"], data=strategy_stats[\"daily_profit\"])\ndf[\"equity_daily\"] = df[\"equity\"].cumsum()\n\nfig = px.line(df, x=\"dates\", y=\"equity_daily\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Control Commands\nDESCRIPTION: Commands for managing Freqtrade as a systemd service and enabling persistent operation through user linger.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user start freqtrade\nsudo loginctl enable-linger \"$USER\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Instructions for Freqtrade's create-userdir Command\nDESCRIPTION: Shows the syntax and available options for the Freqtrade create-userdir command. The command supports specifying a custom user data directory path and resetting sample files to their original state.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/create-userdir.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade create-userdir [-h] [--userdir PATH] [--reset]\n\noptions:\n  -h, --help            show this help message and exit\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n  --reset               Reset sample files to their original state.\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeStabilityFilter in Freqtrade (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the RangeStabilityFilter in Freqtrade. It removes pairs where the trading range over the specified lookback period is outside the defined rate of change limits. The filter results are cached for the specified refresh period.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"pairlists\": [\n    {\n        \"method\": \"RangeStabilityFilter\",\n        \"lookback_days\": 10,\n        \"min_rate_of_change\": 0.01,\n        \"max_rate_of_change\": 0.99,\n        \"refresh_period\": 86400\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Orderbook Structure in Freqtrade\nDESCRIPTION: Visual representation of an orderbook structure showing ask and bid sides with the current spread between them. This helps understand how price_side configurations work in Freqtrade's order pricing system.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pricing.md#2025-04-15_snippet_0\n\nLANGUAGE: explanation\nCODE:\n```\n...\n103\n102\n101  # ask\n-------------Current spread\n99   # bid\n98\n97\n...\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking with mypy in Freqtrade\nDESCRIPTION: Command to run mypy to check type hints in the Freqtrade codebase. This verifies that all type annotations are correct and consistent.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmypy freqtrade\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage and Options for Freqtrade Trades-to-OHLCV Command\nDESCRIPTION: This snippet shows the complete usage syntax and available options for the 'freqtrade trades-to-ohlcv' command. It includes parameters for specifying pairs, timeframes, exchange, data formats, and trading mode, as well as common arguments for logging and configuration.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/trades-to-ohlcv.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: freqtrade trades-to-ohlcv [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [-p PAIRS [PAIRS ...]]\n                                 [-t TIMEFRAMES [TIMEFRAMES ...]]\n                                 [--exchange EXCHANGE]\n                                 [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                 [--data-format-trades {json,jsongz,feather,parquet}]\n                                 [--trading-mode {spot,margin,futures}]\n\noptions:\n  -h, --help            show this help message and exit\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        Limit command to these pairs. Pairs are space-\n                        separated.\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        Specify which tickers to download. Space-separated\n                        list. Default: `1m 5m`.\n  --exchange EXCHANGE   Exchange name. Only valid if no config is provided.\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        Storage format for downloaded candle (OHLCV) data.\n                        (default: `feather`).\n  --data-format-trades {json,jsongz,feather,parquet}\n                        Storage format for downloaded trades data. (default:\n                        `feather`).\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        Select Trading mode\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: VSCode Debug Configuration in JSON\nDESCRIPTION: Launch configuration for debugging Freqtrade in Visual Studio Code.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"freqtrade trade\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"freqtrade\",\n    \"console\": \"integratedTerminal\",\n    \"args\": [\n        \"trade\",\n        // Optional:\n        // \"--userdir\", \"user_data\",\n        \"--strategy\", \n        \"MyAwesomeStrategy\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ShuffleFilter in Freqtrade\nDESCRIPTION: JSON configuration for ShuffleFilter, which randomizes pairs in the pairlist. It allows setting the shuffle frequency and a seed value for reproducible results in backtesting.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/pairlists.md#2025-04-15_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"method\": \"ShuffleFilter\", \n        \"shuffle_frequency\": \"candle\",\n        \"seed\": 42\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-Encoded Webhook for Mattermost in Freqtrade\nDESCRIPTION: This JSON snippet shows how to configure a JSON-encoded webhook for Mattermost integration in Freqtrade. It demonstrates setting the format to JSON and defining a custom status message.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/webhook-config.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURSUBDOMAIN>.cloud.mattermost.com/hooks/<YOURHOOK>\",\n        \"format\": \"json\",\n        \"status\": {\n            \"text\": \"Status: {status}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking PEP8 Compliance with Ruff in Freqtrade\nDESCRIPTION: Command to verify if the code is PEP8 compliant using Ruff. This ensures the code follows Python style guidelines before submission.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nruff check .\n```\n\n----------------------------------------\n\nTITLE: Direct Pair Specification - Bash\nDESCRIPTION: Command to download data for specific trading pairs from Binance.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade download-data --exchange binance --pairs ETH/USDT XRP/USDT BTC/USDT\n```\n\n----------------------------------------\n\nTITLE: Searching Bot Logs in Unix Shell\nDESCRIPTION: Demonstrates how to search Freqtrade bot logs for specific content using grep in Unix-like shells.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ freqtrade --some-options 2>&1 >/dev/null | grep 'something'\n```\n\n----------------------------------------\n\nTITLE: Basic CSV Export in Freqtrade Backtesting Analysis\nDESCRIPTION: Basic command to run backtesting analysis and export the results to CSV files instead of displaying them in the terminal.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-backtesting.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade backtesting-analysis -c <config.json> --analysis-to-csv\n```\n\n----------------------------------------\n\nTITLE: Setting Cross Margin Mode in Freqtrade\nDESCRIPTION: JSON configuration for cross margin mode, where one account shares collateral between trading pairs. Note that this mode is currently unavailable in Freqtrade.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/leverage.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"margin_mode\": \"cross\"\n```\n\n----------------------------------------\n\nTITLE: Importing Space Types in Freqtrade\nDESCRIPTION: Shows how to import different space types from freqtrade.optimize.space module. These spaces are used for defining hyperparameter optimization ranges and categories.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-hyperopt.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.optimize.space import Categorical, Dimension, Integer, SKDecimal, Real  # noqa\n```\n\n----------------------------------------\n\nTITLE: Updating Freqtrade via Setup Script\nDESCRIPTION: Command to update Freqtrade using the setup script. Must be run with virtual environment disabled.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/updating.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./setup.sh --update\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern Download - Bash\nDESCRIPTION: Command to download all USDT pairs using regex pattern matching.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-download.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade download-data --exchange binance --pairs \".*/USDT\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Compose for Custom Dependencies\nDESCRIPTION: Modifications needed in the docker-compose.yml file to use a custom Dockerfile with additional dependencies for Freqtrade strategies.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    image: freqtrade_custom\n    build:\n      context: .\n      dockerfile: \"./Dockerfile.<yourextension>\"\n```\n\n----------------------------------------\n\nTITLE: JSON Format Logging Configuration in Freqtrade\nDESCRIPTION: Configuration for JSON-formatted log output. Includes custom JSON formatter with configurable field mapping and stream handler setup.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_config\": {\n    \"version\": 1,\n    \"formatters\": {\n       \"json\": {\n          \"()\": \"freqtrade.loggers.json_formatter.JsonFormatter\",\n          \"fmt_dict\": {\n              \"timestamp\": \"asctime\",\n              \"level\": \"levelname\",\n              \"logger\": \"name\",\n              \"message\": \"message\"\n          }\n      }\n    },\n    \"handlers\": {\n      \"jsonStream\": {\n          \"class\": \"logging.StreamHandler\",\n          \"formatter\": \"json\"\n      }\n    },\n    \"root\": {\n      \"handlers\": [\n        \"jsonStream\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Freqtrade New-Config Command in Bash\nDESCRIPTION: This snippet shows the usage syntax and available options for the 'freqtrade new-config' command. It allows users to create a new configuration file with options to specify a custom path or use the help flag for more information.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/new-config.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade new-config [-h] [-c PATH]\n\noptions:\n  -h, --help            show this help message and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n```\n\n----------------------------------------\n\nTITLE: Setup Script Update and Reset Commands\nDESCRIPTION: Additional setup script commands for updating and resetting the Freqtrade installation.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# --update, Command git pull to update.\n./setup.sh -u\n# --reset, Hard reset your develop/stable branch.\n./setup.sh -r\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Lab with Docker Compose for Freqtrade\nDESCRIPTION: Command to start a Jupyter Lab server using Docker Compose for Freqtrade data analysis.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-analysis.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose-jupyter.yml up\n```\n\n----------------------------------------\n\nTITLE: Using Freqtrade CLI Command Interface\nDESCRIPTION: Overview of the Freqtrade command-line interface showing all available commands and options for managing trading, backtesting, configuration, data management, and other bot functions.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade [-h] [-V]\n                 {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n                 ...\n\nFree, open source crypto trading bot\n\npositional arguments:\n  {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n    trade               Trade module.\n    create-userdir      Create user-data directory.\n    new-config          Create new config\n    show-config         Show resolved config\n    new-strategy        Create new strategy\n    download-data       Download backtesting data.\n    convert-data        Convert candle (OHLCV) data from one format to\n                        another.\n    convert-trade-data  Convert trade data from one format to another.\n    trades-to-ohlcv     Convert trade data to OHLCV data.\n    list-data           List downloaded data.\n    backtesting         Backtesting module.\n    backtesting-show    Show past Backtest results\n    backtesting-analysis\n                        Backtest Analysis module.\n    edge                Edge module.\n    hyperopt            Hyperopt module.\n    hyperopt-list       List Hyperopt results\n    hyperopt-show       Show details of Hyperopt results\n    list-exchanges      Print available exchanges.\n    list-markets        Print markets on exchange.\n    list-pairs          Print pairs on exchange.\n    list-strategies     Print available strategies.\n    list-hyperoptloss   Print available hyperopt loss functions.\n    list-freqaimodels   Print available freqAI models.\n    list-timeframes     Print available timeframes for the exchange.\n    show-trades         Show trades.\n    test-pairlist       Test your pairlist configuration.\n    convert-db          Migrate database to different system\n    install-ui          Install FreqUI\n    plot-dataframe      Plot candles with indicators.\n    plot-profit         Generate plot showing profits.\n    webserver           Webserver module.\n    strategy-updater    updates outdated strategy files to the current version\n    lookahead-analysis  Check for potential look ahead bias.\n    recursive-analysis  Check for potential recursive formula issue.\n\noptions:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MacOS\nDESCRIPTION: Commands to install required dependencies on MacOS using Homebrew package manager.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# install packages\nbrew install gettext libomp\n```\n\n----------------------------------------\n\nTITLE: Updating Freqtrade Using Native Installation\nDESCRIPTION: Commands for updating Freqtrade in a native installation by pulling latest code and updating dependencies\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/release_template.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\npip install -U -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Lab Server with Docker Compose\nDESCRIPTION: Command to start up a Jupyter lab server using Docker Compose. Creates a container accessible at https://127.0.0.1:8888/lab.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose-jupyter.yml up\n```\n\n----------------------------------------\n\nTITLE: Testing Log Content in Python\nDESCRIPTION: Example showing how to test log content using log_has() and log_has_re() methods in Python tests.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.conftest import log_has, log_has_re\n\ndef test_method_to_test(caplog):\n    method_to_test()\n\n    assert log_has(\"This event happened\", caplog)\n    # Check regex with trailing number ...\n    assert log_has_re(r\"This dynamic event happened and produced \\d+\", caplog)\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Activation Command\nDESCRIPTION: Command to activate the Python virtual environment for Freqtrade operation.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/faq.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Plotting Profit with Custom Data Directory in Freqtrade\nDESCRIPTION: Shows how to plot profit data using a custom data directory with the plot-profit command for a specific trading pair.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plotting.md#2025-04-15_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade --datadir user_data/data/binance_save/ plot-profit -p LTC/BTC\n```\n\n----------------------------------------\n\nTITLE: Syslog Configuration in Freqtrade\nDESCRIPTION: Configuration for sending log messages to local or remote syslog service. Includes syslog formatter and handler setup with customizable address options.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/advanced-setup.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_config\": {\n    \"version\": 1,\n    \"formatters\": {\n      \"syslog_fmt\": {\n        \"format\": \"%(name)s - %(levelname)s - %(message)s\"\n      }\n    },\n    \"handlers\": {\n      \"syslog\": {\n         \"class\": \"logging.handlers.SysLogHandler\",\n          \"formatter\": \"syslog_fmt\",\n          \"address\": \"/dev/log\"\n      }\n    },\n    \"root\": {\n      \"handlers\": [\n        \"syslog\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conda Environment Management Shortcuts\nDESCRIPTION: Essential Conda commands for managing environments, including listing, activating, and deactivating.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# list installed conda environments\nconda env list\n\n# activate base environment\nconda activate\n\n# activate freqtrade environment\nconda activate freqtrade\n\n#deactivate any conda environments\nconda deactivate\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Environment Variables for Freqtrade\nDESCRIPTION: Bash commands to set up HTTP and HTTPS proxy environment variables for Freqtrade. This affects all connections except exchange requests.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/configuration.md#2025-04-15_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=\"http://addr:port\"\nexport HTTPS_PROXY=\"http://addr:port\"\nfreqtrade\n```\n\n----------------------------------------\n\nTITLE: Running Automatic Installation Script\nDESCRIPTION: PowerShell commands to set execution policy and run the Freqtrade setup script\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/windows_installation.md#2025-04-15_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy Bypass\ncd freqtrade\n. .\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperopt Dependencies for Freqtrade\nDESCRIPTION: Specifies the Python package dependencies required for running Freqtrade's hyperoptimization functionality. Includes scipy for scientific computing, scikit-learn for machine learning capabilities, scikit-optimize for optimization algorithms, and filelock for file locking mechanisms.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements-hyperopt.txt#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Include all requirements to run the bot.\n-r requirements.txt\n\n# Required for hyperopt\nscipy==1.15.2\nscikit-learn==1.6.1\nft-scikit-optimize==0.9.2\nfilelock==3.18.0\n```\n\n----------------------------------------\n\nTITLE: Listing Available Conda Environments\nDESCRIPTION: Command to display all Conda environments available on the system.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nconda env list\n```\n\n----------------------------------------\n\nTITLE: Creating New Release Branch in Git\nDESCRIPTION: Command to create a new release branch from a specific commit ID for preparing a new Freqtrade release.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b new_release <commitid>\n```\n\n----------------------------------------\n\nTITLE: Activating and Deactivating Conda Environments\nDESCRIPTION: Commands to enter and exit the Freqtrade Conda environment.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# enter conda environment\nconda activate freqtrade\n\n# exit conda environment - don't do it now\nconda deactivate\n```\n\n----------------------------------------\n\nTITLE: Sample Performance Data Structure in JSON\nDESCRIPTION: Example JSON structure showing the format of performance data returned by get_overall_performance.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/trade-object.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"pair\": \"ETH/BTC\", \"profit\": 0.015, \"count\": 5}\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Desktop on Windows\nDESCRIPTION: Commands to fix timestamp synchronization issues on Windows by shutting down WSL and restarting Docker Desktop.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntaskkill /IM \"Docker Desktop.exe\" /F\nwsl --shutdown\nstart \"\" \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\n```\n\n----------------------------------------\n\nTITLE: Defining FreqAI Dependencies in Requirements File\nDESCRIPTION: Lists the Python packages required for FreqTrade's AI functionality (FreqAI). Includes machine learning libraries like scikit-learn, LightGBM, XGBoost, and CatBoost, along with TensorBoard for visualization and JobLib for parallel processing. Note that CatBoost has a platform-specific condition to exclude ARM architecture.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements-freqai.txt#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Include all requirements to run the bot.\n-r requirements.txt\n-r requirements-plot.txt\n\n# Required for freqai\nscikit-learn==1.6.1\njoblib==1.4.2\ncatboost==1.2.8; 'arm' not in platform_machine\nlightgbm==4.6.0\nxgboost==2.1.4\ntensorboard==2.19.0\ndatasieve==0.1.7\n```\n\n----------------------------------------\n\nTITLE: Displaying Trade Count in Telegram for Freqtrade Bot\nDESCRIPTION: Shows the format of the trade count information returned by the /count command. It displays the current number of trades and the maximum allowed trades.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```\ncurrent    max\n---------  -----\n     2     10\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Release Changelog\nDESCRIPTION: Git command to generate a changelog of commits between stable and new release branches, excluding merges and decorations.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --no-decorate --no-merges stable..new_release\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Local FreqUI Access\nDESCRIPTION: Configuration example for allowing FreqUI access from localhost. Sets the CORS_origins to allow requests from localhost:8080 and includes a JWT secret key for security.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/cors.md#2025-04-15_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    //...\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [\"http://localhost:8080\"],\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Freqtrade in Trading Mode with Docker\nDESCRIPTION: Command to start the Freqtrade bot in detached mode using Docker Compose after the initial configuration has been completed.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Updating Freqtrade Docker Image\nDESCRIPTION: Commands to update the Freqtrade Docker image to the latest version and restart the container with the updated version.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Download the latest image\ndocker compose pull\n# Restart the image\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Daily Profit in Telegram for Freqtrade Bot\nDESCRIPTION: Shows the format of the daily profit information returned by the /daily command. It displays the profit for each day over a specified period, including the count of trades, profit in USDT and USD, and percentage profit.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDay (count)     USDT          USD         Profit %\n--------------  ------------  ----------  ----------\n2022-06-11 (1)  -0.746 USDT   -0.75 USD   -0.08%\n2022-06-10 (0)  0 USDT        0.00 USD    0.00%\n2022-06-09 (5)  20 USDT       20.10 USD   5.00%\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Template\nDESCRIPTION: Markdown structure for creating collapsible changelog section in release notes.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary>Expand full changelog</summary>\n\n... Full git changelog\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Remote FreqUI Access\nDESCRIPTION: Configuration example for allowing FreqUI access from a remote domain. Sets the CORS_origins to allow requests from frequi.freqtrade.io and includes a JWT secret key for security.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/includes/cors.md#2025-04-15_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    //...\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [\"https://frequi.freqtrade.io\"],\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Documents\nDESCRIPTION: Using markdown-include syntax to incorporate external documentation files for pairlists and protections.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/plugins.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"includes/pairlists.md\"\n--8<-- \"includes/protections.md\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Jupyter Docker Image\nDESCRIPTION: Command to rebuild the Jupyter Docker image without using cache, ensuring Freqtrade and its dependencies are up-to-date.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/docker_quickstart.md#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose-jupyter.yml build --no-cache\n```\n\n----------------------------------------\n\nTITLE: Displaying Day Breakdown Analysis in Freqtrade Backtesting\nDESCRIPTION: Example output of the day breakdown analysis showing daily profit results and trade outcomes. This helps identify which days had the best and worst performance during the backtest period.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/backtesting.md#2025-04-15_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n======================== DAY BREAKDOWN =========================\n|        Day |   Tot Profit USDT |   Wins |   Draws |   Losses |\n|------------+-------------------+--------+---------+----------|\n| 03/07/2021 |           200.0   |      2 |       0 |        0 |\n| 04/07/2021 |           -50.31  |      0 |       0 |        2 |\n| 05/07/2021 |           220.611 |      3 |       2 |        0 |\n| 06/07/2021 |           150.974 |      3 |       0 |        2 |\n| 07/07/2021 |           -70.193 |      1 |       0 |        2 |\n| 08/07/2021 |           212.413 |      2 |       0 |        3 |\n```\n\n----------------------------------------\n\nTITLE: Manual PyPI Release Commands\nDESCRIPTION: Series of commands for building and uploading packages to PyPI, including both test and production environments.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install -U build\npython -m build --sdist --wheel\n\n# For pypi test (to check if some change to the installation did work)\ntwine upload --repository-url https://test.pypi.org/legacy/ dist/*\n\n# For production:\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Displaying Edge Validation Results in Markdown\nDESCRIPTION: This code block shows the format for displaying pairs validated by Edge along with their corresponding win-rate, expectancy, and stoploss values using the /edge command.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/telegram-usage.md#2025-04-15_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```\nPair        Winrate    Expectancy    Stoploss\n--------  ---------  ------------  ----------\nDOCK/ETH   0.522727      0.881821       -0.03\nPHX/ETH    0.677419      0.560488       -0.03\nHOT/ETH    0.733333      0.490492       -0.03\nHC/ETH     0.588235      0.280988       -0.02\nARDR/ETH   0.366667      0.143059       -0.01\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Binance Leverage Tiers in Python\nDESCRIPTION: Script to update cached leverage tiers for Binance exchange using CCXT. Requires authenticated account with futures enabled.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nimport json\nfrom pathlib import Path\n\nexchange = ccxt.binance({\n    'apiKey': '<apikey>',\n    'secret': '<secret>',\n    'options': {'defaultType': 'swap'}\n    })\n_ = exchange.load_markets()\n\nlev_tiers = exchange.fetch_leverage_tiers()\n\n# Assumes this is running in the root of the repository.\nfile = Path('freqtrade/exchange/binance_leverage_tiers.json')\njson.dump(dict(sorted(lev_tiers.items())), file.open('w'), indent=2)\n```\n\n----------------------------------------\n\nTITLE: Common Installation Error Message\nDESCRIPTION: Example error message shown when Microsoft Visual C++ 14.0 is missing during installation\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/windows_installation.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nerror: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": http://landinghub.visualstudio.com/visual-cpp-build-tools\n```\n\n----------------------------------------\n\nTITLE: Encoding Strategy as BASE64\nDESCRIPTION: Shows how to encode a strategy file as BASE64 for embedding in configuration files.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom base64 import urlsafe_b64encode\n\nwith open(file, 'r') as f:\n    content = f.read()\ncontent = urlsafe_b64encode(content.encode('utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Bash\nDESCRIPTION: Commands to install documentation requirements and serve local documentation using mkdocs.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/developer.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r docs/requirements-docs.txt\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Charts in Python\nDESCRIPTION: Shows the previously generated candlestick chart either inline in the notebook or in a separate browser window. This provides flexible visualization options for trade analysis.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Show graph inline\n# graph.show()\n\n# Render graph in a separate window\ngraph.show(renderer=\"browser\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Conda Environment\nDESCRIPTION: General structure for creating a Conda environment with custom packages and Python version.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# choose your own packages\nconda env create -n [name of the environment] [python version] [packages]\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 Dependency for The Ocean Exchange\nDESCRIPTION: Command to install the web3 Python package required for The Ocean exchange which uses Web3 functionality.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/exchanges.md#2025-04-15_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npip3 install web3\n```\n\n----------------------------------------\n\nTITLE: Specifying Plotly Version for Data Visualization in Freqtrade\nDESCRIPTION: This line specifies the exact version of the Plotly library to be used for data visualization in Freqtrade. Plotly is a graphing library that provides interactive plots and charts.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements-plot.txt#2025-04-15_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nplotly==6.0.1\n```\n\n----------------------------------------\n\nTITLE: Querying All Trades from the Trades Table\nDESCRIPTION: SQL query to retrieve all records from the trades table in the Freqtrade database.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM trades;\n```\n\n----------------------------------------\n\nTITLE: Running Full Unit Tests with pytest in Freqtrade\nDESCRIPTION: Command to run all unit tests in the Freqtrade project using pytest. This ensures all functionality is working as expected before submitting a pull request.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Deleting a Trade from Freqtrade Database\nDESCRIPTION: SQL delete query to remove a specific trade from the database by its ID. This should be used with caution and only when necessary.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM trades WHERE id = <tradeid>;\n\nDELETE FROM trades WHERE id = 31;\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in SQLite Database\nDESCRIPTION: SQLite command to display all tables in the current database.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.tables\n```\n\n----------------------------------------\n\nTITLE: Including Base Requirements for Freqtrade Bot\nDESCRIPTION: This line includes all the base requirements needed to run the Freqtrade bot by referencing the main requirements.txt file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/requirements-plot.txt#2025-04-15_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using FreqTrade List-Timeframes Command in Bash\nDESCRIPTION: Command syntax for the FreqTrade 'list-timeframes' command which lists available timeframes for trading. It supports various options including exchange specification, output formatting, logging configuration, and data directory paths.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/list-timeframes.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade list-timeframes [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--exchange EXCHANGE] [-1]\n\noptions:\n  -h, --help            show this help message and exit\n  --exchange EXCHANGE   Exchange name. Only valid if no config is provided.\n  -1, --one-column      Print output in one column.\n\nCommon arguments:\n  -v, --verbose         Verbose mode (-vv for more, -vvv to get all messages).\n  --no-color            Disable colorization of hyperopt results. May be\n                        useful if you are redirecting output to a file.\n  --logfile FILE, --log-file FILE\n                        Log to the file specified. Special values are:\n                        'syslog', 'journald'. See the documentation for more\n                        details.\n  -V, --version         show program's version number and exit\n  -c PATH, --config PATH\n                        Specify configuration file (default:\n                        `userdir/config.json` or `config.json` whichever\n                        exists). Multiple --config options may be used. Can be\n                        set to `-` to read config from stdin.\n  -d PATH, --datadir PATH, --data-dir PATH\n                        Path to directory with historical backtesting data.\n  --userdir PATH, --user-data-dir PATH\n                        Path to userdata directory.\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Method in Freqtrade\nDESCRIPTION: Command to run a specific test method from a test file in the Freqtrade project. This enables focused testing on individual functions that were changed.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/CONTRIBUTING.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_<file_name>.py::test_<method_name>\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite3 on Ubuntu/Debian\nDESCRIPTION: Command to install the SQLite3 terminal application on Ubuntu or Debian-based systems.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/sql_cheatsheet.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install sqlite3\n```\n\n----------------------------------------\n\nTITLE: Show Configuration Output Example\nDESCRIPTION: Example output of the show-config command displaying merged configuration with sensitive data redacted.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/utils.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nYour combined configuration is:\n{\n  \"exit_pricing\": {\n    \"price_side\": \"other\",\n    \"use_order_book\": true,\n    \"order_book_top\": 1\n  },\n  \"stake_currency\": \"USDT\",\n  \"exchange\": {\n    \"name\": \"binance\",\n    \"key\": \"REDACTED\",\n    \"secret\": \"REDACTED\",\n    \"ccxt_config\": {},\n    \"ccxt_async_config\": {},\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataframes in Freqtrade Strategy Functions\nDESCRIPTION: Shows how to access and use dataframes within various strategy functions, including confirm_trade_exit. It demonstrates obtaining the analyzed dataframe, accessing the last candle, and looking up trade candles.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy-advanced.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom freqtrade.exchange import timeframe_to_prev_date\n\nclass AwesomeStrategy(IStrategy):\n    def confirm_trade_exit(self, pair: str, trade: 'Trade', order_type: str, amount: float,\n                           rate: float, time_in_force: str, exit_reason: str,\n                           current_time: 'datetime', **kwargs) -> bool:\n        # Obtain pair dataframe.\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n\n        # Obtain last available candle. Do not use current_time to look up latest candle, because \n        # current_time points to current incomplete candle whose data is not available.\n        last_candle = dataframe.iloc[-1].squeeze()\n        # <...>\n\n        # In dry/live runs trade open date will not match candle open date therefore it must be \n        # rounded.\n        trade_date = timeframe_to_prev_date(self.timeframe, trade.open_date_utc)\n        # Look up trade candle.\n        trade_candle = dataframe.loc[dataframe['date'] == trade_date]\n        # trade_candle may be empty for trades that just opened as it is still incomplete.\n        if not trade_candle.empty:\n            trade_candle = trade_candle.squeeze()\n            # <...>\n```\n\n----------------------------------------\n\nTITLE: HTML GitHub buttons for Freqtrade repository\nDESCRIPTION: HTML code snippet for embedding GitHub star, fork and download buttons for the Freqtrade repository in the documentation.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/index.md#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"github-button\" href=\"https://github.com/freqtrade/freqtrade\" data-icon=\"octicon-star\" data-size=\"large\" aria-label=\"Star freqtrade/freqtrade on GitHub\">Star</a>\n<a class=\"github-button\" href=\"https://github.com/freqtrade/freqtrade/fork\" data-icon=\"octicon-repo-forked\" data-size=\"large\" aria-label=\"Fork freqtrade/freqtrade on GitHub\">Fork</a>\n<a class=\"github-button\" href=\"https://github.com/freqtrade/freqtrade/archive/stable.zip\" data-icon=\"octicon-cloud-download\" data-size=\"large\" aria-label=\"Download freqtrade/freqtrade on GitHub\">Download</a>\n```\n\n----------------------------------------\n\nTITLE: Academic Citation for FreqAI\nDESCRIPTION: BibTeX citation for referencing FreqAI in academic publications, published in the Journal of Open Source Software.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai.md#2025-04-15_snippet_2\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{Caulk2022, \n    doi = {10.21105/joss.04864},\n    url = {https://doi.org/10.21105/joss.04864},\n    year = {2022}, publisher = {The Open Journal},\n    volume = {7}, number = {80}, pages = {4864},\n    author = {Robert A. Caulk and Elin Törnquist and Matthias Voppichler and Andrew R. Lawless and Ryan McMullan and Wagner Costa Santos and Timothy C. Pogue and Johan van der Vlugt and Stefan P. Gehring and Pascal Schmidt},\n    title = {FreqAI: generalizing adaptive modeling for chaotic time-series market forecasts},\n    journal = {Journal of Open Source Software} }\n```\n\n----------------------------------------\n\nTITLE: Command Usage Syntax for FreqTrade Plot-Dataframe\nDESCRIPTION: Shows the syntax and available options for the 'freqtrade plot-dataframe' command, which is used to visualize trading data with technical indicators from a trading strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/commands/plot-dataframe.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: freqtrade plot-dataframe [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                                [--strategy-path PATH]\n                                [--recursive-strategy-search]\n                                [--freqaimodel NAME] [--freqaimodel-path PATH]\n                                [-p PAIRS [PAIRS ...]]\n                                [--indicators1 INDICATORS1 [INDICATORS1 ...]]\n                                [--indicators2 INDICATORS2 [INDICATORS2 ...]]\n                                [--plot-limit INT] [--db-url PATH]\n                                [--trade-source {DB,file}]\n                                [--export {none,trades,signals}]\n                                [--export-filename PATH]\n                                [--timerange TIMERANGE] [-i TIMEFRAME]\n                                [--no-trades]\n```\n\n----------------------------------------\n\nTITLE: Freqtrade Project Requirements\nDESCRIPTION: Lists the hardware and software requirements needed to run the Freqtrade trading bot. Specifies minimum system requirements of 2GB RAM, 1GB disk space, and 2vCPU, along with required software dependencies.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/README.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Python >= 3.10](http://docs.python-guide.org/en/latest/starting/installation/)\n- [pip](https://pip.pypa.io/en/stable/installing/)\n- [git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- [TA-Lib](https://ta-lib.github.io/ta-lib-python/)\n- [virtualenv](https://virtualenv.pypa.io/en/stable/installation.html) (Recommended)\n- [Docker](https://www.docker.com/products/docker) (Recommended)\n```\n\n----------------------------------------\n\nTITLE: Defining MKDocs Dependencies with Version Requirements\nDESCRIPTION: This snippet specifies the exact versions of Python packages required for generating documentation with MKDocs. It includes the markdown parser, mkdocs core, material theme, and several extensions that enhance markdown functionality.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/requirements-docs.txt#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmarkdown==3.8\nmkdocs==1.6.1\nmkdocs-material==9.6.11\nmdx_truly_sane_lists==1.3\npymdown-extensions==10.14.3\njinja2==3.1.6\nmike==2.1.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Pairlists in Freqtrade (JSON)\nDESCRIPTION: Example of the deprecated 'pairlist' configuration section, which has been replaced by 'pairlists' to allow running multiple pairlists in sequence.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/deprecated.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"pairlist\": {\n  // Deprecated configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Root in Jupyter Notebook\nDESCRIPTION: Python snippet to find and change to the Freqtrade project root directory in a Jupyter notebook, ensuring relative paths work consistently regardless of where the notebook is stored.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/data-analysis.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pathlib import Path\n\n# Change directory\n# Modify this cell to insure that the output shows the correct path.\n# Define all paths relative to the project root shown in the cell output\nproject_root = \"somedir/freqtrade\"\ni=0\ntry:\n    os.chdir(project_root)\n    assert Path('LICENSE').is_file()\nexcept:\n    while i<4 and (not Path('LICENSE').is_file()):\n        os.chdir(Path(Path.cwd(), '../'))\n        i+=1\n    project_root = Path.cwd()\nprint(Path.cwd())\n```\n\n----------------------------------------\n\nTITLE: Reporting Strategy Entry Signals in Python\nDESCRIPTION: Analyzes and displays the trading signals generated by the strategy. It reports the total number of entry signals and shows the last few rows of the processed dataframe with indicators and signals.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/strategy_analysis_example.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Report results\nprint(f\"Generated {df['enter_long'].sum()} entry signals\")\ndata = df.set_index(\"date\", drop=False)\ndata.tail()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stop Loss Settings in Python for Freqtrade\nDESCRIPTION: This code snippet demonstrates how to configure various stop loss settings in Freqtrade, including emergency exit, on-exchange stop loss, and interval settings.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/stoploss.md#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    'emergency_exit': 'market',\n    'stoploss_on_exchange': False\n    'stoploss_on_exchange_interval': 60,\n    'stoploss_on_exchange_limit_ratio': 0.99\n```\n\n----------------------------------------\n\nTITLE: Running FreqAI with Reinforcement Learning Model\nDESCRIPTION: Command to start FreqTrade with a Reinforcement Learning model and strategy. This specifies the model to use (ReinforcementLearner) and the strategy along with the configuration file.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/freqai-reinforcement-learning.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --freqaimodel ReinforcementLearner --strategy MyRLStrategy --config config.json\n```\n\n----------------------------------------\n\nTITLE: Starting the Freqtrade Trading Bot\nDESCRIPTION: Command to launch Freqtrade with a specified configuration file and trading strategy.\nSOURCE: https://github.com/freqtrade/freqtrade/blob/develop/docs/installation.md#2025-04-15_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nfreqtrade trade --config user_data/config.json --strategy SampleStrategy\n```"
  }
]