[
  {
    "owner": "tinche",
    "repo": "aiofiles",
    "content": "TITLE: Opening and Reading a File Asynchronously in Python with aiofiles\nDESCRIPTION: Demonstrates how to open a file asynchronously using the async with context manager and read its contents using await. This pattern prevents blocking the main event loop when performing file I/O operations.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with aiofiles.open('filename', mode='r') as f:\n    contents = await f.read()\nprint(contents)\n'My file contents'\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Iteration in Python with aiofiles\nDESCRIPTION: Shows how to iterate over a file line by line asynchronously using an async for loop. This allows processing large files without blocking the event loop.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with aiofiles.open('filename') as f:\n    async for line in f:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Files Asynchronously in Python with aiofiles\nDESCRIPTION: Demonstrates creating and writing to a temporary file asynchronously using aiofiles.tempfile module. This provides an async interface to Python's tempfile module.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with aiofiles.tempfile.TemporaryFile('wb') as f:\n    await f.write(b'Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Using Named Temporary Files Asynchronously in Python\nDESCRIPTION: Example of using NamedTemporaryFile asynchronously, including writing to the file, seeking to the beginning, and iterating through its contents.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync with aiofiles.tempfile.NamedTemporaryFile('wb+') as f:\n    await f.write(b'Line1\\n Line2')\n    await f.seek(0)\n    async for line in f:\n        print(line)\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Directories Asynchronously in Python\nDESCRIPTION: Example of creating and using a temporary directory asynchronously with the context manager, and constructing a path to a file within that directory.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync with aiofiles.tempfile.TemporaryDirectory() as d:\n    filename = os.path.join(d, \"file.ext\")\n```\n\n----------------------------------------\n\nTITLE: Mocking aiofiles for Testing in Python\nDESCRIPTION: Demonstrates how to mock file I/O operations in aiofiles for testing purposes by patching the threadpool.sync_open function and registering a mock return type with the wrap dispatcher.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\naiofiles.threadpool.wrap.register(mock.MagicMock)(\n    lambda *args, **kwargs: aiofiles.threadpool.AsyncBufferedIOBase(*args, **kwargs)\n)\n\nasync def test_stuff():\n    write_data = 'data'\n    read_file_chunks = [\n        b'file chunks 1',\n        b'file chunks 2',\n        b'file chunks 3',\n        b'',\n    ]\n    file_chunks_iter = iter(read_file_chunks)\n\n    mock_file_stream = mock.MagicMock(\n        read=lambda *args, **kwargs: next(file_chunks_iter)\n    )\n\n    with mock.patch('aiofiles.threadpool.sync_open', return_value=mock_file_stream) as mock_open:\n        async with aiofiles.open('filename', 'w') as f:\n            await f.write(write_data)\n            assert await f.read() == b'file chunks 1'\n\n        mock_file_stream.write.assert_called_once_with(write_data)\n```\n\n----------------------------------------\n\nTITLE: Installing aiofiles with pip\nDESCRIPTION: Command to install the aiofiles package using pip package manager.\nSOURCE: https://github.com/tinche/aiofiles/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install aiofiles\n```"
  }
]