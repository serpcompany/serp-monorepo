[
  {
    "owner": "ionic-team",
    "repo": "capacitor-docs",
    "content": "TITLE: Using Capacitor Filesystem API for Basic File Operations in TypeScript\nDESCRIPTION: Provides TypeScript examples demonstrating how to use the Capacitor Filesystem API. It shows importing necessary components (`Filesystem`, `Directory`, `Encoding`), writing a text file to the Documents directory, reading the file back, deleting the file, and reading a file using its full native file path URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\n\nconst writeSecretFile = async () => {\n  await Filesystem.writeFile({\n    path: 'secrets/text.txt',\n    data: \"This is a test\",\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n};\n\nconst readSecretFile = async () => {\n  const contents = await Filesystem.readFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n\n  console.log('secrets:', contents);\n};\n\nconst deleteSecretFile = async () => {\n  await Filesystem.deleteFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n  });\n};\n\nconst readFilePath = async () => {\n  // Here's an example of reading a file with a full file path. Use this to\n  // read binary data (base64 encoded) from plugins that return File URIs, such as\n  // the Camera.\n  const contents = await Filesystem.readFile({\n    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt'\n  });\n\n  console.log('data:', contents);\n};\n```\n\n----------------------------------------\n\nTITLE: Using CapacitorHttp for HTTP Requests\nDESCRIPTION: Example demonstrating how to use the CapacitorHttp plugin to make GET and POST requests with custom headers and parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorHttp } from '@capacitor/core';\n\n// Example of a GET request\nconst doGet = () => {\n  const options = {\n    url: 'https://example.com/my/api',\n    headers: { 'X-Fake-Header': 'Fake-Value' },\n    params: { size: 'XL' },\n  };\n\n  const response: HttpResponse = await CapacitorHttp.get(options);\n\n  // or...\n  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })\n};\n\n// Example of a POST request. Note: data\n// can be passed as a raw JS Object (must be JSON serializable)\nconst doPost = () => {\n  const options = {\n    url: 'https://example.com/my/api',\n    headers: { 'X-Fake-Header': 'Fake-Value' },\n    data: { foo: 'bar' },\n  };\n\n  const response: HttpResponse = await CapacitorHttp.post(options);\n\n  // or...\n  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })\n};\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem Plugin for File Operations\nDESCRIPTION: TypeScript example demonstrating common file operations with the Filesystem plugin including writing, reading, and deleting files. It shows both directory-based access and full file path access.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\n\nconst writeSecretFile = async () => {\n  await Filesystem.writeFile({\n    path: 'secrets/text.txt',\n    data: 'This is a test',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n};\n\nconst readSecretFile = async () => {\n  const contents = await Filesystem.readFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n\n  console.log('secrets:', contents);\n};\n\nconst deleteSecretFile = async () => {\n  await Filesystem.deleteFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n  });\n};\n\nconst readFilePath = async () => {\n  // Here's an example of reading a file with a full file path. Use this to\n  // read binary data (base64 encoded) from plugins that return File URIs, such as\n  // the Camera.\n  const contents = await Filesystem.readFile({\n    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',\n  });\n\n  console.log('data:', contents);\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Capacitor CLI Command Structure\nDESCRIPTION: The basic command structure for the Capacitor CLI. It shows how to invoke the CLI using npx, along with optional version and help flags. This is the fundamental syntax used for all Capacitor CLI operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap [-V] [-h] [<command>]\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interface Types in TypeScript\nDESCRIPTION: TypeScript interface and type definitions for a Capacitor plugin showing three different method signatures: void return, value return, and callback methods. Includes type definitions for callback ID and data structures.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CallbackID = string;\n\nexport interface MyData {\n  data: string;\n}\n\nexport type MyPluginCallback = (message: MyData | null, err?: any) => void;\n\nexport interface MyPlugin {\n  method1(): Promise<void>;\n  method2(): Promise<MyData>;\n  method3(callback: MyPluginCallback): Promise<CallbackID>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Methods in Android Capacitor Plugins\nDESCRIPTION: This snippet demonstrates how to use the 'unimplemented' method to indicate that a plugin method is not available on Android. It's useful for methods that are specific to other platforms like iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatRequiresIOS(PluginCall call) {\n    call.unimplemented(\"Not implemented on Android.\");\n}\n```\n\n----------------------------------------\n\nTITLE: React Implementation Example\nDESCRIPTION: Complete example of Google Maps implementation in a React component\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\nimport { useRef } from 'react';\n\nconst MyMap: React.FC = () => {\n  const mapRef = useRef<HTMLElement>();\n  let newMap: GoogleMap;\n\n  async function createMap() {\n    if (!mapRef.current) return;\n\n    newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: mapRef.current,\n      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9\n        },\n        zoom: 8\n      }\n    })\n  }\n\n  return (\n    <div className=\"component-wrapper\">\n      <capacitor-google-map ref={mapRef} style={{\n        display: 'inline-block',\n        width: 275,\n        height: 400\n      }}></capacitor-google-map>\n\n      <button onClick={createMap}>Create Map</button>\n    </div>\n  )\n}\n\nexport default MyMap;\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications in App - Capacitor Plugin - TypeScript\nDESCRIPTION: This comprehensive example demonstrates integrating PushNotifications from @capacitor/push-notifications in a TypeScript application. It shows registering event listeners for registration, error, reception, and action events, and includes routines for checking and requesting permissions, registering for push, and retrieving delivered notifications. Requires plugin installation and proper platform configuration. Inputs are user interactions and system events; outputs are logs and potential error handling. Limitations include platform-specific behaviors such as permission prompts and notification delivery differences.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PushNotifications } from '@capacitor/push-notifications';\\n\\nconst addListeners = async () => {\\n  await PushNotifications.addListener('registration', token => {\\n    console.info('Registration token: ', token.value);\\n  });\\n\\n  await PushNotifications.addListener('registrationError', err => {\\n    console.error('Registration error: ', err.error);\\n  });\\n\\n  await PushNotifications.addListener('pushNotificationReceived', notification => {\\n    console.log('Push notification received: ', notification);\\n  });\\n\\n  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {\\n    console.log('Push notification action performed', notification.actionId, notification.inputValue);\\n  });\\n}\\n\\nconst registerNotifications = async () => {\\n  let permStatus = await PushNotifications.checkPermissions();\\n\\n  if (permStatus.receive === 'prompt') {\\n    permStatus = await PushNotifications.requestPermissions();\\n  }\\n\\n  if (permStatus.receive !== 'granted') {\\n    throw new Error('User denied permissions!');\\n  }\\n\\n  await PushNotifications.register();\\n}\\n\\nconst getDeliveredNotifications = async () => {\\n  const notificationList = await PushNotifications.getDeliveredNotifications();\\n  console.log('delivered notifications', notificationList);\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallbacks with isPluginAvailable\nDESCRIPTION: Example showing how to check for Camera plugin availability and implement a fallback when not available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Echo Plugin Implementation in Java\nDESCRIPTION: Simple example of a Capacitor plugin that demonstrates core plugin components including receiving data and returning responses. Shows a basic echo function that returns the input value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage android.plugin.test;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Platforms and Initializing Project\nDESCRIPTION: Command sequence for setting up a Capacitor project by building the app, installing iOS and Android platform packages, adding the platforms to the project, and synchronizing the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Configuration Schema with TypeScript Interface\nDESCRIPTION: This snippet declares the `CapacitorConfig` TypeScript interface, listing all possible configuration options for Capacitor applications, including descriptions, default values, and documentation for each property. It contains generic app settings (`appId`, `appName`, `webDir`), runtime controls, logging configuration, and deeply nested platform-specific options for Android and iOS. Its dependencies are TypeScript (for type checking) and requires familiarity with Capacitor project structure. Expected input is an object adhering to this interface; output is type-checked guarantees of valid config options. The interface is intended for use as `capacitor.config.ts` or `capacitor.config.json` in a Capacitor project. There are no additional constraints, but incomplete or incorrect fields may lead to improper app behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CapacitorConfig {\n  /**\n   * The unique identifier of your packaged app.\n   *\n   * This is also known as the Bundle ID in iOS and the Application ID in\n   * Android. It must be in reverse domain name notation, generally\n   * representing a domain name that you or your company owns.\n   *\n   * @since 1.0.0\n   */\n  appId?: string;\n\n  /**\n   * The human-friendly name of your app.\n   *\n   * This should be what you'd see in the App Store, but can be changed after\n   * within each native platform after it is generated.\n   *\n   * @since 1.0.0\n   */\n  appName?: string;\n\n  /**\n   * The directory of your compiled web assets.\n   *\n   * This directory should contain the final `index.html` of your app.\n   *\n   * @since 1.0.0\n   */\n  webDir?: string;\n\n  /**\n   * Whether to copy the Capacitor runtime bundle or not.\n   *\n   * If your app is not using a bundler, set this to `true`, then Capacitor\n   * will create a `capacitor.js` file that you'll need to add as a script in\n   * your `index.html` file.\n   *\n   * @since 1.0.0\n   * @default false\n   */\n  bundledWebRuntime?: boolean;\n\n  /**\n   * The build configuration (as defined by the native app) under which Capacitor\n   * will send statements to the log system. This applies to log statements in\n   * native code as well as statements redirected from JavaScript (`console.debug`,\n   * `console.error`, etc.). Enabling logging will let statements render in the\n   * Xcode and Android Studio windows but can leak information on device if enabled\n   * in released builds.\n   *\n   * 'none' = logs are never produced\n   * 'debug' = logs are produced in debug builds but not production builds\n   * 'production' = logs are always produced\n   *\n   * @since 3.0.0\n   * @default debug\n   */\n  loggingBehavior?: 'none' | 'debug' | 'production';\n\n  /**\n   * User agent of Capacitor Web View.\n   *\n   * @since 1.4.0\n   */\n  overrideUserAgent?: string;\n\n  /**\n   * String to append to the original user agent of Capacitor Web View.\n   *\n   * This is disregarded if `overrideUserAgent` is used.\n   *\n   * @since 1.4.0\n   */\n  appendUserAgent?: string;\n\n  /**\n   * Background color of the Capacitor Web View.\n   *\n   * @since 1.1.0\n   */\n  backgroundColor?: string;\n\n  android?: {\n    /**\n     * Specify a custom path to the native Android project.\n     *\n     * @since 3.0.0\n     * @default android\n     */\n    path?: string;\n\n    /**\n     * User agent of Capacitor Web View on Android.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for Android.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for Android.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable mixed content in the Capacitor Web View for Android.\n     *\n     * [Mixed\n     * content](https://developer.mozilla.org/en-US/docs/v3/Web/Security/Mixed_content)\n     * is disabled by default for security. During development, you may need to\n     * enable it to allow the Web View to load files from different schemes.\n     *\n     * **This is not intended for use in production.**\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    allowMixedContent?: boolean;\n\n    /**\n     * This enables a simpler keyboard which may have some limitations.\n     *\n     * This will capture JS keys using an alternative\n     * [`InputConnection`](https://developer.android.com/reference/android/view/inputmethod/InputConnection).\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    captureInput?: boolean;\n\n    /**\n     * Always enable debuggable web content.\n     *\n     * This is automatically enabled during development.\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    webContentsDebuggingEnabled?: boolean;\n\n    /**\n     * The build configuration under which Capacitor will generate logs.\n     *\n     * Overrides global `loggingBehavior` option.\n     *\n     * @since 3.0.0\n     * @default debug\n     */\n    loggingBehavior?: 'none' | 'debug' | 'production';\n\n    /**\n     * Allowlist of plugins to include during `npx cap sync` for Android.\n     *\n     * Overrides global `includePlugins` option.\n     *\n     * @since 3.0.0\n     */\n    includePlugins?: string[];\n\n    /**\n     * Android flavor to use.\n     *\n     * If the app has flavors declared in the `build.gradle`\n     * configure the flavor you want to run with `npx cap run` command.\n     *\n     * @since 3.1.0\n     */\n    flavor?: string;\n  };\n\n  ios?: {\n    /**\n     * Specify a custom path to the native iOS project.\n     *\n     * @since 3.0.0\n     * @default ios\n     */\n    path?: string;\n\n    /**\n     * iOS build scheme to use.\n     *\n     * Usually this matches your app's target in Xcode. You can use the\n     * following command to list schemes:\n     *\n     * `xcodebuild -workspace ios/App/App.xcworkspace -list`\n     *\n     * @since 3.0.0\n     * @default App\n     */\n    scheme?: string;\n\n    /**\n     * User agent of Capacitor Web View on iOS.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for iOS.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for iOS.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Configure the scroll view's content inset adjustment behavior.\n     *\n     * This will set the\n     * [`contentInsetAdjustmentBehavior`](https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 2.0.0\n     * @default never\n     */\n    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';\n\n    /**\n     * Configure whether the scroll view is scrollable.\n     *\n     * This will set the\n     * [`isScrollEnabled`](https://developer.apple.com/documentation/uikit/uiscrollview/1619395-isscrollenabled)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 1.0.0\n     */\n    scrollEnabled?: boolean;\n\n    /**\n     * Configure custom linker flags for compiling Cordova plugins.\n     *\n     * @since 1.0.0\n     * @default []\n     */\n    cordovaLinkerFlags?: string[];\n\n    /**\n     * Allow destination previews when pressing on links.\n     *\n     * This will set the\n     * [`allowsLinkPreview`](https://developer.apple.com/documentation/webkit/wkwebview/1415000-allowslinkpreview)\n     * property on the Web View, instead of using the default value.\n     *\n     * @since 2.0.0\n     */\n    allowsLinkPreview?: boolean;\n\n    /**\n     * The build configuration under which Capacitor will generate logs.\n     *\n     * Overrides global `loggingBehavior` option.\n     *\n     * @since 3.0.0\n     * @default debug\n     */\n    loggingBehavior?: 'none' | 'debug' | 'production';\n\n    /**\n     * Allowlist of plugins to include during `npx cap sync` for iOS.\n     *\n     * Overrides global `includePlugins` option.\n     *\n     * @since 3.0.0\n     */\n    includePlugins?: string[];\n\n    /**\n     * Sets WKWebView configuration for limitsNavigationsToAppBoundDomains.\n     *\n     * If the Info.plist file includes `WKAppBoundDomains` key, it's recommended to\n     * set this option to true, otherwise some features won't work.\n     * But as side effect, it blocks navigation outside the domains in the\n     * `WKAppBoundDomains` list.\n     * `localhost` (or the value configured as `server.hostname`) also needs to be\n     * added to the `WKAppBoundDomains` list.\n     *\n     * @since 3.1.0\n     * @default false\n     */\n    limitsNavigationsToAppBoundDomains?: boolean;\n  };\n\n  server?: {\n    /**\n     * Configure the local hostname of the device.\n     *\n     * It is recommended to keep this as `localhost` as it allows the use of\n     * Web APIs that would otherwise require a [secure\n     * context](https://developer.mozilla.org/en-US/docs/v3/Web/Security/Secure_Contexts)\n     * such as\n     * [`navigator.geolocation`](https://developer.mozilla.org/en-US/docs/v3/Web/API/Navigator/geolocation)\n     * and\n     * [`MediaDevices.getUserMedia`](https://developer.mozilla.org/en-US/docs/v3/Web/API/MediaDevices/getUserMedia).\n     *\n     * @since 1.0.0\n     * @default localhost\n     */\n    hostname?: string;\n\n    /**\n     * Configure the local scheme on iOS.\n     *\n     * [Can't be set to schemes that the WKWebView already handles, such as http or https](https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/2875766-seturlschemehandler)\n     * This can be useful when migrating from\n     * [`cordova-plugin-ionic-webview`](https://github.com/ionic-team/cordova-plugin-ionic-webview),\n     * where the default scheme on iOS is `ionic`.\n     *\n     * @since 1.2.0\n     * @default capacitor\n     */\n    iosScheme?: string;\n\n    /**\n     * Configure the local scheme on Android.\n     *\n     * @since 1.2.0\n     * @default http\n     */\n    androidScheme?: string;\n\n    /**\n     * Load an external URL in the Web View.\n     *\n     * This is intended for use with live-reload servers.\n     *\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Echo Plugin in Swift for Capacitor\nDESCRIPTION: A simple example of a Capacitor plugin for iOS that extends CAPPlugin with an echo function that returns data received from the caller, demonstrating core plugin components like receiving and returning data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.resolve([\n        \"value\": value\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Implementation Example\nDESCRIPTION: Complete Angular component implementation for Google Maps\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\n@Component({\n  template: `\n    <capacitor-google-map #map></capacitor-google-map>\n    <button (click)=\"createMap()\">Create Map</button>\n  `,\n  styles: [\n    `\n      capacitor-google-map {\n        display: inline-block;\n        width: 275px;\n        height: 400px;\n      }\n    `,\n  ],\n})\nexport class MyMap {\n  @ViewChild('map')\n  mapRef: ElementRef<HTMLElement>;\n  newMap: GoogleMap;\n\n  async createMap() {\n    this.newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: this.mapRef.nativeElement,\n      apiKey: environment.apiKey,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8,\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Plugin in Kotlin\nDESCRIPTION: Kotlin version of the Echo plugin showing how to implement the same functionality using Kotlin syntax. Demonstrates plugin method implementation and data handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@NativePlugin()\nclass EchoPlugin : Plugin() {\n\n  @PluginMethod\n  fun echo(call: PluginCall) {\n    val value = call.getString(\"value\")\n    val ret = JSObject()\n    ret.put(\"value\", value)\n    call.success(ret)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddEventListenerOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the AddEventListenerOptions interface with its properties once and passive. These options are used when adding event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AddEventListenerOptions {\n  once: boolean;\n  passive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Core and CLI Dependencies\nDESCRIPTION: These commands install the main Capacitor npm dependencies: the core JavaScript runtime and the command line interface (CLI).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy (CSP) via HTML Meta Tag\nDESCRIPTION: This HTML snippet demonstrates how to configure Content Security Policy (CSP) within a Capacitor application's web view using a `<meta>` tag in the document's `<head>`. The `http-equiv` attribute specifies the header type ('Content-Security-Policy'), and the `content` attribute defines the policy rules. In this example, `default-src 'self' foo.com` restricts resource loading to the application's own origin ('self') and the domain 'foo.com', mitigating risks like cross-site scripting (XSS).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self' foo.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing the Global Capacitor Object in TypeScript\nDESCRIPTION: Imports the main `Capacitor` object from the `@capacitor/core` package. This object provides access to various utility functions for cross-platform development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Camera Permission Implementation Example\nDESCRIPTION: Demonstrates how to implement permission handling in a Capacitor plugin, including permission requests and callback handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void takePhoto(PluginCall call) {\n  if (getPermissionState(\"camera\") != PermissionState.GRANTED) {\n    requestPermissionForAlias(\"camera\", call, \"cameraPermsCallback\");\n  } else {\n    loadCamera(call);\n  }\n}\n\n@PermissionCallback\nprivate void cameraPermsCallback(PluginCall call) {\n  if (getPermissionState(\"camera\") == PermissionState.GRANTED) {\n    loadCamera(call);\n  } else {\n    call.reject(\"Permission is required to take a picture\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacitor Plugin Class for Android\nDESCRIPTION: Basic structure of a Capacitor plugin class for Android with method stubs for orientation detection, locking, and unlocking screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void lock(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void unlock(PluginCall call) {\n       call.resolve();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications Plugin via capacitor.config.json - JSON\nDESCRIPTION: Provides a JSON configuration example for setting the default notification icon, color, and sound in capacitor.config.json. Requires the @capacitor/local-notifications plugin. Place drawable files for icons in the res/drawable folder and reference them by filename (without extension). The properties smallIcon, iconColor, and sound customize the notification appearance and behavior. Input: none. Output: Capacitor will use these defaults when scheduling local notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"LocalNotifications\\\": {\\n      \\\"smallIcon\\\": \\\"ic_stat_icon_config_sample\\\",\\n      \\\"iconColor\\\": \\\"#488AFF\\\",\\n      \\\"sound\\\": \\\"beep.wav\\\"\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using the Capacitor Share API in TypeScript\nDESCRIPTION: Demonstrates various ways to use the Share API in a TypeScript application. Examples include sharing text and a URL, sharing text only, sharing a URL only, sharing a local file obtained from the Camera plugin, and sharing multiple local files obtained from the Camera plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/share.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Share } from '@capacitor/share';\n\nawait Share.share({\n  title: 'See cool stuff',\n  text: 'Really awesome thing you need to see right meow',\n  url: 'http://ionicframework.com/',\n  dialogTitle: 'Share with buddies',\n});\n\n// Share text only\nawait Share.share({\n  text: 'Really awesome thing you need to see right meow',\n});\n\n// Share url only\nawait Share.share({\n  url: 'http://ionicframework.com/',\n});\n\n// Share local file using url parameter\nconst photo = await Camera.getPhoto(options);\nawait Share.share({\n  url: photo.path,\n});\n\n// Share multiple files using files parameter\nconst { photos } = await Camera.pickImages(options);\nawait Share.share({\n  files: photos.map(photo => photo.path!),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request Options Interface - Capacitor - TypeScript\nDESCRIPTION: Defines the structure of the HttpOptions interface and its properties for configuring HTTP requests using Capacitor. Essential properties include url, method, headers, timeout settings, request data, and additional web fetch configuration. The table describes expected data types, platform-specific constraints (notably for complex data types on iOS/Android), and how each option modifies request behavior. Dependencies include the Capacitor runtime and, in some cases, patched fetch/XHR calls. Inputs are strongly typed, with outputs determined by the configured responseType and dataType.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HttpOptions {\n  url: string; // The URL to send the request to.\n  method?: string; // HTTP method (GET, POST, etc.) Defaults to 'GET'.\n  params?: HttpParams; // URL parameters to append to the request\n  data?: any; // Payload. On mobile, must be string/JSON; complex types require base64 serialization.\n  headers?: HttpHeaders; // HTTP headers\n  readTimeout?: number; // Timeout for reading additional data (ms)\n  connectTimeout?: number; // Timeout for initial connection (ms)\n  disableRedirects?: boolean; // Disable automatic HTTP redirects\n  webFetchExtra?: RequestInit; // Extra web fetch init options\n  responseType?: HttpResponseType; // How to parse the response; ignored for JSON content-type\n  shouldEncodeUrlParams?: boolean; // If false, disables automatic URL param encoding (default: true)\n  dataType?: 'file' | 'formData'; // Indicates if data was converted on the native layer\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Deep Link Events and Redirecting in React with Capacitor App API (TypeScript)\nDESCRIPTION: This React functional component, intended for use with React Router, sets up an effect to listen for deep link events using Capacitor's App API. Upon receiving an 'appUrlOpen' event, it extracts the route slug from the incoming URL and uses React Router's history.push to navigate. Requires React, React Router, and @capacitor/app. Inputs are event.url; outputs are navigation actions; it returns null as it is a non-visual helper component.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst AppUrlListener: React.FC<any> = () => {\n  let history = useHistory();\n  useEffect(() => {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n      // Example url: https://beerswift.app/tabs/tab2\n      // slug = /tabs/tab2\n      const slug = event.url.split('.app').pop();\n      if (slug) {\n        history.push(slug);\n      }\n      // If no match, do nothing - let regular routing\n      // logic take over\n    });\n  }, []);\n\n  return null;\n};\n\nexport default AppUrlListener;\n```\n\n----------------------------------------\n\nTITLE: Defining a ScreenOrientation Plugin Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a ScreenOrientation plugin that includes methods for getting, locking and unlocking screen orientation, as well as event listeners for orientation changes. The interface serves as a contract for platform-specific implementations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/designing-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface ScreenOrientationPlugin {\n  /**\n   * Returns the screen's current orientation.\n   */\n  orientation(): Promise<{ type: OrientationType }>;\n\n  /**\n   * Locks the screen orientation.\n   */\n  lock(opts: { orientation: OrientationLockType }): Promise<void>;\n\n  /**\n   * Unlocks the screen's orientation.\n   */\n  unlock(): Promise<void>;\n\n  /**\n   * Listens for screen orientation changes.\n   */\n  addListener(\n    eventName: 'screenOrientationChange',\n    listenerFunc: (orientation: { type: OrientationType }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners\n   */\n  removeAllListeners(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Capacitor App using NPM\nDESCRIPTION: This command uses the @capacitor/create-app package to scaffold a new Capacitor application in an empty directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/app\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation for Capacitor\nDESCRIPTION: Command to check the installed Node.js version to ensure it meets Capacitor's requirement of Node 20 or higher.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n# v20.9.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project - CLI Commands (bash)\nDESCRIPTION: These bash commands initialize a new Capacitor instance within the project folder, using details found in the Cordova config.xml file. Dependencies: npx (Node Package Executor), Capacitor CLI must be available. Inputs are prompted interactively for app name and bundle ID; output is a configured Capacitor project appended to your web app repository. This operation is essential to begin the migration process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Using @capacitor/app API in TypeScript\nDESCRIPTION: Example of using the App API to listen for state changes, URL opens, and checking launch URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from '@capacitor/app';\n\nApp.addListener('appStateChange', ({ isActive }) => {\n  console.log('App state changed. Is active?', isActive);\n});\n\nApp.addListener('appUrlOpen', data => {\n  console.log('App opened with URL:', data);\n});\n\nApp.addListener('appRestoredResult', data => {\n  console.log('Restored state:', data);\n});\n\nconst checkAppLaunchUrl = async () => {\n  const { url } = await App.getLaunchUrl();\n\n  console.log('App opened with URL: ' + url);\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Environment Configuration in capacitor.config.ts\nDESCRIPTION: Complete TypeScript implementation for dynamically exporting different Capacitor configurations based on the NODE_ENV environment variable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nlet config: CapacitorConfig;\n\nconst baseConfig: CapacitorConfig = {\n  appId: 'io.ionic.starter',\n  appName: 'My App',\n  webDir: 'build',\n};\n\nswitch (process.env.NODE_ENV) {\n  case 'qa':\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App QA',\n      },\n      android: {\n        flavor: 'qa',\n      },\n    };\n    break;\n  default:\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App',\n      },\n      android: {\n        flavor: 'dev',\n      },\n    };\n    break;\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Handling in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use the `@capacitor/push-notifications` plugin API. It includes functions for adding listeners for registration success/error, notification reception, and action performed events. It also shows how to check and request permissions, register the device for push notifications, and retrieve a list of delivered notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PushNotifications } from '@capacitor/push-notifications';\n\nconst addListeners = async () => {\n  await PushNotifications.addListener('registration', token => {\n    console.info('Registration token: ', token.value);\n  });\n\n  await PushNotifications.addListener('registrationError', err => {\n    console.error('Registration error: ', err.error);\n  });\n\n  await PushNotifications.addListener('pushNotificationReceived', notification => {\n    console.log('Push notification received: ', notification);\n  });\n\n  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n    console.log('Push notification action performed', notification.actionId, notification.inputValue);\n  });\n}\n\nconst registerNotifications = async () => {\n  let permStatus = await PushNotifications.checkPermissions();\n\n  if (permStatus.receive === 'prompt') {\n    permStatus = await PushNotifications.requestPermissions();\n  }\n\n  if (permStatus.receive !== 'granted') {\n    throw new Error('User denied permissions!');\n  }\n\n  await PushNotifications.register();\n}\n\nconst getDeliveredNotifications = async () => {\n  const notificationList = await PushNotifications.getDeliveredNotifications();\n  console.log('delivered notifications', notificationList);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Package ID in Android Gradle File\nDESCRIPTION: Demonstrates how to change the applicationId (Package ID) in the android/app/build.gradle file for a Capacitor Android app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndefaultConfig {\n-       applicationId \"com.capacitorjs.app\"\n+       applicationId \"com.mycompany.myapp\"\n```\n\n----------------------------------------\n\nTITLE: Android Intent Filter Configuration for Deep Linking\nDESCRIPTION: This XML snippet shows the Intent Filter configuration in the AndroidManifest.xml file. It enables the app to handle deep links for a specific domain and scheme.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Checking Filesystem Permissions with Capacitor Filesystem API (checkPermissions)\nDESCRIPTION: Defines the `checkPermissions` method signature from the Capacitor Filesystem API. This asynchronous function checks the current read/write permissions status, primarily required on Android when using `Directory.Documents` or `Directory.ExternalStorage`. It returns a Promise resolving to a `PermissionStatus` object indicating the current grant state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin and Exposing Methods - Swift\nDESCRIPTION: This snippet shows a full Capacitor plugin class ('EchoPlugin') implementation. It extends both CAPPlugin and CAPBridgedPlugin, specifies plugin identifier, JavaScript name, and registers exposed methods in the 'pluginMethods' array. The 'echo' method retrieves a value from the call, uses the Echo implementation, and returns the result via 'resolve'. Dependencies include Foundation and Capacitor libraries. The method receives a CAPPluginCall, extracts input data using 'getString', and returns structured output for JavaScript consumption.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin, CAPBridgedPlugin {\n    public let identifier = \"EchoPlugin\"\n    public let jsName = \"Echo\"\n    public let pluginMethods: [CAPPluginMethod] = [\n        CAPPluginMethod(name: \"echo\", returnType: CAPPluginReturnPromise)\n    ]\n    private let implementation = Echo()\n\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\n            \"value\": implementation.echo(value)\n        ])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map in TypeScript with Capacitor\nDESCRIPTION: Creates a new Google Map instance with the specified options. Returns a Promise that resolves to a GoogleMap object. Optionally accepts a callback that fires when the map is ready.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(options: CreateMapArgs, callback?: MapListenerCallback<MapReadyCallbackData> | undefined) => Promise<GoogleMap>\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions - Capacitor Plugin API - TypeScript\nDESCRIPTION: This code defines the requestPermissions method, prompting the user to grant notification permissions if needed. It returns a Promise with a PermissionStatus object indicating the resulting permission state. Call this before trying to display notifications to comply with platform security requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Showing an Action Sheet using ActionSheet Plugin - TypeScript\nDESCRIPTION: This example illustrates how to import and use the ActionSheet Capacitor plugin in a TypeScript application to present a native Action Sheet with multiple options. It imports required symbols from @capacitor/action-sheet, defines an asynchronous function (showActions) which calls showActions with title, message, and option parameters, including option-specific styles. The promise resolves with the selected action result which is logged. Requires @capacitor/action-sheet to be installed, options to be appropriately structured, and assumes the environment supports Capacitor plugin calls. Inputs: user selection; Output: logs the index of selected option to the console.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';\\n\\nconst showActions = async () => {\\n  const result = await ActionSheet.showActions({\\n    title: 'Photo Options',\\n    message: 'Select an option to perform',\\n    options: [\\n      {\\n        title: 'Upload',\\n      },\\n      {\\n        title: 'Share',\\n      },\\n      {\\n        title: 'Remove',\\n        style: ActionSheetButtonStyle.Destructive,\\n      },\\n    ],\\n  });\\n\\n  console.log('Action Sheet result:', result);\\n};\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET and POST Requests with Capacitor HTTP - TypeScript\nDESCRIPTION: This example TypeScript code shows how to import and use 'CapacitorHttp' for making GET and POST requests. It demonstrates forming request options with headers, URL, parameters, or data and then awaiting the promise-based result as 'HttpResponse'. The dependencies include '@capacitor/core'. Input parameters are passed via a structured 'options' object; output is a promise resolving to an 'HttpResponse'. Limitations include the requirement for JSON-serializable data in POST requests, and notes for handling large responses.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorHttp } from '@capacitor/core';\\n\\n// Example of a GET request\\nconst doGet = () => {\\n  const options = {\\n    url: 'https://example.com/my/api',\\n    headers: { 'X-Fake-Header': 'Fake-Value' },\\n    params: { size: 'XL' },\\n  };\\n\\n  const response: HttpResponse = await CapacitorHttp.get(options);\\n\\n  // or...\\n  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })\\n};\\n\\n// Example of a POST request. Note: data\\n// can be passed as a raw JS Object (must be JSON serializable)\\nconst doPost = () => {\\n  const options = {\\n    url: 'https://example.com/my/api',\\n    headers: { 'X-Fake-Header': 'Fake-Value' },\\n    data: { foo: 'bar' },\\n  };\\n\\n  const response: HttpResponse = await CapacitorHttp.post(options);\\n\\n  // or...\\n  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Presentation Options - Capacitor Config - JSON\nDESCRIPTION: This snippet shows how to adjust push notification presentation options directly in capacitor.config.json. The presentationOptions array controls badge, sound, and alert behavior for foreground notifications. Requires Capacitor CLI and plugin v1.0.0+, and values are passed to the plugin at runtime. Empty array disables notification dialogs. Inputs are JSON-formatted configuration; output is the behavior of foreground notifications on supported platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"PushNotifications\\\": {\\n      \\\"presentationOptions\\\": [\\\"badge\\\", \\\"sound\\\", \\\"alert\\\"]\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preferences API for JSON Storage in Capacitor\nDESCRIPTION: Example of using Capacitor's Preferences API to store and retrieve JSON data. The code demonstrates how to serialize an object to JSON for storage and parse it when retrieving.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\n// JSON \"set\" example\nasync setObject() {\n  await Preferences.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Preferences.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Capacitor Plugin in Swift - Swift\nDESCRIPTION: This Swift code defines a Capacitor plugin class called EchoPlugin, which exposes a single method echo to JavaScript. It imports the Capacitor framework and implements the echo method, retrieving a string value from the JS call and returning it via the promise resolver. The @objc annotations are required for Objective-C interoperability in the Capacitor runtime. This file must be registered with Capacitor to be accessible from JavaScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\"value\": value])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting File Paths for Web View Compatibility in Capacitor\nDESCRIPTION: Demonstrates using convertFileSrc() to transform device file paths into Web View-compatible URLs. This is necessary because Capacitor apps are served on a different protocol than device files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst rawPhotoUri = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),\n```\n\n----------------------------------------\n\nTITLE: Taking a Photo with Camera API\nDESCRIPTION: TypeScript example demonstrating how to capture a photo using the Camera plugin, including setting quality parameters, enabling editing, and handling the resulting image.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera, CameraResultType } from '@capacitor/camera';\n\nconst takePicture = async () => {\n  const image = await Camera.getPhoto({\n    quality: 90,\n    allowEditing: true,\n    resultType: CameraResultType.Uri\n  });\n\n  // image.webPath will contain a path that can be set as an image src.\n  // You can access the original file using image.path, which can be\n  // passed to the Filesystem API to read the raw data of the image,\n  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n  var imageUrl = image.webPath;\n\n  // Can be set to the src of an image now\n  imageElement.src = imageUrl;\n};\n```\n\n----------------------------------------\n\nTITLE: Cordova Author Element - XML Snippet for Metadata\nDESCRIPTION: Represents the <author> element from Cordova's config.xml, carrying author metadata such as email and project website. While this information can be replicated in package.json, it is not actively used by Capacitor or surfaced within the application runtime. Not required for functionality—informational only.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<author email=\"email@test.com\" href=\"http://ionicframework.com/\">Ionic Framework Team</author>\n```\n\n----------------------------------------\n\nTITLE: Mocking Manual Stubs using Jasmine Spies in TypeScript\nDESCRIPTION: Contains TypeScript examples illustrating how to use Jasmine spies (`spyOn`) within unit tests that leverage the manual mock stubs (like `Storage`) configured via TypeScript path mapping. The code shows how to spy on specific methods (`Storage.get`, `Storage.clear`), define conditional return values using `.withArgs().and.returnValue()`, and verify that methods were called using `toHaveBeenCalledTimes`. This technique allows detailed interaction testing with the mocked Capacitor plugin in a Jasmine environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/mocking-plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    spyOn(Storage, 'get');\n    (Storage.get as any)\n      .withArgs({ key: 'firstName' })\n      .and.returnValue(Promise.resolve({ value: 'Jason' }));\n    (Storage.get as any)\n      .withArgs({ key: 'lastName' })\n      .and.returnValue(Promise.resolve({ value: 'Jones' }));\n\n    fixture.detectChanges();\n    await fixture.whenRenderingDone();\n\n    expect(component.firstName).toEqual('Jason');\n    expect(component.lastName).toEqual('Jones');\n  });\n\n  it('clears the storage', () => {\n    spyOn(Storage, 'clear');\n    click(clear.nativeElement);\n    fixture.detectChanges();\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing and Checking Plugin Availability with Capacitor - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Capacitor module and check if a specific plugin (e.g., Camera) is available on the current platform. It is required to have '@capacitor/core' installed as a dependency. The method 'isPluginAvailable' is called with the plugin name as a parameter and returns a boolean indicating availability. Expected input is a valid plugin name string, the output is a boolean. Limitations: The function only checks plugins registered in the plugin registry.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n```\n\n----------------------------------------\n\nTITLE: Mocking Manual Stubs using Jest Functions in TypeScript\nDESCRIPTION: Provides TypeScript examples of how to utilize Jest's mocking capabilities (`jest.fn`, `mockImplementation`, `mockResolvedValue`) in unit tests. These tests interact with the manual mock stub (`Storage`) created earlier, allowing specific return values to be defined for methods like `Storage.get` and enabling checks for method calls like `Storage.clear`. This demonstrates fine-grained control over the mock behavior within individual Jest tests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/mocking-plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    Storage.get = jest.fn().mockImplementation(\n      async (data: { key: string }): Promise<{ value: string }> => {\n        return data.key === \"firstName\"\n          ? { value: \"Jimmy\" }\n          : data.key === \"lastName\"\n          ? { value: \"Simms\" }\n          : { value: \"unknown\" };\n      }\n    );\n    const w = mount(Home);\n    await flushPromises();\n    expect(w.vm.firstName).toEqual(\"Jimmy\");\n    expect(w.vm.lastName).toEqual(\"Simms\");\n  });\n\n  it(\"clears the storage\", () => {\n    const button = wrapper.findComponent('[data-testid=\"clear\"]');\n    Storage.clear = jest.fn().mockResolvedValue(undefined);\n    button.trigger(\"click\");\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Converting Orientation Types to Android ActivityInfo Values\nDESCRIPTION: Helper method that maps JavaScript orientation type strings to corresponding Android ActivityInfo orientation constants.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate int fromOrientationTypeToEnum(String orientationType) {\n   switch (orientationType) {\n       case \"landscape-primary\":\n           return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n       case \"landscape-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;\n       case \"portrait-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;\n       default:\n           // Case: portrait-primary\n           return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Plugin Definitions and Web Implementation in TypeScript\nDESCRIPTION: This snippet shows the necessary export statements within the plugin's main `src/index.ts` file. It ensures that both the plugin's type definitions (`./definitions`) and its web implementation (`./web`) are exported, making them available for consumption by applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport * from './definitions';\nexport * from './web';\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the scanBarcode Method Signature (TypeScript)\nDESCRIPTION: This TypeScript interface method signature defines the `scanBarcode` function. It takes an options object of type `CapacitorBarcodeScannerOptions` and returns a Promise that resolves with the scan result, defined by `CapacitorBarcodeScannerScanResult`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nscanBarcode(options: CapacitorBarcodeScannerOptions) => Promise<CapacitorBarcodeScannerScanResult>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Capacitor Plugin Project Using npm - Bash\nDESCRIPTION: This Bash snippet demonstrates how to scaffold a new Capacitor plugin project using the official plugin generator tool. The command initializes a project setup with all necessary configurations and prompts for user input regarding plugin details. Requires Node.js LTS and npm 6+ to be installed on the system; additional command-line options can be supplied as per the tool's GitHub documentation. The primary input is the shell command, and the expected output is a newly generated plugin folder structure in the current directory. Limitations include environmental prerequisites and potential variations in prompts based on generator version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/plugin@latest\n\n```\n\n----------------------------------------\n\nTITLE: Defining the CameraDirection Enum in TypeScript\nDESCRIPTION: Defines the TypeScript enum `CameraDirection` used to specify which camera (front or rear) should be used when `CameraSource` is set to 'CAMERA'. Options are 'REAR' and 'FRONT'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraDirection {\n  /** Use the rear-facing camera */\n  Rear = 'REAR',\n  /** Use the front-facing camera */\n  Front = 'FRONT'\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Implementation Example\nDESCRIPTION: Complete example of Google Maps implementation in an Angular component\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\n@Component({\n  template: `\n    <capacitor-google-maps #map></capacitor-google-maps>\n    <button (click)=\"createMap()\">Create Map</button>\n  `,\n  styles: [\n    `\n      capacitor-google-maps {\n        display: inline-block;\n        width: 275px;\n        height: 400px;\n      }\n    `,\n  ],\n})\nexport class MyMap {\n  @ViewChild('map')\n  mapRef: ElementRef<HTMLElement>;\n  newMap: GoogleMap;\n\n  async createMap() {\n    this.newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: this.mapRef.nativeElement,\n      apiKey: environment.apiKey,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8,\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting File Paths with convertFileSrc\nDESCRIPTION: Demonstrates how to convert device file paths to Web View-friendly paths using convertFileSrc, including an example with filesystem operations and DOM manipulation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: Interacting with the Google Map Instance using TypeScript\nDESCRIPTION: Provides examples of common interactions with the map instance returned by `GoogleMap.create()`. It demonstrates adding markers (`addMarker`), programmatically changing the map's view (`setCamera`), enabling/disabling marker clustering (`enableClustering`), setting up event listeners for marker clicks (`setOnMarkerClickListener`), and cleaning up resources by destroying the map instance (`destroy`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst newMap = await GoogleMap.create({...});\n\n// Add a marker to the map\nconst markerId = await newMap.addMarker({\n  coordinate: {\n    lat: 33.6,\n    lng: -117.9\n  }\n});\n\n// Move the map programmatically\nawait newMap.setCamera({\n  coordinate: {\n    lat: 33.6,\n    lng: -117.9\n  }\n});\n\n// Enable marker clustering\nawait newMap.enableClustering();\n\n// Handle marker click\nawait newMap.setOnMarkerClickListener((event) => {...});\n\n// Clean up map reference\nawait newMap.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Name in Android Strings Resource\nDESCRIPTION: Demonstrates how to change the activity name in the strings.xml resource file for an Android app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"title_activity_main\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin in MainActivity\nDESCRIPTION: Code to register the ScreenOrientation plugin in the Capacitor app's MainActivity class. This bridges the JavaScript plugin APIs with the native Android implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin;\n\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;\n\npublic class MainActivity extends BridgeActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        registerPlugin(ScreenOrientationPlugin.class);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Plugin in Java for Capacitor\nDESCRIPTION: Creates a basic Echo plugin that demonstrates communication between JavaScript and Java. The plugin receives a string value and echoes it back through a resolved promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Capture and Selection Options - Capacitor Camera - TypeScript\nDESCRIPTION: This TypeScript interface outlines the available configuration settings for capturing or selecting images using the Capacitor Camera plugin. It provides detailed options such as image quality, source, editing capabilities, storage preferences, and UI customizations. Dependencies include the Capacitor Camera plugin and its associated enumerations (CameraResultType, CameraSource, CameraDirection), and it targets applications needing granular control over camera operations. Key properties define image dimensions, result format, orientation, and various prompt labels; typical inputs are property values matching specified types, and outputs are configuration objects used with Camera methods. Relevant constraints and defaults are documented for each option to ensure correct usage across platform variants.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ImageOptions {\n  quality?: number; // JPEG quality, 0-100\n  allowEditing?: boolean; // Enable user cropping or editing\n  resultType?: CameraResultType; // Return type: 'Base64', 'DataUrl', or 'Uri'\n  saveToGallery?: boolean; // Save photo to gallery\n  width?: number; // Image width\n  height?: number; // Image height\n  preserveAspectRatio?: boolean; // (No effect; resizing always preserves aspect)\n  correctOrientation?: boolean; // Rotate image to correct orientation\n  source?: CameraSource; // Photo source selection\n  direction?: CameraDirection; // Camera direction (iOS/Web only)\n  presentationStyle?: 'fullscreen' | 'popover'; // iOS presentation style\n  webUseInput?: boolean; // Web: use PWA Element or input\n  promptLabelHeader?: string; // Prompt header text\n  promptLabelCancel?: string; // Prompt cancel button text (iOS only)\n  promptLabelPhoto?: string; // Prompt 'From Photos' button label\n  promptLabelPicture?: string; // Prompt 'Take Picture' button label\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Content using the Capacitor Share API in TypeScript\nDESCRIPTION: Demonstrates importing the `Share` object from `@capacitor/share` and calling the asynchronous `share` method with sample `title`, `text`, `url`, and `dialogTitle` options to trigger the native sharing modal. It's noted that supplying all fields is recommended for cross-platform compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/share.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Share } from '@capacitor/share';\n\nawait Share.share({\n  title: 'See cool stuff',\n  text: 'Really awesome thing you need to see right meow',\n  url: 'http://ionicframework.com/',\n  dialogTitle: 'Share with buddies',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Push Notifications in Angular Component (TypeScript)\nDESCRIPTION: Implements the `ngOnInit` lifecycle hook in an Angular component (`HomePage`) to handle push notification setup. It requests user permission, registers the device with APNS/FCM upon success, and adds listeners to handle registration tokens, registration errors, incoming notifications while the app is open, and actions performed when a notification is tapped. Uses `alert` for demonstration purposes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomePage implements OnInit {\n\nngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration',\n      (token: Token) => {\n        alert('Push registration success, token: ' + token.value);\n      }\n    );\n\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError',\n      (error: any) => {\n        alert('Error on registration: ' + JSON.stringify(error));\n      }\n    );\n\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      }\n    );\n\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      }\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting JSON Objects with Capacitor Preferences API\nDESCRIPTION: Demonstrates how to use the Capacitor Preferences API to store and retrieve JSON objects. The example includes functions for setting a user object and retrieving it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\n// JSON \"set\" example\nasync setObject() {\n  await Preferences.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Preferences.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Channel (Android) - Capacitor Plugin API - TypeScript\nDESCRIPTION: This snippet implements the createChannel method, specific to Android, for creating a notification channel with custom settings. The input parameter is a NotificationChannel object, and the method returns a Promise. Use this to categorize notifications and customize user experience for channels introduced in Android 8.0+.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: NotificationChannel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting Delivered Notifications in Capacitor (TypeScript)\nDESCRIPTION: Retrieves a list of notifications currently visible to the user in the notification center/tray. Returns a Promise that resolves with a `DeliveredNotifications` object containing an array of notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<DeliveredNotifications>\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Request and Callback Pattern in Java\nDESCRIPTION: Demonstrates the standard pattern for handling runtime permissions. The `takePhoto` method checks the current permission state for the \"camera\" alias using `getPermissionState()`. If not granted, it calls `requestPermissionForAlias()`, specifying the alias, the original `PluginCall`, and the name of the callback method (\"cameraPermsCallback\"). The `cameraPermsCallback` method, annotated with `@PermissionCallback`, handles the result of the permission request.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void takePhoto(PluginCall call) {\n  if (getPermissionState(\"camera\") != PermissionState.GRANTED) {\n    requestPermissionForAlias(\"camera\", call, \"cameraPermsCallback\");\n  } else {\n    loadCamera(call);\n  }\n}\n\n@PermissionCallback\nprivate void cameraPermsCallback(PluginCall call) {\n  if (getPermissionState(\"camera\") == PermissionState.GRANTED) {\n    loadCamera(call);\n  } else {\n    call.reject(\"Permission is required to take a picture\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preferences API Storage in Capacitor TypeScript\nDESCRIPTION: Demonstrates how to use Capacitor's Preferences API to store and retrieve JSON data. Shows examples of setting and getting objects using key-value storage with async/await pattern.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\n// JSON \"set\" example\nasync setObject() {\n  await Preferences.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Preferences.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Filesystem API in TypeScript\nDESCRIPTION: Provides examples of common file operations using the Capacitor Filesystem API in TypeScript. It demonstrates how to write, read, and delete a file within the Documents directory, and how to read a file using its full file path URI. Dependencies include Filesystem, Directory, and Encoding from '@capacitor/filesystem'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\n\nconst writeSecretFile = async () => {\n  await Filesystem.writeFile({\n    path: 'secrets/text.txt',\n    data: 'This is a test',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n};\n\nconst readSecretFile = async () => {\n  const contents = await Filesystem.readFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n\n  console.log('secrets:', contents);\n};\n\nconst deleteSecretFile = async () => {\n  await Filesystem.deleteFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n  });\n};\n\nconst readFilePath = async () => {\n  // Here's an example of reading a file with a full file path. Use this to\n  // read binary data (base64 encoded) from plugins that return File URIs, such as\n  // the Camera.\n  const contents = await Filesystem.readFile({\n    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',\n  });\n\n  console.log('data:', contents);\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Exact Notification Settings in Capacitor (TypeScript)\nDESCRIPTION: Method to check if the application has permission to use exact alarms for precise notification timing. This functionality is only available on Android devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncheckExactNotificationSetting() => Promise<SettingsPermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Getting Delivered Notifications - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Exposes the TypeScript signature for retrieving notifications that have already been delivered and are visible in the notification shade, via the Capacitor plugin. Returns a Promise resolving to a DeliveredNotifications object. No arguments are needed. Inputs: none. Outputs: delivered notifications list.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<DeliveredNotifications>\\n\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: Command to open the Android project in Android Studio using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Plugin in Swift\nDESCRIPTION: Creates a basic Echo plugin class that extends CAPPlugin to enable communication between JavaScript and native code. The plugin includes an echo method that returns the input value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\"value\": value])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: StatusBar API Usage Example in TypeScript\nDESCRIPTION: Comprehensive example demonstrating how to use the StatusBar API including event handling, changing styles, and toggling visibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\n// iOS only\nwindow.addEventListener('statusTap', function () {\n  console.log('statusbar tapped');\n});\n\n// Display content under transparent status bar\nStatusBar.setOverlaysWebView({ overlay: true });\n\nconst setStatusBarStyleDark = async () => {\n  await StatusBar.setStyle({ style: Style.Dark });\n};\n\nconst setStatusBarStyleLight = async () => {\n  await StatusBar.setStyle({ style: Style.Light });\n};\n\nconst hideStatusBar = async () => {\n  await StatusBar.hide();\n};\n\nconst showStatusBar = async () => {\n  await StatusBar.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Screen Reader Plugin in TypeScript\nDESCRIPTION: Demonstrates basic usage of the Screen Reader plugin in TypeScript. It shows how to import the plugin, add a listener to detect screen reader state changes, asynchronously check if the screen reader is currently enabled, and use the `speak` method for text-to-speech output.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/screen-reader.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenReader } from '@capacitor/screen-reader';\n\nScreenReader.addListener('screenReaderStateChange', ({ value }) => {\n  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);\n});\n\nconst checkScreenReaderEnabled = async () => {\n  const { value } = await ScreenReader.isEnabled();\n\n  console.log('Voice over enabled? ' + value);\n};\n\nconst sayHello = async () => {\n  await ScreenReader.speak({ value: 'Hello World!' });\n};\n```\n\n----------------------------------------\n\nTITLE: Monitoring Network Status with Network Capacitor Plugin\nDESCRIPTION: Example demonstrating how to listen for network status changes and query the current network status using the Network Capacitor Plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/network.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Network } from '@capacitor/network';\n\nNetwork.addListener('networkStatusChange', status => {\n  console.log('Network status changed', status);\n});\n\nconst logCurrentNetworkStatus = async () => {\n  const status = await Network.getStatus();\n\n  console.log('Network status:', status);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Check and Request Methods in Swift\nDESCRIPTION: Illustrates adding the necessary overrides for `checkPermissions` and `requestPermissions` methods to a Swift Capacitor plugin class. These methods are required for implementing the standard Capacitor permissions pattern.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n import Capacitor\n\n @objc(EchoPlugin)\n public class EchoPlugin: CAPPlugin {\n     ...\n\n+    @objc override public func checkPermissions(_ call: CAPPluginCall) {\n+        // TODO\n+    }\n\n+    @objc override public func requestPermissions(_ call: CAPPluginCall) {\n+        // TODO\n+    }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms to a Capacitor App - Bash\nDESCRIPTION: This Bash snippet installs required Capacitor platform dependencies and adds support for iOS and Android. It assumes the project is already initialized, runs the build step, installs the '@capacitor/ios' and '@capacitor/android' packages, then adds and synchronizes both platforms. The commands must be executed from the root directory of a prepared Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\\nnpm install @capacitor/ios @capacitor/android\\nnpx cap add ios\\nnpx cap add android\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Network Status and Querying State - Capacitor Network API - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to set up an event listener for real-time network status changes and how to retrieve the current network status using the Capacitor Network API. It imports the Network module, attaches a 'networkStatusChange' event listener, and defines an asynchronous function that uses Network.getStatus() to obtain current connectivity information. The code requires that @capacitor/network is installed and synchronized; parameters include the event name and a listener callback, and the getStatus function returns a Promise with the connection details. The inputs are the triggered network events, and the outputs are logs of the network status. Constraints include requiring a Capacitor environment and the plugin to be properly installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/network.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Network } from '@capacitor/network';\\n\\nNetwork.addListener('networkStatusChange', status => {\\n  console.log('Network status changed', status);\\n});\\n\\nconst logCurrentNetworkStatus = async () => {\\n  const status = await Network.getStatus();\\n\\n  console.log('Network status:', status);\\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Files with Capacitor Filesystem API (readFile)\nDESCRIPTION: Defines the `readFile` method signature from the Capacitor Filesystem API. This asynchronous function takes `ReadFileOptions` (specifying path, optional directory, and encoding) and returns a Promise resolving to a `ReadFileResult` containing the file's data as a string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadFile(options: ReadFileOptions) => Promise<ReadFileResult>\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Plugins in TypeScript\nDESCRIPTION: Shows how to import and use Capacitor plugins in a TypeScript project. This example uses the Geolocation plugin to get the current position.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/index.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst position = await Plugins.Geolocation.getCurrentPosition();\n```\n\n----------------------------------------\n\nTITLE: Listening for Deep Link Events and Redirecting in Angular with Capacitor App API (TypeScript)\nDESCRIPTION: This snippet sets up a listener for the 'appUrlOpen' event in an Angular app using Capacitor's App API. When a user opens the app via a deep link, it extracts the route slug from the incoming URL and navigates to it using Angular's router (within NgZone to ensure UI updates). Inputs are event.url; outputs are app navigation events. If the slug is not present, standard routing logic continues. This function is crucial for activating deep linking in Angular with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitializeApp() {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n        this.zone.run(() => {\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = event.url.split(\".app\").pop();\n            if (slug) {\n                this.router.navigateByUrl(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ionic Angular App using Ionic CLI (Bash)\nDESCRIPTION: Uses the Ionic CLI to generate a new Ionic application named 'capApp', based on the 'blank' starter template, and specifically configured for the Angular framework.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic start capApp blank --type=angular\n```\n\n----------------------------------------\n\nTITLE: Managing Screen Orientation Dynamically with TypeScript\nDESCRIPTION: TypeScript code demonstrating how to programmatically lock and unlock screen orientation using the @capacitor/screen-orientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenOrientation } from '@capacitor/screen-orientation';\n...\nawait ScreenOrientation.lock({ orientation: 'portrait' });\nawait ScreenOrientation.lock({ orientation: 'landscape' });\n\n// To unlock orientation which will default back to the global setting:\nawait ScreenOrientation.unlock();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Share Plugin in TypeScript\nDESCRIPTION: Example showing how to use the Share API for sharing content with multiple options like title, text, URL, and dialog title. Also demonstrates text-only, URL-only, local file, and multiple file sharing scenarios.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/share.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Share } from '@capacitor/share';\n\nawait Share.share({\n  title: 'See cool stuff',\n  text: 'Really awesome thing you need to see right meow',\n  url: 'http://ionicframework.com/',\n  dialogTitle: 'Share with buddies',\n});\n\n// Share text only\nawait Share.share({\n  text: 'Really awesome thing you need to see right meow',\n});\n\n// Share url only\nawait Share.share({\n  url: 'http://ionicframework.com/',\n});\n\n// Share local file using url parameter\nconst photo = await Camera.getPhoto(options);\nawait Share.share({\n  url: photo.path,\n});\n\n// Share multiple files using files parameter\nconst { photos } = await Camera.pickImages(options);\nawait Share.share({\n  files: photos.map(photo => photo.path!),\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Data from a Capacitor Android Plugin Method in Java\nDESCRIPTION: Provides an example of constructing a `JSObject`, populating it with key-value pairs (including a nested `JSObject`), and sending this data back to the successful JavaScript caller using the `call.resolve()` method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"added\", true);\nJSObject info = new JSObject();\ninfo.put(\"id\", \"unique-id-1234\");\nret.put(\"info\", info);\ncall.resolve(ret);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Screen Orientation Control in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to programmatically lock and unlock screen orientation using the @capacitor/screen-orientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenOrientation } from '@capacitor/screen-orientation';\n...\nawait ScreenOrientation.lock({ orientation: 'portrait' });\nawait ScreenOrientation.lock({ orientation: 'landscape' });\n\n// To unlock orientation which will default back to the global setting:\nawait ScreenOrientation.unlock();\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Android Capacitor Plugins\nDESCRIPTION: This Java code demonstrates how to emit a custom event from an Android Capacitor plugin. It creates a JSObject with data and uses the notifyListeners method to send the event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"value\", \"some value\");\nnotifyListeners(\"myPluginEvent\", ret);\n```\n\n----------------------------------------\n\nTITLE: Providing TypeScript Typings for Plugin Configuration (TypeScript)\nDESCRIPTION: Demonstrates how to extend the `@capacitor/cli`'s `PluginsConfig` interface to define TypeScript types and JSDoc documentation for a plugin's configuration options (`style`, `iconColor`). This improves developer experience and type safety when using the plugin. It's recommended to place this in the plugin's `definitions.ts` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    MyCoolPlugin?: {\n      /**\n       * Override the cool theme style if your app doesn't support light/dark theme changes.\n       *\n       * @since 1.0.0\n       * @example \"light\"\n       */\n      style?: 'dark' | 'light';\n\n      /**\n       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.\n       *\n       * @since 1.0.0\n       * @default #ffffff\n       * @example \"#FF9900\"\n       */\n      iconColor?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Device Info Usage Example in TypeScript\nDESCRIPTION: Example showing how to import and use the Device API to get device information and battery status\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Device } from '@capacitor/device';\n\nconst logDeviceInfo = async () => {\n  const info = await Device.getInfo();\n\n  console.log(info);\n};\n\nconst logBatteryInfo = async () => {\n  const info = await Device.getBatteryInfo();\n\n  console.log(info);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps in a React Component (JSX)\nDESCRIPTION: Provides a full example of integrating the Capacitor Google Maps plugin within a React functional component. It uses `useRef` to get a reference to the `<capacitor-google-map>` element, defines an async function to create the map, and includes basic styling and a button to trigger map creation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\nimport { useRef } from 'react';\n\nconst MyMap: React.FC = () => {\n  const mapRef = useRef<HTMLElement>();\n  let newMap: GoogleMap;\n\n  async function createMap() {\n    if (!mapRef.current) return;\n\n    newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: mapRef.current,\n      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9\n        },\n        zoom: 8\n      }\n    })\n  }\n\n  return (\n    <div className=\"component-wrapper\">\n      <capacitor-google-map ref={mapRef} style={{\n        display: 'inline-block',\n        width: 275,\n        height: 400\n      }}></capacitor-google-map>\n\n      <button onClick={createMap}>Create Map</button>\n    </div>\n  )\n}\n\nexport default MyMap;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Device Position in TypeScript\nDESCRIPTION: Demonstrates how to get the current device's geographic coordinates using the `Geolocation.getCurrentPosition()` method from the `@capacitor/geolocation` plugin. The retrieved `coordinates` object (a `Position` type) is then logged to the console. This requires importing the `Geolocation` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Geolocation } from '@capacitor/geolocation';\n\nconst printCurrentPosition = async () => {\n  const coordinates = await Geolocation.getCurrentPosition();\n\n  console.log('Current position:', coordinates);\n};\n```\n\n----------------------------------------\n\nTITLE: Showing a Basic Action Sheet with Capacitor in TypeScript\nDESCRIPTION: Imports `ActionSheet` and `ActionSheetButtonStyle` from the `@capacitor/action-sheet` package. Defines an asynchronous function `showActions` that demonstrates how to display a native action sheet using `ActionSheet.showActions`. It configures the title, message, and a list of options, including one with a 'Destructive' style. The result, containing the index of the selected option, is logged to the console.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';\n\nconst showActions = async () => {\n  const result = await ActionSheet.showActions({\n    title: 'Photo Options',\n    message: 'Select an option to perform',\n    options: [\n      {\n        title: 'Upload',\n      },\n      {\n        title: 'Share',\n      },\n      {\n        title: 'Remove',\n        style: ActionSheetButtonStyle.Destructive,\n      },\n    ],\n  });\n\n  console.log('Action Sheet result:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: React Implementation Example\nDESCRIPTION: Complete React component implementation for Google Maps\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\nimport { useRef } from 'react';\n\nconst MyMap: React.FC = () => {\n  const mapRef = useRef<HTMLElement>();\n  let newMap: GoogleMap;\n\n  async function createMap() {\n    if (!mapRef.current) return;\n\n    newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: mapRef.current,\n      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9\n        },\n        zoom: 8\n      }\n    })\n  }\n\n  return (\n    <div className=\"component-wrapper\">\n      <capacitor-google-map ref={mapRef} style={{\n        display: 'inline-block',\n        width: 275,\n        height: 400\n      }}></capacitor-google-map>\n\n      <button onClick={createMap}>Create Map</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using isPluginAvailable in TypeScript\nDESCRIPTION: Provides the type signature and a usage example for the `isPluginAvailable` function. It checks if a specific Capacitor plugin (identified by its registry name) is available on the current platform, allowing for conditional plugin usage or fallback mechanisms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/web.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nisPluginAvailable: (name: string) => boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Router and Capacitor App API for Deep Link Handling (TypeScript)\nDESCRIPTION: This snippet imports required dependencies for setting up deep linking in a React (TypeScript) app with Capacitor. It brings in React hooks, React Router's useHistory for navigation, and the App plugin for handling app URL open events. Ensures the project can handle both navigation and event subscriptions for deep links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n```\n\n----------------------------------------\n\nTITLE: Adding Notification Received Listener in Capacitor (TypeScript)\nDESCRIPTION: Method to add an event listener for when notifications are displayed to the user. The callback receives the notification object that was displayed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationReceived', listenerFunc: (notification: LocalNotificationSchema) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Enablement - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Presents the TypeScript declaration for checking if local notifications are enabled on the device with the Capacitor plugin. Returns a Promise resolving to an EnabledResult object. No parameters are required. Used to determine if notifications are permitted for the app. Inputs: none. Outputs: enabled state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nareEnabled() => Promise<EnabledResult>\\n\n```\n\n----------------------------------------\n\nTITLE: Using Splash Screen API - Capacitor - TypeScript\nDESCRIPTION: Demonstrates how to import and use the SplashScreen API in a TypeScript/Capacitor project. Example usages include hiding the splash screen, showing it indefinitely, and showing it for a fixed duration. Key parameters are 'autoHide' (controls if the splash screen hides automatically) and 'showDuration' (duration to show splash in ms). This API depends on the '@capacitor/splash-screen' plugin and assumes that it is installed and configured as described in the installation section.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SplashScreen } from '@capacitor/splash-screen';\\n\\n// Hide the splash (you should do this on app launch)\\nawait SplashScreen.hide();\\n\\n// Show the splash for an indefinite amount of time:\\nawait SplashScreen.show({\\n  autoHide: false,\\n});\\n\\n// Show the splash for two seconds and then automatically hide it:\\nawait SplashScreen.show({\\n  showDuration: 2000,\\n  autoHide: true,\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Logic in Angular Component OnInit\nDESCRIPTION: Demonstrates how to use the Capacitor Push Notifications API within the `ngOnInit` lifecycle hook of an Angular component (`HomePage`). It requests user permission for notifications, registers the device with APNS/FCM upon permission grant, and sets up listeners to handle registration success (receiving a token), registration errors, incoming notifications while the app is open, and actions performed when a user taps a notification. Alerts are used to display feedback.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomePage implements OnInit {\n\nngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermission().then( result => {\n      if (result.granted) {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration',\n      (token: PushNotificationToken) => {\n        alert('Push registration success, token: ' + token.value);\n      }\n    );\n\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError',\n      (error: any) => {\n        alert('Error on registration: ' + JSON.stringify(error));\n      }\n    );\n\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived',\n      (notification: PushNotification) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      }\n    );\n\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed',\n      (notification: PushNotificationActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      }\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Delegate-based API and Handling Callback - Swift\nDESCRIPTION: This code manages permission requests using a delegate-based framework (e.g., CoreLocation). It saves the original call when requesting authorization, then later retrieves and resolves it when the delegate callback triggers. This ensures the call is fulfilled regardless of async callback behavior. Prerequisites include setting up a CLLocationManager and tracking a 'permissionCallID'. Used within a CAPPlugin extension handling delegate callbacks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nvar permissionCallID: String?\nvar locationManager: CLLocationManager?\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    if let manager = locationManager, CLLocationManager.locationServicesEnabled() {\n        if CLLocationManager.authorizationStatus() == .notDetermined {\n            bridge?.saveCall(call)\n            permissionCallID = call.callbackId\n            manager.requestWhenInUseAuthorization()\n        } else {\n            checkPermissions(call)\n        }\n    } else {\n        call.reject(\"Location services are disabled\")\n    }\n}\n\npublic func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n    if let callID = permissionCallID, let call = bridge?.getSavedCall(callID) {\n        checkPermissions(call)\n        bridge?.releaseCall(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Network Status - getStatus Method - TypeScript\nDESCRIPTION: Shows the signature for the 'getStatus' asynchronous method of the Network plugin API in TypeScript. The method returns a promise that resolves to a 'ConnectionStatus' object, which includes properties for connectivity and connection type. It requires the Capacitor Network API to be installed and available in the runtime, and expects no parameters. The returned promise yields network state data; output is typed and intended for programmatic use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/network.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus() => Promise<ConnectionStatus>\n```\n\n----------------------------------------\n\nTITLE: Adding Accelerometer Listener API Definition (TypeScript)\nDESCRIPTION: Defines the signature for the `addListener` method used to subscribe to accelerometer events. It requires the specific event name 'accel' and a callback function (`AccelListener`) that conforms to the specified type alias. The method returns a Promise that resolves with a `PluginListenerHandle`, allowing the listener to be removed later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/motion.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Object in TypeScript\nDESCRIPTION: Shows how to import the Capacitor object from the core package for use in modern JavaScript applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in MainActivity\nDESCRIPTION: Shows how to register the custom Echo plugin in the Android MainActivity class using the registerPlugin method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n+        registerPlugin(EchoPlugin.class);\n         super.onCreate(savedInstanceState);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners for Capacitor InAppBrowser (TypeScript)\nDESCRIPTION: Imports the `InAppBrowser` object and uses the `addListener` method to register callback functions for the `browserClosed` and `browserPageLoaded` events. These listeners allow the application to react when the browser is closed or finishes loading a page. Requires the `@capacitor/inappbrowser` plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nawait InAppBrowser.addListener('browserClosed', () => {\n    console.log(\"browser was closed.\");\n});\n\nawait InAppBrowser.addListener('browserPageLoaded', () => {\n    console.log(\"browser was loaded.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Screen Reader Usage Example\nDESCRIPTION: Example showing how to use the Screen Reader API to listen for state changes, check if screen reader is enabled, and speak text.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-reader.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenReader } from '@capacitor/screen-reader';\n\nScreenReader.addListener('stateChange', ({ value }) => {\n  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);\n});\n\nconst checkScreenReaderEnabled = async () => {\n  const { value } = await ScreenReader.isEnabled();\n\n  console.log('Voice over enabled? ' + value);\n};\n\nconst sayHello = async () => {\n  await ScreenReader.speak({ value: 'Hello World!' });\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for DeviceInfo in Capacitor\nDESCRIPTION: Defines the DeviceInfo interface used in Capacitor to access device-specific information such as device name, model, platform, OS version, and memory usage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DeviceInfo {\n  name: string;\n  model: string;\n  platform: 'ios' | 'android' | 'web';\n  operatingSystem: OperatingSystem;\n  osVersion: string;\n  iOSVersion: number;\n  androidSDKVersion: number;\n  manufacturer: string;\n  isVirtual: boolean;\n  memUsed: number;\n  webViewVersion: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Position with Capacitor Geolocation (TypeScript)\nDESCRIPTION: Example demonstrating how to import the `Geolocation` module from `@capacitor/geolocation` and use the asynchronous `getCurrentPosition` method to retrieve the device's current geographic coordinates, which are then logged to the console.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Geolocation } from '@capacitor/geolocation';\n\nconst printCurrentPosition = async () => {\n  const coordinates = await Geolocation.getCurrentPosition();\n\n  console.log('Current position:', coordinates);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem Hooks in a React Component\nDESCRIPTION: Example of importing and using the useFilesystem hook in a React function component to read a file from the device's filesystem. The example demonstrates the hook usage pattern within a useEffect.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/react-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';\n\nconst MyComponent = () => (\n  const { readFile } = useFilesystem();\n\n  useEffect(() => {\n    const readMyFile = async () => {\n      const file = await readFile({\n        path: filepath,\n        directory: FilesystemDirectory.Data\n      });\n      // ...\n    }\n\n    readMyFile();\n  }, [ readFile ]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Security Policy in HTML\nDESCRIPTION: Example of adding a Content Security Policy meta tag to restrict resource loading to specific origins. This configuration allows requests only to the current origin and foo.com domain.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self' foo.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Capacitor Plugins\nDESCRIPTION: Command to install essential Capacitor plugins used by Ionic Framework including app, haptics, keyboard, and status-bar plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/with-ionic.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Camera Plugin with npm\nDESCRIPTION: This command installs the @capacitor/camera plugin using npm and then syncs the native project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/camera\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Android and iOS Platform Dependencies\nDESCRIPTION: This command installs the necessary dependencies for Android and iOS platforms in your Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/android @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Security Policy in Capacitor Apps\nDESCRIPTION: This snippet demonstrates how to add a Content Security Policy (CSP) meta tag to your Capacitor app's HTML to restrict resource loading. The example allows resources from the current origin and foo.com domain, enhancing web view security by limiting what resources can be loaded.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self' foo.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: API Methods for Push Notification Management\nDESCRIPTION: Core API methods for registering, unregistering, and managing push notifications. Includes methods for handling notification channels and permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nregister() => Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nunregister() => Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<DeliveredNotifications>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Plugin Interface in TypeScript\nDESCRIPTION: Defines the initial TypeScript interface `EchoPlugin` for a Capacitor plugin named 'Echo'. It declares the plugin within the Capacitor PluginRegistry and specifies the `echo` method signature. This file (`src/definitions.ts`) serves as the contract for the plugin's API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@capacitor/core' {\n  interface PluginRegistry {\n    Echo: EchoPlugin;\n  }\n}\n\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Core in TypeScript\nDESCRIPTION: Shows how to import the Capacitor object from the core package, which is the preferred method for modern JavaScript applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom CAPBridgeViewController Subclass in Swift\nDESCRIPTION: This code shows how to create a subclass of CAPBridgeViewController by importing the necessary frameworks and changing the parent class. This allows for customizing Capacitor's default behavior for iOS applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/viewcontroller.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\n\nclass MyViewController: CAPBridgeViewController {\n    // additional code\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Capacitor Filesystem in TypeScript\nDESCRIPTION: Function to perform an HTTP request to download a file to a specified destination. Takes DownloadFileOptions as input and returns a Promise that resolves with a DownloadFileResult object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndownloadFile(options: DownloadFileOptions) => Promise<DownloadFileResult>\n```\n\n----------------------------------------\n\nTITLE: Returning Data from a Capacitor iOS Plugin\nDESCRIPTION: Shows how to return data back to the client using the resolve() method with a dictionary containing JSON-serializable data types, demonstrating successful plugin call completion with data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Push Notification Payload Structure - TypeScript\nDESCRIPTION: Describes a push notification payload structure with properties for title, subtitle, body, identifier, grouping, badge count, additional data, action links, and Android/iOS-specific options. The schema allows optional fields and is designed for both iOS and Android, with certain properties specific to each platform. No external dependencies are required; use this structure when processing push notification payloads in apps using the Capacitor Push Notifications plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PushNotificationSchema {\n  title?: string;\n  subtitle?: string;\n  body?: string;\n  id?: string;\n  tag?: string; // Android-only\n  badge?: number;\n  notification?: any; // not returned\n  data?: any;\n  click_action?: string; // Android-only\n  link?: string; // Android-only\n  group?: string; // Android, like threadIdentifier on iOS\n  groupSummary?: boolean; // Android-only\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing requestPermissions() with Delegate-based API\nDESCRIPTION: Demonstrates how to implement requestPermissions() using a delegate-based API for location permissions, saving and retrieving the plugin call to handle the asynchronous permission result.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nvar permissionCallID: String?\nvar locationManager: CLLocationManager?\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    if let manager = locationManager, CLLocationManager.locationServicesEnabled() {\n        if CLLocationManager.authorizationStatus() == .notDetermined {\n            bridge?.saveCall(call)\n            permissionCallID = call.callbackId\n            manager.requestWhenInUseAuthorization()\n        } else {\n            checkPermissions(call)\n        }\n    } else {\n        call.reject(\"Location services are disabled\")\n    }\n}\n\npublic func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n    if let callID = permissionCallID, let call = bridge?.getSavedCall(callID) {\n        checkPermissions(call)\n        bridge?.releaseCall(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Push Notification Action Performed Event Listener in Capacitor\nDESCRIPTION: Add a listener for the 'pushNotificationActionPerformed' event, which is called when an action is performed on a push notification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationActionPerformed', listenerFunc: (notification: ActionPerformed) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Adding Push Notification Received Event Listener in Capacitor\nDESCRIPTION: Add a listener for the 'pushNotificationReceived' event, which is called when the device receives a push notification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationReceived', listenerFunc: (notification: PushNotificationSchema) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Implementing Bridge Pattern in Swift for Capacitor Device Plugin\nDESCRIPTION: This snippet demonstrates the use of the Bridge design pattern in the Device plugin for Capacitor. It shows how the implementation is abstracted from the interface, allowing for platform-specific code to be separated from the high-level logic.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@objc func getLanguageCode(_ call: CAPPluginCall) {\n    let code = implementation.getLanguageCode()\n    call.resolve([ \"value\": code ])\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Request Codes to Callback Annotations in Android\nDESCRIPTION: Example showing how to replace manual request code handling with the new @ActivityCallback annotation pattern. This uses the AndroidX Activity Result API instead of overriding activity result methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-static final int IMAGE_REQUEST = 10052;\n\n @PluginMethod\n public void chooseImage(PluginCall call) {\n     Intent intent = new Intent(Intent.ACTION_PICK);\n     intent.setType(\"image/*\");\n-    startActivityForResult(call, intent, IMAGE_REQUEST);\n+    startActivityForResult(call, intent, \"chooseImageResult\");\n }\n\n+@ActivityCallback\n+private void chooseImageResult(PluginCall call, ActivityResult result) {\n+    if (result.getResultCode() == Activity.RESULT_CANCELED) {\n+        call.reject(\"Activity canceled\");\n+    } else {\n+        Intent data = result.getData();\n+        // do something with the result data\n+        call.resolve(\"Success!\");\n+    }\n+}\n```\n\n----------------------------------------\n\nTITLE: Storage API Usage Examples in TypeScript\nDESCRIPTION: Demonstrates common storage operations including setting/getting JSON objects, storing strings, removing items, listing keys and clearing storage. Shows how to handle JSON data by stringifying on set and parsing on get.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n\n\n// JSON \"set\" example\nasync setObject() {\n  await Storage.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Storage.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n\nasync setItem() {\n  await Storage.set({\n    key: 'name',\n    value: 'Max'\n  });\n}\n\nasync getItem() {\n  const { value } = await Storage.get({ key: 'name' });\n  console.log('Got item: ', value);\n}\n\nasync removeItem() {\n  await Storage.remove({ key: 'name' });\n}\n\nasync keys() {\n  const { keys } = await Storage.keys();\n  console.log('Got keys: ', keys);\n}\n\nasync clear() {\n  await Storage.clear();\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data in Capacitor Plugin\nDESCRIPTION: Illustrates how to return complex data structures back to the client using JSObject and proper error handling with reject calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"added\", true);\nJSObject info = new JSObject();\ninfo.put(\"id\", \"unique-id-1234\");\nret.put(\"info\", info);\ncall.resolve(ret);\n```\n\nLANGUAGE: java\nCODE:\n```\ncall.reject(exception.getLocalizedMessage(), null, exception);\n```\n\n----------------------------------------\n\nTITLE: Connecting Plugin to Implementation Class in Swift\nDESCRIPTION: Updated ScreenOrientationPlugin class that uses the implementation class to get the current orientation and return it to JavaScript. This connects the plugin interface to the actual implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@objc(ScreenOrientationPlugin)\npublic class ScreenOrientationPlugin: CAPPlugin, CAPBridgedPlugin {\n  public let identifier = \"ScreenOrientationPlugin\"\n  public let jsName = \"ScreenOrientation\"\n  public let pluginMethods: [CAPPluginMethod] = [\n      CAPPluginMethod(name: \"orientation\", returnType: CAPPluginReturnPromise),\n      CAPPluginMethod(name: \"lock\", returnType: CAPPluginReturnPromise),\n      CAPPluginMethod(name: \"unlock\", returnType: CAPPluginReturnPromise)\n  ]\n\n  private let implementation = ScreenOrientation()\n\n  @objc public func orientation(_ call: CAPPluginCall) {\n    let orientationType = implementation.getCurrentOrientationType()\n    call.resolve([\"type\": orientationType])\n  }\n\n  /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CameraPluginPermissions Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `CameraPluginPermissions` used when checking or requesting specific permissions for the Capacitor Camera plugin. It contains a `permissions` property, which is an array of `CameraPermissionType` values ('camera' and/or 'photos').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CameraPluginPermissions {\n  /** An array specifying which permissions to check or request. */\n  permissions: CameraPermissionType[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard API with Capacitor\nDESCRIPTION: Example showing how to write text to the clipboard and read content from the clipboard using the Capacitor Clipboard plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/clipboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clipboard } from '@capacitor/clipboard';\n\nconst writeToClipboard = async () => {\n  await Clipboard.write({\n    string: \"Hello World!\"\n  });\n};\n\nconst checkClipboard = async () => {\n  const { type, value } = await Clipboard.read();\n\n  console.log(`Got ${type} from clipboard: ${value}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor React Hooks in a Function Component\nDESCRIPTION: This example demonstrates how to import and use Capacitor React hooks in a function component. It specifically shows the use of the useFilesystem hook to read a file asynchronously within a useEffect hook.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/react-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';\n\nconst MyComponent = () => (\n  const { readFile } = useFilesystem();\n\n  useEffect(() => {\n    const readMyFile = async () => {\n      const file = await readFile({\n        path: filepath,\n        directory: FilesystemDirectory.Data\n      });\n      // ...\n    }\n\n    readMyFile();\n  }, [ readFile ]);\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Capacitor Plugin from JavaScript/TypeScript - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates calling the Echo plugin from application code. It imports the Echo object and asynchronously calls its echo method, passing an options object with a value property. The returned value is then logged to the console. This pattern allows seamless communication between JavaScript and the custom native code on supported platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Handling Capacitor Events in Angular NgZone\nDESCRIPTION: Example showing how to properly handle Capacitor plugin event listeners within Angular's NgZone to ensure change detection is triggered. The code demonstrates listening to network status changes while ensuring the callback runs in Angular's execution context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/angular.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private ngZone: NgZone) { }\n\nasync ngOnInit() {\n  Network.addListener(\"networkStatusChange\", (status) => {\n    this.ngZone.run(() => {\n      // This code will run in Angular's execution context\n      this.networkStatus = status.connected ? \"Online\" : \"Offline\";\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Native Platform in Capacitor\nDESCRIPTION: Demonstrates how to check if the app is running on a native platform versus web/PWA using isNativePlatform().\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  console.log(\"I'm a native app!\");\n} else {\n  console.log(\"I'm a PWA or Web app!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device and Battery Information Asynchronously - Capacitor Device - TypeScript\nDESCRIPTION: This TypeScript snippet provides example implementations using the Capacitor Device plugin to retrieve device metadata and battery state. It first imports the Device namespace, then defines two async functions, logDeviceInfo and logBatteryInfo, which call Device.getInfo() and Device.getBatteryInfo(), respectively, logging the results to the console. These functions require the @capacitor/device package and demonstrate usage of the API within an asynchronous JavaScript/TypeScript context. Inputs consist only of the async/await pattern with no parameters, and outputs are logged information objects as provided by the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Device } from '@capacitor/device';\n\nconst logDeviceInfo = async () => {\n  const info = await Device.getInfo();\n\n  console.log(info);\n};\n\nconst logBatteryInfo = async () => {\n  const info = await Device.getBatteryInfo();\n\n  console.log(info);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Cleaning Up Screen Orientation Listener in React\nDESCRIPTION: Uses React's useEffect hook to get initial orientation, set up listeners, and clean up listeners when component unmounts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/using-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  ScreenOrientation.orientation().then(res => setOrientation(res.type));\n\n  return () => {\n    ScreenOrientation.removeAllListeners();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Request Flow in Capacitor Android Plugin\nDESCRIPTION: Example of a complete permission flow in a Capacitor plugin, showing how to check permissions, request them, and handle the result with a callback method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void takePhoto(PluginCall call) {\n  if (getPermissionState(\"camera\") != PermissionState.GRANTED) {\n    requestPermissionForAlias(\"camera\", call, \"cameraPermsCallback\");\n  } else {\n    loadCamera(call);\n  }\n}\n\n@PermissionCallback\nprivate void cameraPermsCallback(PluginCall call) {\n  if (getPermissionState(\"camera\") == PermissionState.GRANTED) {\n    loadCamera(call);\n  } else {\n    call.reject(\"Permission is required to take a picture\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Deep Link Events and Redirecting in Vue with Capacitor App API (TypeScript)\nDESCRIPTION: This snippet adds an event listener for 'appUrlOpen' from Capacitor's App API in a Vue application. When a deep link is triggered, it extracts the route portion from the URL and navigates to it using Vue Router's push method if a slug is present. Required dependencies include Vue, VueRouter, and @capacitor/app. Inputs are event.url; outputs are route navigation actions. This enables direct navigation in response to incoming app links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nApp.addListener('appUrlOpen', function (event: URLOpenListenerEvent) {\n  // Example url: https://beerswift.app/tabs/tabs2\n  // slug = /tabs/tabs2\n  const slug = event.url.split('.app').pop();\n\n  // We only push to the route if there is a slug present\n  if (slug) {\n    router.push({\n      path: slug,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen Plugin Settings in Capacitor (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the Capacitor SplashScreen plugin in the project's capacitor.config.json file. All available options are set with example values for appearance, animation, resource names, layout, and behavior on both Android and iOS. Parameters include durations, colors, resource identifiers, layout names, and booleans for UI choices. This configuration modifies splash behavior at boot, and requires no code dependencies beyond Capacitor itself.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"SplashScreen\\\": {\\n      \\\"launchShowDuration\\\": 3000,\\n      \\\"launchAutoHide\\\": true,\\n      \\\"launchFadeOutDuration\\\": 3000,\\n      \\\"backgroundColor\\\": \\\"#ffffffff\\\",\\n      \\\"androidSplashResourceName\\\": \\\"splash\\\",\\n      \\\"androidScaleType\\\": \\\"CENTER_CROP\\\",\\n      \\\"showSpinner\\\": true,\\n      \\\"androidSpinnerStyle\\\": \\\"large\\\",\\n      \\\"iosSpinnerStyle\\\": \\\"small\\\",\\n      \\\"spinnerColor\\\": \\\"#999999\\\",\\n      \\\"splashFullScreen\\\": true,\\n      \\\"splashImmersive\\\": true,\\n      \\\"layoutName\\\": \\\"launch_screen\\\",\\n      \\\"useDialog\\\": true\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Camera Plugin\nDESCRIPTION: Commands to install the @capacitor/camera package and sync the project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/camera\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Scheduling Local Notifications - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Defines the TypeScript method signature for scheduling one or more local notifications using the Capacitor Local Notifications API. Expects a ScheduleOptions object containing notification data and returns a Promise that resolves to a ScheduleResult. Prerequisites: The plugin must be installed and configured. This method is used to queue notifications for future display. Inputs: options (notification details). Outputs: Promise with scheduling result.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nschedule(options: ScheduleOptions) => Promise<ScheduleResult>\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenOrientationPlugin Class in Java for Capacitor\nDESCRIPTION: Basic implementation of a Capacitor plugin class that exposes screen orientation methods. This class extends the Capacitor Plugin class and includes stubs for orientation, lock, and unlock methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void lock(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void unlock(PluginCall call) {\n       call.resolve();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HomePage Implementation\nDESCRIPTION: Full implementation of the HomePage component with Push Notifications integration, including imports and class definition.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\n\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    PushNotifications.addListener('registration', (token: Token) => {\n      alert('Push registration success, token: ' + token.value);\n    });\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener(\n      'pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      },\n    );\n\n    PushNotifications.addListener(\n      'pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to App State Changes with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet shows how to use addListener() to listen for 'appStateChange' events. It binds a listener function to changes in the app or activity state and works across iOS, Android, and web using respective event sources. Dependencies: Capacitor App plugin. Parameters: eventName ('appStateChange'), listener function. Output: PluginListenerHandle Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'appStateChange', listenerFunc: StateChangeListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Permission and Event Listener Methods\nDESCRIPTION: Methods for checking and requesting permissions, and adding event listeners for various notification events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registration', listenerFunc: (token: Token) => void) => Promise<PluginListenerHandle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registrationError', listenerFunc: (error: RegistrationError) => void) => Promise<PluginListenerHandle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationReceived', listenerFunc: (notification: PushNotificationSchema) => void) => Promise<PluginListenerHandle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationActionPerformed', listenerFunc: (notification: ActionPerformed) => void) => Promise<PluginListenerHandle>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Barcode Scan Configuration Options (TypeScript)\nDESCRIPTION: This TypeScript type alias `CapacitorBarcodeScannerOptions` defines the structure for the options object passed to the `scanBarcode` method. It includes properties for barcode type hints, UI elements (instructions, button text), camera settings (direction, orientation), and platform-specific configurations for Android and Web.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ hint: <a href=\"#capacitorbarcodescannertypehint\">CapacitorBarcodeScannerTypeHint</a>; scanInstructions?: string; scanButton?: boolean; scanText?: string; cameraDirection?: <a href=\"#capacitorbarcodescannercameradirection\">CapacitorBarcodeScannerCameraDirection</a>; scanOrientation?: <a href=\"#capacitorbarcodescannerscanorientation\">CapacitorBarcodeScannerScanOrientation</a>; android?: { scanningLibrary?: <a href=\"#capacitorbarcodescannerandroidscanninglibrary\">CapacitorBarcodeScannerAndroidScanningLibrary</a>; }; web?: { showCameraSelection?: boolean; scannerFPS?: number; }; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Battery Information - Capacitor Device - TypeScript\nDESCRIPTION: This TypeScript method signature shows the getBatteryInfo function, which returns a Promise resolving to a BatteryInfo object. The function provides battery state details, specifically the charge level (as a float between 0 and 1) and whether the device is charging. There are no parameters, and the output is provided by the resolved BatteryInfo object. The @capacitor/device dependency is required for this API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetBatteryInfo() => Promise<BatteryInfo>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Capacitor App using NPM\nDESCRIPTION: This command uses the @capacitor/create-app package to scaffold a new Capacitor application in an empty directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/app\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability with Capacitor.isPluginAvailable in TypeScript\nDESCRIPTION: Demonstrates using `Capacitor.isPluginAvailable(pluginName)` to verify if a specific Capacitor plugin (e.g., 'Camera') is available on the current platform before attempting to use it. This allows for graceful fallback mechanisms if a plugin is not present. The example shows conditionally calling `Camera.getPhoto` based on availability, assuming `Camera` and `CameraResultType` are imported from the relevant Capacitor plugin package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: AbortSignal Interface Properties and Methods\nDESCRIPTION: TypeScript interface definition for AbortSignal showing its properties and methods for event handling. Includes properties for abort status and event handlers, along with methods for adding and removing event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AbortSignal {\n  aborted: boolean;\n  onabort: (this: AbortSignal, ev: Event) => any;\n  \n  addEventListener<K extends \"abort\">(type: K, \n    listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, \n    options?: boolean | AddEventListenerOptions): void;\n    \n  addEventListener(type: string, \n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | AddEventListenerOptions): void;\n    \n  removeEventListener<K extends \"abort\">(type: K, \n    listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, \n    options?: boolean | EventListenerOptions): void;\n    \n  removeEventListener(type: string, \n    listener: EventListenerOrEventListenerObject, \n    options?: boolean | EventListenerOptions): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Filesystem Permissions in Capacitor with TypeScript\nDESCRIPTION: Function to request read/write permissions for the Filesystem plugin. Required on Android when using Directory.Documents or Directory.ExternalStorage. Returns a Promise with the updated permission status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Using the Capacitor Clipboard API in TypeScript\nDESCRIPTION: Demonstrates basic usage of the Capacitor Clipboard plugin in TypeScript. It shows how to import the `Clipboard` object and implement asynchronous functions to write a string to the clipboard and read the current content (type and value) from it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/clipboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clipboard } from '@capacitor/clipboard';\n\nconst writeToClipboard = async () => {\n  await Clipboard.write({\n    string: \"Hello World!\"\n  });\n};\n\nconst checkClipboard = async () => {\n  const { type, value } = await Clipboard.read();\n\n  console.log(`Got ${type} from clipboard: ${value}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Emitting Plugin Events in Java for Capacitor Android Plugins\nDESCRIPTION: Demonstrates how to emit custom plugin events from the Java plugin class. This allows the plugin to communicate asynchronous events to the JavaScript side.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"value\", \"some value\");\nnotifyListeners(\"myPluginEvent\", ret);\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Change Listener in Swift\nDESCRIPTION: This code adds methods to the ScreenOrientationPlugin class for registering and handling orientation change notifications, and notifying JavaScript listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n  NotificationCenter.default.addObserver(\n    self,\n    selector: #selector(self.orientationDidChange),\n    name: UIDevice.orientationDidChangeNotification,\n    object: nil)\n}\n\ndeinit {\n  NotificationCenter.default.removeObserver(self)\n}\n\n@objc private func orientationDidChange() {\n  // Ignore changes in orientation if unknown, face up, or face down\n  if(UIDevice.current.orientation.isValidInterfaceOrientation) {\n    let orientation = implementation.getCurrentOrientationType()\n    notifyListeners(\"screenOrientationChange\", data: [\"type\": orientation])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Capacitor Configuration File in TypeScript\nDESCRIPTION: This example demonstrates how to create a basic Capacitor configuration file using TypeScript. The configuration sets essential properties including the application ID, name, and the web directory that contains the built web assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/config.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.company.appname',\n  appName: 'My Capacitor App',\n  webDir: 'www',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration for Geolocation\nDESCRIPTION: XML configuration for Android manifest that adds the necessary permissions for accessing device location. Includes permissions for coarse and fine location, plus an optional feature requirement for GPS hardware.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/geolocation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation API -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map Instance (TypeScript)\nDESCRIPTION: Demonstrates how to create a new Google Map instance using the `GoogleMap.create` static method. Requires the Google Maps API key, a reference to the `<capacitor-google-map>` DOM element, and initial configuration like center coordinates and zoom level.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\nconst apiKey = 'YOUR_API_KEY_HERE';\n\nconst mapRef = document.getElementById('map');\n\nconst newMap = await GoogleMap.create({\n  id: 'my-map', // Unique identifier for this map instance\n  element: mapRef, // reference to the capacitor-google-map element\n  apiKey: apiKey, // Your Google Maps API Key\n  config: {\n    center: {\n      // The initial position to be rendered by the map\n      lat: 33.6,\n      lng: -117.9,\n    },\n    zoom: 8, // The initial zoom level to be rendered by the map\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Copying Files or Directories with Capacitor Filesystem in TypeScript\nDESCRIPTION: This TypeScript function signature provides a promise-based interface for copying files or directories using the Capacitor Filesystem plugin. It requires a CopyOptions object describing the source, destination, and other parameters, and returns a Promise resolving to a CopyResult. All dependencies are internal to the plugin and require proper directory, path, and option attributes. Inputs must conform to the CopyOptions interface, limiting usage to configured directories and paths available in the Capacitor context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncopy(options: CopyOptions) => Promise<CopyResult>\n```\n\n----------------------------------------\n\nTITLE: Initiating a Share Action with share in TypeScript\nDESCRIPTION: Defines the `share` method signature available since version 1.0.0. This asynchronous function takes a `ShareOptions` object (containing details like title, text, url, files, dialogTitle) and triggers the platform's native share modal. It returns a Promise resolving to a `ShareResult` object, which includes the `activityType` identifier of the receiving app (if available).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/share.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshare(options: ShareOptions) => Promise<ShareResult>\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Plugin Logic in Swift\nDESCRIPTION: This code shows the implementation class for a simple Echo plugin that returns the value it receives. It demonstrates the basic structure of a plugin implementation class that extends NSObject.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\n@objc public class Echo: NSObject {\n    @objc public func echo(_ value: String) -> String {\n        print(value)\n        return value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using isPluginAvailable to Conditionally Invoke Plugin Code - TypeScript\nDESCRIPTION: This snippet checks if the Camera plugin is available before invoking its functionality, providing a fallback if unavailable. It imports 'Capacitor' and uses 'isPluginAvailable' to guard Camera usage. Recommended dependencies are '@capacitor/core' and the Camera plugin. Key parameters: plugin name. Expected input is a valid plugin name; outputs either a guarded plugin call or fallback logic. Limitations: Custom handling needed for unsupported platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/utilities.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Status Bar Info - TypeScript\nDESCRIPTION: Method signature for retrieving the current state of the status bar, such as visibility, style, color (on Android), and overlay state. Returns a Promise resolved with a StatusBarInfo object. Requires @capacitor/status-bar setup, typically called to reflect UI state or for debugging.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInfo() => Promise<StatusBarInfo>\n```\n\n----------------------------------------\n\nTITLE: Checking push notification permissions - Capacitor Plugin - TypeScript\nDESCRIPTION: Checks the current permission status for receiving push notifications. Returns a promise resolving to a PermissionStatus object. On Android, permission is always granted; on iOS the status reflects the current notification permission. No input parameters; available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Defining Geolocation Interface - TypeScript\nDESCRIPTION: Interface for accessing device location information with a method to get current position.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CapacitorGeolocation {\n  getCurrentPosition(): Promise<GetCurrentPositionResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interfaces and Method Signatures in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend a TypeScript interface to add a new method (`openMap`) to the plugin API, including the definition of a strongly-typed parameters interface (`OpenMapOptions`). This approach enables type safety and clarity for method invocation in consuming apps. All parameters like `latitude` and `longitude` are explicitly defined as numbers, ensuring correct usage and easier documentation. The snippet should be placed in the plugin's `src/definitions.ts` file; dependencies include TypeScript and Capacitor plugin conventions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n+  openMap(options: OpenMapOptions): Promise<void>;\n }\n\n+export interface OpenMapOptions {\n+  latitude: number;\n+  longitude: number;\n+}\n\n```\n\n----------------------------------------\n\nTITLE: Capacitor Camera API: getPhoto Method Signature\nDESCRIPTION: TypeScript signature for the `getPhoto` method. This function prompts the user to select a photo from the album or take a new one using the camera, based on the provided `ImageOptions`. It returns a Promise resolving to a `Photo` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetPhoto(options: ImageOptions) => Promise<Photo>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Android Package\nDESCRIPTION: Command to install the @capacitor/android package using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Code to Native Project in Capacitor\nDESCRIPTION: This command syncs your web application to your native project by copying the built web application (default 'www' folder) to the native project and installing native project dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using Geolocation getCurrentPosition\nDESCRIPTION: Example TypeScript code demonstrating how to get the current GPS position using the Geolocation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Geolocation } from '@capacitor/geolocation';\n\nconst printCurrentPosition = async () => {\n  const coordinates = await Geolocation.getCurrentPosition();\n\n  console.log('Current position:', coordinates);\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Device Filepaths for Web View Usage\nDESCRIPTION: Shows the convertFileSrc utility function and its implementation to transform device file paths into Web View-compatible URLs that handle protocol differences.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconvertFileSrc: (filePath: string) => string;\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events in Capacitor iOS\nDESCRIPTION: Demonstrates how to trigger JavaScript events from iOS using the bridge's triggerJSEvent method, with examples for different targets and data passing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"{ 'dataKey': 'dataValue' }\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration\nDESCRIPTION: This command starts the CLI questionnaire to initialize the Capacitor configuration for your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in Vue with Capacitor App API\nDESCRIPTION: This snippet demonstrates how to set up deep link handling in a Vue app using the Capacitor App API and Vue Router. It listens for the 'appUrlOpen' event and uses Vue Router to navigate to the appropriate page based on the incoming URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nconst router = new VueRouter({\n  routes: [],\n});\n\nconst VueApp = new Vue({\n  router,\n}).$mount('#app');\n\nApp.addListener('appUrlOpen', function (event: URLOpenListenerEvent) {\n  // Example url: https://beerswift.app/tabs/tabs2\n  // slug = /tabs/tabs2\n  const slug = event.url.split('.app').pop();\n\n  // We only push to the route if there is a slug present\n  if (slug) {\n    router.push({\n      path: slug,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Deep Link Event Listener in Vue with Capacitor App API - TypeScript\nDESCRIPTION: Attaches an event listener to 'appUrlOpen', allowing deep link URLs opened externally to be processed. The slug/path portion after '.app' is extracted from the URL and provided to Vue Router for client-side navigation. This implementation depends on the structure of incoming universal/app links and expects the router to be properly set up. Only invokes router.push if a valid slug is found, thus not interfering with non-matching events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nApp.addListener('appUrlOpen', function (event: URLOpenListenerEvent) {\n  // Example url: https://beerswift.app/tabs/tabs2\n  // slug = /tabs/tabs2\n  const slug = event.url.split('.app').pop();\n\n  // We only push to the route if there is a slug present\n  if (slug) {\n    router.push({\n      path: slug,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Bridge Pattern in Swift for Capacitor Device Plugin\nDESCRIPTION: This snippet demonstrates the use of the Bridge design pattern in the Device plugin for Capacitor. It shows how the implementation is abstracted from the interface, allowing for platform-specific code while maintaining a consistent API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@objc func getLanguageCode(_ call: CAPPluginCall) {\n    let code = implementation.getLanguageCode()\n    call.resolve([ \"value\": code ])\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Keyboard Events with @capacitor/keyboard (TypeScript)\nDESCRIPTION: Sample TypeScript code showing how to import the Keyboard API and register listeners for keyboard lifecycle events (show\\/hide, will\\/did) in a Capacitor app. The snippet demonstrates adding listeners to capture events such as when the keyboard is about to show, did show, will hide, and did hide, printing the keyboard height or logging messages accordingly. Requires the @capacitor/keyboard plugin as a dependency; listener functions accept information objects or no arguments depending on event type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Configuration Interface in TypeScript\nDESCRIPTION: This code snippet defines an interface for notification configuration options in Capacitor. It includes properties for both iOS and Android platforms, covering aspects like extra data, threading, grouping, channel settings, and appearance behaviors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationConfig {\n  extra?: any;\n  threadIdentifier?: string;\n  summaryArgument?: string;\n  group?: string;\n  groupSummary?: boolean;\n  channelId?: string;\n  ongoing?: boolean;\n  autoCancel?: boolean;\n  inboxList?: string[];\n  silent?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using and Configuring Status Bar with Capacitor (TypeScript)\nDESCRIPTION: Shows how to import the Capacitor StatusBar plugin and its Style enum, set up event listeners (iOS), overlay the webview (Android), change styles, and hide or show the status bar. Requires @capacitor/status-bar installed and properly initialized. Functions demonstrate changing styles (dark/light), toggling visibility, and handling the statusbar tap event; platform support varies by feature.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\n// iOS only\nwindow.addEventListener('statusTap', function () {\n  console.log('statusbar tapped');\n});\n\n// Display content under transparent status bar (Android only)\nStatusBar.setOverlaysWebView({ overlay: true });\n\nconst setStatusBarStyleDark = async () => {\n  await StatusBar.setStyle({ style: Style.Dark });\n};\n\nconst setStatusBarStyleLight = async () => {\n  await StatusBar.setStyle({ style: Style.Light });\n};\n\nconst hideStatusBar = async () => {\n  await StatusBar.hide();\n};\n\nconst showStatusBar = async () => {\n  await StatusBar.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Core in TypeScript\nDESCRIPTION: Shows how to import the Capacitor object from the core package for use in modern JavaScript applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Dynamically Locking/Unlocking Screen Orientation (TypeScript)\nDESCRIPTION: Demonstrates how to use the `cordova-plugin-screen-orientation` API via `window.screen.orientation` to dynamically lock the screen to 'portrait' or 'landscape' mode, or unlock it to revert to the global settings. Requires the plugin to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.screen.orientation.lock('portrait');\nwindow.screen.orientation.lock('landscape');\n\n// To unlock orientation which will default back to the global setting:\nwindow.screen.orientation.unlock();\n```\n\n----------------------------------------\n\nTITLE: Updating Android Plugin Annotation from @NativePlugin to @CapacitorPlugin\nDESCRIPTION: Code diff showing how to replace the deprecated @NativePlugin annotation with the new @CapacitorPlugin annotation. This includes changes to permission handling and removal of request codes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-@NativePlugin(\n+@CapacitorPlugin(\n     name = \"FooBar\",\n-    requestCodes = {\n-        FooBarPlugin.REQUEST_SOME_METHOD,\n-        FooBarPlugin.REQUEST_SOME_OTHER_METHOD\n-    },\n-    permissionRequestCode = FooBarPlugin.REQUEST_ALL_PERMISSIONS,\n-    permissions = { Manifest.permission.FOO, Manifest.permission.BAR }\n+    permissions = {\n+        @Permission(strings = { Manifest.permission.FOO }, alias = \"foo\"),\n+        @Permission(strings = { Manifest.permission.BAR }, alias = \"bar\")\n+    })\n )\n public class FooBarPlugin extends Plugin {\n     static final int REQUEST_SOME_METHOD = 10051;\n     static final int REQUEST_SOME_OTHER_METHOD = 10052;\n```\n\n----------------------------------------\n\nTITLE: Creating AppUrlListener Component for React\nDESCRIPTION: Defines a React component that listens for deep link events using the Capacitor App API and navigates to the appropriate route using React Router.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n\nconst AppUrlListener: React.FC<any> = () => {\n  let history = useHistory();\n  useEffect(() => {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n      // Example url: https://beerswift.app/tabs/tab2\n      // slug = /tabs/tab2\n      const slug = event.url.split('.app').pop();\n      if (slug) {\n        history.push(slug);\n      }\n      // If no match, do nothing - let regular routing\n      // logic take over\n    });\n  }, []);\n\n  return null;\n};\n\nexport default AppUrlListener;\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Core and CLI Dependencies (Bash)\nDESCRIPTION: Installs the core Capacitor runtime (`@capacitor/core`) as a project dependency and the Capacitor command-line interface (`@capacitor/cli`) as a development dependency using npm. These packages are essential for integrating and managing Capacitor within the web application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/core\nnpm install @capacitor/cli --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running Plugin Build Command (Shell Script)\nDESCRIPTION: This shell snippet instructs developers to compile the Capacitor plugin by running the build script (`npm run build`). It is required to transpile TypeScript sources and bundle the plugin for use or publication. Must be run from the plugin directory. Assumes Node.js and npm are installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Enum in TypeScript\nDESCRIPTION: Enumeration of standard file system directories available in Capacitor apps with cross-platform support details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nenum Directory {\n  Documents = 'DOCUMENTS',        // The Documents directory\n  Data = 'DATA',                 // The Data directory\n  Library = 'LIBRARY',           // The Library directory\n  Cache = 'CACHE',               // The Cache directory\n  External = 'EXTERNAL',         // The external directory\n  ExternalStorage = 'EXTERNAL_STORAGE' // The external storage directory\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Capacitor Web Plugin Structure in TypeScript\nDESCRIPTION: This snippet demonstrates the fundamental structure of a Capacitor web plugin. It defines a class `EchoWeb` that extends `WebPlugin` from `@capacitor/core` and implements a custom plugin interface `EchoPlugin`. The example includes a simple `echo` method that logs the input options and returns them.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { WebPlugin } from '@capacitor/core';\n\nimport type { EchoPlugin } from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  async echo(options: { value: string }) {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Checking for Native Platform with isNativePlatform\nDESCRIPTION: Demonstrates the isNativePlatform utility function that returns a boolean indicating whether the app is running on a native platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nisNativePlatform: () => boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Tasks in Capacitor Applications\nDESCRIPTION: This example demonstrates how to use Capacitor's Background Task API to perform work when an app goes to the background. It shows setting up an event listener for app state changes, executing a task before exit, and properly finishing the task to prevent app termination.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/background-task.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { App, BackgroundTask } = Plugins;\n\nApp.addListener('appStateChange', state => {\n  if (!state.isActive) {\n    // The app has become inactive. We should check if we have some work left to do, and, if so,\n    // execute a background task that will allow us to finish that work before the OS\n    // suspends or terminates our app:\n\n    let taskId = BackgroundTask.beforeExit(async () => {\n      // In this function We might finish an upload, let a network request\n      // finish, persist some data, or perform some other task\n\n      // Example of long task\n      var start = new Date().getTime();\n      for (var i = 0; i < 1e18; i++) {\n        if (new Date().getTime() - start > 20000) {\n          break;\n        }\n      }\n      // Must call in order to end our task otherwise\n      // we risk our app being terminated, and possibly\n      // being labeled as impacting battery life\n      BackgroundTask.finish({\n        taskId,\n      });\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Photos to Library in TypeScript\nDESCRIPTION: Method to save a photo to the user's photo library with options for specifying the target album.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/photos.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsavePhoto(options?: PhotosSaveOptions) => Promise<PhotosSaveResult>\n```\n\n----------------------------------------\n\nTITLE: Determining Current Screen Orientation in Swift\nDESCRIPTION: This Swift snippet provides a utility class for determining the iOS device's current orientation and mapping it to a string representation. The getCurrentOrientationType() method retrieves the orientation from UIDevice and converts it to a human-readable value using a helper function. Dependencies include UIKit, and the expected output is a string such as 'portrait-primary' or 'landscape-primary'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Foundation\\nimport UIKit\\n\\npublic class ScreenOrientation: NSObject {\\n\\n  public func getCurrentOrientationType() -> String {\\n    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation\\n    return fromDeviceOrientationToOrientationType(currentOrientation)\\n  }\\n\\n  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {\\n    switch orientation {\\n    case .landscapeLeft:\\n      return \\\"landscape-primary\\\"\\n    case .landscapeRight:\\n      return \\\"landscape-secondary\\\"\\n    case .portraitUpsideDown:\\n      return \\\"portrait-secondary\\\"\\n    default:\\n      // Case: portrait\\n      return \\\"portrait-primary\\\"\\n    }\\n  }\\n\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability with isPluginAvailable\nDESCRIPTION: Shows how to check if a specific plugin is available on the current platform, with an example using the Camera plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/web.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Splash Screen Plugin Programmatically - Capacitor TypeScript\nDESCRIPTION: This TypeScript snippet imports the SplashScreen API from @capacitor/splash-screen and demonstrates its usage: hiding the splash screen, showing the splash for an indefinite time, and displaying it temporarily (e.g., for 2 seconds). Requires the Capacitor Splash Screen plugin to be installed and a JavaScript/TypeScript runtime. Each API method accepts an optional options object with parameters such as autoHide and showDuration. Methods return promises that resolve when the requested splash action completes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SplashScreen } from '@capacitor/splash-screen';\\n\\n// Hide the splash (you should do this on app launch)\\nawait SplashScreen.hide();\\n\\n// Show the splash for an indefinite amount of time:\\nawait SplashScreen.show({\\n  autoHide: false,\\n});\\n\\n// Show the splash for two seconds and then automatically hide it:\\nawait SplashScreen.show({\\n  showDuration: 2000,\\n  autoHide: true,\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacitor Network Listener with NgZone in Angular\nDESCRIPTION: Demonstrates how to properly wrap Capacitor plugin event listeners within Angular's NgZone to ensure change detection works correctly. Shows implementation of network status monitoring with proper Angular context handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/angular.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private ngZone: NgZone) { }\n\nasync ngOnInit() {\n  Network.addListener(\"networkStatusChange\", (status) => {\n    this.ngZone.run(() => {\n      // This code will run in Angular's execution context\n      this.networkStatus = status.connected ? \"Online\" : \"Offline\";\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Vibrating the Device using the Haptics API - TypeScript\nDESCRIPTION: The vibrate method causes the device to vibrate for a specified duration, provided as part of the VibrateOptions object. The default duration is 300ms. The function is asynchronous, returning a Promise that resolves upon completion. Input is optional; must follow the VibrateOptions interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvibrate(options?: VibrateOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Modifying Podfile for App Renaming in Capacitor iOS\nDESCRIPTION: This snippet shows how to modify the Podfile to rename the target from 'App' to 'MyRenamedApp' when renaming a Capacitor iOS application. This change should be made after renaming the App target in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-target 'App' do\n+target 'MyRenamedApp' do\n   capacitor_pods\n   # Add your Pods here\n end\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Geolocation Plugin\nDESCRIPTION: Commands to install the Capacitor Geolocation plugin and synchronize the native projects with the updated dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/geolocation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Permissions in Capacitor\nDESCRIPTION: Checks if the app has permission to display local notifications. Returns a Promise resolving to a PermissionStatus object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Opening URL in External Browser with Capacitor InAppBrowser (TypeScript)\nDESCRIPTION: Imports the `InAppBrowser` object and uses the `openInExternalBrowser` method to open the specified URL (\"https://www.google.com\") in the device's default external web browser, outside the application context. Requires the `@capacitor/inappbrowser` plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nawait InAppBrowser.openInExternalBrowser({\n    url: \"https://www.google.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Functionality in Angular Component\nDESCRIPTION: TypeScript code implementing push notification registration, permission handling, and event listeners in an Angular component.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomePage implements OnInit {\n\nngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration',\n      (token: Token) => {\n        alert('Push registration success, token: ' + token.value);\n      }\n    );\n\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError',\n      (error: any) => {\n        alert('Error on registration: ' + JSON.stringify(error));\n      }\n    );\n\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      }\n    );\n\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      }\n    );\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientationPlugin Methods in TypeScript\nDESCRIPTION: Implements the remaining methods of the ScreenOrientationPlugin interface in the ScreenOrientationWeb class. This includes methods for getting the current orientation, locking the orientation, and unlocking the orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ScreenOrientationWeb\n  extends WebPlugin\n  implements ScreenOrientationPlugin\n{\n  async orientation(): Promise<{ type: OrientationType }> {\n    return { type: window.screen.orientation.type };\n  }\n\n  async lock(opts: { orientation: OrientationLockType }): Promise<void> {\n    await window.screen.orientation.lock(opts.orientation);\n  }\n\n  async unlock(): Promise<void> {\n    window.screen.orientation.unlock();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms to Project (Bash)\nDESCRIPTION: These commands add native iOS and Android projects to the Capacitor app, placing them in top-level directories. Each platform can be built and edited individually using their respective IDEs, and Capacitor will auto-install compatible Cordova plugins from dependencies. Requires Capacitor CLI installed and a valid build output in www.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Plugin Functionality in Swift\nDESCRIPTION: Demonstrates implementation of a plugin method for iOS platform using Swift, showing how to extract parameters from the call object and resolve the call when complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@objc func openMap(_ call: CAPPluginCall) {\n  let latitude = call.getString(\"latitude\")\n  let longitude = call.getNumber(\"longitude\")\n\n  // more logic\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability with isPluginAvailable\nDESCRIPTION: Demonstrates the isPluginAvailable utility function that checks if a specific plugin is available on the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nisPluginAvailable: (name: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Removing a Value from Capacitor Preferences in TypeScript\nDESCRIPTION: API definition for the `remove` method. This asynchronous function deletes a key and its associated value from the persistent store. It accepts a `RemoveOptions` object specifying the `key` to remove. Returns a Promise that resolves once the key is removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremove(options: RemoveOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining StatResult Interface in TypeScript\nDESCRIPTION: Defines the result structure returned by the `stat` operation in the Capacitor Filesystem API, providing metadata about a file or directory. It includes the type ('file' or 'directory'), size, creation/modification times, and URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n'file' | 'directory'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnumber\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnumber\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnumber\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Example Capacitor v3 Configuration in TypeScript\nDESCRIPTION: This snippet shows a sample capacitor.config.ts file for Capacitor 3, demonstrating module-based configuration with type safety and plugin options. Required dependencies are @capacitor/cli and compatible plugin packages for referenced plugins. The file exports a typed CapacitorConfig object as the default export, which specifies app metadata, web directory, and plugin-specific settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/local-notifications\" />\n/// <reference types=\"@capacitor/push-notifications\" />\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.capacitorjs.app.testapp',\n  appName: 'capacitor-testapp',\n  webDir: 'build',\n  plugins: {\n    SplashScreen: {\n      launchAutoHide: false,\n    },\n    LocalNotifications: {\n      smallIcon: 'ic_stat_icon_config_sample',\n      iconColor: '#CE0B7C',\n    },\n    PushNotifications: {\n      presentationOptions: ['alert', 'sound'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Web Plugin Structure in TypeScript\nDESCRIPTION: This snippet demonstrates the basic structure of a web plugin for Capacitor. It shows how to import necessary types, implement the plugin interface, and define a method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\n\nimport type { EchoPlugin } from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  async echo(options: { value: string }) {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing `cap open` Command via npx (Bash)\nDESCRIPTION: Executes the Capacitor `open` command using `npx`. This command opens the native project workspace in the specified IDE (Xcode for iOS, Android Studio for Android). The `<platform>` argument is required and must be either `android` or `ios`. Requires Node.js/npm, the Capacitor CLI (`@capacitor/cli`), an existing native platform project added via `cap add`, and the corresponding native IDE installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/open.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open <platform>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme Intent-filter for Android (XML)\nDESCRIPTION: Defines an intent-filter in the activity section of AndroidManifest.xml to handle custom scheme URLs. This enables Android to route incoming URLs with the specified scheme ('@string/custom_url_scheme') to the app. Ensure the custom_url_scheme string is defined in strings.xml. No runtime parameters needed; XML placement within the manifest is required. This facilitates app launch from external links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\\n    <action android:name=\\\"android.intent.action.VIEW\\\" />\\n    <category android:name=\\\"android.intent.category.DEFAULT\\\" />\\n    <category android:name=\\\"android.intent.category.BROWSABLE\\\" />\\n    <data android:scheme=\\\"@string/custom_url_scheme\\\" />\\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Accessing Bridge in Capacitor Android Plugins\nDESCRIPTION: Shows how to access the Bridge object in Capacitor Android plugins. The Bridge is the core component of the Capacitor Android library.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nthis.bridge\n```\n\n----------------------------------------\n\nTITLE: Defining GetUriResult Interface in TypeScript\nDESCRIPTION: Defines the result structure returned by the `getUri` operation in the Capacitor Filesystem API. It contains the URI string for the specified file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Requesting Motion Permissions and Handling Acceleration Events (TypeScript)\nDESCRIPTION: This snippet demonstrates how to request permission for the `DeviceMotionEvent` API, necessary on most browsers, typically within a user-initiated event handler like a button click. After permission is granted, it registers a listener using `Motion.addListener` for 'accel' events, logging the received motion data. It also shows how to store the listener handle to remove it later (`stopAcceleration`) and provides a function to remove all listeners (`removeListeners`). Requires importing `PluginListenerHandle` from `@capacitor/core` and `Motion` from `@capacitor/motion`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginListenerHandle } from '@capacitor/core';\nimport { Motion } from '@capacitor/motion';\n\n\nlet accelHandler: PluginListenerHandle;\n\nmyButton.addEventListener('click', async () => {\n  try {\n    await DeviceMotionEvent.requestPermission();\n  } catch (e) {\n    // Handle error\n    return;\n  }\n\n  // Once the user approves, can start listening:\n  accelHandler = await Motion.addListener('accel', event => {\n    console.log('Device motion event:', event);\n  });\n});\n\n// Stop the acceleration listener\nconst stopAcceleration = () => {\n  if (accelHandler) {\n    accelHandler.remove();\n  }\n};\n\n// Remove all listeners\nconst removeListeners = () => {\n  Motion.removeAllListeners();\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Clipboard API in TypeScript\nDESCRIPTION: Example demonstrating how to write content to the clipboard and read from it. The example shows writing a simple string and then reading back the clipboard contents with type detection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/clipboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clipboard } from '@capacitor/clipboard';\n\nconst writeToClipboard = async () => {\n  await Clipboard.write({\n    string: \"Hello World!\"\n  });\n};\n\nconst checkClipboard = async () => {\n  const { type, value } = await Clipboard.read();\n\n  console.log(`Got ${type} from clipboard: ${value}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Apple App Site Association Configuration for iOS Universal Links (JSON)\nDESCRIPTION: This JSON snippet defines the structure of the 'apple-app-site-association' file required for enabling Universal Links on iOS. The 'details' array must include your app's Team ID and Bundle ID as the appID, and 'paths' specifies which URL paths trigger the app (here, all paths with '*'). No file extension should be used when saving. This must be hosted on your website's .well-known directory over HTTPS for iOS to associate your domain with your app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps in an Angular Component (TypeScript)\nDESCRIPTION: Provides a full example of integrating the Capacitor Google Maps plugin within an Angular component. It includes the template with the web component, styling, obtaining the element reference using `@ViewChild`, and asynchronously creating the map instance within a component method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\n@Component({\n  template: `\n    <capacitor-google-map #map></capacitor-google-map>\n    <button (click)=\"createMap()\">Create Map</button>\n  `,\n  styles: [\n    `\n      capacitor-google-map {\n        display: inline-block;\n        width: 275px;\n        height: 400px;\n      }\n    `,\n  ],\n})\nexport class MyMap {\n  @ViewChild('map')\n  mapRef: ElementRef<HTMLElement>;\n  newMap: GoogleMap;\n\n  async createMap() {\n    this.newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: this.mapRef.nativeElement,\n      apiKey: environment.apiKey,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8,\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Haptics API in TypeScript\nDESCRIPTION: Example of how to use various haptic feedback functions from the @capacitor/haptics plugin, including impact, vibrate, and selection feedback.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/haptics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\nconst hapticsImpactMedium = async () => {\n  await Haptics.impact({ style: ImpactStyle.Medium });\n};\n\nconst hapticsImpactLight = async () => {\n  await Haptics.impact({ style: ImpactStyle.Light });\n};\n\nconst hapticsVibrate = async () => {\n  await Haptics.vibrate();\n};\n\nconst hapticsSelectionStart = async () => {\n  await Haptics.selectionStart();\n};\n\nconst hapticsSelectionChanged = async () => {\n  await Haptics.selectionChanged();\n};\n\nconst hapticsSelectionEnd = async () => {\n  await Haptics.selectionEnd();\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/local-notifications - Bash\nDESCRIPTION: Illustrates how to install and sync the @capacitor/local-notifications plugin using npm and Capacitor CLI. Requires Node.js, npm, and Capacitor already initialized in your project. The commands should be run in the root directory of your project. Input: none. Output: plugin is installed and synchronized with native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/local-notifications\\nnpx cap sync\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map in a React Component\nDESCRIPTION: Provides a full React functional component example using hooks (`useRef`) to reference the `<capacitor-google-map>` element. It demonstrates creating the map within an asynchronous function (`createMap`) triggered by a button click. The `<capacitor-google-map>` element is embedded in the JSX return statement with inline styles. Assumes the API key is available via process environment variables (`process.env.REACT_APP_YOUR_API_KEY_HERE`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\nimport { useRef } from 'react';\n\nconst MyMap: React.FC = () => {\n  const mapRef = useRef<HTMLElement>();\n  let newMap: GoogleMap;\n\n  async function createMap() {\n    if (!mapRef.current) return;\n\n    newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: mapRef.current,\n      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9\n        },\n        zoom: 8\n      }\n    })\n  }\n\n  return (\n    <div className=\"component-wrapper\">\n      <capacitor-google-map ref={mapRef} style={{\n        display: 'inline-block',\n        width: 275,\n        height: 400\n      }}></capacitor-google-map>\n\n      <button onClick={createMap}>Create Map</button>\n    </div>\n  )\n}\n\nexport default MyMap;\n```\n\n----------------------------------------\n\nTITLE: Requesting Push Notification Permissions in Capacitor (TypeScript)\nDESCRIPTION: Requests permission from the user to receive push notifications. On Android 12 and below, it doesn't prompt as permission is implicit. On iOS, it prompts the user on the first call and returns the selected status ('granted' or 'denied'); subsequent calls return the existing status without prompting. Returns a Promise resolving with the `PermissionStatus`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Using the Capacitor Status Bar API in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to import and use various functionalities of the StatusBar plugin. It includes listening for status bar tap events (iOS only), setting the webview overlay (Android only), changing the status bar style (Dark/Light), and hiding/showing the status bar using async functions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\n// iOS only\nwindow.addEventListener('statusTap', function () {\n  console.log('statusbar tapped');\n});\n\n// Display content under transparent status bar (Android only)\nStatusBar.setOverlaysWebView({ overlay: true });\n\nconst setStatusBarStyleDark = async () => {\n  await StatusBar.setStyle({ style: Style.Dark });\n};\n\nconst setStatusBarStyleLight = async () => {\n  await StatusBar.setStyle({ style: Style.Light });\n};\n\nconst hideStatusBar = async () => {\n  await StatusBar.hide();\n};\n\nconst showStatusBar = async () => {\n  await StatusBar.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Angular Component for Push Notification Setup (TypeScript)\nDESCRIPTION: Provides the full source code for the `HomePage` component (`home.page.ts`). This includes necessary imports from Angular core and the Capacitor Push Notifications plugin, along with the `ngOnInit` method implementation for requesting permissions and setting up listeners for various push notification events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\n\nimport { ActionPerformed, PushNotificationSchema, PushNotifications, Token } from '@capacitor/push-notifications';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then((result) => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    PushNotifications.addListener('registration', (token: Token) => {\n      alert('Push registration success, token: ' + token.value);\n    });\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener('pushNotificationReceived', (notification: PushNotificationSchema) => {\n      alert('Push received: ' + JSON.stringify(notification));\n    });\n\n    PushNotifications.addListener('pushNotificationActionPerformed', (notification: ActionPerformed) => {\n      alert('Push action performed: ' + JSON.stringify(notification));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Autofill-Ready Login Form with Ionic and Angular (HTML)\nDESCRIPTION: This HTML template demonstrates a login form using Ionic components in Angular, leveraging the \\'autocomplete\\' attribute for email and password autofill. It also shows two-way data binding for inputs using ngModel and applies a custom directive (appAutofill) to support a workaround for a known webkit bug affecting autofill with ion-input. Dependencies include Angular, Ionic Framework, and optionally a custom autofill directive. Inputs are \\'email\\' and \\'password\\' with appropriate name attributes; output occurs on form submission. Ensure validation and the workaround directive are implemented for reliable autofill.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input\n        appAutofill\n        type=\"email\"\n        name=\"email\"\n        autocomplete=\"email\"\n        [(ngModel)]=\\\"email\\\"\n        required\n        email\n      ></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input\n        appAutofill\n        type=\"password\"\n        name=\"password\"\n        autocomplete=\"current-password\"\n        required\n        [(ngModel)]=\\\"password\\\"\n      ></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Capacitor Screen Reader Plugin in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to import the ScreenReader plugin, add an event listener to detect changes in the screen reader's state (on/off), asynchronously check if the screen reader is currently enabled, and use the text-to-speech functionality to speak a predefined string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-reader.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenReader } from '@capacitor/screen-reader';\n\nScreenReader.addListener('stateChange', ({ value }) => {\n  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);\n});\n\nconst checkScreenReaderEnabled = async () => {\n  const { value } = await ScreenReader.isEnabled();\n\n  console.log('Voice over enabled? ' + value);\n};\n\nconst sayHello = async () => {\n  await ScreenReader.speak({ value: 'Hello World!' });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the configuration options for Capacitor applications. Includes core settings like appId, appName, webDir as well as platform-specific configurations for Android and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CapacitorConfig {\n  /**\n   * The unique identifier of your packaged app.\n   *\n   * This is also known as the Bundle ID in iOS and the Application ID in\n   * Android. It must be in reverse domain name notation, generally\n   * representing a domain name that you or your company owns.\n   *\n   * @since 1.0.0\n   */\n  appId?: string;\n\n  /**\n   * The human-friendly name of your app.\n   *\n   * This should be what you'd see in the App Store, but can be changed after\n   * within each native platform after it is generated.\n   *\n   * @since 1.0.0\n   */\n  appName?: string;\n\n  /**\n   * The directory of your compiled web assets.\n   *\n   * This directory should contain the final `index.html` of your app.\n   *\n   * @since 1.0.0\n   */\n  webDir?: string;\n\n  /**\n   * Whether to copy the Capacitor runtime bundle or not.\n   *\n   * If your app is not using a bundler, set this to `true`, then Capacitor\n   * will create a `capacitor.js` file that you'll need to add as a script in\n   * your `index.html` file.\n   *\n   * It's deprecated and will be removed in Capacitor 6\n   *\n   * @since 1.0.0\n   * @deprecated 5.0.0\n   * @default false\n   */\n  bundledWebRuntime?: boolean;\n\n  /**\n   * The build configuration (as defined by the native app) under which Capacitor\n   * will send statements to the log system. This applies to log statements in\n   * native code as well as statements redirected from JavaScript (`console.debug`,\n   * `console.error`, etc.). Enabling logging will let statements render in the\n   * Xcode and Android Studio windows but can leak information on device if enabled\n   * in released builds.\n   *\n   * 'none' = logs are never produced\n   * 'debug' = logs are produced in debug builds but not production builds\n   * 'production' = logs are always produced\n   *\n   * @since 3.0.0\n   * @default debug\n   */\n  loggingBehavior?: 'none' | 'debug' | 'production';\n\n  /**\n   * User agent of Capacitor Web View.\n   *\n   * @since 1.4.0\n   */\n  overrideUserAgent?: string;\n\n  /**\n   * String to append to the original user agent of Capacitor Web View.\n   *\n   * This is disregarded if `overrideUserAgent` is used.\n   *\n   * @since 1.4.0\n   */\n  appendUserAgent?: string;\n\n  /**\n   * Background color of the Capacitor Web View.\n   *\n   * @since 1.1.0\n   */\n  backgroundColor?: string;\n\n  android?: {\n    /**\n     * Specify a custom path to the native Android project.\n     *\n     * @since 3.0.0\n     * @default android\n     */\n    path?: string;\n\n    /**\n     * User agent of Capacitor Web View on Android.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for Android.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for Android.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable mixed content in the Capacitor Web View for Android.\n     *\n     * [Mixed\n     * content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content)\n     * is disabled by default for security. During development, you may need to\n     * enable it to allow the Web View to load files from different schemes.\n     *\n     * **This is not intended for use in production.**\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    allowMixedContent?: boolean;\n\n    /**\n     * This enables a simpler keyboard which may have some limitations.\n     *\n     * This will capture JS keys using an alternative\n     * [`InputConnection`](https://developer.android.com/reference/android/view/inputmethod/InputConnection).\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    captureInput?: boolean;\n\n    /**\n     * Always enable debuggable web content.\n     *\n     * This is automatically enabled during development.\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    webContentsDebuggingEnabled?: boolean;\n\n    /**\n     * The build configuration under which Capacitor will generate logs on Android.\n     *\n     * Overrides global `loggingBehavior` option.\n     *\n     * @since 3.0.0\n     * @default debug\n     */\n    loggingBehavior?: 'none' | 'debug' | 'production';\n\n    /**\n     * Allowlist of plugins to include during `npx cap sync` for Android.\n     *\n     * Overrides global `includePlugins` option.\n     *\n     * @since 3.0.0\n     */\n    includePlugins?: string[];\n\n    /**\n     * Android flavor to use.\n     *\n     * If the app has flavors declared in the `build.gradle`\n     * configure the flavor you want to run with `npx cap run` command.\n     *\n     * @since 3.1.0\n     */\n    flavor?: string;\n\n    /**\n     * Whether to give the webview initial focus.\n     *\n     * @since 3.5.1\n     * @default true\n     */\n    initialFocus?: boolean;\n\n    /**\n     * The minimum supported webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `55`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.0.0\n     * @default 60\n     */\n    minWebViewVersion?: number;\n\n    /**\n     * The minimum supported Huawei webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `10`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.6.4\n     * @default 10\n     */\n    minHuaweiWebViewVersion?: number;\n\n    buildOptions?: {\n      /**\n       * Path to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePath?: string;\n\n      /**\n       * Password to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePassword?: string;\n\n      /**\n       * Alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAlias?: string;\n\n      /**\n       * Password for the alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAliasPassword?: string;\n\n      /**\n       * Bundle type for your release build\n       *\n       * @since 4.4.0\n       * @default \"AAB\"\n       */\n      releaseType?: 'AAB' | 'APK';\n\n      /**\n       * Program to sign your build with\n       *\n       * @since 5.1.0\n       * @default \"jarsigner\"\n       */\n      signingType?: 'apksigner' | 'jarsigner';\n    };\n\n    /**\n     * Use legacy [addJavascriptInterface](https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String))\n     * instead of the new and more secure [addWebMessageListener](https://developer.android.com/reference/androidx/webkit/WebViewCompat#addWebMessageListener(android.webkit.WebView,java.lang.String,java.util.Set%3Cjava.lang.String%3E,androidx.webkit.WebViewCompat.WebMessageListener))\n     *\n     * @since 4.5.0\n     * @default false\n     */\n    useLegacyBridge?: boolean;\n  };\n\n  ios?: {\n    /**\n     * Specify a custom path to the native iOS project.\n     *\n     * @since 3.0.0\n     * @default ios\n     */\n    path?: string;\n\n    /**\n     * iOS build scheme to use.\n     *\n     * Usually this matches your app's target in Xcode. You can use the\n     * following command to list schemes:\n     *\n     * ```shell\n     * xcodebuild -workspace ios/App/App.xcworkspace -list\n     * ```\n     *\n     * @since 3.0.0\n     * @default App\n     */\n    scheme?: string;\n\n    /**\n     * User agent of Capacitor Web View on iOS.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for iOS.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for iOS.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Configure the scroll view's content inset adjustment behavior.\n     *\n     * This will set the\n     * [`contentInsetAdjustmentBehavior`](https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 2.0.0\n     * @default never\n     */\n    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';\n\n    /**\n     * Configure whether the scroll view is scrollable.\n     *\n     * This will set the\n     * [`isScrollEnabled`](https://developer.apple.com/documentation/uikit/uiscrollview/1619395-isscrollenabled)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 1.0.0\n     */\n    scrollEnabled?: boolean;\n\n    /**\n     * Configure custom linker flags for compiling Cordova plugins.\n     *\n     * @since 1.0.0\n     * @default []\n     */\n    cordovaLinkerFlags?: string[];\n\n    /**\n     * Allow destination previews when pressing on links.\n     *\n     * This will set the\n     * [`allowsLinkPreview`](https://developer.apple.com/documentation/webkit/wkwebview/1415000-allowslinkpreview)\n     */\n    allowLinkPreview?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending PluginsConfig for Plugin Typings - TypeScript\nDESCRIPTION: This code creates and documents TypeScript typings for the configuration values used by 'MyCoolPlugin' by extending Capacitor's PluginsConfig interface. Comments are included to describe the purpose, allowed values, defaults, and examples for each property. This typing definition should be placed in the plugin's definitions file and consumers must use TypeScript for maximum benefit.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    MyCoolPlugin?: {\n      /**\n       * Override the cool theme style if your app doesn't support light/dark theme changes.\n       *\n       * @since 1.0.0\n       * @example \"light\"\n       */\n      style?: 'dark' | 'light';\n\n      /**\n       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.\n       *\n       * @since 1.0.0\n       * @default #ffffff\n       * @example \"#FF9900\"\n       */\n      iconColor?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Taking a Picture with Camera Capacitor Plugin\nDESCRIPTION: TypeScript example demonstrating how to use the Camera.getPhoto() method to take a picture or choose an existing one from the photo album.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera, CameraResultType } from '@capacitor/camera';\n\nconst takePicture = async () => {\n  const image = await Camera.getPhoto({\n    quality: 90,\n    allowEditing: true,\n    resultType: CameraResultType.Uri\n  });\n\n  // image.webPath will contain a path that can be set as an image src.\n  // You can access the original file using image.path, which can be\n  // passed to the Filesystem API to read the raw data of the image,\n  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n  var imageUrl = image.webPath;\n\n  // Can be set to the src of an image now\n  imageElement.src = imageUrl;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications in Capacitor\nDESCRIPTION: Register the app to receive push notifications. This method triggers the 'registration' event with the push token or 'registrationError' if there's a problem. It doesn't prompt for notification permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregister() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Code Example with getPlatform\nDESCRIPTION: Demonstrates how to implement conditional logic based on the current platform using the getPlatform utility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Using `triggerJSEvent` to Fire JavaScript Events from Android (Java)\nDESCRIPTION: Provides Java examples demonstrating how to use the `bridge.triggerJSEvent()` method to send custom events from native Android code to the JavaScript environment. It shows dispatching events to both `window` and `document`, including passing data as a serialized JSON string. Using Plugin Events is generally preferred when possible.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nbridge.triggerJSEvent(\"myCustomEvent\", \"window\");\nbridge.triggerJSEvent(\"myCustomEvent\", \"document\", \"{ 'dataKey': 'dataValue' }\");\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem Hooks in React Components\nDESCRIPTION: Example of importing and using the Capacitor filesystem hooks in a React function component. The code demonstrates how to read a file from the device's filesystem using the readFile function within a useEffect hook.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/react-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';\n\nconst MyComponent = () => (\n  const { readFile } = useFilesystem();\n\n  useEffect(() => {\n    const readMyFile = async () => {\n      const file = await readFile({\n        path: filepath,\n        directory: FilesystemDirectory.Data\n      });\n      // ...\n    }\n\n    readMyFile();\n  }, [ readFile ]);\n```\n\n----------------------------------------\n\nTITLE: Converting NSNull to Swift Optionals in Capacitor Arrays\nDESCRIPTION: Shows how to properly handle arrays containing NSNull values in Swift by using Capacitor's extension method to convert NSNull objects to nil in an array of optionals.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/data-types.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\").capacitor.replacingNullValues() as? [Int?] {\n    // GOOD: `values` is now cast to `Int?` with `nil` at index 2\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Features\nDESCRIPTION: Demonstrates how to handle unimplemented features in web plugins using proper error throwing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync getLocation(): Promise<Location> {\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Push Notification Actions in Capacitor (TypeScript)\nDESCRIPTION: Adds an event listener triggered when a user interacts with a push notification (e.g., taps on it). The listener function receives an `ActionPerformed` object containing details about the notification and the action performed. Returns a Promise that resolves with a `PluginListenerHandle` for listener removal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationActionPerformed', listenerFunc: (notification: ActionPerformed) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Verifying CocoaPods Installation\nDESCRIPTION: Command to verify CocoaPods installation by checking the installed version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npod --version\n# 1.11.3\n```\n\n----------------------------------------\n\nTITLE: Override Plugin Loading Lifecycle - Swift\nDESCRIPTION: This code snippet shows an override of the load() method in a CAPPlugin subclass as a place to perform initial setup logic when the plugin is loaded. This is a lifecycle callback invoked by Capacitor on plugin instantiation. The method body is intentionally left empty as a placeholder.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Map Viewport Bounds in TypeScript\nDESCRIPTION: Sets the map viewport to contain the given bounds. Takes LatLngBounds as input and an optional padding value in pixels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfitBounds(bounds: LatLngBounds, padding?: number | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Capacitor Camera API: requestPermissions Method Signature\nDESCRIPTION: TypeScript signature for the `requestPermissions` method. This function prompts the user to grant permissions for camera and/or photo album access, based on the optional `CameraPluginPermissions` parameter. It returns a Promise resolving to a `PermissionStatus` object indicating the outcome.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(permissions?: CameraPluginPermissions | undefined) => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Android Asset Links JSON Configuration\nDESCRIPTION: This JSON configuration file (assetlinks.json) is used to establish the association between a website and an Android app for deep linking. It includes the app's package name and SHA256 certificate fingerprint.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"com.netkosoft.beerswift\",\n      \"sha256_cert_fingerprints\": [\"43:12:D4:27:D7:C4:14...\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using the Splash Screen Plugin API - Capacitor - TypeScript\nDESCRIPTION: Demonstrates how to import and use the SplashScreen API from @capacitor/splash-screen. Examples include hiding the splash screen, showing it indefinitely, and showing it for a specified duration. Requires the @capacitor/splash-screen package installed and Capacitor runtime available in a TypeScript environment. Parameters such as autoHide and showDuration control splash display timing; functions return promises.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SplashScreen } from '@capacitor/splash-screen';\\n\\n// Hide the splash (you should do this on app launch)\\nawait SplashScreen.hide();\\n\\n// Show the splash for an indefinite amount of time:\\nawait SplashScreen.show({\\n  autoHide: false\\n});\\n\\n// Show the splash for two seconds and then automatically hide it:\\nawait SplashScreen.show({\\n  showDuration: 2000,\\n  autoHide: true\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Service Extension for iOS Push Notifications with Images\nDESCRIPTION: This Swift code implements the NotificationService class, which extends UNNotificationServiceExtension. It uses Firebase Messaging to populate the notification content with image data, enabling rich push notifications with images on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nimport UserNotifications\nimport FirebaseMessaging\n\nclass NotificationService: UNNotificationServiceExtension {\n    var contentHandler: ((UNNotificationContent) -> Void)?\n    var bestAttemptContent: UNMutableNotificationContent?\n\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        guard let content = request.content.mutableCopy() as? UNMutableNotificationContent else { return }\n        self.contentHandler = contentHandler\n        self.bestAttemptContent = content\n\n        FIRMessagingExtensionHelper().populateNotificationContent(content, withContentHandler: contentHandler)\n    }\n\n    override func serviceExtensionTimeWillExpire() {\n        guard let contentHandler = contentHandler,\n              let bestAttemptContent =  bestAttemptContent else { return }\n\n        contentHandler(bestAttemptContent)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map Instance in TypeScript\nDESCRIPTION: Creates a new Google Map instance with specified options and an optional callback for when the map is ready.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(options: CreateMapArgs, callback?: MapListenerCallback<MapReadyCallbackData> | undefined) => Promise<GoogleMap>\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Call Data in Capacitor Android\nDESCRIPTION: Example showing how to access various data types passed from JavaScript to a Capacitor Android plugin, including strings, objects, and booleans. It also demonstrates checking for required parameters and handling failure cases.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void storeContact(PluginCall call) {\n  String name = call.getString(\"yourName\", \"default name\");\n  JSObject address = call.getObject(\"address\", new JSObject());\n  boolean isAwesome = call.getBoolean(\"isAwesome\", false);\n\n  if (!call.getData().has(\"id\")) {\n    call.reject(\"Must provide an id\");\n    return;\n  }\n  // ...\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unlock Method in ScreenOrientationPlugin for Swift\nDESCRIPTION: This method handles the unlock call in the ScreenOrientationPlugin, resetting the supported orientations to all.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func unlock(_ call: CAPPluginCall) {\n  implementation.unlock {\n    ScreenOrientationPlugin.supportedOrientations = UIInterfaceOrientationMask.all\n    call.resolve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Google Maps Plugin via npm\nDESCRIPTION: Shows the npm command to install the `@capacitor/google-maps` package and the Capacitor CLI command to synchronize the native projects after installation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/google-maps\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using Splash Screen API in TypeScript\nDESCRIPTION: TypeScript examples demonstrating how to programmatically control the splash screen, including hiding it and showing it with various duration options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SplashScreen } from '@capacitor/splash-screen';\n\n// Hide the splash (you should do this on app launch)\nawait SplashScreen.hide();\n\n// Show the splash for an indefinite amount of time:\nawait SplashScreen.show({\n  autoHide: false,\n});\n\n// Show the splash for two seconds and then automatically hide it:\nawait SplashScreen.show({\n  showDuration: 2000,\n  autoHide: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Making GET and POST Requests with CapacitorHttp in TypeScript\nDESCRIPTION: This TypeScript example illustrates how to use the `CapacitorHttp` plugin from `@capacitor/core` to perform HTTP requests. It shows defining options (URL, headers, parameters, data) and making asynchronous GET and POST requests using `CapacitorHttp.get()` and `CapacitorHttp.post()`. It also notes the alternative `CapacitorHttp.request()` method. The data for POST requests can be a JSON serializable JavaScript object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorHttp, HttpResponse } from '@capacitor/core';\n\n// Example of a GET request\nconst doGet = async () => {\n  const options = {\n    url: 'https://example.com/my/api',\n    headers: { 'X-Fake-Header': 'Fake-Value' },\n    params: { size: 'XL' },\n  };\n\n  const response: HttpResponse = await CapacitorHttp.get(options);\n\n  // or...\n  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })\n};\n\n// Example of a POST request. Note: data\n// can be passed as a raw JS Object (must be JSON serializable)\nconst doPost = async () => {\n  const options = {\n    url: 'https://example.com/my/api',\n    headers: { 'X-Fake-Header': 'Fake-Value' },\n    data: { foo: 'bar' },\n  };\n\n  const response: HttpResponse = await CapacitorHttp.post(options);\n\n  // or...\n  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })\n};\n```\n\n----------------------------------------\n\nTITLE: Initiating Content Sharing with share() in TypeScript\nDESCRIPTION: Provides the TypeScript function signature for `share(options)`. This asynchronous function presents the native sharing modal/dialog to the user, allowing them to share content specified in the `ShareOptions` object (title, text, url, files, dialogTitle). It returns a promise resolving to a `ShareResult` object, potentially containing the identifier of the app the user shared to.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/share.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshare(options: ShareOptions) => Promise<ShareResult>\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable Functionality in iOS Capacitor Plugin\nDESCRIPTION: Demonstrates how to handle functionality that is not available in older iOS versions using the 'unavailable' method. It checks for iOS 14 availability and gracefully degrades for earlier versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatUsesNewIOSFramework(_ call: CAPPluginCall) {\n    if #available(iOS 14, *) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available in iOS 13 or earlier.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK and Dependencies in variables.gradle\nDESCRIPTION: This snippet shows the changes required in the variables.gradle file to update SDK versions and dependencies for Capacitor 3 compatibility. It includes updates to compileSdkVersion, targetSdkVersion, and various androidx library versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_13\n\nLANGUAGE: gradle\nCODE:\n```\next {\n    minSdkVersion = 21\n-    compileSdkVersion = 29\n-    targetSdkVersion = 29\n+    compileSdkVersion = 30\n+    targetSdkVersion = 30\n+    androidxActivityVersion = '1.2.0'\n-    androidxAppCompatVersion = '1.1.0'\n+    androidxAppCompatVersion = '1.2.0'\n+    androidxCoordinatorLayoutVersion = '1.1.0'\n-    androidxCoreVersion =  '1.2.0'\n-    androidxMaterialVersion =  '1.1.0-rc02'\n-    androidxBrowserVersion =  '1.2.0'\n-    androidxLocalbroadcastmanagerVersion =  '1.0.0'\n-    androidxExifInterfaceVersion = '1.2.0'\n-    firebaseMessagingVersion =  '20.1.2'\n-    playServicesLocationVersion =  '17.0.0'\n+    androidxCoreVersion = '1.3.2'\n+    androidxFragmentVersion = '1.3.0'\n-    junitVersion =  '4.12'\n-    androidxJunitVersion =  '1.1.1'\n-    androidxEspressoCoreVersion =  '3.2.0'\n+    junitVersion = '4.13.1'\n+    androidxJunitVersion = '1.1.2'\n+    androidxEspressoCoreVersion = '3.3.0'\n    cordovaAndroidVersion = '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Haptics API Functions with Capacitor - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the Haptics API and enums from '@capacitor/haptics' in TypeScript. Each async function wraps a specific type of feedback call (impact, vibrate, selectionStart, selectionChanged, selectionEnd) and invokes the corresponding Haptics method, optionally providing parameters such as ImpactStyle via object arguments. Dependencies: @capacitor/haptics must be installed and available in the project. Expected input parameters are defined by the API's method signatures; outputs are Promises that resolve when the physical feedback (if supported) has been triggered.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\\n\\nconst hapticsImpactMedium = async () => {\\n  await Haptics.impact({ style: ImpactStyle.Medium });\\n};\\n\\nconst hapticsImpactLight = async () => {\\n  await Haptics.impact({ style: ImpactStyle.Light });\\n};\\n\\nconst hapticsVibrate = async () => {\\n  await Haptics.vibrate();\\n};\\n\\nconst hapticsSelectionStart = async () => {\\n  await Haptics.selectionStart();\\n};\\n\\nconst hapticsSelectionChanged = async () => {\\n  await Haptics.selectionChanged();\\n};\\n\\nconst hapticsSelectionEnd = async () => {\\n  await Haptics.selectionEnd();\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Capacitor Plugin in Swift\nDESCRIPTION: This Swift snippet shows the implementation of a custom Capacitor plugin called EchoPlugin. The plugin bridges native code to JavaScript, allowing data to be exchanged between the web and native layers. It uses Capacitor's @objc interoperability for dynamic plugins, defines plugin methods, and implements a simple echo method. Dependencies include Capacitor and Xcode. The plugin expects a string parameter ('value') and returns it via a resolved promise; missing values default to an empty string. The snippet must be placed within an appropriately registered Swift file and requires proper integration with the bridge.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin, CAPBridgedPlugin {\n    public let identifier = \"EchoPlugin\"\n    public let jsName = \"Echo\"\n    public let pluginMethods: [CAPPluginMethod] = [\n        CAPPluginMethod(name: \"echo\", returnType: CAPPluginReturnPromise)\n    ]\n\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\"value\": value])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Text-to-Speech with speak() in TypeScript\nDESCRIPTION: API signature for the `speak` method, which enables text-to-speech functionality. It requires an options object conforming to the `SpeakOptions` interface (containing the text `value` and optional `language`). This method only functions if a screen reader is active. On the web, it depends on browser support for the SpeechSynthesis API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-reader.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nspeak(options: SpeakOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Mocking Storage Plugin in Jest Tests with TypeScript\nDESCRIPTION: This code demonstrates how to mock and spy on the Storage plugin methods in Jest tests using TypeScript. It includes examples of mocking get and clear methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/mocking-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nit(\"gets the first and last name\", async () => {\n  Storage.get = jest.fn().mockImplementation(\n    async (data: { key: string }): Promise<{ value: string }> => {\n      return data.key === \"firstName\"\n        ? { value: \"Jimmy\" }\n        : data.key === \"lastName\"\n        ? { value: \"Simms\" }\n        : { value: \"unknown\" };\n    }\n  );\n  const w = mount(Home);\n  await flushPromises();\n  expect(w.vm.firstName).toEqual(\"Jimmy\");\n  expect(w.vm.lastName).toEqual(\"Simms\");\n});\n\nit(\"clears the storage\", () => {\n  const button = wrapper.findComponent('[data-testid=\"clear\"]');\n  Storage.clear = jest.fn().mockResolvedValue(undefined);\n  button.trigger(\"click\");\n  expect(Storage.clear).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting Plugin Call with Error in Swift\nDESCRIPTION: Shows how to reject a plugin call, passing an error message, optional Error instance, and additional data back to the client.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ncall.reject(error.localizedDescription, error, [\n  \"item1\": true\n])\n```\n\n----------------------------------------\n\nTITLE: Opening a URL with Browser API in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Browser plugin from Capacitor core and use it to open a URL in an in-app browser. It shows the basic usage of the Browser.open() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/browser.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Browser } = Plugins;\n\nawait Browser.open({ url: 'http://capacitorjs.com/' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Using TypeScript Configuration File\nDESCRIPTION: Demonstrates setting up a basic Capacitor configuration file using TypeScript. Shows how to define core application settings including the app ID, display name, and web directory location. The configuration is exported as a CapacitorConfig type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.company.appname',\n  appName: 'My Capacitor App',\n  webDir: 'www',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Adding Mobile Platforms to Ionic Capacitor Project\nDESCRIPTION: Commands to add Android and iOS platforms to an Ionic Capacitor project, which creates native project directories in the root of your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/with-ionic.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nionic capacitor add android\nionic capacitor add ios\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Logic Example with getPlatform\nDESCRIPTION: Shows how to use getPlatform to implement conditional logic based on the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router for Deep Link Routing (TypeScript)\nDESCRIPTION: This snippet initializes a VueRouter instance with an empty routes array for setting up deep link navigation in a Vue app. While no routes are provided in this example, in a real application, this array would be populated. Requires Vue and VueRouter. The router object will later be used for programmatic navigation in response to deep link events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Orientation Change Listeners in Swift\nDESCRIPTION: Implementation of orientation change detection using NotificationCenter, including lifecycle methods for observer management and change notification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n  NotificationCenter.default.addObserver(\n    self,\n    selector: #selector(self.orientationDidChange),\n    name: UIDevice.orientationDidChangeNotification,\n    object: nil)\n}\n\ndeinit {\n  NotificationCenter.default.removeObserver(self)\n}\n\n@objc private func orientationDidChange() {\n  // Ignore changes in orientation if unknown, face up, or face down\n  if(UIDevice.current.orientation.isValidInterfaceOrientation) {\n    let orientation = implementation.getCurrentOrientationType()\n    notifyListeners(\"screenOrientationChange\", data: [\"type\": orientation])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin JavaScript Interface\nDESCRIPTION: Demonstrates how to create the JavaScript interface for the Echo plugin using registerPlugin from @capacitor/core.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem API with Capacitor\nDESCRIPTION: A comprehensive example showing all major file operations with the Capacitor Filesystem API including writing, reading, appending, deleting files, creating/removing directories, listing directory contents, getting file stats, and handling file paths.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins, FilesystemDirectory, FilesystemEncoding } from '@capacitor/core';\n\nconst { Filesystem } = Plugins;\n\nasync fileWrite() {\n  try {\n    const result = await Filesystem.writeFile({\n      path: 'secrets/text.txt',\n      data: \"This is a test\",\n      directory: FilesystemDirectory.Documents,\n      encoding: FilesystemEncoding.UTF8\n    })\n    console.log('Wrote file', result);\n  } catch(e) {\n    console.error('Unable to write file', e);\n  }\n}\n\nasync fileRead() {\n  let contents = await Filesystem.readFile({\n    path: 'secrets/text.txt',\n    directory: FilesystemDirectory.Documents,\n    encoding: FilesystemEncoding.UTF8\n  });\n  console.log(contents);\n}\n\nasync fileAppend() {\n  await Filesystem.appendFile({\n    path: 'secrets/text.txt',\n    data: \"MORE TESTS\",\n    directory: FilesystemDirectory.Documents,\n    encoding: FilesystemEncoding.UTF8\n  });\n}\n\nasync fileDelete() {\n  await Filesystem.deleteFile({\n    path: 'secrets/text.txt',\n    directory: FilesystemDirectory.Documents\n  });\n}\n\nasync mkdir() {\n  try {\n    let ret = await Filesystem.mkdir({\n      path: 'secrets',\n      directory: FilesystemDirectory.Documents,\n      recursive: false // like mkdir -p\n    });\n  } catch(e) {\n    console.error('Unable to make directory', e);\n  }\n}\n\nasync rmdir() {\n  try {\n    let ret = await Filesystem.rmdir({\n      path: 'secrets',\n      directory: FilesystemDirectory.Documents,\n      recursive: false,\n    });\n  } catch(e) {\n    console.error('Unable to remove directory', e);\n  }\n}\n\nasync readdir() {\n  try {\n    let ret = await Filesystem.readdir({\n      path: 'secrets',\n      directory: FilesystemDirectory.Documents\n    });\n  } catch(e) {\n    console.error('Unable to read dir', e);\n  }\n}\n\nasync stat() {\n  try {\n    let ret = await Filesystem.stat({\n      path: 'secrets/text.txt',\n      directory: FilesystemDirectory.Documents\n    });\n  } catch(e) {\n    console.error('Unable to stat file', e);\n  }\n}\n\nasync readFilePath() {\n  // Here's an example of reading a file with a full file path. Use this to\n  // read binary data (base64 encoded) from plugins that return File URIs, such as\n  // the Camera.\n  try {\n    let data = await Filesystem.readFile({\n      path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt'\n    })\n  }\n}\n\nasync rename() {\n  try {\n    // This example moves the file within the same 'directory'\n    let ret = await Filesystem.rename({\n      from: 'text.txt',\n      to: 'text2.txt',\n      directory: FilesystemDirectory.Documents\n    });\n  } catch(e) {\n    console.error('Unable to rename file', e);\n  }\n}\n\nasync copy() {\n  try {\n    // This example copies a file within the documents directory\n    let ret = await Filesystem.copy({\n      from: 'text.txt',\n      to: 'text2.txt',\n      directory: FilesystemDirectory.Documents\n    });\n  } catch(e) {\n    console.error('Unable to copy file', e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Request Implementation Example\nDESCRIPTION: Demonstrates implementation of permission handling in a Capacitor plugin including permission callback and request initiation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void takePhoto(PluginCall call) {\n  if (getPermissionState(\"camera\") != PermissionState.GRANTED) {\n    requestPermissionForAlias(\"camera\", call, \"cameraPermsCallback\");\n  } else {\n    loadCamera(call);\n  }\n}\n\n@PermissionCallback\nprivate void cameraPermsCallback(PluginCall call) {\n  if (getPermissionState(\"camera\") == PermissionState.GRANTED) {\n    loadCamera(call);\n  } else {\n    call.reject(\"Permission is required to take a picture\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Toast API in TypeScript\nDESCRIPTION: Example of displaying a simple toast notification with text content using the Capacitor Toast plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from '@capacitor/toast';\n\nconst showHelloToast = async () => {\n  await Toast.show({\n    text: 'Hello!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Listening to Network Status Changes Via Plugin API - TypeScript\nDESCRIPTION: This TypeScript snippet details the addListener API for 'networkStatusChange' event in the Capacitor Network plugin. It allows subscribing to changes in network state by passing the fixed event name and a callback function conforming to ConnectionStatusChangeListener. Dependencies are the Capacitor Network plugin and a callback for handling updates. Key parameters are the event name ('networkStatusChange') and the listener function. The output is a handle for managing the listener subscription, and it merges a Promise and the PluginListenerHandle interface. Restriction: event name is fixed and only network status events are supported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/network.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Using Bridge Pattern in Capacitor Device Plugin\nDESCRIPTION: This Swift code demonstrates the Bridge design pattern in the Capacitor Device plugin. The implementation object handles the platform-specific functionality while the method focuses on the high-level logic of receiving the call, getting the language code from the implementation, and resolving the call with the result.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@objc func getLanguageCode(_ call: CAPPluginCall) {\n    let code = implementation.getLanguageCode()\n    call.resolve([ \"value\": code ])\n}\n```\n\n----------------------------------------\n\nTITLE: Request Push Notification Permissions - TypeScript\nDESCRIPTION: Requests permission to receive push notifications. Prompts user on iOS, always granted on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Using the Share API in Capacitor with TypeScript\nDESCRIPTION: This example demonstrates how to use Capacitor's Share API to share content with other applications. It shows importing the Share plugin and calling its share method with title, text, URL, and dialog title options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/share.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\nconst { Share } = Plugins;\n\nlet shareRet = await Share.share({\n  title: 'See cool stuff',\n  text: 'Really awesome thing you need to see right meow',\n  url: 'http://ionicframework.com/',\n  dialogTitle: 'Share with buddies',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Device Capacitor Plugin in TypeScript\nDESCRIPTION: Example showing how to import and use the Device plugin to retrieve device information and battery status in a TypeScript application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Device } from '@capacitor/device';\n\nconst logDeviceInfo = async () => {\n  const info = await Device.getInfo();\n\n  console.log(info);\n};\n\nconst logBatteryInfo = async () => {\n  const info = await Device.getBatteryInfo();\n\n  console.log(info);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the canOpenUrl Method Signature in Capacitor App Launcher API\nDESCRIPTION: TypeScript signature for the `canOpenUrl` method of the App Launcher plugin. This method checks if an application registered for a specific URL scheme or package name can be opened. It takes an options object with a `url` property and returns a Promise resolving to an object containing a boolean `value`. Requires `LSApplicationQueriesSchemes` configuration in `Info.plist` on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app-launcher.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncanOpenUrl(options: CanOpenURLOptions) => Promise<CanOpenURLResult>\n```\n\n----------------------------------------\n\nTITLE: Updating ScreenOrientationPlugin to Use Orientation Detection\nDESCRIPTION: This code updates the ScreenOrientationPlugin class to use the ScreenOrientation implementation for getting the current orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@objc(ScreenOrientationPlugin)\npublic class ScreenOrientationPlugin: CAPPlugin {\n\n  private let implementation = ScreenOrientation()\n\n  @objc public func orientation(_ call: CAPPluginCall) {\n    let orientationType = implementation.getCurrentOrientationType();\n    call.resolve([\"type\": orientationType])\n  }\n\n  /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Capacitor Run Command (Bash)\nDESCRIPTION: This Bash command executes the Capacitor CLI's `run` command using `npx`. It first runs the `sync` command (unless `--no-sync` is specified), then builds the native platform project (Android or iOS specified by `<platform>`), and finally deploys the application to a selected target device or emulator. Various options allow customization like specifying build flavors/schemes or selecting a specific target device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Checking for Native Platform in Capacitor\nDESCRIPTION: Demonstrates using isNativePlatform() to determine if the app is running as a native installed app versus in a browser or as a PWA.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  console.log(\"I'm a native app!\");\n} else {\n  console.log(\"I'm a PWA or Web app!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Toast Notification Using @capacitor/toast (TypeScript)\nDESCRIPTION: Shows how to import the Toast module from @capacitor/toast and display a toast notification by calling Toast.show with the required text parameter. This asynchronous function demonstrates the basic usage pattern, where 'text' specifies the message to show. Requires @capacitor/toast to be installed and, for PWA usage, compatible PWA Elements must be available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from '@capacitor/toast';\n\nconst showHelloToast = async () => {\n  await Toast.show({\n    text: 'Hello!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Echo Plugin in Capacitor Java\nDESCRIPTION: This snippet demonstrates a basic Capacitor plugin implementation in Java, featuring an 'echo' method that returns back input data from a PluginCall. It highlights the use of annotations such as @CapacitorPlugin and @PluginMethod, and leverages JSObject for returning data to the client. Dependencies include the Capacitor Android library, specifically Plugin, PluginCall, JSObject, and annotation imports. Inputs and outputs are JSON-serializable, and the function expects a 'value' parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage android.plugin.test;\\n\\nimport com.getcapacitor.JSObject;\\nimport com.getcapacitor.Plugin;\\nimport com.getcapacitor.PluginCall;\\nimport com.getcapacitor.PluginMethod;\\nimport com.getcapacitor.annotation.CapacitorPlugin;\\n\\n@CapacitorPlugin(name = \"Echo\")\\npublic class EchoPlugin extends Plugin {\\n\\n    @PluginMethod()\\n    public void echo(PluginCall call) {\\n        String value = call.getString(\"value\");\\n\\n        JSObject ret = new JSObject();\\n        ret.put(\"value\", value);\\n        call.resolve(ret);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the confirm Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the `Dialog.confirm` function. It accepts a single argument `options` of type `ConfirmOptions` and returns a `Promise<ConfirmResult>` which resolves with an object containing a boolean `value` indicating whether the positive button was clicked. This function is available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/dialog.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(options: ConfirmOptions) => Promise<ConfirmResult>\n```\n\n----------------------------------------\n\nTITLE: Setting the Status Bar Style (TypeScript API)\nDESCRIPTION: This TypeScript signature defines the `setStyle` method of the StatusBar plugin. It accepts an options object conforming to the `StyleOptions` interface (specifying the desired `Style`) and returns a Promise that resolves when the status bar style has been updated.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetStyle(options: StyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents with Capacitor Filesystem API (readdir)\nDESCRIPTION: Defines the `readdir` method signature from the Capacitor Filesystem API. This asynchronous function takes `ReaddirOptions` (specifying the path and optional directory) and returns a Promise resolving to a `ReaddirResult` containing an array of filenames within that directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nreaddir(options: ReaddirOptions) => Promise<ReaddirResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor for Routing Setup in Angular with Capacitor (TypeScript)\nDESCRIPTION: This snippet initializes routing and zone dependencies within an Angular component constructor for handling deep links. It injects Router and NgZone services, then calls initializeApp to initialize the app's URL event handling. Required dependencies are the Angular Router and NgZone; no explicit parameters are passed. The constructor ensures deep linking is enabled on component creation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private router: Router, private zone: NgZone) {\n    this.initializeApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationScheduleOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the NotificationScheduleOptions TypeScript interface for configuring local notifications in Capacitor projects. It specifies a range of optional and required properties for controlling notification content, grouping, scheduling, platform-specific behavior (iOS and Android), and metadata attachment. Dependencies include the TypeScript language and Capacitor Notifications plugin; properties like id, title, body, scheduleAt, sound, and others influence both scheduling and display features. Inputs are property assignments compliant with the listed types, and the resulting output shapes the notification's configuration within an app. Platform differences and value constraints (such as Android's 32-bit int id) are documented in the property descriptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationScheduleOptions {\n  /**\n   * The notification identifier. On Android it's a 32-bit int.\n   * So the value should be between -2147483648 and 2147483647 inclusive.\n   */\n  id: number;\n\n  /**\n   * The title of the notification.\n   */\n  title?: string;\n\n  /**\n   * The body of the notification, shown below the title.\n   */\n  body?: string;\n\n  /**\n   * Date to send this notification.\n   */\n  scheduleAt?: Date;\n\n  /**\n   * Name of the audio file to play when this notification is displayed.\n   * Include the file extension with the filename.\n   * On iOS, the file should be in the app bundle. On Android, the file should be in res/raw folder.\n   * Recommended format is `.wav` because is supported by both iOS and Android.\n   * Only available for iOS and Android < 26.\n   * For Android 26+ use channelId of a channel configured with the desired sound.\n   * If the sound file is not found, (i.e. empty string or wrong name) the default system notification sound will be used.\n   * If not provided, it will produce the default sound on Android and no sound on iOS.\n   */\n  sound?: string;\n\n  /**\n   * Associate an action type with this notification.\n   */\n  actionTypeId?: string;\n\n  /**\n   * Used to group multiple notifications. Sets `threadIdentifier` on the `UNMutableNotificationContent`.\n   * Only available for iOS.\n   */\n  threadIdentifier?: string;\n\n  /**\n   * The string this notification adds to the category's summary format string. Sets `summaryArgument` on the `UNMutableNotificationContent`.\n   * Only available for iOS.\n   */\n  summaryArgument?: string;\n\n  /**\n   * Used to group multiple notifications. Calls `setGroup()` on `NotificationCompat.Builder` with the provided value.\n   * Only available for Android.\n   */\n  group?: string;\n\n  /**\n   * If true, this notification becomes the summary for a group of notifications.\n   * Calls `setGroupSummary()` on `NotificationCompat.Builder` with the provided value.\n   * Only available for Android when using `group`.\n   */\n  groupSummary?: string;\n\n  /**\n   * Set extra data to store within this notification.\n   */\n  extra?: any;\n\n  /**\n   * If true, the notification can't be swiped away. Calls `setOngoing()` on `NotificationCompat.Builder`\n   * with the provided value. Only available for Android.\n   */\n  ongoing?: boolean;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Return Method in Java\nDESCRIPTION: Java implementation of a value return method for Android platform using the default @PluginMethod annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void method2(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Logic Using getPlatform\nDESCRIPTION: Shows a practical example of using getPlatform to conditionally execute code based on the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Native Platform Check in Capacitor\nDESCRIPTION: Demonstrates how to check if the app is running on a native platform using isNative property.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNative) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android and iOS Projects to Capacitor\nDESCRIPTION: These commands create the Android and iOS projects for your native application after adding the platform dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions in Capacitor (TypeScript)\nDESCRIPTION: Method to request permission from the user to display local notifications. Returns a PermissionStatus object after the user has made their choice.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on iOS Device with CLI in Bash\nDESCRIPTION: This Bash snippet executes the Capacitor CLI command to build and run a debug build of a Capacitor application on a connected iOS device or simulator. It streamlines the process of testing the app on iOS hardware by automating the build and deploy steps. The prerequisite is that you have already synced your web code and set up your Capacitor iOS project. Expected output is your app running on the device; errors may occur if the device isn\\'t connected or properly configured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Capacitor Plugin in Swift\nDESCRIPTION: This snippet shows how to create a custom Capacitor plugin called EchoPlugin in Swift. It defines a method 'echo' that returns the input value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin, CAPBridgedPlugin {\n    public let identifier = \"EchoPlugin\"\n    public let jsName = \"Echo\"\n    public let pluginMethods: [CAPPluginMethod] = [\n        CAPPluginMethod(name: \"echo\", returnType: CAPPluginReturnPromise)\n    ]\n\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\"value\": value])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Local Notification Permissions - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This function signature for 'requestPermissions' prompts the user to grant permission for displaying local notifications, returning a Promise with a PermissionStatus result. Should be used on first launch or before scheduling notifications. Depends on PermissionStatus type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Checking Native Platform with isNativePlatform\nDESCRIPTION: Demonstrates how to check if the app is running on a native platform (iOS or Android) using isNativePlatform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/web.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting push notification permissions - Capacitor Plugin - TypeScript\nDESCRIPTION: Requests user permission to receive push notifications. Returns a promise resolving to a PermissionStatus object. On iOS, prompts the user as necessary; on Android, always resolves as granted with no prompt. No input parameters and available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Functionality for Capacitor Plugin in Swift\nDESCRIPTION: This code shows how to implement the iOS version of the openMap method in the EchoPlugin.swift file. It uses the @objc annotation and extracts parameters from the CAPPluginCall object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@objc func openMap(_ call: CAPPluginCall) {\n  let latitude = call.getString(\"latitude\")\n  let longitude = call.getNumber(\"longitude\")\n\n  // more logic\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Lock in ScreenOrientation\nDESCRIPTION: This code adds methods to the ScreenOrientation class for locking and unlocking screen orientation. It includes a helper method to convert orientation types to ActivityInfo enumeration values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate int fromOrientationTypeToEnum(String orientationType) {\n   switch (orientationType) {\n       case \"landscape-primary\":\n           return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n       case \"landscape-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;\n       case \"portrait-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;\n       default:\n           // Case: portrait-primary\n           return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n   }\n}\n\npublic void lock(String orientationType) {\n   int orientationEnum = fromOrientationTypeToEnum(orientationType);\n   activity.setRequestedOrientation(orientationEnum);\n}\n\npublic void unlock() {\n   activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Java Package Name for Android in Capacitor Plugin\nDESCRIPTION: Example of updating the package name in Java files for the Android part of the Capacitor plugin. This should match the package ID provided during plugin generation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.plugins.screenorientation\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Core Object in TypeScript\nDESCRIPTION: Shows how to import the global Capacitor object from the core package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Jasmine Testing Implementation\nDESCRIPTION: Example of mocking and testing Capacitor Storage plugin methods using Jasmine, demonstrating spy implementation for get and clear operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/mocking-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    spyOn(Storage, 'get');\n    (Storage.get as any)\n      .withArgs({ key: 'firstName' })\n      .and.returnValue(Promise.resolve({ value: 'Jason' }));\n    (Storage.get as any)\n      .withArgs({ key: 'lastName' })\n      .and.returnValue(Promise.resolve({ value: 'Jones' }));\n\n    fixture.detectChanges();\n    await fixture.whenRenderingDone();\n\n    expect(component.firstName).toEqual('Jason');\n    expect(component.lastName).toEqual('Jones');\n  });\n\n  it('clears the storage', () => {\n    spyOn(Storage, 'clear');\n    click(clear.nativeElement);\n    fixture.detectChanges();\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Getting Current Position with Geolocation\nDESCRIPTION: Example TypeScript code demonstrating how to get the current GPS position using the Geolocation plugin\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Geolocation } from '@capacitor/geolocation';\n\nconst printCurrentPosition = async () => {\n  const coordinates = await Geolocation.getCurrentPosition();\n\n  console.log('Current position:', coordinates);\n};\n```\n\n----------------------------------------\n\nTITLE: Scheduling Local Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript function signature defines the 'schedule' method for registering one or more local notifications using provided schedule options. Returns a promise resolving to a ScheduleResult. Requires ScheduleOptions and related types. Intended for use within Capacitor plugin context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nschedule(options: ScheduleOptions) => Promise<ScheduleResult>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Screen Orientation\nDESCRIPTION: TypeScript method that returns the current screen orientation information as a ScreenOrientationResult object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\norientation() => Promise<ScreenOrientationResult>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Assets for Deep Linking\nDESCRIPTION: JSON configuration to include .well-known directory in Angular build process for deep linking support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"glob\": \"**/*\",\n  \"input\": \"src/.well-known\",\n  \"output\": \".well-known/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SplashScreen Plugin Using CapacitorConfig (TypeScript)\nDESCRIPTION: This TypeScript code configures the Capacitor SplashScreen plugin within a capacitor.config.ts file. It imports required types, defines the CapacitorConfig object with strongly-typed plugin settings, and exports the configuration for runtime use. Useful for projects using TypeScript-based configuration, it enables fine-tuned control over splash appearance and behavior via type-checked properties. Relies on the @capacitor/cli and @capacitor/splash-screen packages.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\\\"@capacitor/splash-screen\\\" />\\n\\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    SplashScreen: {\\n      launchShowDuration: 3000,\\n      launchAutoHide: true,\\n      launchFadeOutDuration: 3000,\\n      backgroundColor: \\\"#ffffffff\\\",\\n      androidSplashResourceName: \\\"splash\\\",\\n      androidScaleType: \\\"CENTER_CROP\\\",\\n      showSpinner: true,\\n      androidSpinnerStyle: \\\"large\\\",\\n      iosSpinnerStyle: \\\"small\\\",\\n      spinnerColor: \\\"#999999\\\",\\n      splashFullScreen: true,\\n      splashImmersive: true,\\n      layoutName: \\\"launch_screen\\\",\\n      useDialog: true,\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Backported Photo Picker Service\nDESCRIPTION: XML configuration to be added to the `<application>` tag in `AndroidManifest.xml` to enable automatic installation of the backported photo picker module via Google Play services on older Android devices. This ensures the Photo Picker component works on devices that don't natively support it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Trigger Google Play services to install the backported photo picker module. -->\n<!--suppress AndroidDomInspection -->\n<service android:name=\"com.google.android.gms.metadata.ModuleDependencies\"\n    android:enabled=\"false\"\n    android:exported=\"false\"\n    tools:ignore=\"MissingClass\">\n    <intent-filter>\n        <action android:name=\"com.google.android.gms.metadata.MODULE_DEPENDENCIES\" />\n    </intent-filter>\n    <meta-data android:name=\"photopicker_activity:0:required\" android:value=\"\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Converting File Paths for Web View Using convertFileSrc\nDESCRIPTION: Demonstrates how to use the convertFileSrc utility to transform device file paths into Web View-friendly paths, ensuring files can be properly accessed across different protocols.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconvertFileSrc: (filePath: string) => string;\n```\n\n----------------------------------------\n\nTITLE: Managing Versions and Build Numbers in TypeScript\nDESCRIPTION: This code snippet shows various operations for managing versions and build numbers for iOS and Android projects using the MobileProject API. It includes setting versions, incrementing builds, and retrieving version information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/automated-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.ios?.setVersion('App', 'Debug', '1.4.5');\nawait project.ios?.incrementBuild('App');\nawait project.ios?.getBuild('App', 'Debug');\nawait project.ios?.getBuild('App', 'Release');\nawait project.android?.setVersionName('1.0.2');\nawait project.android?.getVersionName();\nawait project.android?.setVersionCode(11);\nawait project.android?.getVersionCode();\nawait project.android?.incrementVersionCode();\n```\n\n----------------------------------------\n\nTITLE: Defining Action Sheet API in TypeScript\nDESCRIPTION: TypeScript interface definitions for the Action Sheet API, including the showActions function, ShowActionsOptions, ShowActionsResult, ActionSheetButton, and ActionSheetButtonStyle enum.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshowActions(options: ShowActionsOptions) => Promise<ShowActionsResult>\n\ninterface ShowActionsResult {\n  index: number;\n}\n\ninterface ShowActionsOptions {\n  title: string;\n  message: string;\n  options: ActionSheetButton[];\n}\n\ninterface ActionSheetButton {\n  title: string;\n  style: ActionSheetButtonStyle;\n  icon: string;\n}\n\nenum ActionSheetButtonStyle {\n  Default = 'DEFAULT',\n  Destructive = 'DESTRUCTIVE',\n  Cancel = 'CANCEL'\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum: CameraResultType\nDESCRIPTION: Enum defining possible camera result types including URI, Base64, and DataUrl formats.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraResultType {\n  Uri = 'uri',\n  Base64 = 'base64',\n  DataUrl = 'dataUrl'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK and Dependency Variables\nDESCRIPTION: Updates to variables.gradle file showing changes in SDK versions and dependencies for Capacitor 3 compatibility with Android 11. Includes updates to androidx libraries, testing dependencies, and removal of unused plugin variables.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n ext {\n     minSdkVersion = 21\n-    compileSdkVersion = 29\n-    targetSdkVersion = 29\n+    compileSdkVersion = 30\n+    targetSdkVersion = 30\n+    androidxActivityVersion = '1.2.0'\n-    androidxAppCompatVersion = '1.1.0'\n+    androidxAppCompatVersion = '1.2.0'\n+    androidxCoordinatorLayoutVersion = '1.1.0'\n-    androidxCoreVersion =  '1.2.0'\n-    androidxMaterialVersion =  '1.1.0-rc02'\n-    androidxBrowserVersion =  '1.2.0'\n-    androidxLocalbroadcastmanagerVersion =  '1.0.0'\n-    androidxExifInterfaceVersion = '1.2.0'\n-    firebaseMessagingVersion =  '20.1.2'\n-    playServicesLocationVersion =  '17.0.0'\n+    androidxCoreVersion = '1.3.2'\n+    androidxFragmentVersion = '1.3.0'\n-    junitVersion =  '4.12'\n-    androidxJunitVersion =  '1.1.1'\n-    androidxEspressoCoreVersion =  '3.2.0'\n+    junitVersion = '4.13.1'\n+    androidxJunitVersion = '1.1.2'\n+    androidxEspressoCoreVersion = '3.3.0'\n     cordovaAndroidVersion = '7.0.0'\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Echo Plugin in Java for Capacitor Android\nDESCRIPTION: A simple example of a Capacitor plugin for Android that takes a string value and returns it. This demonstrates the basic structure of a plugin with the @CapacitorPlugin annotation and a method with @PluginMethod annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage android.plugin.test;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Adding Platforms in Capacitor\nDESCRIPTION: Commands to build the project, install iOS and Android dependencies, add native platforms, and sync the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Checking Geolocation Permissions\nDESCRIPTION: TypeScript method to check the current status of location permissions. Will throw an error if system location services are disabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Web Plugin Structure in TypeScript\nDESCRIPTION: This snippet demonstrates the basic structure of a Capacitor web plugin. It shows how to import necessary types, define a class that extends WebPlugin, and implement plugin methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\n\nimport type { EchoPlugin } from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  async echo(options: { value: string }) {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platform with Capacitor CLI\nDESCRIPTION: Command to add either Android or iOS native platform projects to a Capacitor application. The platform parameter is required and must be either 'android' or 'ios'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add <platform>\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientationPlugin in Java\nDESCRIPTION: This snippet shows how to create the ScreenOrientationPlugin class and register it with Capacitor. It defines the plugin methods for orientation, lock, and unlock.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void lock(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void unlock(PluginCall call) {\n       call.resolve();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for the Plugin Interface - TypeScript\nDESCRIPTION: This TypeScript code adds type safety to the plugin interface by defining an EchoPlugin interface for the echo method. This interface specifies the expected options ({ value: string }) and the promise-based response ({ value: string }). By passing EchoPlugin as a generic to registerPlugin, TypeScript ensures correct usage of the plugin in code editors and at compile time. No additional runtime dependencies are required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import { registerPlugin } from '@capacitor/core';\n\n+export interface EchoPlugin {\n+  echo(options: { value: string }): Promise<{ value: string }>;\n+}\n\n-const Echo = registerPlugin('Echo');\n+const Echo = registerPlugin<EchoPlugin>('Echo');\n\n export default Echo;\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific Permissions in Capacitor Annotation in Java\nDESCRIPTION: Illustrates defining a `@Permission` annotation with a specific `alias` (e.g., \"notifications\") but an empty `strings` array. This pattern is used when a permission alias is needed for consistency across platforms (like web or iOS) but does not correspond to any specific runtime permission on Android. Checks for this alias on Android will automatically resolve as 'granted'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Permission(\n    alias = \"notifications\",\n    strings = {}\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Capacitor CLI Basic Command Structure\nDESCRIPTION: The basic command structure for using the Capacitor CLI with optional version and help flags. This shows the standard format for running Capacitor commands using npx.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap [-V] [-h] [<command>]\n```\n\n----------------------------------------\n\nTITLE: Getting Current Text Zoom Level - @capacitor/text-zoom TypeScript\nDESCRIPTION: This TypeScript snippet shows how to retrieve the current zoom level using the get() method of the @capacitor/text-zoom plugin. It's asynchronous and returns a Promise resolving to a GetResult object containing a 'value' property (the zoom level as a decimal). No parameters are required. Outputs the current zoom level. Depends on '@capacitor/text-zoom' as a project dependency.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/text-zoom.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget() => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Initializing Deep Link Routing in Angular\nDESCRIPTION: Implements deep link routing in an Angular app using the Capacitor App API. It listens for the 'appUrlOpen' event and navigates to the appropriate route based on the incoming URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n\nconstructor(private router: Router, private zone: NgZone) {\n    this.initializeApp();\n}\n\ninitializeApp() {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n        this.zone.run(() => {\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = event.url.split(\".app\").pop();\n            if (slug) {\n                this.router.navigateByUrl(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Angular Deep Link Handling\nDESCRIPTION: Imports necessary modules for handling deep links in an Angular application. This includes `Component` and `NgZone` from `@angular/core`, `Router` from `@angular/router` for navigation, and the `App` plugin from `@capacitor/core` to listen for app events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Plugins } from '@capacitor/core';\nconst { App } = Plugins;\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin with TypeScript in capacitor.config.ts (TypeScript)\nDESCRIPTION: TypeScript-based configuration of the keyboard plugin in Capacitor, utilizing proper type imports and enums for settings. The snippet references types for strong typing, sets plugin options such as resize mode and style using enums, and exports the config object for use by the Capacitor CLI. Requires @capacitor/keyboard and @capacitor/cli as dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\nimport { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: KeyboardResize.Body,\n      style: KeyboardStyle.Dark,\n      resizeOnFullScreen: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Initializing Mobile Project with TypeScript\nDESCRIPTION: Demonstrates how to initialize a MobileProject instance with configuration for iOS and Android paths. The code shows setting up the project configuration and loading it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/automated-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MobileProject, MobileProjectConfig } from '@trapezedev/project';\n\n// This takes a MobileProjectConfig\n// to know where the ios and android projects are\nconst config: MobileProjectConfig = {\n  ios: {\n    path: 'ios/App',\n  },\n  android: {\n    path: 'android',\n  },\n};\n\nconst project = new MobileProject(process.cwd(), config);\nawait project.load();\n```\n\n----------------------------------------\n\nTITLE: Installing Camera Capacitor Plugin\nDESCRIPTION: Commands to install the latest version of the @capacitor/camera plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/camera@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Network Status Monitoring Example in TypeScript\nDESCRIPTION: Example showing how to monitor network status changes and get current network status using Capacitor's Network API. Demonstrates listener setup, status checking, and expected response format.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/network.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Network } = Plugins;\n\nlet handler = Network.addListener('networkStatusChange', (status) => {\n  console.log(\"Network status changed\", status);\n});\n// To stop listening:\n// handler.remove();\n\n// Get the current network status\nlet status = await Network.getStatus();\n\n// Example output:\n{\n  \"connected\": true,\n  \"connectionType\": \"wifi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Screen Orientation Plugin with Capacitor using Objective-C\nDESCRIPTION: Objective-C code that registers the ScreenOrientation plugin with Capacitor and defines the available plugin methods using CAP_PLUGIN macros.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(ScreenOrientationPlugin, \"ScreenOrientation\",\n  CAP_PLUGIN_METHOD(orientation, CAPPluginReturnPromise);\n  CAP_PLUGIN_METHOD(lock, CAPPluginReturnPromise);\n  CAP_PLUGIN_METHOD(unlock, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to App URL Open Events with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet describes addListener() usage for the 'appUrlOpen' event, enabling the app to respond to URLs via universal or app links on iOS/Android. Dependencies: Capacitor App plugin. Parameters: eventName ('appUrlOpen'), listener function. Output: PluginListenerHandle Promise. Since 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'appUrlOpen', listenerFunc: URLOpenListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: writeFile API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `writeFile` method of the Capacitor Filesystem API. This asynchronous function writes data to a file on disk based on the provided `WriteFileOptions` and returns a Promise resolving to a `WriteFileResult` containing the file URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwriteFile(options: WriteFileOptions) => Promise<WriteFileResult>\n```\n\n----------------------------------------\n\nTITLE: Using CapacitorHttp for GET and POST Requests\nDESCRIPTION: Example of making GET and POST requests using the CapacitorHttp plugin in TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/http.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorHttp } from '@capacitor/core';\n\n// Example of a GET request\nconst doGet = () => {\n  const options = {\n    url: 'https://example.com/my/api',\n    headers: { 'X-Fake-Header': 'Fake-Value' },\n    params: { size: 'XL' },\n  };\n\n  const response: HttpResponse = await CapacitorHttp.get(options);\n\n  // or...\n  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })\n};\n\n// Example of a POST request. Note: data\n// can be passed as a raw JS Object (must be JSON serializable)\nconst doPost = () => {\n  const options = {\n    url: 'https://example.com/my/api',\n    headers: { 'X-Fake-Header': 'Fake-Value' },\n    data: { foo: 'bar' },\n  };\n\n  const response: HttpResponse = await CapacitorHttp.post(options);\n\n  // or...\n  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Types in TypeScript\nDESCRIPTION: This code snippet defines the PluginsConfig interface, which includes configuration options for Capacitor plugins, including specific settings for CapacitorCookies and CapacitorHttp plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/config.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginsConfig {\n  [key: string]:\n    | {\n        [key: string]: any;\n      }\n    | undefined;\n\n  CapacitorCookies?: {\n    enabled?: boolean;\n  };\n\n  CapacitorHttp?: {\n    enabled?: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for a Native Platform at Runtime - TypeScript\nDESCRIPTION: This snippet uses 'isNativePlatform' from Capacitor to check if the current runtime is native (iOS or Android). '@capacitor/core' must be available. The function returns a boolean: true for native platforms, false otherwise. This is useful for splitting logic between native and web environments. Limitation: Does not distinguish between iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Style with Capacitor (TypeScript)\nDESCRIPTION: Defines the setStyle method signature. Accepts a StyleOptions object to set the appearance of the status bar. Returns a Promise. Requires @capacitor/status-bar to be available. Used for customizing the text style (dark/light/default) depending on device theme and OS. No return on completion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetStyle(options: StyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Querying and Listening to Network Status - Capacitor Network Plugin - TypeScript\nDESCRIPTION: Provides an example in TypeScript for how to import, listen for network status changes, and query the current network status using the Capacitor Network API. Requires the @capacitor/network plugin installed and a compatible Capacitor application setup. The 'addListener' method attaches a callback for network changes, and the 'getStatus' async function retrieves the current network state. Expected input is none, and output is logged to the console; limitations include the necessity to run within a supported Capacitor environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/network.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Network } from '@capacitor/network';\n\nNetwork.addListener('networkStatusChange', status => {\n  console.log('Network status changed', status);\n});\n\nconst logCurrentNetworkStatus = async () => {\n  const status = await Network.getStatus();\n\n  console.log('Network status:', status);\n};\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with BackgroundRunner API in TypeScript\nDESCRIPTION: This TypeScript snippet displays the function signature for `dispatchEvent()`. This method allows the main application thread to send an event, along with optional data (`details`), to a specific background runner identified by its `label`. The runner must have a listener registered for the specified `event` name. The generic type `T` represents the expected return type from the runner, defaulting to `void`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndispatchEvent<T = void>(options: DispatchEventOptions) => any\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Capacitor\nDESCRIPTION: Method to perform HTTP file downloads with specified options. Returns a promise with download results.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndownloadFile(options: DownloadFileOptions) => Promise<DownloadFileResult>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notification Plugin in capacitor.config.ts - TypeScript\nDESCRIPTION: This TypeScript configuration demonstrates how to set default notification options using the CapacitorConfig type. It's meant for projects using a TypeScript config (capacitor.config.ts). Requires importing { CapacitorConfig } from '@capacitor/cli' and referencing @capacitor/local-notifications types for accurate IntelliSense. Properties include 'smallIcon', 'iconColor', and 'sound'. File must export the config object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\\\"@capacitor/local-notifications\\\" />\\n\\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    LocalNotifications: {\\n      smallIcon: \\\"ic_stat_icon_config_sample\\\",\\n      iconColor: \\\"#488AFF\\\",\\n      sound: \\\"beep.wav\\\",\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Notifications - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Shows the TypeScript declaration for retrieving a list of pending local notifications via the Capacitor plugin. Requires the plugin to be installed and initialized. This method takes no arguments and returns a Promise that resolves to a PendingResult object containing details about scheduled but not yet delivered notifications. Inputs: none. Outputs: Promise with pending notifications data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetPending() => Promise<PendingResult>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Methods in Web Plugin\nDESCRIPTION: Shows how to add permission checking and requesting methods to a Capacitor web plugin implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync checkPermissions(): Promise<PermissionStatus> {\n  if (typeof navigator === 'undefined' || !navigator.permissions) {\n    throw this.unavailable('Permissions API not available in this browser.');\n  }\n\n  const permission = await navigator.permissions.query( ... );\n\n  // TODO\n}\n```\n\n----------------------------------------\n\nTITLE: Registering 'pushNotificationReceived' event listener - Capacitor Plugin - TypeScript\nDESCRIPTION: Registers a listener invoked when a push notification is received by the device. The callback receives a PushNotificationSchema object describing the notification. Returns a promise and listener handle for management. This enables real-time response to incoming notifications in the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationReceived', listenerFunc: (notification: PushNotificationSchema) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Android Package\nDESCRIPTION: Command to install the @capacitor/android package via npm\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Angular Component Constructor\nDESCRIPTION: Injects the Angular `Router` for navigation and `NgZone` for running code within Angular's execution context into the component's constructor. It also calls the `initializeApp` method to set up the deep link listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private router: Router, private zone: NgZone) {\n    this.initializeApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Markers from Google Maps\nDESCRIPTION: Removes multiple markers from the map using their IDs. Returns a Promise that resolves when all markers have been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarkers(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Mounting the Main Vue Application with Router (TypeScript)\nDESCRIPTION: This snippet demonstrates mounting the main Vue application with the router included, which is required for deep linking functionality. The Vue instance uses the router and is mounted to the DOM at the element with ID 'app'. There are no direct parameters; the router must be configured first. Enables reactive navigation in response to deep links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst VueApp = new Vue({\n  router,\n}).$mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Details with Keytool - Shell\nDESCRIPTION: This command displays verbose details for a given keystore file, including all certificate fingerprints necessary for deep link site association. It requires the existing keystore (e.g., my-release-key.keystore). Outputs include the SHA256 fingerprint needed for assetlinks.json generation. Make sure you have permission to access the specified keystore.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore my-release-key.keystore\n```\n\n----------------------------------------\n\nTITLE: Share API Method Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for the Share API's share method. It shows that the method accepts a ShareOptions object and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/share.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshare(options: ShareOptions) => Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Adding Polylines to Google Maps in TypeScript\nDESCRIPTION: Adds multiple polylines to the Google Map instance and returns a promise with an array of polyline IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\naddPolylines(polylines: Polyline[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Listening to Custom Capacitor Plugin Events in TypeScript\nDESCRIPTION: Demonstrates how to register an event listener in TypeScript for a custom event (`myPluginEvent`) emitted by a Capacitor plugin (`MyPlugin`) using its `addListener` method. The provided callback function executes when the event is fired, receiving optional event data. Requires an instance of the Capacitor plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Resume Events with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet shows how to set up an event listener for 'resume' events on the app/activity using addListener(). Listens for foreground events after the app resumes. Handles iOS, Android, and web specifically. Dependencies: Capacitor App plugin. Parameters: eventName ('resume'), listener function. Output: PluginListenerHandle Promise. Since 4.1.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'resume', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Barcode Scanner Plugin (Bash)\nDESCRIPTION: These commands install the `@capacitor/barcode-scanner` npm package and then synchronize the native project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/barcode-scanner\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Sheet in TypeScript\nDESCRIPTION: Example showing how to create and display an action sheet with multiple options including upload, share, and remove actions. Demonstrates usage of ActionSheetButtonStyle for styling options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';\n\nconst showActions = async () => {\n  const result = await ActionSheet.showActions({\n    title: 'Photo Options',\n    message: 'Select an option to perform',\n    options: [\n      {\n        title: 'Upload',\n      },\n      {\n        title: 'Share',\n      },\n      {\n        title: 'Remove',\n        style: ActionSheetButtonStyle.Destructive,\n      },\n    ],\n  });\n\n  console.log('Action Sheet result:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting, Getting, and Removing a Preference Using Capacitor (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates the use of Capacitor's Preferences API for setting, retrieving, and removing a simple string value associated with a key. It imports the Preferences object, defines three asynchronous functions—setName, checkName, and removeName—each executing the 'set', 'get', and 'remove' methods respectively. These functions show how to store a value persistently, fetch it for use (logging it to the console), and delete the value. Dependencies include @capacitor/preferences, and the functions require an environment set up to support ES modules and async/await.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/preferences.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\\n\\nconst setName = async () => {\\n  await Preferences.set({\\n    key: 'name',\\n    value: 'Max',\\n  });\\n};\\n\\nconst checkName = async () => {\\n  const { value } = await Preferences.get({ key: 'name' });\\n\\n  console.log(`Hello ${value}!`);\\n};\\n\\nconst removeName = async () => {\\n  await Preferences.remove({ key: 'name' });\\n};\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `downloadFile` method signature in TypeScript for the Capacitor Filesystem API. This asynchronous function performs an HTTP request to download a file from a given URL to a specified local destination. It takes `DownloadFileOptions` (including URL, path, directory) and returns a Promise resolving to `DownloadFileResult` containing information about the downloaded file. Available since version 5.1.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndownloadFile(options: DownloadFileOptions) => Promise<DownloadFileResult>\n```\n\n----------------------------------------\n\nTITLE: Complete Angular HomePage Component for Push Notifications (TypeScript)\nDESCRIPTION: Provides the full source code for the `home.page.ts` Angular component. It includes component decorators, imports for Angular Core and Capacitor Push Notifications, and the `ngOnInit` method implementing the logic for requesting permissions, registering for push notifications, and setting up event listeners for various notification events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\n\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    PushNotifications.addListener('registration', (token: Token) => {\n      alert('Push registration success, token: ' + token.value);\n    });\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener(\n      'pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      },\n    );\n\n    PushNotifications.addListener(\n      'pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      },\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in Angular with Capacitor App API\nDESCRIPTION: This snippet demonstrates how to set up deep link handling in an Angular app using the Capacitor App API. It listens for the 'appUrlOpen' event and routes the app to the appropriate page based on the incoming URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n\nconstructor(private router: Router, private zone: NgZone) {\n    this.initializeApp();\n}\n\ninitializeApp() {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n        this.zone.run(() => {\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = event.url.split(\".app\").pop();\n            if (slug) {\n                this.router.navigateByUrl(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: API Definition: watchPosition Method (TypeScript)\nDESCRIPTION: TypeScript signature for the `watchPosition` method. It takes `PositionOptions` for configuration and a `WatchPositionCallback` function to handle location updates. It returns a Promise resolving to a `CallbackID` (string) which identifies the watch and can be used later with `clearWatch`. Note that this function can consume significant battery.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwatchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>\n```\n\n----------------------------------------\n\nTITLE: Creating XML Privacy Manifest for iOS Apps Using UserDefaults API\nDESCRIPTION: A sample PrivacyInfo.xcprivacy XML file that declares usage of the UserDefaults API through the @capacitor/preferences plugin. The file sets NSPrivacyTracking to false, specifies NSPrivacyAccessedAPIType as UserDefaults with reason code CA92.1, and includes an empty tracking domains array.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/privacy-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyTracking</key>\n    <false/>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>CA92.1</string>\n        </array>\n      </dict>\n    </array>\n    <key>NSPrivacyTrackingDomains</key>\n    <array/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Handling iOS Version Compatibility with Unavailable Error\nDESCRIPTION: Demonstrates how to throw an 'unavailable' error when a plugin method requires a newer iOS version than what's available on the user's device. This pattern gracefully handles feature availability across different iOS versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatUsesNewIOSFramework(_ call: CAPPluginCall) {\n    if #available(iOS 14, *) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available in iOS 13 or earlier.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Filesystem Permissions in Capacitor with TypeScript\nDESCRIPTION: Function to check read/write permissions for the Filesystem plugin. Required on Android when using Directory.Documents or Directory.ExternalStorage. Returns a Promise with the current permission status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Assets for Deep Linking\nDESCRIPTION: JSON configuration to include .well-known directory in Angular build process for deep linking support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"glob\": \"**/*\",\n  \"input\": \"src/.well-known\",\n  \"output\": \".well-known/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenOrientationPlugin Interface in TypeScript\nDESCRIPTION: This code snippet defines the ScreenOrientationPlugin interface with methods for getting orientation, locking/unlocking orientation, and adding/removing listeners for orientation changes. It uses TypeScript types for strong typing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/designing-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface ScreenOrientationPlugin {\n  /**\n   * Returns the screen's current orientation.\n   */\n  orientation(): Promise<{ type: OrientationType }>;\n\n  /**\n   * Locks the screen orientation.\n   */\n  lock(opts: { orientation: OrientationLockType }): Promise<void>;\n\n  /**\n   * Unlocks the screen's orientation.\n   */\n  unlock(): Promise<void>;\n\n  /**\n   * Listens for screen orientation changes.\n   */\n  addListener(\n    eventName: 'screenOrientationChange',\n    listenerFunc: (orientation: { type: OrientationType }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners\n   */\n  removeAllListeners(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadFileResult Interface in TypeScript\nDESCRIPTION: Defines the result structure returned by the `downloadFile` operation in the Capacitor Filesystem API. It includes the local path where the file was saved and, on the web platform, the downloaded data as a Blob.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBlob\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Migration Command\nDESCRIPTION: Command to execute the Capacitor migration utility that automatically handles the migration process from v4 to v5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Schedule Properties in Markdown\nDESCRIPTION: This snippet defines the properties available for scheduling local notifications in Capacitor. It includes options for one-time and recurring notifications, as well as platform-specific features for iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                 | Type                                                    | Description                                                                                                                                                                                                                                                                                                                             | Since |\n| -------------------- | ------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`at`**             | <code><a href=\"#date\">Date</a></code>                   | <a href=\"#schedule\">Schedule</a> a notification at a specific date and time.                                                                                                                                                                                                                                                            | 1.0.0 |\n| **`repeats`**        | <code>boolean</code>                                    | Repeat delivery of this notification at the date and time specified by `at`. Only available for iOS and Android.                                                                                                                                                                                                                        | 1.0.0 |\n| **`allowWhileIdle`** | <code>boolean</code>                                    | Allow this notification to fire while in [Doze](https://developer.android.com/training/monitoring-device-state/doze-standby) Only available for Android 23+. Note that these notifications can only fire [once per 9 minutes, per app](https://developer.android.com/training/monitoring-device-state/doze-standby#assessing_your_app). | 1.0.0 |\n| **`on`**             | <code><a href=\"#scheduleon\">ScheduleOn</a></code>       | <a href=\"#schedule\">Schedule</a> a notification on particular interval(s). This is similar to scheduling [cron](https://en.wikipedia.org/wiki/Cron) jobs. Only available for iOS and Android.                                                                                                                                           | 1.0.0 |\n| **`every`**          | <code><a href=\"#scheduleevery\">ScheduleEvery</a></code> | <a href=\"#schedule\">Schedule</a> a notification on a particular interval.                                                                                                                                                                                                                                                               | 1.0.0 |\n| **`count`**          | <code>number</code>                                     | Limit the number times a notification is delivered by the interval specified by `every`.                                                                                                                                                                                                                                                | 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Capacitor Clipboard `read` Method Signature\nDESCRIPTION: Defines the TypeScript signature for the `read` method of the Capacitor Clipboard API. This asynchronous method takes no arguments and returns a Promise that resolves with an object conforming to the `ReadResult` interface, containing the `type` and `value` read from the system clipboard.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/clipboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nread() => Promise<ReadResult>\n```\n\n----------------------------------------\n\nTITLE: Enumerating GeolocationPermissionType Union in TypeScript\nDESCRIPTION: Specifies the possible geolocation permission types required or used by the plugin as string literal union 'location' or 'coarseLocation'. This alias allows function parameters and interfaces to accept only supported permission type strings, improving type safety. It is used in permission specification and request logic; no additional dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'location' | 'coarseLocation'\n```\n\n----------------------------------------\n\nTITLE: Getting Delivered (Visible) Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This function signature for 'getDeliveredNotifications' defines a method to retrieve notifications that are currently visible to the user. It returns a Promise with a DeliveredNotifications result. Requires DeliveredNotifications type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<DeliveredNotifications>\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Successful Registration in Capacitor (TypeScript)\nDESCRIPTION: Adds an event listener that is triggered when the push notification registration completes successfully. The listener function receives the push notification `Token` (containing the device token). Returns a Promise that resolves with a `PluginListenerHandle` which can be used to remove the listener later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registration', listenerFunc: (token: Token) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Writing to Clipboard API Definition\nDESCRIPTION: API definition for the write method which allows copying content to the clipboard. Supports writing strings, images as Data URLs, and URL strings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/clipboard.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwrite(options: WriteOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Plugin Methods in TypeScript\nDESCRIPTION: Defines a TypeScript interface `MyPlugin` demonstrating three types of plugin methods: `method1` (void return), `method2` (value return), and `method3` (callback). It also includes supporting type definitions `CallbackID`, `MyData`, and `MyPluginCallback`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CallbackID = string;\n\nexport interface MyData {\n  data: string;\n}\n\nexport type MyPluginCallback = (message: MyData | null, err?: any) => void;\n\nexport interface MyPlugin {\n  method1(): Promise<void>;\n  method2(): Promise<MyData>;\n  method3(callback: MyPluginCallback): Promise<CallbackID>;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Block-Based API\nDESCRIPTION: This example shows how to implement the requestPermissions() method using a block-based API for requesting video capture permissions and then checking the status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in\n        self?.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Registration Listener - TypeScript\nDESCRIPTION: Adds listener for successful push notification registration, providing the push notification token.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registration', listenerFunc: (token: Token) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Keys from Capacitor Preferences in TypeScript\nDESCRIPTION: API definition for the `keys` method. This asynchronous function fetches a list of all keys currently present in the persistent store. It takes no arguments. Returns a Promise resolving to a `KeysResult` object, which contains an array of strings representing the stored keys.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkeys() => Promise<KeysResult>\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Events in Background Runner (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the Capacitor Background Runner plugin to listen for `WatchConnectivity_didReceiveUserInfo` events. This allows the main application to receive data (like commands triggered by button presses on the watch) sent from the watch while the phone app is in the background.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"WatchConnectivity_didReceiveUserInfo\", (args) => {\n  console.log(args.message.jsCommand);\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map Instance with TypeScript\nDESCRIPTION: Shows the core process of creating a map instance. It involves importing the `GoogleMap` class, obtaining a reference to the `<capacitor-google-map>` DOM element, and calling the static `GoogleMap.create()` method. This method requires an options object containing a unique `id` for the map, the `element` reference, the `apiKey`, and a `config` object specifying initial `center` coordinates (latitude, longitude) and `zoom` level.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\nconst apiKey = 'YOUR_API_KEY_HERE';\n\nconst mapRef = document.getElementById('map');\n\nconst newMap = await GoogleMap.create({\n  id: 'my-map', // Unique identifier for this map instance\n  element: mapRef, // reference to the capacitor-google-map element\n  apiKey: apiKey, // Your Google Maps API Key\n  config: {\n    center: {\n      // The initial position to be rendered by the map\n      lat: 33.6,\n      lng: -117.9,\n    },\n    zoom: 8, // The initial zoom level to be rendered by the map\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Device Language Tag - Capacitor Device - TypeScript\nDESCRIPTION: This TypeScript function signature documents getLanguageTag, which asynchronously retrieves the device's IETF BCP 47 language tag as a LanguageTag object. The returned Promise resolves to the canonicalized language tag string value. This function is useful for fine-grained locale handling and requires the @capacitor/device dependency. No input parameters; outputs are provided via the resolved object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageTag() => Promise<LanguageTag>\n```\n\n----------------------------------------\n\nTITLE: Implementing `checkPermissions` with Browser API Check (TypeScript Diff)\nDESCRIPTION: This diff snippet demonstrates implementing the `checkPermissions` method in the web plugin. It includes a crucial feature detection step: checking if `navigator.permissions` (the Web Permissions API) is available. If not, it throws an `unavailable` error using `this.unavailable()`. Otherwise, it proceeds to query the permission status (implementation marked as TODO).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n async checkPermissions(): Promise<PermissionStatus> {\n+  if (typeof navigator === 'undefined' || !navigator.permissions) {\n+    throw this.unavailable('Permissions API not available in this browser.');\n+  }\n\n   const permission = await navigator.permissions.query( ... );\n\n   // TODO\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in build.gradle\nDESCRIPTION: Updates the compileSdkVersion and targetSdkVersion from 32 to 33 in the Android build configuration\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 32\n+    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 32\n+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Call Data in Swift for Capacitor iOS\nDESCRIPTION: Shows how to access different types of data passed to a plugin method, including optional values and required values using guard statements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBool(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Plugin\nDESCRIPTION: Commands for installing the published plugin in a Capacitor application. This installs the npm package and syncs the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor-community/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using convertFileSrc with Filesystem Operations\nDESCRIPTION: Demonstrates a practical example of using convertFileSrc to convert a device file path to a web-friendly URL after saving a file to the device's filesystem.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\n----------------------------------------\n\nTITLE: Defining Permission States for Notifications in TypeScript\nDESCRIPTION: Defines a TypeScript type alias `PermissionState` representing the possible states of notification permissions as reported by the Capacitor plugin. It includes string literal values: 'prompt' (permission not yet requested), 'prompt-with-rationale' (requires showing rationale before requesting), 'granted' (permission explicitly given), and 'denied' (permission explicitly refused). This type is used in the `PermissionStatus` interface to indicate the current notification reception permission.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n'prompt' | 'prompt-with-rationale' | 'granted' | 'denied'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Information - Capacitor Device - TypeScript\nDESCRIPTION: This snippet is the TypeScript function signature for Device.getInfo, which asynchronously returns a Promise of a DeviceInfo object. This API exposes properties such as device name, model, platform, operating system, OS version, manufacturer, emulator status, memory usage, and disk capacity. It requires the @capacitor/device plugin. No inputs are taken, and outputs are delivered via a resolved Promise containing all the relevant hardware and platform metadata.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<DeviceInfo>\n```\n\n----------------------------------------\n\nTITLE: Implementing New Method in TypeScript Interface for Capacitor Plugin\nDESCRIPTION: This snippet demonstrates how to add a new method signature to the plugin's TypeScript interface in the definitions.ts file. It includes adding the openMap method and defining an interface for its parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  openMap(options: OpenMapOptions): Promise<void>;\n}\n\nexport interface OpenMapOptions {\n  latitude: number;\n  longitude: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Geolocation API Method Signatures\nDESCRIPTION: TypeScript interface definitions for the Geolocation plugin's core methods including getCurrentPosition, watchPosition, and clearWatch\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>\n\nwatchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>\n\nclearWatch(options: ClearWatchOptions) => Promise<void>\n\ncheckPermissions() => Promise<PermissionStatus>\n\nrequestPermissions(permissions?: GeolocationPluginPermissions | undefined) => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Initializing MobileProject in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a MobileProject instance using the @trapezedev/project library. It sets up the configuration for iOS and Android project paths and loads the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/automated-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MobileProject, MobileProjectConfig } from '@trapezedev/project';\n\n// This takes a MobileProjectConfig\n// to know where the ios and android projects are\nconst config: MobileProjectConfig = {\n  ios: {\n    path: 'ios/App',\n  },\n  android: {\n    path: 'android',\n  },\n};\n\nconst project = new MobileProject(process.cwd(), config);\nawait project.load();\n```\n\n----------------------------------------\n\nTITLE: Disabling Jetifier for Capacitor 5\nDESCRIPTION: Removing the Jetifier configuration from gradle.properties when updating to Capacitor 5, as it's no longer needed if all plugins use AndroidX.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n# gradle.properties\n\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n- # Automatically convert third-party libraries to use AndroidX\n- android.enableJetifier=true\n```\n\n----------------------------------------\n\nTITLE: ActionType Interface Definition\nDESCRIPTION: Defines the structure for notification action types including iOS-specific configuration options. Contains properties for action identification, associated actions list, and various iOS notification category settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionType {\n  id: string;\n  actions: Action[];\n  iosHiddenPreviewsBodyPlaceholder?: string;\n  iosCustomDismissAction?: boolean;\n  iosAllowInCarPlay?: boolean;\n  iosHiddenPreviewsShowTitle?: boolean;\n  iosHiddenPreviewsShowSubtitle?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Plugin Methods\nDESCRIPTION: Implements the core functionality methods for the Screen Orientation plugin including orientation checking, locking, and unlocking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n async orientation(): Promise<{ type: OrientationType }> {\n   return { type: window.screen.orientation.type };\n }\n\n async lock(opts: { orientation: OrientationLockType }): Promise<void> {\n   await window.screen.orientation.lock(opts.orientation);\n }\n\n async unlock(): Promise<void> {\n   window.screen.orientation.unlock();\n }\n```\n\n----------------------------------------\n\nTITLE: Using Haptics API in TypeScript\nDESCRIPTION: Example demonstrating various haptic feedback functions including impact, vibration, and selection events using the @capacitor/haptics plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/haptics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\nconst hapticsImpactMedium = async () => {\n  await Haptics.impact({ style: ImpactStyle.Medium });\n};\n\nconst hapticsImpactLight = async () => {\n  await Haptics.impact({ style: ImpactStyle.Light });\n};\n\nconst hapticsVibrate = async () => {\n  await Haptics.vibrate();\n};\n\nconst hapticsSelectionStart = async () => {\n  await Haptics.selectionStart();\n};\n\nconst hapticsSelectionChanged = async () => {\n  await Haptics.selectionChanged();\n};\n\nconst hapticsSelectionEnd = async () => {\n  await Haptics.selectionEnd();\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Angular HomePage Component with Capacitor Push Notifications\nDESCRIPTION: Provides the full TypeScript code for the `home.page.ts` file. It includes imports for Angular's `Component` and `OnInit`, imports for Capacitor's Push Notification API, and the `ngOnInit` method implementation that requests permissions, registers for notifications, and listens for push-related events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\n\nimport {\n  Plugins,\n  PushNotification,\n  PushNotificationToken,\n  PushNotificationActionPerformed,\n} from '@capacitor/core';\n\nconst { PushNotifications } = Plugins;\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermission().then(result => {\n      if (result.granted) {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    PushNotifications.addListener(\n      'registration',\n      (token: PushNotificationToken) => {\n        alert('Push registration success, token: ' + token.value);\n      },\n    );\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener(\n      'pushNotificationReceived',\n      (notification: PushNotification) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      },\n    );\n\n    PushNotifications.addListener(\n      'pushNotificationActionPerformed',\n      (notification: PushNotificationActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      },\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Echo Plugin JavaScript Interface\nDESCRIPTION: Demonstrates how to create the JavaScript interface for the Echo plugin using registerPlugin from @capacitor/core, including TypeScript type definitions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n}\n\nconst Echo = registerPlugin<EchoPlugin>('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Using Action Sheet with TypeScript\nDESCRIPTION: Example of showing an action sheet with various options including a destructive action. The result contains the index of the selected option.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';\n\nconst showActions = async () => {\n  const result = await ActionSheet.showActions({\n    title: 'Photo Options',\n    message: 'Select an option to perform',\n    options: [\n      {\n        title: 'Upload',\n      },\n      {\n        title: 'Share',\n      },\n      {\n        title: 'Remove',\n        style: ActionSheetButtonStyle.Destructive,\n      },\n    ],\n  });\n\n  console.log('Action Sheet result:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Plugin in Java\nDESCRIPTION: Creates a basic Capacitor plugin that echoes back a string value passed from JavaScript. The plugin demonstrates the basic structure of a Capacitor plugin including the necessary annotations and method implementations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Capacitor Plugin\nDESCRIPTION: Commands to install the Toast Capacitor plugin and synchronize the native project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/toast\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Opening a URL with Capacitor Browser in TypeScript\nDESCRIPTION: Example of how to use the Browser.open() method to open a URL in the in-app browser.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browser } from '@capacitor/browser';\n\nconst openCapacitorSite = async () => {\n  await Browser.open({ url: 'http://capacitorjs.com/' });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Facade Pattern in Java for Capacitor Local Notifications Plugin\nDESCRIPTION: This snippet showcases the Facade design pattern used in the Local Notifications plugin for Capacitor. It demonstrates how complex subsystems are simplified into a single interface, making it easier to manage and use the plugin's functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n    super.load();\n    notificationStorage = new NotificationStorage(getContext());\n    manager = new LocalNotificationManager( … );\n    manager.createNotificationChannel();\n    notificationChannelManager = new NotificationChannelManager(getActivity());\n    staticBridge = this.bridge;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Files with Capacitor Filesystem in TypeScript\nDESCRIPTION: Function to rename a file or directory using Capacitor's Filesystem plugin. Takes RenameOptions as input and returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrename(options: RenameOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Presenting View Controllers in Capacitor iOS\nDESCRIPTION: Shows how to present custom view controllers over the main Capacitor view controller, including handling for iPad devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nDispatchQueue.main.async {\n  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nself.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Components in a Capacitor Application\nDESCRIPTION: Example demonstrating how to use alert, confirm, and prompt dialogs in a Capacitor application. Shows handling of user responses including confirmation values and prompt inputs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from '@capacitor/dialog';\n\nconst showAlert = async () => {\n  await Dialog.alert({\n    title: 'Stop',\n    message: 'this is an error',\n  });\n};\n\nconst showConfirm = async () => {\n  const { value } = await Dialog.confirm({\n    title: 'Confirm',\n    message: `Are you sure you'd like to press the red button?`,\n  });\n\n  console.log('Confirmed:', value);\n};\n\nconst showPrompt = async () => {\n  const { value, cancelled } = await Dialog.prompt({\n    title: 'Hello',\n    message: `What's your name?`,\n  });\n\n  console.log('Name:', value);\n  console.log('Cancelled:', cancelled);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface for iOS-specific configuration options in Capacitor including content inset behavior, scroll settings, linking flags, and build options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncontentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';\nscrollEnabled?: boolean;\ncordovaLinkerFlags?: string[];\nallowsLinkPreview?: boolean;\nloggingBehavior?: 'none' | 'debug' | 'production';\nincludePlugins?: string[];\nlimitsNavigationsToAppBoundDomains?: boolean;\npreferredContentMode?: 'recommended' | 'desktop' | 'mobile';\nhandleApplicationNotifications?: boolean;\nwebContentsDebuggingEnabled?: boolean;\ninitialFocus?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining EventListenerOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the EventListenerOptions interface with its capture property. This option is used when adding or removing event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventListenerOptions {\n  capture: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Traffic Layer for Google Maps in TypeScript\nDESCRIPTION: Enables or disables the traffic layer for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nenableTrafficLayer(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listening for Hardware Back Button Events in Capacitor (TypeScript)\nDESCRIPTION: Registers a listener function for the 'backButton' event, specific to Android hardware back button presses. Attaching a listener overrides the default back button behavior, requiring manual implementation of navigation (e.g., using `window.history.back()`) or app exit (`App.exitApp()`) within the listener function. The function returns a Promise resolving to a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'backButton', listenerFunc: BackButtonListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor React Hooks in a Function Component\nDESCRIPTION: This example demonstrates how to import and use Capacitor React hooks in a function component. It shows the usage of the useFilesystem hook to read a file asynchronously within a useEffect hook.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/react-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';\n\nconst MyComponent = () => (\n  const { readFile } = useFilesystem();\n\n  useEffect(() => {\n    const readMyFile = async () => {\n      const file = await readFile({\n        path: filepath,\n        directory: FilesystemDirectory.Data\n      });\n      // ...\n    }\n\n    readMyFile();\n  }, [ readFile ]);\n```\n\n----------------------------------------\n\nTITLE: Copying Files/Directories with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `copy` method signature in TypeScript for the Capacitor Filesystem API. This asynchronous function copies a file or directory. It requires `CopyOptions` specifying source and destination paths/directories and returns a Promise resolving to `CopyResult` upon completion. Available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncopy(options: CopyOptions) => Promise<CopyResult>\n```\n\n----------------------------------------\n\nTITLE: Setting Android Permissions for Filesystem Access\nDESCRIPTION: XML configuration to add required permissions to Android manifest for accessing external storage. These permissions are needed for Directory.Documents or Directory.ExternalStorage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Registering the Screen Orientation Plugin with Capacitor\nDESCRIPTION: Code for registering the Screen Orientation plugin with Capacitor. This snippet uses registerPlugin from @capacitor/core to create a plugin instance that links to the native implementation code, making the plugin accessible throughout the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/designing-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nimport type { ScreenOrientationPlugin } from './definitions';\n\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>('ScreenOrientation');\n\nexport * from './definitions';\nexport { ScreenOrientation };\n```\n\n----------------------------------------\n\nTITLE: Creating an Android Notification Channel in Capacitor (TypeScript)\nDESCRIPTION: Creates a notification channel on Android. This is required for displaying notifications on Android Oreo (SDK 26) and newer. The `channel` parameter must conform to the `Channel` interface. Returns a Promise that resolves when the channel creation is attempted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Style - TypeScript\nDESCRIPTION: Defines the TypeScript signature for setStyle, which sets the current style of the status bar using a StyleOptions object. The method returns a Promise and must be invoked with an object specifying the style (Dark, Light, or Default). Use in environments where @capacitor/status-bar is available and ensure options conform to StyleOptions interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetStyle(options: StyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Android Flavor in Capacitor Config - TypeScript\nDESCRIPTION: This snippet shows how to specify the Android product flavor to use when building your Capacitor app by setting the 'flavor' property within the exported configuration object (capacitor.config.ts). Set the value to the desired flavor ('qa' or 'dev'), ensuring the CLI uses the correct Gradle build variant.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nandroid: {\n   flavor: \"qa\",\n },\n```\n\n----------------------------------------\n\nTITLE: Adding Supported Orientations Method to AppDelegate in Swift\nDESCRIPTION: This snippet adds a method to the AppDelegate class to define supported interface orientations for the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n    return ScreenOrientationPlugin.supportedOrientations\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Capacitor Android Package\nDESCRIPTION: Command to update the Capacitor Android library to version 2 using npm. After installation, the Android project needs to be synced with Gradle files in Android Studio.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/updating.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android@2\n```\n\n----------------------------------------\n\nTITLE: Capacitor Cordova Preferences Configuration in TypeScript\nDESCRIPTION: Example of setting Cordova plugin preferences in capacitor.config.ts file using TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CapacitorConfig = {\n  cordova: {\n    preferences: {\n      DisableDeploy: 'false',\n      CameraUsesGeolocation: 'true',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using isNativePlatform in TypeScript\nDESCRIPTION: Shows the type signature and an example of the `isNativePlatform` function. It returns a boolean indicating whether the app is running on a native platform (iOS or Android), useful for executing native-only code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/web.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisNativePlatform: () => boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/geolocation Plugin via npm\nDESCRIPTION: Installs the Capacitor Geolocation plugin using npm and then syncs the native iOS and Android projects with the Capacitor configuration using npx cap sync.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/geolocation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Echo Plugin in Swift\nDESCRIPTION: Defines a simple Capacitor iOS plugin named `EchoPlugin` in Swift. It extends `CAPPlugin` and includes an `echo` method exposed to Objective-C via `@objc`. This method retrieves a string value named \"value\" from the plugin call (`CAPPluginCall`), provides a default empty string if not found, and returns the received value back to the JavaScript caller within a dictionary using `call.resolve()`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.resolve([\n        \"value\": value\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Key-Value Storage in Capacitor TypeScript\nDESCRIPTION: Demonstrates how to use Capacitor's Storage API to store and retrieve JSON data using key-value pairs. Shows implementation of both storing and retrieving complex objects with JSON serialization.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Storage } = Plugins;\n// JSON \"set\" example\nasync setObject() {\n  await Storage.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Storage.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Object in TypeScript\nDESCRIPTION: Demonstrates how to import the global Capacitor object from the @capacitor/core package. This object provides access to various utility functions for Capacitor app development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Converting Device File Paths with Capacitor.convertFileSrc in TypeScript\nDESCRIPTION: Demonstrates using `Capacitor.convertFileSrc` to convert a native device file path (obtained, for example, from `Filesystem.writeFile`) into a URL that can be safely used within the WebView. This is necessary because Capacitor apps use a different protocol (e.g., `http://localhost`) than native file paths (e.g., `file:///`). The example assumes `Filesystem`, `FilesystemDirectory`, and `base64Data` are appropriately defined/imported elsewhere.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst rawPhotoUri = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Markers to Google Maps\nDESCRIPTION: Adds multiple markers to the map at once. Returns a Promise that resolves to an array of strings representing the unique IDs of the added markers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\naddMarkers(markers: Marker[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Adding Back Button Event Listener with Capacitor in TypeScript\nDESCRIPTION: This snippet provides the TypeScript signature for adding a listener that responds to hardware back button presses on Android devices using Capacitor. It requires the corresponding plugin setup and runs within a Capacitor app. The function expects the hardcoded event name ('backButton') and a listener callback, returning a promise for a plugin listener handle. The listener disables default back button behavior, so navigation or app exit must be handled manually inside the provided function. This enables custom workflow when the back button is pressed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'backButton', listenerFunc: BackButtonListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Functions in TypeScript\nDESCRIPTION: Demonstrates how to import the Dialog module from '@capacitor/dialog' and use its asynchronous methods `alert`, `confirm`, and `prompt` within TypeScript functions. It shows basic usage with title and message options, handling the promise returned by each method, and logging the results (confirmation status, entered text, cancellation status) to the console.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from '@capacitor/dialog';\n\nconst showAlert = async () => {\n  await Dialog.alert({\n    title: 'Stop',\n    message: 'this is an error',\n  });\n};\n\nconst showConfirm = async () => {\n  const { value } = await Dialog.confirm({\n    title: 'Confirm',\n    message: `Are you sure you'd like to press the red button?`,\n  });\n\n  console.log('Confirmed:', value);\n};\n\nconst showPrompt = async () => {\n  const { value, cancelled } = await Dialog.prompt({\n    title: 'Hello',\n    message: `What's your name?`,\n  });\n\n  console.log('Name:', value);\n  console.log('Cancelled:', cancelled);\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Capacitor Google Map Web Component (HTML)\nDESCRIPTION: Includes the mandatory `<capacitor-google-map>` web component in the HTML markup. An `id` attribute is assigned to allow querying the element reference in JavaScript for map creation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<capacitor-google-map id=\"map\"></capacitor-google-map>\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to add listeners for push notification events, register for notifications, and retrieve delivered notifications using the @capacitor/push-notifications plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PushNotifications } from '@capacitor/push-notifications';\n\nconst addListeners = async () => {\n  await PushNotifications.addListener('registration', token => {\n    console.info('Registration token: ', token.value);\n  });\n\n  await PushNotifications.addListener('registrationError', err => {\n    console.error('Registration error: ', err.error);\n  });\n\n  await PushNotifications.addListener('pushNotificationReceived', notification => {\n    console.log('Push notification received: ', notification);\n  });\n\n  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n    console.log('Push notification action performed', notification.actionId, notification.inputValue);\n  });\n}\n\nconst registerNotifications = async () => {\n  let permStatus = await PushNotifications.checkPermissions();\n\n  if (permStatus.receive === 'prompt') {\n    permStatus = await PushNotifications.requestPermissions();\n  }\n\n  if (permStatus.receive !== 'granted') {\n    throw new Error('User denied permissions!');\n  }\n\n  await PushNotifications.register();\n}\n\nconst getDeliveredNotifications = async () => {\n  const notificationList = await PushNotifications.getDeliveredNotifications();\n  console.log('delivered notifications', notificationList);\n}\n```\n\n----------------------------------------\n\nTITLE: Using CapacitorCookies API Methods in TypeScript\nDESCRIPTION: This TypeScript example demonstrates various ways to interact with cookies using both the standard `document.cookie` and the CapacitorCookies API. It shows functions for getting cookies via `document.cookie`, setting a cookie via `document.cookie`, and using the specific CapacitorCookies methods like `setCookie`, `deleteCookie`, `clearCookies` (for a specific URL), and `clearAllCookies`. Requires importing `CapacitorCookies` from `@capacitor/core`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorCookies } from '@capacitor/core';\n\nconst getCookies = () => {\n  return document.cookie;\n};\n\nconst setCookie = () => {\n  document.cookie = key + '=' + value;\n};\n\nconst setCapacitorCookie = async () => {\n  await CapacitorCookies.setCookie({\n    url: 'http://example.com',\n    key: 'language',\n    value: 'en',\n  });\n};\n\nconst deleteCookie = async () => {\n  await CapacitorCookies.deleteCookie({\n    url: 'https://example.com',\n    key: 'language',\n  });\n};\n\nconst clearCookiesOnUrl = async () => {\n  await CapacitorCookies.clearCookies({\n    url: 'https://example.com',\n  });\n};\n\nconst clearAllCookies = async () => {\n  await CapacitorCookies.clearAllCookies();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Preferences for Key-Value Storage in TypeScript\nDESCRIPTION: Provides basic examples of using the Capacitor Preferences API in TypeScript. It demonstrates setting a key-value pair using `Preferences.set`, retrieving a value using `Preferences.get`, and removing a key using `Preferences.remove`. All operations are asynchronous and return Promises. Assumes `@capacitor/preferences` has been imported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\nconst setName = async () => {\n  await Preferences.set({\n    key: 'name',\n    value: 'Max',\n  });\n};\n\nconst checkName = async () => {\n  const { value } = await Preferences.get({ key: 'name' });\n\n  console.log(`Hello ${value}!`);\n};\n\nconst removeName = async () => {\n  await Preferences.remove({ key: 'name' });\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring DeviceInfo Interface in TypeScript\nDESCRIPTION: Defines the DeviceInfo interface, specifying properties for device identification, system versioning, memory, disk statistics, and platform-specific attributes (such as iOS version or Android SDK version). Each property is documented with availability conditions, units, and semantic meaning. Intended for use with Capacitor plugins that query device metadata; requires TypeScript for type-checking and assumes execution in a Capacitor-supported environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DeviceInfo {\n  name: string;                // Device name, supported on iOS and Android 7.1+; generic on iOS 16+ without entitlements\n  model: string;               // Device model (e.g., \"iPhone13,4\")\n  platform: 'ios' | 'android' | 'web'; // Device platform (lowercase)\n  operatingSystem: OperatingSystem;    // Operating system of the device\n  osVersion: string;           // OS version\n  iOSVersion?: number;         // iOS version number (padded integer, e.g., 160301), only on iOS\n  androidSDKVersion?: number;  // Android SDK version, only on Android\n  manufacturer: string;        // Device manufacturer\n  isVirtual: boolean;          // Whether device is virtual/emulator\n  memUsed: number;             // Approximate app memory usage (bytes). Divide by 1048576 for MB.\n  diskFree: number;            // Free disk space on OS storage path (system partition for Android)\n  diskTotal: number;           // Total disk space on OS storage path (system partition for Android)\n  realDiskFree?: number;       // Actual free disk space (added in 1.1.0)\n  realDiskTotal?: number;      // Actual total disk space (added in 1.1.0)\n  webViewVersion: string;      // Browser version of the web view\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Google Map Instance in TypeScript\nDESCRIPTION: Creates a new Google Map instance with specified options and optional callback for map ready event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(options: CreateMapArgs, callback?: MapListenerCallback<MapReadyCallbackData> | undefined) => Promise<GoogleMap>\n```\n\n----------------------------------------\n\nTITLE: Controlling Screen Orientation Dynamically with TypeScript\nDESCRIPTION: TypeScript code to dynamically lock and unlock screen orientation during runtime using the @capacitor/screen-orientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenOrientation } from '@capacitor/screen-orientation';\n...\nawait ScreenOrientation.lock({ orientation: 'portrait' });\nawait ScreenOrientation.lock({ orientation: 'landscape' });\n\n// To unlock orientation which will default back to the global setting:\nawait ScreenOrientation.unlock();\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Method for Web Platform in TypeScript\nDESCRIPTION: Demonstrates the implementation of the `openMap` method for the web platform within the `EchoWeb` class in `src/web.ts`. It imports the necessary types from `./definitions` and provides an async method stub for the web-specific logic, highlighting changes with a diff format.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n import type {\n   EchoPlugin,\n+  OpenMapOptions,\n } from './definitions';\n\n export class EchoWeb extends WebPlugin implements EchoPlugin {\n   // other methods\n\n+  async openMap(location: OpenMapOptions): Promise<void> {\n+    // logic here\n+  }\n }\n```\n\n----------------------------------------\n\nTITLE: Device getInfo Method Signature\nDESCRIPTION: TypeScript method signature for getInfo() that returns a Promise containing information about the device, operating system, and platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<DeviceInfo>\n```\n\n----------------------------------------\n\nTITLE: Installing PWA Elements via npm\nDESCRIPTION: Command to install @ionic/pwa-elements package using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/pwa-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Action Interface Definition\nDESCRIPTION: Interface for notification actions with options for customization including iOS-specific UNNotificationAction properties\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Action {\n  id: string;\n  title: string;\n  requiresAuthentication?: boolean;\n  foreground?: boolean;\n  destructive?: boolean;\n  input?: boolean;\n  inputButtonTitle?: string;\n  inputPlaceholder?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Orientation Plugin Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the ScreenOrientationPlugin that includes methods for getting orientation, locking/unlocking screen orientation, and handling orientation change events. The interface extends Capacitor's plugin functionality with strongly-typed methods and event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/designing-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface ScreenOrientationPlugin {\n  /**\n   * Returns the screen's current orientation.\n   */\n  orientation(): Promise<{ type: OrientationType }>;\n\n  /**\n   * Locks the screen orientation.\n   */\n  lock(opts: { orientation: OrientationLockType }): Promise<void>;\n\n  /**\n   * Unlocks the screen's orientation.\n   */\n  unlock(): Promise<void>;\n\n  /**\n   * Listens for screen orientation changes.\n   */\n  addListener(\n    eventName: 'screenOrientationChange',\n    listenerFunc: (orientation: { type: OrientationType }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners\n   */\n  removeAllListeners(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a notification channel - Capacitor Plugin - TypeScript\nDESCRIPTION: Deletes an existing notification channel on Android O (API 26) or newer. Requires a Channel object with channel identification properties. Returns a promise that resolves when the channel is removed. Only available on Android with SDK 26 or above; depends on the Capacitor notification plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the CapacitorHttp `patch` Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet displays the signature for the `patch` method of the CapacitorHttp API. It takes an `HttpOptions` object, usually including partial data for updating a resource, and returns a `Promise` resolving to an `HttpResponse`. This method enables making HTTP PATCH requests through native libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npatch(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Cordova edit-config Element - XML for iOS Info.plist Edits\nDESCRIPTION: The <edit-config> element targets iOS's Info.plist to inject or merge configuration entries, such as usage descriptions for hardware features (e.g., camera access). For Capacitor, similar edits should be made directly in the Info.plist. The target attribute specifies the Info.plist key being set; the inner <string> holds the configuration value. This snippet is specifically relevant for iOS permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<edit-config file=\"*-Info.plist\" mode=\"merge\" target=\"NSCameraUsageDescription\">\n    <string>Used to take photos</string>\n</edit-config>\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map Instance with Capacitor - TypeScript\nDESCRIPTION: Defines an asynchronous method to create and initialize a new Google Map instance using provided options and an optional callback for readiness. Dependencies include appropriate Capacitor plugins and types for CreateMapArgs and MapListenerCallback. The method accepts configuration options and an optional event listener, returning a Promise that resolves to a GoogleMap object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(options: CreateMapArgs, callback?: MapListenerCallback<MapReadyCallbackData> | undefined) => Promise<GoogleMap>\n```\n\n----------------------------------------\n\nTITLE: Getting Launch URL with Capacitor App Plugin - TypeScript\nDESCRIPTION: This TypeScript method, getLaunchUrl(), returns a Promise that resolves to the URL used to launch the app, if any. Dependencies: Capacitor App plugin. Input: none. Output: Promise<AppLaunchUrl | undefined>. Used for handling deep-linked or custom URL launches.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetLaunchUrl() => Promise<AppLaunchUrl | undefined>\n```\n\n----------------------------------------\n\nTITLE: Creating Autofill-Ready Login Form with Ionic (Vanilla JavaScript, HTML)\nDESCRIPTION: This HTML code builds a login form using Ionic UI elements for use with vanilla JavaScript, featuring \\'autocomplete\\' attributes on inputs for email and password to support autofill. Unlike the Angular example, it omits two-way binding or directives. Key fields include email and password, marked as required. This can be used in non-Angular Ionic projects or plain web apps and is modifiable to handle additional browser-specific bugs or enhancements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input type=\"email\" name=\"email\" autocomplete=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input id=\"pwd\" type=\"password\" name=\"password\" autocomplete=\"current-password\" required></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing checkPermissions for Location in Swift\nDESCRIPTION: Provides a concrete implementation of the `checkPermissions` method for checking the status of location permissions on iOS. It uses `CLLocationManager.authorizationStatus()` to determine the current permission state and maps it to one of the standard Capacitor permission states ('prompt', 'denied', 'granted'). The result is returned as a dictionary mapping the permission alias ('location') to its state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func checkPermissions(_ call: CAPPluginCall) {\n    let locationState: String\n\n    switch CLLocationManager.authorizationStatus() {\n    case .notDetermined:\n        locationState = \"prompt\"\n    case .restricted, .denied:\n        locationState = \"denied\"\n    case .authorizedAlways, .authorizedWhenInUse:\n        locationState = \"granted\"\n    @unknown default:\n        locationState = \"prompt\"\n    }\n\n    call.resolve([\"location\": locationState])\n}\n```\n\n----------------------------------------\n\nTITLE: Capacitor Clipboard `write` Method Signature\nDESCRIPTION: Defines the TypeScript signature for the `write` method of the Capacitor Clipboard API. This asynchronous method accepts an object conforming to the `WriteOptions` interface (containing string, image, url, or label) and returns a Promise that resolves to void upon successful writing to the system clipboard.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/clipboard.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwrite(options: WriteOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Extending CAPBridgeViewController - Swift\nDESCRIPTION: This Swift code demonstrates how to create a new custom view controller by subclassing Capacitor's CAPBridgeViewController. It requires importing both UIKit and the Capacitor framework. The new MyViewController class inherits all Capacitor web-to-native features, with potential for further customization (such as overriding configuration, manipulating views, or registering plugins). The code expects that Capacitor is installed as a dependency and that this class is assigned in Interface Builder to the relevant scene. No functional code beyond the class definition is present, so further overrides or method additions can be made as needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/viewcontroller.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport UIKit\nimport Capacitor\n\nclass MyViewController: CAPBridgeViewController {\n    // additional code\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin to 8.0.0\nDESCRIPTION: Updates the Android Gradle plugin version to 8.0.0 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:7.2.1'\n+       classpath 'com.android.tools.build:gradle:8.0.0'\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from CAPPluginCall in Swift\nDESCRIPTION: Demonstrates various methods for accessing data passed from JavaScript within a Capacitor plugin method in Swift. It shows how to retrieve a String (`getString`), an Object (`getObject`), and a Boolean (`getBool`) with default values. It also illustrates accessing properties directly from `call.options` and using a `guard` statement to enforce a required parameter (`id`), rejecting the call with `call.reject()` if it's missing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBool(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Position in Google Maps\nDESCRIPTION: Sets the camera position and configuration for the map view. The config parameter defines properties like zoom level, target position, animation duration, etc.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nsetCamera(config: CameraConfig) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Preferences Capacitor Plugin in TypeScript\nDESCRIPTION: Example usage of the Preferences plugin, demonstrating setting, getting, and removing a value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/preferences.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\nconst setName = async () => {\n  await Preferences.set({\n    key: 'name',\n    value: 'Max',\n  });\n};\n\nconst checkName = async () => {\n  const { value } = await Preferences.get({ key: 'name' });\n\n  console.log(`Hello ${value}!`);\n};\n\nconst removeName = async () => {\n  await Preferences.remove({ key: 'name' });\n};\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Path Mapping for Unit Test Stubs - JSON\nDESCRIPTION: This JSON snippet updates the TypeScript configuration for test builds, extending the 'paths' entry in tsconfig.spec.json so that module imports like '@capacitor/*' are resolved to unit test stub locations rather than actual node_modules content. This is crucial for Jasmine (and Angular) test environments that lack native manual mock support. Required files and folders should be present at the indicated relative paths. It must be merged with any existing entries, as the mapping replaces existing ones.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/mocking-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"],\n      \"@test/*\": [\"test/*\"],\n      \"@capacitor/*\": [\"__mocks__/@capacitor/*\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for BatteryInfo in Capacitor\nDESCRIPTION: Defines the BatteryInfo interface used in Capacitor to access battery-related information such as battery level and charging status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BatteryInfo {\n  batteryLevel: number;\n  isCharging: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Received Push Notifications in Capacitor (TypeScript)\nDESCRIPTION: Adds an event listener triggered when the device receives a push notification while the app is running. The listener function receives the `PushNotificationSchema` object containing the notification payload. Returns a Promise that resolves with a `PluginListenerHandle` for listener removal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationReceived', listenerFunc: (notification: PushNotificationSchema) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Installing Push Notifications Plugin for Capacitor\nDESCRIPTION: Commands to install the @capacitor/push-notifications plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Handling Screen Orientation Changes\nDESCRIPTION: Method implementation to handle Android configuration changes and notify JavaScript listeners when screen orientation changes occur.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   this.onOrientationChanged();\n}\n\nprivate void onOrientationChanged() {\n   JSObject ret = new JSObject();\n   String type = implementation.getCurrentOrientationType();\n   ret.put(\"type\", type);\n   notifyListeners(\"screenOrientationChange\", ret);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Background Runner Events in JavaScript Runner File - JavaScript\nDESCRIPTION: Defines event listeners in the JavaScript runner file to respond to background events: custom events, data-handling events, and remote notifications. The runner receives event type, resolve/reject callbacks, and argument objects; integrates with CapacitorNotifications for notifications. Requires correct configuration in capacitor.config.ts and that resolve/reject are always called to prevent OS-kills.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\naddEventListener('myCustomEvent', (resolve, reject, args) => {\\n  console.log('do something to update the system here');\\n  resolve();\\n});\\n\\naddEventListener('myCustomEventWithReturnData', (resolve, reject, args) => {\\n  try {\\n    console.log('accepted this data: ' + JSON.stringify(args.user));\\n\\n    const updatedUser = args.user;\\n    updatedUser.firstName = updatedUser.firstName + ' HELLO';\\n    updatedUser.lastName = updatedUser.lastName + ' WORLD';\\n\\n    resolve(updatedUser);\\n  } catch (err) {\\n    reject(err);\\n  }\\n});\\n\\naddEventListener('remoteNotification', (resolve, reject, args) => {\\n  try {\\n    console.log('received silent push notification');\\n\\n    CapacitorNotifications.schedule([\\n      {\\n        id: 100,\\n        title: 'Enterprise Background Runner',\\n        body: 'Received silent push notification',\\n      },\\n    ]);\\n\\n    resolve();\\n  } catch (err) {\\n    reject();\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Geolocation Implementation in Capacitor\nDESCRIPTION: TypeScript example showing how to use Capacitor's Geolocation plugin. Demonstrates importing the plugin, getting the current position synchronously, and setting up a position watcher.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/geolocation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Geolocation } = Plugins;\n\nclass GeolocationExample {\n  async getCurrentPosition() {\n    const coordinates = await Geolocation.getCurrentPosition();\n    console.log('Current', coordinates);\n  }\n\n  watchPosition() {\n    const wait = Geolocation.watchPosition({}, (position, err) => {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor React Hooks via NPM - Shell\nDESCRIPTION: Installs the @capacitor-community/react-hooks package using npm to enable the use of community-maintained React hooks for interfacing with Capacitor APIs. This step is required before any hooks can be imported and used within React components. The command should be executed in the root directory of your project where package.json is located.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/react-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Handle and Notify Orientation Changes\nDESCRIPTION: Implementation of methods to handle configuration changes and notify listeners when the screen orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   this.onOrientationChanged();\n}\n\nprivate void onOrientationChanged() {\n   JSObject ret = new JSObject();\n   String type = implementation.getCurrentOrientationType();\n   ret.put(\"type\", type);\n   notifyListeners(\"screenOrientationChange\", ret);\n}\n```\n\n----------------------------------------\n\nTITLE: API Signature: openInExternalBrowser Method in TypeScript\nDESCRIPTION: Defines the signature for the `openInExternalBrowser` method. It accepts an `OpenInDefaultParameterModel` object (containing the URL) and returns a `Promise<void>`. This method opens the URL in the device's default external browser.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nopenInExternalBrowser(model: OpenInDefaultParameterModel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Importing the Capacitor Object in TypeScript\nDESCRIPTION: Imports the Capacitor object from the '@capacitor/core' package to access its utility functions. This is the preferred method for modern JavaScript applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Writing to the Clipboard Using the write Method - Capacitor Clipboard Plugin (TypeScript)\nDESCRIPTION: Defines the signature and usage of the write method from the Capacitor Clipboard API for writing data to the system clipboard in TypeScript. The method accepts a WriteOptions object with possible properties such as string, image (Data URL), url, and an optional Android-only label. Returns a void promise and requires the Clipboard plugin as a dependency. Used for implementing clipboard copy functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/clipboard.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwrite(options: WriteOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the alert Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the `Dialog.alert` function. It accepts a single argument `options` of type `AlertOptions` and returns a `Promise<void>` which resolves when the user dismisses the alert dialog. This function is available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/dialog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nalert(options: AlertOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Device Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/device plugin and sync the project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/device.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/device\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Push Notifications Types in TypeScript\nDESCRIPTION: Imports necessary interfaces and classes (`ActionPerformed`, `PushNotificationSchema`, `PushNotifications`, `Token`) from the `@capacitor/push-notifications` package. This makes the Capacitor Push Notification API types and functions available for use within the TypeScript code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface in TypeScript\nDESCRIPTION: TypeScript interface for the result of listing notification channels, containing an array of Channel objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Defines the `PermissionState` type alias in TypeScript as a string literal union. It represents the possible status of a permission request: 'prompt' (not yet requested), 'prompt-with-rationale' (requires explanation before requesting again), 'granted' (permission given), or 'denied' (permission refused).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'prompt' | 'prompt-with-rationale' | 'granted' | 'denied'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ionic Project with Capacitor\nDESCRIPTION: Command to create a new Ionic project which includes Capacitor by default. This is the recommended way to start a new Ionic app with Capacitor capabilities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/with-ionic.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nionic start\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Swift Capacitor Plugin\nDESCRIPTION: Shows how to emit events from a Swift Capacitor plugin class using the notifyListeners method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nself.notifyListeners(\"myPluginEvent\", data: [:])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Native Dialogs with Capacitor Dialog API - TypeScript\nDESCRIPTION: Provides example TypeScript code for invoking alert, confirm, and prompt dialogs using the Dialog API from the @capacitor/dialog plugin. It requires the Dialog import from '@capacitor/dialog' and assumes an environment where asynchronous functions and ES module syntax are supported. Functions show how to call Dialog.alert, Dialog.confirm, and Dialog.prompt, with options that include a title and message, and how to handle promise-based results for user interaction. Key outputs include logging Confirmation or Prompt results, and limitations include requiring execution inside an environment that supports Capacitor Plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from '@capacitor/dialog';\\n\\nconst showAlert = async () => {\\n  await Dialog.alert({\\n    title: 'Stop',\\n    message: 'this is an error',\\n  });\\n};\\n\\nconst showConfirm = async () => {\\n  const { value } = await Dialog.confirm({\\n    title: 'Confirm',\\n    message: `Are you sure you'd like to press the red button?`,\\n  });\\n\\n  console.log('Confirmed:', value);\\n};\\n\\nconst showPrompt = async () => {\\n  const { value, cancelled } = await Dialog.prompt({\\n    title: 'Hello',\\n    message: `What's your name?`,\\n  });\\n\\n  console.log('Name:', value);\\n  console.log('Cancelled:', cancelled);\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Product Flavors in Gradle - Groovy\nDESCRIPTION: This Groovy code block configures multiple product flavors within an Android app's build.gradle file. It defines a flavor dimension called 'environment' and specifies two flavors: 'dev' and 'qa'. Each flavor customizes build parameters such as applicationIdSuffix and manifestPlaceholders (e.g., displayName), enabling environment-specific builds. This must be placed inside the android { } block in /android/app/build.gradle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nflavorDimensions = [\"environment\"]\nproductFlavors {\n  dev {\n      dimension \"environment\"\n      manifestPlaceholders = [displayName:\"My App\"]\n  }\n  qa {\n      dimension \"environment\"\n      applicationIdSuffix \".qa\"\n      manifestPlaceholders = [displayName:\"My App - QA\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS-specific Capacitor Configuration\nDESCRIPTION: Adds iOS-specific configuration to the Capacitor config file to specify the QA scheme.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nios: {\n  scheme: 'App QA',\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode via Capacitor CLI\nDESCRIPTION: This command uses the Capacitor CLI to locate the generated iOS project's `.xcworkspace` file within the `ios` directory and opens it using Xcode. This is the recommended way to open the project for native development or running the app via Xcode after the iOS platform has been added.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Listening for Deep Link Events and Routing in Angular with Capacitor - TypeScript\nDESCRIPTION: Implements initializeApp, which adds an event listener for 'appUrlOpen' using the Capacitor App API. When a URL is received, it extracts the relevant path and navigates using Angular Router. Expects event objects with 'url' properties and that the app uses path-based routing. Handles unmatched cases by deferring to default routing behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitializeApp() {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n        this.zone.run(() => {\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = event.url.split(\".app\").pop();\n            if (slug) {\n                this.router.navigateByUrl(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps with Plain JavaScript (HTML/CSS/JavaScript)\nDESCRIPTION: Provides a complete example using plain HTML, CSS, and JavaScript. It includes the HTML structure with the `<capacitor-google-map>` element and a button, CSS for styling the map element, and a JavaScript function to create the map instance using the plugin's `GoogleMap.create` method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<capacitor-google-map id=\"map\"></capacitor-google-map>\n<button onclick=\"createMap()\">Create Map</button>\n```\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  capacitor-google-map {\n    display: inline-block;\n    width: 275px;\n    height: 400px;\n  }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { GoogleMap } from '@capacitor/google-maps';\n\n  const createMap = async () => {\n    const mapRef = document.getElementById('map');\n\n    const newMap = await GoogleMap.create({\n      id: 'my-map', // Unique identifier for this map instance\n      element: mapRef, // reference to the capacitor-google-map element\n      apiKey: 'YOUR_API_KEY_HERE', // Your Google Maps API Key\n      config: {\n        center: {\n          // The initial position to be rendered by the map\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8, // The initial zoom level to be rendered by the map\n      },\n    });\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mocking and Spying on Storage Plugin Methods Using Jasmine - TypeScript\nDESCRIPTION: This snippet demonstrates Jasmine's spyOn utility for mocking and observing the Storage plugin's method calls in a TypeScript-based Angular unit test. Prerequisites include Jasmine as the test runner and the manual Storage mock. The first test provides specific responses for get when called with 'firstName' or 'lastName' arguments, and verifies that the component receives these values. The second test tracks calls to clear in response to triggering a UI element. It relies on TypeScript casting to align spyOn signatures with plugin API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/mocking-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    spyOn(Storage, 'get');\n    (Storage.get as any)\n      .withArgs({ key: 'firstName' })\n      .and.returnValue(Promise.resolve({ value: 'Jason' }));\n    (Storage.get as any)\n      .withArgs({ key: 'lastName' })\n      .and.returnValue(Promise.resolve({ value: 'Jones' }));\n\n    fixture.detectChanges();\n    await fixture.whenRenderingDone();\n\n    expect(component.firstName).toEqual('Jason');\n    expect(component.lastName).toEqual('Jones');\n  });\n\n  it('clears the storage', () => {\n    spyOn(Storage, 'clear');\n    click(clear.nativeElement);\n    fixture.detectChanges();\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Status Interface in TypeScript\nDESCRIPTION: Demonstrates how to define permission status interfaces for Capacitor plugins using TypeScript, including permission state definitions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PermissionState } from '@capacitor/core';\n\nexport interface PermissionStatus {\n  // TODO: change 'location' to the actual name of your alias!\n  location: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with Capacitor Filesystem API (mkdir)\nDESCRIPTION: Defines the `mkdir` method signature from the Capacitor Filesystem API. This asynchronous function takes `MkdirOptions` (specifying the path, optional directory, and recursive flag for creating parent directories) and returns a Promise that resolves when the directory has been created.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nmkdir(options: MkdirOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorCookies clearCookies Method Signature\nDESCRIPTION: This TypeScript signature defines the `clearCookies` method of the Capacitor Cookies API. It accepts a `ClearCookieOptions` object, specifying the URL from which to clear cookies, and returns a Promise that resolves when the cookies for that URL are cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclearCookies(options: ClearCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Permissions Using DispatchGroup - Swift\nDESCRIPTION: This snippet demonstrates how to request multiple permissions (e.g., contacts, camera) in parallel and synchronize completion using a DispatchGroup. The granted permission types are dynamically determined from the CAPPluginCall options. Once all requests complete, the plugin's 'checkPermissions' method reports the overall status. Dependencies: Contacts, AVFoundation, GCD/Dispatch, and Capacitor. Intended for plugin methods involving complex permissions logic.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet store = CNContactStore()\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    // get the permissions to check or default to all of them\n    var permissions = call.getArray(\"types\", String.self) ?? []\n    if permissions.isEmpty {\n        permissions = [\"contacts\", \"camera\"]\n    }\n\n    let group = DispatchGroup()\n    if permissions.contains(\"contacts\") {\n        group.enter()\n        store.requestAccess(for: .contacts) { (_, _) in\n            group.leave()\n        }\n    }\n    if permissions.contains(\"camera\") {\n        group.enter()\n        AVCaptureDevice.requestAccess(for: .video) { _ in\n            group.leave()\n        }\n    }\n    group.notify(queue: DispatchQueue.main) {\n        self.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafely Accessing Dictionary Value Directly in Capacitor Plugin (Swift)\nDESCRIPTION: This Swift snippet shows an incorrect approach to checking for a value's existence by accessing the `call.options` dictionary directly. This is problematic because if the value associated with the key `\"foo\"` is `NSNull`, the condition `call.options[\"foo\"] != nil` evaluates to true (as `NSNull` is an object, not `nil`), potentially leading to unexpected behavior or runtime errors if the code inside the block assumes a non-null value of a specific type. It's recommended to use type-specific accessors like `getString` instead.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nif call.options[\"foo\"] != nil {\n    // BAD: the key returned a truthy `NSNull` object, so this block will run\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Indoor Maps in Google Maps\nDESCRIPTION: Enables or disables the display of indoor maps based on the enabled parameter. Indoor maps show the layout of indoor spaces like malls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nenableIndoorMaps(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: TypeScript interface for notification permission status, containing the state of notification permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  receive: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Local Notification Received in TypeScript\nDESCRIPTION: This method adds a listener for when local notifications are displayed. It takes an event name and a listener function as parameters, and returns a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationReceived', listenerFunc: (notification: LocalNotificationSchema) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Copying Files/Directories with Capacitor Filesystem API (copy)\nDESCRIPTION: Defines the `copy` method signature from the Capacitor Filesystem API. This asynchronous function takes `CopyOptions` (specifying the source path (`from`), destination path (`to`), and optional source/destination directories) and returns a Promise resolving to a `CopyResult` (currently empty) when the file or directory has been copied.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncopy(options: CopyOptions) => Promise<CopyResult>\n```\n\n----------------------------------------\n\nTITLE: Handling Screen Orientation Change in TypeScript\nDESCRIPTION: Sets up a state variable to track screen orientation and adds an event listener to update it when the orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/using-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst [orientation, setOrientation] = useState<string>('');\n\nScreenOrientation.addListener('screenOrientationChange', res =>\n  setOrientation(res.type),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Reader Status in Capacitor (TypeScript)\nDESCRIPTION: API method signature for `isEnabled`. This asynchronous function checks if a native screen reader (like TalkBack or VoiceOver) is currently active. It returns a Promise resolving to an object containing a boolean `value` indicating the status. This method is not supported on the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-reader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled() => Promise<{ value: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Cookies API\nDESCRIPTION: Comprehensive example showing various cookie operations including getting, setting, deleting individual cookies and clearing all cookies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorCookies } from '@capacitor/core';\n\nconst getCookies = () => {\n  return document.cookie;\n};\n\nconst setCookie = () => {\n  document.cookie = key + '=' + value;\n};\n\nconst setCapacitorCookie = async () => {\n  await CapacitorCookies.setCookie({\n    url: 'http://example.com',\n    key: 'language',\n    value: 'en',\n  });\n};\n\nconst deleteCookie = async () => {\n  await CapacitorCookies.deleteCookie({\n    url: 'https://example.com',\n    key: 'language',\n  });\n};\n\nconst clearCookiesOnUrl = async () => {\n  await CapacitorCookies.clearCookies({\n    url: 'https://example.com',\n  });\n};\n\nconst clearAllCookies = async () => {\n  await CapacitorCookies.clearAllCookies();\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Capacitor Integration in an Existing Ionic Project (bash)\nDESCRIPTION: This command enables Capacitor integration in an existing Ionic project using the Ionic CLI. The project must already be initialized with Ionic. On execution, this sets up the Capacitor files and config necessary to allow Capacitor plugin usage and native platform support within the Ionic project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/with-ionic.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic integrations enable capacitor\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Bridge Pattern in Swift for Capacitor Device Plugin\nDESCRIPTION: This snippet demonstrates the use of the Bridge design pattern in the Device plugin for Capacitor. It shows how the implementation is abstracted from the interface, allowing for platform-specific code while maintaining a consistent API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@objc func getLanguageCode(_ call: CAPPluginCall) {\n    let code = implementation.getLanguageCode()\n    call.resolve([ \"value\": code ])\n}\n```\n\n----------------------------------------\n\nTITLE: Using Splash Screen API in TypeScript\nDESCRIPTION: Example of how to use the SplashScreen API to hide and show splash screens with various configuration options including duration and auto-hide settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SplashScreen } from '@capacitor/splash-screen';\n\n// Hide the splash (you should do this on app launch)\nawait SplashScreen.hide();\n\n// Show the splash for an indefinite amount of time:\nawait SplashScreen.show({\n  autoHide: false,\n});\n\n// Show the splash for two seconds and then automatically hide it:\nawait SplashScreen.show({\n  showDuration: 2000,\n  autoHide: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding the Android Platform using Capacitor CLI\nDESCRIPTION: Uses the Capacitor CLI (`npx cap`) command `add` to create the native Android project structure within the Capacitor application. This command generates the `android/` directory containing the necessary Android Studio project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Managing Motion Permissions and Event Listeners in Typescript\nDESCRIPTION: A complete example showing how to request device motion permissions, add event listeners for acceleration data, and properly manage those listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginListenerHandle } from '@capacitor/core';\nimport { Motion } from '@capacitor/motion';\n\n\nlet accelHandler: PluginListenerHandle;\n\nmyButton.addEventListener('click', async () => {\n  try {\n    await DeviceMotionEvent.requestPermission();\n  } catch (e) {\n    // Handle error\n    return;\n  }\n\n  // Once the user approves, can start listening:\n  accelHandler = await Motion.addListener('accel', event => {\n    console.log('Device motion event:', event);\n  });\n});\n\n// Stop the acceleration listener\nconst stopAcceleration = () => {\n  if (accelHandler) {\n    accelHandler.remove();\n  }\n};\n\n// Remove all listeners\nconst removeListeners = () => {\n  Motion.removeAllListeners();\n};\n```\n\n----------------------------------------\n\nTITLE: API Definition: getCurrentPosition Method (TypeScript)\nDESCRIPTION: TypeScript signature for the `getCurrentPosition` method. It accepts an optional `PositionOptions` object to configure accuracy and caching, and returns a Promise that resolves with a `Position` object containing the device's current GPS location details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>\n```\n\n----------------------------------------\n\nTITLE: readFile API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `readFile` method of the Capacitor Filesystem API. This asynchronous function reads a file from disk based on the provided `ReadFileOptions` and returns a Promise resolving to a `ReadFileResult` containing the file data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadFile(options: ReadFileOptions) => Promise<ReadFileResult>\n```\n\n----------------------------------------\n\nTITLE: Running Environment-Specific Capacitor Builds - Bash\nDESCRIPTION: These shell commands execute Capacitor copy and run operations with the QA-specific configuration by setting NODE_ENV=qa. You may need a cross-platform utility like 'cross-env' in some environments for proper environment variable propagation. Options exist for both iOS (cap run ios) and Android (cap run android) targets. Set NODE_ENV to use dynamic builds as defined in capacitor.config.ts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=qa npx cap copy\nNODE_ENV=qa npx cap run ios \t#NODE_ENV=qa npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Mocking Capacitor Storage Plugin in Jest Tests\nDESCRIPTION: Example of mocking the Storage plugin methods in Jest tests using jest.fn() with mockImplementation to control the return values and verify method calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/mocking-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    Storage.get = jest.fn().mockImplementation(\n      async (data: { key: string }): Promise<{ value: string }> => {\n        return data.key === \"firstName\"\n          ? { value: \"Jimmy\" }\n          : data.key === \"lastName\"\n          ? { value: \"Simms\" }\n          : { value: \"unknown\" };\n      }\n    );\n    const w = mount(Home);\n    await flushPromises();\n    expect(w.vm.firstName).toEqual(\"Jimmy\");\n    expect(w.vm.lastName).toEqual(\"Simms\");\n  });\n\n  it(\"clears the storage\", () => {\n    const button = wrapper.findComponent('[data-testid=\"clear\"]');\n    Storage.clear = jest.fn().mockResolvedValue(undefined);\n    button.trigger(\"click\");\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Orientation Plugin Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a screen orientation Capacitor plugin. This code defines the data types and methods needed for controlling screen orientation across platforms, including getting current orientation, locking/unlocking orientation, and listening for orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/designing-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface OrientationLockOptions {\n  /**\n   * Note: Typescript v5.2+ users should import OrientationLockType from @capacitor/screen-orientation.\n   */\n  orientation: OrientationLockType;\n}\n\nexport type OrientationLockType =\n  | 'any'\n  | 'natural'\n  | 'landscape'\n  | 'portrait'\n  | 'portrait-primary'\n  | 'portrait-secondary'\n  | 'landscape-primary'\n  | 'landscape-secondary';\n\nexport interface ScreenOrientationResult {\n  type: OrientationType;\n}\n\nexport interface ScreenOrientationPlugin {\n  /**\n   * Returns the screen's current orientation.\n   */\n  orientation(): Promise<ScreenOrientationResult>;\n\n  /**\n   * Locks the screen orientation.\n   */\n  lock(options: OrientationLockOptions): Promise<void>;\n\n  /**\n   * Unlocks the screen's orientation.\n   */\n  unlock(): Promise<void>;\n\n  /**\n   * Listens for screen orientation changes.\n   */\n  addListener(\n    eventName: 'screenOrientationChange',\n    listenerFunc: (orientation: ScreenOrientationResult) => void,\n  ): Promise<PluginListenerHandle>;\n\n  /**\n   * Removes all listeners\n   */\n  removeAllListeners(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Device OS and Platform Information using Capacitor Device Plugin\nDESCRIPTION: Provides the TypeScript signature for the `getInfo()` method. This asynchronous function returns a Promise that resolves to a `DeviceInfo` object, containing detailed information about the device's hardware, operating system, and platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<DeviceInfo>\n```\n\n----------------------------------------\n\nTITLE: Adding Network Status Change Listener in TypeScript\nDESCRIPTION: Method to add a listener for changes in the network connection, including the event name and listener function parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/network.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Presentation Options - Capacitor Config - TypeScript\nDESCRIPTION: This TypeScript snippet presents an example capacitor.config.ts file configuring the PushNotifications plugin with specific presentationOptions. The structure leverages CapacitorConfig typing and imports. Key parameters include badge, sound, and alert, customizing push presentation on iOS and Android. Requires @capacitor/cli and @capacitor/push-notifications. Exported config is used at build time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\\\"@capacitor/push-notifications\\\" />\\n\\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    PushNotifications: {\\n      presentationOptions: [\\\"badge\\\", \\\"sound\\\", \\\"alert\\\"],\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: This command opens the Android Capacitor project in Android Studio. This provides developers with access to the native Android code for customization or debugging.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Using Device API Methods in TypeScript\nDESCRIPTION: Example showing how to use the Device API to get device information and battery status\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/device.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Device } from '@capacitor/device';\n\nconst logDeviceInfo = async () => {\n  const info = await Device.getInfo();\n\n  console.log(info);\n};\n\nconst logBatteryInfo = async () => {\n  const info = await Device.getBatteryInfo();\n\n  console.log(info);\n};\n```\n\n----------------------------------------\n\nTITLE: RequestInit Interface Type Definition\nDESCRIPTION: Interface defining the initialization options for an HTTP request, including body, cache, credentials, headers, and other request configuration properties.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RequestInit {\n  body?: BodyInit;\n  cache?: RequestCache;\n  credentials?: RequestCredentials;\n  headers?: HeadersInit;\n  integrity?: string;\n  keepalive?: boolean;\n  method?: string;\n  mode?: RequestMode;\n  redirect?: RequestRedirect;\n  referrer?: string;\n  referrerPolicy?: ReferrerPolicy;\n  signal?: AbortSignal;\n  window?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BackgroundRunner Plugin in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring the `BackgroundRunner` plugin within a `capacitor.config.ts` file using the `CapacitorConfig` type. It includes necessary type references and exports a configuration object containing plugin settings equivalent to the JSON example, specifying `label`, `src`, `event`, `repeat`, `interval`, and `autoStart`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/background-runner\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    BackgroundRunner: {\n      label: \"com.example.background.task\",\n      src: \"runners/background.js\",\n      event: \"myCustomEvent\",\n      repeat: true,\n      interval: 15,\n      autoStart: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining the CameraSource Enum in TypeScript\nDESCRIPTION: Defines the TypeScript enum `CameraSource` used to specify where the image should be obtained from using the Capacitor Camera plugin. Options are 'PROMPT' (user chooses), 'CAMERA' (take a new photo), or 'PHOTOS' (select from gallery).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraSource {\n  /** Prompts the user to select either the photo album or take a photo. */\n  Prompt = 'PROMPT',\n  /** Take a new photo using the camera. */\n  Camera = 'CAMERA',\n  /** Pick an existing photo from the gallery or photo album. */\n  Photos = 'PHOTOS'\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Form Implementation with Autofill Support\nDESCRIPTION: HTML form template using ion-input elements with autocomplete attributes for email and password fields in Angular\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/autofill-credentials.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input appAutofill type=\"email\" name=\"email\" autocomplete=\"email\" [(ngModel)]=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input appAutofill type=\"password\" name=\"password\" autocomplete=\"current-password\" required [(ngModel)]=\"password\"></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Change Listener in Swift\nDESCRIPTION: Methods to handle device orientation changes by observing UIDevice.orientationDidChangeNotification events. This code registers and unregisters observers and notifies JavaScript listeners when valid orientation changes occur.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n  NotificationCenter.default.addObserver(\n    self,\n    selector: #selector(self.orientationDidChange),\n    name: UIDevice.orientationDidChangeNotification,\n    object: nil)\n}\n\ndeinit {\n  NotificationCenter.default.removeObserver(self)\n}\n\n@objc private func orientationDidChange() {\n  // Ignore changes in orientation if unknown, face up, or face down\n  if UIDevice.current.orientation.isValidInterfaceOrientation {\n    let orientation = implementation.getCurrentOrientationType()\n    notifyListeners(\"screenOrientationChange\", data: [\"type\": orientation])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Splash Screen Method Definition in TypeScript\nDESCRIPTION: TypeScript method signature for hiding the Capacitor splash screen. Takes optional HideOptions parameter to configure fade out duration. Returns a Promise that resolves when the splash screen is hidden.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: HideOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Running Live Reload with Ionic CLI for Android and iOS\nDESCRIPTION: Commands to start Live Reload process for Android and iOS using Ionic CLI, which builds the app, copies assets, and opens the native IDE.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/live-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run android -l --external\nionic cap run ios -l --external\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase App on Startup - Swift\nDESCRIPTION: This Swift statement initializes the Firebase application when the app starts, typically called from AppDelegate's 'didFinishLaunchingWithOptions' method. Dependency: Firebase SDK must be properly installed and initialized. Input: none; Output: configures Firebase services for use in the app session. Limitation: Should only be called once at app launch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nFirebaseApp.configure()\n\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Preferences API for JSON Storage in TypeScript\nDESCRIPTION: Demonstrates how to store and retrieve JSON data using Capacitor's Preferences API. The example shows converting objects to JSON strings for storage and parsing them back to objects when retrieved.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\n// JSON \"set\" example\nasync setObject() {\n  await Preferences.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Preferences.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the ListChannelsResult object, which contains an array of Channel objects representing the list of notification channels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Capacitor Plugins for Ionic (Bash)\nDESCRIPTION: This command installs the core Capacitor plugins (App, Haptics, Keyboard, StatusBar) recommended for use with Ionic Framework. These plugins enhance the native feel and provide essential functionalities. Requires Node.js and npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/with-ionic.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar\n```\n\n----------------------------------------\n\nTITLE: getCurrentPosition Method for Geolocation\nDESCRIPTION: API method signature for getting the current GPS location. Returns a Promise with the GeolocationPosition object containing coordinates and timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/geolocation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPosition(options?: GeolocationOptions) => Promise<GeolocationPosition>\n```\n\n----------------------------------------\n\nTITLE: Defining the getCurrentPosition API Method in TypeScript\nDESCRIPTION: Type definition for the `getCurrentPosition` method. It accepts an optional `PositionOptions` object and returns a `Promise` that resolves with a `Position` object containing the device's current location details (coordinates, timestamp, accuracy).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>\n```\n\n----------------------------------------\n\nTITLE: Android Asset Links Configuration\nDESCRIPTION: JSON configuration for the assetlinks.json file that establishes the connection between the website and Android app\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"com.netkosoft.beerswift\",\n      \"sha256_cert_fingerprints\": [\"43:12:D4:27:D7:C4:14...\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Emitting Plugin Events in Capacitor Plugin (Swift)\nDESCRIPTION: This Swift code shows how to emit (notify) a custom event from a Capacitor plugin by calling self.notifyListeners. The method takes the event name (here, 'myPluginEvent') and a data dictionary (empty in this case) to send payloads to JavaScript listeners. The plugin class must inherit from the appropriate Capacitor base and be running in the Capacitor context. Inputs are the event name and data object; output is the emission of the event to all registered listeners. Limitation: Listeners must be attached in the front-end JavaScript/TypeScript code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nself.notifyListeners(\"myPluginEvent\", data: [:])\n```\n\n----------------------------------------\n\nTITLE: Requesting Motion Permissions and Managing Listeners (TypeScript)\nDESCRIPTION: Demonstrates how to request user permission for `DeviceMotionEvent` (required by browsers) upon a user action (like a button click). Once permission is granted, it shows how to add an accelerometer listener using `Motion.addListener`. It also includes helper functions to stop a specific listener (`stopAcceleration`) using the returned `PluginListenerHandle` and to remove all listeners attached to the Motion plugin (`removeListeners`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginListenerHandle } from '@capacitor/core';\nimport { Motion } from '@capacitor/motion';\n\n\nlet accelHandler: PluginListenerHandle;\n\nmyButton.addEventListener('click', async () => {\n  try {\n    await DeviceMotionEvent.requestPermission();\n  } catch (e) {\n    // Handle error\n    return;\n  }\n\n  // Once the user approves, can start listening:\n  accelHandler = await Motion.addListener('accel', event => {\n    console.log('Device motion event:', event);\n  });\n});\n\n// Stop the acceleration listener\nconst stopAcceleration = () => {\n  if (accelHandler) {\n    accelHandler.remove();\n  }\n};\n\n// Remove all listeners\nconst removeListeners = () => {\n  Motion.removeAllListeners();\n};\n```\n\n----------------------------------------\n\nTITLE: Opening URL in In-App WebView with Capacitor InAppBrowser (TypeScript)\nDESCRIPTION: Imports `InAppBrowser` and `DefaultWebViewOptions`. Uses the `openInWebView` method to open the specified URL (\"https://www.google.com\") in a custom WebView embedded directly within the application. Default options are provided. Requires the `@capacitor/inappbrowser` plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser, DefaultWebViewOptions } from '@capacitor/inappbrowser';\nawait InAppBrowser.openInWebView({\n    url: \"https://www.google.com\",\n    options: DefaultWebViewOptions\n});\n```\n\n----------------------------------------\n\nTITLE: Using Preferences API in TypeScript\nDESCRIPTION: Example demonstrating how to set, get, and remove values using the Preferences API. This shows the basic operations of storing a name value, retrieving it, and removing it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/preferences.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preferences } from '@capacitor/preferences';\n\nconst setName = async () => {\n  await Preferences.set({\n    key: 'name',\n    value: 'Max',\n  });\n};\n\nconst checkName = async () => {\n  const { value } = await Preferences.get({ key: 'name' });\n\n  console.log(`Hello ${value}!`);\n};\n\nconst removeName = async () => {\n  await Preferences.remove({ key: 'name' });\n};\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientation Plugin with Capacitor in Objective-C\nDESCRIPTION: This code registers the ScreenOrientation plugin with Capacitor, making its methods available to JavaScript. It defines three plugin methods: orientation, lock, and unlock.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(ScreenOrientationPlugin, \"ScreenOrientation\",\n  CAP_PLUGIN_METHOD(orientation, CAPPluginReturnPromise);\n  CAP_PLUGIN_METHOD(lock, CAPPluginReturnPromise);\n  CAP_PLUGIN_METHOD(unlock, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadFileOptions Interface in TypeScript\nDESCRIPTION: Specifies the options for the `downloadFile` operation in the Capacitor Filesystem API. Includes the destination path, the base directory (defaulting to `DATA`), an optional progress listener flag, and a flag for recursive directory creation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom JavaScript Events via Bridge in Java\nDESCRIPTION: Provides example usages of the bridge's 'triggerJSEvent' method to dispatch custom events. Sends 'myCustomEvent' to 'window' and 'document', with and without serialized data. Ensure that 'data' passed is a valid JSON string. These calls must be made in the Java layer of a Capacitor plugin with access to the bridge.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nbridge.triggerJSEvent(\"myCustomEvent\", \"window\");\nbridge.triggerJSEvent(\"myCustomEvent\", \"document\", \"{ 'dataKey': 'dataValue' }\");\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter to Android Manifest\nDESCRIPTION: XML configuration to add an intent filter to the Android manifest, enabling the app to handle deep links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of @capacitor/app Plugin in TypeScript\nDESCRIPTION: TypeScript example demonstrating how to use the App plugin to listen for app state changes, URL opens, and restored results, as well as checking for app launch URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from '@capacitor/app';\n\nApp.addListener('appStateChange', ({ isActive }) => {\n  console.log('App state changed. Is active?', isActive);\n});\n\nApp.addListener('appUrlOpen', data => {\n  console.log('App opened with URL:', data);\n});\n\nApp.addListener('appRestoredResult', data => {\n  console.log('Restored state:', data);\n});\n\nconst checkAppLaunchUrl = async () => {\n  const { url } = await App.getLaunchUrl();\n\n  console.log('App opened with URL: ' + url);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Data in a Capacitor iOS Plugin\nDESCRIPTION: Demonstrates how to access different types of data passed to a plugin method through the CAPPluginCall instance, including retrieving strings, objects, booleans, and implementing required parameters with guard statements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBool(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Button Click Listener in TypeScript for Google Maps\nDESCRIPTION: This function sets up a listener for clicks on the 'My Location' button on a Google Map. It takes an optional callback function that receives location button click data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationButtonClickListener(callback?: MapListenerCallback<MyLocationButtonClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Platform with getPlatform\nDESCRIPTION: Demonstrates the getPlatform utility function that returns the current platform name as a string ('web', 'ios', or 'android').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetPlatform: () => string;\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Dependencies\nDESCRIPTION: This command updates all Capacitor packages to the latest version. It ensures that Core, Android, and iOS libraries are all the same version, which is important for compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core @capacitor/ios @capacitor/android\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Listening for App Restored Results in Capacitor\nDESCRIPTION: Adds a listener for 'appRestoredResult' events which fires when the app is launched with previously persisted plugin call data. Important for Android apps using plugins that rely on external Activities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'appRestoredResult', listenerFunc: RestoredListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Registering the Plugin for JS Access - TypeScript\nDESCRIPTION: This TypeScript snippet uses registerPlugin from '@capacitor/core' to create a JavaScript interface to the native Echo plugin. The first argument 'Echo' must match the name passed in the Objective-C registration. The exported Echo object is then used to access plugin methods from JavaScript. This requires that the plugin has been properly registered and implemented on the native side.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Update Command in Bash\nDESCRIPTION: This command updates the native plugins and dependencies referenced in package.json. It can be run with or without specifying a platform (android or ios). The --deployment option can be used to prevent deletion of Podfile.lock and use the --deployment option with pod install.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Listening to Camera Idle Events - TypeScript\nDESCRIPTION: Installs a listener callback to handle camera idle (i.e., stopped moving) events. Callback is optional and of the type MapListenerCallback with CameraIdleCallbackData. Asynchronous with void Promise return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCameraIdleListener(callback?: MapListenerCallback<CameraIdleCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration\nDESCRIPTION: This command starts the CLI questionnaire to initialize Capacitor configuration for your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Additional Notification Interfaces\nDESCRIPTION: Defines various supporting interfaces for notification management including CancelOptions, EnabledResult, DeliveredNotifications, and DeliveredNotificationSchema.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CancelOptions {\n  notifications: LocalNotificationDescriptor[];\n}\n\ninterface EnabledResult {\n  value: boolean;\n}\n\ninterface DeliveredNotifications {\n  notifications: DeliveredNotificationSchema[];\n}\n\ninterface DeliveredNotificationSchema {\n  id: number;\n  tag: string;\n  title: string;\n  body: string;\n  group: string;\n  groupSummary: boolean;\n  data: any;\n  extra: any;\n  attachments: Attachment[];\n  actionTypeId: string;\n  schedule: Schedule;\n  sound: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Screen Reader API in TypeScript\nDESCRIPTION: Example demonstrating how to use the Screen Reader API, including adding a state change listener, checking if the screen reader is enabled, and using text-to-speech functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-reader.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenReader } from '@capacitor/screen-reader';\n\nScreenReader.addListener('stateChange', ({ value }) => {\n  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);\n});\n\nconst checkScreenReaderEnabled = async () => {\n  const { value } = await ScreenReader.isEnabled();\n\n  console.log('Voice over enabled? ' + value);\n};\n\nconst sayHello = async () => {\n  await ScreenReader.speak({ value: 'Hello World!' });\n};\n```\n\n----------------------------------------\n\nTITLE: Moving Package Declaration in Android Manifest\nDESCRIPTION: Move the package declaration from AndroidManifest.xml to the build.gradle file in the Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n# AndroidManifest.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n- <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"[YOUR_PACKAGE_ID]\">\n+ <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n+     namespace \"[YOUR_PACKAGE_ID]\"\n      compileSdkVersion rootProject.ext.compileSdkVersion\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on Android Device with CLI in Bash\nDESCRIPTION: This Bash code runs the Capacitor CLI command to build and launch a debug build of a Capacitor app on an Android device or emulator. It is intended for testing the application\\'s native Android functionality after syncing web code. Prerequisites include an existing Capacitor Android project and an emulator or device connected. On success, the app should start on the target Android device; errors may occur if Android Studio or device/emulator is not properly configured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Android\nDESCRIPTION: Methods to trigger JavaScript events from native Android code. Supports firing events on window or document targets with optional data payload as JSON string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void triggerJSEvent(final String eventName, final String target)\npublic void triggerJSEvent(final String eventName, final String target, final String data)\n```\n\nLANGUAGE: java\nCODE:\n```\nbridge.triggerJSEvent(\"myCustomEvent\", \"window\");\nbridge.triggerJSEvent(\"myCustomEvent\", \"document\", \"{ 'dataKey': 'dataValue' }\");\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate.swift for Screen Orientation Support\nDESCRIPTION: Required changes to the AppDelegate.swift file in iOS projects to support the ScreenOrientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/packaging.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n+ import CapacitorCommunityScreenOrientation\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n+     return ScreenOrientationPlugin.supportedOrientations\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Functionality in Swift\nDESCRIPTION: Shows the structure for implementing the `openMap` native functionality on iOS using Swift. The `@objc` attribute exposes the function to the Objective-C runtime used by Capacitor. It retrieves `latitude` and `longitude` parameters from the `CAPPluginCall` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@objc func openMap(_ call: CAPPluginCall) {\n  let latitude = call.getString(\"latitude\")\n  let longitude = call.getNumber(\"longitude\")\n\n  // more logic\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform to Capacitor Project\nDESCRIPTION: Command to add the Android platform to an existing Capacitor project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Hide Event Listener in TypeScript\nDESCRIPTION: Method to add a listener for keyboard hide events. Returns a plugin listener handle that can be used to remove the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Browser Plugin with npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @capacitor/browser plugin using npm, followed by synchronizing Capacitor plugins in a project. Required dependencies include npm and an initialized Capacitor project. The first command adds the browser plugin, and the second ensures the native platforms are updated. Inputs are provided through the command line and there is no code output.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/browser\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining FileInfo Interface in TypeScript\nDESCRIPTION: Describes the structure for file information returned by operations like `readdir` in the Capacitor Filesystem API. Includes properties like name, type ('file' or 'directory'), size in bytes, creation/modification times (in milliseconds), and the file's URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n'file' | 'directory'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnumber\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnumber\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnumber\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Swift for Capacitor Plugin\nDESCRIPTION: Illustrates different approaches to handle null values in Swift when working with Capacitor plugin calls. It shows both recommended and problematic ways of checking for null values in dictionaries and arrays.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif let value = call.getString(\"foo\") {\n    // GOOD: `value` is nil, so this block won't run\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif call.options[\"foo\"] != nil {\n    // BAD: the key returned a truthy `NSNull` object, so this block will run\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\") {\n    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually\n}\nif let values = call.getArray(\"bar\", Int?) {\n    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\").capacitor.replacingNullValues() as? [Int?] {\n    // GOOD: `values` is now cast to `Int?` with `nil` at index 2\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability with isPluginAvailable\nDESCRIPTION: Shows the isPluginAvailable function signature and how to check if a specific plugin is available on the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nisPluginAvailable: (name: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring BackgroundRunner Plugin in JSON\nDESCRIPTION: This JSON snippet shows how to configure the `BackgroundRunner` plugin within the `capacitor.config.json` file. It defines settings such as the runner's label, source file path (`src`), the event name it listens for (`event`), whether it should repeat (`repeat`), the repetition interval in minutes (`interval`), and if it should start automatically (`autoStart`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"BackgroundRunner\": {\n      \"label\": \"com.example.background.task\",\n      \"src\": \"runners/background.js\",\n      \"event\": \"myCustomEvent\",\n      \"repeat\": true,\n      \"interval\": 15,\n      \"autoStart\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Preferences Plugin at Runtime in TypeScript\nDESCRIPTION: API definition for the `configure` method. This asynchronous function allows runtime configuration of the Preferences plugin, primarily for setting the storage group via the `ConfigureOptions` object. Options that are `undefined` will not modify the current configuration. Returns a Promise that resolves when configuration is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure(options: ConfigureOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CopyResult and CopyOptions for Filesystem Plugin - TypeScript\nDESCRIPTION: Provides both the CopyResult output interface and the CopyOptions interface for defining input parameters to copy files or directories. Required fields in CopyOptions: from (source path), to (destination path), directory (source FilesystemDirectory), and optionally toDirectory for the destination directory. Used in Filesystem.copy(). Inputs direct the operation, and outputs describe the result (structure to be extended).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CopyResult {}\n\ninterface CopyOptions {\n  /** The existing file or directory */\n  from: string;\n  /** The destination file or directory */\n  to: string;\n  /** The FilesystemDirectory containing the existing file or directory */\n  directory: FilesystemDirectory;\n  /** The FilesystemDirectory containing the destination file or directory. If not supplied will use the 'directory' parameter as the destination */\n  toDirectory?: FilesystemDirectory;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientationWeb Plugin in TypeScript\nDESCRIPTION: Registers the ScreenOrientationWeb class as the web implementation of the ScreenOrientation plugin using Capacitor's registerPlugin function.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n  {\n    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Listeners for File Downloads in Capacitor with TypeScript\nDESCRIPTION: Function to add a listener for file download progress events. Takes an event name ('progress') and a callback function, returning a Promise that resolves with a PluginListenerHandle for managing the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'progress', listenerFunc: ProgressListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME for Android Studio in Bash - Bash\nDESCRIPTION: Exports the JAVA_HOME environment variable for Android builds, pointing to the JDK bundled with Android Studio on macOS. Required for resolving Java runtime errors during build or 'npx cap run android'. Should be added to environment files such as .zshrc or .bashrc to persist the setting. Input: none; output: sets environment variable for the current shell session or, if persisted, future sessions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=\\\"/Applications/Android Studio.app/Contents/jbr/Contents/Home\\\"\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Page Loaded Event Listener\nDESCRIPTION: Method to listen for page loaded events on Android and iOS, which fires when the initial URL finishes loading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Handling Capacitor Network Status Change Events with NgZone Context - Angular TypeScript\nDESCRIPTION: This TypeScript/Angular snippet demonstrates how to use Angular's NgZone to ensure change detection occurs when responding to Capacitor Network plugin events. It defines a constructor injecting the NgZone service and an ngOnInit method that adds a listener for network status changes. The listener's handler is wrapped in ngZone.run, which ensures the update to 'this.networkStatus' is detected and propagated by Angular. Required dependencies are Angular core's NgZone service and Capacitor's Network plugin. Key parameter is 'status' (from the plugin's event), and the output is the local component's 'networkStatus' state. Limitations: Listener logic must be contained within ngZone.run to maintain Angular reactivity.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/angular.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private ngZone: NgZone) { }\n\nasync ngOnInit() {\n  Network.addListener(\"networkStatusChange\", (status) => {\n    this.ngZone.run(() => {\n      // This code will run in Angular's execution context\n      this.networkStatus = status.connected ? \"Online\" : \"Offline\";\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering PWA Elements Loader in Angular (TypeScript)\nDESCRIPTION: Initializes and bootstraps the Angular app, then calls defineCustomElements to register PWA Elements for custom UI components. Requires @ionic/pwa-elements, Angular core modules, and your application module. Call defineCustomElements(window) only after the platform has been bootstrapped for correct initialization. Input modules are imported at the top, and the side effect is registering custom elements globally for your Angular app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/pwa-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n// Call the element loader after the platform has been bootstrapped\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Defining StateChangeListener Type Alias - TypeScript\nDESCRIPTION: Creates a type alias for a listener that receives AppState objects and returns void. Intended for subscribing to app state changes to react to backgrounding or resuming events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype StateChangeListener = (state: AppState) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Channel Configuration - TypeScript\nDESCRIPTION: Specifies the structure of a notification channel, used to group notifications in Android. Properties include channel ID, user-friendly name, description, optional sound file name, importance and visibility levels, notification lights, color, and vibration support. Designed to match Android NotificationChannel functionality and requires no dependencies. Primarily used for managing notification delivery characteristics on Android devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description?: string;\n  sound?: string;\n  importance?: Importance;\n  visibility?: Visibility;\n  lights?: boolean;\n  lightColor?: string;\n  vibration?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Cookies in TypeScript\nDESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.ts file using TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorCookies: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Getting Status Bar Information in Capacitor\nDESCRIPTION: TypeScript method signature for retrieving current status bar state information including visibility, style, color, and overlay settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<StatusBarInfoResult>\n```\n\n----------------------------------------\n\nTITLE: Listening for Watch Commands in Capacitor\nDESCRIPTION: Adds a listener for 'runCommand' events from a connected watch. The listener function receives a data object containing the command string sent by the watch. Returns a PluginListenerHandle that can be used to remove the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'runCommand', listenerFunc: (data: { command: string; }) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining LocalNotification Interface in TypeScript\nDESCRIPTION: This code snippet defines the LocalNotification interface with various properties for configuring notifications in Capacitor. It includes platform-specific options for both iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LocalNotification {\n  title: string;\n  body: string;\n  id: number;\n  schedule: LocalNotificationSchedule;\n  sound?: string;\n  smallIcon?: string;\n  iconColor?: string;\n  attachments?: LocalNotificationAttachment[];\n  actionTypeId?: string;\n  extra?: any;\n  threadIdentifier?: string;\n  summaryArgument?: string;\n  group?: string;\n  groupSummary?: boolean;\n  channelId?: string;\n  ongoing?: boolean;\n  autoCancel?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Content using Capacitor Share Plugin\nDESCRIPTION: Demonstrates importing the `Share` object from `@capacitor/share` and calling the `share` method to trigger the native sharing dialog. It includes options for setting the title, text, URL, and dialog title (Android only).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/share.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Share } from '@capacitor/share';\n\nawait Share.share({\n  title: 'See cool stuff',\n  text: 'Really awesome thing you need to see right meow',\n  url: 'http://ionicframework.com/',\n  dialogTitle: 'Share with buddies',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GetUriOptions Interface in TypeScript\nDESCRIPTION: Specifies the options for the `getUri` operation in the Capacitor Filesystem API. It requires the path of the file and the base `Directory` enumeration value where the file resides.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\n----------------------------------------\n\nTITLE: Reading from the Clipboard Using the read Method - Capacitor Clipboard Plugin (TypeScript)\nDESCRIPTION: Describes the signature and functionality of the read method from the Capacitor Clipboard API for reading clipboard contents in TypeScript. The method returns a promise resolving to a ReadResult object, which contains the clipboard's value (string) and its type (string). Requires the Clipboard plugin dependency and is used for implementing paste functionality in Capacitor applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/clipboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nread() => Promise<ReadResult>\n```\n\n----------------------------------------\n\nTITLE: Adding a browserPageLoaded Event Listener with Browser.addListener - TypeScript\nDESCRIPTION: This snippet shows how to add an event listener for the 'browserPageLoaded' event via Browser.addListener. It works only on Android and iOS platforms and calls the listener function when the initially opened URL finishes loading. Accepts 'browserPageLoaded' as eventName and a callback as listenerFunc, returning a Promise of PluginListenerHandle. Inputs: event name and callback; Output: triggered callback.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Capacitor configuration file using TypeScript. It imports the CapacitorConfig type, defines a configuration object with essential properties like appId, appName, and webDir, and exports the configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/config.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.company.appname',\n  appName: 'My Capacitor App',\n  webDir: 'www',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring CapacitorHttp Plugin in TypeScript\nDESCRIPTION: Configuration example for the CapacitorHttp plugin in capacitor.config.ts to enable patching of fetch and XMLHttpRequest.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorHttp: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Checking for Native Execution with Capacitor.isNativePlatform in TypeScript\nDESCRIPTION: Shows how to use `Capacitor.isNativePlatform()` to check if the application is running as a native installed app (iOS or Android) versus running in a web browser or as a PWA. It returns `true` for native platforms and `false` otherwise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  console.log(\"I'm a native app!\");\n} else {\n  console.log(\"I'm a PWA or Web app!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Live Reload for Capacitor Apps with Ionic CLI (Bash)\nDESCRIPTION: Uses the `ionic cap run` command with the `-l` (live reload) and `--external` flags to start a Live Reload server for Android or iOS Capacitor projects. This builds the app, copies assets, opens the native IDE, and enables live updates in the WebView.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run android -l --external\nionic cap run ios -l --external\n```\n\n----------------------------------------\n\nTITLE: Querying Network Status Via Plugin API - TypeScript\nDESCRIPTION: This snippet provides a TypeScript API definition for the getStatus method of the Capacitor Network plugin. It defines a function that returns a Promise resolving to the network connection status object (ConnectionStatus interface), useful for determining network availability and connection type. Dependencies include the Capacitor Network plugin, with the key parameter being none (method takes no input). Output is an object detailing connectivity state and type, and the method is asynchronous. The interface imposes no constraints beyond proper plugin installation and usage of Promise-based API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/network.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus() => Promise<ConnectionStatus>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Handling and Control in TypeScript\nDESCRIPTION: Example showing how to listen for keyboard events using both Capacitor Keyboard plugin and window events, plus basic keyboard control like showing/hiding and configuring the accessory bar.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins, KeyboardInfo } from '@capacitor/core';\n\nconst { Keyboard } = Plugins;\n\n// Keyboard Plugin Events\n\nKeyboard.addListener('keyboardWillShow', (info: KeyboardInfo) => {\n  console.log('keyboard will show with height', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', (info: KeyboardInfo) => {\n  console.log('keyboard did show with height', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n\n// window events\n\nwindow.addEventListener('keyboardWillShow', (e) => {\n  console.log('keyboard will show with height', (<any>e).keyboardHeight);\n});\n\nwindow.addEventListener('keyboardDidShow', (e) => {\n  console.log('keyboard did show with height', (<any>e).keyboardHeight);\n});\n\nwindow.addEventListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nwindow.addEventListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n\n// API\n\nKeyboard.setAccessoryBarVisible({ isVisible: false });\n\nKeyboard.show();\n\nKeyboard.hide();\n```\n\n----------------------------------------\n\nTITLE: Mocking Storage Plugin in Jasmine Tests with TypeScript\nDESCRIPTION: This snippet shows how to mock and spy on the Storage plugin methods in Jasmine tests using TypeScript. It includes examples of mocking get and clear methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/mocking-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nit(\"gets the first and last name\", async () => {\n  spyOn(Storage, 'get');\n  (Storage.get as any)\n    .withArgs({ key: 'firstName' })\n    .and.returnValue(Promise.resolve({ value: 'Jason' }));\n  (Storage.get as any)\n    .withArgs({ key: 'lastName' })\n    .and.returnValue(Promise.resolve({ value: 'Jones' }));\n\n  fixture.detectChanges();\n  await fixture.whenRenderingDone();\n\n  expect(component.firstName).toEqual('Jason');\n  expect(component.lastName).toEqual('Jones');\n});\n\nit('clears the storage', () => {\n  spyOn(Storage, 'clear');\n  click(clear.nativeElement);\n  fixture.detectChanges();\n  expect(Storage.clear).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners - removeAllListeners Method - TypeScript\nDESCRIPTION: Provides the method signature for removing all listeners—including those for network status changes—using the Capacitor Network plugin in TypeScript. Returns a promise that resolves to void, indicating no value is returned. This method ensures that event handlers are cleared, which is important for preventing memory leaks in long-lived applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/network.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in MainActivity\nDESCRIPTION: Shows how to register the custom Echo plugin in the Android MainActivity class using the registerPlugin method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n+        registerPlugin(EchoPlugin.class);\n         super.onCreate(savedInstanceState);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Dependencies via npm in Bash\nDESCRIPTION: These npm commands upgrade the Capacitor core packages (`@capacitor/core`, `@capacitor/ios`, and `@capacitor/android`) as well as the CLI, ensuring that all parts are up-to-date and on matching versions. Use these for easy upgrades or maintenance of Capacitor projects. Run within a Node.js project with npm installed. No arguments are needed besides the package names. Outputs updated dependency versions in `package.json`; mismatched versions may cause runtime issues.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core @capacitor/ios @capacitor/android\nnpm i -D @capacitor/cli\n\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from iOS Capacitor Plugin\nDESCRIPTION: Shows how to emit custom events from a Swift Capacitor plugin class. These events can be listened to by the TypeScript code in the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nself.notifyListeners(\"myPluginEvent\", data: [:])\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Elements in Angular Module\nDESCRIPTION: Shows how to import `CUSTOM_ELEMENTS_SCHEMA` from `@angular/core` and add it to the `schemas` array in an `@NgModule` decorator. This prevents Angular compiler errors when using the `<capacitor-google-map>` web component, acknowledging it as a valid custom element.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@NgModule({\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag Listener in TypeScript\nDESCRIPTION: Sets a listener for when a marker is being dragged. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms in Capacitor using Bash\nDESCRIPTION: Commands to add iOS and Android platforms to a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Click Listener in TypeScript for Google Maps\nDESCRIPTION: This function sets up a listener for clicks on the user's current location marker on a Google Map. It takes an optional callback function that receives map click data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications Plugin via capacitor.config.ts - TypeScript\nDESCRIPTION: Demonstrates how to configure default Local Notifications settings in capacitor.config.ts using TypeScript syntax. Requires the @capacitor/local-notifications and @capacitor/cli packages. The plugin configuration is placed inside the exported CapacitorConfig object, specifying smallIcon, iconColor, and sound properties. The config file is used by Capacitor to apply plugin settings at build time. Input: none. Output: TypeScript-based configuration for plugin initialization.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\\\"@capacitor/local-notifications\\\" />\\n\\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    LocalNotifications: {\\n      smallIcon: \\\"ic_stat_icon_config_sample\\\",\\n      iconColor: \\\"#488AFF\\\",\\n      sound: \\\"beep.wav\\\",\\n    },\\n  },\\n};\\n\\nexport default config;\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Channels (Android) - Capacitor Plugin API - TypeScript\nDESCRIPTION: This snippet presents the listChannels method, used to retrieve all notification channels currently configured on an Android device. The method returns a Promise that resolves to a ListChannelsResult object with an array of channel details. There are no input parameters, and the output helps developers manage or display available channels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Keyboard Plugin via npm\nDESCRIPTION: Shows the commands to install the `@capacitor/keyboard` plugin using npm and then synchronize the Capacitor project with the native platforms using `npx cap sync`. These commands are typically run in a terminal within the project directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/keyboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Disabling Marker Clustering on Map - TypeScript\nDESCRIPTION: Disables the marker clustering feature on the map. Useful for displaying all markers individually. The function is asynchronous with no inputs and returns a void Promise, presuming clustering is already enabled and supported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndisableClustering() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining BatteryInfo Interface in TypeScript\nDESCRIPTION: Introduces the BatteryInfo interface, modeling device battery status for use with the Capacitor Battery API. Exposes normalized battery level (0 to 1) and charging status as a boolean. To be consumed by plugins or applications checking battery state, requiring TypeScript and platform capability for such metrics.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BatteryInfo {\n  batteryLevel: number;    // Fractional charge percentage, 0 to 1\n  isCharging: boolean;     // True if device is currently charging\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Notification Actions in Capacitor\nDESCRIPTION: Sets up a listener for when an action is performed on a notification. Takes an event name and a callback function that receives the action data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationActionPerformed', listenerFunc: (notificationAction: ActionPerformed) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Using Toast Notification in TypeScript\nDESCRIPTION: Example of how to import and use the Toast API to display a simple notification with text content.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from '@capacitor/toast';\n\nconst showHelloToast = async () => {\n  await Toast.show({\n    text: 'Hello!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Echo Plugin with Objective-C Bridge\nDESCRIPTION: Objective-C bridge code required to register the Echo plugin with Capacitor's runtime, making it accessible to JavaScript code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(EchoPlugin, \"Echo\",\n    CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the configuration options for a notification channel, including ID, name, sound, importance level, visibility, and other display options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description: string;\n  sound: string;\n  importance: Importance;\n  visibility: Visibility;\n  lights: boolean;\n  lightColor: string;\n  vibration: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Completions for Plugin Calls in Capacitor (Java)\nDESCRIPTION: Demonstrates how to call the `setKeepAlive(true)` method on a `PluginCall` instance in Java. This informs the Capacitor bridge to preserve the call, allowing `resolve()` or `reject()` to be invoked multiple times for scenarios like callbacks or data streaming. Setting this flag also automatically saves the call via `saveCall()`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n```java\ncall.setKeepAlive(true);\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Vue, VueRouter, and Capacitor App API for Deep Link Handling (TypeScript)\nDESCRIPTION: This snippet imports the necessary dependencies to configure routing and deep link handling in a Vue app using TypeScript. It includes the App plugin from @capacitor/app for event handling and Vue Router for navigation. These imports are prerequisites for integrating deep linking based on incoming URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n```\n\n----------------------------------------\n\nTITLE: Declaring Notification Channel Interface - TypeScript\nDESCRIPTION: Defines a TypeScript interface to represent the structure of a notification channel as used by Capacitor, detailing properties such as id, name, description, sound, importance, and visual behavior. Dependencies include standard TypeScript syntax and custom types like Importance and Visibility. Used as a schema for creating or listing local notification channels, it expects string and boolean values, with some fields being required for proper channel setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string; // The channel identifier\n  name: string; // Human-friendly name presented to the user\n  description: string; // Description presented to the user\n  sound: string; // File name relative to res/raw (Android), can be empty\n  importance: Importance; // Level of interruption for notifications\n  visibility: Visibility; // Lock screen visibility of notifications\n  lights: boolean; // Show notification lights or not\n  lightColor: string; // Light color for notifications, #RRGGBB or #RRGGBBAA\n  vibration: boolean; // Whether notifications vibrate\n}\n```\n\n----------------------------------------\n\nTITLE: API Definition: requestPermissions Method (TypeScript)\nDESCRIPTION: TypeScript signature for the `requestPermissions` method. This function prompts the user to grant location permissions, optionally accepting a `GeolocationPluginPermissions` object to specify which permissions to request. It returns a Promise resolving to a `PermissionStatus` object reflecting the outcome of the request. It will throw an error if the system's location services are disabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(permissions?: GeolocationPluginPermissions | undefined) => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Fetching Photos from Library in TypeScript\nDESCRIPTION: Method to retrieve photos from the user's photo library with optional parameters for quantity, thumbnail specifications, types and album filtering.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/photos.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetPhotos(options?: PhotosFetchOptions) => Promise<PhotosResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Capacitor CLI for Migration\nDESCRIPTION: Command to install the latest version of the Capacitor CLI as a development dependency in your project, which is required for the migration to Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @capacitor/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Dynamic Watch Data\nDESCRIPTION: TypeScript example showing how to update dynamic variables in the Watch UI by using the updateWatchData method with a state object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvar stateData = {\n  number: 0\n}\n\nasync function counterIncrement() {\n  stateData.counter++  \n  await Watch.updateWatchData({\"data\": convertValuesOfObjectToStringValues(stateData)})\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Filesystem Permissions with Capacitor Filesystem API (requestPermissions)\nDESCRIPTION: Defines the `requestPermissions` method signature from the Capacitor Filesystem API. This asynchronous function prompts the user to grant read/write permissions, primarily required on Android when using `Directory.Documents` or `Directory.ExternalStorage`. It returns a Promise resolving to a `PermissionStatus` object reflecting the outcome of the request.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI and native-run for Live Reload\nDESCRIPTION: Command to install Ionic CLI and native-run globally for Live Reload functionality in Capacitor apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/live-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli native-run\n```\n\n----------------------------------------\n\nTITLE: Removing All Network Status Listeners - TypeScript\nDESCRIPTION: This snippet documents the removeAllListeners method for the Capacitor Network plugin, which unregisters all active event listeners, including those for network status changes. There are no parameters and the method returns a Promise resolving to void, indicating completion. Usage ensures that all callbacks are properly detached, with the only requirement being the plugin itself. This helps with resource cleanup and ensures no lingering event callbacks; constraints include that removal applies to all listeners of this plugin only.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/network.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on Android Device\nDESCRIPTION: This command builds and runs a debug version of the Capacitor application on an Android device. It provides a convenient way to test Android functionality during development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Enabling Marker Clustering on Map - TypeScript\nDESCRIPTION: Enables clustering functionality for map markers asynchronously. No parameters are required. Intended for use in scenarios with multiple close-proximity markers for enhanced readability. Returns a void Promise and expects marker clustering capabilities provided by the underlying map library.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenableClustering() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Returning Structured Data from Plugin in Swift\nDESCRIPTION: Shows how to return a complex data structure (a dictionary containing a boolean and another nested dictionary) back to the JavaScript caller upon successful completion of a plugin method. The `call.resolve()` method accepts a dictionary containing JSON-serializable data types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])\n```\n\n----------------------------------------\n\nTITLE: Complete AppDelegate Implementation for Firebase Push Notifications\nDESCRIPTION: Full implementation of AppDelegate.swift with Firebase initialization and push notification handling\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport FirebaseCore\nimport FirebaseMessaging\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    FirebaseApp.configure()\n    return true\n  }\n\n  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Messaging.messaging().apnsToken = deviceToken\n    Messaging.messaging().token(completion: { (token, error) in\n      if let error = error {\n          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n      } else if let token = token {\n          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n      }\n    })\n  }\n\n  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Commands in Foreground\nDESCRIPTION: TypeScript code to listen for commands from the watch in the foreground using the Watch plugin's event system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nWatch.addListener(\"runCommand\", (data: {command: string}) => {\n  console.log(\"PHONE got command - \" + data.command);\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Local Plugin Link and Install Commands using Bash\nDESCRIPTION: Shows the commands to link the globally linked plugin (`plugin-name`) into the current application project and install its dependencies. This sets up the application to use the local version of the plugin for testing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm link plugin-name\n$ npm install plugin-name\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Plugin Base in Swift\nDESCRIPTION: Initial Swift implementation of the ScreenOrientationPlugin class that extends CAPPlugin with stub methods for orientation, lock, and unlock functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Capacitor\n\n@objc(ScreenOrientationPlugin)\npublic class ScreenOrientationPlugin: CAPPlugin {\n\n  @objc public func orientation(_ call: CAPPluginCall) {\n    call.resolve()\n  }\n\n  @objc public func lock(_ call: CAPPluginCall) {\n    call.resolve()\n  }\n\n  @objc public func unlock(_ call: CAPPluginCall) {\n    call.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Call Data in Swift\nDESCRIPTION: This snippet demonstrates how to access different types of data passed from JavaScript to a Capacitor plugin method, including optional values and required parameters with guards.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBool(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugins in Capacitor\nDESCRIPTION: Commands to install a Cordova plugin and sync it with the native project in Capacitor. This process involves using npm to install the plugin and then running the Capacitor sync command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Getting Preferred Text Zoom Level\nDESCRIPTION: TypeScript method to retrieve the preferred text zoom level, which is represented as a decimal value (e.g., 1.2 is 120%).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/text-zoom.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreferred() => Promise<GetPreferredResult>\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Runner in TypeScript\nDESCRIPTION: TypeScript configuration example for Background Runner plugin showing type-safe configuration with the same parameters as the JSON version, including type reference for proper TypeScript support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/background-runner\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    BackgroundRunner: {\n      label: \"com.example.background.task\",\n      src: \"runners/background.js\",\n      event: \"myCustomEvent\",\n      repeat: true,\n      interval: 15,\n      autoStart: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: Defines the PluginListenerHandle interface with a single 'remove' method that returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Device API Method Signatures\nDESCRIPTION: TypeScript interface definitions for the Device API methods including getInfo(), getBatteryInfo(), and getLanguageCode(). Shows the return types and Promise structures for each method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/device.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<DeviceInfo>\n\ngetBatteryInfo() => Promise<DeviceBatteryInfo>\n\ngetLanguageCode() => Promise<DeviceLanguageCodeResult>\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Methods in Java\nDESCRIPTION: Java implementation example for a void return method in an Android Capacitor plugin using the @PluginMethod annotation with RETURN_NONE return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_NONE)\npublic void method1(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Taking a Picture with Capacitor Camera in TypeScript\nDESCRIPTION: Example TypeScript function demonstrating how to use the `Camera.getPhoto` method to take a picture or select one from the gallery. It configures options like quality, editing, and result type (Uri). The returned image's `webPath` is suitable for use as an image source.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera, CameraResultType } from '@capacitor/camera';\n\nconst takePicture = async () => {\n  const image = await Camera.getPhoto({\n    quality: 90,\n    allowEditing: true,\n    resultType: CameraResultType.Uri\n  });\n\n  // image.webPath will contain a path that can be set as an image src.\n  // You can access the original file using image.path, which can be\n  // passed to the Filesystem API to read the raw data of the image,\n  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n  var imageUrl = image.webPath;\n\n  // Can be set to the src of an image now\n  imageElement.src = imageUrl;\n};\n```\n\n----------------------------------------\n\nTITLE: Running cap sync with Capacitor CLI commands in Bash\nDESCRIPTION: Demonstrates how to execute the 'npx cap sync' command in a terminal to synchronize Capacitor's native project files. The command can take optional platform names ('android', 'ios') and options like '--deployment' to control pod installation behavior or '--inline' for JavaScript source map inlining. Requires Node.js, npm, and Capacitor CLI to be installed; input parameters adjust which platform(s) and sync mode are used. Standard output and error reporting follow Bash conventions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync [options] [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Capacitor Plugin in Java\nDESCRIPTION: This Java code defines a simple Capacitor plugin named 'Echo'. It uses the `@CapacitorPlugin` annotation to register the plugin name and extends the `Plugin` class. The `@PluginMethod` annotation marks the `echo` method as callable from JavaScript. This method retrieves a string value from the `PluginCall`, creates a `JSObject` to hold the return value, and sends it back to the caller using `call.resolve()`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Share API Method: share\nDESCRIPTION: Method to display a Share modal for sharing content with other apps. Takes ShareOptions as parameter and returns a Promise with ShareResult.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/share.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshare(options: ShareOptions) => Promise<ShareResult>\n```\n\n----------------------------------------\n\nTITLE: Modifying the Podfile to Add Firebase Messaging - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to add the Firebase/Messaging pod to the iOS project's Podfile within the 'App' target. This enables Firebase push notification support using CocoaPods. Dependencies: CocoaPods, Capacitor, and Firebase libraries. Key parameter: 'Firebase/Messaging' specifies the messaging SDK. Outputs: Ensures Firebase Messaging will be installed on next pod install or update. Limitation: The Podfile must match the project's structure and be edited in the correct target.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'Firebase/Messaging' # Add this line\nend\n\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Idle Listener in TypeScript\nDESCRIPTION: Sets a listener for when the camera becomes idle. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCameraIdleListener(callback?: MapListenerCallback<CameraIdleCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Saving Credentials on iOS using Capacitor Plugin\nDESCRIPTION: TypeScript code for saving credentials on iOS using the capacitor-ios-autofill-save-password plugin after successful login.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/autofill-credentials.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n    await SavePassword.promptDialog({\n        username: '[the username that was entered]',\n        password: '[the password that was entered]'\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration in capacitor.config.ts (TypeScript)\nDESCRIPTION: Example structure of a Capacitor configuration file (`capacitor.config.ts`) showing how to define custom configuration values (`style`, `iconColor`) for a plugin (`MyCoolPlugin`) within the `plugins` object. These values can be accessed by the plugin's native code at runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  appId: 'com.company.app',\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: '#FF0000'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the OperatingSystem Type Alias in TypeScript\nDESCRIPTION: Establishes the OperatingSystem type alias, enumerating supported platform names as string literal union types ('ios', 'android', 'windows', 'mac', 'unknown'). Used throughout the interfaces to normalize possible OS values. No runtime dependency; purely a compile-time TypeScript type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype OperatingSystem = 'ios' | 'android' | 'windows' | 'mac' | 'unknown';\n```\n\n----------------------------------------\n\nTITLE: Returning Data to JavaScript in Capacitor Android Plugins\nDESCRIPTION: Shows how to return data back to JavaScript by creating and populating a JSObject with various data types, then resolving the plugin call with that object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"added\", true);\nJSObject info = new JSObject();\ninfo.put(\"id\", \"unique-id-1234\");\nret.put(\"info\", info);\ncall.resolve(ret);\n```\n\n----------------------------------------\n\nTITLE: Installing Geolocation Plugin via NPM\nDESCRIPTION: Commands to install the Capacitor Geolocation plugin and sync the native projects\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/geolocation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Android App via Capacitor CLI\nDESCRIPTION: Uses the Capacitor CLI (`npx cap`) command `run` to build and deploy the Capacitor application to a connected Android device or emulator. The command handles the synchronization of web assets, building the native project, and launching the app, prompting for target selection if needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Running the Capacitor Sync Command\nDESCRIPTION: Command to synchronize web app with native platforms by running 'copy' and 'update' commands. Accepts an optional platform parameter and supports options for deployment and inline JavaScript source maps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync [options] [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Functionality for Capacitor Plugin in Java\nDESCRIPTION: This Java code demonstrates how to implement the 'openMap' method for Android in the EchoPlugin.java file. It uses the @PluginMethod annotation and handles plugin call resolution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void openMap(PluginCall call) {\n  Double latitude = call.getDouble(\"latitude\");\n  Double longitude = call.getDouble(\"longitude\");\n\n  // more logic\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing In-App Purchase Plugin for Capacitor\nDESCRIPTION: This snippet shows how to install the cordova-plugin-purchase plugin and update Capacitor. This plugin is essential for implementing In-App Purchases in a Capacitor app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/in-app-purchases.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-purchase\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Cordova Plugin Dependencies in package.json\nDESCRIPTION: Example of Cordova plugin dependencies in package.json that Capacitor will automatically install into each new native project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"@ionic-native/camera\": \"^5.3.0\",\n    \"@ionic-native/core\": \"^5.3.0\",\n    \"@ionic-native/file\": \"^5.3.0\",\n    \"cordova-android\": \"8.0.0\",\n    \"cordova-ios\": \"5.0.0\",\n    \"cordova-plugin-camera\": \"4.0.3\",\n    \"cordova-plugin-file\": \"6.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Capacitor Plugin Events in Angular NgZone\nDESCRIPTION: This code demonstrates how to properly handle Capacitor plugin events within Angular's NgZone execution context. It uses the Network plugin as an example, wrapping the event handler in ngZone.run() to ensure Angular's change detection is triggered when updating properties.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/angular.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private ngZone: NgZone) { }\n\nasync ngOnInit() {\n  Network.addListener(\"networkStatusChange\", (status) => {\n    this.ngZone.run(() => {\n      // This code will run in Angular's execution context\n      this.networkStatus = status.connected ? \"Online\" : \"Offline\";\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an Android Activity for Result in a Capacitor Plugin using Java\nDESCRIPTION: Provides a full example of launching an Android Activity using `startActivityForResult` within a Capacitor plugin method (`pickImage`) and handling the result in a separate callback method (`pickImageResult`) annotated with `@ActivityCallback`. The `startActivityForResult` method links the initial call to the callback method by name. The callback receives the original `PluginCall` and the `ActivityResult`. Depends on Capacitor Plugin API and Android SDK.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin()\nclass ImagePicker extends Plugin {\n\n  @PluginMethod()\n  public void pickImage(PluginCall call) {\n    Intent intent = new Intent(Intent.ACTION_PICK);\n    intent.setType(\"image/*\");\n\n    // Start the Activity for result using the name of the callback method\n    startActivityForResult(call, intent, \"pickImageResult\");\n  }\n\n  @ActivityCallback\n  private void pickImageResult(PluginCall call, ActivityResult result) {\n    if (call == null) {\n      return;\n    }\n\n    // Do something with the result data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Status Bar setOverlaysWebView Method Definition\nDESCRIPTION: TypeScript definition for the setOverlaysWebView method, which configures whether the status bar overlays the webview on Android devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetOverlaysWebView(options: SetOverlaysWebViewOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in JSON\nDESCRIPTION: JSON configuration example for the Keyboard plugin in capacitor.config.json\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"DARK\",\n      \"resizeOnFullScreen\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Capacitor Project - Bash\nDESCRIPTION: Runs the build process for a Capacitor project using the npm script defined in the app. This step compiles the web assets, a prerequisite before adding native platforms or running platform-specific commands. Requires a valid npm script named 'build' and all prerequisites for the Capacitor build process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Notification Attachment Options Interface\nDESCRIPTION: TypeScript interface for iOS-specific notification attachment configuration options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AttachmentOptions {\n  iosUNNotificationAttachmentOptionsTypeHintKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailHiddenKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailClippingRectKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailTimeKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Limited Library Photos Method Definitions\nDESCRIPTION: TypeScript API definitions for managing the limited photo library selection on iOS 14+, including methods to pick and retrieve limited library photos.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npickLimitedLibraryPhotos() => Promise<GalleryPhotos>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetLimitedLibraryPhotos() => Promise<GalleryPhotos>\n```\n\n----------------------------------------\n\nTITLE: Building Native Projects with Capacitor CLI in Bash\nDESCRIPTION: This snippet demonstrates the use of the Capacitor CLI 'cap build' command from a bash shell to create signed binary artifacts (AAB, APK for Android, IPA for iOS). It requires Node.js, npm, Capacitor CLI, and appropriate Android or iOS development environments. Parameters include the target platform and build options such as scheme, flavor, keystore information, and release type. The command expects a valid Capacitor project structure and appropriate configuration to generate the output files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap build [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from PluginCall in Capacitor Java\nDESCRIPTION: This snippet shows how to read various data types from the PluginCall object in a Capacitor plugin method using Java. It pulls strings, objects, and booleans using convenience methods and validates required fields before resolving or rejecting. It depends on the Capacitor Android runtime, with dependencies on PluginCall and JSObject. Parameters include 'yourName', 'address', 'isAwesome', and a required 'id' field.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\\npublic void storeContact(PluginCall call) {\\n  String name = call.getString(\"yourName\", \"default name\");\\n  JSObject address = call.getObject(\"address\", new JSObject());\\n  boolean isAwesome = call.getBoolean(\"isAwesome\", false);\\n\\n  if (!call.getData().has(\"id\")) {\\n    call.reject(\"Must provide an id\");\\n    return;\\n  }\\n  // ...\\n\\n  call.resolve();\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Visibility Listener in Capacitor (TypeScript)\nDESCRIPTION: This function registers an asynchronous listener for the 'keyboardDidHide' event using Capacitor's plugin system. It requires the event name, which must be 'keyboardDidHide', and a callback function to be invoked when the keyboard is hidden. Returns a Promise resolving to a PluginListenerHandle, used for later removal. The listener is Promise-based and integrates with Capacitor's event management. Dependencies include the Capacitor runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Native Swift Code\nDESCRIPTION: This snippet defines two overloads of triggerJSEvent for firing events on the JavaScript runtime from the native layer. Events can be dispatched to any EventTarget (like window or document), and data should be serialized as a JSON string. To use this, the bridge instance and correct event parameters are required; data is optional but must be valid JSON when provided.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc triggerJSEvent(eventName: String, target: String)\nfunc triggerJSEvent(eventName: String, target: String, data: String)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Screen Orientation Change in React (TypeScript)\nDESCRIPTION: This snippet shows how to set up a state variable for screen orientation and add a listener for orientation changes using the ScreenOrientation API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/using-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst [orientation, setOrientation] = useState<string>('');\n\nScreenOrientation.addListener('screenOrientationChange', res =>\n  setOrientation(res.type),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Markers to Map\nDESCRIPTION: Adds multiple markers to the map and returns a Promise with an array of marker IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\naddMarkers(markers: Marker[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Using Action Sheet in TypeScript\nDESCRIPTION: Example of how to use the Action Sheet API to show a modal with options for the user to select. It demonstrates creating an async function to display the action sheet and handle the result.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/action-sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';\n\nconst showActions = async () => {\n  const result = await ActionSheet.showActions({\n    title: 'Photo Options',\n    message: 'Select an option to perform',\n    options: [\n      {\n        title: 'Upload',\n      },\n      {\n        title: 'Share',\n      },\n      {\n        title: 'Remove',\n        style: ActionSheetButtonStyle.Destructive,\n      },\n    ],\n  });\n\n  console.log('Action Sheet result:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Device Identifier - Capacitor Device - TypeScript\nDESCRIPTION: This TypeScript function signature documents the getId method, which returns a Promise resolving to a DeviceId object. This method provides a unique identifier for the device, which may be vendor- or implementation-dependent per platform. It requires the @capacitor/device dependency and is used asynchronously. No input parameters; output is a Promise of an object containing the universally unique identifier (UUID) for the device, with platform-specific behaviors noted in the full documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetId() => Promise<DeviceId>\n```\n\n----------------------------------------\n\nTITLE: Including Capacitor Runtime in HTML - HTML\nDESCRIPTION: Demonstrates how to include the capacitor.js runtime in an HTML file by adding a script tag referencing the bundled Capacitor runtime before any application scripts. This method is used when the project does not utilize a build system or module loader, ensuring Capacitor APIs are available globally in your app. The path should match the location where capacitor.js was synced.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"capacitor.js\\\"></script>\\n<script src=\\\"your/app.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Mock for Storage Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a manual mock for the Capacitor Storage plugin. It defines a plain JavaScript object with async methods that mimic the plugin's API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/mocking-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Storage = {\n  async get(data: { key: string }): Promise<{ value: string | undefined }> {\n    return { value: undefined };\n  },\n\n  async set(data: { key: string; value: string }): Promise<void> {},\n  async clear(): Promise<void> {},\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Android Bridge in Java\nDESCRIPTION: Exposes bridge methods to fire JavaScript events from Android native code to the WebView (e.g., 'window' or 'document'). Accepts event name, target, and optional data (JSON-serialized string). Useful for custom cross-environment communication, but plugin events are preferred for standard cases. Data must be a stringified JSON value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void triggerJSEvent(final String eventName, final String target)\npublic void triggerJSEvent(final String eventName, final String target, final String data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device and Battery Information with Capacitor Device Plugin\nDESCRIPTION: Demonstrates importing the `Device` module from `@capacitor/device` and defining asynchronous functions `logDeviceInfo` and `logBatteryInfo` to fetch and log device information (model, OS, etc.) and battery status (charge level, charging state) respectively using the `Device.getInfo()` and `Device.getBatteryInfo()` methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Device } from '@capacitor/device';\n\nconst logDeviceInfo = async () => {\n  const info = await Device.getInfo();\n\n  console.log(info);\n};\n\nconst logBatteryInfo = async () => {\n  const info = await Device.getBatteryInfo();\n\n  console.log(info);\n};\n```\n\n----------------------------------------\n\nTITLE: Path Mapping Configuration in tsconfig.spec.json for Jasmine\nDESCRIPTION: JSON configuration for Angular projects using Jasmine, demonstrating how to set up TypeScript path mapping to redirect Capacitor imports to mock implementations during testing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/mocking-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"]\n    },\n```\n\nLANGUAGE: JSON\nCODE:\n```\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"],\n      \"@test/*\": [\"test/*\"],\n      \"@capacitor/*\": [\"__mocks__/@capacitor/*\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: Clipboard Write Method Type Definition\nDESCRIPTION: TypeScript definition for the write method which copies data to the system clipboard.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/clipboard.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwrite(options: WriteOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Syncing Capacitor Web Assets\nDESCRIPTION: Command to copy Capacitor runtime bundle into web assets directory\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync web\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Storage API for Set, Get, and Remove in TypeScript\nDESCRIPTION: This TypeScript snippet imports the Storage plugin from @capacitor/storage, and defines three async functions: setName (to store a key/value pair), checkName (to retrieve the value for a key and log a message), and removeName (to remove a key from storage). The code demonstrates accessing the Storage API's asynchronous methods and interacting with persistent storage. Dependencies include the @capacitor/storage plugin installed in your project. Inputs include the 'name' key and corresponding value, and outputs are persisted storage changes and a console log output upon retrieval. All values stored via Storage.set must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Storage } from '@capacitor/storage';\\n\\nconst setName = async () => {\\n  await Storage.set({\\n    key: 'name',\\n    value: 'Max',\\n  });\\n};\\n\\nconst checkName = async () => {\\n  const { value } = await Storage.get({ key: 'name' });\\n\\n  console.log(`Hello ${value}!`);\\n};\\n\\nconst removeName = async () => {\\n  await Storage.remove({ key: 'name' });\\n};\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Native Project in Xcode using Capacitor CLI in Bash\nDESCRIPTION: This Bash snippet demonstrates opening the iOS portion of a Capacitor project in Xcode using the Capacitor CLI. It is designed for developers who want to manage or modify the iOS native code, access Xcode\\'s IDE features, or build/release directly from Xcode. Requires the iOS platform to have been added to the project, and Xcode installed. Upon execution, Xcode should launch with the `.xcworkspace` project opened.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n\n```\n\n----------------------------------------\n\nTITLE: Setting Map Padding - TypeScript\nDESCRIPTION: Adjusts padding on map edges, potentially for overlaying UI elements without obscuring the map. Accepts a MapPadding object and returns a void Promise. Dependent on MapPadding type and map dimensions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nsetPadding(padding: MapPadding) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Method in Objective-C\nDESCRIPTION: Objective-C implementation of a void return method for iOS platform using the CAP_PLUGIN_METHOD macro with CAPPluginReturnNone return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Permissions in Capacitor\nDESCRIPTION: This method allows checking the current state of a permission without triggering a permission prompt. It returns a promise with the permission state which can be 'denied', 'granted', or 'prompt'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/permissions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nquery(options: PermissionsOptions) => Promise<PermissionResult>\n```\n\n----------------------------------------\n\nTITLE: Copying Web Assets using Capacitor CLI (Bash)\nDESCRIPTION: This Bash command initiates the Capacitor CLI's 'copy' operation, transferring the web app build and configuration files into the specified native platform project (such as Android or iOS). Requires the Capacitor CLI installed (usually via npm), and should be run from the project root. The optional 'platform' parameter restricts the copy to 'android' or 'ios'. Running this command ensures that native builds have the latest web assets and configuration. Output includes build status and error messages if the platform is misconfigured or missing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Defining the CapacitorHttp `request` Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the generic `request` method of the CapacitorHttp API. It takes an `HttpOptions` object as input and returns a `Promise` that resolves with an `HttpResponse`. This method allows making any type of HTTP request using native libraries by specifying the method within the options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrequest(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Getting App State with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet documents the getState() method, which retrieves current app state information (e.g., active/inactive). Dependencies: Capacitor App plugin. Input: none. Output: Promise<AppState> object with state info. Since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetState() => Promise<AppState>\n```\n\n----------------------------------------\n\nTITLE: Haptics Impact Feedback Method Signature - TypeScript\nDESCRIPTION: Defines the method signature for the impact function, which triggers a device haptic for simulated collisions of varying intensity. Accepts optional ImpactOptions for style selection. Returns a Promise<void> for async integration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimpact(options?: ImpactOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Verifying Plugin Availability in Capacitor\nDESCRIPTION: Shows how to use isPluginAvailable() to check if a specific plugin is available on the current platform before attempting to use it, enabling graceful fallbacks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Text-to-Speech with Capacitor Screen Reader (TypeScript)\nDESCRIPTION: API method signature for `speak`. This asynchronous function utilizes the native screen reader's text-to-speech capabilities. It requires an active screen reader. Takes `SpeakOptions` (containing the text `value` and optional `language`) as input. On the web, it relies on the browser's SpeechSynthesis API and will throw an error if unsupported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-reader.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nspeak(options: SpeakOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Functionality for Capacitor Plugin in Swift\nDESCRIPTION: This Swift code shows the implementation of the 'openMap' method for iOS in the EchoPlugin.swift file. It demonstrates how to extract parameters from the plugin call and resolve the call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@objc func openMap(_ call: CAPPluginCall) {\n  let latitude = call.getString(\"latitude\")\n  let longitude = call.getNumber(\"longitude\")\n\n  // more logic\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling Background Tasks in Application Launch - Swift\nDESCRIPTION: Registers the background task and handles launch options in the AppDelegate's application:didFinishLaunchingWithOptions method. Depends on import CapacitorBackgroundRunner. Must be placed within AppDelegate to enable correct background task registration for the plugin; launchOptions parameter supplies launch context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\\n\\n    // ....\\n    BackgroundRunnerPlugin.registerBackgroundTask()\\n    BackgroundRunnerPlugin.handleApplicationDidFinishLaunching(launchOptions: launchOptions)\\n    // ....\\n\\n    return true\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Network Status with getStatus API - TypeScript\nDESCRIPTION: This snippet defines the signature for the 'getStatus' API method of the Capacitor Network plugin. The function is asynchronous and returns a Promise that resolves to a 'ConnectionStatus' object indicating both connectivity status and the type of network connection. It is part of the @capacitor/network API (since v1.0.0), requires no parameters, and is intended to be called from TypeScript or JavaScript code running within a Capacitor project. The result provides properties such as 'connected' (boolean) and 'connectionType' (network type string).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/network.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus() => Promise<ConnectionStatus>\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests Using CapacitorHttp Methods - TypeScript\nDESCRIPTION: These are method signature snippets for 'request', 'get', 'post', 'put', 'patch', and 'delete' operations on the 'CapacitorHttp' plugin in TypeScript. Each method accepts an 'HttpOptions' parameter and returns a promise resolving to 'HttpResponse'. These signatures must be implemented or used as provided by the plugin API, and serve as contract references when making HTTP requests natively.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrequest(options: HttpOptions) => Promise<HttpResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nget(options: HttpOptions) => Promise<HttpResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\npost(options: HttpOptions) => Promise<HttpResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nput(options: HttpOptions) => Promise<HttpResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\npatch(options: HttpOptions) => Promise<HttpResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Screen Orientation Plugin (Bash)\nDESCRIPTION: Installs the `@capacitor/screen-orientation` package using npm and synchronizes the native project dependencies using the Capacitor CLI (`npx cap sync`). These commands are necessary prerequisites for using the plugin's functionality within a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation - Capacitor Plugin Method (TypeScript)\nDESCRIPTION: This TypeScript function locks the device's screen orientation to a specified value using the Screen Orientation plugin. It takes an OrientationLockOptions object as a parameter and returns a Promise resolving to void. The options parameter specifies the desired orientation lock type. Prerequisites include correct plugin installation, and Typescript v5.2+ users are advised to import OrientationLockType directly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlock(options: OrientationLockOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Functionality for Capacitor Plugin in Java\nDESCRIPTION: This snippet demonstrates how to implement the Android version of the openMap method in the EchoPlugin.java file. It uses the @PluginMethod annotation and extracts parameters from the PluginCall object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void openMap(PluginCall call) {\n  Double latitude = call.getDouble(\"latitude\");\n  Double longitude = call.getDouble(\"longitude\");\n\n  // more logic\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Version and Build Numbers in Capacitor\nDESCRIPTION: Shows various operations for managing versions and build numbers in iOS and Android projects, including setting versions, incrementing builds, and retrieving version information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/automated-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.ios?.setVersion('App', 'Debug', '1.4.5');\nawait project.ios?.incrementBuild('App');\nawait project.ios?.getBuild('App', 'Debug');\nawait project.ios?.getBuild('App', 'Release');\nawait project.android?.setVersionName('1.0.2');\nawait project.android?.getVersionName();\nawait project.android?.setVersionCode(11);\nawait project.android?.getVersionCode();\nawait project.android?.incrementVersionCode();\n```\n\n----------------------------------------\n\nTITLE: Overriding WebView Navigation in Android Plugins\nDESCRIPTION: Shows how to override the WebView navigation in a Capacitor Android plugin by implementing the shouldOverrideLoad method. This allows plugins to intercept and control navigation behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic Boolean shouldOverrideLoad(Uri url) {\n    // Return true to abort loading the URL\n    // Return false to continue loading the URL\n    // Return null to defer to the default Capacitor policy\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Product Flavors - Groovy\nDESCRIPTION: Defines Android product flavors in build.gradle, creating distinct build variants for development and QA environments. Provides separate dimensions, application ID suffix for QA, and placeholder values for use in the manifest. This pattern allows navigation between different environments and custom names/IDs for each.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nflavorDimensions \"environment\"\nproductFlavors {\n  dev {\n      dimension \"environment\"\n      manifestPlaceholders = [displayName:\"My App\"]\n  }\n  qa {\n      dimension \"environment\"\n      applicationIdSuffix \".qa\"\n      manifestPlaceholders = [displayName:\"My App - QA\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Loading a Capacitor Project with @trapezedev/project - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize and load a Capacitor project's native iOS and Android paths using the @trapezedev/project library. Required dependencies are the @trapezedev/project package, Node.js, and TypeScript. The MobileProject is instantiated with a configuration specifying the locations of the native projects, then the project is loaded for further manipulation; expected inputs are directory paths, and loaded project state is the output. The snippet operates asynchronously and requires the calling context to handle Promises.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/automated-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MobileProject, MobileProjectConfig } from '@trapezedev/project';\n\n// This takes a MobileProjectConfig\n// to know where the ios and android projects are\nconst config: MobileProjectConfig = {\n  ios: {\n    path: 'ios/App',\n  },\n  android: {\n    path: 'android',\n  },\n};\n\nconst project = new MobileProject(process.cwd(), config);\nawait project.load();\n```\n\n----------------------------------------\n\nTITLE: Adding a Network Status Change Listener with Capacitor - TypeScript\nDESCRIPTION: This snippet shows the method signature for adding a listener to network status changes using the Capacitor Network API. The function takes an event name ('networkStatusChange') and a listener callback that accepts a 'ConnectionStatus' argument. It returns a Promise that resolves to a PluginListenerHandle and also directly returns the handle for removing the listener. Requires the @capacitor/network plugin in a Capacitor project environment. Listeners are typically used to react to online/offline state transitions in the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/network.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Capacitor Plugin from JavaScript/TypeScript\nDESCRIPTION: This TypeScript snippet shows how to invoke a method on the custom native plugin from the web view. It imports the previously registered `Echo` object and calls its `echo` method asynchronously using `await`, passing an object with a `value` property. The response object containing the echoed value is then destructured and logged to the console.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Passing Null Values in TypeScript for Capacitor Plugin Call\nDESCRIPTION: Demonstrates how to pass an object with null values to a Capacitor plugin call in TypeScript. This example shows a dictionary with a null value and an array containing null.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ 'foo': null, 'bar': [1, 2, null, 4]}\n```\n\n----------------------------------------\n\nTITLE: Opening Native Project Workspace with Capacitor CLI\nDESCRIPTION: This command opens the native project workspace in the specified native IDE (Xcode for iOS, Android Studio for Android). It requires the platform argument, which can be either 'android' or 'ios'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/open.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open <platform>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Haptics Plugin - Bash\nDESCRIPTION: These commands install the @capacitor/haptics plugin and synchronize it with the native platform projects. You must have Node.js, npm, and an initialized Capacitor project for these commands to work. The 'npx cap sync' command ensures that the plugin is properly linked across all platforms. Input: 'npm install @capacitor/haptics' fetches the plugin from npm; 'npx cap sync' updates native projects. No code input/output except for command-line installation feedback.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/haptics\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Migrating Data from Capacitor 2 Storage in TypeScript\nDESCRIPTION: API definition for the `migrate` method. This asynchronous function facilitates migrating data from the Capacitor 2 Storage plugin to the current Preferences plugin format. It's non-destructive and only adds keys if they don't already exist. Returns a Promise resolving to a `MigrateResult` object detailing which keys were migrated and which already existed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmigrate() => Promise<MigrateResult>\n```\n\n----------------------------------------\n\nTITLE: Removing Delivered Notifications with Capacitor API\nDESCRIPTION: API method definition for `removeDeliveredNotifications()`. This asynchronous function removes specified notifications from the device's notification center/tray. It accepts a `DeliveredNotifications` object (typically obtained from `getDeliveredNotifications()`) containing the notifications to be removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Checking Push Notification Permissions in Capacitor (TypeScript)\nDESCRIPTION: Checks the current permission status for receiving push notifications. On Android 12 and below, this always returns 'granted' as permission is implicitly given. For checking display permissions on Android, consider the local-notifications plugin. Returns a Promise resolving with the `PermissionStatus`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins and Versions with Capacitor CLI in Bash\nDESCRIPTION: Displays the list of Capacitor and Cordova plugins, including their exact versions, installed in the current project. Run this command from the root of a Capacitor-initialized project. Requires Node.js, npm, and Capacitor CLI. Input: none. Output: CLI listing of plugins and versions. No changes are made to the project by this command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/cordova.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls\n```\n\n----------------------------------------\n\nTITLE: Creating and Syncing iOS App in Capacitor\nDESCRIPTION: Commands to add an iOS project to an existing Capacitor project and synchronize dependencies and web assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Creating Screen Orientation Implementation Class\nDESCRIPTION: Implementation class that handles the core screen orientation functionality including detecting the current orientation type based on device rotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport android.view.Surface;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class ScreenOrientation {\n   private AppCompatActivity activity;\n\n   public ScreenOrientation(AppCompatActivity activity) {\n       this.activity = activity;\n   }\n\n   public String getCurrentOrientationType() {\n       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n       return fromRotationToOrientationType(rotation);\n   }\n\n   private String fromRotationToOrientationType(int rotation) {\n       switch (rotation) {\n           case Surface.ROTATION_90:\n               return \"landscape-primary\";\n           case Surface.ROTATION_180:\n               return \"portrait-secondary\";\n           case Surface.ROTATION_270:\n               return \"landscape-secondary\";\n           default:\n               return \"portrait-primary\";\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Ionic Project with Capacitor\nDESCRIPTION: Command to create a new Ionic project which includes Capacitor by default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/with-ionic.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nionic start\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Custom Plugin\nDESCRIPTION: This snippet demonstrates how to define a TypeScript interface for the custom EchoPlugin and use it when registering the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n}\n\nconst Echo = registerPlugin<EchoPlugin>('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Constant for Library Directory in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the Library directory for Capacitor Filesystem operations using the 'LIBRARY' string literal. On iOS, this refers to the Library directory. On Android, it maps to the application's private files directory, with contents deleted upon uninstallation. This constant was introduced in Capacitor version 1.1.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n'LIBRARY'\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy in HTML for Capacitor Apps\nDESCRIPTION: This snippet demonstrates how to set up a Content Security Policy (CSP) in a Capacitor app using a meta tag in the HTML head. The example allows requests to the current origin and 'foo.com'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self' foo.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining and Sending Watch UI using TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to define a simple watch UI layout using a newline-delimited string format (Text and Button components). It then uses the `Watch.updateWatchUI` method from the Capacitor Watch plugin API to send this UI definition to the paired watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync uploadMyWatchUI() {\n    const watchUI = \n        `Text(\"Capacitor WATCH\")\n         Button(\"Add One\", \"inc\")`;\n\n    await Watch.updateWatchUI({\"watchUI\": watchUI});\n}\n```\n\n----------------------------------------\n\nTITLE: getUri API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `getUri` method of the Capacitor Filesystem API. This asynchronous function returns the full file URI for a given path and directory specified in `GetUriOptions`, resolving to a `GetUriResult` containing the URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetUri(options: GetUriOptions) => Promise<GetUriResult>\n```\n\n----------------------------------------\n\nTITLE: Reading from Clipboard API Definition\nDESCRIPTION: API definition for the read method which retrieves content from the clipboard and returns both the value and its type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/clipboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nread() => Promise<ReadResult>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Lock Method in ScreenOrientationPlugin (Swift)\nDESCRIPTION: This Swift `@objc` function exposes the screen locking functionality to Capacitor. It retrieves the target orientation string from the `call` object, validates its presence, calls the `implementation.lock` method, and updates the static `ScreenOrientationPlugin.supportedOrientations` property within the completion handler to enforce the lock.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n​​@objc public func lock(_ call: CAPPluginCall) {\n  guard let lockToOrientation = call.getString(\"orientation\") else {\n    call.reject(\"Input option 'orientation' must be provided.\")\n    return\n  }\n  implementation.lock(lockToOrientation, completion: { (mask) -> Void in\n    ScreenOrientationPlugin.supportedOrientations = mask;\n    call.resolve()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Performed Result Structure - TypeScript\nDESCRIPTION: Encodes the result of a notification action, including the action identifier, optional input value (for text input, iOS only), and a notification schema. Used in listeners monitoring user interaction with notifications. Depends on PushNotificationSchema definition for nested notification attribute. Parameters include the performed action ID and any associated input.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue?: string; // iOS only\n  notification: PushNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Listeners for Downloads with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `addListener` method signature specifically for the 'progress' event in the Capacitor Filesystem API (TypeScript). This function allows attaching a listener (`ProgressListener`) to monitor the progress of file downloads initiated via `downloadFile`. It returns a Promise resolving to a `PluginListenerHandle` which can be used to remove the listener later. Available since version 5.1.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'progress', listenerFunc: ProgressListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Initiating Share Action in TypeScript\nDESCRIPTION: Defines the `share(...)` method signature. This function takes a `ShareOptions` object (containing title, text, url, dialogTitle) and triggers the native sharing modal. It returns a Promise resolving to a `ShareResult` object, which includes the identifier of the app chosen for sharing (if available).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/share.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshare(options: ShareOptions) => Promise<ShareResult>\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `removeAllListeners` method signature in TypeScript for the Capacitor Filesystem API. This asynchronous function removes all event listeners previously attached to this specific Capacitor plugin instance (e.g., progress listeners). It returns a Promise that resolves with no value upon completion. Available since version 5.2.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listening to Pause Events with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet demonstrates addListener() usage for the 'pause' event, allowing code to react when the app or activity is paused. It works on iOS (background notification), Android (onPause), and Web (visibilitychange). Dependencies: Capacitor App plugin. Parameters: eventName ('pause'), listener function. Output: PluginListenerHandle Promise. Since version 4.1.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pause', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Marker from Google Maps in TypeScript\nDESCRIPTION: Removes a single marker from the Google Map instance using its ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarker(id: string) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Markers to Google Maps in TypeScript\nDESCRIPTION: Adds multiple markers to the Google Map instance and returns a promise with an array of marker IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddMarkers(markers: Marker[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Swift\nDESCRIPTION: Provides examples of using the `triggerJSEvent` method to dispatch events to the web view's `window` and `document` objects. The second example shows how to include data, which must be provided as a serialized JSON string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"{ 'dataKey': 'dataValue' }\")\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Package via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and add the `@capacitor/ios` package as a project dependency. This package contains the necessary native iOS runtime and tooling for Capacitor. Execute this command in the root directory of your Capacitor project before adding the iOS platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Action Interface Definition\nDESCRIPTION: Defines the structure for individual notification actions. Includes properties for action identification, display settings, and iOS-specific notification action configurations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Action {\n  id: string;\n  title: string;\n  requiresAuthentication?: boolean;\n  foreground?: boolean;\n  destructive?: boolean;\n  input?: boolean;\n  inputButtonTitle?: string;\n  inputPlaceholder?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Capacitor App - Bash\nDESCRIPTION: This shell command builds the web assets of your Capacitor project, preparing the codebase for native platform additions. It requires the JavaScript tooling (e.g., npm, Node.js) set up in your project, along with npm scripts defined in your package.json. Run this command before adding iOS or Android platforms to ensure the latest code is included.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Initialization Logic in Swift\nDESCRIPTION: Demonstrates how to run specific code when a Capacitor plugin is first loaded by overriding the `load()` method within the Swift `CAPPlugin` subclass. This is suitable for initial setup tasks like registering for system notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Plugin Package (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Camera API directly from a dedicated plugin package in Capacitor 3, instead of relying on the deprecated Plugins object from core. The code requires the @capacitor/camera package to be installed and can be used in any TypeScript file that needs camera functionality. This import style is part of the modular approach introduced in Capacitor 3.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera } from '@capacitor/camera';\n```\n\n----------------------------------------\n\nTITLE: CopyOptions and CopyResult Type Definitions in TypeScript\nDESCRIPTION: Interfaces for file copy operations, including source and destination specifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CopyOptions {\n  from: string;\n  to: string;\n  directory: Directory;\n  toDirectory: Directory;\n}\n\ninterface CopyResult {\n  uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Splash Screen API in TypeScript\nDESCRIPTION: Demonstrates how to import and use the SplashScreen API from Capacitor core to show and hide the splash screen with various options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/splash-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\nconst { SplashScreen } = Plugins;\n\n// Hide the splash (you should do this on app launch)\nSplashScreen.hide();\n\n// Show the splash for an indefinite amount of time:\nSplashScreen.show({\n  autoHide: false,\n});\n\n// Show the splash for two seconds and then auto hide:\nSplashScreen.show({\n  showDuration: 2000,\n  autoHide: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the GalleryImageOptions Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `GalleryImageOptions` used to configure image retrieval options for the Capacitor Camera plugin when picking multiple photos. Options include `quality`, `width`, `height`, `correctOrientation`, `presentationStyle` (iOS only), and `limit` (max number of photos).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryImageOptions {\n  /**\n   * The quality of image to return as JPEG, from 0-100\n   * Note: This option is only supported on Android and iOS.\n   * @since 1.2.0\n   */\n  quality?: number;\n  /**\n   * The desired maximum width of the saved image.\n   * The aspect ratio is respected.\n   * @since 1.2.0\n   */\n  width?: number;\n  /**\n   * The desired maximum height of the saved image.\n   * The aspect ratio is respected.\n   * @since 1.2.0\n   */\n  height?: number;\n  /**\n   * Whether to automatically rotate the image \"up\" to correct for orientation in portrait mode\n   * Default: true\n   * @since 1.2.0\n   */\n  correctOrientation?: boolean;\n  /**\n   * iOS only: The presentation style of the Camera.\n   * Default: 'fullscreen'\n   * @since 1.2.0\n   */\n  presentationStyle?: 'fullscreen' | 'popover';\n  /**\n   * Maximum number of pictures the user will be able to choose.\n   * Note: This option is only supported on Android 13+ and iOS.\n   * Default: 0 (unlimited)\n   * @since 1.2.0\n   */\n  limit?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Status Bar setStyle Method Definition\nDESCRIPTION: TypeScript definition for the setStyle method, which allows changing the current style of the status bar.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetStyle(options: StyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating Echo Plugin in Swift\nDESCRIPTION: Implementation of a basic Echo plugin in Swift that demonstrates the bridge between JavaScript and native code. The plugin accepts a string value and returns it back through a promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\"value\": value])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientation Methods in TypeScript\nDESCRIPTION: Implements the orientation, lock, and unlock methods for the ScreenOrientationWeb class. These methods interact with the Web Screen Orientation API to provide the required functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync orientation(): Promise<{ type: OrientationType }> {\n  return { type: window.screen.orientation.type };\n}\n\nasync lock(opts: { orientation: OrientationLockType }): Promise<void> {\n  await window.screen.orientation.lock(opts.orientation);\n}\n\nasync unlock(): Promise<void> {\n  window.screen.orientation.unlock();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in iOS AppDelegate\nDESCRIPTION: Code snippet for initializing Firebase in the iOS application launch process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nFirebaseApp.configure()\n```\n\n----------------------------------------\n\nTITLE: Querying Network Status in TypeScript\nDESCRIPTION: Function to get the current status of the network connection using the Network.getStatus() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/network.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus() => Promise<ConnectionStatus>\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Methods to Plugin Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to add checkPermissions() and requestPermissions() methods to a Capacitor plugin interface. These methods are required for implementing the permissions pattern.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  checkPermissions(): Promise<PermissionStatus>;\n  requestPermissions(): Promise<PermissionStatus>;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for App Restored Results in Capacitor (TypeScript)\nDESCRIPTION: Registers a listener function for the 'appRestoredResult' event. This event fires on app launch if the app was previously terminated (e.g., on Android due to memory constraints while an external Activity like the Camera was open) and had pending plugin results. The listener receives the restored data, allowing the app to process results that would otherwise be lost. It's crucial for handling results from plugins launching external Activities on Android. The function returns a Promise resolving to a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'appRestoredResult', listenerFunc: RestoredListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Cancelling Scheduled Notifications - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Gives the TypeScript method signature for cancelling pending local notifications using the Capacitor plugin. Accepts a CancelOptions object (specifying which notifications to cancel) and returns a Promise. Requires that notifications be previously scheduled. Used to remove notifications before they're delivered. Inputs: options. Outputs: Promise after cancellation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(options: CancelOptions) => Promise<void>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Detection in Swift\nDESCRIPTION: This code defines the ScreenOrientation class with methods to get the current orientation type and convert device orientations to string representations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport UIKit\n\npublic class ScreenOrientation: NSObject {\n\n  public func getCurrentOrientationType() -> String {\n    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation\n    return fromDeviceOrientationToOrientationType(currentOrientation)\n  }\n\n  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {\n    switch orientation {\n    case .landscapeLeft:\n      return \"landscape-primary\"\n    case .landscapeRight:\n      return \"landscape-secondary\"\n    case .portraitUpsideDown:\n      return \"portrait-secondary\"\n    default:\n      // Case: portrait\n      return \"portrait-primary\"\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Show Splash Screen Method Definition\nDESCRIPTION: TypeScript method signature for showing the splash screen. Takes optional ShowOptions parameter to configure display behavior including auto-hide, fade durations, and show duration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: ShowOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Declaring Permissions in AndroidManifest.xml\nDESCRIPTION: Shows the structure for adding required Android permissions within the `android/app/src/main/AndroidManifest.xml` file. Permissions are declared using the `<uses-permission>` tag inside the `<manifest>` tag. This example adds the `ACCESS_NETWORK_STATE` permission, typically required by network-related plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.getcapacitor.myapp\">\n    <activity>\n      <!-- other stuff -->\n    </activity>\n\n    <!-- More stuff -->\n\n    <!-- Your permissions -->\n\n    <!-- Network API -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Listening and Querying Network Status with Capacitor Plugin - TypeScript\nDESCRIPTION: This snippet demonstrates usage of the Capacitor Network API by importing the Network module, registering a listener for real-time network status changes, and defining an asynchronous function to retrieve and log the current network status. It requires the @capacitor/network dependency and works in a Capacitor environment. The event listener receives connection updates as the 'status' parameter, while the 'Network.getStatus()' function returns a Promise that resolves to the current network state. Outputs are logged to the console; the code depends on plugin initialization and should be run inside a Capacitor-supported project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/network.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Network } from '@capacitor/network';\n\nNetwork.addListener('networkStatusChange', status => {\n  console.log('Network status changed', status);\n});\n\nconst logCurrentNetworkStatus = async () => {\n  const status = await Network.getStatus();\n\n  console.log('Network status:', status);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Push Notifications Plugin using npm\nDESCRIPTION: This snippet shows the necessary terminal commands to install the `@capacitor/push-notifications` npm package and synchronize the project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using File Viewer Plugin in TypeScript\nDESCRIPTION: Example showing how to use the FileViewer plugin to open documents and preview media content from local paths and URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/file-viewer.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileViewer } from \"@capacitor/file-viewer\";\n\n// can use a plugin like @capacitor/filesystem to get the full path to the file\nconst openDocument = async () => {\n  await FileViewer.openDocumentFromLocalPath({\n    path: \"path/to/file.pdf\"\n  });\n};\n\n// ios-specific\nconst previewMedia = async () => {\n  await FileViewer.previewMediaContentFromUrl({\n    path: \"https://url_hosting_media/file.mp4\"\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable APIs in Capacitor Web Plugins (TypeScript)\nDESCRIPTION: This snippet illustrates how to handle potentially unavailable web APIs, using Geolocation as an example. It checks if `navigator.geolocation` exists. If the API is not available in the user's browser, it throws an `unavailable` error using `this.unavailable()` with a descriptive message. This ensures graceful failure when browser support is lacking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nasync getLocation(): Promise<Location> {\n  if (typeof navigator === 'undefined' || !navigator.geolocation) {\n    throw this.unavailable('Geolocation API not available in this browser.');\n  }\n\n  // TODO: actual web implementation\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map with Vanilla HTML and JavaScript\nDESCRIPTION: Combines HTML, CSS, and plain JavaScript to demonstrate map creation without a framework. It includes the `<capacitor-google-map>` element and a button in HTML, basic CSS for styling the map element, and a JavaScript `<script>` tag. The script imports `GoogleMap`, defines an async function `createMap` that gets the element by ID and calls `GoogleMap.create`, and assigns this function directly to the button's `onclick` event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<capacitor-google-map id=\"map\"></capacitor-google-map>\n<button onclick=\"createMap()\">Create Map</button>\n```\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  capacitor-google-map {\n    display: inline-block;\n    width: 275px;\n    height: 400px;\n  }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { GoogleMap } from '@capacitor/google-maps';\n\n  const createMap = async () => {\n    const mapRef = document.getElementById('map');\n\n    const newMap = await GoogleMap.create({\n      id: 'my-map', // Unique identifier for this map instance\n      element: mapRef, // reference to the capacitor-google-map element\n      apiKey: 'YOUR_API_KEY_HERE', // Your Google Maps API Key\n      config: {\n        center: {\n          // The initial position to be rendered by the map\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8, // The initial zoom level to be rendered by the map\n      },\n    });\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the PermissionStatus object, which contains the permission state for displaying notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  display: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Plugin Annotation in Java\nDESCRIPTION: Replace the deprecated @NativePlugin annotation with the new @CapacitorPlugin annotation. This change allows for the new permissions API and removes request codes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin(\n    name = \"FooBar\",\n    permissions = {\n        @Permission(strings = { Manifest.permission.FOO }, alias = \"foo\"),\n        @Permission(strings = { Manifest.permission.BAR }, alias = \"bar\")\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor Native Platforms - Bash\nDESCRIPTION: Installs Capacitor iOS and Android packages and adds respective native platforms to the project. This ensures the project is set up for cross-platform development with Capacitor CLI. Dependencies: an existing Capacitor project with a built web bundle. Outputs the iOS and Android folders in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: API Definition: checkPermissions Method (TypeScript)\nDESCRIPTION: TypeScript signature for the `checkPermissions` method. This function checks the current status of location permissions granted to the application and returns a Promise resolving to a `PermissionStatus` object. It will throw an error if the system's location services are disabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Push Notifications Plugin using Bash\nDESCRIPTION: Installs the Capacitor Push Notifications plugin package using npm and then runs `npx cap sync`. The sync command updates the native projects (iOS and Android) with the required plugin code and dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Listening for Screen Orientation Changes - Capacitor Plugin Method (TypeScript)\nDESCRIPTION: This method adds an event listener for 'screenOrientationChange' events using the Capacitor Screen Orientation plugin. It takes an event name and a callback function for orientation state updates and returns a Promise with a PluginListenerHandle. The callback receives the latest ScreenOrientationResult. Typical usage is within event subscription logic to react to orientation changes in real time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/text-zoom Plugin with npm - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the @capacitor/text-zoom plugin via npm and synchronize it with a Capacitor project. It requires a working Node.js environment and assumes npm is installed. 'npm install' adds the plugin while 'npx cap sync' ensures native platform sync. Input: None required. Output: Plugin installed and available in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/text-zoom.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/text-zoom\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using the Echo Plugin in TypeScript\nDESCRIPTION: Example of how to use the Echo plugin in a TypeScript application, demonstrating the API call and response handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Mock for Capacitor Storage Plugin - TypeScript\nDESCRIPTION: This snippet demonstrates how to manually create a mock for the Capacitor Storage plugin as a plain JavaScript object in TypeScript. No dependencies are required beyond TypeScript configuration, as the object structure mirrors that of the real plugin. The mock exposes async get, set, and clear methods and returns stubbed values for all calls. Inputs are expected to match the plugin API. The object is easily extendable and can be spied upon without interfering with native calls, suitable for unit testing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/mocking-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Storage = {\n  async get(data: { key: string }): Promise<{ value: string | undefined }> {\n    return { value: undefined };\n  },\n\n  async set(data: { key: string; value: string }): Promise<void> {},\n  async clear(): Promise<void> {},\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Filesystem Plugin\nDESCRIPTION: Commands to install the Capacitor Filesystem plugin and sync the project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/filesystem\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic Native Wrapper for Cordova Plugin in Bash\nDESCRIPTION: Installs the Ionic Native TypeScript wrapper for a Cordova plugin using npm. Intended for projects using TypeScript and Ionic Native to provide typing and Angular/TypeScript integration for Cordova plugins. Requires Node.js, npm, and '@ionic-native/plugin-name' package (replace with actual wrapper package). Only adds the wrapper; the underlying Cordova plugin must be installed separately. Input: wrapper package name. No direct output.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/cordova.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic-native/plugin-name\n```\n\n----------------------------------------\n\nTITLE: Filesystem Operations Example\nDESCRIPTION: Example TypeScript code demonstrating basic file operations including writing, reading, and deleting files using the Filesystem API\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\n\nconst writeSecretFile = async () => {\n  await Filesystem.writeFile({\n    path: 'secrets/text.txt',\n    data: \"This is a test\",\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n};\n\nconst readSecretFile = async () => {\n  const contents = await Filesystem.readFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n\n  console.log('secrets:', contents);\n};\n\nconst deleteSecretFile = async () => {\n  await Filesystem.deleteFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n  });\n};\n\nconst readFilePath = async () => {\n  const contents = await Filesystem.readFile({\n    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt'\n  });\n\n  console.log('data:', contents);\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting an Android Notification Channel in Capacitor (TypeScript)\nDESCRIPTION: Deletes a specific notification channel on Android. This functionality is only available on Android Oreo (SDK 26) and newer. Requires an object containing the `id` of the channel to be deleted. Returns a Promise that resolves when the deletion is attempted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Toast Plugin via npm\nDESCRIPTION: Demonstrates the commands to install the `@capacitor/toast` package using npm and then synchronize the native project dependencies with Capacitor CLI (`npx cap sync`). This is the standard procedure for adding a Capacitor plugin to a project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/toast\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Plugin Call with Error Details in Swift\nDESCRIPTION: Illustrates how to reject a plugin call in case of failure using `call.reject()`. This example passes the localized description from an `Error` object as the message, `nil` for the optional error code, and the original `Error` instance itself.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ncall.reject(error.localizedDescription, nil, error)\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events with the Bridge in Swift\nDESCRIPTION: These usage examples show how to fire custom events from native Swift code into the JavaScript context of a Capacitor app. The bridge's triggerJSEvent method is invoked with event names, a target (such as window or document), and optionally a JSON data string. The data parameter must be properly serialized to JSON to be passed to JavaScript listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"{ 'dataKey': 'dataValue' }\")\n\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform to Project - Bash\nDESCRIPTION: This snippet adds the Android platform to an existing Capacitor project using the Capacitor CLI. This creates the \\\"android/\\\" directory and sets up required native project files. It must be run after installing the \\\"@capacitor/android\\\" package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Method in Android (Java)\nDESCRIPTION: Shows the Java implementation for a Capacitor plugin method (`method3`) that uses a callback to return data potentially multiple times on Android. It requires the `@PluginMethod` annotation with `returnType = PluginMethod.RETURN_CALLBACK`. The implementation needs to save the `PluginCall` to invoke it later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)\npublic void method3(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS-specific Capacitor Configuration\nDESCRIPTION: Configuration to specify the iOS scheme in the Capacitor config file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nios: {\n  scheme: 'App QA',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Map Event Callback Data Interfaces in TypeScript\nDESCRIPTION: Collection of interfaces for various map event callback data structures, including camera idle, camera move started, cluster clicks, marker interactions, map clicks, and shape interactions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n// CameraIdleCallbackData\n{\n  mapId: string;\n  bounds: LatLngBounds;\n  bearing: number;\n  latitude: number;\n  longitude: number;\n  tilt: number;\n  zoom: number;\n}\n\n// CameraMoveStartedCallbackData\n{\n  mapId: string;\n  isGesture: boolean;\n}\n\n// ClusterClickCallbackData\n{\n  mapId: string;\n  latitude: number;\n  longitude: number;\n  size: number;\n  items: MarkerCallbackData[];\n}\n\n// MarkerCallbackData\n{\n  markerId: string;\n  latitude: number;\n  longitude: number;\n  title: string;\n  snippet: string;\n}\n\n// MarkerClickCallbackData\n{\n  mapId: string;\n}\n\n// MapClickCallbackData\n{\n  mapId: string;\n  latitude: number;\n  longitude: number;\n}\n\n// PolygonClickCallbackData\n{\n  mapId: string;\n  polygonId: string;\n  tag: string;\n}\n\n// CircleClickCallbackData\n{\n  mapId: string;\n  circleId: string;\n  tag: string;\n}\n\n// PolylineCallbackData\n{\n  polylineId: string;\n  tag: string;\n}\n\n// MyLocationButtonClickCallbackData\n{\n  mapId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Method Handler for Locking Screen Orientation\nDESCRIPTION: Implements the Capacitor plugin method that processes lock calls from JavaScript, validating input parameters and calling the implementation with appropriate error handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func lock(_ call: CAPPluginCall) {\n  guard let lockToOrientation = call.getString(\"orientation\") else {\n    call.reject(\"Input option 'orientation' must be provided.\")\n    return\n  }\n  implementation.lock(lockToOrientation) { error in\n    if let error = error {\n      call.reject(error.localizedDescription)\n    }\n    call.resolve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Vue Application with Router - TypeScript\nDESCRIPTION: Creates and mounts a new Vue application instance, integrating the router. The Vue application is mounted to the element with id 'app', enabling deep link routing and ensuring router functionality throughout the app. Vue and VueRouter must be properly configured prior to this step.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst VueApp = new Vue({\n  router,\n}).$mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Handling Methods in AppDelegate\nDESCRIPTION: Implementation of iOS AppDelegate methods for handling push notification registration events and token management with Firebase.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  Messaging.messaging().apnsToken = deviceToken\n  Messaging.messaging().token(completion: { (token, error) in\n    if let error = error {\n        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n    } else if let token = token {\n        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n    }\n  })\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Google Maps Implementation\nDESCRIPTION: Core TypeScript code for creating and configuring a Google Map instance\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\nconst apiKey = 'YOUR_API_KEY_HERE';\n\nconst mapRef = document.getElementById('map');\n\nconst newMap = await GoogleMap.create({\n  id: 'my-map',\n  element: mapRef,\n  apiKey: apiKey,\n  config: {\n    center: {\n      lat: 33.6,\n      lng: -117.9,\n    },\n    zoom: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Deep Link Listener in React Router Setup\nDESCRIPTION: Code showing how to integrate the AppUrlListener component within a React application that uses React Router. This ensures the component has access to the router's history.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst App: React.FC = () => {\n  return (\n    <IonApp>\n      <IonReactRouter>\n        <AppUrlListener></AppUrlListener>\n        <IonRouterOutlet>\n          <Route path=\"/home\" component={Home} exact={true} />\n          <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Platform Type with getPlatform\nDESCRIPTION: Demonstrates how to use getPlatform to determine which platform the app is running on.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetPlatform: () => string;\n```\n\n----------------------------------------\n\nTITLE: Supporting Orientation Lock for Presented View Controllers in iOS (Swift)\nDESCRIPTION: Provides a Swift code snippet to be added to the application's `AppDelegate.swift` file on iOS. This implementation of `application(_:supportedInterfaceOrientationsFor:)` ensures that orientation locking applied by the Capacitor plugin also affects presented view controllers (like those from the Browser plugin) by delegating the supported orientations decision to the main Capacitor bridge view controller.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Using npm (Bash)\nDESCRIPTION: This command initializes a new Capacitor project within an existing codebase. It guides the user through an interactive setup, prompting for details like the app name and Bundle ID, which are usually sourced from the Cordova project's config.xml file. There are no external dependencies apart from npm and Capacitor; the result is a newly-generated Capacitor configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Taking Photo with Capacitor Camera\nDESCRIPTION: TypeScript example demonstrating how to capture a photo using the Camera API\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera, CameraResultType } from '@capacitor/camera';\n\nconst takePicture = async () => {\n  const image = await Camera.getPhoto({\n    quality: 90,\n    allowEditing: true,\n    resultType: CameraResultType.Uri\n  });\n\n  // image.webPath will contain a path that can be set as an image src.\n  // You can access the original file using image.path, which can be\n  // passed to the Filesystem API to read the raw data of the image,\n  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n  var imageUrl = image.webPath;\n\n  // Can be set to the src of an image now\n  imageElement.src = imageUrl;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in capacitor.config.json\nDESCRIPTION: Shows how to configure various Splash Screen options in the Capacitor configuration file, including duration, auto-hide, background color, and spinner settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/splash-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"SplashScreen\": {\n      \"launchShowDuration\": 3000,\n      \"launchAutoHide\": true,\n      \"backgroundColor\": \"#ffffffff\",\n      \"androidSplashResourceName\": \"splash\",\n      \"androidScaleType\": \"CENTER_CROP\",\n      \"androidSpinnerStyle\": \"large\",\n      \"iosSpinnerStyle\": \"small\",\n      \"spinnerColor\": \"#999999\",\n      \"showSpinner\": true,\n      \"splashFullScreen\": true,\n      \"splashImmersive\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting the Current Platform with Capacitor.getPlatform in TypeScript\nDESCRIPTION: Illustrates how to use `Capacitor.getPlatform()` to determine the current runtime platform. The function returns 'ios', 'android', or 'web', allowing for platform-specific logic within the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  console.log('iOS!');\n} else if (Capacitor.getPlatform() === 'android') {\n  console.log('Android!');\n} else {\n  console.log('Web!');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Position Result Interface - TypeScript\nDESCRIPTION: Type definitions for geolocation position data including coordinates, accuracy, altitude, speed, and heading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetCurrentPositionResult {\n  latitude: number;\n  longitude: number;\n  accuracy: number;\n  altitude: number | null;\n  altitudeAccuracy: number | null;\n  speed: number | null;\n  heading: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Status Interface in TypeScript\nDESCRIPTION: This snippet shows how to define a PermissionStatus interface for a Capacitor plugin. It imports PermissionState from Capacitor core and defines a custom interface for plugin-specific permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PermissionState } from '@capacitor/core';\n\nexport interface PermissionStatus {\n  // TODO: change 'location' to the actual name of your alias!\n  location: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Capacitor Bridge Reference in Swift\nDESCRIPTION: Demonstrates how to access the weak reference to the Capacitor bridge instance within a plugin class. This reference is optional and provides access to bridge functionalities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nself.bridge?\n```\n\n----------------------------------------\n\nTITLE: Detecting Platform with Capacitor.getPlatform in TypeScript\nDESCRIPTION: Illustrates how to use Capacitor.getPlatform to determine the current platform (web, iOS, or Android) the app is running on. This allows for platform-specific code execution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  console.log('iOS!');\n} else if (Capacitor.getPlatform() === 'android') {\n  console.log('Android!');\n} else {\n  console.log('Web!');\n}\n```\n\n----------------------------------------\n\nTITLE: Filesystem Interface Types Definition\nDESCRIPTION: TypeScript interface definitions for Capacitor's Filesystem plugin, including options and results for various file operations like directory management, file stats, copying, and downloading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RmdirOptions {\n  path: string;\n  directory: Directory;\n  recursive?: boolean;\n}\n\ninterface ReaddirResult {\n  files: FileInfo[];\n}\n\ninterface FileInfo {\n  name: string;\n  type: 'file' | 'directory';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri: string;\n}\n\ninterface ReaddirOptions {\n  path: string;\n  directory: Directory;\n}\n\ninterface GetUriResult {\n  uri: string;\n}\n\ninterface GetUriOptions {\n  path: string;\n  directory: Directory;\n}\n\ninterface StatResult {\n  type: 'file' | 'directory';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri: string;\n}\n\ninterface StatOptions {\n  path: string;\n  directory: Directory;\n}\n\ninterface CopyOptions {\n  from: string;\n  to: string;\n  directory: Directory;\n  toDirectory?: Directory;\n}\n\ninterface CopyResult {\n  uri: string;\n}\n\ninterface PermissionStatus {\n  publicStorage: PermissionState;\n}\n\ninterface DownloadFileResult {\n  path: string;\n  blob: Blob;\n}\n\ninterface DownloadFileOptions {\n  path: string;\n  directory?: Directory;\n  progress?: boolean;\n  recursive?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard API in TypeScript\nDESCRIPTION: Example demonstrating how to write text to the clipboard and read data from the clipboard using the Capacitor Clipboard API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/clipboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clipboard } from '@capacitor/clipboard';\n\nconst writeToClipboard = async () => {\n  await Clipboard.write({\n    string: \"Hello World!\"\n  });\n};\n\nconst checkClipboard = async () => {\n  const { type, value } = await Clipboard.read();\n\n  console.log(`Got ${type} from clipboard: ${value}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Web Implementation\nDESCRIPTION: Registers the ScreenOrientationWeb class as the web implementation of the plugin using registerPlugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n  {\n    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Status Bar setBackgroundColor Method Definition\nDESCRIPTION: TypeScript definition for the setBackgroundColor method, which changes the background color of the status bar on Android devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetBackgroundColor(options: BackgroundColorOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Network API in TypeScript\nDESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/network.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Network } from '@capacitor/network';\n\nNetwork.addListener('networkStatusChange', status => {\n  console.log('Network status changed', status);\n});\n\nconst logCurrentNetworkStatus = async () => {\n  const status = await Network.getStatus();\n\n  console.log('Network status:', status);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the watchPosition API Method in TypeScript\nDESCRIPTION: Type definition for the `watchPosition` method. It takes `PositionOptions` and a `WatchPositionCallback` function as arguments. It returns a `Promise` that resolves with a callback ID (`CallbackID`, a string) used to track the watch instance. This method continuously monitors location changes and invokes the callback with updated `Position` data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwatchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `checkPermissions` method signature in TypeScript for the Capacitor Filesystem API. This asynchronous function checks the current read/write permission status for the application's filesystem access. It is particularly required on Android when using `Directory.Documents` or `Directory.ExternalStorage`. It returns a Promise resolving to `PermissionStatus`. Available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: React Deep Link Handler Implementation\nDESCRIPTION: Implementation of a React functional component that listens for deep link events and navigates to the appropriate route. This component uses the useEffect hook to register the listener and the useHistory hook for navigation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst AppUrlListener: React.FC<any> = () => {\n  let history = useHistory();\n  useEffect(() => {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n      // Example url: https://beerswift.app/tabs/tab2\n      // slug = /tabs/tab2\n      const slug = event.url.split('.app').pop();\n      if (slug) {\n        history.push(slug);\n      }\n      // If no match, do nothing - let regular routing\n      // logic take over\n    });\n  }, []);\n\n  return null;\n};\n\nexport default AppUrlListener;\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Push Notifications API in TypeScript\nDESCRIPTION: Provides a comprehensive example of using the Push Notifications API in TypeScript. It demonstrates how to add listeners for registration success, registration errors, received notifications, and notification actions. It also shows how to check and request permissions, register the app for push notifications, and retrieve the list of delivered notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PushNotifications } from '@capacitor/push-notifications';\n\nconst addListeners = async () => {\n  await PushNotifications.addListener('registration', token => {\n    console.info('Registration token: ', token.value);\n  });\n\n  await PushNotifications.addListener('registrationError', err => {\n    console.error('Registration error: ', err.error);\n  });\n\n  await PushNotifications.addListener('pushNotificationReceived', notification => {\n    console.log('Push notification received: ', notification);\n  });\n\n  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n    console.log('Push notification action performed', notification.actionId, notification.inputValue);\n  });\n}\n\nconst registerNotifications = async () => {\n  let permStatus = await PushNotifications.checkPermissions();\n\n  if (permStatus.receive === 'prompt') {\n    permStatus = await PushNotifications.requestPermissions();\n  }\n\n  if (permStatus.receive !== 'granted') {\n    throw new Error('User denied permissions!');\n  }\n\n  await PushNotifications.register();\n}\n\nconst getDeliveredNotifications = async () => {\n  const notificationList = await PushNotifications.getDeliveredNotifications();\n  console.log('delivered notifications', notificationList);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteCookie API Method in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `deleteCookie` method. It requires an `options` parameter of type `DeleteCookieOptions` (containing URL and key) and returns a Promise that resolves once the specified cookie has been deleted from the device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteCookie(options: DeleteCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Path Listing for Auto-Generated Documentation\nDESCRIPTION: Lists the directory paths where auto-generated markdown files are stored, managed by scripts in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- docs/api/\n- docs/cli/commands/\n- docs/native/\n```\n\n----------------------------------------\n\nTITLE: Clipboard.write() Method Signature\nDESCRIPTION: TypeScript definition for the write method that copies data to the system clipboard. It accepts WriteOptions for specifying the content to be copied.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/clipboard.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwrite(options: WriteOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability in Capacitor\nDESCRIPTION: Shows how to check if a specific plugin is available on the current platform using isPluginAvailable().\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Level Type Alias - TypeScript\nDESCRIPTION: Defines a numeric type alias for notification 'importance' levels, matching Android NotificationManager. Used for setting the interruption level of notifications in Channel configuration. Acceptable values range from 1 to 5. No dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Map Type in Google Maps\nDESCRIPTION: Returns the current map type (e.g., normal, satellite, terrain). Returns a Promise that resolves to a MapType enum value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ngetMapType() => Promise<MapType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Link Routing in Vue\nDESCRIPTION: Sets up deep link routing in a Vue.js application using Vue Router and the Capacitor App API. It listens for the 'appUrlOpen' event and navigates to the appropriate route.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nconst router = new VueRouter({\n  routes: [],\n});\n\nconst VueApp = new Vue({\n  router,\n}).$mount('#app');\n\nApp.addListener('appUrlOpen', function (event: URLOpenListenerEvent) {\n  // Example url: https://beerswift.app/tabs/tabs2\n  // slug = /tabs/tabs2\n  const slug = event.url.split('.app').pop();\n\n  // We only push to the route if there is a slug present\n  if (slug) {\n    router.push({\n      path: slug,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Intent with Result in Android Plugin\nDESCRIPTION: Shows implementation of an image picker that launches an Intent and handles the result using @ActivityCallback annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin()\nclass ImagePicker extends Plugin {\n\n  @PluginMethod()\n  public void pickImage(PluginCall call) {\n    Intent intent = new Intent(Intent.ACTION_PICK);\n    intent.setType(\"image/*\");\n\n    // Start the Activity for result using the name of the callback method\n    startActivityForResult(call, intent, \"pickImageResult\");\n  }\n\n  @ActivityCallback\n  private void pickImageResult(PluginCall call, ActivityResult result) {\n    if (call == null) {\n      return;\n    }\n\n    // Do something with the result data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Plugin Call in Swift\nDESCRIPTION: Demonstrates how to return data back to the client using the resolve method of CAPPluginCall. Shows successful resolution with a dictionary of JSON-serializable data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Background Runner Plugin - Bash\nDESCRIPTION: Installs the Capacitor Background Runner plugin via npm and synchronizes the Capacitor project. Requires npm and npx installed. Outputs installation logs; input is run via terminal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/background-runner\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Functionality for Capacitor Plugin in TypeScript\nDESCRIPTION: This code shows how to implement the web version of the new 'openMap' method in the plugin's web.ts file. It extends the WebPlugin class and implements the EchoPlugin interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  EchoPlugin,\n  OpenMapOptions,\n} from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  // other methods\n\n  async openMap(location: OpenMapOptions): Promise<void> {\n    // logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the localURL Method Signature in Swift\nDESCRIPTION: Shows the method signature for `localURL` on the Capacitor bridge. This function is used to convert a URL from the web view context (like `res://` or `file://` URLs referring to web assets or local files) into a corresponding native `file://` URL usable by iOS APIs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfunc localURL(fromWebURL webURL: URL?) -> URL?\n```\n\n----------------------------------------\n\nTITLE: Defining URLOpenListener Type Alias - TypeScript\nDESCRIPTION: Defines a functional type alias for a listener receiving URLOpenListenerEvent data, returning void. This supports registering handlers to process incoming URL events, such as deep links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype URLOpenListener = (event: URLOpenListenerEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation\nDESCRIPTION: TypeScript function to unlock the screen's orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nunlock() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback Methods in Objective-C\nDESCRIPTION: Objective-C declaration for a callback method in an iOS Capacitor plugin using the CAP_PLUGIN macro with CAPPluginReturnCallback return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platforms to Capacitor Project - CLI Commands (bash)\nDESCRIPTION: These commands add iOS and Android native projects at the repository root by leveraging Capacitor's platform integration. The default folder structure and configurations for each platform are created, pulling in compatible Cordova plugins declared in package.json dependencies. Requires npx, Capacitor CLI, and proper permissions to modify the project structure. Outputs are native folders for ios and android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Creating Ionic Angular App with Capacitor Integration\nDESCRIPTION: Uses the Ionic CLI to generate a new Ionic Angular application named 'capApp' based on the 'blank' starter template. The `--type=angular` flag specifies Angular, and the command prompts the user to integrate Capacitor during the setup process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic start capApp blank --type=angular\n```\n\n----------------------------------------\n\nTITLE: API: show() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `show()` method of the Keyboard plugin. This method programmatically shows the keyboard and returns a Promise that resolves when the action is complete. It is noted as alpha and only supported on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshow() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPerformed Interface in TypeScript\nDESCRIPTION: Interface for action performed on a notification, including the action ID, input value, and the notification object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue: string;\n  notification: PushNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Cookies Plugin in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring the Capacitor Cookies plugin within a `capacitor.config.ts` file. It defines a `CapacitorConfig` object where the `plugins.CapacitorCookies.enabled` property is set to `true` to activate native cookie handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorCookies: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Load Method in Swift for Capacitor iOS\nDESCRIPTION: Demonstrates how to run code when a plugin is first loaded by overriding the load() method\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android and iOS Projects to Capacitor\nDESCRIPTION: These commands create the Android and iOS projects for your native application after the platform dependencies have been installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Forcing App Exit using Capacitor App Plugin - TypeScript\nDESCRIPTION: This TypeScript snippet defines the exitApp() method for forcibly terminating the application. Intended to be called in conjunction with an Android backButton handler, it returns a Promise and exits the app. Dependencies: Capacitor App plugin. No parameters. Output: App termination. Limitation: Should not be used unless explicitly required, especially not with Ionic.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexitApp() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration in Capacitor Config File - TypeScript\nDESCRIPTION: This snippet shows how to define custom configuration values for a Capacitor plugin within the 'plugins' property of a Capacitor configuration file. The plugin 'MyCoolPlugin' is configured with 'style' and 'iconColor'. This structure allows the plugin's native code to retrieve these user-defined settings at runtime. The configuration is written in TypeScript, and no external dependencies are required except for the Capacitor config format.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  appId: 'com.company.app',\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: '#FF0000'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Background Color with Capacitor (TypeScript)\nDESCRIPTION: Defines the setBackgroundColor method. Only supported on Android. Takes a BackgroundColorOptions object specifying a hex color string for the status bar, and returns a Promise. Requires plugin setup on Android; color hex string input is required. No output is returned.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetBackgroundColor(options: BackgroundColorOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Methods Stubs in Web Plugin (TypeScript Diff)\nDESCRIPTION: This diff snippet shows how to add the `checkPermissions` and `requestPermissions` methods to the web implementation class (`EchoWeb`) in `src/web.ts`. Initially, these are added as empty stubs (marked with TODO) that need to be implemented according to web API specifics. Both methods must return a `Promise<PermissionStatus>`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n+import { PermissionStatus } from './definitions';\n\n export class EchoWeb extends WebPlugin implements EchoPlugin {\n   async echo(options: { value: string }) {\n     ...\n   }\n\n+  async checkPermissions(): Promise<PermissionStatus> {\n+    // TODO\n+  }\n\n+  async requestPermissions(): Promise<PermissionStatus> {\n+    // TODO\n+  }\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Camera pickImages Method Definition\nDESCRIPTION: TypeScript API definition for the pickImages method that enables users to select multiple pictures from their photo gallery.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npickImages(options: GalleryImageOptions) => Promise<GalleryPhotos>\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for Geolocation Permissions\nDESCRIPTION: XML snippet showing the necessary `<uses-permission>` tags for accessing coarse and fine location, and an optional `<uses-feature>` tag to specify that GPS hardware is required by the app. These must be added to the `AndroidManifest.xml` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation API -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Local Notifications Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/local-notifications package and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/local-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Code to Capacitor Project\nDESCRIPTION: This command copies the built web bundle to both Android and iOS projects and updates the native dependencies that Capacitor uses. It requires the web code to be already built for distribution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Initializing PWA Elements in React (TypeScript/JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and call the `defineCustomElements` function from `@ionic/pwa-elements/loader` within a React application's main entry point (`main.tsx`, `index.tsx`, or `index.js`). This call registers the PWA web components and should occur before the application's render call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/pwa-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\n// Call the element loader before the render call\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Echo Implementation - Swift\nDESCRIPTION: This snippet defines a simple class 'Echo' that inherits from NSObject and implements a single method 'echo' which takes a String, logs it, and returns the same value. No external dependencies are required other than Foundation. The 'echo' method demonstrates how to implement basic synchronous native logic for use in a Capacitor plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\n@objc public class Echo: NSObject {\n    @objc public func echo(_ value: String) -> String {\n        print(value)\n        return value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Native Plugin Method from TypeScript\nDESCRIPTION: This TypeScript code shows how to use the exported `Echo` plugin proxy to call the native `echo` method. It imports the `Echo` object, calls the `echo` method asynchronously using `await` with the required `{ value: '...' }` payload, and logs the response received from the native Java code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Presenting a Custom View Controller Using the Bridge in Swift\nDESCRIPTION: This Swift example demonstrates how to asynchronously present a custom view controller over the Capacitor app using the bridge's viewController property. It leverages DispatchQueue.main.async to ensure presentation happens on the main UI thread. The pattern is standard for showing modal views and requires both the custom UIViewController instance and access to the bridge.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nDispatchQueue.main.async {\n  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining WriteFileOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for writing a file using the Capacitor Filesystem API. Requires the `path` to write to, the `data` (string) to write, and the target `directory`. Optionally accepts an `encoding` (defaults to base64, use Encoding.UTF8 for string data) and a `recursive` flag (boolean, default false) to create parent directories if they don't exist.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WriteFileOptions {\n  /**\n   * The path of the file to write\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The data to write\n   * @since 1.0.0\n   */\n  data: string;\n  /**\n   * The Directory to store the file in\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n  /**\n   * The encoding to write the file in. If not provided, data is written as base64 encoded.\n   * Pass Encoding.UTF8 to write data as string\n   * @see Encoding\n   * @since 1.0.0\n   */\n  encoding?: Encoding;\n  /**\n   * Whether to create any missing parent directories.\n   * @default false\n   * @since 1.0.0\n   */\n  recursive?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Filesystem Access\nDESCRIPTION: XML configuration required for Android 10 and older when using Directory.Documents or Directory.ExternalStorage, providing read and write access to external storage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Dynamic Capacitor Configuration\nDESCRIPTION: Modifies the capacitor.config.ts file to export different configurations based on the NODE_ENV environment variable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nlet config: CapacitorConfig;\n\nconst baseConfig: CapacitorConfig = {\n  appId: 'io.ionic.starter',\n  appName: 'My App',\n  webDir: 'build',\n  bundledWebRuntime: false,\n};\n\nswitch (process.env.NODE_ENV) {\n  case 'qa':\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App QA',\n      },\n      android: {\n        flavor: 'qa',\n      },\n    };\n    break;\n  default:\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App',\n      },\n      android: {\n        flavor: 'dev',\n      },\n    };\n    break;\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Getting Status Bar Information (TypeScript API)\nDESCRIPTION: This TypeScript signature defines the `getInfo` method. It retrieves the current state of the status bar, including its visibility, style, color (Android only), and overlay status (Android only). It returns a Promise that resolves with a `StatusBarInfo` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<StatusBarInfo>\n```\n\n----------------------------------------\n\nTITLE: Requesting All Permissions in Capacitor Android Plugin\nDESCRIPTION: Shows how to modify a plugin method to request all permissions defined in the plugin annotation and specify a callback method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void takePhoto(PluginCall call) {\n  if (!hasRequiredPermissions()) {\n    requestAllPermissions(call, \"cameraPermsCallback\");\n  } else {\n    loadCamera(call);\n  }\n}\n\n@PermissionCallback\nprivate void cameraPermsCallback(PluginCall call) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in TypeScript for Capacitor Plugins\nDESCRIPTION: Shows how to add and remove event listeners for custom plugin events in TypeScript. This is useful for reacting to events emitted by the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Configuring CapacitorHttp Plugin in JSON\nDESCRIPTION: Example configuration for enabling the CapacitorHttp plugin in the capacitor.config.json file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/http.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorHttp\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugin in TypeScript\nDESCRIPTION: This snippet shows how to use the custom EchoPlugin in TypeScript code, calling the echo method and logging the result.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Local Notifications Plugin - Bash\nDESCRIPTION: This snippet shows how to install the @capacitor/local-notifications plugin and synchronize it with the Capacitor project. It requires npm and npx to be available in the development environment. The 'npm install' command adds the dependency to your project, and 'npx cap sync' ensures native platform code is updated accordingly. Run these commands from your project's root directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/local-notifications\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Local Notifications - Capacitor Plugin API - TypeScript\nDESCRIPTION: This code defines the getPending method for retrieving a list of all pending notifications yet to be displayed. It returns a Promise resolving to a PendingResult object and requires the plugin to be active. There are no required parameters, and the output is a collection of pending notification details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetPending() => Promise<PendingResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Method Types in TypeScript\nDESCRIPTION: TypeScript interface definitions showing the three different method types possible in a Capacitor plugin: void return, value return with data, and callback-style methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CallbackID = string;\n\nexport interface MyData {\n  data: string;\n}\n\nexport type MyPluginCallback = (message: MyData | null, err?: any) => void;\n\nexport interface MyPlugin {\n  method1(): Promise<void>;\n  method2(): Promise<MyData>;\n  method3(callback: MyPluginCallback): Promise<CallbackID>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Capacitor Plugin in Java\nDESCRIPTION: This Java code defines a basic Capacitor plugin named 'Echo'. It includes a single method `echo` annotated with `@PluginMethod`, which takes a string 'value' from the JavaScript call via `PluginCall`, wraps it in a `JSObject`, and sends it back to the WebView using `call.resolve()`. The `@CapacitorPlugin` annotation registers the plugin with the name 'Echo'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Listeners in TypeScript\nDESCRIPTION: Example showing how to add event listeners for keyboard show/hide events using the Keyboard API\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Core and CLI Dependencies\nDESCRIPTION: Installs the core Capacitor JavaScript runtime (`@capacitor/core`) as a production dependency and the Capacitor command-line interface (`@capacitor/cli`) as a development dependency into an existing web project. These are necessary for integrating Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Optional String Value in Capacitor Plugin (Swift)\nDESCRIPTION: This Swift snippet demonstrates the recommended way to access a potentially null value from a Capacitor plugin call's options using the `getString` convenience accessor. This method correctly handles Objective-C's `NSNull` placeholder by returning `nil` if the key corresponds to `NSNull` or is missing, preventing crashes and simplifying optional handling in Swift.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nif let value = call.getString(\"foo\") {\n    // GOOD: `value` is nil, so this block won't run\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Screen Reader Plugin\nDESCRIPTION: These commands install the `@capacitor/screen-reader` package using npm and then synchronize the native iOS and Android projects with the updated dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-reader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-reader\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platforms to an Ionic Capacitor Project (bash)\nDESCRIPTION: These commands add Android and iOS platforms to a Capacitor-enabled Ionic project. Each command creates the necessary native source directory (for android or ios), enabling the project to be compiled and run on those native platforms. Capacitor must be installed and integrated before executing these commands.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/with-ionic.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nionic capacitor add android\nionic capacitor add ios\n\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Orientations Callback in AppDelegate (Swift)\nDESCRIPTION: This Swift function within AppDelegate.swift is called by iOS to determine the supported interface orientations for the application. It delegates this decision by returning the value of `ScreenOrientationPlugin.supportedOrientations`, allowing the Capacitor plugin to control allowed orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n    return ScreenOrientationPlugin.supportedOrientations\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Configuration Changes in ScreenOrientationPlugin\nDESCRIPTION: This snippet shows how to handle configuration changes in the ScreenOrientationPlugin class. It includes methods to detect orientation changes and notify listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   this.onOrientationChanged();\n}\n\nprivate void onOrientationChanged() {\n   JSObject ret = new JSObject();\n   String type = implementation.getCurrentOrientationType();\n   ret.put(\"type\", type);\n   notifyListeners(\"screenOrientationChange\", ret);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Local Notification Action Performed in TypeScript\nDESCRIPTION: This method adds a listener for when an action is performed on a notification. It takes an event name and a listener function as parameters, and returns a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationActionPerformed', listenerFunc: (notificationAction: ActionPerformed) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Checking Share Capability with canShare() in TypeScript\nDESCRIPTION: Provides the TypeScript function signature for `canShare()`. This asynchronous function checks if the native sharing capabilities are available on the current platform and returns a promise resolving to a `CanShareResult` object indicating support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/share.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncanShare() => Promise<CanShareResult>\n```\n\n----------------------------------------\n\nTITLE: Requesting Push Notification Permissions in Capacitor\nDESCRIPTION: Request permission to receive push notifications. On iOS, it prompts the user for permission on first use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin Event Listener in Capacitor (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to remove a previously registered plugin event listener in Capacitor. By awaiting the result of MyPlugin.addListener, you obtain a listener handle with a remove method, which detaches the event listener to prevent memory leaks or unwanted invocations. The code requires the plugin import and proper usage of asynchronous listener registration. Input is the event name and callback function; output is the disposal of the listener. Limitation: Must be called on the same listener handle that was added.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Defining ImageOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the ImageOptions interface used for configuring camera and photo picker options in Capacitor. It includes properties for image quality, editing, result type, saving to gallery, dimensions, orientation correction, source, camera direction, presentation style, and various prompt labels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImageOptions {\n  quality?: number;\n  allowEditing?: boolean;\n  resultType?: CameraResultType;\n  saveToGallery?: boolean;\n  width?: number;\n  height?: number;\n  correctOrientation?: boolean;\n  source?: CameraSource;\n  direction?: CameraDirection;\n  presentationStyle?: 'fullscreen' | 'popover';\n  webUseInput?: boolean;\n  promptLabelHeader?: string;\n  promptLabelCancel?: string;\n  promptLabelPhoto?: string;\n  promptLabelPicture?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform to Capacitor Project using CLI\nDESCRIPTION: This command utilizes the Capacitor CLI (`npx cap`) to add the native iOS platform scaffolding to your project. It creates the necessary Xcode project files and directories within the `ios` folder based on your web app and the installed `@capacitor/ios` package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Registering 'registrationError' event listener - Capacitor Plugin - TypeScript\nDESCRIPTION: Registers a listener for errors that occur during push notification registration. Accepts the event name 'registrationError' and a callback that receives an error object. Returns a promise and a handle for listener lifecycle management. Requires no additional dependencies beyond Capacitor notification support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registrationError', listenerFunc: (error: any) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Registration in iOS\nDESCRIPTION: Swift methods to handle successful and failed push notification registration in iOS AppDelegate.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  Messaging.messaging().apnsToken = deviceToken\n  Messaging.messaging().token(completion: { (token, error) in\n    if let error = error {\n        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n    } else if let token = token {\n        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n    }\n  })\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Heterogeneous Array from Capacitor Call (Swift)\nDESCRIPTION: This Swift snippet demonstrates retrieving an array from `CAPPluginCall` using `getArray(\"bar\")` without specifying an expected element type. While this successfully retrieves the array containing potentially mixed types (including `NSNull`), the elements within the `values` array will need to be individually type-checked and cast later in the code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nif let values = call.getArray(\"bar\") {\n    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in Capacitor Plugins (TypeScript)\nDESCRIPTION: This TypeScript code shows how to add an event listener to a Capacitor plugin. It demonstrates adding a listener for a custom event 'myPluginEvent' and logging when the event is fired.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Basic Toast Notification (TypeScript)\nDESCRIPTION: Demonstrates importing the Toast module from @capacitor/toast and defining an asynchronous function `showHelloToast` that displays a simple toast notification with the text 'Hello!' using the `Toast.show` method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from '@capacitor/toast';\n\nconst showHelloToast = async () => {\n  await Toast.show({\n    text: 'Hello!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of a Uint8Array, including BYTES_PER_ELEMENT, buffer, byteLength, byteOffset, and length. It provides type information and descriptions for each property.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint8Array {\n  BYTES_PER_ELEMENT: number;\n  buffer: ArrayBufferLike;\n  byteLength: number;\n  byteOffset: number;\n  length: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notification Registration - UIApplication Delegate - Swift\nDESCRIPTION: These delegate methods in AppDelegate.swift handle successful and failed registration for remote notifications on iOS. They post appropriate notifications via NotificationCenter when registration succeeds or fails, aiding integration with Capacitor. App must import any required modules (UIKit and potentially Capacitor headers). The parameters include the application instance, device token data, and error information. These methods are essential for connecting native iOS push events to the Capacitor plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\\n  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\\n}\\n\\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Plugin with Permissions Methods - Swift (diff)\nDESCRIPTION: This diff-format snippet shows how to add 'checkPermissions' and 'requestPermissions' overrides to a plugin class. Both functions are decorated with @objc and are implemented as stubs with TODO placeholders for future permission logic. This pattern is a required adaptation for plugins managing iOS permissions and is to be pasted in the plugin implementation file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n import Capacitor\n\n @objc(EchoPlugin)\n public class EchoPlugin: CAPPlugin {\n     ...\n\n+    @objc override public func checkPermissions(_ call: CAPPluginCall) {\n+        // TODO\n+    }\n\n+    @objc override public func requestPermissions(_ call: CAPPluginCall) {\n+        // TODO\n+    }\n }\n```\n\n----------------------------------------\n\nTITLE: Consuming Plugin Configuration and Types in App (TypeScript)\nDESCRIPTION: Example of an application's `capacitor.config.ts` file demonstrating how to import plugin types using a triple-slash directive and set the specific configuration values (`style`, `iconColor`) for `MyCoolPlugin`. Requires the app to use TypeScript for its configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor-community/my-cool-plugin\" />\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: \"com.company.app\",\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: \"#034821\"\n    }\n  }\n}\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Orientation Change Listener in Capacitor\nDESCRIPTION: This code adds an event listener to the ScreenOrientation plugin to update the orientation state when a change occurs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nScreenOrientation.addListener('screenOrientationChange', res =>\n  setOrientation(res.type)\n);\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners for Local Notifications in TypeScript\nDESCRIPTION: This method removes all listeners for the local notifications plugin. It returns a Promise that resolves to void.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Sync Command\nDESCRIPTION: Command syntax for running Capacitor sync operation. Accepts an optional platform parameter (android/ios) and supports --deployment and --inline options. The --deployment option preserves Podfile.lock and uses deployment mode for pod install, while --inline enables debugging by inlining JS source maps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync [options] [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback Method in iOS (Objective-C)\nDESCRIPTION: This Objective-C snippet shows how to declare a Capacitor plugin method (`method3`) for iOS that uses callbacks. The `CAP_PLUGIN_METHOD` macro uses `CAPPluginReturnCallback` to indicate this method type. The implementation needs to retain the `CAPPluginCall` object (e.g., using `[self bridge].savedCalls`) and set `call.keepAlive = @(YES);` to allow sending multiple results via `[call resolve:@{ ... }]`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the prompt Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the `Dialog.prompt` function. It accepts a single argument `options` of type `PromptOptions` and returns a `Promise<PromptResult>` which resolves with an object containing the entered text (`value`) and a boolean indicating if the dialog was cancelled (`cancelled`). This function is available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/dialog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprompt(options: PromptOptions) => Promise<PromptResult>\n```\n\n----------------------------------------\n\nTITLE: Using Dialog API in TypeScript\nDESCRIPTION: Example demonstrating how to use the Dialog API for showing alerts, confirmations, and prompts. Includes functions for each dialog type and demonstrates handling of user responses.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from '@capacitor/dialog';\n\nconst showAlert = async () => {\n  await Dialog.alert({\n    title: 'Stop',\n    message: 'this is an error',\n  });\n};\n\nconst showConfirm = async () => {\n  const { value } = await Dialog.confirm({\n    title: 'Confirm',\n    message: `Are you sure you'd like to press the red button?`,\n  });\n\n  console.log('Confirmed:', value);\n};\n\nconst showPrompt = async () => {\n  const { value, cancelled } = await Dialog.prompt({\n    title: 'Hello',\n    message: `What's your name?`,\n  });\n\n  console.log('Name:', value);\n  console.log('Cancelled:', cancelled);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor with TypeScript\nDESCRIPTION: Example of a typed Capacitor configuration file using TypeScript, including plugin configurations for notifications, splash screen, and other app settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/local-notifications\" />\n/// <reference types=\"@capacitor/push-notifications\" />\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.capacitorjs.app.testapp',\n  appName: 'capacitor-testapp',\n  webDir: 'build',\n  plugins: {\n    SplashScreen: {\n      launchAutoHide: false,\n    },\n    LocalNotifications: {\n      smallIcon: 'ic_stat_icon_config_sample',\n      iconColor: '#CE0B7C',\n    },\n    PushNotifications: {\n      presentationOptions: ['alert', 'sound'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Orientation Type to Integer Conversion\nDESCRIPTION: Helper method that converts orientation type strings to raw integer values used by UIInterfaceOrientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToInt(_ orientationType: String) -> Int {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientation.landscapeLeft.rawValue\n  case \"landscape-secondary\":\n    return UIInterfaceOrientation.landscapeRight.rawValue\n  case \"portrait-secondary\":\n    return UIInterfaceOrientation.portraitUpsideDown.rawValue\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientation.portrait.rawValue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CameraPermissionType Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for CameraPermissionType representing 'camera' or 'photos' as string literals.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionType = 'camera' | 'photos';\n```\n\n----------------------------------------\n\nTITLE: Defining ReadFileOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for reading a file using the Capacitor Filesystem API. It specifies the file's `path`, the `directory` it resides in, and optionally the `encoding` to use (defaults to binary/base64 if omitted, use Encoding.UTF8 for string data).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadFileOptions {\n  /**\n   * The path of the file to read\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The Directory to read the file from\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n  /**\n   * The encoding to read the file in, if not provided, data is read as binary and returned as base64 encoded.\n   * Pass Encoding.UTF8 to read data as string\n   * @see Encoding\n   * @since 1.0.0\n   */\n  encoding?: Encoding;\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Optional Values from Plugin Call Options (Swift)\nDESCRIPTION: This Swift snippet shows recommended usage of the CAPPluginCall accessor provided by Capacitor's iOS SDK to safely extract an optional string value from the plugin call's options dictionary. By using getString, the return value is nil if the key is missing or contains an NSNull placeholder, preventing unwanted execution of code blocks when there is no meaningful value. It requires Capacitor's native APIs and a CAPPluginCall instance (call).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif let value = call.getString(\"foo\") {\n    // GOOD: `value` is nil, so this block won't run\n}\n```\n\n----------------------------------------\n\nTITLE: AppInfo Interface Definition - TypeScript\nDESCRIPTION: Defines the AppInfo interface containing app metadata including name, ID, build version, and app version. Includes platform-specific information for iOS and Android implementations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppInfo {\n  name: string;\n  id: string;\n  build: string;\n  version: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for Custom Elements (TypeScript)\nDESCRIPTION: Allows the use of custom web components like `<capacitor-google-map>` in an Angular application by adding `CUSTOM_ELEMENTS_SCHEMA` to the relevant NgModule's schemas array. This prevents Angular compiler errors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@NgModule({\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Status Bar API in TypeScript\nDESCRIPTION: Example demonstrating how to interact with the Status Bar plugin, including handling status bar tap events, setting transparency, changing styles, and toggling visibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\n// iOS only\nwindow.addEventListener('statusTap', function () {\n  console.log('statusbar tapped');\n});\n\n// Display content under transparent status bar (Android only)\nStatusBar.setOverlaysWebView({ overlay: true });\n\nconst setStatusBarStyleDark = async () => {\n  await StatusBar.setStyle({ style: Style.Dark });\n};\n\nconst setStatusBarStyleLight = async () => {\n  await StatusBar.setStyle({ style: Style.Light });\n};\n\nconst hideStatusBar = async () => {\n  await StatusBar.hide();\n};\n\nconst showStatusBar = async () => {\n  await StatusBar.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore Certificate\nDESCRIPTION: Command to create a new Android keystore certificate for use in deep linking configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -v -keystore KEY-NAME.keystore -alias ALIAS -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Defining CopyOptions Interface in TypeScript\nDESCRIPTION: Specifies the options for the `copy` operation in the Capacitor Filesystem API. It includes the source path (`from`), destination path (`to`), the source directory (`directory`), and optionally the destination directory (`toDirectory`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\n----------------------------------------\n\nTITLE: stat API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `stat` method of the Capacitor Filesystem API. This asynchronous function retrieves metadata about a file or directory (like size, modification time, type) based on the provided `StatOptions` and returns a Promise resolving to a `StatResult`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nstat(options: StatOptions) => Promise<StatResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Background Runner Plugin with NPM\nDESCRIPTION: Commands to install the Background Runner plugin and sync with Capacitor\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/background-runner\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Platform Detection in Capacitor\nDESCRIPTION: Shows how to detect the current platform (iOS, Android, or web) using getPlatform().\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  console.log('iOS!');\n} else if (Capacitor.getPlatform() === 'android') {\n  console.log('Android!');\n} else {\n  console.log('Web!');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager\nDESCRIPTION: Command to install Homebrew package manager on macOS, required for installing CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Callbacks in Capacitor Java\nDESCRIPTION: This example covers how to request permissions dynamically within a plugin method, using getPermissionState and requestPermissionForAlias methods. It defines a @PluginMethod for initiating the request and a @PermissionCallback to handle the result. Relies on Capacitor's permission system, requires properly annotated callback, and interaction with PermissionState. Inputs include alias names; outputs depend on permission state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\\npublic void takePhoto(PluginCall call) {\\n  if (getPermissionState(\"camera\") != PermissionState.GRANTED) {\\n    requestPermissionForAlias(\"camera\", call, \"cameraPermsCallback\");\\n  } else {\\n    loadCamera(call);\\n  }\\n}\\n\\n@PermissionCallback\\nprivate void cameraPermsCallback(PluginCall call) {\\n  if (getPermissionState(\"camera\") == PermissionState.GRANTED) {\\n    loadCamera(call);\\n  } else {\\n    call.reject(\"Permission is required to take a picture\");\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Messaging to iOS Notification Service Extension\nDESCRIPTION: This Ruby code snippet shows how to add Firebase Messaging to the iOS Notification Service Extension in the Podfile. It's necessary for handling image notifications in iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'pushextension' do\n  pod 'FirebaseMessaging'\nend\n```\n\n----------------------------------------\n\nTITLE: Confirm Dialog API Method Signature - TypeScript\nDESCRIPTION: Outlines the confirm method's API signature, which takes ConfirmOptions and returns a Promise of ConfirmResult. Used for displaying native confirmation dialogs and retrieving the user's confirmation. Availability is since version 1.0.0. Expected to run in an environment with the Dialog API registered.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/dialog.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(options: ConfirmOptions) => Promise<ConfirmResult>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project with CLI in Bash\nDESCRIPTION: This snippet demonstrates how to initialize a new Capacitor project using the npx CLI tool, specifying the application name and unique app ID. It also supports an optional '--web-dir' flag to set a custom web directory for an existing web application. The command requires npx and Capacitor installed, and the user must provide both appName and appID parameters; the expected output is a configured Capacitor project ready for further development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/init.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init <appName> <appID>\n```\n\n----------------------------------------\n\nTITLE: Angular Deep Link URL Processing Logic\nDESCRIPTION: Logic to parse deep link URLs and navigate to the appropriate route in an Angular application. This function extracts the path from the URL and uses Angular's router to navigate to the corresponding route.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitializeApp() {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n        this.zone.run(() => {\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = event.url.split(\".app\").pop();\n            if (slug) {\n                this.router.navigateByUrl(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from Capacitor Plugin in TypeScript\nDESCRIPTION: Illustrates how to remove an event listener from a Capacitor plugin in TypeScript using the remove() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Implementing requestPermissions() with Block-based API\nDESCRIPTION: Shows how to implement requestPermissions() using a block-based API for requesting camera access and then checking permissions after the request is handled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in\n        self?.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Notification Schema and Options Interfaces\nDESCRIPTION: Collection of interfaces for notification handling including cancel options, delivery status, and detailed notification schema\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CancelOptions {\n  notifications: LocalNotificationDescriptor[];\n}\n\ninterface EnabledResult {\n  value: boolean;\n}\n\ninterface DeliveredNotifications {\n  notifications: DeliveredNotificationSchema[];\n}\n\ninterface DeliveredNotificationSchema {\n  id: number;\n  tag?: string;\n  title?: string;\n  body?: string;\n  group?: string;\n  groupSummary?: boolean;\n  data?: any;\n  extra?: any;\n  attachments?: Attachment[];\n  actionTypeId?: string;\n  schedule?: Schedule;\n  sound?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Screen Requirement for iPad Orientation Lock\nDESCRIPTION: XML configuration to add to Info.plist for enabling full screen requirement on iPad, which allows orientation locking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>UIRequiresFullScreen</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Requesting Geolocation Permissions in AndroidManifest - XML\nDESCRIPTION: Specifies required geolocation permissions in AndroidManifest.xml for background location access. Must be included to allow coarse and fine location data retrieval and enable GPS usage if needed. No parameters; constraints: only required for location-dependent features.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation API -->\\n<uses-permission android:name=\\\"android.permission.ACCESS_COARSE_LOCATION\\\" />\\n<uses-permission android:name=\\\"android.permission.ACCESS_FINE_LOCATION\\\" />\\n<uses-feature android:name=\\\"android.hardware.location.gps\\\" />\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Code to Native Projects\nDESCRIPTION: This command syncs the web application bundle to the native projects and installs native dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: WritableStream Interface Definition\nDESCRIPTION: Standard interface for writing streaming data to a destination with built-in backpressure and queuing support. Includes a locked property and methods for abort and writer creation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WritableStream<W> {\n  locked: boolean;\n  abort(reason?: any): Promise<void>;\n  getWriter(): WritableStreamDefaultWriter<W>;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: This command opens the Android Capacitor project in Android Studio for more control over the native project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Defining MapType Enum in TypeScript\nDESCRIPTION: Enumerates the different types of map views available in the Google Maps plugin, including Normal, Hybrid, Satellite, Terrain, and None.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nenum MapType {\n  Normal = 'Normal',\n  Hybrid = 'Hybrid',\n  Satellite = 'Satellite',\n  Terrain = 'Terrain',\n  None = 'None'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GeolocationPermissionType Type Alias in TypeScript\nDESCRIPTION: Defines the GeolocationPermissionType type alias as a union of string literals representing different types of location permissions that can be requested or checked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype GeolocationPermissionType = 'location' | 'coarseLocation'\n```\n\n----------------------------------------\n\nTITLE: Setting a Value in Storage in TypeScript\nDESCRIPTION: This TypeScript snippet defines the method signature for set, which stores a value for a specified key in Capacitor Storage. The input is an object adhering to SetOptions with key and value properties (both strings). Requires @capacitor/storage plugin. The output is a Promise resolving when the value has been persisted. Available since version 1.0.0 of the Storage API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions in Capacitor\nDESCRIPTION: Requests permission to display local notifications. Returns a Promise resolving to a PermissionStatus object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Enablement Status - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript function signature defines 'areEnabled', a function to check if notifications are currently enabled on the device. Returns a promise resolving to an EnabledResult. Depends on EnabledResult type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nareEnabled() => Promise<EnabledResult>\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Screen Reader Plugin in TypeScript\nDESCRIPTION: Demonstrates how to import and use the Screen Reader plugin in a TypeScript application. It shows adding a listener for screen reader state changes, checking if the screen reader is currently enabled, and triggering text-to-speech output.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-reader.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenReader } from '@capacitor/screen-reader';\n\nScreenReader.addListener('screenReaderStateChange', ({ value }) => {\n  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);\n});\n\nconst checkScreenReaderEnabled = async () => {\n  const { value } = await ScreenReader.isEnabled();\n\n  console.log('Voice over enabled? ' + value);\n};\n\nconst sayHello = async () => {\n  await ScreenReader.speak({ value: 'Hello World!' });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing checkPermissions() for Location in iOS\nDESCRIPTION: Example of implementing the checkPermissions() method for location permissions, mapping iOS authorization statuses to Capacitor permission states and returning them to the client.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func checkPermissions(_ call: CAPPluginCall) {\n    let locationState: String\n\n    switch CLLocationManager.authorizationStatus() {\n    case .notDetermined:\n        locationState = \"prompt\"\n    case .restricted, .denied:\n        locationState = \"denied\"\n    case .authorizedAlways, .authorizedWhenInUse:\n        locationState = \"granted\"\n    @unknown default:\n        locationState = \"prompt\"\n    }\n\n    call.resolve([\"location\": locationState])\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Change Handler with Orientation Tracking\nDESCRIPTION: Modification of the handleOnConfigurationChanged method to only notify listeners when the orientation actually changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   if(implementation.hasOrientationChanged(newConfig.orientation)) {\n       this.onOrientationChanged();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Capacitor CLI (Bash)\nDESCRIPTION: Demonstrates the basic command structure for running the Capacitor CLI using `npx`. It shows optional flags `-V` (or `--version`) to display the version number and `-h` (or `--help`) to show usage information. A specific `<command>` can be optionally provided to execute a particular CLI action. Requires `npx` and the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap [-V] [-h] [<command>]\n```\n\n----------------------------------------\n\nTITLE: Angular Assets Configuration for Deep Linking Files\nDESCRIPTION: This JSON configuration in angular.json ensures that the .well-known directory containing deep linking association files is properly included in the build output.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"glob\": \"**/*\",\n  \"input\": \"src/.well-known\",\n  \"output\": \".well-known/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening URL in System Browser with InAppBrowser\nDESCRIPTION: TypeScript code to open a URL in the system browser (Custom Tabs for Android, SFSafariViewController for iOS) using the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser, DefaultSystemBrowserOptions } from '@capacitor/inappbrowser';\nawait InAppBrowser.openInSystemBrowser({\n    url: \"https://www.google.com\",\n    options: DefaultSystemBrowserOptions\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in Swift ViewController\nDESCRIPTION: This snippet demonstrates how to register the custom EchoPlugin in a custom ViewController by overriding the capacitorDidLoad() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\noverride open func capacitorDidLoad() {\n    bridge?.registerPluginInstance(EchoPlugin())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme for iOS (XML)\nDESCRIPTION: Registers a custom URL scheme by editing the iOS Info.plist file. This is necessary for the app to be opened via a custom URL scheme on iOS. Place this XML inside the existing Info.plist. The CFBundleURLName should be unique to your app, and CFBundleURLSchemes specifies the allowed schemes. No additional dependencies required, but Xcode access to Info.plist is necessary. This configuration allows deep linking into the app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\\n<array>\\n  <dict>\\n    <key>CFBundleURLName</key>\\n    <string>com.getcapacitor.capacitor</string>\\n    <key>CFBundleURLSchemes</key>\\n    <array>\\n      <string>mycustomscheme</string>\\n    </array>\\n  </dict>\\n</array>\n```\n\n----------------------------------------\n\nTITLE: Defining AppendFileOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for appending data to an existing file using the Capacitor Filesystem API. Requires the `path` of the file, the `data` (string) to append, and the `directory` where the file resides. Optionally accepts an `encoding` (defaults to base64, use Encoding.UTF8 for string data).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppendFileOptions {\n  /**\n   * The path of the file to append\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The data to write\n   * @since 1.0.0\n   */\n  data: string;\n  /**\n   * The Directory to store the file in\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n  /**\n   * The encoding to write the file in. If not provided, data is written as base64 encoded.\n   * Pass Encoding.UTF8 to write data as string\n   * @see Encoding\n   * @since 1.0.0\n   */\n  encoding?: Encoding;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Method in ScreenOrientationPlugin\nDESCRIPTION: Implements the lock method in the plugin class, validating the orientation input parameter and calling the implementation's lock method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void lock(PluginCall call) {\n   String orientationType = call.getString(\"orientation\");\n   if(orientationType == null) {\n       call.reject(\"Input option 'orientation' must be provided.\");\n       return;\n   }\n   implementation.lock(orientationType);\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Toast.show API Function Signature (TypeScript)\nDESCRIPTION: Defines the TypeScript signature for the Toast.show function, indicating it accepts an options object of type ShowOptions and returns a Promise that resolves when the toast is shown. Users must provide the ShowOptions parameter, which specifies text, duration, and position for the toast. This function is part of the Toast API beginning with version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options: ShowOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: API: setResizeMode() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `setResizeMode()` method. It accepts `KeyboardResizeOptions` to define how the WebView should resize when the keyboard appears. This method is only supported on iOS and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetResizeMode(options: KeyboardResizeOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Permissions for Geolocation\nDESCRIPTION: Required Android manifest permissions for accessing device location services.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation API -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: API Signature: openInWebView Method in TypeScript\nDESCRIPTION: Defines the signature for the `openInWebView` method. It accepts an `OpenInWebViewParameterModel` object containing the URL and options, and returns a `Promise<void>`. This method opens the URL in an embedded WebView.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nopenInWebView(model: OpenInWebViewParameterModel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Publishing Capacitor Plugin to npm\nDESCRIPTION: This bash command demonstrates how to publish a Capacitor plugin to npm, which builds the JS portion and publishes all plugin files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Comments to Plugin Interface in TypeScript\nDESCRIPTION: Shows how to document plugin functionality using JSDoc comment blocks, including method descriptions and parameter documentation for better API documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n\n+  /**\n+   * Opens the map at a given location.\n+   *\n+   * @since 1.1.0\n+   */\n   openMap(options: OpenMapOptions): Promise<void>;\n }\n\n export interface OpenMapOptions {\n+  /**\n+   * The latitude at which to open the map.\n+   */\n   latitude: number;\n\n+  /**\n+   * The longitude at which to open the map.\n+   */\n   longitude: number;\n }\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientation Plugin with Capacitor in TypeScript\nDESCRIPTION: This code registers the ScreenOrientation plugin with Capacitor using the registerPlugin function. It exports the plugin interface and the registered plugin object for use in the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/designing-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nimport type { ScreenOrientationPlugin } from './definitions';\n\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n);\n\nexport * from './definitions';\nexport { ScreenOrientation };\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners for Push Notifications in Capacitor (TypeScript)\nDESCRIPTION: Removes all previously added event listeners associated with the Push Notifications plugin (e.g., 'registration', 'pushNotificationReceived'). Returns a Promise that resolves when the listeners have been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Podfile Targets - Ruby\nDESCRIPTION: This snippet illustrates how to define multiple iOS build targets in the Podfile for CocoaPods dependency management. By duplicating and renaming the 'App' target block to 'App QA', dependencies can be installed separately for both the default and QA targets. Capacitor plugins and additional third-party pods can be placed inside each block as needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n...snip...\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\nend\n\ntarget 'App QA' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications in Capacitor\nDESCRIPTION: TypeScript method signature for registering an app to receive push notifications, which will trigger a registration event with the push token.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nregister() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining HttpOptions Interface in TypeScript for Capacitor HTTP Requests\nDESCRIPTION: This code snippet defines the HttpOptions interface used for configuring HTTP requests in Capacitor. It includes properties for URL, method, parameters, data, headers, timeouts, and various other configuration options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HttpOptions {\n  url: string;\n  method?: string;\n  params?: HttpParams;\n  data?: any;\n  headers?: HttpHeaders;\n  readTimeout?: number;\n  connectTimeout?: number;\n  disableRedirects?: boolean;\n  webFetchExtra?: RequestInit;\n  responseType?: HttpResponseType;\n  shouldEncodeUrlParams?: boolean;\n  dataType?: 'file' | 'formData';\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Assets and Native Dependencies\nDESCRIPTION: Executes the Capacitor CLI `sync` command using `npx`. This command copies the built web application assets (from the configured `webDir`) into the native project directories (iOS and Android) and installs or updates any required native dependencies (like CocoaPods for iOS).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Listening to Plugin Events in Capacitor (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to listen to custom plugin events emitted by a Capacitor plugin by attaching a listener to the plugin object. It uses MyPlugin.addListener to register a callback for the 'myPluginEvent', where any event information can be handled inside the callback. Requires the plugin to be properly imported and registered in the project. Input is the event name and callback function; output is a listener registration. Limitations: The plugin must support event emission for this to work.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Capacitor Plugin in TypeScript\nDESCRIPTION: Demonstrates how to add an event listener to a Capacitor plugin in TypeScript. This allows the application to react to custom events emitted by the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Assets and Updating Native Dependencies with Capacitor CLI in Bash\nDESCRIPTION: This Bash snippet uses the Capacitor CLI command to synchronize the built web code with both the Android and iOS projects and update native dependencies. This step is necessary after building your web assets and before running or testing your app on devices. It requires a properly set up Capacitor project and a web build already present in the specified web assets directory. The command takes no arguments, and outputs the result of syncing to the connected native projects. If your configuration is incorrect (e.g., wrong webDir), errors will be produced.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n\n```\n\n----------------------------------------\n\nTITLE: Describing ActionPerformed Interface - TypeScript\nDESCRIPTION: Provides a TypeScript interface capturing the data relating to actions performed on a notification. Fields include actionId, a platform-specific inputValue, and the notification object schema. Relies on LocalNotificationSchema for the notification property and is used in listeners or callbacks handling notification actions, with some properties being platform-dependent (like inputValue on iOS).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string; // Identifier of the performed action\n  inputValue: string; // Input from user, only available on iOS when input is enabled\n  notification: LocalNotificationSchema; // Original notification schema\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Jetifier and Capacitor Sync - Node.js Scripts in Bash\nDESCRIPTION: Installs the Jetifier tool to migrate plugins from Android support libraries to AndroidX, runs Jetifier to patch plugins, and finally synchronizes Capacitor plugins with the Android project. Dependencies include npm, npx, Jetifier, and the Capacitor CLI. These commands expect to be run in a Node.js project directory, and take no arguments; output is shown via CLI. Prerequisites: Node.js environment and relevant plugin issues requiring migration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\\nnpx jetify\\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog API Method Signature - TypeScript\nDESCRIPTION: Defines the TypeScript method signature for showing an alert dialog with the Dialog API's alert method. This function, alert, receives an AlertOptions parameter and returns a Promise that resolves when the dialog is dismissed. No output value is returned and it is available since version 1.0.0, with AlertOptions specifying the dialog's appearance and behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/dialog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nalert(options: AlertOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Prompting iOS to Save User Credentials with Capacitor Plugin (TypeScript)\nDESCRIPTION: This TypeScript snippet uses the \\\"capacitor-ios-autofill-save-password\\\" plugin\\'s SavePassword.promptDialog() method to prompt users to save their credentials natively on iOS after a successful login. It checks the platform using Capacitor.getPlatform() and passes the entered username and password. Only use on iOS; Android/Web do not require this explicit call. Dependencies: Capacitor Core and the plugin, configured per plugin documentation. Returns a promise, typically after a login event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  await SavePassword.promptDialog({\n    username: '[the username that was entered]',\n    password: '[the password that was entered]',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Fetch API and Typed Array Type Aliases in TypeScript\nDESCRIPTION: This snippet lists multiple TypeScript type aliases commonly used in web APIs. These include unions for Fetch API body types (BodyInit), stream reading results, event listeners, buffer sources, and HTTP settings (RequestCache, RequestCredentials, RequestMode, etc.). These aliases simplify type annotations and enforce correct values when implementing typed Fetch requests or buffer manipulations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype BodyInit = Blob | BufferSource | FormData | URLSearchParams | ReadableStream<Uint8Array> | string;\n\ntype ReadableStreamDefaultReadResult<T> = ReadableStreamDefaultReadValueResult<T> | ReadableStreamDefaultReadDoneResult;\n\ntype EventListenerOrEventListenerObject = EventListener | EventListenerObject;\n\ntype BufferSource = ArrayBufferView | ArrayBuffer;\n\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\n\ntype FormDataEntryValue = File | string;\n\ntype RequestCache = \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\";\n\ntype RequestCredentials = \"include\" | \"omit\" | \"same-origin\";\n\ntype HeadersInit = Headers | string[][] | Record<string, string>;\n\ntype Record<K extends string | number | symbol, T> = {\n  [P in K]: T;\n};\n\ntype RequestMode = \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\";\n\ntype RequestRedirect = \"error\" | \"follow\" | \"manual\";\n\ntype ReferrerPolicy = \"\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\";\n\ntype HttpResponseType = 'arraybuffer' | 'blob' | 'json' | 'text' | 'document';\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in React with Capacitor App API\nDESCRIPTION: This snippet shows how to implement deep link handling in a React app using the Capacitor App API. It creates a custom AppUrlListener component that listens for the 'appUrlOpen' event and uses React Router to navigate to the appropriate page.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n\nconst AppUrlListener: React.FC<any> = () => {\n  let history = useHistory();\n  useEffect(() => {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n      // Example url: https://beerswift.app/tabs/tab2\n      // slug = /tabs/tab2\n      const slug = event.url.split('.app').pop();\n      if (slug) {\n        history.push(slug);\n      }\n      // If no match, do nothing - let regular routing\n      // logic take over\n    });\n  }, []);\n\n  return null;\n};\n\nexport default AppUrlListener;\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Permissions in Capacitor Plugin Annotation using Diff\nDESCRIPTION: Shows the required modification to the `@CapacitorPlugin` annotation to declare Android permissions. It adds the `permissions` attribute, which takes an array of `@Permission` annotations. Each `@Permission` maps a functional `alias` (e.g., \"camera\", \"storage\") to one or more Android permission `strings` (e.g., `Manifest.permission.CAMERA`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n @CapacitorPlugin(\n     name = \"FooBar\",\n+    permissions = {\n+        @Permission(\n+            alias = \"camera\",\n+            strings = { Manifest.permission.CAMERA }\n+        ),\n+        @Permission(\n+            alias = \"storage\",\n+            strings = {\n+                Manifest.permission.READ_EXTERNAL_STORAGE,\n+                Manifest.permission.WRITE_EXTERNAL_STORAGE\n+            }\n+        )\n+    }\n )\n public class FooBarPlugin extends Plugin {\n     ...\n\n```\n\n----------------------------------------\n\nTITLE: Regenerating and Copying Assets for Native Platforms (Bash)\nDESCRIPTION: These shell commands use the @capacitor/assets tool to generate app icons and splash screens for iOS and Android platforms. Running these commands requires the images to be present in the 'resources' directory. Outputs are copied to the respective native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/assets generate --ios\nnpx @capacitor/assets generate --android\n```\n\n----------------------------------------\n\nTITLE: Updating OpenSSL and Ruby for GitHub Connection\nDESCRIPTION: Series of commands to update OpenSSL and Ruby installations to resolve GitHub connection issues with CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\nbrew upgrade openssl\nbrew install ruby\nbrew link --overwrite ruby\n```\n\n----------------------------------------\n\nTITLE: URLSearchParams Interface Definition in TypeScript\nDESCRIPTION: Defines the URLSearchParams interface for manipulating URL query parameters. Includes methods for CRUD operations on search parameters and query string manipulation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface URLSearchParams {\n  append(name: string, value: string): void;\n  delete(name: string): void;\n  get(name: string): string | null;\n  getAll(name: string): string[];\n  has(name: string): boolean;\n  set(name: string, value: string): void;\n  sort(): void;\n  toString(): string;\n  forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Platform Dependencies\nDESCRIPTION: Update Capacitor platform-specific packages (iOS, Android, Electron) to version 2 and sync the changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# iOS\nnpm install @capacitor/ios@2\nnpx cap sync ios\n\n# Android\nnpm install @capacitor/android@2\nnpx cap sync android\n\n# Electron\ncd electron\nnpm install @capacitor/electron@2\n```\n\n----------------------------------------\n\nTITLE: Defining the GalleryPhoto Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `GalleryPhoto` which describes the structure of a single photo object returned by the Capacitor Camera plugin. It includes properties like `path` (platform-specific file URL), `webPath` (usable in `<img>` src), `exif` data, and image `format`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryPhoto {\n  /**\n   * Full, platform-specific file URL that can be read later using the Filesystem API.\n   * @since 1.2.0\n   */\n  path: string;\n  /**\n   * webPath returns a path that can be used to set the src attribute of an image for efficient loading and rendering.\n   * @since 1.2.0\n   */\n  webPath: string;\n  /**\n   * Exif data, if any, retrieved from the image\n   * @since 1.2.0\n   */\n  exif: any;\n  /**\n   * The format of the image, ex: jpeg, png, gif.\n   * iOS and Android only support jpeg. Web supports jpeg, png and gif.\n   * @since 1.2.0\n   */\n  format: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 3 Core Dependencies\nDESCRIPTION: Command to install the latest Capacitor 3 CLI and Core packages via npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@latest-3 @capacitor/core@latest-3\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Orientation Change Event Listener\nDESCRIPTION: Capacitor plugin event listener that updates the orientation state when the screen orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nScreenOrientation.addListener('screenOrientationChange', res =>\n  setOrientation(res.type),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining BackButtonListener Type Alias - TypeScript\nDESCRIPTION: Introduces a type alias for functions subscribing to BackButtonListenerEvent, allowing app logic to respond to back button interactions. This is useful for custom navigation logic in single-page apps or embedded webviews.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype BackButtonListener = (event: BackButtonListenerEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Remove Keyboard Event Listeners Definition in TypeScript\nDESCRIPTION: Defines a method to remove all native listeners associated with the keyboard plugin. Returns a promise that resolves when all listeners are removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CameraConfig Interface in TypeScript\nDESCRIPTION: Specifies the configuration properties for a Google Map Camera, including coordinate, zoom, bearing, angle, and animation settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CameraConfig {\n  coordinate: LatLng;\n  zoom?: number;\n  bearing?: number;\n  angle?: number;\n  animate?: boolean;\n  animationDuration?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notification Registration in iOS AppDelegate (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to modify the `AppDelegate.swift` file in an iOS project to handle the registration events for remote notifications. It posts notifications through `NotificationCenter` upon successful registration (receiving a device token) or failure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Overlay Behavior (TypeScript)\nDESCRIPTION: Defines setOverlaysWebView for setting whether the status bar overlays the webview (Android only). Accepts a SetOverlaysWebViewOptions object with the overlay boolean. Returns a Promise; does not output data. Used to control content placement in conjunction with translucent system bars.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetOverlaysWebView(options: SetOverlaysWebViewOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting File Information with Capacitor Filesystem API (stat)\nDESCRIPTION: Defines the `stat` method signature from the Capacitor Filesystem API. This asynchronous function takes `StatOptions` (specifying the path and optional directory) and returns a Promise resolving to a `StatResult` containing metadata about the file (e.g., type, size, modification time).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstat(options: StatOptions) => Promise<StatResult>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Function for Screen Orientation\nDESCRIPTION: Implements the core lock function that restricts the device to a specific orientation. Handles both modern (iOS 16+) and legacy iOS approaches with proper error handling and async execution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\npublic func lock(_ orientationType: String, completion: @escaping (Error?) -> Void) {\n  DispatchQueue.main.async {\n    let orientation = self.fromOrientationTypeToInt(orientationType)\n    self.capViewController?.supportedOrientations = [orientation]\n    let mask = self.fromOrientationTypeToMask(orientationType)\n    if #available(iOS 16.0, *) {\n      if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {\n        windowScene.keyWindow?.rootViewController?.setNeedsUpdateOfSupportedInterfaceOrientations()\n        windowScene.requestGeometryUpdate(.iOS(interfaceOrientations: mask)) { error in\n          completion(error)\n        }\n      } else {\n        completion(ScreenOrientationError.noWindowScene)\n      }\n    } else {\n      UIDevice.current.setValue(orientation, forKey: \"orientation\")\n      UINavigationController.attemptRotationToDeviceOrientation()\n    }\n    completion(nil)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Network Status Change Listener - addListener Method - TypeScript\nDESCRIPTION: Represents the TypeScript method signature for adding a listener to network status changes in the Capacitor Network plugin. Developers provide the 'networkStatusChange' event name and a listener callback conforming to 'ConnectionStatusChangeListener'. The method returns a promise that resolves to a 'PluginListenerHandle', which can later be used to remove the listener. Requires Capacitor Network API and sufficient permissions; handles asynchronous, event-driven updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/network.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Converting File Paths for WebView Compatibility\nDESCRIPTION: Demonstrates how to convert device file paths to WebView-friendly URLs using convertFileSrc(). Used when handling file system operations across different protocols.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst rawPhotoUri = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Google Maps API Key in AndroidManifest.xml\nDESCRIPTION: Demonstrates how to add the Google Maps API key as metadata within the `<application>` tag in the `AndroidManifest.xml` file for Android projects. Replace `YOUR_API_KEY_HERE` with the actual key obtained from the Google Cloud Console.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"YOUR_API_KEY_HERE\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Routing in Angular with Capacitor App API\nDESCRIPTION: Code for implementing deep link routing in an Angular application using the Capacitor App API. This snippet shows how to import necessary dependencies, inject services in the constructor, and listen for appUrlOpen events to handle deep links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n```\n\n----------------------------------------\n\nTITLE: Complete Podfile Configuration for Firebase and Capacitor\nDESCRIPTION: Full CocoaPods configuration including Capacitor dependencies and Firebase Messaging\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n\nplatform :ios, '13.0'\nuse_frameworks!\n\ninstall! 'cocoapods', :disable_input_output_paths => true\n\ndef capacitor_pods\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'\n  pod 'CapacitorHaptics', :path => '../../node_modules/@capacitor/haptics'\n  pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'\n  pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'\n  pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'\nend\n\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'FirebaseMessaging'\nend\n\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Persisting and Retrieving JSON Objects with Capacitor Storage API in TypeScript\nDESCRIPTION: This snippet demonstrates how to store and retrieve a JSON object in a Capacitor app using the TypeScript Storage API. It uses asynchronous functions to set and get user data as a JSON string under the key 'user'. Requires the @capacitor/storage dependency, and is intended for small, non-sensitive data. The setObject method serializes the object before storage, while getObject parses the retrieved value. Input is a user object, output is the stored data or its retrieval; the data size should remain small for optimal reliability.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Storage } from '@capacitor/storage';\n\n// JSON \"set\" example\nasync setObject() {\n  await Storage.set({\n    key: 'user',\n    value: JSON.stringify({\n      id: 1,\n      name: 'Max'\n    })\n  });\n}\n\n// JSON \"get\" example\nasync getObject() {\n  const ret = await Storage.get({ key: 'user' });\n  const user = JSON.parse(ret.value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Events in TypeScript\nDESCRIPTION: Example showing how to listen for keyboard events to detect when the keyboard will show, did show, will hide, and did hide, including accessing the keyboard height.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications in capacitor.config.json\nDESCRIPTION: JSON configuration for Local Notifications in capacitor.config.json, including smallIcon, iconColor, and sound settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"LocalNotifications\": {\n      \"smallIcon\": \"ic_stat_icon_config_sample\",\n      \"iconColor\": \"#488AFF\",\n      \"sound\": \"beep.wav\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Server Hostname\nDESCRIPTION: TypeScript configuration for setting the Capacitor server hostname and Android scheme in the capacitor.config.ts file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/autofill-credentials.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CapacitorConfig = {\n...\n  server: {\n    hostname: 'my-app.com',\n    androidScheme: 'https',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom URL Scheme in iOS Info.plist - XML\nDESCRIPTION: This XML code registers a custom URL scheme in the iOS Info.plist file, enabling the app to be launched via custom links (deeplinks). The key 'CFBundleURLTypes' contains an array of URL type dictionaries, defining the scheme and name. No code dependencies. Inputs: Plist XML in the iOS project. Outputs: App responds to links with 'mycustomscheme'. Limitations: Must be added manually and updated if the scheme changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLName</key>\n    <string>com.getcapacitor.capacitor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>mycustomscheme</string>\n    </array>\n  </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Returning Data Back to JavaScript - Swift\nDESCRIPTION: This short snippet shows how to return a dictionary of data to the JavaScript layer by calling CAPPluginCall's resolve() method with a serializable dictionary. It forms part of a success result callback, typically after a successful operation. Data types must be compatible with JSON serialization for interop.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ncall.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Logic in Swift\nDESCRIPTION: Core implementation of the ScreenOrientation class that handles device orientation detection. It includes methods to get the current orientation type and convert device orientations to standardized orientation type strings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport UIKit\nimport Capacitor\n\npublic class ScreenOrientation: NSObject {\n\n  public func getCurrentOrientationType() -> String {\n    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation\n    return fromDeviceOrientationToOrientationType(currentOrientation)\n  }\n\n  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {\n    switch orientation {\n    case .landscapeLeft:\n      return \"landscape-primary\"\n    case .landscapeRight:\n      return \"landscape-secondary\"\n    case .portraitUpsideDown:\n      return \"portrait-secondary\"\n    default:\n      // Case: portrait\n      return \"portrait-primary\"\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Native Listeners with Capacitor in TypeScript\nDESCRIPTION: This TypeScript function signature enables the removal of all native listeners attached to the Capacitor plugin within the app. No parameters are required, and the returned promise resolves when all listeners have been removed. It is meant for cleanup or when resetting event subscriptions, and should be called as needed to avoid duplicated or stale event handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Accessibility API in Capacitor with TypeScript\nDESCRIPTION: Example showing how to use Capacitor's Accessibility API to detect screen reader status, listen for screen reader state changes, and speak text using the device's screen reader. It demonstrates importing plugins, adding event listeners, checking VoiceOver status, and speaking user-input text.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/accessibility.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Accessibility, Modals } = Plugins;\n\nAccessibility.addListener('accessibilityScreenReaderStateChange', (state) => {\n  console.log(state.value);\n});\n\nasync isVoiceOverEnabled() {\n  var vo = await Accessibility.isScreenReaderEnabled();\n  alert('Voice over enabled? ' + vo.value);\n}\n\nasync speak() {\n  var value = await Modals.prompt({\n    title: \"Value to speak\",\n    message: \"Enter the value to speak\"\n  });\n\n  Accessibility.speak({value: value.value});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Live Reload Server in Configuration File - JSON\nDESCRIPTION: Specifies the web server URL and enables cleartext traffic in the capacitor.config.json file under the 'server' section. The 'url' key should be set to the IP address and port of the local development server. This configuration is necessary for native apps to use live reload, and should not be committed to source control for production.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"url\": \"http://192.168.1.68:8100\",\n  \"cleartext\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Removing All Network Listeners\nDESCRIPTION: TypeScript definition for the removeAllListeners method which unregisters all listeners for the Network plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/network.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Android SDK Version (Gradle)\nDESCRIPTION: This Gradle configuration snippet sets the minimum Android SDK version required for the project to 26. This setting is located in the `android/variables.gradle` file and is necessary for the barcode scanner plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\next {\n    minSdkVersion = 26\n}\n```\n\n----------------------------------------\n\nTITLE: Building Capacitor App\nDESCRIPTION: Command to build the Capacitor app before adding native platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor iOS Platform and Syncing Project\nDESCRIPTION: These commands update the Capacitor iOS platform package to version 2 using npm and then sync the project configuration to apply the updates to the native iOS project. This is necessary after updating the iOS platform dependency.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# iOS\nnpm install @capacitor/ios@2\nnpx cap sync ios\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressStatus Interface in TypeScript\nDESCRIPTION: Interface for tracking file download progress, containing URL, bytes downloaded, and total file size.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProgressStatus {\n  url: string;          // The url of the file being downloaded.\n  bytes: number;        // The number of bytes downloaded so far.\n  contentLength: number; // The total number of bytes to download for this file.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via Homebrew for iOS Development\nDESCRIPTION: Command to install CocoaPods using Homebrew, which is required for managing iOS dependencies in Capacitor projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Installing FFI on Apple Silicon\nDESCRIPTION: Commands to install FFI and run pod install on Apple Silicon Macs using Rosetta x86_64 architecture to resolve bus error issues.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Running the Capacitor Update Command (Bash)\nDESCRIPTION: This command updates the native plugins and dependencies listed in the `package.json` file for the specified platform (or all platforms if none is provided). It uses `npx` to ensure the locally installed version of the Capacitor CLI is executed. The optional `platform` argument can be 'android' or 'ios'. The `--deployment` option modifies how pod installation is handled for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Capacitor Plugin in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the custom 'MyPlugin' in the Capacitor web runtime. It imports the plugin and calls its 'echo' method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\nconst { MyPlugin } = Plugins;\n\nconst result = await MyPlugin.echo({ value: 'Hello World!' });\nconsole.log(result.value);\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Interface to Plugin\nDESCRIPTION: Shows how to add TypeScript type definitions to the Echo plugin for better type safety and IDE support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import { registerPlugin } from '@capacitor/core';\n\n+export interface EchoPlugin {\n+  echo(options: { value: string }): Promise<{ value: string }>;\n+}\n\n-const Echo = registerPlugin('Echo');\n+const Echo = registerPlugin<EchoPlugin>('Echo');\n\n export default Echo;\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/browser Plugin\nDESCRIPTION: Commands to install the @capacitor/browser plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/browser\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Fallback Implementation Example with isPluginAvailable\nDESCRIPTION: Demonstrates how to provide alternative functionality when a plugin isn't available, using the Camera plugin as an example.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Runner Event Handlers\nDESCRIPTION: Example JavaScript file demonstrating how to implement event handlers for the Background Runner, including custom events and remote notifications processing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('myCustomEvent', (resolve, reject, args) => {\n  console.log('do something to update the system here');\n  resolve();\n});\n\naddEventListener('myCustomEventWithReturnData', (resolve, reject, args) => {\n  try {\n    console.log('accepted this data: ' + JSON.stringify(args.user));\n\n    const updatedUser = args.user;\n    updatedUser.firstName = updatedUser.firstName + ' HELLO';\n    updatedUser.lastName = updatedUser.lastName + ' WORLD';\n\n    resolve(updatedUser);\n  } catch (err) {\n    reject(err);\n  }\n});\n\naddEventListener('remoteNotification', (resolve, reject, args) => {\n  try {\n    console.log('received silent push notification');\n\n    CapacitorNotifications.schedule([\n      {\n        id: 100,\n        title: 'Enterprise Background Runner',\n        body: 'Received silent push notification',\n      },\n    ]);\n\n    resolve();\n  } catch (err) {\n    reject();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking and Launching Apps Using Capacitor AppLauncher - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates importing and using the Capacitor AppLauncher plugin to first check if a target app can be opened, then to launch an app or deep link page using a URL scheme or package name. The snippet includes asynchronous functions invoking AppLauncher.canOpenUrl() to verify app availability, and AppLauncher.openUrl() to open a specific page within another app. The plugin methods return Promises that resolve to objects indicating operation success. Requires prior installation and configuration of @capacitor/app-launcher, and OS/platform-specific setup as outlined in the documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app-launcher.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLauncher } from '@capacitor/app-launcher';\n\nconst checkCanOpenUrl = async () => {\n  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });\n\n  console.log('Can open url: ', value);\n};\n\nconst openPortfolioPage = async () => {\n  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications Type Definition - TypeScript\nDESCRIPTION: Type definitions for local notification configuration options in Capacitor, including platform-specific parameters for iOS and Android. Defines properties for notification grouping, channel management, styling, and behavior control.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LocalNotificationSchema {\n  extra: any;\n  threadIdentifier: string;\n  summaryArgument: string;\n  group: string;\n  groupSummary: boolean;\n  channelId: string;\n  ongoing: boolean;\n  autoCancel: boolean;\n  inboxList: string[];\n  silent: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Default Notification Channel\nDESCRIPTION: XML configuration to set the default notification channel ID in the AndroidManifest.xml file for Android 8.0 and higher.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\n    android:value=\"@string/default_notification_channel_id\" />\n```\n\n----------------------------------------\n\nTITLE: Manually Opening iOS Project Workspace in Xcode\nDESCRIPTION: This command uses the macOS `open` utility to directly open the Xcode workspace file (`App.xcworkspace`) located within the `ios/App` directory. This provides an alternative method to `npx cap open ios` for launching Xcode with the Capacitor iOS project loaded. Ensure you are in the project root directory when running this command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/App/App.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Map in an Angular Component\nDESCRIPTION: Presents a full Angular component example integrating the Capacitor Google Maps plugin. It uses `@ViewChild` to get a reference to the `<capacitor-google-map>` element in the template, defines inline styles for the map component, and includes a method (`createMap`) triggered by a button click to asynchronously create the map using `GoogleMap.create`. Assumes `CUSTOM_ELEMENTS_SCHEMA` is configured in the containing NgModule and the API key is accessed via an `environment` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\n@Component({\n  template: `\n    <capacitor-google-map #map></capacitor-google-map>\n    <button (click)=\"createMap()\">Create Map</button>\n  `,\n  styles: [\n    `\n      capacitor-google-map {\n        display: inline-block;\n        width: 275px;\n        height: 400px;\n      }\n    `,\n  ],\n})\nexport class MyMap {\n  @ViewChild('map')\n  mapRef: ElementRef<HTMLElement>;\n  newMap: GoogleMap;\n\n  async createMap() {\n    this.newMap = await GoogleMap.create({\n      id: 'my-cool-map',\n      element: this.mapRef.nativeElement,\n      apiKey: environment.apiKey,\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8,\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor HTTP Plugin in JSON - JSON\nDESCRIPTION: This configuration snippet enables the Capacitor HTTP plugin by setting the 'enabled' property to true for 'CapacitorHttp' within the plugins section of 'capacitor.config.json'. No external dependencies are required. This setup is essential to activate native HTTP support before using plugin methods. The structure follows JSON syntax as expected by Capacitor configuration files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"CapacitorHttp\\\": {\\n      \\\"enabled\\\": true\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Types to a Custom Capacitor Plugin\nDESCRIPTION: This TypeScript diff illustrates how to add type safety to the custom plugin registration. An interface `EchoPlugin` is defined, specifying the signature of the `echo` method. This interface is then used as a generic type argument (`<EchoPlugin>`) when calling `registerPlugin`, providing type checking and autocompletion for the plugin's methods in TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import { registerPlugin } from '@capacitor/core';\n\n+export interface EchoPlugin {\n+  echo(options: { value: string }): Promise<{ value: string }>;\n+}\n\n-const Echo = registerPlugin('Echo');\n+const Echo = registerPlugin<EchoPlugin>('Echo');\n\n export default Echo;\n```\n\n----------------------------------------\n\nTITLE: Triggering Notification Haptic Feedback - TypeScript\nDESCRIPTION: The notification method triggers a notification-type haptic feedback, taking an optional NotificationOptions object that specifies the type (Success, Warning, Error). It is asynchronous, returning a Promise and performs no action if the device is unsupported. Parameters must follow the NotificationOptions interface; outputs a resolved Promise upon completion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnotification(options?: NotificationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Java Plugins\nDESCRIPTION: Shows how to emit events from a Java plugin that can be captured by TypeScript listeners. The notifyListeners method sends a custom event with JSON data to the JavaScript layer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"value\", \"some value\");\nnotifyListeners(\"myPluginEvent\", ret);\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Events from a Capacitor Android Plugin in Java\nDESCRIPTION: Explains how to trigger a custom event (`myPluginEvent`) from a Capacitor Android plugin using the `notifyListeners` method in Java. It demonstrates creating a `JSObject` to hold payload data (`value`) and passing it along with the event name. Listeners registered in the web view (TypeScript) will receive this event. Requires Capacitor Plugin API context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"value\", \"some value\");\nnotifyListeners(\"myPluginEvent\", ret);\n```\n\n----------------------------------------\n\nTITLE: Defining AppInfo Interface in TypeScript\nDESCRIPTION: This snippet defines the AppInfo interface with properties for app name, id, build, and version. Each property includes a comment describing its purpose and platform-specific details. All properties were introduced in version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppInfo {\n  name: string; // The name of the app. Since 1.0.0\n  id: string; // The identifier of the app. On iOS it's the Bundle Identifier. On Android it's the Application ID. Since 1.0.0\n  build: string; // The build version. On iOS it's the CFBundleVersion. On Android it's the versionCode. Since 1.0.0\n  version: string; // The app version. On iOS it's the CFBundleShortVersionString. On Android it's package's versionName. Since 1.0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Push Notification Icon - AndroidManifest - XML\nDESCRIPTION: This XML snippet adds a meta-data entry to AndroidManifest.xml, specifying the default notification icon for Firebase Cloud Messaging. The android:resource attribute should point to a mipmap resource containing a white-on-transparent push icon. No additional dependencies needed beyond Capacitor's plugin setup. The icon is used for push notifications, and if absent, Android defaults to the app icon, risking improper appearance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\\\"com.google.firebase.messaging.default_notification_icon\\\" android:resource=\\\"@mipmap/push_icon_name\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Orientation Event Listener\nDESCRIPTION: Code snippet showing how to add a listener for device orientation changes using the Motion plugin API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/motion.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Registering a Capacitor Plugin Using registerPlugin\nDESCRIPTION: Code for registering the ScreenOrientation plugin with Capacitor using the registerPlugin function. This creates an object that will be linked to platform-specific implementations and exports both the plugin instance and type definitions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/designing-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nimport type { ScreenOrientationPlugin } from './definitions';\n\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n);\n\nexport * from './definitions';\nexport { ScreenOrientation };\n```\n\n----------------------------------------\n\nTITLE: Generating Capacitor Plugins using CLI Commands\nDESCRIPTION: These commands initiate the plugin generation wizard in Capacitor. The first command is for projects with Capacitor CLI already installed, while the second is for projects without it. The wizard prompts for information about the new plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/plugin-generate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Capacitor CLI already installed in project\nnpx cap plugin:generate\n\n# Capacitor CLI not installed\nnpx @capacitor/cli@2.4.7 plugin:generate\n```\n\n----------------------------------------\n\nTITLE: Defining the setCookie API Method in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `setCookie` method. It requires an `options` parameter of type `SetCookieOptions` (containing URL, key, value, and optional path/expires) and returns a Promise that resolves when the cookie has been written to the device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetCookie(options: SetCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering 'registration' event listener - Capacitor Plugin - TypeScript\nDESCRIPTION: Registers a listener function triggered when push notification registration completes successfully, providing the device token. Accepts the event name 'registration' and a callback taking a Token object. Returns a promise and handle for listener management. No special dependencies beyond the Capacitor plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registration', listenerFunc: (token: Token) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Android Package using npm\nDESCRIPTION: Installs the `@capacitor/android` package using the Node Package Manager (npm). This package contains the necessary runtime and tooling for the Capacitor Android platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Adding a browserFinished Event Listener with Browser.addListener - TypeScript\nDESCRIPTION: Demonstrates how to subscribe to the 'browserFinished' event with Browser.addListener. Only works on Android and iOS. The function requires 'browserFinished' as eventName and a callback function listenerFunc as parameters, returning a Promise that resolves to a PluginListenerHandle. listenerFunc will run when the user closes the Browser. Requires @capacitor/browser and compatible environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Generating Capacitor Plugin Project with NPX\nDESCRIPTION: Command to scaffold a new Capacitor plugin project using the @capacitor/create-plugin package. It sets up the basic structure and metadata for the ScreenOrientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/create-plugin \\\n  --name @capacitor-community/screen-orientation \\\n  --package-id io.ionic.plugins.screenorientation \\\n  --class-name ScreenOrientation \\\n  --repo \"https://ionic.io\" \\\n  --license \"MIT\" \\\n  --description \"Work with the screen orientation in a common way for iOS, Android, and web\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Bridge in Swift for Capacitor iOS Plugins\nDESCRIPTION: Demonstrates how to access the bridge in Capacitor iOS plugins and perform an early exit if the bridge is not available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nself.bridge?\n```\n\nLANGUAGE: swift\nCODE:\n```\nguard let bridge = self.bridge else { return }\n```\n\n----------------------------------------\n\nTITLE: Updating Dynamic Data on Watch UI\nDESCRIPTION: TypeScript function demonstrating how to update dynamic data in the watch UI by incrementing a counter and sending the updated value to the watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvar stateData = {\n  number: 0\n}\n\nasync function counterIncrement() {\n  stateData.counter++  \n  await Watch.updateWatchData({\"data\": convertValuesOfObjectToStringValues(stateData)})\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Capacitor Plugins in TypeScript\nDESCRIPTION: Demonstrates how to attach event listeners to a Capacitor plugin to respond to custom events emitted by the plugin. This enables communication from the native layer to the JavaScript layer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Complete MainActivity Declaration With Intent Filters - AndroidManifest XML\nDESCRIPTION: A full sample <activity> element for AndroidManifest.xml including both LAUNCHER (<intent-filter> for android.intent.action.MAIN) and a deep link-enabled intent filter. This configures the main activity to launch as the app entry point and to receive deep link URLs for the app's domain. Inputs: standard Android launch parameters and a matching <data> tag.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n    android:name=\"com.netkosoft.beerswift.MainActivity\"\n    android:label=\"@string/title_activity_main\"\n    android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n    android:launchMode=\"singleTask\">\n\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Plugin Lock Method Implementation\nDESCRIPTION: Capacitor plugin method implementation for locking screen orientation, including input validation and completion handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func lock(_ call: CAPPluginCall) {\n  guard let lockToOrientation = call.getString(\"orientation\") else {\n    call.reject(\"Input option 'orientation' must be provided.\")\n    return\n  }\n  implementation.lock(lockToOrientation, completion: { (mask) -> Void in\n    ScreenOrientationPlugin.supportedOrientations = mask;\n    call.resolve()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StatResult Interface for Filesystem Plugin - TypeScript\nDESCRIPTION: Defines the StatResult interface to represent metadata returned from a stat operation on the Filesystem. Contains file type (string), size (number), creation time (ctime, number), modification time (mtime, number), and the file URI (string). Useful for receiving information through Filesystem.stat() calls; all properties are expected outputs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatResult {\n  type: string;\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Capacitor Web Plugin Class in TypeScript\nDESCRIPTION: This snippet demonstrates the fundamental structure for a Capacitor web plugin. It defines a class `MyPluginWeb` that extends `WebPlugin` from `@capacitor/core`. The constructor calls `super` to register the plugin's name and specify 'web' as the target platform. It implements an example method `echo` and concludes by instantiating, exporting, and registering the plugin using `registerWebPlugin`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { WebPlugin } from '@capacitor/core';\nimport { MyPlugin } from './definitions';\n\nexport class MyPluginWeb extends WebPlugin implements MyPlugin {\n  constructor() {\n    // Call super with the name of our plugin (this should match the native name),\n    // along with the platforms this plugin will activate on. For example, it's possible\n    // to use a web plugin for Android and iOS by adding them to the platforms list (lowercased)\n    super({\n      name: 'MyPlugin',\n      platforms: ['web'],\n    });\n  }\n\n  async echo(options: { value: string }) {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n\n// Instantiate the plugin\nconst MyPlugin = new MyPluginWeb();\n\n// Export the plugin\nexport { MyPlugin };\n\n// Register as a web plugin\nimport { registerWebPlugin } from '@capacitor/core';\nregisterWebPlugin(MyPlugin);\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Received Local Notifications - Capacitor Plugin API - TypeScript\nDESCRIPTION: This code defines the addListener method for listening to 'localNotificationReceived' events. When a notification is displayed, the listener function receives a LocalNotificationSchema object. Returns a Promise and a PluginListenerHandle for managing the event subscription. Used to react to notifications while the app is active.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationReceived', listenerFunc: (notification: LocalNotificationSchema) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Updating Native Plugins and Dependencies using Capacitor CLI - Bash\nDESCRIPTION: This Bash command demonstrates how to invoke the Capacitor CLI 'cap update' to synchronize and update native platform plugins and dependencies as specified in package.json. It requires npm and the Capacitor CLI to be installed. The optional <platform> parameter allows targeting a specific platform such as 'android' or 'ios'. The command also supports options like '--deployment' for iOS dependency locking. Inputs include the platform name, and outputs are the updated native projects and plugin dependencies. Restrictions include the need to run this from within a valid Capacitor project directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Functionality in Web Plugin in TypeScript\nDESCRIPTION: This snippet shows how to handle unimplemented functionality in a Capacitor web plugin. It uses the 'unimplemented' error from Capacitor's WebPlugin class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync getLocation(): Promise<Location> {\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Deep Links with Vue Router\nDESCRIPTION: Initial setup for deep linking in a Vue application using Vue Router. This code imports the necessary dependencies to work with Capacitor's App API and Vue Router.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenOrientationWeb Class in TypeScript\nDESCRIPTION: Creates a ScreenOrientationWeb class that extends WebPlugin and implements the ScreenOrientationPlugin interface. The constructor sets up an event listener for orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\nimport type { ScreenOrientationPlugin } from './definitions';\n\nexport class ScreenOrientationWeb extends WebPlugin implements ScreenOrientationPlugin {\n  constructor() {\n    super();\n    window.screen.orientation.addEventListener(\"change\", () => {\n      const type = window.screen.orientation.type;\n      this.notifyListeners(\"screenOrientationChange\", { type });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag End Listener in TypeScript for Capacitor Google Maps\nDESCRIPTION: Defines a method to set a listener for the marker drag end event on a Google Map. It takes an optional callback function that receives marker click data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragEndListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods with Ruby Gem as Alternative Method\nDESCRIPTION: Command to install CocoaPods directly using Ruby Gem instead of Homebrew, though not recommended for Apple Silicon Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Defining StatOptions Interface in TypeScript\nDESCRIPTION: Specifies the options for the `stat` operation in the Capacitor Filesystem API, used to retrieve metadata about a file or directory. It requires the path and the base `Directory` enumeration value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Enum in TypeScript\nDESCRIPTION: Defines an enum for Directory with various directory types and their corresponding values and descriptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nenum Directory {\n  Documents = 'DOCUMENTS',\n  Data = 'DATA',\n  Library = 'LIBRARY',\n  Cache = 'CACHE',\n  External = 'EXTERNAL',\n  ExternalStorage = 'EXTERNAL_STORAGE'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Preferences Plugin Using npm (Bash)\nDESCRIPTION: This snippet demonstrates how to install the @capacitor/preferences plugin using npm and synchronize it with the project using the Capacitor CLI. The 'npm install' command adds the plugin as a dependency, and 'npx cap sync' ensures the native platform projects are updated. These steps are prerequisites for utilizing the Preferences API in your application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/preferences.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/preferences\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Removing a Capacitor Plugin Event Listener in TypeScript\nDESCRIPTION: Illustrates how to remove an event listener previously attached to a Capacitor plugin (`MyPlugin`) in TypeScript. The `addListener` method returns a handle (`myPluginEventListener` of type `PluginListenerHandle`), and calling its `remove()` method detaches the listener, preventing memory leaks. Requires the listener handle obtained from `addListener`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Haptics API Usage in Capacitor - TypeScript\nDESCRIPTION: Provides sample async functions for triggering various haptic effects, including impact sensations of different styles (Medium, Light), device vibration, and selection feedback phases. Requires the @capacitor/haptics package imported and available in the project. Each function uses an async/await pattern to call the Haptics API and can be called from event handlers or component lifecycle hooks. Most functions do not take parameters except for impact, which requires a style key from the ImpactStyle enum.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\nconst hapticsImpactMedium = async () => {\n  await Haptics.impact({ style: ImpactStyle.Medium });\n};\n\nconst hapticsImpactLight = async () => {\n  await Haptics.impact({ style: ImpactStyle.Light });\n};\n\nconst hapticsVibrate = async () => {\n  await Haptics.vibrate();\n};\n\nconst hapticsSelectionStart = async () => {\n  await Haptics.selectionStart();\n};\n\nconst hapticsSelectionChanged = async () => {\n  await Haptics.selectionChanged();\n};\n\nconst hapticsSelectionEnd = async () => {\n  await Haptics.selectionEnd();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Base Path Mappings in tsconfig.json (JSON)\nDESCRIPTION: Example JSON configuration snippet showing typical path mappings within a `tsconfig.json` file, often used in Angular projects. These mappings define aliases like `@app/*` and `@env/*` to simplify module imports from specific source directories. This configuration serves as a base before adding test-specific path mappings for mocking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/mocking-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"]\n    },\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Windows with Capacitor\nDESCRIPTION: Complete example showing how to use various modal types in Capacitor including alerts, confirms, prompts and action sheets. Demonstrates importing required modules and implementing async functions for each modal type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/modals.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins, ActionSheetOptionStyle } from '@capacitor/core';\n\nconst { Modals } = Plugins;\n\nasync showAlert() {\n  let alertRet = await Modals.alert({\n    title: 'Stop',\n    message: 'this is an error'\n  });\n}\n\nasync showConfirm() {\n  let confirmRet = await Modals.confirm({\n    title: 'Confirm',\n    message: 'Are you sure you\\'d like to press the red button?'\n  });\n  console.log('Confirm ret', confirmRet);\n}\n\nasync showPrompt() {\n  let promptRet = await Modals.prompt({\n    title: 'Hello',\n    message: 'What\\'s your name?'\n  });\n  console.log('Prompt ret', promptRet);\n}\n\nasync showActions() {\n  let promptRet = await Modals.showActions({\n    title: 'Photo Options',\n    message: 'Select an option to perform',\n    options: [\n      {\n        title: 'Upload'\n      },\n      {\n        title: 'Share'\n      },\n      {\n        title: 'Remove',\n        style: ActionSheetOptionStyle.Destructive\n      }\n    ]\n  })\n  console.log('You selected', promptRet);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platforms to an Ionic Capacitor Project (Bash)\nDESCRIPTION: This command adds native platform projects (e.g., iOS, Android) to the Ionic application using Capacitor. It creates the platform-specific directories and configures them within the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/with-ionic.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nionic capacitor add\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Unlock\nDESCRIPTION: Implementation method to unlock the screen orientation by setting the requested orientation to unspecified, allowing it to change automatically.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic void unlock() {\n   activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Capacitor Plugin using npm\nDESCRIPTION: This bash command is used to compile the Capacitor plugin. It should be run from within the plugin directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Displaying a Saved Photo in an HTML Image Element - HTML\nDESCRIPTION: This snippet provides an HTML image element with the id 'savedPhoto', intended for displaying a dynamically loaded image from a device file that has been converted into a web-friendly path by Capacitor. There are no dependencies beyond standard HTML; the expected input is that JavaScript sets the 'src' attribute with a valid URL. The input and output are handled externally. Limited to display purposes only.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: FileInfo Type Definition in TypeScript\nDESCRIPTION: Interface defining properties of a file or directory including name, type, size, creation time, modification time and URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileInfo {\n  name: string;\n  type: 'file' | 'directory';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore Path for iOS Public Folder - diff\nDESCRIPTION: This code snippet shows the required change in the ios/.gitignore file to reflect the new path of the public folder due to its relocation within the iOS project structure. By changing the ignore pattern from App/public to App/App/public, web assets remain untracked by Git. This is critical to prevent web build artifacts from appearing in version control.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n App/build\\n App/Pods\\n-App/public\\n+App/App/public\\n App/Podfile.lock\\n xcuserdata\\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Action Sheet Plugin using npm\nDESCRIPTION: Installs the `@capacitor/action-sheet` package using npm and then synchronizes the native project dependencies using `npx cap sync`. This command should be run in the root directory of a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/action-sheet\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Status Bar show Method Definition\nDESCRIPTION: TypeScript definition for the show method, which displays the status bar with optional animation options. Includes guidance for iOS implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CameraPermissionState Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for CameraPermissionState that combines PermissionState with the 'limited' string literal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionState = PermissionState | 'limited';\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Types to Echo Plugin\nDESCRIPTION: Shows how to add TypeScript type definitions to the Echo plugin for better type safety and IDE support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import { registerPlugin } from '@capacitor/core';\n\n+export interface EchoPlugin {\n+  echo(options: { value: string }): Promise<{ value: string }>;\n+}\n\n-const Echo = registerPlugin('Echo');\n+const Echo = registerPlugin<EchoPlugin>('Echo');\n\n export default Echo;\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Completions for Plugin Calls in Capacitor (Swift)\nDESCRIPTION: Demonstrates how to set the `keepAlive` property to `true` on a `CAPPluginCall` instance in Swift. This informs the Capacitor bridge to preserve the call, allowing `resolve()` or `reject()` to be invoked multiple times for scenarios like callbacks or data streaming. Setting this flag also automatically saves the call via `saveCall()`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n```swift\ncall.keepAlive = true\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `requestPermissions` method signature in TypeScript for the Capacitor Filesystem API. This asynchronous function prompts the user to grant read/write permissions for filesystem access. Similar to `checkPermissions`, it's required on Android when using `Directory.Documents` or `Directory.ExternalStorage`. It returns a Promise resolving to `PermissionStatus` reflecting the user's choice. Available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation - Capacitor Plugin Method (TypeScript)\nDESCRIPTION: This TypeScript method unlocks any previously set screen orientation lock using the Capacitor plugin. It does not take any parameters and returns a Promise resolving to void. This function should be used to return the device to its default orientation behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nunlock() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Push Registration Error Listener in Capacitor\nDESCRIPTION: TypeScript method signature for adding an event listener that triggers when push notification registration fails.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registrationError', listenerFunc: (error: any) => void) => PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Add Push Notification Received Listener - TypeScript\nDESCRIPTION: Adds listener for receiving push notifications, providing the notification details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationReceived', listenerFunc: (notification: PushNotificationSchema) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Method in Java for Android\nDESCRIPTION: This snippet shows how to annotate a callback method in Java for an Android Capacitor plugin. The @PluginMethod annotation specifies that the method returns a callback.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)\npublic void method3(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Screen Orientation in Info.plist\nDESCRIPTION: XML configuration for setting supported screen orientations on iOS devices. This example shows how to limit iPhone to portrait mode and iPad to landscape orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UISupportedInterfaceOrientations</key>\n  <array>\n    <string>UIInterfaceOrientationPortrait</string>\n  </array>\n  <key>UISupportedInterfaceOrientations~ipad</key>\n  <array>\n    <string>UIInterfaceOrientationLandscapeRight</string>\n    <string>UIInterfaceOrientationLandscapeLeft</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Executing the Capacitor `run` Command (Bash)\nDESCRIPTION: This command executes the Capacitor `run` process using the Node Package Execute (`npx`). It first runs `sync` (unless `--no-sync` is specified), then builds and deploys the native application to the specified platform (`android` or `ios`). Various options (`[options]`) allow customization, such as targeting specific devices (`--target`), using specific build configurations (`--scheme`, `--flavor`), listing available devices (`--list`), and enabling live reload (`--live-reload`, `-l`, `--host`, `--port`, `--forwardPorts`). The `<platform>` argument is required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation to Landscape\nDESCRIPTION: Event handler code that locks the screen orientation to landscape-primary mode when a button is clicked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.lock({ orientation: \"landscape-primary\" })}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables in variables.gradle\nDESCRIPTION: Updates the Android project variables to the minimum requirements for Capacitor 4, including SDK versions and dependency versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 32\ntargetSdkVersion = 32\nandroidxActivityVersion = '1.4.0'\nandroidxAppCompatVersion = '1.4.2'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.8.0'\nandroidxFragmentVersion = '1.4.1'\ncoreSplashScreenVersion = '1.0.0-rc01'\nandroidxWebkitVersion = '1.4.0'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.3'\nandroidxEspressoCoreVersion = '3.4.0'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Building the Ionic Web Assets for Capacitor (Bash)\nDESCRIPTION: This command builds the Ionic web application, generating the optimized web assets (HTML, CSS, JavaScript) into the directory specified by `webDir` in the Capacitor configuration (usually `www` or `build`). These assets are what Capacitor copies into the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/with-ionic.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Confirm Dialog Method Definition\nDESCRIPTION: TypeScript interface definition for the confirm dialog method that shows a confirmation dialog and returns the user's choice.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/dialog.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(options: ConfirmOptions) => Promise<ConfirmResult>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface: GalleryImageOptions\nDESCRIPTION: Interface defining options for gallery image processing including quality, dimensions, orientation and presentation settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryImageOptions {\n  quality?: number;\n  width?: number;\n  height?: number;\n  correctOrientation?: boolean;\n  presentationStyle?: 'fullscreen' | 'popover';\n  limit?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server for Network Access (Bash)\nDESCRIPTION: Starts the React development server (using `react-scripts`) and binds it to `0.0.0.0` using the `HOST` environment variable. This makes the server accessible from other devices on the local network, which is necessary for Live Reload on physical devices or simulators/emulators.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHOST=0.0.0.0 npm run start\n```\n\n----------------------------------------\n\nTITLE: Removing a Marker from the Map - TypeScript\nDESCRIPTION: Removes an individual marker from the map asynchronously, accepting the marker's unique string ID as input. Returns a void Promise. The operation expects that the marker ID corresponds to an existing marker on the map.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarker(id: string) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: LatLng Interface Definition\nDESCRIPTION: Interface representing geographical coordinates with latitude and longitude values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LatLng {\n  lat: number;\n  lng: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying built web code to native projects in Capacitor\nDESCRIPTION: This bash command copies the built web code into each native project in a Capacitor app. It should be run after each build and can be added to the end of the build script in package.json.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/building-your-app.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Creating a New Capacitor Project using CLI\nDESCRIPTION: This command creates a new Capacitor project with a stock project structure. It allows specifying the directory, app name, and app package ID. An optional flag can be used to set the npm client for dependency installation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/create.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/cli create [options] [directory] [name] [id]\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Finished Event Listener in TypeScript\nDESCRIPTION: TypeScript definition for adding a listener for the 'browserFinished' event, which fires when the browser is closed by the user on Android and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Android\nDESCRIPTION: Shows how to trigger JavaScript events from the Android environment. These methods allow firing events on JavaScript EventTargets like window or document, with optional data payload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void triggerJSEvent(final String eventName, final String target)\npublic void triggerJSEvent(final String eventName, final String target, final String data)\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on iOS Device\nDESCRIPTION: This command builds and runs a debug version of the Capacitor application on an iOS device. It simplifies the testing process without needing to manually open Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Including Capacitor Script in HTML\nDESCRIPTION: HTML snippet showing how to include Capacitor as a script in your index.html file. This is used when Capacitor is not imported as a module.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/index.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"capacitor.js\"></script>\n<script src=\"your/app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: StatResult and StatOptions Type Definitions in TypeScript\nDESCRIPTION: Interfaces for file statistics results and options for retrieving file information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatResult {\n  type: 'file' | 'directory';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri: string;\n}\n\ninterface StatOptions {\n  path: string;\n  directory: Directory;\n}\n```\n\n----------------------------------------\n\nTITLE: Action Sheet Modal Interface Definition\nDESCRIPTION: TypeScript interface definition for the action sheet modal function showing the options parameter type and return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/modals.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshowActions(options: ActionSheetOptions) => Promise<ActionSheetResult>\n```\n\n----------------------------------------\n\nTITLE: Defining the `getConfig` Method Signature in Capacitor Android Bridge (Java)\nDESCRIPTION: Shows the Java method signature for `getConfig()` on the Capacitor Android `Bridge`. This method allows native plugin code to retrieve the `CapConfig` object, which contains the configuration settings known to the Capacitor runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic CapConfig getConfig()\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Swift Plugin to JavaScript\nDESCRIPTION: Shows how to emit custom events from a Swift plugin that can be listened to in JavaScript. This enables push-based communication from native code to the web application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nself.notifyListeners(\"myPluginEvent\", data: [:])\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest with Package Queries - XML\nDESCRIPTION: This XML snippet demonstrates how to add an application's package name to the <queries> element in AndroidManifest.xml, which is required for Android 11 and newer to query the existence or availability of other apps by their package names. The package tag's android:name attribute should be set to the target app's package identifier. This configuration is necessary for the AppLauncher plugin to work properly when trying to detect or open other apps. No additional dependencies are required but it must be placed inside the <queries> section of the manifest.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app-launcher.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <package android:name=\"com.getcapacitor.myapp\" />\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Example of File Path Conversion with Filesystem API\nDESCRIPTION: Shows a practical example of using convertFileSrc to make a saved file accessible in the web view by converting its native file path to a web-compatible URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in capacitor.config.json (JSON)\nDESCRIPTION: An example of configuring the @capacitor/keyboard plugin settings directly within capacitor.config.json. This configuration block sets the resize mode, keyboard style, and enables resizing when the app is in fullscreen. Required for customizing keyboard behavior on iOS and Android as described; options are nested under the 'plugins' property. Expects boolean and string values, and should be syntactically valid JSON.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"DARK\",\n      \"resizeOnFullScreen\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schedule Interface for Local Notifications in Markdown\nDESCRIPTION: This markdown snippet defines the Schedule interface properties for configuring notification delivery in Capacitor. It includes options for scheduling at specific times, on intervals, or with repeating patterns, along with platform-specific features.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                 | Type                                                    | Description                                                                                                                                                                                                                                                                                                                             | Since |\n| -------------------- | ------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`at`**             | <code><a href=\"#date\">Date</a></code>                   | <a href=\"#schedule\">Schedule</a> a notification at a specific date and time.                                                                                                                                                                                                                                                            | 1.0.0 |\n| **`repeats`**        | <code>boolean</code>                                    | Repeat delivery of this notification at the date and time specified by `at`. Only available for iOS and Android.                                                                                                                                                                                                                        | 1.0.0 |\n| **`allowWhileIdle`** | <code>boolean</code>                                    | Allow this notification to fire while in [Doze](https://developer.android.com/training/monitoring-device-state/doze-standby) Only available for Android 23+. Note that these notifications can only fire [once per 9 minutes, per app](https://developer.android.com/training/monitoring-device-state/doze-standby#assessing_your_app). | 1.0.0 |\n| **`on`**             | <code><a href=\"#scheduleon\">ScheduleOn</a></code>       | <a href=\"#schedule\">Schedule</a> a notification on particular interval(s). This is similar to scheduling [cron](https://en.wikipedia.org/wiki/Cron) jobs. Only available for iOS and Android.                                                                                                                                           | 1.0.0 |\n| **`every`**          | <code><a href=\"#scheduleevery\">ScheduleEvery</a></code> | <a href=\"#schedule\">Schedule</a> a notification on a particular interval.                                                                                                                                                                                                                                                               | 1.0.0 |\n| **`count`**          | <code>number</code>                                     | Limit the number times a notification is delivered by the interval specified by `every`.                                                                                                                                                                                                                                                | 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Capacitor Camera API: getLimitedLibraryPhotos Method Signature\nDESCRIPTION: TypeScript signature for the `getLimitedLibraryPhotos` method (iOS 14+ only). This function retrieves an array of photos previously selected by the user within the limited photo library access mode. It returns a Promise resolving to a `GalleryPhotos` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetLimitedLibraryPhotos() => Promise<GalleryPhotos>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Android Platform - Bash\nDESCRIPTION: This snippet demonstrates how to install the \\\"@capacitor/android\\\" package using npm, which is required for adding Android support to your Capacitor project. Ensure that npm is installed and that you run this command within your project root. This will add the platform-specific dependencies and tools needed to build Android apps with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Getting File URIs with Capacitor Filesystem API (getUri)\nDESCRIPTION: Defines the `getUri` method signature from the Capacitor Filesystem API. This asynchronous function takes `GetUriOptions` (specifying the path and directory) and returns a Promise resolving to a `GetUriResult` containing the full native File URI for the specified path.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetUri(options: GetUriOptions) => Promise<GetUriResult>\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications in Capacitor (TypeScript)\nDESCRIPTION: Registers the application to receive push notifications. This method triggers the 'registration' event with the push token upon success, or 'registrationError' on failure. It does not prompt the user for notification permissions; `requestPermissions()` should be called first if needed. Returns a Promise that resolves when the registration process is initiated.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nregister() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Examples of Triggering JavaScript Events in Android\nDESCRIPTION: Provides examples of how to use the triggerJSEvent method to fire custom events on window and document objects, including passing data as a JSON string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nbridge.triggerJSEvent(\"myCustomEvent\", \"window\");\nbridge.triggerJSEvent(\"myCustomEvent\", \"document\", \"{ 'dataKey': 'dataValue' }\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Privacy Manifest XML File for iOS App with UserDefaults API Usage\nDESCRIPTION: This XML snippet shows a sample Privacy Manifest file (PrivacyInfo.xcprivacy) for an iOS app that uses the UserDefaults API through the @capacitor/preferences plugin. It includes privacy tracking settings and the required reason code (CA92.1) for accessing UserDefaults.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/privacy-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyTracking</key>\n    <false/>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>CA92.1</string>\n        </array>\n      </dict>\n    </array>\n    <key>NSPrivacyTrackingDomains</key>\n    <array/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Requesting Motion Permissions and Handling Events in TypeScript\nDESCRIPTION: Demonstrates requesting permission for `DeviceMotionEvent` upon a user action (button click) as required by browsers. After permission is granted, it shows how to add an accelerometer ('accel') listener using `Motion.addListener`. It also includes helper functions to stop a specific listener using its handle (`accelHandler.remove()`) and to remove all listeners attached to the Motion plugin (`Motion.removeAllListeners()`). Requires importing `PluginListenerHandle` from `@capacitor/core` and `Motion` from `@capacitor/motion`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginListenerHandle } from '@capacitor/core';\nimport { Motion } from '@capacitor/motion';\n\n\nlet accelHandler: PluginListenerHandle;\n\nmyButton.addEventListener('click', async () => {\n  try {\n    await DeviceMotionEvent.requestPermission();\n  } catch (e) {\n    // Handle error\n    return;\n  }\n\n  // Once the user approves, can start listening:\n  accelHandler = await Motion.addListener('accel', event => {\n    console.log('Device motion event:', event);\n  });\n});\n\n// Stop the acceleration listener\nconst stopAcceleration = () => {\n  if (accelHandler) {\n    accelHandler.remove();\n  }\n};\n\n// Remove all listeners\nconst removeListeners = () => {\n  Motion.removeAllListeners();\n};\n\n```\n\n----------------------------------------\n\nTITLE: Plugins Configuration Interface Definition\nDESCRIPTION: TypeScript interface for configuring Capacitor plugins including Portals, Live Updates, Cookies, and Http settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginsConfig {\n    [key: string]: { [key: string]: any } | undefined;\n    Portals?: {\n        shell: Portal;\n        apps: Portal[];\n        liveUpdatesKey?: string;\n    };\n    LiveUpdates?: LiveUpdateConfig;\n    CapacitorCookies?: {\n        enabled?: boolean;\n    };\n    CapacitorHttp?: {\n        enabled?: boolean;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Event Listeners within Angular's NgZone (TypeScript)\nDESCRIPTION: Demonstrates how to handle Capacitor plugin event listeners, such as 'networkStatusChange' from the Network plugin, within an Angular component. Since these listeners execute outside Angular's NgZone, the callback logic must be wrapped in 'this.ngZone.run()' to ensure Angular's change detection is triggered and UI updates reflect the new state (e.g., network status). This requires injecting 'NgZone' from '@angular/core' into the component constructor and utilizing a Capacitor plugin like '@capacitor/network'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/angular.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconstructor(private ngZone: NgZone) { }\n\nasync ngOnInit() {\n  Network.addListener(\"networkStatusChange\", (status) => {\n    this.ngZone.run(() => {\n      // This code will run in Angular's execution context\n      this.networkStatus = status.connected ? \"Online\" : \"Offline\";\n    });\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the 'accel' Event Listener Function in TypeScript\nDESCRIPTION: Provides the TypeScript function signature for `addListener` when subscribing to accelerometer events. It takes the event name 'accel' and a listener function (`AccelListener`) as arguments, returning a Promise that resolves to a `PluginListenerHandle` which can be used to remove the listener later. This function allows monitoring device acceleration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/motion.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Network Capacitor Plugin\nDESCRIPTION: Commands to install the Network Capacitor Plugin and synchronize the native project with the installed plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/network@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Configuration\nDESCRIPTION: Updates the camera position and configuration on the map.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nsetCamera(config: CameraConfig) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Privacy Manifest for Device Plugin\nDESCRIPTION: Example `PrivacyInfo.xcprivacy` file structure required for iOS apps using the Device plugin. This specifies the reason '85F4.1' for accessing the 'NSPrivacyAccessedAPICategoryDiskSpace' API, which is mandated by Apple starting May 1st, 2024.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryDiskSpace</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>85F4.1</string>\n        </array>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Capacitor Camera API: pickLimitedLibraryPhotos Method Signature\nDESCRIPTION: TypeScript signature for the `pickLimitedLibraryPhotos` method (iOS 14+ only). This function allows the user to modify their selection within a limited photo library access scope. It returns a Promise resolving to `GalleryPhotos` containing the selected photos (on iOS 15+) or an empty array (iOS 14 or full access).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npickLimitedLibraryPhotos() => Promise<GalleryPhotos>\n```\n\n----------------------------------------\n\nTITLE: Defining the clearAllCookies API Method in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `clearAllCookies` method. This method takes no parameters and returns a Promise that resolves once all cookies stored on the device by the application have been cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclearAllCookies() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of Push Notifications in Angular Component\nDESCRIPTION: Complete TypeScript code for the HomePage component, including imports and full implementation of push notification functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\n\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    PushNotifications.addListener('registration', (token: Token) => {\n      alert('Push registration success, token: ' + token.value);\n    });\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener(\n      'pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      },\n    );\n\n    PushNotifications.addListener(\n      'pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Capacitor Bridge Instance in Java Plugins\nDESCRIPTION: Demonstrates how registered Capacitor plugins access the central `Bridge` object instance within the Android native code. This bridge object provides access to various runtime functionalities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nthis.bridge\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Configuration Schema in TypeScript\nDESCRIPTION: TypeScript interface defining all possible configuration options for Capacitor applications with JSDoc comments explaining each property's purpose, when it was introduced, and default values. The schema includes core configuration properties and platform-specific options for Android and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CapacitorConfig {\n  /**\n   * The unique identifier of your packaged app.\n   *\n   * This is also known as the Bundle ID in iOS and the Application ID in\n   * Android. It must be in reverse domain name notation, generally\n   * representing a domain name that you or your company owns.\n   *\n   * @since 1.0.0\n   */\n  appId?: string;\n\n  /**\n   * The human-friendly name of your app.\n   *\n   * This should be what you'd see in the App Store, but can be changed after\n   * within each native platform after it is generated.\n   *\n   * @since 1.0.0\n   */\n  appName?: string;\n\n  /**\n   * The directory of your compiled web assets.\n   *\n   * This directory should contain the final `index.html` of your app.\n   *\n   * @since 1.0.0\n   */\n  webDir?: string;\n\n  /**\n   * The build configuration (as defined by the native app) under which Capacitor\n   * will send statements to the log system. This applies to log statements in\n   * native code as well as statements redirected from JavaScript (`console.debug`,\n   * `console.error`, etc.). Enabling logging will let statements render in the\n   * Xcode and Android Studio windows but can leak information on device if enabled\n   * in released builds.\n   *\n   * 'none' = logs are never produced\n   * 'debug' = logs are produced in debug builds but not production builds\n   * 'production' = logs are always produced\n   *\n   * @since 3.0.0\n   * @default debug\n   */\n  loggingBehavior?: 'none' | 'debug' | 'production';\n\n  /**\n   * User agent of Capacitor Web View.\n   *\n   * @since 1.4.0\n   */\n  overrideUserAgent?: string;\n\n  /**\n   * String to append to the original user agent of Capacitor Web View.\n   *\n   * This is disregarded if `overrideUserAgent` is used.\n   *\n   * @since 1.4.0\n   */\n  appendUserAgent?: string;\n\n  /**\n   * Background color of the Capacitor Web View.\n   *\n   * @since 1.1.0\n   */\n  backgroundColor?: string;\n\n  /**\n   * Enable zooming within the Capacitor Web View.\n   *\n   * @default false\n   * @since 6.0.0\n   */\n  zoomEnabled?: boolean;\n\n  /**\n   * Whether to give the webview initial focus.\n   *\n   * @since 7.0.0\n   * @default true\n   */\n  initialFocus?: boolean;\n\n  android?: {\n    /**\n     * Specify a custom path to the native Android project.\n     *\n     * @since 3.0.0\n     * @default android\n     */\n    path?: string;\n\n    /**\n     * User agent of Capacitor Web View on Android.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for Android.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for Android.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable zooming within the Capacitor Web View for Android.\n     *\n     * @default false\n     * @since 6.0.0\n     */\n    zoomEnabled?: boolean;\n\n    /**\n     * Enable mixed content in the Capacitor Web View for Android.\n     *\n     * [Mixed\n     * content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content)\n     * is disabled by default for security. During development, you may need to\n     * enable it to allow the Web View to load files from different schemes.\n     *\n     * **This is not intended for use in production.**\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    allowMixedContent?: boolean;\n\n    /**\n     * This enables a simpler keyboard which may have some limitations.\n     *\n     * This will capture JS keys using an alternative\n     * [`InputConnection`](https://developer.android.com/reference/android/view/inputmethod/InputConnection).\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    captureInput?: boolean;\n\n    /**\n     * Always enable debuggable web content.\n     *\n     * This is automatically enabled during development.\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    webContentsDebuggingEnabled?: boolean;\n\n    /**\n     * The build configuration under which Capacitor will generate logs on Android.\n     *\n     * Overrides global `loggingBehavior` option.\n     *\n     * @since 3.0.0\n     * @default debug\n     */\n    loggingBehavior?: 'none' | 'debug' | 'production';\n\n    /**\n     * Allowlist of plugins to include during `npx cap sync` for Android.\n     *\n     * Overrides global `includePlugins` option.\n     *\n     * @since 3.0.0\n     */\n    includePlugins?: string[];\n\n    /**\n     * Android flavor to use.\n     *\n     * If the app has flavors declared in the `build.gradle`\n     * configure the flavor you want to run with `npx cap run` command.\n     *\n     * @since 3.1.0\n     */\n    flavor?: string;\n\n    /**\n     * Whether to give the webview initial focus.\n     *\n     * Overrides global `initialFocus` option.\n     *\n     * @since 3.5.1\n     * @default true\n     */\n    initialFocus?: boolean;\n\n    /**\n     * The minimum supported webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `55`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.0.0\n     * @default 60\n     */\n    minWebViewVersion?: number;\n\n    /**\n     * The minimum supported Huawei webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `10`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.6.4\n     * @default 10\n     */\n    minHuaweiWebViewVersion?: number;\n\n    buildOptions?: {\n      /**\n       * Path to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePath?: string;\n\n      /**\n       * Password to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePassword?: string;\n\n      /**\n       * Alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAlias?: string;\n\n      /**\n       * Password for the alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAliasPassword?: string;\n\n      /**\n       * Bundle type for your release build\n       *\n       * @since 4.4.0\n       * @default \"AAB\"\n       */\n      releaseType?: 'AAB' | 'APK';\n\n      /**\n       * Program to sign your build with\n       *\n       * @since 5.1.0\n       * @default \"jarsigner\"\n       */\n      signingType?: 'apksigner' | 'jarsigner';\n    };\n\n    /**\n     * Use legacy [addJavascriptInterface](https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String))\n     * instead of the new and more secure [addWebMessageListener](https://developer.android.com/reference/androidx/webkit/WebViewCompat#addWebMessageListener(android.webkit.WebView,java.lang.String,java.util.Set%3Cjava.lang.String%3E,androidx.webkit.WebViewCompat.WebMessageListener))\n     *\n     * @since 4.5.0\n     * @default false\n     */\n    useLegacyBridge?: boolean;\n\n    /**\n     * Make service worker requests go through Capacitor bridge.\n     * Set it to false to use your own handling.\n     *\n     * @since 7.0.0\n     * @default true\n     */\n    resolveServiceWorkerRequests?: boolean;\n\n    /**\n     * If set to \"force\", margins will be adjusted for edge to edge regardless of any other settings.\n     * If set to \"auto\", or is missing, will check for Android 15 and the setting of [windowOptOutEdgeToEdgeEnforcement](https://developer.android.com/reference/android/R.attr#windowOptOutEdgeToEdgeEnforcement) and will adjust margins if on Android 15 and windowOptOutEdgeToEdgeEnforcement is false/missing.\n     * If set to \"disable\", will not adjust margins at all.\n     * In Capacitor 8, this default will be changed to 'auto'\n     *\n     * @since 7.1.0\n     * @default disable\n     */\n    adjustMarginsForEdgeToEdge?: 'auto' | 'force' | 'disable';\n  };\n\n  ios?: {\n    /**\n     * Specify a custom path to the native iOS project.\n     *\n     * @since 3.0.0\n     * @default ios\n     */\n    path?: string;\n\n    /**\n     * iOS build scheme to use.\n     *\n     * Usually this matches your app's target in Xcode. You can use the\n     * following command to list schemes:\n     *\n     * ```shell\n     * xcodebuild -workspace ios/App/App.xcworkspace -list\n     * ```\n     *\n     * @since 3.0.0\n     * @default App\n     */\n    scheme?: string;\n\n    /**\n     * User agent of Capacitor Web View on iOS.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for iOS.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for iOS.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable zooming within the Capacitor Web View for iOS.\n     *\n     * @default false\n     * @since 6.0.0\n     */\n    zoomEnabled?: boolean;\n\n    /**\n     * Configure the scroll view's content inset adjustment behavior.\n     *\n     * This will set the\n\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Reader Status with isEnabled() in TypeScript\nDESCRIPTION: Defines the `isEnabled()` method signature. This asynchronous method returns a Promise that resolves to an object containing a boolean `value`, indicating whether a screen reader (like TalkBack or VoiceOver) is currently active. This method is not supported on the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/screen-reader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled() => Promise<{ value: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Running the Capacitor Copy Command in Bash\nDESCRIPTION: Command to copy the web app build and Capacitor configuration file into the native platform project. This should be run after making changes to the web app or configuration values. It accepts an optional platform parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Push Notification Types (TypeScript)\nDESCRIPTION: Imports required types (`ActionPerformed`, `PushNotificationSchema`, `PushNotifications`, `Token`) from the `@capacitor/push-notifications` package. These types are used for interacting with the plugin's API within the Angular component.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionPerformed, PushNotificationSchema, PushNotifications, Token } from '@capacitor/push-notifications';\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in capacitor.config.json\nDESCRIPTION: Example configuration for the Keyboard plugin within the `capacitor.config.json` file. Sets the keyboard resize behavior to 'body', style to 'DARK', and enables the `resizeOnFullScreen` workaround for Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"DARK\",\n      \"resizeOnFullScreen\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Splash Screen in Capacitor (TypeScript)\nDESCRIPTION: Method to hide the splash screen. It accepts optional HideOptions to configure the fade-out duration of the splash screen when hiding it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: HideOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: List Installed Plugin Versions\nDESCRIPTION: Command to display a list of all installed Capacitor and Cordova plugins along with their version numbers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/cordova.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls\n```\n\n----------------------------------------\n\nTITLE: Calling a Native Plugin Method from TypeScript\nDESCRIPTION: This TypeScript snippet shows usage of the Echo plugin from backend JS/TS code. It imports the Echo object and calls its echo method with parameters, handling the promise-based response. The returned value is logged to the console. This demo assumes prior registration of the plugin and is intended as a usage example for consuming native methods from web code. Inputs are a string to echo; outputs are an object containing that string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Capacitor Haptics 'selectionChanged' Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Haptics.selectionChanged` method. It triggers a haptic hint when a selection changes (e.g., dragging a finger across options), provided `selectionStart` was previously called, and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nselectionChanged() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation\nDESCRIPTION: TypeScript function to lock the screen orientation with specified options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlock(options: OrientationLockOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase in iOS AppDelegate\nDESCRIPTION: Swift code to configure Firebase in the application's didFinishLaunchingWithOptions method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nFirebaseApp.configure()\n```\n\n----------------------------------------\n\nTITLE: Creating Android Variables Gradle File\nDESCRIPTION: Content for a variables.gradle file that defines common version variables for SDK versions, dependencies, and testing libraries. This promotes consistency across the project configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/updating.md#2025-04-23_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\next {\n  minSdkVersion = 21\n  compileSdkVersion = 29\n  targetSdkVersion = 29\n  androidxAppCompatVersion = '1.1.0'\n  androidxCoreVersion =  '1.2.0'\n  androidxMaterialVersion =  '1.1.0-rc02'\n  androidxBrowserVersion =  '1.2.0'\n  androidxLocalbroadcastmanagerVersion =  '1.0.0'\n  firebaseMessagingVersion =  '20.1.2'\n  playServicesLocationVersion =  '17.0.0'\n  junitVersion =  '4.12'\n  androidxJunitVersion =  '1.1.1'\n  androidxEspressoCoreVersion =  '3.2.0'\n  cordovaAndroidVersion =  '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Complete iOS AppDelegate Configuration for Firebase\nDESCRIPTION: Full Swift code for AppDelegate including Firebase configuration and push notification handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport FirebaseCore\nimport FirebaseMessaging\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    FirebaseApp.configure()\n    return true\n  }\n\n  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Messaging.messaging().apnsToken = deviceToken\n    Messaging.messaging().token(completion: { (token, error) in\n      if let error = error {\n          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n      } else if let token = token {\n          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n      }\n    })\n  }\n\n  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n  }\n```\n\n----------------------------------------\n\nTITLE: Tracking Orientation Changes in the ScreenOrientation Class\nDESCRIPTION: Adding methods to the ScreenOrientation class to track orientation changes and prevent duplicate notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Nullable private int configOrientation;\n\npublic boolean hasOrientationChanged(int orientation) {\n    if (orientation == configOrientation) {\n        return false;\n    } else {\n        this.configOrientation = orientation;\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Privacy Manifest for Preferences (XML)\nDESCRIPTION: This XML code defines a required privacy usage reason for Apple's Privacy Manifest, specifically for using UserDefaults via the Preferences plugin. Place this configuration in the PrivacyInfo.xcprivacy file in your iOS project (usually /ios/App) to ensure App Store compliance. It specifies that 'NSPrivacyAccessedAPICategoryUserDefaults' is accessed for reason 'CA92.1', fulfilling Apple’s guideline for privacy declarations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/preferences.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n  <dict>\\n    <key>NSPrivacyAccessedAPITypes</key>\\n    <array>\\n      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->\\n      <dict>\\n        <key>NSPrivacyAccessedAPIType</key>\\n        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\\n        <key>NSPrivacyAccessedAPITypeReasons</key>\\n        <array>\\n          <string>CA92.1</string>\\n        </array>\\n      </dict>\\n    </array>\\n  </dict>\\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Platform Dependencies\nDESCRIPTION: This snippet demonstrates how to update Capacitor platform dependencies for iOS, Android, and Electron to version 2 using npm and npx commands.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# iOS\nnpm install @capacitor/ios@2\nnpx cap sync ios\n\n# Android\nnpm install @capacitor/android@2\nnpx cap sync android\n\n# Electron\ncd electron\nnpm install @capacitor/electron@2\n```\n\n----------------------------------------\n\nTITLE: Defining `value` Property Type as `boolean` for LocalNotificationEnabledResult\nDESCRIPTION: Specifies that the `value` property within the LocalNotificationEnabledResult interface must be of type boolean, indicating if local notifications are enabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Defining the PluginListenerHandle Interface - TypeScript\nDESCRIPTION: Describes the PluginListenerHandle interface, which provides a standardized remove method to stop an event listener. The remove method returns a Promise and is a common pattern in Capacitor plugins for managing event subscriptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Splash Screen Theme\nDESCRIPTION: Updating Android theme configuration for the new Android 12 Splash Screen API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/4-0.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"Theme.SplashScreen\">\n    <item name=\"android:background\">@drawable/splash</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Official Recommended Plugins for Ionic Framework (Bash)\nDESCRIPTION: This npm command installs the core official Capacitor plugins required for full integration with Ionic Framework. These plugins enhance app lifecycle, haptics, keyboard, and status bar interactions. Run this command from your project root. All dependencies must match Capacitor 3 plugin versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when a cluster is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnClusterClickListener(callback?: MapListenerCallback<ClusterClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: This command opens the iOS Capacitor .xcworkspace project in Xcode. It allows for more control over the native iOS project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Methods in Java\nDESCRIPTION: Java implementation example for a callback method in an Android Capacitor plugin using the @PluginMethod annotation with RETURN_CALLBACK return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)\npublic void method3(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: GetUriResult and GetUriOptions Type Definitions in TypeScript\nDESCRIPTION: Interfaces for getting file URIs and specifying options for URI retrieval.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetUriResult {\n  uri: string;\n}\n\ninterface GetUriOptions {\n  path: string;\n  directory: Directory;\n}\n```\n\n----------------------------------------\n\nTITLE: Photo Interface Definition\nDESCRIPTION: TypeScript interface defining the Photo object returned by the Camera API, including properties for various image formats and metadata.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Photo {\n  base64String: string;  // The base64 encoded string representation of the image, if using CameraResultType.Base64.\n  dataUrl: string;       // The url starting with 'data:image/jpeg;base64,' and the base64 encoded string representation of the image, if using CameraResultType.DataUrl.\n  path: string;          // If using CameraResultType.Uri, the path will contain a full, platform-specific file URL that can be read later using the Filesystem API.\n  webPath: string;       // webPath returns a path that can be used to set the src attribute of an image for efficient loading and rendering.\n  exif: any;             // Exif data, if any, retrieved from the image\n  format: string;        // The format of the image, ex: jpeg, png, gif. iOS and Android only support jpeg. Web supports jpeg and png. gif is only supported if using file input.\n  saved: boolean;        // Whether if the image was saved to the gallery or not. On Android and iOS, saving to the gallery can fail if the user didn't grant the required permissions. On Web there is no gallery, so always returns false.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor App Launcher Plugin using npm\nDESCRIPTION: Commands to install the Capacitor App Launcher plugin using npm and synchronize the native Capacitor projects. Requires Node.js, npm, and the Capacitor CLI to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app-launcher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app-launcher\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Opening an In-App Browser with Capacitor - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import the Browser API from @capacitor/browser and use it to asynchronously open a specified URL in an in-app browser. Dependencies are @capacitor/browser and a compatible Capacitor project setup. The openCapacitorSite function accepts no parameters, opens the given URL, and returns a Promise. Expected input is none; output is that a browser window opens to the specified URL. Limitations: Works on supported platforms (iOS, Android, Web).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browser } from '@capacitor/browser';\n\nconst openCapacitorSite = async () => {\n  await Browser.open({ url: 'http://capacitorjs.com/' });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when a marker is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Configuration\nDESCRIPTION: Required Android manifest entries for Google Maps API key and location permissions\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"YOUR_API_KEY_HERE\"/>\n\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Injecting AppUrlListener into React Router Tree (TSX)\nDESCRIPTION: This snippet shows how to add the AppUrlListener component inside IonReactRouter in a React Ionic app to enable deep linking. The listener must be inside the routing context where React Router's history is available. Expects necessary dependencies like IonApp, IonReactRouter, IonRouterOutlet, Route, and Redirect to be configured. It returns a complete app layout including primary routes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst App: React.FC = () => {\n  return (\n    <IonApp>\n      <IonReactRouter>\n        <AppUrlListener></AppUrlListener>\n        <IonRouterOutlet>\n          <Route path=\"/home\" component={Home} exact={true} />\n          <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Android and iOS Platform Dependencies\nDESCRIPTION: This command installs the Android and iOS platform packages for Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/android @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Mock for Capacitor Storage Plugin in TypeScript\nDESCRIPTION: Defines a basic TypeScript object `Storage` mimicking the interface of the actual `@capacitor/storage` plugin. This mock provides stub implementations for `get`, `set`, and `clear` methods, returning default values (like `undefined` for `get`) and resolving promises. It's designed to be used in testing environments to replace the real plugin functionality and avoid issues with proxying native calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/mocking-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Storage = {\n  async get(data: { key: string }): Promise<{ value: string | undefined }> {\n    return { value: undefined };\n  },\n\n  async set(data: { key: string; value: string }): Promise<void> {},\n  async clear(): Promise<void> {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Channel in Capacitor (Android Only)\nDESCRIPTION: Creates a notification channel on Android devices. Requires a Channel object parameter containing channel configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Cordova allow-intent Elements - XML Snippets for Intent Policy\nDESCRIPTION: These XML <allow-intent> tags specify which kinds of external URIs the Cordova app is allowed to launch. In Capacitor, such policies are handled differently or via platform-specific configuration. Each href pattern corresponds to a specific URI scheme or protocol the app may handle. This configuration is optional and subject to platform changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<allow-intent href=\"http://*/*\" />\n<allow-intent href=\"https://*/*\" />\n<allow-intent href=\"tel:*\" />\n<allow-intent href=\"sms:*\" />\n<allow-intent href=\"mailto:*\" />\n<allow-intent href=\"geo:*\" />\n```\n\n----------------------------------------\n\nTITLE: Removing All Delivered Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript function signature for 'removeAllDeliveredNotifications' removes all notifications from the device's notifications screen. Returns a void Promise. Available since plugin v4.0.0, no parameters are required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting a Value in Capacitor Preferences in TypeScript\nDESCRIPTION: API definition for the `set` method. This asynchronous function stores a key-value pair in the persistent store. It accepts a `SetOptions` object containing the `key` and the string `value` to be stored. Returns a Promise that resolves once the data is successfully saved.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: API Signature: addListener Method in TypeScript\nDESCRIPTION: Defines the signature for the `addListener` method. It takes an event name (`'browserClosed'` or `'browserPageLoaded'`) and a listener function, returning a `Promise<PluginListenerHandle>`. This method registers a listener for browser events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserClosed' | 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration with cap init Command\nDESCRIPTION: This command initializes Capacitor configuration by setting up the app with a specified name and app ID. The app ID should follow reverse domain notation format (e.g., com.example.appname). An optional --web-dir parameter can be provided to specify an existing web application directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/init.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init <appName> <appID>\n```\n\n----------------------------------------\n\nTITLE: Updating iOS AppDelegate Event Handlers for Capacitor 3\nDESCRIPTION: Update the `application(_:open:options:)` and `application(_:continue:restorationHandler:)` methods in `ios/App/App/AppDelegate.swift`. Replace the deprecated `CAPBridge` calls with the new `ApplicationDelegateProxy.shared` singleton methods for handling URL opening and user activity continuation, aligning with Capacitor 3 API changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n         // Called when the app was launched with a url. Feel free to add additional processing here,\n         // but if you want the App API to support tracking app url opens, make sure to keep this call\n-        return CAPBridge.handleOpenUrl(url, options)\n+        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n     }\n \n     func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n         // Called when the app was launched with an activity, including Universal Links.\n         // Feel free to add additional processing here, but if you want the App API to support\n         // tracking app url opens, make sure to keep this call\n-        return CAPBridge.handleContinueActivity(userActivity, restorationHandler)\n+        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\n     }\n```\n\n----------------------------------------\n\nTITLE: Apple App Site Association Configuration\nDESCRIPTION: JSON configuration for Apple App Site Association file to enable credential autofill\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/autofill-credentials.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Button Click Listener in Google Maps\nDESCRIPTION: Method to set up a callback for my-location button click events. Takes an optional callback function that receives MyLocationButtonClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationButtonClickListener(callback?: MapListenerCallback<MyLocationButtonClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/app Plugin using npm\nDESCRIPTION: Commands to install the @capacitor/app plugin via npm and sync the project with Capacitor to ensure the native platforms are updated.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Hiding the Status Bar (TypeScript API)\nDESCRIPTION: This TypeScript signature defines the `hide` method for making the status bar invisible. It optionally accepts `AnimationOptions` to control the transition animation (iOS only, default is Fade). It returns a Promise that resolves when the status bar is hidden.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Plugin Project using NPM\nDESCRIPTION: This command uses NPM to run the Capacitor plugin generator, which sets up the initial project structure and prompts for plugin details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Plugin with NPM\nDESCRIPTION: Command to run the Capacitor plugin generator using npm. This will start an interactive prompt to set up a new Capacitor plugin project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Android Storage Permissions with SDK Versioning\nDESCRIPTION: Android manifest permissions with specific SDK version restrictions\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"29\"/>\n```\n\n----------------------------------------\n\nTITLE: API: addListener('keyboardWillShow', ...) Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for adding an event listener for the `keyboardWillShow` event. The listener function receives a `KeyboardInfo` object containing details like keyboard height. It returns a Promise resolving to a `PluginListenerHandle` for later removal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardWillShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility Elements for Google Maps in TypeScript\nDESCRIPTION: Enables or disables accessibility elements for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nenableAccessibilityElements(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Info Window Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when a cluster's info window is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnClusterInfoWindowClickListener(callback?: MapListenerCallback<ClusterClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Polygon Click Event Listener in TypeScript\nDESCRIPTION: Sets up a listener for polygon click events using PolygonClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnPolygonClickListener(callback?: MapListenerCallback<PolygonClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Interface Definition\nDESCRIPTION: TypeScript interface for configuring server-related settings including hostname, iOS/Android schemes, URL handling, and security settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nserver?: {\n    hostname?: string;\n    iosScheme?: string;\n    androidScheme?: string;\n    url?: string;\n    cleartext?: boolean;\n    allowNavigation?: string[];\n    errorPath?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation to Landscape\nDESCRIPTION: Event handler that calls the plugin's lock method to force landscape orientation when a button is clicked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.lock({ orientation: \"landscape-primary\" })}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Event Listener in TypeScript\nDESCRIPTION: Shows how to add an event listener to a Capacitor plugin in TypeScript code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin Proxy in JavaScript/TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to register the web-side proxy for the native plugin. It uses the `registerPlugin` function from `@capacitor/core`, passing the plugin's name ('Echo') which must match the `@CapacitorPlugin` name annotation in the Java code. The returned `Echo` object is used to call the native plugin methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Orientation Change (TypeScript)\nDESCRIPTION: Enhances the ScreenOrientationWeb constructor to listen for native screen orientation changes and notifies Capacitor plugin listeners using notifyListeners. This allows external consumers to react to orientation changes consistently. It requires window.screen.orientation API support and the standard Capacitor event mechanism.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor() {\n   super();\n   window.screen.orientation.addEventListener(\"change\", () => {\n     const type = window.screen.orientation.type;\n     this.notifyListeners(\"screenOrientationChange\", { type });\n   });\n }\n```\n\n----------------------------------------\n\nTITLE: Defining the CameraPermissionState Type Alias in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `CameraPermissionState` which represents the possible states of camera or photo permissions. It extends the general `PermissionState` type by adding the 'limited' state, specific to photo library access on newer iOS versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionState = PermissionState | 'limited';\n```\n\n----------------------------------------\n\nTITLE: Defining Server Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface for server-related configuration options including hostname, iOS/Android schemes, and navigation settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/config.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nserver?: {\n  hostname?: string;\n  iosScheme?: string;\n  androidScheme?: string;\n  url?: string;\n  cleartext?: boolean;\n  allowNavigation?: string[];\n  errorPath?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Listening for Screen Orientation Changes with Capacitor API (TypeScript)\nDESCRIPTION: Defines the `addListener()` method signature for the 'screenOrientationChange' event. This method registers a callback function (`listenerFunc`) that is invoked whenever the screen orientation changes. The callback receives the new orientation details in a `ScreenOrientationResult` object. It returns a `PluginListenerHandle` which includes a `remove` method to stop listening.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Method Logic in a Capacitor Plugin (TypeScript)\nDESCRIPTION: This snippet shows how to implement the `openMap` method in the plugin's web implementation file (`src/web.ts`). It imports the interface and parameter type from definitions, and provides a stub for the new async method. The method accepts an `OpenMapOptions` object and would contain logic for opening a map at a specified location in a web environment. Dependencies include Capacitor's WebPlugin and accurate import paths.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n import type {\n   EchoPlugin,\n+  OpenMapOptions,\n } from './definitions';\n\n export class EchoWeb extends WebPlugin implements EchoPlugin {\n   // other methods\n\n+  async openMap(location: OpenMapOptions): Promise<void> {\n+    // logic here\n+  }\n }\n\n```\n\n----------------------------------------\n\nTITLE: Changing Package ID in Android build.gradle (Diff)\nDESCRIPTION: Demonstrates how to modify the `applicationId` field within the `defaultConfig` block of the `android/app/build.gradle` file. This changes the unique package identifier for the Android application, which is essential for publishing and device identification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndefaultConfig {\n-       applicationId \"com.capacitorjs.app\"\n+       applicationId \"com.mycompany.myapp\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Podfile Configuration for iOS with Firebase Messaging - Ruby\nDESCRIPTION: This snippet provides a full example Podfile for a Capacitor iOS project, including requirements and setup instructions for CocoaPods, Capacitor pods, and Firebase/Messaging. It shows required platform version, disables input/output paths for compatibility, and adds the necessary Firebase Messaging dependency in the 'App' target. Runs a post_install script to check deployment target. Dependencies: CocoaPods 1.6+, Capacitor, Firebase. Inputs: none; Outputs: When run with 'pod install', sets up the correct pods. Limitation: File paths should match the actual project structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n\nplatform :ios, '13.0'\nuse_frameworks!\n\n# workaround to avoid Xcode caching of Pods that requires\n# Product -> Clean Build Folder after new Cordova plugins installed\n# Requires CocoaPods 1.6 or newer\ninstall! 'cocoapods', :disable_input_output_paths => true\n\ndef capacitor_pods\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\nend\n\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'Firebase/Messaging'\nend\n\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n\n```\n\n----------------------------------------\n\nTITLE: Adding Orientation Listener API Definition (TypeScript)\nDESCRIPTION: Defines the signature for the `addListener` method used to subscribe to device orientation change events. It requires the specific event name 'orientation' and a callback function (`OrientationListener`). The method returns a Promise resolving to a `PluginListenerHandle` which can be used to unsubscribe.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/motion.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Implementing Current Orientation Detection\nDESCRIPTION: Updated plugin class code that initializes the implementation object and properly handles the orientation method to return the current screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugins.ScreenOrientation;\n\nimport com.getcapacitor.JSObject;\n/* Remaining imports omitted for brevity */\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   private ScreenOrientation implementation;\n\n   @Override\n   public void load() {\n       implementation = new ScreenOrientation(getActivity());\n   }\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       JSObject ret = new JSObject();\n       String type = implementation.getCurrentOrientationType();\n       ret.put(\"type\", type);\n       call.resolve(ret);\n   }\n\n   /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Device Info Method Definition\nDESCRIPTION: TypeScript method definition for getting device information\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<DeviceInfo>\n```\n\n----------------------------------------\n\nTITLE: Customizing Cordova Preferences in Capacitor Config - JSON Block\nDESCRIPTION: Shows how Cordova preferences are mapped into the Capacitor configuration, preserving project-specific plugin settings post-migration. The \\\"cordova\\\" object with \\\"preferences\\\" key accepts key/value pairs from config.xml and integrates them into the Capacitor ecosystem. Used in capacitor.config.json. Limitation: Only preferences recognized by plugins will have an effect.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cordova\": {\n    \"preferences\": {\n      \"DisableDeploy\": \"true\",\n      \"CameraUsesGeolocation\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Map Bounds for Google Maps in TypeScript\nDESCRIPTION: Retrieves the current viewport latitude and longitude bounds of the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ngetMapBounds() => Promise<LatLngBounds>\n```\n\n----------------------------------------\n\nTITLE: Camera getPhoto Method Definition\nDESCRIPTION: TypeScript API definition for the getPhoto method that prompts users to pick a photo from their album or take a new one with the camera.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPhoto(options: ImageOptions) => Promise<Photo>\n```\n\n----------------------------------------\n\nTITLE: Enabling Current Location Display in Google Maps\nDESCRIPTION: Enables or disables the display of the user's current location on the map based on the enabled parameter. Shows a blue dot at the user's location when enabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nenableCurrentLocation(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Listener in Vue\nDESCRIPTION: Implementation of a deep link listener in a Vue application using the Capacitor App API. This code listens for deep link events and navigates to the appropriate route using Vue Router.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nApp.addListener('appUrlOpen', function (event: URLOpenListenerEvent) {\n  // Example url: https://beerswift.app/tabs/tabs2\n  // slug = /tabs/tabs2\n  const slug = event.url.split('.app').pop();\n\n  // We only push to the route if there is a slug present\n  if (slug) {\n    router.push({\n      path: slug,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Vue\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a Vue application's main.ts file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/web/pwa-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Above the createApp() line\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: CapacitorCookies API Method: clearCookies\nDESCRIPTION: TypeScript declaration for the clearCookies method that removes all cookies from a specific URL. Accepts ClearCookieOptions containing the URL to clear cookies from.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclearCookies(options: ClearCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Properties\nDESCRIPTION: Update the Gradle wrapper properties to use Gradle version 8.0.2 for the Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Example Cordova Dependencies in package.json - JSON Block\nDESCRIPTION: This JSON snippet demonstrates a typical dependencies section from a package.json, including Cordova and Ionic Native plugins. Capacitor will auto-install all compatible Cordova plugins listed here in the new native projects. Key parameters are plugin names and version numbers. Limitation: Contains both Cordova and Ionic dependencies; incompatible plugins are ignored by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@ionic-native/camera\": \"^5.3.0\",\n    \"@ionic-native/core\": \"^5.3.0\",\n    \"@ionic-native/file\": \"^5.3.0\",\n    \"cordova-android\": \"8.0.0\",\n    \"cordova-ios\": \"5.0.0\",\n    \"cordova-plugin-camera\": \"4.0.3\",\n    \"cordova-plugin-file\": \"6.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Watch Position Callback Signature in TypeScript\nDESCRIPTION: Defines a type alias for the callback function used in geolocation APIs that watches for position changes. The function receives either a Position object (or null) as the first parameter and an optional error as the second. This type-safe signature ensures integration with the Capacitor geolocation plugin, and expects consumers to conform to this shape when subscribing to location updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(position: Position | null, err?: any): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Manual Mock Directory Structure\nDESCRIPTION: Illustrates the standard directory layout for Jest manual mocks. Placing mock files like `storage.ts` and `toast.ts` inside `__mocks__/@capacitor/` at the project root ensures Jest automatically discovers and substitutes them for the actual `@capacitor/storage` and `@capacitor/toast` modules during tests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/mocking-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n.\n|\n+-- __mocks__\n| |\n| +-- @capacitor\n|   |\n|   +-- storage.ts\n|   +-- toast.ts\n...\n+-- src\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in iOS Info.plist\nDESCRIPTION: XML configuration for registering a custom URL scheme in iOS by editing the Info.plist file, which allows the app to be opened from a custom scheme.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLName</key>\n    <string>com.getcapacitor.capacitor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>mycustomscheme</string>\n    </array>\n  </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Adding Android Permission in AndroidManifest.xml - XML\nDESCRIPTION: Demonstrates how to insert additional app permissions, such as network state access, by adding a <uses-permission> tag in 'AndroidManifest.xml' under the <manifest> root. The example covers inclusion of 'android.permission.ACCESS_NETWORK_STATE' for network feature plugins. Standard Android syntax and placement in the manifest file are required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\npackage=\\\"com.getcapacitor.myapp\\\">\\n    <activity>\\n      <!-- other stuff -->\\n    </activity>\\n\\n    <!-- More stuff -->\\n\\n    <!-- Your permissions -->\\n\\n    <!-- Network API -->\\n    <uses-permission android:name=\\\"android.permission.ACCESS_NETWORK_STATE\\\" />\\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Opening a URL with Capacitor Browser\nDESCRIPTION: Example function that demonstrates how to use the Browser API to open a website URL in an in-app browser.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browser } from '@capacitor/browser';\n\nconst openCapacitorSite = async () => {\n  await Browser.open({ url: 'http://capacitorjs.com/' });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PendingResult Interface in TypeScript\nDESCRIPTION: Defines the PendingResult interface for representing pending notifications. It includes a property for an array of PendingLocalNotificationSchema objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PendingResult {\n  notifications: PendingLocalNotificationSchema[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration using CLI\nDESCRIPTION: This command initializes Capacitor configuration for a project. It requires an app name and app ID as inputs. An optional web directory can be specified for an existing web app. The command sets up the necessary configuration files for Capacitor in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/init.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init <appName> <appID>\n```\n\n----------------------------------------\n\nTITLE: Setting Map Bounds in TypeScript\nDESCRIPTION: Sets the map viewport to contain specified bounds with optional padding. Takes LatLngBounds object and optional padding in pixels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nfitBounds(bounds: LatLngBounds, padding?: number | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Managing Single-Completion Plugin Calls in Capacitor (Java)\nDESCRIPTION: Defines the Java methods (`saveCall`, `getSavedCall`, `releaseCall`) provided by the Capacitor bridge on Android for managing plugin calls (`PluginCall`) that need to be saved for a single future completion. These methods allow saving a call, retrieving it later by its ID, and releasing it once resolved or rejected.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n```java\nvoid saveCall(PluginCall call)\nPluginCall getSavedCall(String callbackId)\nvoid releaseCall(PluginCall call)\nvoid releaseCall(String callbackId)\n```\n```\n\n----------------------------------------\n\nTITLE: Cancelling Local Notifications - Capacitor Plugin API - TypeScript\nDESCRIPTION: This snippet shows the cancel method, which removes scheduled notifications matching the provided CancelOptions object. It returns a Promise that resolves once cancellations are processed. This function helps manage notification lifecycle and prevents outdated reminders. Inputs specify which notifications to cancel.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(options: CancelOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining WatchPositionCallback Type Alias in TypeScript\nDESCRIPTION: Defines the WatchPositionCallback type alias as a function that takes a Position or null as its first argument and an optional error as its second argument.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype WatchPositionCallback = (position: Position | null, err?: any) => void\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins with Capacitor CLI\nDESCRIPTION: Command to list all installed Cordova and Capacitor plugins, with an optional platform parameter to filter results for Android or iOS specifically.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Runner in JSON Format\nDESCRIPTION: Example configuration for Background Runner plugin in capacitor.config.json showing how to set up a background task with custom label, source file, event trigger, and execution parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"BackgroundRunner\": {\n      \"label\": \"com.example.background.task\",\n      \"src\": \"runners/background.js\",\n      \"event\": \"myCustomEvent\",\n      \"repeat\": true,\n      \"interval\": 15,\n      \"autoStart\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events in Capacitor iOS\nDESCRIPTION: Demonstrates how to trigger JavaScript events on window or document targets from the iOS native side.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"{ 'dataKey': 'dataValue' }\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration Values in iOS (Swift)\nDESCRIPTION: Swift code snippet for the iOS native implementation of a Capacitor plugin, showing how to retrieve a configuration value (e.g., 'style') using the `getConfigValue()` method provided by the Capacitor iOS runtime. Includes type casting to String.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let style = getConfigValue(\"style\") as? String {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Splash Screen in Capacitor (TypeScript)\nDESCRIPTION: Method to display the splash screen. It accepts optional ShowOptions to configure the behavior of the splash screen, such as auto-hiding and fade durations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: ShowOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Switch from CAPNotifications to NSNotification Extensions - diff (Swift)\nDESCRIPTION: This Swift diff updates notification posting code to use the recommended NSNotification extensions, improving code clarity and leveraging Capacitor 3 APIs. Changes affect touchesBegan and push notification delegate methods, replacing CAPNotifications static references with .capacitorStatusBarTapped and similar. No parameters need to be changed; requires new Capacitor notification extensions implemented.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\\n         super.touchesBegan(touches, with: event)\\n\\n         let statusBarRect = UIApplication.shared.statusBarFrame\\n         guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\\n\\n         if statusBarRect.contains(touchPoint) {\\n-            NotificationCenter.default.post(CAPBridge.statusBarTappedNotification)\\n+            NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\\n         }\\n     }\\n\\n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\\n+        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\\n     }\\n\\n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\\n+        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\\n     }\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notifications in iOS AppDelegate\nDESCRIPTION: Implementing the method to handle remote notifications and dispatch events to the Background Runner in iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n        // ....\n        BackgroundRunnerPlugin.dispatchEvent(event: \"remoteNotification\", eventArgs: userInfo) { result in\n            switch result {\n            case .success:\n                completionHandler(.newData)\n            case .failure:\n                completionHandler(.failed)\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in strings.xml - XML\nDESCRIPTION: Defines a custom URL scheme for the application to handle custom deep linking on launch. This is accomplished by setting the 'custom_url_scheme' in the 'strings.xml' resource file. This value should typically match the package ID; it enables the app to respond to specific URL schemes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\\\"custom_url_scheme\\\">com.capacitorjs.myapp</string>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: This code snippet defines the PluginListenerHandle interface, which provides a method to remove a plugin listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ArrayLike Interface in TypeScript\nDESCRIPTION: This snippet defines a minimal ArrayLike interface in TypeScript, which consists of a single 'length' property of type number. Such a structure is used to represent objects that have array-like behavior, supporting operations that rely on a length property. This is a foundational pattern for many JavaScript and TypeScript APIs that accept array-like inputs without true array methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayLike<T> {\n  length: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin to 8.0.0 for Capacitor 5.0\nDESCRIPTION: Updates the Android Gradle plugin from version 7.2.1 to 8.0.0 to support Capacitor 5.0 requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:7.2.1'\n+       classpath 'com.android.tools.build:gradle:8.0.0'\n    }\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Functionality in TypeScript\nDESCRIPTION: TypeScript code snippet for the speak() method, which provides text-to-speech functionality when a screen reader is active.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-reader.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nspeak(options: SpeakOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Camera Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/camera plugin and synchronize the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/camera\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating iOS .gitignore to Ignore DerivedData\nDESCRIPTION: Add `DerivedData` to the `ios/.gitignore` file. This directory contains intermediate build products and indexes generated by Xcode and the Capacitor CLI during native iOS builds, and should not be tracked by Git.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n App/Pods\n App/App/public\n App/Podfile.lock\n+DerivedData\n xcuserdata\n \n # Cordova plugins for Capacitor\n```\n\n----------------------------------------\n\nTITLE: Defining Geolocation API in Capacitor\nDESCRIPTION: Specifies the API for accessing device location information in Capacitor. It includes a method to get the current position and defines the structure of the result object returned by this method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n#### CapacitorGeolocation\n\nGet access to device location information.\n\n| Prop                     | Type                                                                                   | Description                          | Since |\n| ------------------------ | -------------------------------------------------------------------------------------- | ------------------------------------ | ----- |\n| **`getCurrentPosition`** | <code>() =&gt; <a href=\"#getcurrentpositionresult\">GetCurrentPositionResult</a></code> | Get the device's last known location | 1.0.0 |\n\n\n#### GetCurrentPositionResult\n\n| Prop                   | Type                        | Description                                                                                                           | Since |\n| ---------------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`latitude`**         | <code>number</code>         | Latitude in decimal degrees                                                                                           | 1.0.0 |\n| **`longitude`**        | <code>number</code>         | longitude in decimal degrees                                                                                          | 1.0.0 |\n| **`accuracy`**         | <code>number</code>         | Accuracy level of the latitude and longitude coordinates in meters                                                    | 1.0.0 |\n| **`altitude`**         | <code>number \\| null</code> | The altitude the user is at (if available)                                                                            | 1.0.0 |\n| **`altitudeAccuracy`** | <code>number \\| null</code> | Accuracy level of the altitude coordinate in meters, if available. Available on all iOS versions and on Android 8.0+. | 1.0.0 |\n| **`speed`**            | <code>number \\| null</code> | The speed the user is traveling (if available)                                                                        | 1.0.0 |\n| **`heading`**          | <code>number \\| null</code> | The heading the user is facing (if available)                                                                         | 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface in TypeScript\nDESCRIPTION: Defines the ListChannelsResult interface which represents the result of listing notification channels, containing an array of Channel objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBufferView Interface in TypeScript\nDESCRIPTION: This code snippet defines the ArrayBufferView interface with its properties buffer, byteLength, and byteOffset. It represents a view into an ArrayBuffer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayBufferView {\n  buffer: ArrayBufferLike;\n  byteLength: number;\n  byteOffset: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor iOS App via CLI\nDESCRIPTION: This Capacitor CLI command (`npx cap run ios`) compiles the native iOS project and deploys the application to a connected device or a selected simulator. It typically prompts the user to choose a target if multiple options are available. This command handles the build and run process from the command line.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Global iOS Screen Orientation in Info.plist (XML)\nDESCRIPTION: Sets the default supported screen orientations for iOS devices within the `Info.plist` file. This example configures iPhones to only support Portrait mode and iPads to support both Landscape modes (left and right). The `UISupportedInterfaceOrientations` key targets iPhones, while `UISupportedInterfaceOrientations~ipad` targets iPads.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UISupportedInterfaceOrientations</key>\n  <array>\n    <string>UIInterfaceOrientationPortrait</string>\n  </array>\n  <key>UISupportedInterfaceOrientations~ipad</key>\n  <array>\n    <string>UIInterfaceOrientationLandscapeRight</string>\n    <string>UIInterfaceOrientationLandscapeLeft</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Constant for UTF-16 Encoding in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the UTF-16 encoding (Sixteen-bit UCS Transformation Format) using the 'utf16' string literal for file operations within the Capacitor Filesystem API. Byte order may be identified by an optional byte-order mark. This encoding option is only supported on the Android platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n'utf16'\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Markers from the Map - TypeScript\nDESCRIPTION: Supports batch removal of markers by their string IDs. Accepts an array of string marker identifiers and returns a void Promise. Best used for cleanup or dynamic updates, requiring all IDs to reference valid markers on the current map.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarkers(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Building the Ionic App\nDESCRIPTION: Command to build the Ionic application, creating the web assets needed by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Toast Plugin (Bash)\nDESCRIPTION: Installs the @capacitor/toast plugin using npm and synchronizes the native project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/toast\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Enabling Marker Clustering in Google Maps\nDESCRIPTION: Enables clustering of markers on the map. The minClusterSize parameter specifies the minimum number of markers that can be clustered together, defaulting to 4 if not specified.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nenableClustering(minClusterSize?: number | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/action-sheet Plugin - Bash\nDESCRIPTION: This snippet demonstrates the recommended terminal commands to install the @capacitor/action-sheet plugin for a Capacitor project. It uses npm to add the plugin as a dependency and npx to synchronize native platforms with the updated dependencies. Both commands should be executed from the project root. No inputs or outputs; ensure Node.js and npm are installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/action-sheet\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Accessing Bridge in Swift Capacitor Plugins\nDESCRIPTION: Demonstrates how to access the bridge property in Capacitor plugins and safely unwrap it using a guard statement.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nself.bridge?\n```\n\nLANGUAGE: swift\nCODE:\n```\nguard let bridge = self.bridge else { return }\n```\n\n----------------------------------------\n\nTITLE: Importing the Global Capacitor Object in TypeScript\nDESCRIPTION: Shows how to import the global Capacitor object from the core package, which provides access to all Capacitor utility functions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Android Platform\nDESCRIPTION: Command to update the Capacitor Android platform to the latest version 3.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @capacitor/android@latest-3\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Defining Token Interface in TypeScript\nDESCRIPTION: This code snippet defines the Token interface, which represents the device token for push notifications on iOS (APNS) and Android (FCM).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Token {\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a notification channel - Capacitor Plugin - TypeScript\nDESCRIPTION: Creates a new notification channel for grouping notifications on Android O (API 26) or newer. Requires a Channel object parameter specifying channel properties such as id, name, and importance. Returns a promise that resolves after channel creation. Only available on Android; requires the Capacitor notification plugin and minimum SDK 26.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Channels in Capacitor (Android Only)\nDESCRIPTION: Retrieves a list of notification channels on Android devices. Returns a Promise resolving to a ListChannelsResult object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: Defining File Interface in TypeScript\nDESCRIPTION: Defines the File interface with properties for file metadata. It includes lastModified timestamp and name of the file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface File {\n  lastModified: number;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Activity Manifest\nDESCRIPTION: Adding required android:exported tag to Android manifest activity element.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/4-0.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nandroid:exported=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Capacitor Android Plugin in Java\nDESCRIPTION: Shows a simple `EchoPlugin` extending `com.getcapacitor.Plugin`. It defines an `echo` method annotated with `@PluginMethod` which receives a `PluginCall` object. The method extracts a string value from the call, creates a `JSObject` to hold the return value, and sends it back to the JavaScript caller using `call.resolve()`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage android.plugin.test;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: This command opens the iOS Capacitor .xcworkspace project in Xcode for more control over the native project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: Represents the status of filesystem permissions, specifically for public storage. It contains a `publicStorage` property holding the `PermissionState`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#permissionstate\">PermissionState</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Move Started Listener in TypeScript\nDESCRIPTION: Sets a listener for when the camera starts moving. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCameraMoveStartedListener(callback?: MapListenerCallback<CameraMoveStartedCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Fetching Albums from Library in TypeScript\nDESCRIPTION: Method to retrieve albums from the user's photo library with options for including shared albums.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/photos.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAlbums(options?: PhotosAlbumsFetchOptions) => Promise<PhotosAlbumsResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Network Plugin - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the @capacitor/network plugin using npm and synchronize it with an Ionic/Capacitor project. The dependencies required are npm, Node.js, and an initialized Capacitor project. The commands ensure that the network plugin is installed and the native projects are updated. There are no configurable parameters; outputs include downloaded dependencies and synchronized native code, with standard npm limitations applying.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/network\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Channel - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Defines the TypeScript method for creating a notification channel on Android using the Capacitor plugin. Requires a Channel object with configuration properties and returns a Promise. Only available on Android; ignored on other platforms. Used for grouping and customizing notification behavior. Inputs: channel (channel details). Outputs: Promise after channel is created.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Android Platform via npm and cap CLI - bash\nDESCRIPTION: This snippet contains the terminal commands for upgrading the Capacitor Android platform to the latest v3 version and synchronizing the project setup. Meant for use in the root directory. Requires npm and the Capacitor CLI to be installed; ensures java native code and configuration match the updated JavaScript layer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android@latest-3\\nnpx cap sync android\\n\n```\n\n----------------------------------------\n\nTITLE: Structuring GetLanguageCodeResult and LanguageTag Interfaces in TypeScript\nDESCRIPTION: Defines two interfaces: GetLanguageCodeResult for a short (two-character) language code, and LanguageTag for a well-formed IETF BCP 47 tag. Both are designed for use with Capacitor APIs that surface locale or language environment information. No dependencies beyond TypeScript, and intended as return types for language query operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetLanguageCodeResult {\n  value: string;     // Two character language code, e.g., 'en', 'fr'\n}\n\ninterface LanguageTag {\n  value: string;     // BCP 47 tag, e.g., 'en-US', 'fr-CA'\n}\n```\n\n----------------------------------------\n\nTITLE: Using the cap build Command in Capacitor CLI\nDESCRIPTION: This command builds the native project to create a signed AAB, APK, or IPA file. It requires specifying the platform (android or ios) and supports various options for customizing the build process including scheme selection, flavor configuration, and keystore settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap build [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard addListener('keyboardWillShow') Method Signature\nDESCRIPTION: Defines the `addListener` method for subscribing to the `keyboardWillShow` event, which fires just before the keyboard appears. The listener function receives a `KeyboardInfo` object containing the keyboard height. Returns a `PluginListenerHandle` for unsubscribing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardWillShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Adding New Method to Plugin Interface in TypeScript\nDESCRIPTION: Shows how to define a new method signature in the plugin's TypeScript interface and add parameter type definitions. The example adds an openMap method that takes latitude and longitude coordinates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n+  openMap(options: OpenMapOptions): Promise<void>;\n }\n\n+export interface OpenMapOptions {\n+  latitude: number;\n+  longitude: number;\n+}\n```\n\n----------------------------------------\n\nTITLE: Checking Permission Status using CLLocationManager - Swift\nDESCRIPTION: This method 'checkPermissions' maps the authorization state from CLLocationManager to a plugin-friendly string status ('prompt', 'denied', 'granted'), and returns it using call.resolve. It demonstrates reading native framework states, mapping them to custom states, and returning structured results. Dependencies include CoreLocation and Capacitor; must be used within a CAPPlugin subclass.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func checkPermissions(_ call: CAPPluginCall) {\n    let locationState: String\n\n    switch CLLocationManager.authorizationStatus() {\n    case .notDetermined:\n        locationState = \"prompt\"\n    case .restricted, .denied:\n        locationState = \"denied\"\n    case .authorizedAlways, .authorizedWhenInUse:\n        locationState = \"granted\"\n    @unknown default:\n        locationState = \"prompt\"\n    }\n\n    call.resolve([\"location\": locationState])\n}\n```\n\n----------------------------------------\n\nTITLE: Accessibility API Method: speak\nDESCRIPTION: TypeScript method signature for speaking text through a connected screen reader. Takes AccessibilitySpeakOptions which includes the text to speak and optionally the language to use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/accessibility.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nspeak(options: AccessibilitySpeakOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listening for Screen Reader State Changes with addListener() in TypeScript\nDESCRIPTION: API signature for adding an event listener specifically for the 'stateChange' event. This event fires when the native screen reader is turned on or off. It requires the event name ('stateChange') and a listener callback function (`StateChangeListener`). Returns a Promise resolving to a `PluginListenerHandle` which can be used to remove the listener later. This method is not supported on the web.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-reader.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Scheme in Capacitor Config - TypeScript\nDESCRIPTION: Updates the TypeScript Capacitor configuration object to specify which Xcode scheme should be used for iOS builds. Adding the 'ios' property with 'scheme' tells the Capacitor CLI which iOS scheme to target during development. Requires the iOS 'App QA' scheme to already exist in the native project configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nios: {\n  scheme: 'App QA',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GeolocationPermissionType Alias in TypeScript\nDESCRIPTION: Defines the `GeolocationPermissionType` type alias in TypeScript as a string literal union. It specifies the types of geolocation permissions that can be requested or checked: 'location' (representing fine/precise location access) or 'coarseLocation' (representing approximate location access, particularly relevant on Android 12+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n'location' | 'coarseLocation'\n```\n\n----------------------------------------\n\nTITLE: Checking Push Notification Permissions in Capacitor\nDESCRIPTION: Check permission to receive push notifications. On Android 12 and below, the status is always granted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Storage Permissions\nDESCRIPTION: XML snippet defining the necessary Android permissions (`READ_EXTERNAL_STORAGE`, `WRITE_EXTERNAL_STORAGE`) required in `AndroidManifest.xml` when using the `saveToGallery: true` option in the Camera plugin. These permissions allow reading and saving photo files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme in Android Strings Resource\nDESCRIPTION: Shows how to set a custom URL scheme for deep linking in the strings.xml resource file for an Android app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"custom_url_scheme\">com.capacitorjs.myapp</string>\n```\n\n----------------------------------------\n\nTITLE: Listening to Keyboard Visibility Events in TypeScript\nDESCRIPTION: Provides an example of importing the `Keyboard` object from `@capacitor/keyboard` and adding listeners for `keyboardWillShow`, `keyboardDidShow`, `keyboardWillHide`, and `keyboardDidHide` events. These listeners log information about the keyboard's state changes, including its height when shown.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Swift with CAPPluginCall\nDESCRIPTION: Shows how to safely access potentially null values from a CAPPluginCall object in Swift. Demonstrates the difference between using convenience accessors and direct access to the options property.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif let value = call.getString(\"foo\") {\n    // GOOD: `value` is nil, so this block won't run\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif call.options[\"foo\"] != nil {\n    // BAD: the key returned a truthy `NSNull` object, so this block will run\n}\n```\n\n----------------------------------------\n\nTITLE: API: getResizeMode() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `getResizeMode()` method. It retrieves the currently configured keyboard resize mode. This method is only supported on iOS and returns a Promise resolving to `KeyboardResizeOptions`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetResizeMode() => Promise<KeyboardResizeOptions>\n```\n\n----------------------------------------\n\nTITLE: Adding Polygons to Google Maps\nDESCRIPTION: Adds multiple polygon shapes to the map. Returns a Promise that resolves to an array of strings representing the unique IDs of the added polygons.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\naddPolygons(polygons: Polygon[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Defining RegistrationError Interface in TypeScript\nDESCRIPTION: Interface for registration error, containing an error message describing the registration failure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegistrationError {\n  error: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Capacitor Plugin in TypeScript\nDESCRIPTION: Demonstrates how to add an event listener to a Capacitor plugin in TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Google Maps Instance in TypeScript\nDESCRIPTION: Destroys the current Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndestroy() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugin in TypeScript for Capacitor WebView\nDESCRIPTION: This TypeScript snippet shows how to import and use custom plugin methods in the WebView code of a Capacitor project. It demonstrates calling the custom methods defined in the native plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Other codes...\nimport { Plugins } from '@capacitor/core';\nconst { CustomNativePlugin } = Plugins;\n// Other codes...\nCustomNativePlugin.customCall({ message: 'CUSTOM MESSAGE' });\nCustomNativePlugin.customFunction();\n// Other codes...\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in JSON\nDESCRIPTION: Configuration example for the Splash Screen plugin using capacitor.config.json, showing all available options like duration, styling, and behavior settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"SplashScreen\": {\n      \"launchShowDuration\": 3000,\n      \"launchAutoHide\": true,\n      \"launchFadeOutDuration\": 3000,\n      \"backgroundColor\": \"#ffffffff\",\n      \"androidSplashResourceName\": \"splash\",\n      \"androidScaleType\": \"CENTER_CROP\",\n      \"showSpinner\": true,\n      \"androidSpinnerStyle\": \"large\",\n      \"iosSpinnerStyle\": \"small\",\n      \"spinnerColor\": \"#999999\",\n      \"splashFullScreen\": true,\n      \"splashImmersive\": true,\n      \"layoutName\": \"launch_screen\",\n      \"useDialog\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetUriOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for retrieving the URI of a file using the Capacitor Filesystem API. Requires the `path` of the file and the `directory` it resides in.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetUriOptions {\n  /**\n   * The path of the file to get the URI for\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The Directory to get the file under\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n}\n```\n\n----------------------------------------\n\nTITLE: Cordova Dependencies Example\nDESCRIPTION: Example of Cordova plugin dependencies in package.json that Capacitor will automatically install\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"@ionic-native/camera\": \"^5.3.0\",\n        \"@ionic-native/core\": \"^5.3.0\",\n        \"@ionic-native/file\": \"^5.3.0\",\n        \"cordova-android\": \"8.0.0\",\n        \"cordova-ios\": \"5.0.0\",\n        \"cordova-plugin-camera\": \"4.0.3\",\n        \"cordova-plugin-file\": \"6.0.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rules for Capacitor Plugin Protection\nDESCRIPTION: These ProGuard rules are used to prevent code obfuscation issues with Capacitor plugins when using ProGuard for app optimization. They ensure that plugin classes and their methods are not removed or renamed during the build process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n-keep class com.mythirdpartyplugin.** { *; }\n\n-keep public class * extends com.getcapacitor.Plugin\n```\n\n----------------------------------------\n\nTITLE: Syncing Capacitor Web Assets Using CLI - Bash\nDESCRIPTION: Runs the \\\"npx cap sync web\\\" command to copy the Capacitor runtime bundle and associated files into the web assets directory. This sync process ensures the latest web platform files, including capacitor.js, are available for use during web deployment. Requires Node.js, npm, and Capacitor to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync web\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Delivered Notifications in Capacitor\nDESCRIPTION: Remove specified notifications from the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Managing Native Build Numbers and Versions in Capacitor Projects - TypeScript\nDESCRIPTION: This code sample provides API calls for querying and updating app versions and build numbers for both iOS and Android platforms using the loaded MobileProject instance from @trapezedev/project. It requires a previously initialized and loaded 'project' object as context. Functions are used to set and get version and build numbers, with separate methods for iOS ('setVersion', 'incrementBuild', 'getBuild') and Android ('setVersionName', 'getVersionName', 'setVersionCode', 'getVersionCode', 'incrementVersionCode'). Inputs are version strings or build numbers, and the functions operate asynchronously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/automated-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.ios?.setVersion('App', 'Debug', '1.4.5');\nawait project.ios?.incrementBuild('App');\nawait project.ios?.getBuild('App', 'Debug');\nawait project.ios?.getBuild('App', 'Release');\nawait project.android?.setVersionName('1.0.2');\nawait project.android?.getVersionName();\nawait project.android?.setVersionCode(11);\nawait project.android?.getVersionCode();\nawait project.android?.incrementVersionCode();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in iOS Info.plist\nDESCRIPTION: XML configuration to register a custom URL scheme for iOS apps in the Info.plist file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLName</key>\n    <string>com.getcapacitor.capacitor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>mycustomscheme</string>\n    </array>\n  </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Background Color - TypeScript\nDESCRIPTION: Defines how to set the status bar's background color on Android devices by passing a BackgroundColorOptions object to setBackgroundColor. Only works on Android; calling this on iOS has no effect. Requires a hex string for the color property. Returns a Promise and requires the @capacitor/status-bar plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetBackgroundColor(options: BackgroundColorOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Verifying Ported Plugin Code\nDESCRIPTION: Command to verify the ported plugin code for any issues before publishing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Capacitor and Cordova Plugins - Bash\nDESCRIPTION: Provides the command to display all Capacitor and Cordova plugins installed with their exact version numbers. The npx cap ls command is run from the project root and outputs versioning and integration details. Its main use is for debugging, managing dependencies, and verifying plugin installations in complex projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/cordova.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the iOS project in Xcode after adding it to Capacitor. This allows you to run and test your app in the iOS simulator or on a device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Storage Get Method TypeScript Definition\nDESCRIPTION: Type definition for the Storage.get() method which retrieves a value by key and returns a promise with the value or null.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/storage.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget(options: { key: string; }) => Promise<{ value: string | null; }>\n```\n\n----------------------------------------\n\nTITLE: Using Common Variables for SDK Versions in Android App Build File\nDESCRIPTION: This diff shows how to modify the `android/app/build.gradle` file to use the common variables (defined in `variables.gradle`) for `compileSdkVersion`, `minSdkVersion`, and `targetSdkVersion` instead of hardcoded values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n android {\n-    compileSdkVersion 28\n+    compileSdkVersion rootProject.ext.compileSdkVersion\n     defaultConfig {\n         applicationId \"com.example.app\"\n-        minSdkVersion 21\n-        targetSdkVersion 28\n+        minSdkVersion rootProject.ext.minSdkVersion\n+        targetSdkVersion rootProject.ext.targetSdkVersion\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in capacitor.config.json\nDESCRIPTION: Example configuration for the Keyboard plugin within the `plugins` object in `capacitor.config.json`. It demonstrates setting `resize` (iOS only), `style` (iOS only), and `resizeOnFullScreen` (Android only) options to customize keyboard behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"dark\",\n      \"resizeOnFullScreen\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Push Notification Permissions in Capacitor\nDESCRIPTION: TypeScript method signature for requesting permission to display notifications, which prompts the user on iOS and automatically grants on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermission() => Promise<NotificationPermissionResponse>\n```\n\n----------------------------------------\n\nTITLE: Accessing Arrays with Potential NSNull Members Using Convenience Accessors (Swift)\nDESCRIPTION: This snippet demonstrates two ways to access an array parameter from a plugin call: first, by retrieving the array as an enumeration of Any, and second, by attempting to cast it to an array of optional Ints. The first approach runs but requires manual type validation of each member, while the second approach fails if the array contains NSNull members. This emphasizes the need for careful type handling when nulls or mixed types might be expected. Both getArray usages depend on Capacitor's CAPPluginCall extensions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\") {\n    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually\n}\nif let values = call.getArray(\"bar\", Int?) {\n    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Permission Status Interface in TypeScript\nDESCRIPTION: This snippet shows how to define a `PermissionStatus` interface in `src/definitions.ts` for a Capacitor plugin. It imports `PermissionState` from `@capacitor/core` and uses a placeholder alias 'location' to represent the permission state (e.g., granted, denied). This interface structures how permission statuses are reported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport type { PermissionState } from '@capacitor/core';\n\nexport interface PermissionStatus {\n  // TODO: change 'location' to the actual name of your alias!\n  location: PermissionState;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: iOS Universal Links Association File\nDESCRIPTION: JSON structure for the Apple App Site Association file required for Universal Links on iOS. This file associates your website domain with your iOS app, allowing deep links to open the app. It should be placed at yourwebsite.com/.well-known/apple-app-site-association without a file extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Storage Plugin in Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the @capacitor/storage package using npm, followed by running npx cap sync to synchronize Capacitor plugins. It assumes npm and Capacitor CLI are already globally available on your system or project. These commands prepare your project for integrating and using the Capacitor Storage API for persistent storage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/storage\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin Version in build.gradle\nDESCRIPTION: Diff showing the required update to the Gradle plugin version from 8.0.0 to 8.2.1 in the build.gradle file for Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:8.0.0'\n+       classpath 'com.android.tools.build:gradle:8.2.1'\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/haptics Plugin\nDESCRIPTION: Commands to install the latest version of the @capacitor/haptics plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/haptics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/haptics@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI and native-run using npm (Bash)\nDESCRIPTION: Installs the Ionic CLI and `native-run` globally using npm. These tools are used for building, running, and deploying Capacitor apps, including facilitating the Live Reload process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli native-run\n```\n\n----------------------------------------\n\nTITLE: Changing Package ID in Android Gradle File - diff\nDESCRIPTION: Shows how to modify the application package (Application ID) in the 'android/app/build.gradle' configuration by editing the 'applicationId' attribute. No dependencies are required beyond a standard Capacitor+Android project. This change alters the namespace used by the Android system for identification and deployment; it is crucial for unique app identification on devices and in stores.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndefaultConfig {\\n-       applicationId \\\"com.capacitorjs.app\\\"\\n+       applicationId \\\"com.mycompany.myapp\\\"\n```\n\n----------------------------------------\n\nTITLE: Adding an Accelerometer Listener\nDESCRIPTION: API definition for adding a listener for accelerometer data. This method returns a PluginListenerHandle that can be used to remove the listener later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/motion.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen Plugin in JSON\nDESCRIPTION: Example of configuring the Splash Screen plugin in capacitor.config.json, including various options like duration, colors, and styles.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"SplashScreen\": {\n      \"launchShowDuration\": 3000,\n      \"launchAutoHide\": true,\n      \"launchFadeOutDuration\": 3000,\n      \"backgroundColor\": \"#ffffffff\",\n      \"androidSplashResourceName\": \"splash\",\n      \"androidScaleType\": \"CENTER_CROP\",\n      \"showSpinner\": true,\n      \"androidSpinnerStyle\": \"large\",\n      \"iosSpinnerStyle\": \"small\",\n      \"spinnerColor\": \"#999999\",\n      \"splashFullScreen\": true,\n      \"splashImmersive\": true,\n      \"layoutName\": \"launch_screen\",\n      \"useDialog\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Platforms\nDESCRIPTION: Command sequence for installing and configuring Capacitor with iOS and Android platforms. Includes building the project, installing platform dependencies, adding platforms, and syncing the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Declaring Location Permissions in AndroidManifest.xml\nDESCRIPTION: Shows the `<uses-permission>` tags required in `AndroidManifest.xml` to grant the application access to coarse (`ACCESS_COARSE_LOCATION`) and fine (`ACCESS_FINE_LOCATION`) location data. These permissions are necessary for features like displaying the user's current location on the map on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Taking a Picture with Camera Capacitor Plugin in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to use the Camera.getPhoto() method to take a picture or select one from the gallery.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera, CameraResultType } from '@capacitor/camera';\n\nconst takePicture = async () => {\n  const image = await Camera.getPhoto({\n    quality: 90,\n    allowEditing: true,\n    resultType: CameraResultType.Uri\n  });\n\n  // image.webPath will contain a path that can be set as an image src.\n  // You can access the original file using image.path, which can be\n  // passed to the Filesystem API to read the raw data of the image,\n  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n  var imageUrl = image.webPath;\n\n  // Can be set to the src of an image now\n  imageElement.src = imageUrl;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Current Position with Geolocation API\nDESCRIPTION: TypeScript method to retrieve the current GPS location of the device with optional configuration parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Copying Assets to Native Platforms (Bash)\nDESCRIPTION: Rebuilds the Ionic web assets using `ionic build` and then copies these updated assets to the native platform directories (iOS/Android) using `npx cap copy`. This sequence ensures that the native projects reflect the latest changes made in the web portion of the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Interacting with the Google Map Instance (TypeScript)\nDESCRIPTION: Shows various interactions with the created map instance (`newMap`), including adding markers, programmatically moving the map's camera, enabling marker clustering, setting marker click listeners, and destroying the map instance to clean up resources.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst newMap = await GoogleMap.create({...});\n\n// Add a marker to the map\nconst markerId = await newMap.addMarker({\n  coordinate: {\n    lat: 33.6,\n    lng: -117.9\n  }\n});\n\n// Move the map programmatically\nawait newMap.setCamera({\n  coordinate: {\n    lat: 33.6,\n    lng: -117.9\n  }\n});\n\n// Enable marker clustering\nawait newMap.enableClustering();\n\n// Handle marker click\nawait newMap.setOnMarkerClickListener((event) => {...});\n\n// Clean up map reference\nawait newMap.destroy();\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration\nDESCRIPTION: Command to initialize Capacitor configuration by setting app name and package ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n? App name: CapApp\n? App Package ID: com.mydomain.myappname\n```\n\n----------------------------------------\n\nTITLE: Returning Data from a Capacitor Plugin Method\nDESCRIPTION: This example shows how to return data back to JavaScript from a plugin method using the resolve() method, which accepts a dictionary of JSON-serializable data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ncall.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])\n```\n\n----------------------------------------\n\nTITLE: Adding Restored Plugin Result Listener with Capacitor in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for adding a listener to handle cases where the app is launched or restored with previously persisted plugin call data. Dependencies include a properly configured Capacitor project and relevant plugins (such as Camera). The function takes an event name and a listener function specific to restored data, and returns a promise that resolves to a plugin listener handle. Input parameters are the event name ('appRestoredResult') and a callback; on success, it delivers any restored result to the listener, allowing UI or state restoration. This is especially important for Android apps using plugins that open external activities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'appRestoredResult', listenerFunc: RestoredListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Performing Text-to-Speech with speak() in TypeScript\nDESCRIPTION: Defines the `speak()` method signature for text-to-speech functionality. It accepts a `SpeakOptions` object (containing the text `value` and optional `language`) and returns a Promise that resolves when speaking is complete. This method only functions if a screen reader is active. On the web, browser support for the SpeechSynthesis API is required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/screen-reader.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nspeak(options: SpeakOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Keyboard Plugin with npm\nDESCRIPTION: Commands to install the @capacitor/keyboard plugin and sync the project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/keyboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Notification Service Extension with Firebase\nDESCRIPTION: Custom implementation of the UNNotificationServiceExtension that uses Firebase Messaging to handle rich push notifications with images. It replaces the default NotificationService.swift file to enable image display in iOS push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport UserNotifications\nimport FirebaseMessaging\n\nclass NotificationService: UNNotificationServiceExtension {\n    var contentHandler: ((UNNotificationContent) -> Void)?\n    var bestAttemptContent: UNMutableNotificationContent?\n\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        guard let content = request.content.mutableCopy() as? UNMutableNotificationContent else { return }\n        self.contentHandler = contentHandler\n        self.bestAttemptContent = content\n        \n        FIRMessagingExtensionHelper().populateNotificationContent(content, withContentHandler: contentHandler)\n    }\n    \n    override func serviceExtensionTimeWillExpire() {\n        guard let contentHandler = contentHandler,\n              let bestAttemptContent =  bestAttemptContent else { return }\n        \n        contentHandler(bestAttemptContent)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorCookies deleteCookie Method Signature\nDESCRIPTION: This TypeScript signature defines the `deleteCookie` method of the Capacitor Cookies API. It takes a `DeleteCookieOptions` object, specifying the URL (optional) and the key of the cookie to remove, and returns a Promise that resolves upon deletion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteCookie(options: DeleteCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Android variables.gradle for Capacitor 3\nDESCRIPTION: Diff showing necessary changes to the variables.gradle file when upgrading to Capacitor 3. This includes updating SDK targets to support Android 11 (API 30), adding new AndroidX dependencies, and updating existing dependency versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n ext {\n     minSdkVersion = 21\n-    compileSdkVersion = 29\n-    targetSdkVersion = 29\n+    compileSdkVersion = 30\n+    targetSdkVersion = 30\n+    androidxActivityVersion = '1.2.0'\n-    androidxAppCompatVersion = '1.1.0'\n+    androidxAppCompatVersion = '1.2.0'\n+    androidxCoordinatorLayoutVersion = '1.1.0'\n-    androidxCoreVersion =  '1.2.0'\n-    androidxMaterialVersion =  '1.1.0-rc02'\n-    androidxBrowserVersion =  '1.2.0'\n-    androidxLocalbroadcastmanagerVersion =  '1.0.0'\n-    androidxExifInterfaceVersion = '1.2.0'\n-    firebaseMessagingVersion =  '20.1.2'\n-    playServicesLocationVersion =  '17.0.0'\n+    androidxCoreVersion = '1.3.2'\n+    androidxFragmentVersion = '1.3.0'\n-    junitVersion =  '4.12'\n-    androidxJunitVersion =  '1.1.1'\n-    androidxEspressoCoreVersion =  '3.2.0'\n+    junitVersion = '4.13.1'\n+    androidxJunitVersion = '1.1.2'\n+    androidxEspressoCoreVersion = '3.3.0'\n     cordovaAndroidVersion = '7.0.0'\n }\n```\n\n----------------------------------------\n\nTITLE: Defining AttachmentOptions Interface in TypeScript\nDESCRIPTION: Defines the AttachmentOptions interface for specifying attachment options. It includes iOS-specific properties for UNNotificationAttachment options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AttachmentOptions {\n  iosUNNotificationAttachmentOptionsTypeHintKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailHiddenKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailClippingRectKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailTimeKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Finished Event Listener in TypeScript\nDESCRIPTION: TypeScript definition for adding a listener for the 'browserFinished' event, which fires when the browser is closed by the user.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin on the Web with JavaScript\nDESCRIPTION: This JavaScript snippet utilizes the registerPlugin function from @capacitor/core to create a JS object named Echo tied to the native plugin. This makes the native plugin methods callable from the web layer. The snippet is required to link frontend code with the native implementation. The only parameter required is the string name of the plugin which must match the native plugin registration. Outputs an object with callable plugin methods bridged to native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Android Plugin Call Persistence Methods\nDESCRIPTION: Core methods available in Android for saving, retrieving, and releasing plugin calls. These methods allow managing PluginCall objects for asynchronous operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid saveCall(PluginCall call)\nPluginCall getSavedCall(String callbackId)\nvoid releaseCall(PluginCall call)\nvoid releaseCall(String callbackId)\n```\n\n----------------------------------------\n\nTITLE: Markdown Plugin List Structure\nDESCRIPTION: Structured markdown list of official Capacitor plugins with links to their respective documentation pages. The list includes common native functionality like camera, geolocation, notifications, and device features.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/official.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Action Sheet](/apis/action-sheet.md)\n- [App](/apis/app.md)\n- [App Launcher](/apis/app-launcher.md)\n- [Browser](/apis/browser.md)\n- [Camera](/apis/camera.md)\n- [Clipboard](/apis/clipboard.md)\n- [Cookies](/apis/cookies.md)\n- [Device](/apis/device.md)\n- [Dialog](/apis/dialog.md)\n- [Filesystem](/apis/filesystem.md)\n- [Geolocation](/apis/geolocation.md)\n- [Google Maps](/apis/google-maps.md)\n- [Haptics](/apis/haptics.md)\n- [Http](/apis/http.md)\n- [Keyboard](/apis/keyboard.md)\n- [Local Notifications](/apis/local-notifications.md)\n- [Motion](/apis/motion.md)\n- [Network](/apis/network.md)\n- [Preferences](/apis/preferences.md)\n- [Push Notifications](/apis/push-notifications.md)\n- [Screen Reader](/apis/screen-reader.md)\n- [Share](/apis/share.md)\n- [Splash Screen](/apis/splash-screen.md)\n- [Status Bar](/apis/status-bar.md)\n- [Text Zoom](/apis/text-zoom.md)\n- [Toast](/apis/toast.md)\n```\n\n----------------------------------------\n\nTITLE: Importing Deep Link Listener in React App\nDESCRIPTION: Code for importing the AppUrlListener component in a React application. This shows where to import the component in the main App component file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AppUrlListener from './pages/AppUrlListener';\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor in the Project (Bash)\nDESCRIPTION: Initializes Capacitor within the current project using the `npx cap init` command. This command executes the locally installed Capacitor CLI, which guides the user through a setup questionnaire to configure the app name, package ID, and create the initial Capacitor configuration file (`capacitor.config.json` or similar).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Platforms\nDESCRIPTION: Commands to add iOS and Android platforms to a Capacitor application and synchronize dependencies. This includes building the project, installing platform-specific packages, and initializing the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Deep Linking with React and Capacitor - TypeScript\nDESCRIPTION: Imports necessary hooks and APIs including React's useEffect, React Router's useHistory, and Capacitor's App and URLOpenListenerEvent. Required to set up deep link routing within a React-based Capacitor application. All dependencies must be installed and available in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n```\n\n----------------------------------------\n\nTITLE: Implementing the load() Method for Capacitor Plugin Initialization\nDESCRIPTION: Shows how to run code when a plugin is first loaded by overriding the load() method, which is useful for setting up event handlers or initializing resources.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating Supported Barcode Formats (TypeScript)\nDESCRIPTION: The `Html5QrcodeSupportedFormats` enum lists various barcode formats supported by the underlying HTML5 QR code scanning library, mapping format names to numeric values. These values can be used in the `hint` option of `CapacitorBarcodeScannerOptions`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenum Html5QrcodeSupportedFormats {\n    QR_CODE = 0,\n    AZTEC = 1,\n    CODABAR = 2,\n    CODE_39 = 3,\n    CODE_93 = 4,\n    CODE_128 = 5,\n    DATA_MATRIX = 6,\n    MAXICODE = 7,\n    ITF = 8,\n    EAN_13 = 9,\n    EAN_8 = 10,\n    PDF_417 = 11,\n    RSS_14 = 12,\n    RSS_EXPANDED = 13,\n    UPC_A = 14,\n    UPC_E = 15,\n    UPC_EAN_EXTENSION = 16\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Click Listener in Google Maps\nDESCRIPTION: Method to set up a callback for marker click events. Takes an optional callback function that receives MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting App Info with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet details the getInfo() method, which returns a Promise resolving to app information such as name, package ID, and version. Dependencies: Capacitor App plugin. Input: none. Output: Promise<AppInfo> object with app metadata. Available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<AppInfo>\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Method in Android (Java)\nDESCRIPTION: This Java code snippet demonstrates how to implement a Capacitor plugin method (`method1`) on Android that returns no data. The `@PluginMethod` annotation with `returnType = PluginMethod.RETURN_NONE` specifies that the promise associated with this method call should resolve without any value. The method itself takes a `PluginCall` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_NONE)\npublic void method1(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 3 CLI and Core Packages\nDESCRIPTION: Command to update the Capacitor CLI and Core packages to the latest version 3 using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@latest-3 @capacitor/core@latest-3\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Screen Reader Plugin\nDESCRIPTION: Installs the `@capacitor/screen-reader` npm package and synchronizes the native project dependencies using the Capacitor CLI. This step is required to use the plugin in a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-reader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-reader\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Migration CLI Command\nDESCRIPTION: Execute the Capacitor CLI migration command to automatically handle the migration process from version 4 to 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Plugin Call with an Error - Swift\nDESCRIPTION: This snippet demonstrates error propagation in a Capacitor plugin by rejecting a CAPPluginCall. It supplies an error message, an optional code, and passes the system Error object for debugging. It is meant to be used in scenarios where native processing fails or required parameters are missing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ncall.reject(error.localizedDescription, nil, error)\n```\n\n----------------------------------------\n\nTITLE: Showing the Splash Screen with Options Using Capacitor (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows the method signature for the show operation provided by the Capacitor Splash Screen plugin. It accepts optional ShowOptions (such as autoHide, fadeInDuration, fadeOutDuration, and showDuration) and returns a Promise resolving to void. Dependencies include the Capacitor runtime and the Splash Screen plugin. Inputs are the options object, and expected output is a Promise indicating the operation's completion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: ShowOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Capacitor Camera API: checkPermissions Method Signature\nDESCRIPTION: TypeScript signature for the `checkPermissions` method. This function checks the current permission status for accessing the camera and photo album without prompting the user. It returns a Promise resolving to a `PermissionStatus` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Using Manifest Placeholders in AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet demonstrates how to use the displayName placeholder within AndroidManifest.xml for both the application and activity labels. When building for specific product flavors, Gradle replaces ${displayName} with the value defined in manifestPlaceholders for that flavor, allowing dynamic app naming.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  ...snip...\n  android:label=\"${displayName}\">\n\n  <activity\n    ...snip...\n    android:label=\"${displayName}\">\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Open Listener Type Alias in Capacitor (TypeScript)\nDESCRIPTION: Defines the TypeScript type alias `URLOpenListener`. This type represents a function designed to handle events when the app is opened via a custom URL scheme. The function receives a single argument `event` of type `URLOpenListenerEvent` containing details about the URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype URLOpenListener = (event: URLOpenListenerEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Mocking and Spying on Storage Plugin Methods Using Jest - TypeScript\nDESCRIPTION: This pair of test cases shows how to use Jest's mocking utilities to stub and spy on Capacitor Storage plugin methods in a TypeScript test file. Dependencies include Jest and the manual Storage mock. The first test overwrites Storage.get to conditionally return different values based on the input key, while assertions confirm expected behavior. The second test mocks Storage.clear and verifies it is called once in response to a UI trigger. Inputs replicate component usage; outputs are test result assertions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/mocking-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    Storage.get = jest.fn().mockImplementation(\n      async (data: { key: string }): Promise<{ value: string }> => {\n        return data.key === \"firstName\"\n          ? { value: \"Jimmy\" }\n          : data.key === \"lastName\"\n          ? { value: \"Simms\" }\n          : { value: \"unknown\" };\n      }\n    );\n    const w = mount(Home);\n    await flushPromises();\n    expect(w.vm.firstName).toEqual(\"Jimmy\");\n    expect(w.vm.lastName).toEqual(\"Simms\");\n  });\n\n  it(\"clears the storage\", () => {\n    const button = wrapper.findComponent('[data-testid=\"clear\"]');\n    Storage.clear = jest.fn().mockResolvedValue(undefined);\n    button.trigger(\"click\");\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Embedding the Capacitor Google Maps Web Component in HTML\nDESCRIPTION: Demonstrates the usage of the `<capacitor-google-map>` custom HTML element provided by the plugin. An `id` attribute is added (`id=\"map\"`) to allow easy selection of this element via JavaScript/TypeScript when creating the map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<capacitor-google-map id=\"map\"></capacitor-google-map>\n```\n\n----------------------------------------\n\nTITLE: Showing the Status Bar (TypeScript API)\nDESCRIPTION: This TypeScript signature defines the `show` method for making the status bar visible. It optionally accepts `AnimationOptions` to control the transition animation (iOS only, default is Fade). It returns a Promise that resolves when the operation is complete. Note potential animation glitch on iOS first show.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening a Page with Capacitor Browser in TypeScript\nDESCRIPTION: TypeScript definition for the open() method, which opens a page with specified options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopen(options: OpenOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Cordova Plugin\nDESCRIPTION: Commands to uninstall a Cordova plugin and sync changes with Capacitor\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Keyboard Hide Event Listener Definition in TypeScript\nDESCRIPTION: Defines an event listener method for detecting when the keyboard is hidden. Returns a promise resolving to a PluginListenerHandle. Note that on Android, keyboardWillHide and keyboardDidHide events fire almost simultaneously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Adding Registration Event Listener in Capacitor\nDESCRIPTION: Add a listener for the 'registration' event, which is called when push notification registration finishes successfully.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registration', listenerFunc: (token: Token) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Location Permissions (XML)\nDESCRIPTION: Adds necessary location permissions (ACCESS_COARSE_LOCATION and ACCESS_FINE_LOCATION) to the AndroidManifest.xml file. These permissions are required by the SDK for location features.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Check Push Notification Permissions - TypeScript\nDESCRIPTION: Checks permission status for receiving push notifications. Returns PermissionStatus object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Date Time Interface Documentation\nDESCRIPTION: TypeScript interface definitions for various date and time manipulation methods including UTC and local time operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nsetUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\nsetDate(date: number): number;\nsetUTCDate(date: number): number;\nsetMonth(month: number, date?: number): number;\nsetUTCMonth(month: number, date?: number): number;\nsetFullYear(year: number, month?: number, date?: number): number;\nsetUTCFullYear(year: number, month?: number, date?: number): number;\ntoUTCString(): string;\ntoISOString(): string;\ntoJSON(key?: any): string;\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Core in TypeScript\nDESCRIPTION: Demonstrates how to import the Capacitor object from the core library to access utility functions in a modern JavaScript application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Updating Swift Version in podspec\nDESCRIPTION: Shows how to change the Swift version from 4.2 to 5.1 in the podspec file for correct compilation with Capacitor 3. Follows project-wide Swift version changes. No direct inputs/outputs; necessary for language compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-s.swift_version = '4.2'\n+s.swift_version = '5.1'\n```\n\n----------------------------------------\n\nTITLE: Haptics Vibrate Method Signature - TypeScript\nDESCRIPTION: Exposes the vibrate function signature, which causes the device to vibrate for a specified duration if given. Accepts optional VibrateOptions with a duration parameter. Returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvibrate(options?: VibrateOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notification Presentation Options in capacitor.config.ts\nDESCRIPTION: This TypeScript snippet demonstrates configuring `presentationOptions` for the Push Notifications plugin within a `capacitor.config.ts` file. It utilizes Capacitor's typed configuration, specifying options like 'badge', 'sound', and 'alert' for foreground notification display.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/push-notifications\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    PushNotifications: {\n      presentationOptions: [\"badge\", \"sound\", \"alert\"],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project Manually\nDESCRIPTION: Alternative command to manually open the iOS project workspace in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/App/App.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Channel (Android) - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This function signature for 'createChannel' is used to create a custom notification channel, a requirement on Android for customizing notifications. Accepts a Channel object, returns a void Promise. Only available on Android and depends on the Channel type definition.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing New Method in TypeScript Interface for Capacitor Plugin\nDESCRIPTION: This snippet demonstrates how to add a new method signature to the plugin's TypeScript interface in the definitions file. It includes adding the 'openMap' method and defining an interface for its parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  openMap(options: OpenMapOptions): Promise<void>;\n}\n\nexport interface OpenMapOptions {\n  latitude: number;\n  longitude: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the removeAllListeners Method (TypeScript)\nDESCRIPTION: Provides the TypeScript type signature for the `removeAllListeners` method. This method is used to remove all event listeners previously attached to the Capacitor Local Notifications plugin instance. It returns a Promise that resolves when all listeners have been successfully removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing requestPermissions() for Multiple Permissions\nDESCRIPTION: Shows how to implement requestPermissions() to handle multiple permission types using a DispatchGroup to synchronize multiple asynchronous permission requests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet store = CNContactStore()\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    // get the permissions to check or default to all of them\n    var permissions = call.getArray(\"types\", String.self) ?? []\n    if permissions.isEmpty {\n        permissions = [\"contacts\", \"camera\"]\n    }\n\n    let group = DispatchGroup()\n    if permissions.contains(\"contacts\") {\n        group.enter()\n        store.requestAccess(for: .contacts) { (_, _) in\n            group.leave()\n        }\n    }\n    if permissions.contains(\"camera\") {\n        group.enter()\n        AVCaptureDevice.requestAccess(for: .video) { _ in\n            group.leave()\n        }\n    }\n    group.notify(queue: DispatchQueue.main) {\n        self.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the CapacitorConfig interface, which includes various configuration options for Capacitor apps. It covers general settings like appId and appName, as well as platform-specific configurations for Android and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CapacitorConfig {\n  /**\n   * The unique identifier of your packaged app.\n   *\n   * This is also known as the Bundle ID in iOS and the Application ID in\n   * Android. It must be in reverse domain name notation, generally\n   * representing a domain name that you or your company owns.\n   *\n   * @since 1.0.0\n   */\n  appId?: string;\n\n  /**\n   * The human-friendly name of your app.\n   *\n   * This should be what you'd see in the App Store, but can be changed after\n   * within each native platform after it is generated.\n   *\n   * @since 1.0.0\n   */\n  appName?: string;\n\n  /**\n   * The directory of your compiled web assets.\n   *\n   * This directory should contain the final `index.html` of your app.\n   *\n   * @since 1.0.0\n   */\n  webDir?: string;\n\n  /**\n   * Whether to copy the Capacitor runtime bundle or not.\n   *\n   * If your app is not using a bundler, set this to `true`, then Capacitor\n   * will create a `capacitor.js` file that you'll need to add as a script in\n   * your `index.html` file.\n   *\n   * It's deprecated and will be removed in Capacitor 6\n   *\n   * @since 1.0.0\n   * @deprecated 5.0.0\n   * @default false\n   */\n  bundledWebRuntime?: boolean;\n\n  /**\n   * The build configuration (as defined by the native app) under which Capacitor\n   * will send statements to the log system. This applies to log statements in\n   * native code as well as statements redirected from JavaScript (`console.debug`,\n   * `console.error`, etc.). Enabling logging will let statements render in the\n   * Xcode and Android Studio windows but can leak information on device if enabled\n   * in released builds.\n   *\n   * 'none' = logs are never produced\n   * 'debug' = logs are produced in debug builds but not production builds\n   * 'production' = logs are always produced\n   *\n   * @since 3.0.0\n   * @default debug\n   */\n  loggingBehavior?: 'none' | 'debug' | 'production';\n\n  /**\n   * User agent of Capacitor Web View.\n   *\n   * @since 1.4.0\n   */\n  overrideUserAgent?: string;\n\n  /**\n   * String to append to the original user agent of Capacitor Web View.\n   *\n   * This is disregarded if `overrideUserAgent` is used.\n   *\n   * @since 1.4.0\n   */\n  appendUserAgent?: string;\n\n  /**\n   * Background color of the Capacitor Web View.\n   *\n   * @since 1.1.0\n   */\n  backgroundColor?: string;\n\n  /**\n   * Enable zooming within the Capacitor Web View.\n   *\n   * @default false\n   * @since 6.0.0\n   */\n  zoomEnabled?: boolean;\n\n  android?: {\n    /**\n     * Specify a custom path to the native Android project.\n     *\n     * @since 3.0.0\n     * @default android\n     */\n    path?: string;\n\n    /**\n     * User agent of Capacitor Web View on Android.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for Android.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for Android.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable zooming within the Capacitor Web View for Android.\n     *\n     * @default false\n     * @since 6.0.0\n     */\n    zoomEnabled?: boolean;\n\n    /**\n     * Enable mixed content in the Capacitor Web View for Android.\n     *\n     * [Mixed\n     * content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content)\n     * is disabled by default for security. During development, you may need to\n     * enable it to allow the Web View to load files from different schemes.\n     *\n     * **This is not intended for use in production.**\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    allowMixedContent?: boolean;\n\n    /**\n     * This enables a simpler keyboard which may have some limitations.\n     *\n     * This will capture JS keys using an alternative\n     * [`InputConnection`](https://developer.android.com/reference/android/view/inputmethod/InputConnection).\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    captureInput?: boolean;\n\n    /**\n     * Always enable debuggable web content.\n     *\n     * This is automatically enabled during development.\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    webContentsDebuggingEnabled?: boolean;\n\n    /**\n     * The build configuration under which Capacitor will generate logs on Android.\n     *\n     * Overrides global `loggingBehavior` option.\n     *\n     * @since 3.0.0\n     * @default debug\n     */\n    loggingBehavior?: 'none' | 'debug' | 'production';\n\n    /**\n     * Allowlist of plugins to include during `npx cap sync` for Android.\n     *\n     * Overrides global `includePlugins` option.\n     *\n     * @since 3.0.0\n     */\n    includePlugins?: string[];\n\n    /**\n     * Android flavor to use.\n     *\n     * If the app has flavors declared in the `build.gradle`\n     * configure the flavor you want to run with `npx cap run` command.\n     *\n     * @since 3.1.0\n     */\n    flavor?: string;\n\n    /**\n     * Whether to give the webview initial focus.\n     *\n     * @since 3.5.1\n     * @default true\n     */\n    initialFocus?: boolean;\n\n    /**\n     * The minimum supported webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `55`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.0.0\n     * @default 60\n     */\n    minWebViewVersion?: number;\n\n    /**\n     * The minimum supported Huawei webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `10`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.6.4\n     * @default 10\n     */\n    minHuaweiWebViewVersion?: number;\n\n    buildOptions?: {\n      /**\n       * Path to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePath?: string;\n\n      /**\n       * Password to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePassword?: string;\n\n      /**\n       * Alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAlias?: string;\n\n      /**\n       * Password for the alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAliasPassword?: string;\n\n      /**\n       * Bundle type for your release build\n       *\n       * @since 4.4.0\n       * @default \"AAB\"\n       */\n      releaseType?: 'AAB' | 'APK';\n\n      /**\n       * Program to sign your build with\n       *\n       * @since 5.1.0\n       * @default \"jarsigner\"\n       */\n      signingType?: 'apksigner' | 'jarsigner';\n    };\n\n    /**\n     * Use legacy [addJavascriptInterface](https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String))\n     * instead of the new and more secure [addWebMessageListener](https://developer.android.com/reference/androidx/webkit/WebViewCompat#addWebMessageListener(android.webkit.WebView,java.lang.String,java.util.Set%3Cjava.lang.String%3E,androidx.webkit.WebViewCompat.WebMessageListener))\n     *\n     * @since 4.5.0\n     * @default false\n     */\n    useLegacyBridge?: boolean;\n  };\n\n  ios?: {\n    /**\n     * Specify a custom path to the native iOS project.\n     *\n     * @since 3.0.0\n     * @default ios\n     */\n    path?: string;\n\n    /**\n     * iOS build scheme to use.\n     *\n     * Usually this matches your app's target in Xcode. You can use the\n     * following command to list schemes:\n     *\n     * ```shell\n     * xcodebuild -workspace ios/App/App.xcworkspace -list\n     * ```\n     *\n     * @since 3.0.0\n     * @default App\n     */\n    scheme?: string;\n\n    /**\n     * User agent of Capacitor Web View on iOS.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for iOS.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for iOS.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable zooming within the Capacitor Web View for iOS.\n     *\n     * @default false\n     * @since 6.0.0\n     */\n    zoomEnabled?: boolean;\n\n    /**\n     * Configure the scroll view's content inset adjustment behavior.\n     *\n     * This will set the\n     * [`contentInsetAdjustmentBehavior`](https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 2.0.0\n     * @default never\n     */\n    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';\n\n    /**\n     * Configure whether the scroll view is scrollable.\n     *\n     * This will set the\n     * [`isScrollEnabled`](https://developer.apple.com/documentation/uikit/uiscrollview/1619395-isscrollenabled)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n\n```\n\n----------------------------------------\n\nTITLE: Passing Null Values in TypeScript Object\nDESCRIPTION: Example of an object with null values being passed to a Capacitor plugin call. Demonstrates how null values are represented in arrays and as object properties.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ 'foo': null, 'bar': [1, 2, null, 4]}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platforms\nDESCRIPTION: Commands to add iOS and Android platforms to the Capacitor project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Device ID Method Definition\nDESCRIPTION: TypeScript method definition for getting unique device identifier\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetId() => Promise<DeviceId>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Date Stringification in Capacitor Plugin (Swift)\nDESCRIPTION: This Swift snippet shows how to opt-out of Capacitor 3.0+'s default behavior of serializing JavaScript `Date` objects into ISO 8601 strings when passing them to native iOS code. By setting `shouldStringifyDatesInCalls` to `false` within the plugin's `load()` method, the plugin will receive native `Date` objects directly from `WKWebView` instead of strings. The `getDate` accessor on `CAPPluginCall` can handle both native `Date` objects and date strings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n```swift\noverride func load() {\n    shouldStringifyDatesInCalls = false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: appendFile API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `appendFile` method of the Capacitor Filesystem API. This asynchronous function appends data to an existing file on disk based on the provided `AppendFileOptions` and returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nappendFile(options: AppendFileOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Watch Data Variables (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to maintain a state object (`stateData`) and update variables displayed on the watch UI. The `counterIncrement` function increments a counter and then calls `Watch.updateWatchData`, passing the state object (with stringified values) to update the corresponding variable (`$number`) on the watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvar stateData = {\n  number: 0\n}\n\nasync function counterIncrement() {\n  stateData.counter++  \n  await Watch.updateWatchData({\"data\": convertValuesOfObjectToStringValues(stateData)})\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Background Task in iOS AppDelegate\nDESCRIPTION: Configuring the iOS AppDelegate to register and handle background tasks by adding initialization code in the application launch method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    // ....\n    BackgroundRunnerPlugin.registerBackgroundTask()\n    BackgroundRunnerPlugin.handleApplicationDidFinishLaunching(launchOptions: launchOptions)\n    // ....\n\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Keyboard Event Listeners - Capacitor - TypeScript\nDESCRIPTION: Defines a method to remove all native listeners associated with the keyboard plugin. This is used to ensure that no event handlers remain registered, which is important for resource cleanup or resetting event subscriptions. The function requires no input parameters and returns a Promise resolving to void. No additional dependencies beyond the Capacitor plugin system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting Preferred Text Zoom Level\nDESCRIPTION: TypeScript method to retrieve the preferred text zoom level from the system settings, returning a promise with the preferred zoom value as a decimal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/text-zoom.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreferred() => Promise<GetPreferredResult>\n```\n\n----------------------------------------\n\nTITLE: Navigation Path for Device Testing\nDESCRIPTION: Menu navigation paths to run the application on iOS or Android devices through the VS Code extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/3-build-and-run.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nRun > iOS\nRun > Android\n```\n\n----------------------------------------\n\nTITLE: Defining Push Notification Token Structure - TypeScript\nDESCRIPTION: Describes the format of the device token structure for push notifications, containing a platform-specific token string. Used for registration and receipt of remote notifications. No external dependencies required. The 'value' parameter is the token string for APNS (iOS) or FCM (Android).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Token {\n  value: string; // APNS (iOS) or FCM (Android) token\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Capacitor Development Server\nDESCRIPTION: Bash command to start the Capacitor development server with HTML5 routing support. This is useful for projects not using a framework.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap serve\n```\n\n----------------------------------------\n\nTITLE: Android Activity Result Callback Update\nDESCRIPTION: Demonstrates migration from request codes to the new ActivityCallback annotation pattern for handling activity results.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-static final int IMAGE_REQUEST = 10052;\n\n @PluginMethod\n public void chooseImage(PluginCall call) {\n     Intent intent = new Intent(Intent.ACTION_PICK);\n     intent.setType(\"image/*\");\n-    startActivityForResult(call, intent, IMAGE_REQUEST);\n+    startActivityForResult(call, intent, \"chooseImageResult\");\n }\n\n+@ActivityCallback\n+private void chooseImageResult(PluginCall call, ActivityResult result) {\n+    if (result.getResultCode() == Activity.RESULT_CANCELED) {\n+        call.reject(\"Activity canceled\");\n+    } else {\n+        Intent data = result.getData();\n+        // do something with the result data\n+        call.resolve(\"Success!\");\n+    }\n+}\n```\n\n----------------------------------------\n\nTITLE: Installing Privacy Screen Plugin with npm and Capacitor\nDESCRIPTION: Commands to install the @capacitor/privacy-screen plugin and synchronize the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/privacy-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/privacy-screen\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Creating Apple App Site Association File\nDESCRIPTION: JSON configuration for the Apple App Site Association file, which is required for Universal Links on iOS. It specifies the app ID and allowed paths for deep linking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CallbackID Type Alias in TypeScript\nDESCRIPTION: Defines the `CallbackID` type alias in TypeScript simply as a `string`. This type represents the unique identifier returned when registering a callback listener (like `watchPosition`), which can later be used to clear or remove the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Referencing Plugin Types and Full Plugin Configuration - TypeScript\nDESCRIPTION: This snippet demonstrates how to import CapacitorConfig and reference a plugin's type definitions to enable IDE auto-completion and type-checking for your plugin settings. The configuration is exported as the default object for use by Capacitor's build tools and runtime, and could include any settings required by your app or plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor-community/my-cool-plugin\" />\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: \"com.company.app\",\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: \"#034821\"\n    }\n  }\n}\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Core and CLI Dependencies using npm\nDESCRIPTION: This command updates the Capacitor Command Line Interface (CLI) and Core libraries to version 2 using npm. These are the fundamental packages required for any Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@2 @capacitor/core@2\n```\n\n----------------------------------------\n\nTITLE: Installing Device Capacitor Plugin\nDESCRIPTION: Commands to install the latest version of the @capacitor/device plugin and sync the native project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/device@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Creating Photo Albums in TypeScript\nDESCRIPTION: Method to create a new album in the user's photo library with a specified name.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/photos.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAlbum(options: PhotosCreateAlbumOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Connecting the Plugin to the Implementation Class\nDESCRIPTION: Updates to the ScreenOrientationPlugin class to initialize the implementation class and implement the orientation method to return the current orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugins.ScreenOrientation;\n\nimport com.getcapacitor.JSObject;\n/* Remaining imports omitted for brevity */\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   private ScreenOrientation implementation;\n\n   @Override\n   public void load() {\n       implementation = new ScreenOrientation(getActivity());\n   }\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       JSObject ret = new JSObject();\n       String type = implementation.getCurrentOrientationType();\n       ret.put(\"type\", type);\n       call.resolve(ret);\n   }\n\n   /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project\nDESCRIPTION: Command to initialize a new Capacitor project, which prompts for app name and ID configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView-Accessible Custom Plugin in Kotlin for Capacitor Android\nDESCRIPTION: This snippet shows how to create a custom Capacitor plugin using Kotlin. It demonstrates the structure of a plugin class with custom methods that can be accessed from the WebView.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.NativePlugin;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\n\n@NativePlugin\nclass CustomNativePlugin : Plugin() {\n\n  @PluginMethod\n  fun customCall(call: PluginCall) {\n    val message = call.getString(\"message\")\n    // More code here...\n    call.success()\n  }\n\n  @PluginMethod\n  fun customFunction(call: PluginCall) {\n    // More code here...\n    call.resolve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Android Notification Channels in Capacitor (TypeScript)\nDESCRIPTION: Retrieves a list of currently configured notification channels for the application on Android. This is only available on Android Oreo (SDK 26) and newer. Returns a Promise that resolves with a `ListChannelsResult` object containing an array of channels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: iOS Configuration Interface Definition\nDESCRIPTION: TypeScript interface defining iOS-specific configuration options including logging behavior, plugin inclusion, WKWebView settings, content mode, and notification handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nloggingBehavior?: 'none' | 'debug' | 'production';\nincludePlugins?: string[];\nlimitsNavigationsToAppBoundDomains?: boolean;\npreferredContentMode?: 'recommended' | 'desktop' | 'mobile';\nhandleApplicationNotifications?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Requesting Motion Permission and Handling Acceleration Events\nDESCRIPTION: Example of how to request permission for device motion tracking, add a listener for acceleration events, and properly clean up listeners when they're no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginListenerHandle } from '@capacitor/core';\nimport { Motion } from '@capacitor/motion';\n\n\nlet accelHandler: PluginListenerHandle;\n\nmyButton.addEventListener('click', async () => {\n  try {\n    await DeviceMotionEvent.requestPermission();\n  } catch (e) {\n    // Handle error\n    return;\n  }\n\n  // Once the user approves, can start listening:\n  accelHandler = await Motion.addListener('accel', event => {\n    console.log('Device motion event:', event);\n  });\n});\n\n// Stop the acceleration listener\nconst stopAcceleration = () => {\n  if (accelHandler) {\n    accelHandler.remove();\n  }\n};\n\n// Remove all listeners\nconst removeListeners = () => {\n  Motion.removeAllListeners();\n};\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Deployment Target in Package.swift\nDESCRIPTION: Updates the iOS deployment target to 14.0 in the Package.swift file for SPM compatible plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-    platforms: [.iOS(.v13)],\n+    platforms: [.iOS(.v14)],\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation to Landscape in TypeScript\nDESCRIPTION: Implements a button click handler to lock the screen orientation to landscape mode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/using-api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.lock({ orientation: \"landscape-primary\" })}\n```\n\n----------------------------------------\n\nTITLE: Generating and Copying iOS/Android Resources with cordova-res (Bash)\nDESCRIPTION: These commands execute the `cordova-res` tool to generate platform-specific icons and splash screens for iOS and Android. The `--skip-config` flag prevents modification of a `config.xml` file, and the `--copy` flag automatically copies the generated image assets into the respective native project directories (iOS and Android). It assumes the source images reside in the `resources` folder.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncordova-res ios --skip-config --copy\ncordova-res android --skip-config --copy\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Keyboard Plugin (Bash)\nDESCRIPTION: Installs the @capacitor/keyboard npm package and syncs the project with the native platforms using Capacitor CLI commands. Requires npm and npx.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/keyboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Clearing Position Watch with Geolocation API\nDESCRIPTION: TypeScript method to stop watching for location changes by clearing a previously set watch using its identifier.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclearWatch(options: ClearWatchOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Closing the Browser Window in TypeScript\nDESCRIPTION: TypeScript definition for the close() method, which closes an open browser window on Web and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclose() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Fixing CocoaPods ffi Bug on Apple Silicon using Bash Commands\nDESCRIPTION: This snippet provides shell commands to resolve the CocoaPods ffi installation bug on Apple Silicon Macs by forcing Ruby gems and CocoaPods to run under an x86_64 architecture using Rosetta. Prior installation of Rosetta and Ruby is required. The key parameters are 'arch -x86_64' to emulate Intel architecture and 'gem install ffi'/'pod install' to update dependencies. The commands are intended to be run once to complete ffi installation and subsequent CocoaPods management, and allow future usage of Capacitor on ARM Macs without further compatibility issues.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: MapReadyCallbackData Interface Definition\nDESCRIPTION: Interface for the callback data when map is ready to use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MapReadyCallbackData {\n  mapId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Info Window Click Listener in Google Maps\nDESCRIPTION: Method to set up a callback for info window click events on the map. Takes an optional callback function that receives MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnInfoWindowClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Project with SPM in Capacitor\nDESCRIPTION: Command to add the iOS project to Capacitor using Swift Package Manager. The '--packagemanager SPM' option specifies the use of SPM instead of CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios --packagemanager SPM\n```\n\n----------------------------------------\n\nTITLE: Splash Screen Show Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the show() method of the Splash Screen API, including options parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: ShowOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Text Zoom Level\nDESCRIPTION: TypeScript method to retrieve the current text zoom level from the web view, which returns a promise with the zoom value as a decimal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/text-zoom.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget() => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Removing All Notification Listeners in Capacitor\nDESCRIPTION: Removes all listeners associated with the Local Notifications plugin. Returns a Promise that resolves when complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Method in ScreenOrientationPlugin\nDESCRIPTION: Updates the plugin class with a load method to initialize the implementation and implements the orientation method to retrieve the current screen orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugins.ScreenOrientation;\n\nimport com.getcapacitor.JSObject;\n/* Remaining imports omitted for brevity */\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   private ScreenOrientation implementation;\n\n   @Override\n   public void load() {\n       implementation = new ScreenOrientation(getActivity());\n   }\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       JSObject ret = new JSObject();\n       String type = implementation.getCurrentOrientationType();\n       ret.put(\"type\", type);\n       call.resolve(ret);\n   }\n\n   /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova In App Purchase Plugin with npm - Shell\nDESCRIPTION: This shell snippet demonstrates how to install the cordova-plugin-purchase package and update your Capacitor project. It utilizes npm for package management and the Capacitor CLI for syncing native dependencies. Ensure that Node.js, npm, and the Capacitor CLI are installed beforehand. Run these commands in your project's root directory to prepare the environment for in-app purchase functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/in-app-purchases.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-purchase\\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element for Displaying Saved Photo\nDESCRIPTION: HTML markup for an image element that will display a photo saved by the Filesystem API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Delegate-based API in Swift for Capacitor iOS\nDESCRIPTION: Demonstrates requesting location permissions using a delegate-based API, saving and retrieving the plugin call\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nvar permissionCallID: String?\nvar locationManager: CLLocationManager?\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    if let manager = locationManager, CLLocationManager.locationServicesEnabled() {\n        if CLLocationManager.authorizationStatus() == .notDetermined {\n            bridge?.saveCall(call)\n            permissionCallID = call.callbackId\n            manager.requestWhenInUseAuthorization()\n        } else {\n            checkPermissions(call)\n        }\n    } else {\n        call.reject(\"Location services are disabled\")\n    }\n}\n\npublic func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n    if let callID = permissionCallID, let call = bridge?.getSavedCall(callID) {\n        checkPermissions(call)\n        bridge?.releaseCall(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Runner in capacitor.config.ts\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Background Runner plugin in the capacitor.config.ts file. It imports necessary types and sets up the same background task configuration as the JSON example.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/background-runner\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    BackgroundRunner: {\n      label: \"com.example.background.task\",\n      src: \"runners/background.js\",\n      event: \"myCustomEvent\",\n      repeat: true,\n      interval: 15,\n      autoStart: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Default Notification Channel\nDESCRIPTION: XML snippet to add to AndroidManifest.xml for specifying the default notification channel ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\n    android:value=\"@string/default_notification_channel_id\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Accelerometer Listener in TypeScript\nDESCRIPTION: This code snippet shows how to add a listener for accelerometer data using the Motion API in Capacitor. It demonstrates the basic usage of the addListener method for the 'accel' event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Motion } = Capacitor.Plugins;\nMotion.addListener('accel', (event) => {});\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration in an Existing Project\nDESCRIPTION: Runs the Capacitor CLI's `init` command using `npx`. This command interactively prompts for the app name and package ID, then creates the `capacitor.config.json` (or `.ts`) file, configuring the project for Capacitor, including setting the `webDir` for the web assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: API Signature for showActions Method in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `showActions` method available in the Capacitor Action Sheet plugin. This method takes one argument, `options`, of type `ShowActionsOptions`, and returns a Promise that resolves to a `ShowActionsResult` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshowActions(options: ShowActionsOptions) => Promise<ShowActionsResult>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'orientation' Event Listener Function in TypeScript\nDESCRIPTION: Provides the TypeScript function signature for `addListener` when subscribing to device orientation events. It takes the event name 'orientation' and a listener function (`OrientationListener`) as arguments, returning a Promise that resolves to a `PluginListenerHandle`. This function allows monitoring changes in the device's orientation (compass heading, etc.).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/motion.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor React Hooks\nDESCRIPTION: Command to install the Capacitor community React hooks package which enables simplified access to native mobile APIs in React function components.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/react-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/react-hooks\n```\n\n----------------------------------------\n\nTITLE: iOS AppDelegate Configuration for Screen Orientation Lock\nDESCRIPTION: Swift code to add to AppDelegate.swift for applying screen orientation locks to all View Controllers, not just the Capacitor View Controller.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications with Capacitor API\nDESCRIPTION: API method definition for `register()`. This asynchronous function registers the application with the native push notification system (APNS or FCM). It triggers the 'registration' event with the device token upon success or 'registrationError' on failure. Note that this method does not request user permissions; `requestPermissions()` should be called first if needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregister() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Scheme in Capacitor Config - TypeScript\nDESCRIPTION: This TypeScript snippet sets the iOS scheme property in the Capacitor config, instructing Capacitor CLI which Xcode scheme to use when building or running the app for iOS. This property should be set within the exported configuration object (capacitor.config.ts), and the value should match the desired scheme defined in Xcode targets. Use this to distinguish builds across multiple iOS schemes such as QA and default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nios: {\n  scheme: 'App QA',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions Array in @CapacitorPlugin Annotation (Diff Format)\nDESCRIPTION: This diff snippet shows how to update the @CapacitorPlugin annotation to include an array of @Permission annotations for specifying required Android permissions. Each permission must have an alias and a corresponding array of Android permission strings, allowing plugin functionality to declare individualized permission requirements. Requires knowledge of Android permissions and familiarity with Java annotations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n @CapacitorPlugin(\\n     name = \"FooBar\",\\n+    permissions = {\\n+        @Permission(\\n+            alias = \"camera\",\\n+            strings = { Manifest.permission.CAMERA }\\n+        ),\\n+        @Permission(\\n+            alias = \"storage\",\\n+            strings = {\\n+                Manifest.permission.READ_EXTERNAL_STORAGE,\\n+                Manifest.permission.WRITE_EXTERNAL_STORAGE\\n+            }\\n+        )\\n+    }\\n )\\n public class FooBarPlugin extends Plugin {\\n     ...\n```\n\n----------------------------------------\n\nTITLE: Listening to Map Bounds Changes - TypeScript\nDESCRIPTION: Registers an optional callback to react to map bounds changes. The callback, if provided, is of type MapListenerCallback tied to CameraIdleCallbackData. The method is asynchronous and returns a void Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnBoundsChangedListener(callback?: MapListenerCallback<CameraIdleCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Sync Command using Bash\nDESCRIPTION: This command demonstrates the syntax for running the Capacitor `sync` operation using npx. It effectively combines the `copy` and `update` commands. The command optionally accepts a target platform (`android` or `ios`) and specific options like `--deployment` or `--inline` to modify its behavior. Requires the Capacitor CLI to be installed and accessible via npx.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync [options] [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in React\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a React application's index file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/pwa-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Call the element loader after the app has been rendered the first time\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard hide() Method Signature\nDESCRIPTION: Defines the `hide()` method of the Keyboard API, used to programmatically hide the keyboard. It returns a Promise that resolves upon completion. This method is available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhide() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Action Types for Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript method signature declares 'registerActionTypes', enabling the definition of actions that users can take when notifications are displayed. Accepts a RegisterActionTypesOptions parameter. Available only on iOS and Android platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregisterActionTypes(options: RegisterActionTypesOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/toast via npm and Capacitor CLI (bash)\nDESCRIPTION: Demonstrates the commands required to install the @capacitor/toast plugin using npm and synchronize it with Capacitor projects using the Capacitor CLI. The first command installs the package, and the second ensures it is synced across all platform projects. These commands are essential prerequisites before using the plugin in a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/toast\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Opening a URL with @capacitor/browser in TypeScript\nDESCRIPTION: Example of how to use the Browser.open() method to open a URL in the in-app browser.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browser } from '@capacitor/browser';\n\nconst openCapacitorSite = async () => {\n  await Browser.open({ url: 'http://capacitorjs.com/' });\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Storage Keys in TypeScript\nDESCRIPTION: This snippet contains the TypeScript signature for keys, a method returning a Promise with an object listing all known keys in storage. No inputs are required. The output is a KeysResult object whose 'keys' property is a string array. Requires the @capacitor/storage dependency.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkeys() => Promise<KeysResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Watch Plugin via npm\nDESCRIPTION: Commands to install the Capacitor Watch plugin, synchronize the project, and open Xcode for configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/watch\nnpx cap sync\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Verifying Capacitor Plugin Code\nDESCRIPTION: Command to verify the ported plugin code and ensure there are no issues after moving the code from the Capacitor application to the plugin project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Background Runner Event Dispatch Implementation\nDESCRIPTION: TypeScript interface showing the dispatchEvent method implementation for dispatching events to configured runners with generic type support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndispatchEvent<T = void>(options: DispatchEventOptions) => any\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Config Values on Android - Java\nDESCRIPTION: This Java snippet illustrates fetching the 'style' configuration value from a Capacitor plugin's settings on Android. Using getConfig().getString(), it checks if the style exists and conditionally executes logic if the value is provided. Relies on Capacitor's Android native plugin infrastructure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString style = getConfig().getString(\"style\");\nif(style) {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App State and URL Handling in Capacitor\nDESCRIPTION: Example showing how to use App API to handle app state changes, URL opening, launch URLs and app restoration. Demonstrates listening for state changes, URL opening events, and handling restored states particularly important for Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/app.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins, AppState } from '@capacitor/core';\n\nconst { App } = Plugins;\n\nApp.addListener('appStateChange', (state: AppState) => {\n  // state.isActive contains the active state\n  console.log('App state changed. Is active?', state.isActive);\n});\n\nvar ret = await App.canOpenUrl({ url: 'com.getcapacitor.myapp' });\nconsole.log('Can open url: ', ret.value);\n\nret = await App.openUrl({\n  url: 'com.getcapacitor.myapp://page?id=ionicframework',\n});\nconsole.log('Open url response: ', ret);\n\nret = await App.getLaunchUrl();\nif (ret && ret.url) {\n  console.log('App opened with URL: ' + ret.url);\n}\nconsole.log('Launch url: ', ret);\n\nApp.addListener('appUrlOpen', (data: any) => {\n  console.log('App opened with URL: ' + data.url);\n});\n\nApp.addListener('appRestoredResult', (data: any) => {\n  console.log('Restored state:', data);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Click Listener in TypeScript for Capacitor Google Maps\nDESCRIPTION: Defines a method to set a listener for the my location click event on a Google Map. It takes an optional callback function that receives map click data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorNotifications Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the CapacitorNotifications API. Includes methods for scheduling notifications, setting badge counts, and clearing badges. Supports version tracking for API methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CapacitorNotifications {\n  schedule(options: {}) => void;  // Since 1.0.0\n  setBadge(options: NotificationBadgeOptions) => void;  // Since 2.0.0\n  clearBadge() => void;  // Since 2.0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PWA Elements in Angular (TypeScript)\nDESCRIPTION: This snippet illustrates the setup for PWA Elements in an Angular application's `main.ts` file. It imports `defineCustomElements` from the loader and calls it before the `bootstrapModule` or `bootstrapApplication` function to ensure the web components are registered early in the application lifecycle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/pwa-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n// Call the element loader before the bootstrapModule/bootstrapApplication call\ndefineCustomElements(window);\nif (environment.production) {\n  enableProdMode();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform using Capacitor CLI (Bash)\nDESCRIPTION: Integrates the Android native platform into the Ionic project using the Capacitor CLI (`ionic cap add android`). This command creates an 'android' folder containing the native Android Studio project configured to run the Ionic web app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nionic cap add android\n```\n\n----------------------------------------\n\nTITLE: Defining the 'accel' Event Listener Signature (TypeScript)\nDESCRIPTION: This TypeScript code defines the signature for the `addListener` method when subscribing to accelerometer ('accel') events. It takes the event name 'accel' and a listener function (`AccelListener`) as arguments. The method returns a Promise that resolves to a `PluginListenerHandle`, which also includes the `remove` method directly for synchronous listener removal contexts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/motion.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Handling Array Access with Potential Null Values in Swift\nDESCRIPTION: Demonstrates two approaches to accessing arrays from Capacitor plugin calls in Swift, highlighting the challenges of handling arrays that might contain NSNull values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\") {\n    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually\n}\nif let values = call.getArray(\"bar\", Int?) {\n    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode using Capacitor CLI (bash)\nDESCRIPTION: This command uses the Capacitor CLI to open the native iOS project associated with the Capacitor application in Xcode. This is necessary for adding configuration files like `GoogleService-Info.plist` and modifying native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Clipboard Read Method Type Definition\nDESCRIPTION: TypeScript definition for the read method which retrieves data from the system clipboard.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/clipboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nread() => Promise<ReadResult>\n```\n\n----------------------------------------\n\nTITLE: Capacitor Haptics 'impact' Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Haptics.impact` method, which triggers an impact feedback. It accepts an optional `ImpactOptions` parameter to specify the style (e.g., Heavy, Medium, Light, defaulting to Heavy) and returns a Promise that resolves when the feedback is triggered.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimpact(options?: ImpactOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Verifying Xcode Command Line Tools Path (Bash)\nDESCRIPTION: This command verifies that the Xcode Command Line Tools are installed and displays the path to the active developer directory. It confirms the successful installation triggered by `xcode-select --install`. The expected output is the path, for example, '/Applications/Xcode.app/Contents/Developer'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n# /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Registration Errors in Capacitor (TypeScript)\nDESCRIPTION: Adds an event listener that is triggered when the push notification registration fails. The listener function receives a `RegistrationError` object containing details about the failure. Returns a Promise that resolves with a `PluginListenerHandle` for listener removal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registrationError', listenerFunc: (error: RegistrationError) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AppUrlListener in App Root - TypeScript (TSX)\nDESCRIPTION: Shows how to import the AppUrlListener component and insert it into the application's component tree under IonReactRouter. Ensures that the deep link event listener is active and routing is handled at the app's root. This code assumes the use of Ionic React with IonApp and IonReactRouter, and that routes are defined for navigation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AppUrlListener from './pages/AppUrlListener';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst App: React.FC = () => {\n  return (\n    <IonApp>\n      <IonReactRouter>\n        <AppUrlListener></AppUrlListener>\n        <IonRouterOutlet>\n          <Route path=\"/home\" component={Home} exact={true} />\n          <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Action Types - Capacitor Plugin API - TypeScript\nDESCRIPTION: This snippet defines the registerActionTypes method for configuring actions that users can take when interacting with notifications. It's only available for iOS and Android, accepting a RegisterActionTypesOptions object and returning a Promise. No data is returned upon completion, but actions will become available on supported notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nregisterActionTypes(options: RegisterActionTypesOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listening to Camera Move Started Events - TypeScript\nDESCRIPTION: Attaches a callback for camera movement start events. Callback, if supplied, handles CameraMoveStartedCallbackData. Asynchronous operation returns a void Promise. Useful for tracking user interaction with the map camera.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCameraMoveStartedListener(callback?: MapListenerCallback<CameraMoveStartedCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Jetifier for AndroidX Compatibility\nDESCRIPTION: This snippet shows how to install and use jetifier to patch plugins with old Android support dependencies to use AndroidX. It's a workaround for the 'package android.support.* does not exist' error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\nnpx jetify\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase in iOS Podfile\nDESCRIPTION: CocoaPods configuration for adding Firebase Messaging SDK to the iOS project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'FirebaseMessaging' # Add this line\nend\n```\n\n----------------------------------------\n\nTITLE: Device getLanguageCode Method Type Definition\nDESCRIPTION: TypeScript definition for the getLanguageCode() method that returns device language locale\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/device.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageCode() => Promise<GetLanguageCodeResult>\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Plugin Call with Error Information\nDESCRIPTION: This snippet demonstrates how to reject a plugin call to indicate failure, passing an error message, code, and Error instance back to JavaScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\ncall.reject(error.localizedDescription, nil, error)\n```\n\n----------------------------------------\n\nTITLE: Running the Capacitor Plugin Generator (Bash)\nDESCRIPTION: This command executes the Capacitor CLI plugin generator (specifically version 2.4.7) using `npx`. It initiates an interactive wizard to gather information needed for creating a new Capacitor plugin project structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/creating-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/cli@2.4.7 plugin:generate\n```\n\n----------------------------------------\n\nTITLE: Importing Vue, VueRouter, and Capacitor App API for Deep Linking - TypeScript\nDESCRIPTION: Imports Capacitor's App module along with Vue and VueRouter for use in deep linking with Vue applications. Required for routing and event handling when responding to appUrlOpen events triggered by deep links. Dependencies must be installed in the project, and VueRouter should be set up.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Cordova Plugin and Syncing Capacitor Project - Bash Commands\nDESCRIPTION: After migrating or removing a Cordova plugin, these commands uninstall the named Cordova plugin and run Capacitor's sync operation to clean up associated native plugin code. \\\"cordova-plugin-name\\\" should be replaced by the actual plugin name being removed. Dependencies: npm and Capacitor CLI. Outputs: plugin removed from package.json and platform plugins directories.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Showing a Basic Toast Notification using Capacitor Toast in TypeScript\nDESCRIPTION: Provides a simple example function `showHelloToast` in TypeScript that imports the `Toast` API from `@capacitor/toast` and uses the `Toast.show()` method to display a toast message with the text 'Hello!'. It demonstrates the basic asynchronous usage pattern.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Toast } from '@capacitor/toast';\n\nconst showHelloToast = async () => {\n  await Toast.show({\n    text: 'Hello!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Dynamic Capacitor Configuration - TypeScript\nDESCRIPTION: This TypeScript code dynamically exports a Capacitor configuration object based on the value of process.env.NODE_ENV. It defines a shared baseConfig, then conditionally augments it with iOS scheme and Android flavor properties depending on whether NODE_ENV is 'qa' or not. This enables seamless switching between environments using environment variables. Prerequisites: The '@capacitor/cli' package and environment variable setup (e.g., via cross-env or shell).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nlet config: CapacitorConfig;\n\nconst baseConfig: CapacitorConfig = {\n  appId: 'io.ionic.starter',\n  appName: 'My App',\n  webDir: 'build',\n  bundledWebRuntime: false,\n};\n\nswitch (process.env.NODE_ENV) {\n  case 'qa':\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App QA',\n      },\n      android: {\n        flavor: 'qa',\n      },\n    };\n    break;\n  default:\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App',\n      },\n      android: {\n        flavor: 'dev',\n      },\n    };\n    break;\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Complete Android Activity with Deep Link Intent Filter\nDESCRIPTION: Full XML structure of an Android Activity including the main intent filter and the deep linking intent filter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n    android:name=\"com.netkosoft.beerswift.MainActivity\"\n    android:label=\"@string/title_activity_main\"\n    android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n    android:launchMode=\"singleTask\">\n\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Installing the @capacitor/keyboard Plugin in a Capacitor Project (Bash)\nDESCRIPTION: Commands to install the @capacitor/keyboard plugin and sync dependencies in a Capacitor application. Requires an existing Capacitor project setup. The first command installs the plugin with npm, and the second synchronizes native plugins with the project. Both commands should be run in the project root using a shell terminal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/keyboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Configuration Interfaces in TypeScript\nDESCRIPTION: This snippet provides TypeScript interface and type definitions for the configuration structure of Capacitor projects, including project-level options, platform-specific server options, Cordova integration, plugin allowlists, federated app support, and plugin-specific configs. Dependencies are limited to TypeScript and JSDoc for documentation. Keys like 'plugins', 'cordova', and 'server' provide type safety, default values, and property constraints for use in Typed project configs and tooling. Expected input is JavaScript/TypeScript objects conforming to these interfaces; output is primarily used for validation, IDE support, and documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  allowsLinkPreview?: boolean;\n\n  loggingBehavior?: 'none' | 'debug' | 'production';\n\n  includePlugins?: string[];\n\n  limitsNavigationsToAppBoundDomains?: boolean;\n\n  preferredContentMode?: 'recommended' | 'desktop' | 'mobile';\n\n  handleApplicationNotifications?: boolean;\n\n  webContentsDebuggingEnabled?: boolean;\n};\n\nserver?: {\n  hostname?: string;\n  iosScheme?: string;\n  androidScheme?: string;\n  url?: string;\n  cleartext?: boolean;\n  allowNavigation?: string[];\n  errorPath?: string;\n};\n\ncordova?: {\n  accessOrigins?: string[];\n  preferences?: { [key: string]: string | undefined };\n  staticPlugins?: string[];\n};\n\nplugins?: PluginsConfig;\n\nincludePlugins?: string[];\n}\n\nexport interface FederatedApp {\n  name: string;\n  webDir: string;\n  liveUpdateConfig?: LiveUpdateConfig;\n}\n\nexport interface LiveUpdateConfig {\n  appId: string;\n  channel: string;\n  autoUpdateMethod: AutoUpdateMethod;\n  maxVersions?: number;\n  key?: string;\n}\n\nexport type AutoUpdateMethod = 'none' | 'background';\n\nexport interface PluginsConfig {\n  [key: string]:\n    | {\n        [key: string]: any;\n      }\n    | undefined;\n\n  FederatedCapacitor?: {\n    shell: Omit<FederatedApp, 'webDir'>;\n    apps: FederatedApp[];\n    liveUpdatesKey?: string;\n  };\n\n  LiveUpdates?: LiveUpdateConfig;\n\n  CapacitorCookies?: {\n    enabled?: boolean;\n    androidCustomSchemeAllowInsecureAccess?: boolean;\n  };\n\n  CapacitorHttp?: {\n    enabled?: boolean;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listening for Orientation Changes via NotificationCenter in Swift\nDESCRIPTION: This Swift snippet demonstrates how the ScreenOrientationPlugin registers with NotificationCenter to observe device orientation changes and cleans up when deinitialized. When the orientation changes, and the new state is valid for interface orientation, it notifies JavaScript listeners of the change. Dependencies include UIKit, NotificationCenter, and proper plugin lifecycle management.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\noverride public func load() {\\n  NotificationCenter.default.addObserver(\\n    self,\\n    selector: #selector(self.orientationDidChange),\\n    name: UIDevice.orientationDidChangeNotification,\\n    object: nil)\\n}\\n\\ndeinit {\\n  NotificationCenter.default.removeObserver(self)\\n}\\n\\n@objc private func orientationDidChange() {\\n  // Ignore changes in orientation if unknown, face up, or face down\\n  if(UIDevice.current.orientation.isValidInterfaceOrientation) {\\n    let orientation = implementation.getCurrentOrientationType()\\n    notifyListeners(\\\"screenOrientationChange\\\", data: [\\\"type\\\": orientation])\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Local Plugin for Testing (Shell Script)\nDESCRIPTION: Demonstrates how to link a local plugin to a test app using `npm install` with a relative file path. This enables developers to test plugin changes without publishing to npm. Must be run from the app directory; the path should be replaced with the actual path to the local plugin source.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ../path/to/echo\n\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Folder Structure for cordova-res (Text)\nDESCRIPTION: Illustrates the standard directory structure required by `cordova-res`. A top-level `resources` folder within the project must contain the source `icon.png` (for app icons) and `splash.png` (for splash screens) files. `cordova-res` uses these base images to generate various sizes needed for different platforms and devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nresources/\n├── icon.png\n└── splash.png\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation\nDESCRIPTION: Event handler code that removes any orientation locks when a button is clicked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.unlock()}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar Overlay on WebView - TypeScript\nDESCRIPTION: Defines the setOverlaysWebView method for configuring whether the status bar overlays the webview. Only applicable to Android, expects a SetOverlaysWebViewOptions object with a boolean overlay property. Returns a Promise and should be used with @capacitor/status-bar in a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetOverlaysWebView(options: SetOverlaysWebViewOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Requesting Geolocation Permissions\nDESCRIPTION: TypeScript method to request location permissions from the user. Will throw an error if system location services are disabled. Not available on web platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(permissions?: GeolocationPluginPermissions | undefined) => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Updating Cordova Plugins in Capacitor\nDESCRIPTION: Commands to update an existing Cordova plugin to a specific version and update the Capacitor project. Shows how to update to a major version or use semver-compliant updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/using-cordova-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name@2\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing Web Implementation (Bash)\nDESCRIPTION: This error message appears in the browser's console when the ScreenOrientation plugin doesn't have a web implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/using-api.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUncaught (in promise) ScreenOrientation does not have web implementation.\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Options in Capacitor\nDESCRIPTION: Specifies various options for configuring notifications in Capacitor, including auto-cancel, large body, summary text, icons, and channel ID. These options are primarily for Android, with some cross-platform functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| **`autoCancel`**       | <code>boolean</code> | If true, the notification is canceled when the user clicks on it. Calls `setAutoCancel()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android.                                                                                                                                                                                                                                                                                                                                                          | 1.0.0 |\n| **`largeBody`**        | <code>string</code>  | Sets a multiline text block for display in a big text notification style| 1.0.0 |\n| **`summaryText`**      | <code>string</code>  | Used to set the summary text detail in inbox and big text notification styles. Only available for Android| 1.0.0 |\n| **`smallIcon`**        | <code>string</code>  | Set a custom status bar icon. If set, this overrides the `smallIcon` option from Capacitor configuration. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                     | 1.0.0 |\n| **`largeIcon`**        | <code>string</code>  | Set a large icon for notifications. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                                           | 1.0.0 |\n| **`channelId`**        | <code>string</code>  | Specifies the channel the notification should be delivered on. If channel with the given name does not exist then the notification will not fire. If not provided, it will use the default channel. Calls `setChannelId()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android 26+.                                                                                                                                                                                                                     | 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper for Capacitor 5\nDESCRIPTION: Update to the Gradle wrapper distribution URL in gradle-wrapper.properties for Capacitor 5 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Checking if Notifications Are Enabled - Capacitor Plugin API - TypeScript\nDESCRIPTION: This code defines the areEnabled method, checking if the user has enabled notifications for the app. The method returns a Promise with an EnabledResult object indicating the permission status. No parameters are required, and the method should be used to adapt app behavior based on notification permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nareEnabled() => Promise<EnabledResult>\n```\n\n----------------------------------------\n\nTITLE: Installing and Syncing Capacitor Watch Plugin using Bash\nDESCRIPTION: This snippet shows the necessary command-line steps to install the Capacitor Watch plugin using npm, sync the native project dependencies using Capacitor CLI, and open the iOS project in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/watch\nnpx cap sync\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Defining URLSearchParams Interface in TypeScript\nDESCRIPTION: Defines the URLSearchParams interface with methods for manipulating URL query parameters. It includes methods for appending, deleting, getting, and setting parameters, as well as sorting, converting to string, and iterating over entries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface URLSearchParams {\n  append(name: string, value: string): void;\n  delete(name: string): void;\n  get(name: string): string | null;\n  getAll(name: string): string[];\n  has(name: string): boolean;\n  set(name: string, value: string): void;\n  sort(): void;\n  toString(): string;\n  forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Background Runner Android Dependencies - Gradle Diff\nDESCRIPTION: Modifies the android/app/build.gradle file to include the background runner's Android library in the repositories section. No parameters; directly edits the repositories block to load plugin libraries at build time. Required when setting up the background runner in an Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n...\\n\\nrepositories {\\n    flatDir{\\n        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\\n+       dirs '../../node_modules/@capacitor/background-runner/android/src/main/libs', 'libs'\\n    }\\n}\\n...\\n\n```\n\n----------------------------------------\n\nTITLE: Toast Show Method Definition\nDESCRIPTION: API definition for the Toast.show() method which displays a toast notification. It accepts ToastShowOptions and returns a Promise that resolves when the toast is shown.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options: ToastShowOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Vibrating Device in TypeScript\nDESCRIPTION: Function to vibrate the device with optional duration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/haptics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvibrate(options?: VibrateOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ionic Angular Project using Bash\nDESCRIPTION: Uses the Ionic CLI to generate a new Ionic application named 'capApp' based on the 'blank' starter template, specifically configured for the Angular framework. It scaffolds the basic project structure and installs initial dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic start capApp blank --type=angular\n```\n\n----------------------------------------\n\nTITLE: Defining CopyResult Interface in TypeScript\nDESCRIPTION: Defines the result structure returned by the `copy` operation in the Capacitor Filesystem API. It contains the URI string where the file or directory was copied.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Filesystem Plugin using Bash\nDESCRIPTION: Installs the @capacitor/filesystem plugin using npm and synchronizes the project dependencies with Capacitor. This is the standard command to add the plugin to a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/filesystem\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Accessing the Capacitor Bridge Reference in Swift\nDESCRIPTION: This snippet demonstrates how a plugin can access the bridge property in Swift, which provides access to Capacitor's native bridge functionalities. The bridge is typically a weak reference, making it crucial for plugins to check its validity before use. Access to the bridge is foundational for integrating native functionalities and communicating with the web layer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nself.bridge?\n\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Capacitor Plugins via npm (bash)\nDESCRIPTION: This snippet installs several core Capacitor plugins required for typical Ionic app functionality. Executed in the root of the project, it installs @capacitor/app, @capacitor/haptics, @capacitor/keyboard, and @capacitor/status-bar as development dependencies. Node.js and npm must be installed, and this should be performed after setting up Capacitor integration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/with-ionic.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Capacitor Plugin Methods with JSDoc Comments\nDESCRIPTION: This TypeScript code demonstrates how to add JSDoc comments to document plugin methods and interfaces. It includes descriptions for the openMap method and its parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n\n  /**\n   * Opens the map at a given location.\n   *\n   * @since 1.1.0\n   */\n  openMap(options: OpenMapOptions): Promise<void>;\n}\n\nexport interface OpenMapOptions {\n  /**\n   * The latitude at which to open the map.\n   */\n  latitude: number;\n\n  /**\n   * The longitude at which to open the map.\n   */\n  longitude: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Network Status Change Listener\nDESCRIPTION: TypeScript definition for the addListener method which registers a callback function to be executed when network status changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/network.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in Capacitor Android MainActivity\nDESCRIPTION: This Java code snippet demonstrates how to register a custom plugin in the MainActivity of a Capacitor Android project. It shows the process of adding the plugin class to the list of plugins initialized by the Bridge.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Other imports...\nimport com.example.myapp.CustomNativePlugin;\n\npublic class MainActivity extends BridgeActivity {\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    // Initializes the Bridge\n    this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n      // Additional plugins you've installed go here\n      // Ex: add(TotallyAwesomePlugin.class);\n      add(CustomNativePlugin.class);\n    }});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Plugin Annotation to @CapacitorPlugin in Android (Java)\nDESCRIPTION: This snippet demonstrates how to migrate a plugin from using the deprecated @NativePlugin annotation to the new @CapacitorPlugin annotation in a Java-based Capacitor plugin for Android. The permissions array is refactored to use individual @Permission annotations, and obsolete fields like requestCodes and permissionRequestCode are removed. Required dependency: Capacitor 3 Android library. Inputs are plugin class properties and permissions; output is an updated plugin definition. Omits request codes as per new API requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-@NativePlugin(\n+@CapacitorPlugin(\n    name = \"FooBar\",\n-    requestCodes = {\n-        FooBarPlugin.REQUEST_SOME_METHOD,\n-        FooBarPlugin.REQUEST_SOME_OTHER_METHOD\n-    },\n-    permissionRequestCode = FooBarPlugin.REQUEST_ALL_PERMISSIONS,\n-    permissions = { Manifest.permission.FOO, Manifest.permission.BAR }\n+    permissions = {\n+        @Permission(strings = { Manifest.permission.FOO }, alias = \"foo\"),\n+        @Permission(strings = { Manifest.permission.BAR }, alias = \"bar\")\n+    })\n )\n public class FooBarPlugin extends Plugin {\n     static final int REQUEST_SOME_METHOD = 10051;\n     static final int REQUEST_SOME_OTHER_METHOD = 10052;\n```\n\n----------------------------------------\n\nTITLE: Installing Awesome Cordova Plugins Wrapper\nDESCRIPTION: Command to install the @awesome-cordova-plugins wrapper for a Cordova plugin, which provides TypeScript support for the plugin in a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/cordova.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @awesome-cordova-plugins/plugin-name\n```\n\n----------------------------------------\n\nTITLE: Removing Circles from Google Maps\nDESCRIPTION: Removes multiple circle shapes from the map using their IDs. Returns a Promise that resolves when all circles have been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nremoveCircles(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Certificate Details with Keytool\nDESCRIPTION: This command lists the details of an existing keystore certificate, including the SHA256 fingerprint required for the Site Association file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore my-release-key.keystore\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Screen Orientation Plugin (Shell)\nDESCRIPTION: Installs the `cordova-plugin-screen-orientation` plugin using npm and updates the Capacitor project to integrate the native plugin changes. This plugin is required for dynamically controlling screen orientation at runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-screen-orientation\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard setAccessoryBarVisible() Method Signature\nDESCRIPTION: Defines the `setAccessoryBarVisible` method, allowing toggling the visibility of the keyboard's accessory bar via an options object with an `isVisible` boolean property. This is recommended for short forms and is only supported on iPhone devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetAccessoryBarVisible(options: { isVisible: boolean; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting the Zoom Level with Capacitor Text Zoom (TypeScript)\nDESCRIPTION: TypeScript signature for the `set()` method. This asynchronous function takes a `SetOptions` object, which includes the desired `value` (zoom level as a decimal), and applies this zoom level to the Web View. It returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/text-zoom.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Listener Component in React\nDESCRIPTION: React component for handling deep links using the Capacitor App API and React Router. This component imports the necessary dependencies and sets up the component structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Push Notification Events\nDESCRIPTION: Adds required methods to the AppDelegate.swift file on iOS. These methods handle the registration success (didRegisterForRemoteNotificationsWithDeviceToken) and failure (didFailToRegisterForRemoteNotificationsWithError) events from the native iOS push notification system and forward them to Capacitor using NotificationCenter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SCHEDULE_EXACT_ALARM Permission - Android Manifest XML\nDESCRIPTION: Demonstrates how to declare the SCHEDULE_EXACT_ALARM permission in AndroidManifest.xml, which allows apps to schedule exact alarms on Android 12 and above. Prerequisite: Access to the AndroidManifest.xml file in your native Android project. The permission tag should be placed within the manifest's <application> or <manifest> section. Input: none. Output: Permission is declared so the app can request scheduling of exact alarms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.SCHEDULE_EXACT_ALARM\\\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Package Query\nDESCRIPTION: XML configuration required for Android 11+ to specify which app packages can be queried using the AppLauncher plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app-launcher.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <package android:name=\"com.getcapacitor.myapp\" />\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Checking Capacitor Telemetry Status\nDESCRIPTION: Command to check the current status of telemetry collection for your Capacitor project. Must be run in the project root directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/telemetry.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap telemetry\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidBottomSheet Interface in TypeScript\nDESCRIPTION: Interface defining configuration options for Android bottom sheets including height and fixed positioning.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidBottomSheet {\n  height?: number;\n  isFixed?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Push Notifications Icon\nDESCRIPTION: XML snippet to add to AndroidManifest.xml for specifying the push notifications icon.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.firebase.messaging.default_notification_icon\" android:resource=\"@mipmap/push_icon_name\" />\n```\n\n----------------------------------------\n\nTITLE: API Signature: openInSystemBrowser Method in TypeScript\nDESCRIPTION: Defines the signature for the `openInSystemBrowser` method. It takes an `OpenInSystemBrowserParameterModel` object and returns a `Promise<void>`. This method opens the URL using the system's optimized in-app browser view (Custom Tabs/SFSafariViewController).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nopenInSystemBrowser(model: OpenInSystemBrowserParameterModel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Screen Reader Event Listener Definition\nDESCRIPTION: Type definition for adding a state change event listener to the screen reader.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-reader.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore with Keytool - Shell\nDESCRIPTION: This command creates a new Android keystore file using keytool for signing APKs. It takes parameters such as the keystore file name (KEY-NAME.keystore), alias, key algorithm (RSA), key size (2048 bits), and validity (10000 days). Required: Java JDK installed and keytool accessible in your environment. Outputs a .keystore file for further certificate fingerprint extraction.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -v -keystore KEY-NAME.keystore -alias ALIAS -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Device Plugin - Bash\nDESCRIPTION: This snippet demonstrates how to install the @capacitor/device plugin and synchronize it with the Capacitor project using npm and the cap CLI. The first command adds the plugin as a dependency, while the second updates native projects with the new plugin. These steps are prerequisites for using any Device APIs within a Capacitor app. There are no input or output parameters and the commands must be run in the project's root.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/device\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard API in Capacitor\nDESCRIPTION: Example demonstrating how to import and use the Clipboard API to write content to and read content from the clipboard. Shows basic write operation with a string and reading clipboard content with type checking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/clipboard.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Clipboard } = Plugins;\n\nClipboard.write({\n  string: 'Hello, Moto',\n});\n\nlet result = await Clipboard.read();\nconsole.log('Got', result.type, 'from clipboard:', result.value);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Zoom Level\nDESCRIPTION: TypeScript method to set the current text zoom level. Takes an options object containing the new zoom level as a decimal value (e.g., 1.2 is 120%).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/text-zoom.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Configuration File for Capacitor\nDESCRIPTION: Example of a typed Capacitor configuration file in TypeScript format that includes plugin-specific settings for notifications, splash screen, and other features.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/local-notifications\" />\n/// <reference types=\"@capacitor/push-notifications\" />\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.capacitorjs.app.testapp',\n  appName: 'capacitor-testapp',\n  webDir: 'build',\n  plugins: {\n    SplashScreen: {\n      launchAutoHide: false,\n    },\n    LocalNotifications: {\n      smallIcon: 'ic_stat_icon_config_sample',\n      iconColor: '#CE0B7C',\n    },\n    PushNotifications: {\n      presentationOptions: ['alert', 'sound'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Enabling Privacy Screen Protection in TypeScript\nDESCRIPTION: Function to enable privacy screen protection with optional configuration for platform-specific behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/privacy-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenable(config?: PrivacyScreenConfig | undefined) => Promise<{ success: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Push Notifications\nDESCRIPTION: Swift code to be added to AppDelegate.swift for handling push notification registration and errors on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Barcode Scan Result Structure (TypeScript)\nDESCRIPTION: This TypeScript type alias `CapacitorBarcodeScannerScanResult` defines the structure of the object returned upon successfully scanning a barcode. It contains a single property `ScanResult` which holds the scanned barcode data as a string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ ScanResult: string }\n```\n\n----------------------------------------\n\nTITLE: Defining the View Controller Property on the Bridge in Swift\nDESCRIPTION: This property declaration shows that the bridge exposes an optional viewController of type UIViewController. Plugins can use this property to present custom native iOS views modally over the entire Capacitor app. No explicit dependencies are required besides UIKit;\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar viewController: UIViewController? { get }\n\n```\n\n----------------------------------------\n\nTITLE: Action Sheet API Type Definition\nDESCRIPTION: TypeScript type definition for the showActions method showing parameter types and return value\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshowActions(options: ShowActionsOptions) => Promise<ShowActionsResult>\n```\n\n----------------------------------------\n\nTITLE: Defining MkdirOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for creating a new directory using the Capacitor Filesystem API. Requires the `path` for the new directory and the parent `directory`. Optionally accepts a `recursive` flag (boolean, default false) to create any missing parent directories.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MkdirOptions {\n  /**\n   * The path of the new directory\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The Directory to make the new directory in\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n  /**\n   * Whether to create any missing parent directories as well.\n   * @default false\n   * @since 1.0.0\n   */\n  recursive?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Page Loaded Event Listener in TypeScript\nDESCRIPTION: TypeScript definition for adding a listener for the 'browserPageLoaded' event, which fires when the initial URL finishes loading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: CapacitorCookies API Method: clearAllCookies\nDESCRIPTION: TypeScript declaration for the clearAllCookies method that removes all cookies from the device. Takes no parameters and returns a Promise that resolves when cookies are cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclearAllCookies() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Enabling Capacitor in an Existing Ionic Project\nDESCRIPTION: Command to add Capacitor integration to an existing Ionic project that doesn't already have it enabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/with-ionic.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic integrations enable capacitor\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenOrientation Plugin Class in Swift\nDESCRIPTION: This code defines the ScreenOrientationPlugin class, which extends CAPPlugin. It includes stub implementations for the orientation, lock, and unlock methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Capacitor\n\n@objc(ScreenOrientationPlugin)\npublic class ScreenOrientationPlugin: CAPPlugin {\n\n  @objc public func orientation(_ call: CAPPluginCall) {\n    call.resolve()\n  }\n\n  @objc public func lock(_ call: CAPPluginCall) {\n    call.resolve()\n  }\n\n  @objc public func unlock(_ call: CAPPluginCall) {\n    call.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Custom Plugin Registration Order in MainActivity\nDESCRIPTION: Update the order of custom plugin registration in MainActivity to register plugins before calling super.onCreate.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n+        registerPlugin(PluginInMyApp.class);\n         super.onCreate(savedInstanceState);\n-        registerPlugin(PluginInMyApp.class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Getting Delivered Notifications with Capacitor API\nDESCRIPTION: API method definition for `getDeliveredNotifications()`. This asynchronous function retrieves a list of notifications currently displayed in the device's notification center/tray. It returns a Promise resolving to a `DeliveredNotifications` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<DeliveredNotifications>\n```\n\n----------------------------------------\n\nTITLE: Defining PrivacyScreenConfig Interface in TypeScript\nDESCRIPTION: Interface defining configuration options for privacy screen on Android and iOS platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/privacy-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PrivacyScreenConfig {\n  android?: {\n    dimBackground?: boolean;\n    preventScreenshots?: boolean;\n    privacyModeOnActivityHidden?: 'none' | 'dim' | 'splash';\n  };\n  ios?: {\n    blurEffect?: 'none' | 'light' | 'dark';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Network Permission to Android Manifest\nDESCRIPTION: Illustrates how to add network access permission to the AndroidManifest.xml file for an Android app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.getcapacitor.myapp\">\n    <activity>\n      <!-- other stuff -->\n    </activity>\n\n    <!-- More stuff -->\n\n    <!-- Your permissions -->\n\n    <!-- Network API -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Presenting View Controllers in Capacitor iOS\nDESCRIPTION: Shows how to present custom view controllers using the bridge's viewController property, including handling for iPad devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nDispatchQueue.main.async {\n  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nself.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Camera Plugin\nDESCRIPTION: XML configuration to add required permissions to AndroidManifest.xml for using the Camera plugin on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Level Type Alias - TypeScript\nDESCRIPTION: Numeric type alias for notification visibility modes, matching Android NotificationCompat. Used to determine how notifications are displayed on the lock screen. Acceptable values are -1, 0, or 1 (private, public, etc.). No dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing checkPermissions with Browser Support Check\nDESCRIPTION: This snippet shows how to implement the checkPermissions method with a check for browser support of the Permissions API. It throws an 'unavailable' error if the API is not supported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync checkPermissions(): Promise<PermissionStatus> {\n  if (typeof navigator === 'undefined' || !navigator.permissions) {\n    throw this.unavailable('Permissions API not available in this browser.');\n  }\n\n  const permission = await navigator.permissions.query( ... );\n\n  // TODO\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Plugin for Development Testing\nDESCRIPTION: Command to link a local plugin directory to an app for testing during development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ../path/to/echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in iOS\nDESCRIPTION: XML configuration for Info.plist to register a custom URL scheme in iOS, allowing the app to be opened from custom URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLName</key>\n    <string>com.getcapacitor.capacitor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>mycustomscheme</string>\n    </array>\n  </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Using a Capacitor Plugin Method in TypeScript\nDESCRIPTION: This snippet shows how to use a method from a Capacitor plugin. It uses the Browser plugin to open a URL in the in-app browser on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/index.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync openBrowser() {\n  // On iOS, for example, open the URL in SFSafariViewController (the in-app browser)\n  await Browser.open({ url: \"https://ionicframework.com\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Network Listeners in TypeScript\nDESCRIPTION: Method to remove all listeners, including network status changes, for the Network plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/network.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Circle Click Event Listener in TypeScript\nDESCRIPTION: Establishes a listener for circle click events with CircleClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCircleClickListener(callback?: MapListenerCallback<CircleClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor CLI Hook Scripts in package.json\nDESCRIPTION: This JSON snippet shows an example configuration within the `scripts` section of a `package.json` file. It defines simple `echo` commands that run before and after the `capacitor copy`, `capacitor update`, and `capacitor sync` commands, utilizing the `$CAPACITOR_PLATFORM_NAME` environment variable provided by Capacitor to indicate the target platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"capacitor:copy:before\": \"echo copy before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:copy:after\": \"echo copy after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:before\": \"echo update before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:after\": \"echo update after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:before\": \"echo sync before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:after\": \"echo sync after $CAPACITOR_PLATFORM_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Void Return Method in iOS (Objective-C)\nDESCRIPTION: Demonstrates how to declare a Capacitor plugin method (`method1`) that returns no data in the plugin's `.m` file for iOS. It uses the `CAP_PLUGIN_METHOD` macro with the `CAPPluginReturnNone` return type specifier.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);\n)\n```\n\n----------------------------------------\n\nTITLE: Opening URL in Web View with InAppBrowser\nDESCRIPTION: TypeScript code to open a URL in a web view within the application using the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser, DefaultWebViewOptions } from '@capacitor/inappbrowser';\nawait InAppBrowser.openInWebView({\n    url: \"https://www.google.com\",\n    options: DefaultWebViewOptions\n});\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: Defines the PermissionStatus interface with camera and photos properties, both of type CameraPermissionState.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  camera: CameraPermissionState;\n  photos: CameraPermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Deployment Target in Podfile\nDESCRIPTION: Provides a diff for updating the iOS deployment target from 11.0 to 12.0 in the Podfile for a Capacitor 3 plugin project. No direct dependencies, but must be followed by similar updates in Xcode and .podspec. Ensures plugin builds with newer platform features. Affects build configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-platform :ios, '11.0'\n+platform :ios, '12.0'\n use_frameworks!\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications for Android in Capacitor\nDESCRIPTION: This JSON configuration snippet shows how to set default values for the small icon, icon color, and notification sound for Android local notifications in the capacitor.config.json file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"plugins\": {\n    \"LocalNotifications\": {\n      \"smallIcon\": \"ic_stat_icon_config_sample\",\n      \"iconColor\": \"#488AFF\",\n      \"sound\": \"beep.wav\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Path for Live Reload Setting\nDESCRIPTION: Menu navigation path to enable the Live Reload feature in the VS Code extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/3-build-and-run.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nSettings > Live Reload\n```\n\n----------------------------------------\n\nTITLE: Deleting Android Notification Channel in Capacitor\nDESCRIPTION: TypeScript method signature for deleting a notification channel on Android 8.0+ (SDK 26+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(channel: NotificationChannel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration\nDESCRIPTION: This command starts the CLI questionnaire to initialize Capacitor and create the capacitor-config file with configuration details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Defining `notification` Property Type as `LocalNotification` for LocalNotificationActionPerformed\nDESCRIPTION: Specifies that the `notification` property within the LocalNotificationActionPerformed interface must be of type LocalNotification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#localnotification\">LocalNotification</a>\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressStatus Interface in TypeScript\nDESCRIPTION: Defines the ProgressStatus interface with properties for url, bytes, and contentLength, used for tracking download progress.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProgressStatus {\n  url: string;\n  bytes: number;\n  contentLength: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Did Hide Event Listener in Capacitor\nDESCRIPTION: Method to listen for when the keyboard is hidden. On Android, keyboardWillHide and keyboardDidHide events fire almost simultaneously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias for Importance, representing the importance levels for Android notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: ScheduleOn Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for scheduling notifications with specific date/time components including year, month, day, weekday, hour, minute and second.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScheduleOn {\n  year: number;\n  month: number;\n  day: number;\n  weekday: Weekday;\n  hour: number;\n  minute: number;\n  second: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Browser with Options\nDESCRIPTION: TypeScript interface and method showing how to open a browser page with configurable options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopen(options: OpenOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: RegisterActionTypesOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface for registering notification action types, containing an array of action type definitions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegisterActionTypesOptions {\n  types: ActionType[];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Capacitor in Existing Ionic Project\nDESCRIPTION: Commands to enable Capacitor integration in an existing Ionic project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd myApp\nionic integrations enable capacitor\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners with removeAllListeners() in TypeScript\nDESCRIPTION: API signature for the `removeAllListeners` method. This asynchronous function removes all event listeners previously attached to the Screen Reader plugin instance. It returns a Promise that resolves when all listeners have been successfully removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-reader.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Permissions Concurrently in Swift\nDESCRIPTION: Shows how to request multiple permissions simultaneously using a `DispatchGroup` in Swift. It retrieves the requested permission types from the call options or defaults to requesting all ('contacts', 'camera'). For each permission type, it enters the group, initiates the asynchronous request (`store.requestAccess`, `AVCaptureDevice.requestAccess`), and leaves the group in the completion handler. A `group.notify` block is used to call `checkPermissions` once all individual requests have completed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet store = CNContactStore()\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    // get the permissions to check or default to all of them\n    var permissions = call.getArray(\"types\", String.self) ?? []\n    if permissions.isEmpty {\n        permissions = [\"contacts\", \"camera\"]\n    }\n\n    let group = DispatchGroup()\n    if permissions.contains(\"contacts\") {\n        group.enter()\n        store.requestAccess(for: .contacts) { (_, _) in\n            group.leave()\n        }\n    }\n    if permissions.contains(\"camera\") {\n        group.enter()\n        AVCaptureDevice.requestAccess(for: .video) { _ in\n            group.leave()\n        }\n    }\n    group.notify(queue: DispatchQueue.main) {\n        self.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CameraDirection Enum in TypeScript\nDESCRIPTION: Defines an enum for CameraDirection with Rear and Front members and their corresponding string values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraDirection {\n  Rear = 'REAR',\n  Front = 'FRONT'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Plugin at Runtime in TypeScript\nDESCRIPTION: This TypeScript snippet details the configure function exposed by the Storage API, which allows you to set configuration options such as the storage group at runtime. The configure method expects an object that matches the ConfigureOptions interface, with optional properties for grouping stored keys/values. Required dependency: @capacitor/storage. Inputs are options (such as group name); output is a Promise resolving when configuration is applied. Options that are undefined are ignored.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure(options: ConfigureOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Confirmation Dialog Method Definition\nDESCRIPTION: TypeScript method signature for displaying confirmation dialogs. Shows the required ConfirmOptions parameter type and ConfirmResult return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/dialog.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(options: ConfirmOptions) => Promise<ConfirmResult>\n```\n\n----------------------------------------\n\nTITLE: Hiding the Splash Screen with Options Using Capacitor (TypeScript)\nDESCRIPTION: This TypeScript code snippet provides the method signature for hiding the splash screen via the Capacitor Splash Screen plugin. It takes optional HideOptions, such as fadeOutDuration, and returns a Promise resolving to void. Required dependencies are the Capacitor runtime and Splash Screen plugin. The main parameters are configurable options for hiding behavior, with a Promise indicating completion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: HideOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unlock Method in ScreenOrientationPlugin\nDESCRIPTION: Implementation of the unlock method in the plugin class, which calls the implementation class to release orientation locks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void unlock(PluginCall call) {\n   implementation.unlock();\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Web URLs to Local File URLs in Swift\nDESCRIPTION: This function definition allows plugins to translate a web URL (as used in the web view) into a local file URL on iOS. The method supports special schemes such as res:// and file:// to identify local resources. A valid webURL parameter should be provided, and the function returns an optional URL object for use in native file handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfunc localURL(fromWebURL webURL: URL?) -> URL?\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications Presentation Options\nDESCRIPTION: JSON configuration in capacitor.config.json to set the presentation options for push notifications when the app is in the foreground.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"PushNotifications\": {\n      \"presentationOptions\": [\"badge\", \"sound\", \"alert\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapType Enum in Capacitor Maps API\nDESCRIPTION: Enumerates the available map types for Capacitor Maps including Normal (basic map), Hybrid (satellite with roads/labels), Satellite (imagery without labels), Terrain (topographic data), and None (no base tiles).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nenum MapType {\n  Normal = 'Normal',\n  Hybrid = 'Hybrid',\n  Satellite = 'Satellite',\n  Terrain = 'Terrain',\n  None = 'None'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Delivered Notifications in Capacitor\nDESCRIPTION: Get a list of notifications that are visible on the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<DeliveredNotifications>\n```\n\n----------------------------------------\n\nTITLE: API: setScroll() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `setScroll()` method. It accepts an options object with an `isDisabled` boolean to enable or disable WebView scrolling when the keyboard is open. This method is only supported on iOS and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetScroll(options: { isDisabled: boolean; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Handling in Angular Component (TypeScript)\nDESCRIPTION: Demonstrates initializing push notifications within the `ngOnInit` lifecycle hook of an Angular component. It requests user permission, registers the device with APNS/FCM, and sets up listeners to handle registration success (`registration`), errors (`registrationError`), incoming notifications while the app is open (`pushNotificationReceived`), and notification tap events (`pushNotificationActionPerformed`), using `alert` for demonstration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then((result) => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration', (token: Token) => {\n      alert('Push registration success, token: ' + token.value);\n    });\n\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived', (notification: PushNotificationSchema) => {\n      alert('Push received: ' + JSON.stringify(notification));\n    });\n\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed', (notification: ActionPerformed) => {\n      alert('Push action performed: ' + JSON.stringify(notification));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Foreground Notification Options in TypeScript\nDESCRIPTION: Configures how push notifications are presented when the app is in the foreground on iOS using `capacitor.config.ts`. This TypeScript configuration achieves the same result as the JSON example, setting `presentationOptions` to include badge, sound, and alert. It includes the necessary type reference for the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/push-notifications\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    PushNotifications: {\n      presentationOptions: [\"badge\", \"sound\", \"alert\"],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Safe String Retrieval from Capacitor Plugin Call in Swift\nDESCRIPTION: Demonstrates the proper way to access and type-check a potentially null string value from a plugin call's options in Swift, using Capacitor's built-in getString method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif let value = call.getString(\"foo\") {\n    // GOOD: `value` is nil, so this block won't run\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Motion Plugin (Bash)\nDESCRIPTION: Provides the necessary shell commands to install the Capacitor Motion plugin package using npm and then synchronize the native project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/motion\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Web Server using npm (Bash)\nDESCRIPTION: Executes the `start` script defined in the project's `package.json` using npm. This command typically starts the local development web server required for Live Reload when not using the Ionic CLI's integrated command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Declaring Importance Type Alias - TypeScript\nDESCRIPTION: Establishes a TypeScript union of numeric literal types for Android notification importance, directly tying to Android's importance constants. No external dependencies. Used to configure channel importance, this expects an integer (1-5), and will influence how notifications are presented by the OS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Preferences Plugin via npm\nDESCRIPTION: This snippet shows the commands to install the Capacitor Preferences plugin using npm and then synchronize the native project dependencies using the Capacitor CLI (`npx cap sync`). Requires Node.js, npm, and an existing Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/preferences\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Camera API Method Definition\nDESCRIPTION: TypeScript interface definition for the getPhoto method showing the expected parameters and return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetPhoto(options: CameraOptions) => Promise<CameraPhoto>\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog API in TypeScript\nDESCRIPTION: API definition for showing an alert dialog using the Dialog.alert() method. Includes parameter type and return type information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/dialog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nalert(options: AlertOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard in JSON Configuration\nDESCRIPTION: JSON configuration example for the Keyboard plugin, setting resize mode, keyboard style, and the resizeOnFullScreen option for Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"DARK\",\n      \"resizeOnFullScreen\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Page with Options in TypeScript\nDESCRIPTION: TypeScript definition for the open() method, showing the OpenOptions interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopen(options: OpenOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Capacitor Docs Project\nDESCRIPTION: This code snippet shows the commands to install dependencies, build the project, and serve the Capacitor documentation site in development mode. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: Interface for plugin event listener handle with method to remove the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Capacitor Android\nDESCRIPTION: Shows how to trigger JavaScript events on the web view from the Android native side. These methods allow firing events on JavaScript EventTargets like window or document.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void triggerJSEvent(final String eventName, final String target)\npublic void triggerJSEvent(final String eventName, final String target, final String data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Echo Plugin in Java\nDESCRIPTION: Creates a simple Echo plugin class that demonstrates basic plugin structure with a method to echo back received values. Includes required Capacitor imports and plugin annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FirebaseInstanceID and FirebaseMessaging - Swift\nDESCRIPTION: Insert these two Swift import statements at the top of your AppDelegate.swift to enable advanced Firebase push notification handling—specifically, retrieving the FCM device token instead of the raw APNS token. These imports require the relevant Firebase CocoaPods (FirebaseInstanceID, Firebase/Messaging) to be present in your Podfile and installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport FirebaseInstanceID // Add this line after import FirebaseCore\nimport FirebaseMessaging\n```\n\n----------------------------------------\n\nTITLE: Removing Plugin Event Listeners in TypeScript\nDESCRIPTION: Demonstrates how to properly remove event listeners from a Capacitor plugin to prevent memory leaks and unexpected behavior. The remove method cleanly detaches the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Marker Type Definition\nDESCRIPTION: Defines a union type for map markers that supports both legacy Marker and advanced AdvancedMarkerElement types from Google Maps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\ngoogle.maps.Marker | google.maps.marker.AdvancedMarkerElement\n```\n\n----------------------------------------\n\nTITLE: Building Web Application\nDESCRIPTION: Command to build the web project before adding native platforms\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Capacitor App using npm init\nDESCRIPTION: This command uses npm's initializer feature to run the `@capacitor/app` package, which scaffolds a new Capacitor project structure in the current empty directory. It simplifies the initial setup process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/app\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Electron Platform Dependency\nDESCRIPTION: This command navigates into the Electron project directory and updates the Capacitor Electron platform package to version 2 using npm. This is specific to Capacitor projects targeting the Electron platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Electron\ncd electron\nnpm install @capacitor/electron@2\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS for Capacitor Text Zoom on iPads (JSON)\nDESCRIPTION: JSON configuration snippet to be added to the Capacitor configuration file (e.g., capacitor.config.json). Setting `preferredContentMode` to `mobile` under the `ios` key is necessary for the Text Zoom plugin to function correctly on iPads.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/text-zoom.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"preferredContentMode\": \"mobile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing all delivered notifications - Capacitor Plugin - TypeScript\nDESCRIPTION: Removes all notifications currently displayed on the notifications screen. No input parameters are required, and the output is a promise that resolves once the action completes. This method is available since version 1.0.0 and can be used to clear the user's notification view programmatically. No external dependencies except the Capacitor runtime and notification plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Facade Pattern in Java for Capacitor Local Notifications Plugin\nDESCRIPTION: This code snippet illustrates the use of the Facade design pattern in the Local Notifications plugin for Capacitor. It provides a simple interface to a complex subsystem, hiding the implementation details and exposing only the necessary functionality to the client.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n    super.load();\n    notificationStorage = new NotificationStorage(getContext());\n    manager = new LocalNotificationManager( … );\n    manager.createNotificationChannel();\n    notificationChannelManager = new NotificationChannelManager(getActivity());\n    staticBridge = this.bridge;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Server Settings\nDESCRIPTION: JSON configuration for setting up the server URL and cleartext settings in capacitor.config.json for Live Reload functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/live-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"url\": \"http://192.168.1.68:8100\",\n  \"cleartext\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Registering Echo Plugin in MainActivity\nDESCRIPTION: Shows how to register the custom Echo plugin in the Android MainActivity class using registerPlugin method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends BridgeActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        registerPlugin(EchoPlugin.class);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor iOS Platform\nDESCRIPTION: Command to update the Capacitor iOS platform to the latest version 3.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @capacitor/ios@latest-3\nnpx cap sync ios\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Core and CLI - Node Package Manager - Bash\nDESCRIPTION: These bash snippets show how to update the Capacitor CLI and Core packages to their latest versions using npm. This is necessary to keep the project up-to-date with new features, bug fixes, and security updates. Requires an initialized Node.js project with npm already configured. The commands update @capacitor/cli and @capacitor/core dependencies, ensuring that both development and runtime Capacitor components are current.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli\nnpm install @capacitor/core\n```\n\n----------------------------------------\n\nTITLE: Launching Intents without Results in Android Capacitor Plugins\nDESCRIPTION: This code shows how to present a native Android screen using Intents without expecting a result. It uses the ACTION_VIEW intent as an example.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nIntent intent = new Intent(Intent.ACTION_VIEW);\ngetActivity().startActivity(intent);\n```\n\n----------------------------------------\n\nTITLE: Unlinking Local Capacitor Plugin\nDESCRIPTION: This bash command shows how to unlink a local Capacitor plugin from the app using npm uninstall with the plugin package name.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall echo\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Certificate Details\nDESCRIPTION: Command to display the details of an existing keystore certificate, including the SHA256 fingerprint\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore my-release-key.keystore\n```\n\n----------------------------------------\n\nTITLE: Accessing Capacitor Bridge Instance in Java\nDESCRIPTION: Demonstrates accessing the Capacitor bridge from within an Android plugin. This is necessary for invoking bridge methods, such as configuration retrieval and JavaScript event emission. The snippet assumes plugin registration and proper setup within the Capacitor Android context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nthis.bridge\n```\n\n----------------------------------------\n\nTITLE: Android Plugin Annotation Update\nDESCRIPTION: Shows how to migrate from @NativePlugin to @CapacitorPlugin annotation including changes to permission handling and request codes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/plugins/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-@NativePlugin(\n+@CapacitorPlugin(\n     name = \"FooBar\",\n-    requestCodes = {\n-        FooBarPlugin.REQUEST_SOME_METHOD,\n-        FooBarPlugin.REQUEST_SOME_OTHER_METHOD\n-    },\n-    permissionRequestCode = FooBarPlugin.REQUEST_ALL_PERMISSIONS,\n-    permissions = { Manifest.permission.FOO, Manifest.permission.BAR }\n+    permissions = {\n+        @Permission(strings = { Manifest.permission.FOO }, alias = \"foo\"),\n+        @Permission(strings = { Manifest.permission.BAR }, alias = \"bar\")\n+    })\n )\n public class FooBarPlugin extends Plugin {\n     static final int REQUEST_SOME_METHOD = 10051;\n     static final int REQUEST_SOME_OTHER_METHOD = 10052;\n```\n\n----------------------------------------\n\nTITLE: Referencing Manifest Placeholders in AndroidManifest.xml - XML\nDESCRIPTION: Updates the AndroidManifest.xml to use placeholders for 'android:label', allowing the app name to change depending on selected product flavor. This leverages the Groovy product flavor setup and ensures correct branding per environment. Input is manifest XML, with expected manifestPlaceholders available via the Gradle config.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  ...snip...\n  android:label=\"${displayName}\">\n\n  <activity\n    ...snip...\n    android:label=\"${displayName}\">\n```\n\n----------------------------------------\n\nTITLE: Adding Push Notification Action Performed Listener in TypeScript\nDESCRIPTION: This method adds a listener for the 'pushNotificationActionPerformed' event. It takes an event name and a callback function as parameters, and returns a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationActionPerformed', listenerFunc: (notification: PushNotificationActionPerformed) => void) => PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Complete Android Activity Configuration with Deep Link Intent Filter\nDESCRIPTION: This XML snippet shows the complete Activity configuration in AndroidManifest.xml, including the main intent filter and the deep linking intent filter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n    android:name=\"com.netkosoft.beerswift.MainActivity\"\n    android:label=\"@string/title_activity_main\"\n    android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n    android:launchMode=\"singleTask\">\n\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Toast API Show Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the show method, which displays a Toast notification with configurable options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options: ShowOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Geolocation\nDESCRIPTION: Defines necessary permissions in `AndroidManifest.xml` for the Geolocation API on Android. `ACCESS_COARSE_LOCATION` and `ACCESS_FINE_LOCATION` grant permission to access location data. `uses-feature android.hardware.location.gps` declares that the app may use GPS, making it optional unless the app strictly requires GPS hardware.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Opening URL in External Browser with InAppBrowser\nDESCRIPTION: TypeScript code to open a URL in the device's external browser using the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nawait InAppBrowser.openInExternalBrowser({\n    url: \"https://www.google.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Activity Configuration with Intent Filter in AndroidManifest.xml\nDESCRIPTION: Complete XML configuration of an Android Activity including the Intent Filter for deep linking. Shows how the filter fits into the overall Activity declaration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n    android:name=\"com.netkosoft.beerswift.MainActivity\"\n    android:label=\"@string/title_activity_main\"\n    android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n    android:launchMode=\"singleTask\">\n\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with BackgroundRunner API in TypeScript\nDESCRIPTION: This TypeScript snippet presents the function signature for `requestPermissions()`. This Background Runner API method is used to request necessary permissions from the user for specific device APIs, as defined in the `options` parameter of type `RequestPermissionOptions`. The return type indicates the outcome of the permission request.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(options: RequestPermissionOptions) => any\n```\n\n----------------------------------------\n\nTITLE: Enabling Traffic Layer in Google Maps\nDESCRIPTION: Enables or disables the display of traffic information on the map based on the enabled parameter. Shows current traffic conditions when enabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nenableTrafficLayer(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform to Capacitor Project\nDESCRIPTION: Adds the Android platform to your Capacitor project, creating the necessary project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor App Plugin - Bash\nDESCRIPTION: These bash commands install the @capacitor/app package and synchronize the project with Capacitor. The first command installs the npm package, and the second ensures Capacitor syncs the native platform code. Dependencies: npm, Node.js, and Capacitor CLI must be installed. Input: bash shell. Output: package installation and sync.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Plugin Data Return Example\nDESCRIPTION: Shows how to return data back to the client using resolve() and reject() methods. Includes examples of structuring return data and error handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"added\", true);\nJSObject info = new JSObject();\ninfo.put(\"id\", \"unique-id-1234\");\nret.put(\"info\", info);\ncall.resolve(ret);\n```\n\nLANGUAGE: java\nCODE:\n```\ncall.reject(exception.getLocalizedMessage(), null, exception);\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Delivered Notifications in Capacitor (TypeScript)\nDESCRIPTION: Removes specific notifications from the user's notification center/tray based on the provided `DeliveredNotifications` object. The `delivered` parameter should contain the notifications to be removed. Returns a Promise that resolves when the removal is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Watch Connectivity\nDESCRIPTION: Code to be added to AppDelegate.swift to enable communication between iOS app and Apple Watch. Sets up the session delegate and activates the WCSession.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nassert(WCSession.isSupported(), \"This sample requires Watch Connectivity support!\")\nWCSession.default.delegate = CapWatchSessionDelegate.shared\nWCSession.default.activate()\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Defines the PermissionState type alias as a union of string literals representing different states of permission for the Geolocation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied'\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in AndroidManifest.xml\nDESCRIPTION: XML configuration showing how to use the displayName placeholder in the Android manifest for dynamic app naming.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  ...snip...\n  android:label=\"${displayName}\">\n\n  <activity\n    ...snip...\n    android:label=\"${displayName}\">\n```\n\n----------------------------------------\n\nTITLE: Removing Polygons from Google Maps\nDESCRIPTION: Removes multiple polygon shapes from the map using their IDs. Returns a Promise that resolves when all polygons have been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nremovePolygons(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening iOS project in Xcode using Capacitor\nDESCRIPTION: Command to open your iOS Capacitor project in Xcode using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Folder using Bash\nDESCRIPTION: Navigates the command line session into the newly created project directory named 'capApp/'. This step is necessary to run subsequent commands within the context of the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd capApp/\n```\n\n----------------------------------------\n\nTITLE: Declaring Visibility Type Alias - TypeScript\nDESCRIPTION: Creates a TypeScript union type for notification lock screen visibility with fixed numeric values (-1, 0, 1), mirroring Android's NotificationCompat VISIBILITY constants. No dependencies. Used for setting the visibility field of channels, limiting possible values to documented OS constants.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPerformed Interface in TypeScript\nDESCRIPTION: This code snippet defines the ActionPerformed interface, which represents the result of a user performing an action on a notification in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue?: string;\n  notification: LocalNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Pending Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript method signature defines 'cancel', a function for cancelling scheduled local notifications. Accepts CancelOptions specifying the notifications to cancel. Returns a void Promise and depends on the CancelOptions type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(options: CancelOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: ArrayBufferView Interface Definition - TypeScript\nDESCRIPTION: Defines the structure for array buffer views with buffer reference and byte information. This interface is used for typed array implementations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayBufferView {\n  buffer: ArrayBufferLike;\n  byteLength: number;\n  byteOffset: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Unlock Method in ScreenOrientation\nDESCRIPTION: Adds a method to unlock the screen orientation by setting the activity's requested orientation to unspecified, allowing the system to determine orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic void unlock() {\n   activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners\nDESCRIPTION: Method to remove all native event listeners for the Browser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor App Launcher Plugin in TypeScript\nDESCRIPTION: TypeScript example demonstrating how to import and use the `AppLauncher` plugin. It includes asynchronous functions `checkCanOpenUrl` to verify if an app URL/package can be opened and `openPortfolioPage` to launch an app using a specific URL scheme and path.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app-launcher.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLauncher } from '@capacitor/app-launcher';\n\nconst checkCanOpenUrl = async () => {\n  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });\n\n  console.log('Can open url: ', value);\n};\n\nconst openPortfolioPage = async () => {\n  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Hours (Local) with Date.setHours() in JavaScript\nDESCRIPTION: The `setHours()` method sets the hours for a specified date according to local time. It requires the hours value `hours` (0-23) and optionally accepts minutes `min` (0-59), seconds `sec` (0-59), and milliseconds `ms` (0-999). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nsetHours(hours: number, min?: number, sec?: number, ms?: number): number\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 3 for Android\nDESCRIPTION: Commands for installing the latest version of Capacitor 3 for Android and syncing the project. Updates the dependencies and ensures Android-specific files are properly configured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android@latest-3\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Device getInfo Method Type Definition\nDESCRIPTION: TypeScript definition for the getInfo() method that returns device/OS information\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/device.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<DeviceInfo>\n```\n\n----------------------------------------\n\nTITLE: Splash Screen Interface Definitions\nDESCRIPTION: TypeScript interface definitions for ShowOptions and HideOptions, specifying configuration parameters for splash screen behavior including auto-hide, fade durations, and show duration settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShowOptions {\n  autoHide?: boolean;\n  fadeInDuration?: number;  // default: 200\n  fadeOutDuration?: number; // default: 200\n  showDuration?: number;   // default: 3000\n}\n\ninterface HideOptions {\n  fadeOutDuration?: number; // default: 200\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Hardware Back Button in Capacitor (Android)\nDESCRIPTION: Adds a listener for hardware back button events on Android. Listening for this event disables the default back button behavior, requiring manual handling of navigation or app exit.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'backButton', listenerFunc: BackButtonListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unlock Function for Screen Orientation\nDESCRIPTION: Implements the unlock functionality that restores the original orientation settings. Uses both modern and legacy iOS approaches with proper error handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\npublic func unlock(completion: @escaping (Error?) -> Void) {\n  DispatchQueue.main.async {\n    self.capViewController?.supportedOrientations = self.supportedOrientations\n    if #available(iOS 16.0, *) {\n      if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {\n        windowScene.keyWindow?.rootViewController?.setNeedsUpdateOfSupportedInterfaceOrientations()\n        windowScene.requestGeometryUpdate(.iOS(interfaceOrientations: .all)) { error in\n          completion(error)\n        }\n      } else {\n        completion(ScreenOrientationError.noWindowScene)\n      }\n    } else {\n      UINavigationController.attemptRotationToDeviceOrientation()\n    }\n    completion(nil)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming App Target in Podfile (Ruby)\nDESCRIPTION: Illustrates the necessary change within the `ios/App/Podfile` when renaming the application's target in Xcode. The 'target' line needs to be updated to reflect the new application name ('MyRenamedApp' in this example). This step is crucial for Cocoapods to correctly link dependencies after renaming.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-target 'App' do\n+target 'MyRenamedApp' do\n   capacitor_pods\n   # Add your Pods here\n end\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from Capacitor Preferences in TypeScript\nDESCRIPTION: API definition for the `get` method. This asynchronous function retrieves the string value associated with a specific key from the persistent store. It accepts a `GetOptions` object containing the `key`. Returns a Promise resolving to a `GetResult` object, where the `value` property holds the retrieved string or `null` if the key is not found.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget(options: GetOptions) => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Defining GetUriOptions Interface for Filesystem Plugin - TypeScript\nDESCRIPTION: Declares the GetUriOptions interface, used to provide parameters when retrieving a file URI with Capacitor's Filesystem Plugin. Requires path (string) for the target file and directory (FilesystemDirectory) that determines the root for the path. Inputs are path and directory, output is used when invoking Filesystem.getUri(). Requires FilesystemDirectory enum defined elsewhere.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetUriOptions {\n  /** The path of the file to get the URI for */\n  path: string;\n  /** The FilesystemDirectory to get the file under */\n  directory: FilesystemDirectory;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteFileOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for deleting a file using the Capacitor Filesystem API. Requires the `path` of the file to delete and the `directory` it resides in.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DeleteFileOptions {\n  /**\n   * The path of the file to delete\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The Directory to delete the file from\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Android Platform and Syncing Project\nDESCRIPTION: These commands update the Capacitor Android platform package to version 2 using npm and then sync the project configuration to apply the updates to the native Android project. This step ensures the Android project reflects the latest platform changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Android\nnpm install @capacitor/android@2\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Capacitor Haptics 'selectionStart' Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Haptics.selectionStart` method. This method triggers a haptic hint indicating the start of a user selection process (e.g., pressing down on a control) and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectionStart() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Ionic Project with the CLI (bash)\nDESCRIPTION: This snippet provides the command to initialize a new Ionic project using the Ionic CLI. No additional dependencies are required before running this, but Node.js and npm should be installed. The command creates a new project folder and sets up the necessary files for an Ionic project; subsequent steps may include configuring Capacitor and platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/with-ionic.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nionic start\n\n```\n\n----------------------------------------\n\nTITLE: Getting Current Text Zoom Level\nDESCRIPTION: TypeScript method to retrieve the current text zoom level, which is represented as a decimal value (e.g., 1.2 is 120%).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/text-zoom.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget() => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Method Definition\nDESCRIPTION: TypeScript interface definition for the alert dialog method that shows a simple alert with a message and OK button.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/dialog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nalert(options: AlertOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Delivered Notifications - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Supplies the TypeScript declaration for removing specified notifications from the delivered notifications screen using the Capacitor plugin. Accepts a DeliveredNotifications object (with IDs or data of notifications to remove) and returns a Promise once completed. Typically used to clear particular notifications. Inputs: delivered (notifications to remove). Outputs: Promise after removal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard setStyle() Method Signature\nDESCRIPTION: Defines the `setStyle` method for programmatically setting the keyboard's visual style (e.g., 'dark' or 'light'). It accepts a `KeyboardStyleOptions` object as input. This method is only supported on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetStyle(options: KeyboardStyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Presenting Popovers with Centered Popover Helper in Swift\nDESCRIPTION: This snippet shows how to present a popover view controller on iPad devices using a helper function and the bridge's viewController property. setCenteredPopover is called to configure the popover before presenting. This is useful for plugins that need to display content in a modal popover and is tailored for iPad user interfaces.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nself.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Intents with Results in Android Plugins\nDESCRIPTION: Shows how to launch an activity for result and handle the returned data using @ActivityCallback annotation. This example demonstrates picking an image from the device gallery.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin()\nclass ImagePicker extends Plugin {\n\n  @PluginMethod()\n  public void pickImage(PluginCall call) {\n    Intent intent = new Intent(Intent.ACTION_PICK);\n    intent.setType(\"image/*\");\n\n    // Start the Activity for result using the name of the callback method\n    startActivityForResult(call, intent, \"pickImageResult\");\n  }\n\n  @ActivityCallback\n  private void pickImageResult(PluginCall call, ActivityResult result) {\n    if (call == null) {\n      return;\n    }\n\n    // Do something with the result data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pending Notifications Interface\nDESCRIPTION: TypeScript interfaces for handling pending local notifications and their schemas.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PendingResult {\n  notifications: PendingLocalNotificationSchema[];\n}\n\ninterface PendingLocalNotificationSchema {\n  title: string;\n  body: string;\n  id: number;\n  schedule: Schedule;\n  extra: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling iPad Orientation Lock via Info.plist (XML)\nDESCRIPTION: Shows the XML configuration key (`UIRequiresFullScreen`) to add to the iOS application's `Info.plist` file. Setting this key to `true` enforces full-screen mode on iPads, which is a requirement for enabling screen orientation locking on these devices, as they allow multitasking by default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>UIRequiresFullScreen</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Notification Icon in AndroidManifest (XML)\nDESCRIPTION: This XML snippet shows how to specify the default icon for push notifications within the `AndroidManifest.xml` file for an Android application. It uses a `meta-data` tag to associate the `com.google.firebase.messaging.default_notification_icon` name with a drawable resource (e.g., `@mipmap/push_icon_name`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.firebase.messaging.default_notification_icon\" android:resource=\"@mipmap/push_icon_name\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Functionality in Web Plugin\nDESCRIPTION: This code shows how to handle unimplemented functionality in a web plugin method. It throws an 'unimplemented' error with a descriptive message.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync getLocation(): Promise<Location> {\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n\n----------------------------------------\n\nTITLE: CapacitorCookies API Method: setCookie\nDESCRIPTION: TypeScript declaration for the setCookie method that writes a cookie to the device. Accepts SetCookieOptions containing URL, key, value, path, and expiration parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetCookie(options: SetCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Capacitor Haptics API in TypeScript\nDESCRIPTION: Provides example async functions demonstrating how to import and use different methods from the Capacitor Haptics API (`Haptics`, `ImpactStyle`). It covers triggering medium/light impacts, basic vibration, and the sequence for selection feedback (`selectionStart`, `selectionChanged`, `selectionEnd`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\nconst hapticsImpactMedium = async () => {\n  await Haptics.impact({ style: ImpactStyle.Medium });\n};\n\nconst hapticsImpactLight = async () => {\n  await Haptics.impact({ style: ImpactStyle.Light });\n};\n\nconst hapticsVibrate = async () => {\n  await Haptics.vibrate();\n};\n\nconst hapticsSelectionStart = async () => {\n  await Haptics.selectionStart();\n};\n\nconst hapticsSelectionChanged = async () => {\n  await Haptics.selectionChanged();\n};\n\nconst hapticsSelectionEnd = async () => {\n  await Haptics.selectionEnd();\n};\n```\n\n----------------------------------------\n\nTITLE: Adding App Event Listeners and Retrieving Launch URL (Capacitor, TypeScript)\nDESCRIPTION: Demonstrates how to use the Capacitor App plugin's addListener method to handle important application lifecycle and navigation events, including app state changes, URL opens, and restored results. Also shows how to asynchronously fetch the launch URL using getLaunchUrl. Requires '@capacitor/app' to be installed and imported. Listeners are registered with callback functions to receive event data when triggered. Inputs are event type strings and user-defined callbacks; outputs are listener handles and console logs. The pattern enables deep linking, state restoration, and foreground/background detection across platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from '@capacitor/app';\\n\\nApp.addListener('appStateChange', ({ isActive }) => {\\n  console.log('App state changed. Is active?', isActive);\\n});\\n\\nApp.addListener('appUrlOpen', data => {\\n  console.log('App opened with URL:', data);\\n});\\n\\nApp.addListener('appRestoredResult', data => {\\n  console.log('Restored state:', data);\\n});\\n\\nconst checkAppLaunchUrl = async () => {\\n  const { url } = await App.getLaunchUrl();\\n\\n  console.log('App opened with URL: ' + url);\\n};\n```\n\n----------------------------------------\n\nTITLE: Listening for Watch Commands in TypeScript\nDESCRIPTION: This method adds a listener for the 'runCommand' event from the watch. It returns a PluginListenerHandle for managing the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'runCommand', listenerFunc: (data: { command: string; }) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing Haptics Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/haptics plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/haptics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/haptics\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Building the Ionic Angular Web Assets\nDESCRIPTION: Executes the Ionic build process. This compiles the Angular application and generates the web assets into the `www` directory, which Capacitor uses for the native builds. This step must be run at least once before adding native platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/assets for splash screen and icon generation\nDESCRIPTION: Installs the @capacitor/assets package as a development dependency, which is required for generating platform-specific splash screens and icons.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/assets --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in strings.xml - XML\nDESCRIPTION: Adjusts the display name of the app by changing the 'app_name' string resource inside 'strings.xml'. This update reflects on the user's device launcher and system screens. No special dependencies required; the key parameter is the value of 'app_name'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\\\"app_name\\\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Reload Server URL in capacitor.config.json\nDESCRIPTION: This JSON snippet shows how to configure the `server` object within the `capacitor.config.json` file. The `url` property must be set to the IP address and port of the development web server running on the local network (e.g., `http://192.168.1.68:8100`). The `cleartext` flag allows non-HTTPS connections, often necessary for local development. This configuration tells the Capacitor app where to load web assets from during a Live Reload session.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/live-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"url\": \"http://192.168.1.68:8100\",\n  \"cleartext\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for External Storage (XML)\nDESCRIPTION: Adds required permissions to AndroidManifest.xml for accessing external storage on Android 10 and older when using Directory.Documents or Directory.ExternalStorage. READ_EXTERNAL_STORAGE allows reading, and WRITE_EXTERNAL_STORAGE allows writing to external storage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Type Alias in TypeScript\nDESCRIPTION: Defines the Importance type alias for specifying notification importance levels, referencing Android developer documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: Removing Polylines from Google Maps in TypeScript\nDESCRIPTION: Removes multiple polylines from the Google Map instance using an array of polyline IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nremovePolylines(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Camera Permission Methods\nDESCRIPTION: TypeScript API definitions for checking and requesting camera and photo album permissions required by the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(permissions?: CameraPluginPermissions | undefined) => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard addListener('keyboardWillHide') Method Signature\nDESCRIPTION: Defines the `addListener` method for subscribing to the `keyboardWillHide` event, which fires just before the keyboard begins to animate out of view. The listener function receives no arguments. Returns a `PluginListenerHandle`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardWillHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Listing notification channels - Capacitor Plugin - TypeScript\nDESCRIPTION: Retrieves a list of available notification channels on Android O (API 26) or higher. Does not require input parameters and returns a promise with an object containing channel information. Only available on Android; requires Capacitor plugin for notifications. Useful for managing or displaying user channel preferences.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: Building the Capacitor Plugin\nDESCRIPTION: Command to compile the plugin source code from the plugin directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Status Bar getInfo Method Definition\nDESCRIPTION: TypeScript definition for the getInfo method, which returns information about the current state of the status bar.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<StatusBarInfo>\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration in Capacitor Config (TypeScript)\nDESCRIPTION: Example of setting configuration values for a plugin named 'MyCoolPlugin' in the Capacitor configuration file. It demonstrates how to specify custom properties like 'style' and 'iconColor'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  appId: 'com.company.app',\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: '#FF0000'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Platform Information with getPlatform\nDESCRIPTION: Shows how to detect the current platform (web, ios, or android) using the getPlatform method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Marker Interface Definition\nDESCRIPTION: Interface defining properties for map markers including position, appearance, and interaction options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Marker {\n  coordinate: LatLng;\n  opacity?: number;\n  title?: string;\n  snippet?: string;\n  isFlat?: boolean;\n  iconUrl?: string;\n  iconSize?: Size;\n  iconOrigin?: Point;\n  iconAnchor?: Point;\n  tintColor?: { r: number; g: number; b: number; a: number; };\n  draggable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Android App from Command Line\nDESCRIPTION: This command builds the Android native project and outputs a signed AAB or APK file ready for distribution. It's useful for CI/CD pipelines or terminal-based workflows.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap build android\n```\n\n----------------------------------------\n\nTITLE: Getting Device Battery Information using Capacitor Device Plugin\nDESCRIPTION: Provides the TypeScript signature for the `getBatteryInfo()` method. This asynchronous function returns a Promise that resolves to a `BatteryInfo` object, containing details about the device's battery, such as charge level and charging status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetBatteryInfo() => Promise<BatteryInfo>\n```\n\n----------------------------------------\n\nTITLE: Defining MapPadding Interface in TypeScript\nDESCRIPTION: Specifies the padding settings for the visible region of the map view, including top, left, right, and bottom values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MapPadding {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode with Capacitor\nDESCRIPTION: Command to open the iOS project in Xcode using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Methods to Plugin Interface in TypeScript\nDESCRIPTION: This snippet shows how to add checkPermissions() and requestPermissions() methods to the plugin interface. Both methods return a Promise of PermissionStatus.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  checkPermissions(): Promise<PermissionStatus>;\n  requestPermissions(): Promise<PermissionStatus>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Polylines to Google Maps\nDESCRIPTION: Adds multiple polyline shapes to the map. Returns a Promise that resolves to an array of strings representing the unique IDs of the added polylines.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\naddPolylines(polylines: Polyline[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Enabling Capacitor in an Existing Ionic Project (Bash)\nDESCRIPTION: This command installs and initializes Capacitor within an existing Ionic Framework project. It integrates Capacitor tooling and prompts for app details like name and bundle ID if needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/with-ionic.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic integrations enable capacitor\n```\n\n----------------------------------------\n\nTITLE: Writing Files with Capacitor Filesystem API (writeFile)\nDESCRIPTION: Defines the `writeFile` method signature from the Capacitor Filesystem API. This asynchronous function takes `WriteFileOptions` (specifying path, data, optional directory, encoding, and recursive flag) and returns a Promise resolving to a `WriteFileResult` containing the URI of the written file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwriteFile(options: WriteFileOptions) => Promise<WriteFileResult>\n```\n\n----------------------------------------\n\nTITLE: Object with Null Values in TypeScript for Capacitor\nDESCRIPTION: Example of a JavaScript object containing null values being passed to a Capacitor plugin call, demonstrating how null values are represented in collections that will be processed by native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ 'foo': null, 'bar': [1, 2, null, 4]}\n```\n\n----------------------------------------\n\nTITLE: Showing the Status Bar (TypeScript)\nDESCRIPTION: Signature for the show method that displays the status bar. Optionally accepts AnimationOptions (supported on iOS) for show animation. Returns a Promise and requires the Capacitor plugin to be initialized. No output, just makes the status bar visible.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Copying Capacitor Configuration to Native Projects (Bash)\nDESCRIPTION: Uses the Capacitor CLI command `npx cap copy` to update the native iOS and Android projects with the latest configuration changes from `capacitor.config.json`, including the `server` settings needed for Live Reload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Defining the 'orientation' Event Listener Signature (TypeScript)\nDESCRIPTION: This TypeScript definition outlines the `addListener` method signature for subscribing to device orientation ('orientation') events. It requires 'orientation' as the event name and an `OrientationListener` function as the callback. It returns a Promise resolving to a `PluginListenerHandle`, while also providing the handle type directly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/motion.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Listening to Cluster Info Window Click Events - TypeScript\nDESCRIPTION: Sets or removes a callback triggered when a cluster info window is clicked. The callback is optional and of the MapListenerCallback<ClusterClickCallbackData> type. Returns a void Promise and is asynchronous.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnClusterInfoWindowClickListener(callback?: MapListenerCallback<ClusterClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Method Definitions to Plugin Interface (TypeScript Diff)\nDESCRIPTION: This diff snippet illustrates adding the required `checkPermissions` and `requestPermissions` method signatures to the main plugin interface (`EchoPlugin`). Both methods are expected to return a `Promise` resolving with the `PermissionStatus` object defined previously, ensuring consistency across platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n+  checkPermissions(): Promise<PermissionStatus>;\n+  requestPermissions(): Promise<PermissionStatus>;\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Plugin\nDESCRIPTION: Commands for installing the Capacitor plugin and syncing the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor-community/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Removing USE_PUSH compilation condition\nDESCRIPTION: Updates AppDelegate.swift to remove the USE_PUSH compilation condition while keeping the push notification handling methods when using push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n\n-    #if USE_PUSH\n\n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n     }\n\n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n     }\n\n-#endif\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Storage Mock in TypeScript\nDESCRIPTION: Implementation of a basic Storage plugin mock with get, set, and clear methods that return promises. This mock object replaces the actual Capacitor Storage plugin during testing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/mocking-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Storage = {\n  async get(data: { key: string }): Promise<{ value: string | undefined }> {\n    return { value: undefined };\n  },\n\n  async set(data: { key: string; value: string }): Promise<void> {},\n  async clear(): Promise<void> {},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FormData Interface in TypeScript\nDESCRIPTION: Defines the FormData interface with methods for manipulating form data. It includes methods for appending, deleting, getting, and setting key-value pairs, as well as checking for the existence of keys and iterating over entries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormData {\n  append(name: string, value: string | Blob, fileName?: string): void;\n  delete(name: string): void;\n  get(name: string): FormDataEntryValue | null;\n  getAll(name: string): FormDataEntryValue[];\n  has(name: string): boolean;\n  set(name: string, value: string | Blob, fileName?: string): void;\n  forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CameraIdleCallbackData Interface in TypeScript\nDESCRIPTION: Specifies the data structure for the camera idle callback, including map ID, bounds, bearing, latitude, longitude, tilt, and zoom.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CameraIdleCallbackData {\n  mapId: string;\n  bounds: LatLngBounds;\n  bearing: number;\n  latitude: number;\n  longitude: number;\n  tilt: number;\n  zoom: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Page with Options using Browser.open - TypeScript\nDESCRIPTION: This TypeScript snippet defines the Browser.open method signature, outlining how to open a browser page with provided options. Requires @capacitor/browser as a dependency. Accepts an options object (OpenOptions) with parameters like url, windowName, toolbarColor, and iOS-specific presentation settings. Returns a Promise<void>. Limitations: Platform-specific behavior for some options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopen(options: OpenOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating notification methods to use NSNotification extensions\nDESCRIPTION: Updates AppDelegate.swift to use NSNotification extensions instead of hard-coded CAPNotifications for handling status bar taps and push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n         super.touchesBegan(touches, with: event)\n\n         let statusBarRect = UIApplication.shared.statusBarFrame\n         guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\n\n         if statusBarRect.contains(touchPoint) {\n-            NotificationCenter.default.post(CAPBridge.statusBarTappedNotification)\n+            NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\n         }\n     }\n\n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n+        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n     }\n\n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n+        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n     }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in onCreate for Android - diff (Java)\nDESCRIPTION: This snippet shows the update to MainActivity.java to register a custom plugin within onCreate. In Capacitor 3, registration is only needed for in-app or bespoke plugins not installed via npm packages. Insert registerPlugin(PluginInMyApp.class) to the superclass’s onCreate. Requires Capacitor v3, custom plugin Java class, and standard Android app context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\\n     @Override\\n     public void onCreate(Bundle savedInstanceState) {\\n         super.onCreate(savedInstanceState);\\n\\n+        registerPlugin(PluginInMyApp.class);\\n     }\\n }\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Security Policy in HTML for Capacitor Apps\nDESCRIPTION: This code snippet demonstrates how to add a Content Security Policy (CSP) meta tag to the HTML head of a Capacitor app. The example policy allows resources from the current origin and 'foo.com'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self' foo.com\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Hiding the Status Bar (TypeScript)\nDESCRIPTION: Signature for the hide method that hides the status bar. Optionally takes AnimationOptions (iOS) to specify animation style. Returns a Promise; requires plugin initialization. Used to temporarily remove the status bar from view, no output returned.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Output Target\nDESCRIPTION: Configuration setting for TypeScript projects to set the output target to es2017 in tsconfig.json for web plugin development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms\nDESCRIPTION: Commands to add iOS and Android platforms to the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Assets Package\nDESCRIPTION: Command to install the @capacitor/assets package as a development dependency for generating app resources.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/assets --save-dev\n```\n\n----------------------------------------\n\nTITLE: Remove Delivered Notifications - TypeScript\nDESCRIPTION: Method to remove all delivered notifications from the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Capacitor Plugin in Objective-C\nDESCRIPTION: This Objective-C code snippet shows how to register a custom Capacitor plugin using the required macros. It makes the 'MyPlugin' and its 'echo' method available to the Capacitor web runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Android Asset Links JSON Configuration\nDESCRIPTION: JSON configuration for the Android asset links file that establishes a connection between a website and an Android app. This file must be hosted at /.well-known/assetlinks.json on your website.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"com.netkosoft.beerswift\",\n      \"sha256_cert_fingerprints\": [\"43:12:D4:27:D7:C4:14...\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Signaling Unimplemented Method in Capacitor Plugin (Swift)\nDESCRIPTION: This Swift snippet is used in a Capacitor iOS plugin to explicitly signal that a particular method is not implemented on the iOS platform. It leverages call.unimplemented with a custom message to notify callers that the requested functionality is unavailable. Requires a valid CAPPluginCall context. The main input is the method call; the output is an error propagated through the Capacitor plugin interface. Limitation: Should only be used for methods that make no sense or are truly unsupported on the platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatRequiresAndroid(_ call: CAPPluginCall) {\n    call.unimplemented(\"Not implemented on iOS.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying ProGuard Keep Rules for Plugin Code - Plaintext\nDESCRIPTION: These ProGuard directives are intended for the proguard-rules.pro file in an Android project. The first rule tells ProGuard to keep all classes in the com.mythirdpartyplugin package; the second rule keeps all public classes that extend com.getcapacitor.Plugin, effectively disabling code shrinking for these plugin classes. This prevents issues where ProGuard removes necessary classes or methods required at runtime by plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-keep class com.mythirdpartyplugin.** { *; }\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-keep public class * extends com.getcapacitor.Plugin\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation (Bash)\nDESCRIPTION: This command checks if Node.js is installed correctly and displays its version. Node.js (version 18 or higher) is a core requirement for any Capacitor development. The expected output is the installed version number, like 'v20.9.0'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n# v20.9.0\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Methods Interface\nDESCRIPTION: Interface definitions for common array manipulation methods including reverse, set, slice, some, sort, and other array operations for Uint8Array type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nreverse(): Uint8Array\nset(array: ArrayLike<number>, offset?: number): void\nslice(start?: number, end?: number): Uint8Array\nsome(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean\nsort(compareFn?: (a: number, b: number) => number): this\nsubarray(begin?: number, end?: number): Uint8Array\ntoLocaleString(): string\ntoString(): string\nvalueOf(): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining AbortSignal Interface in TypeScript\nDESCRIPTION: This snippet defines the AbortSignal interface with its properties and methods. It includes the 'aborted' property and 'onabort' event handler, as well as methods for adding and removing event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AbortSignal {\n  aborted: boolean;\n  onabort: (this: AbortSignal, ev: Event) => any;\n  addEventListener<K extends \"abort\">(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener<K extends \"abort\">(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mobile Project Configuration with TypeScript\nDESCRIPTION: Demonstrates how to initialize and load a mobile project using @trapezedev/project library with TypeScript. Sets up configuration for iOS and Android project paths.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/automated-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MobileProject, MobileProjectConfig } from '@trapezedev/project';\n\n// This takes a MobileProjectConfig\n// to know where the ios and android projects are\nconst config: MobileProjectConfig = {\n  ios: {\n    path: 'ios/App',\n  },\n  android: {\n    path: 'android',\n  },\n};\n\nconst project = new MobileProject(process.cwd(), config);\nawait project.load();\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Community Admob Plugin (Shell)\nDESCRIPTION: Installs the `@capacitor-community/admob` npm package, which provides Google Admob functionality for Capacitor apps. It also runs `npx cap update` to synchronize the native iOS and Android projects with the newly added plugin. Requires an existing Capacitor project and npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/ads.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/admob\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notification Plugin in capacitor.config.json - JSON\nDESCRIPTION: This JSON configuration sets default properties for local notifications in capacitor.config.json, including the status bar icon, icon color, and sound. Place this in the root of your Capacitor project's config file. Keys like 'smallIcon', 'iconColor', and 'sound' determine the appearance and alert sound for notifications. Only available for Android and requires corresponding resources (icon, audio file) to be present.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"LocalNotifications\\\": {\\n      \\\"smallIcon\\\": \\\"ic_stat_icon_config_sample\\\",\\n      \\\"iconColor\\\": \\\"#488AFF\\\",\\n      \\\"sound\\\": \\\"beep.wav\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encoding Enum in TypeScript\nDESCRIPTION: Enumeration of text encoding options supported by the Capacitor File System plugin with platform compatibility details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nenum Encoding {\n  UTF8 = 'utf8',    // Eight-bit UCS Transformation Format\n  ASCII = 'ascii',  // Seven-bit ASCII (Android only)\n  UTF16 = 'utf16'   // Sixteen-bit UCS Transformation Format (Android only)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Weak References in iOS Plugins\nDESCRIPTION: Example demonstrating the change from strong to weak references in iOS plugins, requiring optional chaining when accessing the bridge and handling optional return values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-bridge.presentVC(myViewController, animated: true, completion: nil)\n+bridge?.presentVC(myViewController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Adding Listener for Received Notifications in Capacitor\nDESCRIPTION: Sets up a listener for when notifications are displayed. Takes an event name and a callback function that receives the notification data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationReceived', listenerFunc: (notification: LocalNotificationSchema) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation with Capacitor API (TypeScript)\nDESCRIPTION: Defines the `unlock()` method signature from the Capacitor Screen Orientation plugin API. This asynchronous function takes no arguments and releases any previously set screen orientation lock, allowing the orientation to change freely based on device rotation. It returns a Promise that resolves once the screen is unlocked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nunlock() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Map Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when the map is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMapClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing All Delivered Notifications in Capacitor\nDESCRIPTION: Remove all notifications from the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/dialog via NPM and Syncing Capacitor - Bash\nDESCRIPTION: Shows the commands needed to install the @capacitor/dialog plugin using npm and synchronize with Capacitor. Requires Node.js and npm to be installed in the environment. This installs the dialog package and runs the Capacitor sync command to update native projects. No parameters are needed, and output consists of updated local dependencies and native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/dialog\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for React Deep Link Handling\nDESCRIPTION: Imports necessary modules for handling deep links in a React application. This includes `React` and `useEffect` hook, `useHistory` hook from `react-router-dom` for navigation, and the `App` plugin (aliased as `CapApp`) from `@capacitor/core`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Plugins } from '@capacitor/core';\nconst { App: CapApp } = Plugins;\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications Plugin in capacitor.config.json - JSON\nDESCRIPTION: This snippet demonstrates how to define Local Notifications plugin configuration options within the capacitor.config.json file. It sets Android-specific properties such as smallIcon, iconColor, and sound, customizing how notifications appear on the device. Make sure the smallIcon resource exists in the app's res/drawable folder and the sound file is correctly bundled. Inputs are standard JSON key-value pairs, and outputs affect native notification behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"LocalNotifications\\\": {\\n      \\\"smallIcon\\\": \\\"ic_stat_icon_config_sample\\\",\\n      \\\"iconColor\\\": \\\"#488AFF\\\",\\n      \\\"sound\\\": \\\"beep.wav\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the requestPermissions API Method in TypeScript\nDESCRIPTION: Type definition for the `requestPermissions` method. It optionally accepts a `GeolocationPluginPermissions` object (though typically not needed as it requests standard location permissions) and returns a `Promise` resolving with the `PermissionStatus` after prompting the user if necessary. It throws an error if system-level location services are disabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(permissions?: GeolocationPluginPermissions | undefined) => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Deprecated and Recommended Plugin Imports (TypeScript)\nDESCRIPTION: These code snippets show the old vs. new way to import plugins in Capacitor. The first uses the deprecated Plugins object from @capacitor/core, while the recommended new way directly imports from the plugin package. The old method works for backwards compatibility but is discouraged; plugin packages must support Capacitor 3 for direct imports.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nimport { Plugins } from '@capacitor/core';\nconst { AnyPlugin } = Plugins;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nimport { AnyPlugin } from 'any-plugin';\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Methods to a Capacitor iOS Plugin\nDESCRIPTION: Shows how to add the checkPermissions() and requestPermissions() methods to a Swift plugin class to implement the permissions pattern for iOS functionality that requires user consent.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n    ...\n\n    @objc override public func checkPermissions(_ call: CAPPluginCall) {\n        // TODO\n    }\n\n    @objc override public func requestPermissions(_ call: CAPPluginCall) {\n        // TODO\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Files Structure\nDESCRIPTION: Required folder structure and file naming convention for organizing icon and splash screen source images.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nresources/\n├── icon-only.png\n├── icon-foreground.png\n├── icon-background.png\n├── splash.png\n└── splash-dark.png\n```\n\n----------------------------------------\n\nTITLE: Defining ReaddirResult Interface in TypeScript\nDESCRIPTION: Defines the result structure returned by the `readdir` (read directory) operation in the Capacitor Filesystem API. It contains an array of `FileInfo` objects representing the files and subdirectories within the specified directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nFileInfo[]\n```\n\n----------------------------------------\n\nTITLE: Event Handling in TypeScript\nDESCRIPTION: Example of how to listen for plugin events in TypeScript client code, including adding and removing event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPlugins.MyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n\nconst myPluginEventListener = Plugins.MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Enumerating PermissionState Union Type in TypeScript\nDESCRIPTION: Defines permissible states for a geolocation permission as a string literal union: 'prompt', 'prompt-with-rationale', 'granted', or 'denied'. This restricts permission state fields and function results to these values, enforcing stricter type safety. Used throughout permissions-related flows in the plugin; no external dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'prompt' | 'prompt-with-rationale' | 'granted' | 'denied'\n```\n\n----------------------------------------\n\nTITLE: Updating Native Projects After Code Changes using Bash\nDESCRIPTION: Runs `ionic build` to regenerate the web assets and then `npx cap copy` to copy these updated assets into the native iOS and Android projects. This sequence is necessary after making changes to the web application code (like adding the push notification logic) to ensure the native builds use the latest version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Data in Plugin Methods - Swift\nDESCRIPTION: This code example demonstrates advanced parameter extraction within a Capacitor plugin method. Using CAPPluginCall's convenience methods (getString, getObject, getBool), required and optional parameters are retrieved, with default fallbacks applied. The call is rejected if a necessary option is missing, enforcing robust input validation. Intended for use inside a CAPPlugin subclass method for strongly-typed argument access.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBool(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPerformed Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the ActionPerformed object, which contains information about a performed action on a notification, including the action ID, input value, and original notification schema.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue?: string;\n  notification: LocalNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/inappbrowser Plugin using Bash\nDESCRIPTION: Installs the `@capacitor/inappbrowser` package using npm and then syncs the native project dependencies using the Capacitor CLI (`npx cap sync`). This command is typically run in the root of a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/inappbrowser\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: JavaScript Workaround for ion-input Autofill\nDESCRIPTION: JavaScript code to handle a WebKit bug related to ion-input autofill. Adds an event listener to update the password value when changed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/autofill-credentials.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('pwd').children[0].addEventListener('change', (e) => {\n  this.password = (e.target as any).value;      \n});\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin in Android\nDESCRIPTION: Diff showing the update of the Google Services plugin version in the Android build.gradle file for Capacitor 7.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.2.1'\n-       classpath 'com.google.gms:google-services:4.4.0'\n+       classpath 'com.google.gms:google-services:4.4.2'\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterClickCallbackData Interface in TypeScript\nDESCRIPTION: Specifies the data structure for the cluster click callback, including map ID, latitude, longitude, size, and an array of marker data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClusterClickCallbackData {\n  mapId: string;\n  latitude: number;\n  longitude: number;\n  size: number;\n  items: MarkerCallbackData[];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Map Type for Google Maps in TypeScript\nDESCRIPTION: Sets the map type for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nsetMapType(mapType: MapType) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the GalleryPhotos Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `GalleryPhotos` which represents the result object when multiple photos are picked using the Capacitor Camera plugin. It contains a single property `photos` which is an array of `GalleryPhoto` objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryPhotos {\n  /**\n   * Array of all the picked photos.\n   * @since 1.2.0\n   */\n  photos: GalleryPhoto[];\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Assets Configuration\nDESCRIPTION: JSON configuration for angular.json to include .well-known directory in the build output\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"glob\": \"**/*\",\n  \"input\": \"src/.well-known\",\n  \"output\": \".well-known/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Marker Clustering for Google Maps in TypeScript\nDESCRIPTION: Enables marker clustering with an optional minimum cluster size. Default is 4 markers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nenableClustering(minClusterSize?: number | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rule: Keep All Plugin Base Classes - ProGuard\nDESCRIPTION: Exempts all classes extending com.getcapacitor.Plugin from being processed by ProGuard. Add this line to the proguard-rules.pro file to prevent issues when all plugins need to be excluded from shrinking/obfuscation. Use with caution since this will prevent ProGuard optimizations for all plugin code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: proguard\nCODE:\n```\n-keep public class * extends com.getcapacitor.Plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Echo Plugin in Java\nDESCRIPTION: A simple Java implementation of an Echo plugin that demonstrates core plugin components including receiving and returning data. The plugin extends com.getcapacitor.Plugin and uses @NativePlugin annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@NativePlugin()\npublic class EchoPlugin extends Plugin {\n    public void load() {\n        // Called when the plugin is first constructed in the bridge\n    }\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.success(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Lock Method in Swift\nDESCRIPTION: This method locks the screen orientation to a specified type. It sets the device orientation and attempts to rotate the UI accordingly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\npublic func lock(_ orientationType: String, completion: @escaping (UIInterfaceOrientationMask) -> Void) {\n  DispatchQueue.main.async {\n    let mask = self.fromOrientationTypeToMask(orientationType)\n    let orientation = self.fromOrientationTypeToInt(orientationType)\n    UIDevice.current.setValue(orientation, forKey: \"orientation\")\n    UINavigationController.attemptRotationToDeviceOrientation()\n    completion(mask)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Defines the possible permission states for geolocation access: prompt, prompt-with-rationale, granted, or denied\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied'\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Capacitor iOS Plugin Call in Swift\nDESCRIPTION: Shows how to reject a plugin call with an error message, code, and Error instance\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ncall.reject(error.localizedDescription, nil, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Routing in Capacitor with Vue Router\nDESCRIPTION: Adds an event listener to the Capacitor `App` plugin's `appUrlOpen` event. When triggered by a deep link, the callback extracts the URL path (`slug`) and uses the `router.push()` method of the Vue Router instance to navigate the application to the corresponding route.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nApp.addListener('appUrlOpen', function (data) {\n  // Example url: https://beerswift.app/tabs/tabs2\n  // slug = /tabs/tabs2\n  const slug = data.url.split('.app').pop();\n\n  // We only push to the route if there is a slug present\n  if (slug) {\n    router.push({\n      path: slug,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Notification Action Listener in Capacitor (TypeScript)\nDESCRIPTION: Method to add an event listener for when a user performs an action on a notification, such as tapping it. The callback receives details about the action performed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationActionPerformed', listenerFunc: (notificationAction: ActionPerformed) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Creating Common Variables for Android\nDESCRIPTION: This snippet shows the content of a 'variables.gradle' file that defines common variables for the Android project, including SDK versions and dependency versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\next {\n  minSdkVersion = 21\n  compileSdkVersion = 29\n  targetSdkVersion = 29\n  androidxAppCompatVersion = '1.1.0'\n  androidxCoreVersion =  '1.2.0'\n  androidxMaterialVersion =  '1.1.0-rc02'\n  androidxBrowserVersion =  '2.0.0'\n  androidxLocalbroadcastmanagerVersion =  '1.0.0'\n  firebaseMessagingVersion =  '20.1.2'\n  playServicesLocationVersion =  '17.0.0'\n  junitVersion =  '4.12'\n  androidxJunitVersion =  '1.1.1'\n  androidxEspressoCoreVersion =  '3.2.0'\n  cordovaAndroidVersion =  '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Channel object used in local notifications. It includes properties for channel configuration such as ID, name, description, sound, importance, visibility, and more.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description: string;\n  sound?: string;\n  importance?: Importance;\n  visibility?: Visibility;\n  lights?: boolean;\n  lightColor?: string;\n  vibration?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Bash Output of Plugin Logs\nDESCRIPTION: This snippet shows example log outputs printed to the Xcode console when invoking the ScreenOrientation plugin methods. It demonstrates the interoperation between native Swift code resolving a plugin call and the corresponding message delivered to the JavaScript side. The output is for debugging and informational purposes only.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n\\u26a1\\ufe0f  To Native ->  ScreenOrientation orientation 115962915\\n\\u26a1\\ufe0f  TO JS {\\\"type\\\":\\\"portrait-primary\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining MarkerCallbackData Interface in TypeScript\nDESCRIPTION: Specifies the data structure for marker callback data, including marker ID, latitude, longitude, title, and snippet.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MarkerCallbackData {\n  markerId: string;\n  latitude: number;\n  longitude: number;\n  title: string;\n  snippet: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Device API in Capacitor\nDESCRIPTION: Example showing how to use Device.getInfo() and Device.getBatteryInfo() to retrieve device information and battery status. The code demonstrates the structure of returned data including system info, app details, and battery metrics.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/device.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n\nconst { Device } = Plugins;\n\nconst info = await Device.getInfo();\nconsole.log(info);\n\n// Example output:\n{\n  \"diskFree\": 12228108288,\n  \"appVersion\": \"1.0.2\",\n  \"appBuild\": \"123\",\n  \"appId\": \"com.capacitorjs.myapp\",\n  \"appName\": \"MyApp\",\n  \"operatingSystem\": \"ios\",\n  \"osVersion\": \"11.2\",\n  \"platform\": \"ios\",\n  \"memUsed\": 93851648,\n  \"diskTotal\": 499054952448,\n  \"model\": \"iPhone\",\n  \"manufacturer\": \"Apple\",\n  \"uuid\": \"84AE7AA1-7000-4696-8A74-4FD588A4A5C7\",\n  \"isVirtual\":true\n}\n\nconst info = await Device.getBatteryInfo();\nconsole.log(info);\n\n// Example output:\n{\n  \"batteryLevel\": -1,\n  \"isCharging\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notification Registration Events - Swift\nDESCRIPTION: These two Swift methods handle the successful and failed registration for remote notifications in an iOS app using Firebase Messaging. Dependencies: Firebase Messaging SDK must be imported and configured. The first method assigns the device's APNS token to Firebase Messaging and posts notifications based on registration success or failure. The second method posts a notification in case registration fails. Inputs: deviceToken or error from system callbacks. Outputs: Posts custom notifications to NotificationCenter. Limitation: Should be added to the AppDelegate.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  Messaging.messaging().apnsToken = deviceToken\n  Messaging.messaging().token(completion: { (token, error) in\n    if let error = error {\n        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n    } else if let token = token {\n        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n    }\n  })\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Schedule Exact Alarm Permission in AndroidManifest - XML\nDESCRIPTION: Adds the SCHEDULE_EXACT_ALARM permission to AndroidManifest.xml for precise alarm scheduling on Android 12+. Required for exact scheduling of notifications when running background tasks; does not guarantee precision if users disable it in settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.SCHEDULE_EXACT_ALARM\\\" />\n```\n\n----------------------------------------\n\nTITLE: Updating FileProvider Paths for Android\nDESCRIPTION: This diff snippet shows how to update the file_paths.xml file to add the caches folder to FileProvider paths, avoiding permission errors when editing gallery images.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <external-path name=\"my_images\" path=\".\" />\n+    <cache-path name=\"my_cache_images\" path=\".\" />\n </paths>\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Unlocking\nDESCRIPTION: Method to unlock the screen orientation by setting the activity's requested orientation to unspecified.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic void unlock() {\n   activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Dependencies\nDESCRIPTION: These commands update Capacitor core, iOS, Android, and CLI to the latest versions. It's important to keep all Capacitor components at the same version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core @capacitor/ios @capacitor/android\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Generating and copying resource images for iOS and Android\nDESCRIPTION: These commands use cordova-res to generate all necessary images for iOS and Android platforms, and then copy them into the respective native projects. The --skip-config flag is used to skip modifying config files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/splash-screens-and-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cordova-res ios --skip-config --copy\n$ cordova-res android --skip-config --copy\n```\n\n----------------------------------------\n\nTITLE: Registering Web Plugins using registerPlugin API (TypeScript)\nDESCRIPTION: Demonstrates migrating from deprecated registerWebPlugin to the new registerPlugin API in Capacitor 3 Web plugins (TypeScript). Shows lazy loading of web and electron plugins with dynamic imports, returning an instance wrapped with the appropriate type. Inputs: plugin name and module definition. Outputs: exported plugin instance and type definitions. Dependencies: @capacitor/core package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\nimport type { CoolPlugin } from './definitions';\n\nconst MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {\n  web: () => import('./web').then(m => new m.MyCoolPluginWeb()),\n  // electron: () => (\"./electron\").then(m => new m.MyCoolPluginElectron())\n});\n\nexport * from './definitions';\nexport { MyCoolPlugin };\n```\n\n----------------------------------------\n\nTITLE: Syncing Project with Native Assets - Capacitor CLI - Bash\nDESCRIPTION: This bash snippet demonstrates the Capacitor CLI command to synchronize web assets and plugins with the native Android/iOS projects. It is essential to run this after installing new plugins, making changes to web assets, or when initializing or updating native projects. Requires Node.js, Capacitor CLI, and a configured project. Inputs and outputs are managed through the CLI, with the expected output being up-to-date native projects containing the latest web build and plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Capacitor Plugin\nDESCRIPTION: Commands to install the Clipboard Capacitor plugin and sync the project. This installs the latest version compatible with Capacitor 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/clipboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/clipboard@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining the CameraResultType Enum in TypeScript\nDESCRIPTION: Defines the TypeScript enum `CameraResultType` which specifies the desired format for the returned image data from the Capacitor Camera plugin. Options are 'uri' (file path), 'base64' (Base64 string), or 'dataUrl' (Base64 string with data URL scheme).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraResultType {\n  /** Return photo as a file URI */\n  Uri = 'uri',\n  /** Return photo as a base64 string */\n  Base64 = 'base64',\n  /** Return photo as a data URL string */\n  DataUrl = 'dataUrl'\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Capacitor CLI cap run Command\nDESCRIPTION: This command runs the sync operation and then builds and deploys the native app to a target device. It requires specifying the platform (android or ios) and supports various options like flavor selection, live reload, and target device specification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using convertFileSrc in TypeScript\nDESCRIPTION: Shows the type signature for the `convertFileSrc` function and provides an example of its use. This function converts a native device file path (e.g., from the Filesystem plugin) into a URL accessible by the Web View, handling protocol differences between `file://` and `http://`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconvertFileSrc: (filePath: string) => string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation to Landscape in Capacitor\nDESCRIPTION: This code snippet shows how to lock the screen orientation to landscape mode using the ScreenOrientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.lock({ orientation: \"landscape-primary\" })}\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Method in ScreenOrientationPlugin\nDESCRIPTION: This snippet shows how to implement the orientation method in the ScreenOrientationPlugin class, which uses the ScreenOrientation implementation to get the current orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugins.ScreenOrientation;\n\nimport com.getcapacitor.JSObject;\n/* Remaining imports omitted for brevity */\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   private ScreenOrientation implementation;\n\n   @Override\n   public void load() {\n       implementation = new ScreenOrientation(getActivity());\n   }\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       JSObject ret = new JSObject();\n       String type = implementation.getCurrentOrientationType();\n       ret.put(\"type\", type);\n       call.resolve(ret);\n   }\n\n   /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Building Capacitor App and Adding Platforms\nDESCRIPTION: Commands to build a Capacitor app and add iOS and Android platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Typing a Capacitor Plugin with TypeScript Interfaces\nDESCRIPTION: This TypeScript snippet demonstrates extending the frontend registration of a Capacitor plugin by providing an interface for static type checking. It defines an EchoPlugin interface for the echo method, specifying parameter and return types. The generic parameter on registerPlugin ensures that Echo is strongly typed. Key dependencies are TypeScript and @capacitor/core. Inputs are strictly defined for the plugin method, and autocompletion plus type safety is enabled throughout consuming code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n}\n\nconst Echo = registerPlugin<EchoPlugin>('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter for Android Deep Linking\nDESCRIPTION: XML snippet to add an Intent Filter to the AndroidManifest.xml file, enabling the app to handle deep links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading Clipboard Data with Capacitor Clipboard in TypeScript\nDESCRIPTION: Provides an example of using the Capacitor Clipboard API for copying data to and reading data from the system clipboard in a TypeScript context. It uses asynchronous functions to interact with the plugin's write and read APIs. The writeToClipboard function writes a string to the clipboard, while checkClipboard reads and logs the clipboard's content and type. Requires @capacitor/clipboard as a project dependency and is compatible with Capacitor v1.0.0 and above. Inputs/outputs are determined by the Clipboard plugin's API contract.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/clipboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clipboard } from '@capacitor/clipboard';\n\nconst writeToClipboard = async () => {\n  await Clipboard.write({\n    string: \"Hello World!\"\n  });\n};\n\nconst checkClipboard = async () => {\n  const { type, value } = await Clipboard.read();\n\n  console.log(`Got ${type} from clipboard: ${value}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable API Error in Web Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to handle cases where a web API is not available in the browser. It uses the 'unavailable' error from Capacitor's WebPlugin class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync getLocation(): Promise<Location> {\n  if (typeof navigator === 'undefined' || !navigator.geolocation) {\n    throw this.unavailable('Geolocation API not available in this browser.');\n  }\n\n  // TODO: actual web implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App for Different Environments\nDESCRIPTION: Commands to run the Capacitor app for QA and default environments.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=qa npx cap copy\nNODE_ENV=qa npx cap run ios\n\nnpx cap copy\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Installing Filesystem Capacitor Plugin\nDESCRIPTION: Commands to install the Filesystem plugin and sync it with your Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/filesystem\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable in Bash\nDESCRIPTION: This code sets the JAVA_HOME environment variable in a Unix-based system (Mac/Linux) to resolve the 'Unable to locate a Java Runtime' error. It points to the JDK path typically used by Android Studio.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=\"/Applications/Android Studio.app/Contents/jre/Contents/Home\"\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services in Android build.gradle\nDESCRIPTION: Update the Google Services classpath in the Android project's build.gradle file to version 4.3.15.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.google.gms:google-services:4.3.13'\n+       classpath 'com.google.gms:google-services:4.3.15'\n```\n\n----------------------------------------\n\nTITLE: Defining `importance` Property Type as Union of Numbers for NotificationChannel\nDESCRIPTION: Specifies that the `importance` property within the NotificationChannel interface must be one of the numeric literal types: 1, 2, 3, 4, or 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n1 | 2 | 5 | 4 | 3\n```\n\n----------------------------------------\n\nTITLE: Requesting Motion API Permission in TypeScript\nDESCRIPTION: This snippet demonstrates how to request permission for using the Motion API in a web browser. It shows how to handle the permission request on a user-initiated action like a button click.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmyButton.addEventListener('click', async () => {\n  try {\n    await DeviceMotionEvent.requestPermission();\n  } catch (e) {\n    // Handle error\n    return;\n  }\n\n  // Once the user approves, can start listening:\n  const { Motion } = Capacitor.Plugins;\n  Capacitor.Plugins.Motion.addListener('accel', (event) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Handling App State and URL Events with Capacitor App Plugin - TypeScript\nDESCRIPTION: This TypeScript example imports the App API from '@capacitor/app' and demonstrates listening to three app events ('appStateChange', 'appUrlOpen', 'appRestoredResult'), logging relevant information for each event, and shows how to obtain the app's launch URL asynchronously. Dependencies: @capacitor/app installed and correctly configured on the Capacitor project. Inputs: none beyond app runtime. Outputs: event logs in the JavaScript console. Limitations: Event listening only works when the code executes in the app context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from '@capacitor/app';\n\nApp.addListener('appStateChange', ({ isActive }) => {\n  console.log('App state changed. Is active?', isActive);\n});\n\nApp.addListener('appUrlOpen', data => {\n  console.log('App opened with URL:', data);\n});\n\nApp.addListener('appRestoredResult', data => {\n  console.log('Restored state:', data);\n});\n\nconst checkAppLaunchUrl = async () => {\n  const { url } = await App.getLaunchUrl();\n\n  console.log('App opened with URL: ' + url);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor React Hooks\nDESCRIPTION: This command installs the community-maintained React hooks package for Capacitor APIs. It's a prerequisite for using the hooks in a React project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/react-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Installing Motion Capacitor Plugin\nDESCRIPTION: Commands to install the Motion Capacitor plugin using npm and synchronize the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/motion@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Saving and Retrieving Plugin Calls in iOS (Swift)\nDESCRIPTION: Methods for saving, retrieving, and releasing plugin calls in iOS using Swift. These methods allow for persisting CAPPluginCall objects for later use in asynchronous operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc saveCall(_ call: CAPPluginCall)\nfunc savedCall(withID: String) -> CAPPluginCall?\nfunc releaseCall(_ call: CAPPluginCall)\nfunc releaseCall(withID: String)\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in React\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a React application's main entry point.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/web/pwa-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\n// Call the element loader before the render call\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable Functionality in iOS Plugin\nDESCRIPTION: Demonstrates how to throw an 'unavailable' error when a plugin method requires a newer iOS version that is not present on the device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatUsesNewIOSFramework(_ call: CAPPluginCall) {\n    if #available(iOS 14, *) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available in iOS 13 or earlier.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Splash Screen Plugin - Bash\nDESCRIPTION: Demonstrates the bash commands required to install the @capacitor/splash-screen plugin and synchronize dependencies with the Capacitor project. This setup is necessary before you can utilize any of the plugin APIs within your application. The 'npm install' command ensures the package is included in your project, and 'npx cap sync' integrates it into your native iOS/Android projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/splash-screen\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Device Plugin\nDESCRIPTION: Installs the `@capacitor/device` package using npm and then syncs the Capacitor project to update native dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/device\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Status Bar hide Method Definition\nDESCRIPTION: TypeScript definition for the hide method, which conceals the status bar with optional animation options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Mapping for Jasmine in JSON\nDESCRIPTION: This JSON snippet shows how to configure TypeScript path mapping in tsconfig.spec.json to use manual mocks for Capacitor plugins in Jasmine tests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/mocking-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"],\n      \"@test/*\": [\"test/*\"],\n      \"@capacitor/*\": [\"__mocks__/@capacitor/*\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners with Browser.removeAllListeners - TypeScript\nDESCRIPTION: Defines how to remove all native event listeners referenced by the Browser plugin using removeAllListeners. Relies on @capacitor/browser. No parameters are needed, and it returns a Promise<void>. This cleans up all listeners for browser events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Package Visibility for App Launcher\nDESCRIPTION: XML configuration required for Android 11+ to query specific app packages. This must be added to AndroidManifest.xml to allow your app to check if other apps are installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app-launcher.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <package android:name=\"com.getcapacitor.myapp\" />\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Removing Plugin Event Listener in TypeScript\nDESCRIPTION: Shows how to remove an event listener from a Capacitor plugin in TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio - Bash\nDESCRIPTION: This command uses the Capacitor CLI to open the Android project directory (\\\"android/\\\") in Android Studio for further native development or configuration. Android Studio should be installed and \\\"npx cap add android\\\" must have been run prior to this step.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Defining RegisterActionTypesOptions Interface in TypeScript\nDESCRIPTION: Defines the RegisterActionTypesOptions interface for registering action types. It includes a property for an array of ActionType objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegisterActionTypesOptions {\n  types: ActionType[];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying PermissionStatus Interface - TypeScript\nDESCRIPTION: Declares a TypeScript interface to represent the current notification permission state, consisting of a display property of type PermissionState. Relies on the imported PermissionState type alias. Used in APIs to check or return the notification permissions, expects a single property 'display', and returns its state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  display: PermissionState; // Permission state of displaying notifications\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Selection Start Haptic Feedback - TypeScript\nDESCRIPTION: selectionStart is an asynchronous method that signals the beginning of a selection gesture, providing a haptic hint. It does not require parameters and returns a Promise that resolves upon completion. Intended to be paired with selectionChanged and selectionEnd for representing user selection interactions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectionStart() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the Headers Interface for Fetch API in TypeScript\nDESCRIPTION: This snippet declares the Fetch API's Headers interface in TypeScript, specifying methods for managing HTTP request and response headers: append, delete, get, has, set, and forEach. Each method signature uses TypeScript types to clarify parameters and return values. The interface enables manipulation of the HTTP header list associated with requests or responses.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Headers {\n  append(name: string, value: string): void;\n  delete(name: string): void;\n  get(name: string): string | null;\n  has(name: string): boolean;\n  set(name: string, value: string): void;\n  forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform to Capacitor Project\nDESCRIPTION: Command to add the Android platform to an existing Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Removing All Delivered Notifications - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Provides the TypeScript API signature for removing all notifications from the notifications screen with the Capacitor plugin. This method requires no arguments and returns a Promise. Used for bulk cleanup of delivered notifications. Inputs: none. Outputs: Promise when removal completes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\\n\n```\n\n----------------------------------------\n\nTITLE: CapacitorWatch Interface Definition\nDESCRIPTION: TypeScript interface defining methods for interacting with a paired watch device through Capacitor. Includes methods for sending messages, transferring data, and updating the watch UI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CapacitorWatch {\n  sendMessage(options: []): void;\n  transferUserInfo(options: []): void;\n  updateApplicationContext(options: []): void;\n  isReachable: boolean;\n  updateWatchUI(options: { watchUI: string }): void;\n  updateWatchData(options: { data: { [key: string]: string } }): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Current Location for Google Maps in TypeScript\nDESCRIPTION: Enables or disables the current location feature for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nenableCurrentLocation(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Background Runner Permission Check Implementation\nDESCRIPTION: TypeScript interface showing the checkPermissions method implementation for checking various Capacitor device API permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => any\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientation Plugin with Capacitor\nDESCRIPTION: Registers the ScreenOrientation plugin with Capacitor using the registerPlugin function and exports the plugin and its type definitions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/designing-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nimport type { ScreenOrientationPlugin } from './definitions';\n\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n);\n\nexport * from './definitions';\nexport { ScreenOrientation };\n```\n\n----------------------------------------\n\nTITLE: Adding Exact Alarm Permission for Local Notifications - Android Manifest XML\nDESCRIPTION: This XML snippet adds the SCHEDULE_EXACT_ALARM permission to your AndroidManifest.xml, ensuring notifications can trigger exactly at scheduled times on Android 12 or above. Place this line inside the <manifest> element. Users may still disable exact alarms in app settings despite this permission being granted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\\\"android.permission.SCHEDULE_EXACT_ALARM\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining CameraSource Enum in TypeScript\nDESCRIPTION: Defines an enum for CameraSource with Prompt, Camera, and Photos members, their string values, and descriptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraSource {\n  Prompt = 'PROMPT',\n  Camera = 'CAMERA',\n  Photos = 'PHOTOS'\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Intents without Results in Java for Capacitor Android Plugins\nDESCRIPTION: Shows how to present a native Android screen using Intents without expecting a result. This is useful for simple actions that don't require feedback.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nIntent intent = new Intent(Intent.ACTION_VIEW);\ngetActivity().startActivity(intent);\n```\n\n----------------------------------------\n\nTITLE: Example Background Runner JavaScript Implementation\nDESCRIPTION: Sample JavaScript code showing event handler implementation for the Background Runner\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('myCustomEvent', (resolve, reject, args) => {\n  console.log('do something to update the system here');\n  resolve();\n});\n\naddEventListener('myCustomEventWithReturnData', (resolve, reject, args) => {\n  try {\n    console.log('accepted this data: ' + JSON.stringify(args.user));\n\n    const updatedUser = args.user;\n    updatedUser.firstName = updatedUser.firstName + ' HELLO';\n    updatedUser.lastName = updatedUser.lastName + ' WORLD';\n\n    resolve(updatedUser);\n  } catch (err) {\n    reject(err);\n  }\n});\n\naddEventListener('remoteNotification', (resolve, reject, args) => {\n  try {\n    console.log('received silent push notification');\n\n    CapacitorNotifications.schedule([\n      {\n        id: 100,\n        title: 'Enterprise Background Runner',\n        body: 'Received silent push notification',\n      },\n    ]);\n\n    resolve();\n  } catch (err) {\n    reject();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Unregistering from Push Notifications in Capacitor (TypeScript)\nDESCRIPTION: Unregisters the application from receiving push notifications. This function deletes the Firebase token on Android and unregisters from APNS on iOS. Returns a Promise that resolves when the unregistration process is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nunregister() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Generating Assets Command\nDESCRIPTION: Command to generate platform-specific assets for native projects and PWA manifest files using Capacitor Assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx capacitor-assets generate\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Certificate Details\nDESCRIPTION: Command to list the details of an existing Android keystore certificate, including the SHA256 fingerprint needed for deep linking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore my-release-key.keystore\n```\n\n----------------------------------------\n\nTITLE: Android Photo Picker Service Configuration\nDESCRIPTION: XML configuration to enable Google Play services backported photo picker module\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Trigger Google Play services to install the backported photo picker module. -->\n<!--suppress AndroidDomInspection -->\n<service android:name=\"com.google.android.gms.metadata.ModuleDependencies\"\n    android:enabled=\"false\"\n    android:exported=\"false\"\n    tools:ignore=\"MissingClass\">\n    <intent-filter>\n        <action android:name=\"com.google.android.gms.metadata.MODULE_DEPENDENCIES\" />\n    </intent-filter>\n    <meta-data android:name=\"photopicker_activity:0:required\" android:value=\"\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Checking Native Platform with Capacitor.isNativePlatform in TypeScript\nDESCRIPTION: Demonstrates the use of Capacitor.isNativePlatform to determine if the app is running as a native, installed Capacitor app or as a web app/PWA. This allows for conditional logic based on the runtime environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  console.log(\"I'm a native app!\");\n} else {\n  console.log(\"I'm a PWA or Web app!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Milliseconds (Local) with Date.getMilliseconds() in JavaScript\nDESCRIPTION: The `getMilliseconds()` method returns the milliseconds (0-999) in the specified date according to local time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ngetMilliseconds(): number\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface - TypeScript\nDESCRIPTION: Defines a TypeScript interface for unregistering plugin listeners, holding a single remove method that returns a Promise resolving when the unregistration completes. No external dependencies other than Promise. Used to manage listener lifecycle, expects the consumer to call remove when cleanup is required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Screen Orientation Listeners\nDESCRIPTION: TypeScript method to remove all previously added orientation change event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Method in Objective-C\nDESCRIPTION: Objective-C implementation of a callback method for iOS platform using the CAP_PLUGIN_METHOD macro with CAPPluginReturnCallback return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Interface in TypeScript\nDESCRIPTION: Interface for notification channels, including properties for id, name, description, sound, importance, visibility, and various visual/audio settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description: string;\n  sound: string;\n  importance: Importance;\n  visibility: Visibility;\n  lights: boolean;\n  lightColor: string;\n  vibration: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets for Deep Link Files in Angular - JSON\nDESCRIPTION: This json snippet is used in an Angular project's angular.json to ensure deep linking association files (e.g., assetlinks.json, apple-app-site-association) from src/.well-known are output to the root .well-known directory on build. Place this under the 'architect => assets' array. Ensures static assets served as required for mobile OS validation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"glob\": \"**/*\",\n  \"input\": \"src/.well-known\",\n  \"output\": \".well-known/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Markers to the Map - TypeScript\nDESCRIPTION: Allows the addition of multiple markers in a single operation for efficiency. Accepts an array of Marker objects and returns a Promise resolving to an array of string marker IDs. Relies on a properly defined Marker type array and the map plugin's batch operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddMarkers(markers: Marker[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Error Stack Trace Example in Bash\nDESCRIPTION: This snippet displays a typical error stack trace encountered when CocoaPods fails due to an ffi bug on Apple Silicon machines. It is provided to help users recognize the error scenario referenced in the troubleshooting section. No dependencies or direct execution requirements are present; the snippet is for identification purposes only. The output demonstrates a bus error and highlights issues when using the default Ruby environment on ARM Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/faqs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[error] Analyzing dependencies\n        /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi/library.rb:275: [BUG] Bus Error at 0x0000000000000000\n        ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/app Plugin\nDESCRIPTION: Command for installing the latest version of the @capacitor/app plugin and syncing the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Initializing Screen Orientation State with React useState\nDESCRIPTION: React hook to create and maintain state for the current screen orientation, defaulting to an empty string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [orientation, setOrientation] = useState<string>('');\n```\n\n----------------------------------------\n\nTITLE: Defining Watch Interface - TypeScript\nDESCRIPTION: Interface for watch companion app interactions including messaging, UI updates, and data transfer capabilities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CapacitorWatch {\n  sendMessage(options: []): void;\n  transferUserInfo(options: []): void;\n  updateApplicationContext(options: []): void;\n  isReachable: boolean;\n  updateWatchUI(options: { watchUI: string }): void;\n  updateWatchData(options: { data: { [key: string]: string } }): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Screen Orientation - Capacitor Plugin Method (TypeScript)\nDESCRIPTION: This TypeScript method signature defines the async orientation() function exposed by the Screen Orientation Capacitor plugin. It returns a Promise resolving to a ScreenOrientationResult object and provides the current screen orientation. No parameters are required, and it follows the Capacitor plugin method structure for asynchronous calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\norientation() => Promise<ScreenOrientationResult>\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for Capacitor on iOS - Bash\nDESCRIPTION: Installs CocoaPods via the Ruby gem system, which is required to manage native iOS dependencies when developing with Capacitor. Required for macOS environments targeting iOS. This command must be executed in a terminal that has Ruby and gem installed, typically on macOS. Running as sudo ensures necessary permissions to globally install the cocoapods gem.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/environment-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Will Hide Event Listener in Capacitor\nDESCRIPTION: Method to listen for when the keyboard is about to be hidden. On Android, keyboardWillHide and keyboardDidHide events fire almost simultaneously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardWillHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface - TypeScript\nDESCRIPTION: Specifies a TypeScript interface for the result of querying all notification channels, containing an array of Channel objects. Depends on the Channel interface. Used as the return type for APIs that list available notification channels, the input is the available channels and the output is their structured representation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[]; // The list of notification channels\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Dependencies Versions\nDESCRIPTION: Updates various Android dependency versions including JUnit, AndroidX AppCompat, and Espresso\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/5-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\next {\n    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'\n-   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.4.2'\n+   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'\n-   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.3'\n+   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'\n-   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.4.0'\n+   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Push Notifications\nDESCRIPTION: Swift code to add to AppDelegate.swift for handling push notification registration and failures.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Native Screens in Capacitor iOS Plugin\nDESCRIPTION: Demonstrates how to present a native view controller over the Capacitor screen using the CAPBridge object. Includes guidance for proper threading and iPad-specific popover presentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nDispatchQueue.main.async {\n  self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nself.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Scanning Barcode Implementation\nDESCRIPTION: TypeScript interface showing the scanBarcode method implementation with options parameter and return type\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/barcode-scanner.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nscanBarcode(options: CapacitorBarcodeScannerOptions) => Promise<CapacitorBarcodeScannerScanResult>\n```\n\n----------------------------------------\n\nTITLE: Plugin Call Management Methods - iOS Swift\nDESCRIPTION: Core methods for managing plugin calls in iOS Capacitor implementations. These methods handle saving, retrieving, and releasing plugin calls for asynchronous operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc saveCall(_ call: CAPPluginCall)\nfunc savedCall(withID: String) -> CAPPluginCall?\nfunc releaseCall(_ call: CAPPluginCall)\nfunc releaseCall(withID: String)\n```\n\n----------------------------------------\n\nTITLE: Presenting a Native View Controller Modally in Swift\nDESCRIPTION: Example code demonstrating how to use the bridge's `viewController` property to present a custom native view controller modally. It emphasizes performing UI updates on the main thread using `DispatchQueue.main.async`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nDispatchQueue.main.async {\n  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 3 for iOS\nDESCRIPTION: Commands for installing the latest version of Capacitor 3 for iOS and syncing the project. Updates the dependencies and ensures iOS-specific files are properly configured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios@latest-3\nnpx cap sync ios\n```\n\n----------------------------------------\n\nTITLE: Overriding Supported Interface Orientations in iOS - Swift\nDESCRIPTION: This Swift function for AppDelegate.swift customizes which orientations the app supports, ensuring orientation locking also affects presented view controllers (such as in-app browsers). It depends on the CAPBridgeViewController from Capacitor. The window's rootViewController is cast and queried for its supported orientations, which are then enforced for the whole app. This should be placed within AppDelegate.swift and assumes a Capacitor project structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\\n  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase in iOS AppDelegate\nDESCRIPTION: Swift code to import Firebase Core and Messaging modules in the AppDelegate file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport FirebaseCore\nimport FirebaseMessaging\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Server Hostname for Android (JSON)\nDESCRIPTION: This JSON configuration snippet, typically placed in \\\"capacitor.config.json\\\", sets the \\\"androidScheme\\\" to \\\"https\\\" and \\\"hostname\\\" to your app-domain. This is mandatory for supporting Android\\'s autofill and deep-linking by matching the app hostname to the one in the AndroidManifest and site association file. All connections must be over HTTPS and the domain should be under your control.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n    \"androidScheme\": \"https\",\n    \"hostname\": \"my-app.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Capacitor Runtime Configuration in Swift\nDESCRIPTION: This property declaration exposes the config property from the bridge to provide access to the InstanceConfiguration object. Plugins can read configuration settings known at runtime via this property. No extra dependencies are required aside from the Capacitor library itself.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar config: InstanceConfiguration { get }\n\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Migration CLI Command\nDESCRIPTION: Command to run the Capacitor migration tool using the CLI, which automates the migration process from v6 to v7.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin for Android\nDESCRIPTION: Update the Gradle plugin for Android to version 8.0.0 in the project's build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:7.2.1'\n+       classpath 'com.android.tools.build:gradle:8.0.0'\n```\n\n----------------------------------------\n\nTITLE: Parsing Colors with WebColor Utility in Android (Java)\nDESCRIPTION: Demonstrates how to use the WebColor.parseColor() utility in an Android Java plugin to parse RGBA hex color strings for cross-platform compatibility with iOS/Web. It replicates Color.parseColor() functionality but aligns the channel order (RGBA) across platforms. Dependency: WebColor class available in Capacitor 3. Key parameter is a hex color string with alpha. Returns an integer color value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString colorStringWithAlpha = \"#FF000088\"; // Semi-transparent red\nint color = WebColor.parseColor(colorStringWithAlpha);\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Interface in TypeScript\nDESCRIPTION: Defines the Channel interface for configuring notification channels in Capacitor. Includes properties for channel identification, appearance, and behavior settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description: string;\n  sound: string;\n  importance: Importance;\n  visibility: Visibility;\n  lights: boolean;\n  lightColor: string;\n  vibration: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: File Viewer API Method Definition\nDESCRIPTION: TypeScript interface definition for opening documents from local paths.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/file-viewer.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopenDocumentFromLocalPath(options: OpenFromLocalPathOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Execute Capacitor Run Command\nDESCRIPTION: Command syntax for running and deploying Capacitor native apps to target devices. The command first executes a sync operation (unless disabled), then builds and deploys the app. Supports both Android and iOS platforms with various configuration options including flavor selection, scheme specification, and target device selection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Registering the Capacitor Plugin in MainActivity\nDESCRIPTION: Shows how to register a custom Capacitor plugin in the main activity of the Android app by overriding the onCreate method and calling registerPlugin with the plugin class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin;\n\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;\n\npublic class MainActivity extends BridgeActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        registerPlugin(ScreenOrientationPlugin.class);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Capacitor App and Adding Platforms\nDESCRIPTION: Commands to build a Capacitor app and add iOS and Android platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Method Signatures in TypeScript\nDESCRIPTION: Defines the method signatures available on the Uint8Array prototype, including standard array methods adapted for typed arrays like `copyWithin`, `every`, `fill`, `filter`, `find`, `findIndex`, `forEach`, `indexOf`, `join`, `lastIndexOf`, `map`, `reduce`, and `reduceRight`. These methods facilitate manipulation and querying of the array's contents.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Method Signatures\ncopyWithin(target: number, start: number, end?: number): this;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nevery(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfill(value: number, start?: number, end?: number): this;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfilter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfind(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfindIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nindexOf(searchElement: number, fromIndex?: number): number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\njoin(separator?: string): string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlastIndexOf(searchElement: number, fromIndex?: number): number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmap(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// reduce overloads\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// reduceRight overloads\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Updating ApplicationDelegate from CAPBridge to ApplicationDelegateProxy\nDESCRIPTION: Updates the AppDelegate.swift file to use ApplicationDelegateProxy instead of CAPBridge for handling application events such as opening URLs and continuing user activities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n         // Called when the app was launched with a url. Feel free to add additional processing here,\n         // but if you want the App API to support tracking app url opens, make sure to keep this call\n-        return CAPBridge.handleOpenUrl(url, options)\n+        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n     }\n\n     func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n         // Called when the app was launched with an activity, including Universal Links.\n         // Feel free to add additional processing here, but if you want the App API to support\n         // tracking app url opens, make sure to keep this call\n-        return CAPBridge.handleContinueActivity(userActivity, restorationHandler)\n+        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\n     }\n```\n\n----------------------------------------\n\nTITLE: Setting Android Permissions in Capacitor Apps\nDESCRIPTION: Add required permissions for your Capacitor Android app in the AndroidManifest.xml file inside the manifest tag. This example shows how to add network permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.getcapacitor.myapp\">\n    <activity>\n      <!-- other stuff -->\n    </activity>\n\n    <!-- More stuff -->\n\n    <!-- Your permissions -->\n\n    <!-- Network API -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Removing push notification methods\nDESCRIPTION: Removes the entire push notification handling block from AppDelegate.swift when not using push notifications in your application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-    #if USE_PUSH\n-\n-    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n-    }\n-\n-    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n-    }\n-\n-#endif\n```\n\n----------------------------------------\n\nTITLE: Syncing Capacitor Web Assets\nDESCRIPTION: Command to synchronize Capacitor web assets into your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync web\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin Documentation using npm Script\nDESCRIPTION: Provides the shell command `npm run docgen` to manually trigger the documentation generation process for the plugin. This script typically uses tools like `@capacitor/docgen` to parse JSDoc comments and update the `README.md` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docgen\n```\n\n----------------------------------------\n\nTITLE: Date Manipulation Methods Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definitions for date manipulation methods that work with both local time and UTC. Includes methods for setting hours, date, month, year and converting to strings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nsetUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\nsetDate(date: number): number;\nsetUTCDate(date: number): number;\nsetMonth(month: number, date?: number): number;\nsetUTCMonth(month: number, date?: number): number;\nsetFullYear(year: number, month?: number, date?: number): number;\nsetUTCFullYear(year: number, month?: number, date?: number): number;\ntoUTCString(): string;\ntoISOString(): string;\ntoJSON(key?: any): string;\n```\n\n----------------------------------------\n\nTITLE: Enabling iPad Orientation Lock with Full Screen Mode\nDESCRIPTION: XML configuration for Info.plist to enable orientation locking on iPads by requiring full screen mode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>UIRequiresFullScreen</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Cookie Domains in iOS Info.plist\nDESCRIPTION: This XML snippet shows the necessary configuration within an iOS application's `Info.plist` file to enable support for third-party cookies, particularly relevant for iOS 14 and later. The `WKAppBoundDomains` key contains an array of strings, each specifying a domain (up to 10) for which cookies should be handled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>WKAppBoundDomains</key>\n<array>\n  <string>www.mydomain.com</string>\n  <string>api.mydomain.com</string>\n  <string>www.myothercooldomain.com</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for External Storage Access\nDESCRIPTION: Adds the necessary `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` permissions to the `AndroidManifest.xml` file. These permissions are required for the Filesystem API to access the `Directory.Documents` or `Directory.ExternalStorage` directories on Android 9 or older.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ViewController in Swift\nDESCRIPTION: Basic implementation of a custom ViewController that subclasses CAPBridgeViewController. This code shows the minimal required imports and class declaration needed to create a custom view controller in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/viewcontroller.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\n\nclass MyViewController: CAPBridgeViewController {\n    // additional code\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Application Delegate Support for Orientation Locking\nDESCRIPTION: Extends the app's AppDelegate to control orientation for all presented view controllers, not just the main Capacitor controller. This ensures consistent orientation behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Capacitor Telemetry Using CLI\nDESCRIPTION: Command to opt out of Capacitor's telemetry data collection program. This command must be run in the project root directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap telemetry off\n```\n\n----------------------------------------\n\nTITLE: API: addListener('keyboardDidHide', ...) Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for adding an event listener for the `keyboardDidHide` event. The listener function takes no arguments. It returns a Promise resolving to a `PluginListenerHandle`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Listener Handle - TypeScript\nDESCRIPTION: Encapsulates a handle for plugin event listeners, featuring a 'remove' method returning a Promise<void>. Used to unsubscribe from notification or channel events. Dependency is a Promise-enabled environment (standard in Capacitor plugins/applications). Takes no parameters and is typically provided by the notification plugin lifecycle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Android strings.xml - diff\nDESCRIPTION: This snippet shows how to remove the 'fileprovider_authority' string from the Android app's strings.xml file. This change is required for Capacitor 1.1.0 compatibility. Developers must ensure that the 'fileprovider_authority' line is deleted from 'android/app/src/main/res/values/strings.xml' as illustrated, to avoid conflicts or deprecated configurations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/1-1.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\\n     <string name=\\\"app_name\\\">My App</string>\\n     <string name=\\\"title_activity_main\\\">My App</string>\\n     <string name=\\\"package_name\\\">com.getcapacitor.myapp</string>\\n-    <string name=\\\"fileprovider_authority\\\">com.getcapacitor.myapp.fileprovider</string>\\n     <string name=\\\"custom_url_scheme\\\">com.getcapacitor.myapp</string>\\n </resources>\\n```\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Permissions for Geolocation\nDESCRIPTION: Required Android permissions that need to be added to AndroidManifest.xml for location functionality\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: This code snippet defines the PermissionStatus interface, which represents the permission status for displaying notifications in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  display: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending WebPlugin for ScreenOrientation in TypeScript\nDESCRIPTION: Defines a ScreenOrientationWeb class that extends Capacitor's WebPlugin and implements the ScreenOrientationPlugin interface. It includes a constructor that sets up an event listener for orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\nimport type { ScreenOrientationPlugin } from './definitions';\n\nexport class ScreenOrientationWeb extends WebPlugin {\n  constructor() {\n    super();\n    window.screen.orientation.addEventListener(\"change\", () => {\n      const type = window.screen.orientation.type;\n      this.notifyListeners(\"screenOrientationChange\", { type });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ending Selection Haptic Feedback - TypeScript\nDESCRIPTION: selectionEnd completes an in-progress selection sequence indicated by a call to selectionStart. The method provides appropriate haptic feedback and returns a Promise; no parameters are necessary. It is intended to signal the end of touch-based selection UI actions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nselectionEnd() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notifications in iOS\nDESCRIPTION: Swift implementation for handling remote notifications in the Background Runner\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n        // ....\n        BackgroundRunnerPlugin.dispatchEvent(event: \"remoteNotification\", eventArgs: userInfo) { result in\n            switch result {\n            case .success:\n                completionHandler(.newData)\n            case .failure:\n                completionHandler(.failed)\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting androidScheme in Capacitor Configuration\nDESCRIPTION: TypeScript configuration snippet showing how to set the androidScheme to 'http' in the Capacitor configuration to maintain backward compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  server: {\n    androidScheme: 'http';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Example with isNativePlatform\nDESCRIPTION: Demonstrates how to implement conditional logic based on whether the app is running on a native platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Position Type in TypeScript for Capacitor Maps\nDESCRIPTION: Specifies the Position type as an array of numbers representing coordinates according to the GeoJSON specification RFC7946. The array should contain 2-3 elements representing X, Y, and optionally Z coordinates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: Initializing Screen Orientation State in React\nDESCRIPTION: This code snippet shows how to initialize a state variable to track the screen orientation using React's useState hook.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [orientation, setOrientation] = useState<string>('');\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Return Method in Android (Java)\nDESCRIPTION: Shows the Java implementation for a standard Capacitor plugin method (`method2`) that returns data via a promise on Android. Specifying the `returnType` in the `@PluginMethod` annotation is optional as returning a value is the default behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void method2(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Main Activity Title in Android strings.xml\nDESCRIPTION: Illustrates changing the title associated with the main activity (often displayed in the title bar or recent apps list) by updating the `title_activity_main` string resource in `android/app/src/main/res/values/strings.xml`. It's common practice to keep this consistent with the `app_name`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"title_activity_main\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on iOS via CLI\nDESCRIPTION: This command uses the Capacitor CLI to build the web portion of the application, copy it to the native iOS project, and then build and deploy the native app to a connected iOS device or a simulator. The command will prompt for target selection if multiple options are available. Requires Xcode and command-line tools to be installed and configured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Getting Seconds (UTC) with Date.getUTCSeconds() in JavaScript\nDESCRIPTION: The `getUTCSeconds()` method returns the seconds (0-59) in the specified date according to universal time (UTC).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCSeconds(): number\n```\n\n----------------------------------------\n\nTITLE: Prompt Modal Interface Definition\nDESCRIPTION: TypeScript interface definition for the prompt modal function showing the options parameter type and return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/modals.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprompt(options: PromptOptions) => Promise<PromptResult>\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Permissions Method\nDESCRIPTION: Example of implementing the requestPermissions method for web plugins when direct permission requests aren't possible.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync requestPermissions(): Promise<PermissionStatus> {\n  // TODO: does the web support requesting permissions for my plugin?\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n\n----------------------------------------\n\nTITLE: Pending Notification Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for pending notification results and schemas, defining the structure of pending local notifications including title, body, ID, schedule and extra data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PendingResult {\n  notifications: PendingLocalNotificationSchema[];\n}\n\ninterface PendingLocalNotificationSchema {\n  title: string;\n  body: string;\n  id: number;\n  schedule: Schedule;\n  extra: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Preferred Content Mode in Capacitor\nDESCRIPTION: JSON configuration snippet for the Capacitor configuration file (e.g., capacitor.config.json). Sets the `preferredContentMode` to `mobile` within the `ios` object, which is necessary for the text-zoom plugin to function correctly on iPads.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/text-zoom.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"preferredContentMode\": \"mobile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type: CameraPermissionState\nDESCRIPTION: Type definition for camera permission states including standard permission states and 'limited' state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionState = PermissionState | 'limited';\n```\n\n----------------------------------------\n\nTITLE: Installing Podfile Helpers in iOS\nDESCRIPTION: Ruby code to include pod helpers and set iOS deployment target to 13.0 with post-install configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/4-0.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n\nplatform :ios, '13.0'\n\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the RestoredListenerEvent Interface - TypeScript\nDESCRIPTION: Defines the structure of a restored plugin event, including pluginId, methodName, result data, success state, and optional error message. This interface standardizes the context passed to listeners when restoring plugin results, as seen with methods like Camera.getPhoto.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RestoredListenerEvent {\n  pluginId: string; // The pluginId this result corresponds to.\n  methodName: string; // The methodName this result corresponds to.\n  data: any; // The result data passed from the plugin.\n  success: boolean; // If the plugin call succeeded.\n  error?: { message: string }; // If the plugin call didn't succeed, it will contain the error message.\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for Capacitor Plugins Documentation\nDESCRIPTION: A markdown-formatted table of contents that organizes documentation links into major sections: Getting Started, Creating Plugins, and Official Plugins. Each section contains relevant subsections with links to specific documentation pages.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Plugins Table of Contents (v2)\n\n- Getting Started\n  - [Introduction](../plugins.md)\n  - [Community Plugins](community.md)\n  - [Enterprise Plugins](enterprise.md)\n- Creating Plugins\n  - [Overview](creating-plugins.md)\n  - [Development Workflow](workflow.md)\n  - [iOS Guide](ios.md)\n  - [Android Guide](android.md)\n  - [Web/PWA Guide](web.md)\n  - [JavaScript Guide](js.md)\n- Official Plugins\n  - [Introduction](../apis/index.md)\n  - [Accessibility](../apis/accessibility.md)\n  - [App](../apis/app.md)\n  - [Background Task](../apis/background-task.md)\n  - [Browser](../apis/browser.md)\n  - [Camera](../apis/camera.md)\n  - [Clipboard](../apis/clipboard.md)\n  - [Console](../apis/console.md)\n  - [Device](../apis/device.md)\n  - [Filesystem](../apis/filesystem.md)\n  - [Geolocation](../apis/geolocation.md)\n  - [Haptics](../apis/haptics.md)\n  - [Keyboard](../apis/keyboard.md)\n  - [Local Notifications](../apis/local-notifications.md)\n  - [Modals](../apis/modals.md)\n  - [Motion](../apis/motion.md)\n  - [Network](../apis/network.md)\n  - [Permissions](../apis/permissions.md)\n  - [Push Notifications](../apis/push-notifications.md)\n  - [Share](../apis/share.md)\n  - [Splash Screen](../apis/splash-screen.md)\n  - [Status Bar](../apis/status-bar.md)\n  - [Storage](../apis/storage.md)\n  - [Toast](../apis/toast.md)\n```\n\n----------------------------------------\n\nTITLE: API: addListener('keyboardDidShow', ...) Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for adding an event listener for the `keyboardDidShow` event. The listener function receives a `KeyboardInfo` object. It returns a Promise resolving to a `PluginListenerHandle`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the ListChannelsResult interface, which represents the result of listing notification channels in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Keys Method TypeScript Definition\nDESCRIPTION: Type definition for the Storage.keys() method which returns a promise containing an array of all stored keys.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/storage.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nkeys() => Promise<{ keys: string[]; }>\n```\n\n----------------------------------------\n\nTITLE: ActionType Interface Definition\nDESCRIPTION: Interface defining the structure of notification action types with iOS-specific configuration options for UNNotificationCategory\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionType {\n  id: string;\n  actions: Action[];\n  iosHiddenPreviewsBodyPlaceholder?: string;\n  iosCustomDismissAction?: boolean;\n  iosAllowInCarPlay?: boolean;\n  iosHiddenPreviewsShowTitle?: boolean;\n  iosHiddenPreviewsShowSubtitle?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Java Version to 21 in build.gradle\nDESCRIPTION: Updates the Java source and target compatibility to version 21 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ncompileOptions {\n-    sourceCompatibility JavaVersion.VERSION_17\n+    sourceCompatibility JavaVersion.VERSION_21\n-    targetCompatibility JavaVersion.VERSION_17\n+    targetCompatibility JavaVersion.VERSION_21\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Orientation Type to UIInterfaceOrientationMask\nDESCRIPTION: Adds a helper method to convert between the plugin's orientation type strings and the corresponding UIInterfaceOrientationMask values needed by iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToMask(_ orientationType: String) -> UIInterfaceOrientationMask {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientationMask.landscapeLeft\n  case \"landscape-secondary\":\n    return UIInterfaceOrientationMask.landscapeRight\n  case \"portrait-secondary\":\n    return UIInterfaceOrientationMask.portraitUpsideDown\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientationMask.portrait\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating Camera Direction Options (TypeScript)\nDESCRIPTION: The `CapacitorBarcodeScannerCameraDirection` enum defines options for selecting the device camera to be used for scanning. It includes `BACK` (usually the primary camera) and `FRONT` (selfie camera).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nenum CapacitorBarcodeScannerCameraDirection {\n    BACK = 1,\n    FRONT = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Prompt Dialog Method Definition\nDESCRIPTION: TypeScript method signature for displaying prompt dialogs. Shows the required PromptOptions parameter type and PromptResult return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/dialog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprompt(options: PromptOptions) => Promise<PromptResult>\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Messaging to iOS Podfile\nDESCRIPTION: Modification to the Podfile to add Firebase Cloud Messaging as a dependency for the iOS app target using CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'Firebase/Messaging' # Add this line\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Background Runner in iOS Swift\nDESCRIPTION: Required Swift import statement for the Background Runner plugin\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport CapacitorBackgroundRunner\n```\n\n----------------------------------------\n\nTITLE: API: setAccessoryBarVisible() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `setAccessoryBarVisible()` method. It takes an options object with an `isVisible` boolean to control the visibility of the keyboard accessory bar on iOS (iPhone only) and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetAccessoryBarVisible(options: { isVisible: boolean; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Capacitor with Plugin Changes (Shell Script)\nDESCRIPTION: Shows how to trigger Capacitor to detect and integrate the newly linked plugin with native projects. The output indicates successful detection. Requires Capacitor installed and native projects already set up.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n[info] Found 1 Capacitor plugin for android:\n    - echo (0.0.1)\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Share Plugin using npm\nDESCRIPTION: Provides the necessary npm and Capacitor CLI commands to install the `@capacitor/share` plugin into a Capacitor project and sync the native dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/share.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/share\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Moving Package Declaration to build.gradle\nDESCRIPTION: Moves the package declaration from AndroidManifest.xml to build.gradle and updates manifest format\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/5-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# AndroidManifest.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n- <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"[YOUR_PACKAGE_ID]\">\n+ <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n+     namespace \"[YOUR_PACKAGE_ID]\"\n      compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ionic Angular App\nDESCRIPTION: Command to create a new Ionic Angular application based on the blank starter template.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic start capApp blank --type=angular\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Core Logic in Swift\nDESCRIPTION: Core implementation of the ScreenOrientation class that handles getting current orientation and converting device orientations to orientation types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport UIKit\n\npublic class ScreenOrientation: NSObject {\n\n  public func getCurrentOrientationType() -> String {\n    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation\n    return fromDeviceOrientationToOrientationType(currentOrientation)\n  }\n\n  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {\n    switch orientation {\n    case .landscapeLeft:\n      return \"landscape-primary\"\n    case .landscapeRight:\n      return \"landscape-secondary\"\n    case .portraitUpsideDown:\n      return \"portrait-secondary\"\n    default:\n      // Case: portrait\n      return \"portrait-primary\"\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Network Plugin - Bash\nDESCRIPTION: Demonstrates how to install the @capacitor/network plugin and synchronize it with the Capacitor project. Requires npm (Node.js package manager) and an initialized Capacitor project. The 'npm install' command adds the plugin, while 'npx cap sync' ensures the project is updated with the new dependency. The commands must be run in a terminal within the project directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/network\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Configuration Update\nDESCRIPTION: Required changes to the Android build.gradle file for Background Runner integration\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n...\n\nrepositories {\n    flatDir{\n        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n+\t\tdirs '../../node_modules/@capacitor/background-runner/android/src/main/libs', 'libs'\n    }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Core and CLI Dependencies\nDESCRIPTION: Update the Capacitor Core and CLI packages to version 2 using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@2 @capacitor/core@2\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Check for Location Services\nDESCRIPTION: This snippet shows how to implement the checkPermissions() method for a plugin that requires location permissions, mapping iOS authorization statuses to Capacitor permission states.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func checkPermissions(_ call: CAPPluginCall) {\n    let locationState: String\n\n    switch CLLocationManager.authorizationStatus() {\n    case .notDetermined:\n        locationState = \"prompt\"\n    case .restricted, .denied:\n        locationState = \"denied\"\n    case .authorizedAlways, .authorizedWhenInUse:\n        locationState = \"granted\"\n    @unknown default:\n        locationState = \"prompt\"\n    }\n\n    call.resolve([\"location\": locationState])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Apple Privacy Manifest for Filesystem Plugin\nDESCRIPTION: Example XML configuration for iOS PrivacyInfo.xcprivacy file required for App Store submissions. This declares the file timestamp API usage with the appropriate reason code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>C617.1</string>\n        </array>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Interface in TypeScript\nDESCRIPTION: This code snippet defines the Channel interface for configuring notification channels in Capacitor's Local Notifications API. It includes properties for channel identification, presentation, and behavior settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description: string;\n  sound?: string;\n  importance?: Importance;\n  visibility?: Visibility;\n  lights?: boolean;\n  lightColor?: string;\n  vibration?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Files and Converting Device Paths for Web View - TypeScript\nDESCRIPTION: This example illustrates writing a file to the device storage using the Filesystem plugin and then converting its file URI to a format compatible with the web view, ensuring the file can be accessed from an HTML image element. Required dependencies include Capacitor's Filesystem plugin and the core package. Key parameters: file path, data, and directory for 'writeFile'; URI for 'convertFileSrc'. It returns a file URI for storage and a web-friendly URL for display. All methods assume proper plugin installs and permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Status Bar Plugin - bash\nDESCRIPTION: Installs the @capacitor/status-bar plugin via npm and synchronizes the Capacitor project. The first command installs the required package, while the second syncs native projects to reflect the changes. These commands must be executed in the project's root directory using a terminal with npm and Capacitor CLI installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/status-bar\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Configuring CapacitorHttp Plugin in TypeScript\nDESCRIPTION: Example configuration for enabling the CapacitorHttp plugin in the capacitor.config.ts file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/http.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorHttp: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Triggering Selection Changed Haptic Feedback - TypeScript\nDESCRIPTION: selectionChanged triggers haptic feedback to notify that a selection has changed. If selectionStart has already been called, the device will provide feedback corresponding to the update. No parameters are required, and the function is asynchronous.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nselectionChanged() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Accessing Bridge in Swift for Capacitor iOS Plugins\nDESCRIPTION: Demonstrates how to access the bridge in Capacitor iOS plugins and perform an early exit if the bridge is unavailable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nself.bridge?\n```\n\nLANGUAGE: swift\nCODE:\n```\nguard let bridge = self.bridge else { return }\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme in Android Strings XML\nDESCRIPTION: Illustrates how to set a custom URL scheme for the app by modifying the custom_url_scheme value in the strings.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"custom_url_scheme\">com.capacitorjs.myapp</string>\n```\n\n----------------------------------------\n\nTITLE: Copying Web Assets with Capacitor CLI - Bash\nDESCRIPTION: Executes the Capacitor CLI 'cap copy' command, which copies the web app build output and updated configuration files into the specified native platform project (optional: android or ios). Requires Node.js, Capacitor CLI installed, and an initialized Capacitor project. The 'platform' argument specifies the target (android or ios) and the '--inline' option inlines JavaScript source maps for debugging on Android WebView through Chromium browsers. Input is the platform name (optional); output is synchronized assets in native project directories. The command must be rerun after changes to web content or configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode using Capacitor CLI\nDESCRIPTION: Command to open an iOS project in Xcode using Capacitor's CLI tool. Requires Xcode 11 or above to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/opening-native-projects.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Removing All Delivered Notifications in Capacitor (TypeScript)\nDESCRIPTION: Removes all notifications associated with the application from the user's notification center/tray. Returns a Promise that resolves when all notifications have been cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing and Syncing Plugin (Summary) using Bash\nDESCRIPTION: This snippet provides the basic installation commands for the @capacitor/watch plugin using npm and syncing the project with Capacitor CLI. It's presented as a summary installation step.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/watch\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Opening Native IDEs\nDESCRIPTION: Commands to open the native projects in their respective IDEs (Xcode for iOS, Android Studio for Android).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Installing Action Sheet Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/action-sheet plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/action-sheet\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via RubyGems (Bash)\nDESCRIPTION: This command installs CocoaPods using the system's RubyGems package manager, providing an alternative to Homebrew. It requires administrator privileges (`sudo`). Note that this method might require additional steps on Apple Silicon Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Verifying Xcode Command Line Tools Installation\nDESCRIPTION: Command to verify the installation path of Xcode Command Line Tools.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n# /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Cordova Configuration Interface Definition\nDESCRIPTION: TypeScript interface for Cordova-specific configurations including access origins, preferences, and static plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncordova?: {\n    accessOrigins?: string[];\n    preferences?: { [key: string]: string | undefined };\n    staticPlugins?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest with Placeholders\nDESCRIPTION: Updates the AndroidManifest.xml file to use the displayName placeholder for dynamic app naming.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  ...snip...\n  android:label=\"${displayName}\">\n\n  <activity\n    ...snip...\n    android:label=\"${displayName}\">\n```\n\n----------------------------------------\n\nTITLE: Haptics Selection Changed Method Signature - TypeScript\nDESCRIPTION: Presents the selectionChanged method signature, sending a haptic feedback during a selection change gesture. No parameters required. Provides a Promise<void> for asynchronous usage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nselectionChanged() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining StatResult Interface in TypeScript\nDESCRIPTION: Defines the result interface containing file status information obtained via the Capacitor Filesystem API. Includes the file `type` (string, e.g., 'file' or 'directory'), `size` (number), `ctime` (number, creation time in ms, not available on Android <= 7), `mtime` (number, modification time in ms), and the file's `uri` (string).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatResult {\n  /**\n   * Type of the file (e.g., 'file' or 'directory')\n   * @since 1.0.0\n   */\n  type: string;\n  /**\n   * Size of the file in bytes\n   * @since 1.0.0\n   */\n  size: number;\n  /**\n   * Time of creation in milliseconds.\n   * It's not available on Android 7 and older devices.\n   * @since 1.0.0\n   */\n  ctime?: number;\n  /**\n   * Time of last modification in milliseconds.\n   * @since 1.0.0\n   */\n  mtime: number;\n  /**\n   * The uri of the file\n   * @since 1.0.0\n   */\n  uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling API Level Compatibility with 'unavailable' in Java\nDESCRIPTION: Shows how to handle situations where plugin functionality depends on a minimum Android API level. It checks the device's SDK version using `Build.VERSION.SDK_INT`. If the version is lower than required (e.g., less than `Build.VERSION_CODES.O`), it calls `call.unavailable()` with an informative message, preventing the execution of incompatible code and notifying the caller.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatUsesNewAndroidAPI(PluginCall call) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available on Android API 25 or earlier.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload with Null Values (TypeScript)\nDESCRIPTION: This TypeScript snippet shows an example object structure being passed to a Capacitor plugin call. It includes a property with a direct null value (`foo`) and an array (`bar`) containing a null value among numbers. This illustrates the type of data that needs special handling on the native iOS side due to differences between JavaScript `null`, Objective-C `NSNull`, and Swift `nil`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n{ 'foo': null, 'bar': [1, 2, null, 4]}\n```\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation\nDESCRIPTION: Event handler that calls the plugin's unlock method to allow automatic orientation changes when a button is clicked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.unlock()}\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Marker to Google Maps in TypeScript\nDESCRIPTION: Adds a single marker to the Google Map instance and returns a promise with the marker's ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddMarker(marker: Marker) => Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining Local Notification Properties in Markdown\nDESCRIPTION: This snippet defines the properties available for configuring local notifications in Capacitor. It includes options for extra data, threading, grouping, and platform-specific features for both iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| **`extra`**            | <code>any</code>                              | Set extra data to store within this notification.                                                                                                                                                                                                                                                                                                                                                                               | 1.0.0 |\n| **`threadIdentifier`** | <code>string</code>                           | Used to group multiple notifications. Sets `threadIdentifier` on the [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent). Only available for iOS.                                                                                                                                                                                                                                                                                                        | 1.0.0 |\n| **`summaryArgument`**  | <code>string</code>                           | The string this notification adds to the category's summary format string. Sets `summaryArgument` on the [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent). Only available for iOS.                                                                                                                                                                                                                                                                    | 1.0.0 |\n| **`group`**            | <code>string</code>                           | Used to group multiple notifications. Calls `setGroup()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android.                                                                                                                                                                                                                                                                                           | 1.0.0 |\n| **`groupSummary`**     | <code>boolean</code>                          | If true, this notification becomes the summary for a group of notifications. Calls `setGroupSummary()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android when using `group`.                                                                                                                                                                                                                          | 1.0.0 |\n| **`channelId`**        | <code>string</code>                           | Specifies the channel the notification should be delivered on. If channel with the given name does not exist then the notification will not fire. If not provided, it will use the default channel. Calls `setChannelId()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android 26+.                                                                                                                     | 1.0.0 |\n| **`ongoing`**          | <code>boolean</code>                          | If true, the notification can't be swiped away. Calls `setOngoing()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android.                                                                                                                                                                                                                                                                               | 1.0.0 |\n| **`autoCancel`**       | <code>boolean</code>                          | If true, the notification is canceled when the user clicks on it. Calls `setAutoCancel()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android.                                                                                                                                                                                                                                                          | 1.0.0 |\n| **`inboxList`**        | <code>string[]</code>                         | Sets a list of strings for display in an inbox style notification. Up to 5 strings are allowed. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                                                     | 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Version for Android\nDESCRIPTION: Diff showing the required update to the Google Services version in the build.gradle file when migrating to Capacitor 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.google.gms:google-services:4.3.13'\n+       classpath 'com.google.gms:google-services:4.3.15'\n```\n\n----------------------------------------\n\nTITLE: Installing Push Notifications Plugin - npm & Capacitor CLI - Bash\nDESCRIPTION: This snippet installs the @capacitor/push-notifications plugin and synchronizes the native projects. It requires npm and the Capacitor CLI to be installed in the working environment. The installation registers the plugin in the project and generates the necessary native platform code for proper operation. No code-level changes are required, but this must be run before plugin APIs are used.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining HttpResponse Interface Properties\nDESCRIPTION: Documents the properties of the HttpResponse interface including url (string), status (number), data (any), and headers (HttpHeaders type). Used for handling HTTP response data in Capacitor applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/http.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop          | Type                                                | Description                                       |\n| ------------- | --------------------------------------------------- | ------------------------------------------------- |\n| **`url`**     | <code>string</code>                                 | The response URL recieved from the Http response. |\n| **`status`**  | <code>number</code>                                 | The status code received from the Http response.  |\n| **`data`**    | <code>any</code>                                    | Additional data received with the Http response.  |\n| **`headers`** | <code><a href=\"#httpheaders\">HttpHeaders</a></code> | The headers received from the Http response.      |\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Push Notification Dependencies in TypeScript\nDESCRIPTION: Imports necessary components from the '@capacitor/core' package for handling push notifications within an Angular component. It imports the main `Plugins` object, specific types for push notifications (`PushNotification`, `PushNotificationToken`, `PushNotificationActionPerformed`), and extracts the `PushNotifications` plugin for use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Plugins,\n  PushNotification,\n  PushNotificationToken,\n  PushNotificationActionPerformed,\n} from '@capacitor/core';\n\nconst { PushNotifications } = Plugins;\n```\n\n----------------------------------------\n\nTITLE: Registering Notification Action Types - Capacitor Plugin API TypeScript Method\nDESCRIPTION: Outlines the TypeScript API declaration for registering action types to handle user interactions with notifications on iOS and Android. The registerActionTypes method receives an options object specifying action definitions and returns a Promise. Requires the plugin on supported platforms. Inputs: options (action types). Outputs: Promise when registration succeeds.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregisterActionTypes(options: RegisterActionTypesOptions) => Promise<void>\\n\n```\n\n----------------------------------------\n\nTITLE: Using App Launcher to Check and Open URLs\nDESCRIPTION: TypeScript example demonstrating how to check if an app can be opened with a specific URL and how to open an app with a URL scheme. The example shows two functions: one for checking URL availability and another for opening a URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app-launcher.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLauncher } from '@capacitor/app-launcher';\n\nconst checkCanOpenUrl = async () => {\n  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });\n\n  console.log('Can open url: ', value);\n};\n\nconst openPortfolioPage = async () => {\n  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Screen Orientation Dynamically in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to lock the screen orientation to portrait or landscape mode, and how to unlock it. It uses the window.screen.orientation API provided by the Cordova plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.screen.orientation.lock('portrait');\nwindow.screen.orientation.lock('landscape');\n\n// To unlock orientation which will default back to the global setting:\nwindow.screen.orientation.unlock();\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Vue\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a Vue application, typically in main.ts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/pwa-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Above the createApp() line\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Showing the Status Bar - TypeScript\nDESCRIPTION: Signature for showing the status bar with optional AnimationOptions that can specify iOS-specific animation styles. Returns a Promise and can be called without options. When used on iOS with the status bar initially hidden and style 'UIStatusBarStyleLightContent', use Animation.None to avoid animation glitches.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nshow(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Detecting iOS Platform at Runtime - TypeScript\nDESCRIPTION: This snippet shows how to detect if the app is currently running on an iOS device using the 'getPlatform' method from Capacitor. Dependency is '@capacitor/core'. Input: none; Output: executes conditional code when platform is 'ios'. The result string can also be 'web' or 'android', allowing environment-specific logic. Limited to known platform names.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in capacitor.config.ts (TypeScript)\nDESCRIPTION: Example configuration for the Keyboard plugin using a `capacitor.config.ts` file. It imports necessary types (`CapacitorConfig`, `KeyboardResize`, `KeyboardStyle`) and sets the keyboard resize behavior, style, and `resizeOnFullScreen` property using imported enums.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\nimport { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: KeyboardResize.Body,\n      style: KeyboardStyle.Dark,\n      resizeOnFullScreen: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugins with Capacitor\nDESCRIPTION: Commands to install a Cordova plugin and sync the Capacitor project. This process requires installing the plugin via npm and then syncing the project using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/using-cordova-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining Gallery Photo Selection Result - Capacitor Camera - TypeScript\nDESCRIPTION: This TypeScript interface specifies the contract for the result of a multi-photo pick operation using the Capacitor Camera plugin. The GalleryPhotos interface contains a single property, photos, which is an array of GalleryPhoto objects representing all selected images. It is intended for use in features where multiple photos can be picked from the gallery, and expects the Camera plugin to return a list of structured photo objects in line with this interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GalleryPhotos {\n  photos: GalleryPhoto[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions with SDK Version Constraints\nDESCRIPTION: XML configuration to add Camera plugin permissions to AndroidManifest.xml with SDK version constraints for better compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\"/>\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"29\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Methods in TypeScript\nDESCRIPTION: This snippet defines various methods available on Uint8Array, including copyWithin, every, fill, filter, find, findIndex, forEach, indexOf, join, lastIndexOf, map, reduce, and reduceRight. It provides type signatures and brief descriptions for each method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint8Array {\n  copyWithin(target: number, start: number, end?: number): this;\n  every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n  fill(value: number, start?: number, end?: number): this;\n  filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\n  find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\n  findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\n  forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n  indexOf(searchElement: number, fromIndex?: number): number;\n  join(separator?: string): string;\n  lastIndexOf(searchElement: number, fromIndex?: number): number;\n  map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n  reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n  reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n  reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n  reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n  reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n  reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Capacitor Plugin in Objective-C\nDESCRIPTION: Shows how to register a Swift plugin class and its methods with Capacitor using the CAP_PLUGIN and CAP_PLUGIN_METHOD macros in an Objective-C implementation file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(EchoPlugin, \"Echo\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining CameraResultType Enum in TypeScript\nDESCRIPTION: Defines an enum for CameraResultType with Uri, Base64, and DataUrl members and their corresponding string values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraResultType {\n  Uri = 'uri',\n  Base64 = 'base64',\n  DataUrl = 'dataUrl'\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment-specific Capacitor Configuration\nDESCRIPTION: Dynamic configuration export based on NODE_ENV in capacitor.config.ts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nlet config: CapacitorConfig;\n\nconst baseConfig: CapacitorConfig = {\n  appId: 'io.ionic.starter',\n  appName: 'My App',\n  webDir: 'build',\n  bundledWebRuntime: false,\n};\n\nswitch (process.env.NODE_ENV) {\n  case 'qa':\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App QA',\n      },\n      android: {\n        flavor: 'qa',\n      },\n    };\n    break;\n  default:\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App',\n      },\n      android: {\n        flavor: 'dev',\n      },\n    };\n    break;\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform to Capacitor Project\nDESCRIPTION: Command to add iOS platform support to an existing Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change to the newly created project directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd capApp/\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Plugin Functionality in Java\nDESCRIPTION: Shows how to implement a plugin method for Android platform using the @PluginMethod annotation, extracting parameters from the call object, and resolving the call when complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void openMap(PluginCall call) {\n  Double latitude = call.getDouble(\"latitude\");\n  Double longitude = call.getDouble(\"longitude\");\n\n  // more logic\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Project and Installing Pods via Rosetta (Bash)\nDESCRIPTION: This sequence of commands is used when managing an iOS project on an Apple Silicon Mac where CocoaPods was installed via RubyGems. First, `npx cap copy` updates the native project with the latest web assets. Then, `arch -x86_64 pod install` runs the CocoaPods installation process using Rosetta 2 emulation to ensure compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\narch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Status Bar Plugin (Bash)\nDESCRIPTION: Installs the @capacitor/status-bar npm package and synchronizes Capacitor plugins with native projects. Prerequisites: Node.js/npm and Capacitor CLI must be installed. The first command adds the plugin, and the second ensures changes are applied to iOS/Android platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/status-bar\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Cluster Info Window Click Listener in TypeScript\nDESCRIPTION: Creates a listener for cluster info window click events using ClusterClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnClusterInfoWindowClickListener(callback?: MapListenerCallback<ClusterClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Capacitor Android Plugins\nDESCRIPTION: Demonstrates how to reject a plugin call when an error occurs, passing an error message, code, and exception instance back to JavaScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.reject(exception.getLocalizedMessage(), null, exception);\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleEvery Type Alias in TypeScript\nDESCRIPTION: Defines the ScheduleEvery type alias for specifying notification scheduling intervals.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScheduleEvery = 'year' | 'month' | 'two-weeks' | 'week' | 'day' | 'hour' | 'minute' | 'second';\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts in package.json for Capacitor Projects\nDESCRIPTION: Scripts in package.json define commands for tasks like testing, linting, and building. These can be run using 'npm run [name]' in the command line or through the VS Code extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/vs-code-ext/run-scripts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"jest\",\n  \"lint\": \"eslint .\",\n  \"build\": \"webpack --mode production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation\nDESCRIPTION: TypeScript method to lock the screen to a specific orientation using the OrientationLockOptions parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlock(options: OrientationLockOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version for Android\nDESCRIPTION: Updates the default Kotlin version from 1.8.20 to 1.9.10 in the build.gradle file for plugins that use Kotlin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/6-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\nbuildscript {\n-    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.8.20'\n+    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.9.10'\n    repositories {\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Marker from Google Maps\nDESCRIPTION: Removes a specific marker from the map using its ID. Returns a Promise that resolves when the marker has been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarker(id: string) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Plugin Event Listeners in Angular\nDESCRIPTION: This code shows how to properly use Capacitor plugin event listeners within an Angular application. It demonstrates wrapping the event handler logic in NgZone.run to ensure Angular's change detection is triggered.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/index.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private ngZone: NgZone) { }\n\nasync ngOnInit() {\n  Network.addListener(\"networkStatusChange\", (status) => {\n    this.ngZone.run(() => {\n      // This code will run in Angular's execution context\n      this.networkStatus = status.connected ? \"Online\" : \"Offline\";\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CameraPluginPermissions Interface in TypeScript\nDESCRIPTION: Defines the CameraPluginPermissions interface with a permissions property of type CameraPermissionType array.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CameraPluginPermissions {\n  permissions: CameraPermissionType[];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Motion Listeners API Definition (TypeScript)\nDESCRIPTION: Defines the signature for the `removeAllListeners` method. This function removes all event listeners previously attached to the Motion plugin via `addListener`. It returns a Promise that resolves when all listeners have been successfully removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/motion.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Schedule Configuration Interface\nDESCRIPTION: TypeScript interface definition for scheduling notifications with specific date and time parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScheduleOn {\n  year: number;\n  month: number;\n  day: number;\n  weekday: Weekday;\n  hour: number;\n  minute: number;\n  second: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Clear Method TypeScript Definition\nDESCRIPTION: Type definition for the Storage.clear() method which removes all stored key-value pairs and returns a promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/storage.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclear() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining `destructive` Property Type as `boolean` for LocalNotificationAction\nDESCRIPTION: Specifies that the `destructive` property within the LocalNotificationAction interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Creating New Ionic Project with Capacitor\nDESCRIPTION: Commands to create a new Ionic project with Capacitor integration using the tabs template.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nionic start myApp tabs --capacitor\ncd myApp\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard setResizeMode() Method Signature\nDESCRIPTION: Defines the `setResizeMode` method to programmatically set how the WebView resizes when the keyboard appears (e.g., 'native', 'ionic', 'body', 'none'). It accepts a `KeyboardResizeOptions` object. This method is only supported on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetResizeMode(options: KeyboardResizeOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listening for Watch Commands in TypeScript\nDESCRIPTION: Adds a listener for the 'runCommand' event from the watch. The listener function receives data containing the command string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'runCommand', listenerFunc: (data: { command: string; }) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via Homebrew\nDESCRIPTION: Command to install CocoaPods using Homebrew, required for managing iOS dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Platform Version in Podfile\nDESCRIPTION: Update the iOS deployment target to version 13.0 in the Podfile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '13.0'\n```\n\n----------------------------------------\n\nTITLE: Preparing and opening iOS project in Xcode for Capacitor app\nDESCRIPTION: These bash commands copy the latest web code to the iOS project and open it in Xcode for final compilation. This is part of the native build process for iOS in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/building-your-app.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy ios\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter for Deep Linking in AndroidManifest.xml\nDESCRIPTION: XML configuration for adding an Intent Filter that enables deep linking in an Android app. The filter specifies the scheme and host to match for incoming links.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Defining MapPadding Interface in TypeScript\nDESCRIPTION: Interface for setting padding on the visible region of a Google Map view. Includes properties for top, left, right, and bottom padding values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * Top padding value\n   */\n  top: number;\n  \n  /**\n   * Left padding value\n   */\n  left: number;\n  \n  /**\n   * Right padding value\n   */\n  right: number;\n  \n  /**\n   * Bottom padding value\n   */\n  bottom: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Orientation Plugin in Capacitor\nDESCRIPTION: Shell commands to install the @capacitor/screen-orientation plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor/screen-orientation@latest-4\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Android Plugin Variables for Capacitor 5.0\nDESCRIPTION: Updates to Android dependencies versions in build.gradle, including androidx-related libraries to maintain compatibility with Capacitor 5.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\next {\n    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'\n-   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.4.2'\n+   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'\n-   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.3'\n+   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'\n-   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.4.0'\n+   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript addListener Signature\nDESCRIPTION: Modifies the TypeScript definition for the addListener method to only return a Promise, removing the '& PluginListenerHandle' union type which is no longer supported in Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/6-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  addListener(\n    eventName: 'resume',\n    listenerFunc: () => void,\n- ): Promise<PluginListenerHandle> & PluginListenerHandle;\n+ ): Promise<PluginListenerHandle>;\n```\n\n----------------------------------------\n\nTITLE: Consuming a Custom Capacitor JavaScript Plugin using TypeScript\nDESCRIPTION: This snippet illustrates how an application developer consumes a Capacitor plugin that has a custom JavaScript frontend. The custom class (`CustomSuperPlugin`) is imported directly from the plugin's npm package (`super-great-plugin`), instantiated, and its methods (like `customAwesomeness`) are called. This differs from accessing standard plugins via `Plugins.PluginName`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/js.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { CustomSuperPlugin } from 'super-great-plugin';\n\nconst plugin = new CustomSuperPlugin();\nplugin.customAwesomeness();\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the CapacitorHttp `put` Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet shows the signature for the `put` method within the CapacitorHttp API. It accepts an `HttpOptions` object, typically containing data to update a resource, and returns a `Promise` that resolves to an `HttpResponse`. It facilitates making HTTP PUT requests using native libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nput(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Adding and Syncing Capacitor Plugins with SPM\nDESCRIPTION: Commands to install a Capacitor plugin (in this case the App plugin) and sync it to the iOS project using SPM.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/spm.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing the Plugin Load Lifecycle Method in Java\nDESCRIPTION: Illustrates the `load()` method override within a Capacitor plugin class. This method is automatically invoked by the Capacitor runtime when the plugin is first loaded, allowing for initialization or setup code to be executed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Commands in Foreground with Event Listener\nDESCRIPTION: TypeScript example demonstrating how to implement an event listener for handling commands sent from the watch while the app is in the foreground.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nWatch.addListener(\"runCommand\", (data: {command: string}) => {\n  console.log(\"PHONE got command - \" + data.command);\n})\n```\n\n----------------------------------------\n\nTITLE: Handling CocoaPods Error on Apple Silicon Mac\nDESCRIPTION: This code snippet demonstrates how to resolve a CocoaPods error related to the 'ffi' gem not installing properly on Apple Silicon Macs. It shows commands to install 'ffi' and run 'pod install' using the simulated Intel architecture.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Extending WebPlugin for ScreenOrientationWeb Class in TypeScript\nDESCRIPTION: Defines the ScreenOrientationWeb class that extends Capacitor's WebPlugin and implements the ScreenOrientationPlugin interface. It includes a constructor that sets up an event listener for screen orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\nimport type { ScreenOrientationPlugin } from './definitions';\n\nexport class ScreenOrientationWeb extends WebPlugin {\n  constructor() {\n    super();\n    window.screen.orientation.addEventListener(\"change\", () => {\n      const type = window.screen.orientation.type;\n      this.notifyListeners(\"screenOrientationChange\", { type });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused touchesBegan Method from iOS AppDelegate\nDESCRIPTION: Remove the unnecessary touchesBegan method from AppDelegate.swift as it's no longer needed in Capacitor 4.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n-  super.touchesBegan(touches, with: event)\n-\n-  let statusBarRect = UIApplication.shared.statusBarFrame\n-  guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\n-\n-  if statusBarRect.contains(touchPoint) {\n-      NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\n-  }\n-}\n```\n\n----------------------------------------\n\nTITLE: Running Trapeze Configuration\nDESCRIPTION: Shows the command to execute the Trapeze configuration tool using npm run script.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/automated-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cap-config\n```\n\n----------------------------------------\n\nTITLE: Getting Primitive Value with Date.valueOf() in JavaScript\nDESCRIPTION: The `valueOf()` method returns the primitive value of a Date object, which is the number of milliseconds elapsed since midnight January 1, 1970, UTC.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvalueOf(): number\n```\n\n----------------------------------------\n\nTITLE: Adding Accelerometer Event Listener\nDESCRIPTION: Code snippet showing how to add a listener for accelerometer data using the Motion plugin API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/motion.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Including Capacitor Runtime and App Script in HTML – HTML\nDESCRIPTION: This HTML snippet demonstrates how to load the Capacitor runtime ('capacitor.js') and the main application script ('your/app.js') by including them in the <script> tags within the project's 'index.html' file. The Capacitor script must be loaded first to ensure its APIs are available when the app script executes. This approach is suitable when not using a build system or module loader.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"capacitor.js\\\"></script>\\n<script src=\\\"your/app.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Polyline Configuration Interface in TypeScript\nDESCRIPTION: Interface for configuring polylines on Google Maps across web, iOS, and Android platforms. Includes properties for controlling appearance such as color, opacity, weight, and behavior settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  strokeColor: string;\n  \n  /**\n   * The stroke opacity between 0.0 and 1.0.\n   */\n  strokeOpacity: number;\n  \n  /**\n   * The stroke width in pixels.\n   */\n  strokeWeight: number;\n  \n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\n   * When false, edges of the polygon are rendered as straight lines in screen space.\n   */\n  geodesic: boolean;\n  \n  /**\n   * Indicates whether this Polyline handles mouse events.\n   */\n  clickable: boolean;\n  \n  /**\n   * Tag for the polyline\n   */\n  tag: string;\n  \n  /**\n   * Used to specify the color of one or more segments of a polyline.\n   * Only on iOS and Android.\n   */\n  styleSpans: StyleSpan[];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Permissions - Capacitor Plugin API - TypeScript\nDESCRIPTION: The checkPermissions method checks whether the application has permission to display local notifications. It returns a Promise resolving to a PermissionStatus object. Developers should use this to determine if a permission request is needed before proceeding to schedule notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Hook Scripts in Capacitor (JSON)\nDESCRIPTION: Demonstrates how to configure Capacitor CLI hooks by specifying custom commands under the scripts section of the package.json file. The snippet sets up scripts for running shell echo commands before and after major Capacitor operations, using the $CAPACITOR_PLATFORM_NAME environment variable. Requires a Node.js project with Capacitor, and the inputs are trigger events for each Capacitor CLI action; the outputs are echoed informational messages during CLI execution. No external dependencies are required beyond standard CLI environment and package.json.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"capacitor:copy:before\\\": \\\"echo copy before $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:copy:after\\\": \\\"echo copy after $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:update:before\\\": \\\"echo update before $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:update:after\\\": \\\"echo update after $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:sync:before\\\": \\\"echo sync before $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:sync:after\\\": \\\"echo sync after $CAPACITOR_PLATFORM_NAME\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Token Interface in TypeScript\nDESCRIPTION: TypeScript interface for push notification tokens, containing the platform-specific token value (APNS for iOS, FCM for Android).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Token {\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing App Versions and Build Numbers with Trapeze (TypeScript)\nDESCRIPTION: Demonstrates various operations for managing iOS and Android application versions and build numbers using a MobileProject instance. The snippet performs setting and retrieving versions and build numbers for both platforms. Requires an initialized and loaded MobileProject object; outputs are update operations (side effects on internal virtual filesystem), and return values for retrieval calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/automated-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.ios?.setVersion('App', 'Debug', '1.4.5');\nawait project.ios?.incrementBuild('App');\nawait project.ios?.getBuild('App', 'Debug');\nawait project.ios?.getBuild('App', 'Release');\nawait project.android?.setVersionName('1.0.2');\nawait project.android?.getVersionName();\nawait project.android?.setVersionCode(11);\nawait project.android?.getVersionCode();\nawait project.android?.incrementVersionCode();\n```\n\n----------------------------------------\n\nTITLE: Overriding WebView Navigation in a Capacitor Android Plugin (Method Signature) in Java\nDESCRIPTION: Shows the Java method signature `public Boolean shouldOverrideLoad(Uri url)` which can be overridden within a Capacitor Android plugin to control WebView navigation. Returning `true` blocks the navigation, `false` allows it, and `null` defers to the default Capacitor behavior. The implementation logic is not shown. Requires Capacitor Plugin API and Android SDK context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic Boolean shouldOverrideLoad(Uri url)\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Reader State Change Listener in TypeScript\nDESCRIPTION: TypeScript code snippet for adding a listener to detect when the screen reader is turned on or off.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-reader.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Removing Polygons from Google Maps in TypeScript\nDESCRIPTION: Removes multiple polygons from the Google Map instance using an array of polygon IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nremovePolygons(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Declaring Supported Orientations Property in ScreenOrientationPlugin\nDESCRIPTION: This code defines a static property in the ScreenOrientationPlugin class to store the currently supported orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic static var supportedOrientations = UIInterfaceOrientationMask.all\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor and Subclassing CAPBridgeViewController in Swift\nDESCRIPTION: This code snippet shows how to import the Capacitor framework and create a custom ViewController that subclasses CAPBridgeViewController. This is the foundation for customizing Capacitor's behavior in iOS apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/viewcontroller.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\n\nclass MyViewController: CAPBridgeViewController {\n    // additional code\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Capacitor Plugin Wrapper for iOS\nDESCRIPTION: This code shows how to create the plugin wrapper class that implements CAPPlugin and CAPBridgedPlugin interfaces, registering methods that will be exposed to JavaScript and delegating to the implementation class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin, CAPBridgedPlugin {\n    public let identifier = \"EchoPlugin\"\n    public let jsName = \"Echo\"\n    public let pluginMethods: [CAPPluginMethod] = [\n        CAPPluginMethod(name: \"echo\", returnType: CAPPluginReturnPromise)\n    ]\n    private let implementation = Echo()\n\n    @objc func echo(_ call: CAPPluginCall) {\n        let value = call.getString(\"value\") ?? \"\"\n        call.resolve([\n            \"value\": implementation.echo(value)\n        ])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard addListener('keyboardDidHide') Method Signature\nDESCRIPTION: Defines the `addListener` method for subscribing to the `keyboardDidHide` event, which fires after the keyboard has finished animating out of view. The listener function receives no arguments. Returns a `PluginListenerHandle`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Removing All Screen Orientation Listeners - Capacitor Plugin Method (TypeScript)\nDESCRIPTION: This TypeScript method removes all event listeners associated with the Screen Orientation plugin in the current context. It returns a Promise resolving to void. This is useful for cleanup in component unmounts or to prevent multiple listeners in a single application context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Checking for Native Platform with isNativePlatform\nDESCRIPTION: Shows the isNativePlatform function signature and how to determine if the app is running on a native platform (iOS or Android).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nisNativePlatform: () => boolean;\n```\n\n----------------------------------------\n\nTITLE: Indicating Unavailable Functionality in Capacitor Plugin (Swift)\nDESCRIPTION: This Swift snippet defines a plugin method that checks if the required iOS framework is available at runtime using the @available condition. If the framework is not available (e.g., the device is running iOS 13 or below), it calls call.unavailable with an explanatory message to inform the Capacitor runtime. Requires a Capacitor plugin context and assumes CAPPluginCall is provided by the Capacitor framework. Input is an instance of CAPPluginCall; output is implicit via the error signaling method. Limitations: Only appropriate when functionality is strictly unavailable on older iOS versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatUsesNewIOSFramework(_ call: CAPPluginCall) {\n    if #available(iOS 14, *) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available in iOS 13 or earlier.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacitor CLI Hooks in package.json\nDESCRIPTION: This code snippet shows how to add Capacitor CLI Hooks to the scripts section of a package.json file. It demonstrates hooks for copy, update, and sync commands, both before and after execution, using echo commands to display the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"capacitor:copy:before\": \"echo copy before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:copy:after\": \"echo copy after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:before\": \"echo update before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:after\": \"echo update after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:before\": \"echo sync before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:after\": \"echo sync after $CAPACITOR_PLATFORM_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add Registration Error Listener - TypeScript\nDESCRIPTION: Adds listener for push notification registration errors, providing error details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registrationError', listenerFunc: (error: RegistrationError) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Checking Share Capability in TypeScript\nDESCRIPTION: Defines the `canShare()` method signature. This asynchronous function checks if the device supports the native sharing functionality and returns a Promise resolving to a `CanShareResult` object, indicating availability.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/share.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncanShare() => Promise<CanShareResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Link Statement - JSON\nDESCRIPTION: This snippet represents the assetlinks.json configuration needed to associate an Android app package with a website for deep linking. The 'target' specifies the Android app's package name and SHA256 fingerprints. Place this under .well-known/assetlinks.json on your HTTPS-hosted website. Inputs: valid app package name and fingerprint. Output: enables Android App Links verification.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// assetlinks.json\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"com.netkosoft.beerswift\",\n      \"sha256_cert_fingerprints\": [\"43:12:D4:27:D7:C4:14...\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: GoogleMapConfig Interface Definition\nDESCRIPTION: Interface defining configuration options for Google Maps implementation across platforms. Extends google.maps.MapOptions for web while providing specific options for iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GoogleMapConfig {\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  center?: LatLng;\n  zoom?: number;\n  androidLiteMode?: boolean;\n  devicePixelRatio?: number;\n  styles?: MapTypeStyle[] | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in capacitor.config.ts\nDESCRIPTION: Example configuration for the Keyboard plugin using a `capacitor.config.ts` file. It imports `CapacitorConfig` and defines the configuration within the `plugins` object, setting `resize`, `style`, and `resizeOnFullScreen` options. Requires the `@capacitor/keyboard` types reference (`/// <reference ... />`) for type checking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: \"body\",\n      style: \"dark\",\n      resizeOnFullScreen: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor Platform Support\nDESCRIPTION: Commands to add Android and iOS platform support to a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Window\nDESCRIPTION: Method to close an open browser window on Web and iOS platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclose() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Screen Orientation Plugin with Capacitor in Swift\nDESCRIPTION: Initial implementation of the ScreenOrientationPlugin class that extends CAPPlugin and implements CAPBridgedPlugin. This code registers the plugin methods with Capacitor and provides empty implementations for orientation, lock, and unlock functions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nimport Capacitor\n\n@objc(ScreenOrientationPlugin)\npublic class ScreenOrientationPlugin: CAPPlugin, CAPBridgedPlugin {\n  public let identifier = \"ScreenOrientationPlugin\"\n  public let jsName = \"ScreenOrientation\"\n  public let pluginMethods: [CAPPluginMethod] = [\n      CAPPluginMethod(name: \"orientation\", returnType: CAPPluginReturnPromise),\n      CAPPluginMethod(name: \"lock\", returnType: CAPPluginReturnPromise),\n      CAPPluginMethod(name: \"unlock\", returnType: CAPPluginReturnPromise)\n  ]\n\n  @objc public func orientation(_ call: CAPPluginCall) {\n    call.resolve()\n  }\n\n  @objc public func lock(_ call: CAPPluginCall) {\n    call.resolve()\n  }\n\n  @objc public func unlock(_ call: CAPPluginCall) {\n    call.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `triggerJSEvent` Method Signatures in Capacitor Android Bridge (Java)\nDESCRIPTION: Presents the overloaded Java method signatures for `triggerJSEvent()` on the Capacitor Android `Bridge`. These methods are used to dispatch events from native Android code to a specified JavaScript EventTarget (like `window` or `document`). One version accepts event name and target, while the other includes a string data payload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void triggerJSEvent(final String eventName, final String target)\npublic void triggerJSEvent(final String eventName, final String target, final String data)\n```\n\n----------------------------------------\n\nTITLE: Referencing Package.json Script Commands\nDESCRIPTION: Example of how scripts are referenced in package.json and can be run using npm commands. These scripts typically handle tasks like testing, linting, and building.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/run-scripts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"npm run [name]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in Android Manifest\nDESCRIPTION: XML configuration to register a custom URL scheme for Android apps in the AndroidManifest.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"@string/custom_url_scheme\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Defining Apple App Site Association File for iOS Universal Links - JSON\nDESCRIPTION: Represents the required JSON content of an apple-app-site-association file for enabling Universal Links on iOS. The file specifies the appID (team ID and bundle ID combination) and which URL paths the app claims (here all with '*'). The file must be hosted at https://<yourdomain>/.well-known/apple-app-site-association without an extension and accessible over HTTPS. Replace TEAMID.BUNDLEID with your actual values. This file should not have an extension and must be served with the correct Content-Type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorApp Interface in TypeScript\nDESCRIPTION: This snippet defines the CapacitorApp interface with methods to get app state and info. It uses TypeScript type definitions to specify the return types of the methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CapacitorApp {\n  getState: () => AppState;\n  getInfo: () => AppInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Status Bar with Capacitor Plugin - TypeScript\nDESCRIPTION: Demonstrates core methods provided by @capacitor/status-bar for controlling and configuring the status bar in a Capacitor app. It includes importing required APIs, listening for the iOS-specific statusTap event, overlaying the webview on Android, and creating asynchronous functions to set bar style to Dark or Light, as well as to hide or show the status bar. Input parameters such as the style for setStyle and overlay option for setOverlaysWebView are demonstrated. Requires the @capacitor/status-bar package installed, and must be used in a Capacitor-based TypeScript project with proper platform configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\n// iOS only\nwindow.addEventListener('statusTap', function () {\n  console.log('statusbar tapped');\n});\n\n// Display content under transparent status bar (Android only)\nStatusBar.setOverlaysWebView({ overlay: true });\n\nconst setStatusBarStyleDark = async () => {\n  await StatusBar.setStyle({ style: Style.Dark });\n};\n\nconst setStatusBarStyleLight = async () => {\n  await StatusBar.setStyle({ style: Style.Light });\n};\n\nconst hideStatusBar = async () => {\n  await StatusBar.hide();\n};\n\nconst showStatusBar = async () => {\n  await StatusBar.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Confirm Dialog API in TypeScript\nDESCRIPTION: API definition for showing a confirmation dialog using the Dialog.confirm() method. Includes parameter type and return type information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/dialog.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(options: ConfirmOptions) => Promise<ConfirmResult>\n```\n\n----------------------------------------\n\nTITLE: Defining GalleryPhotos Interface in TypeScript\nDESCRIPTION: This snippet defines the GalleryPhotos interface, which represents a collection of photos picked from the device's gallery. It contains a single property 'photos' which is an array of GalleryPhoto objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryPhotos {\n  photos: GalleryPhoto[];\n}\n```\n\n----------------------------------------\n\nTITLE: AddEventListenerOptions Interface Definition - TypeScript\nDESCRIPTION: Defines options for addEventListener method including once and passive flags. These options control event listener behavior and performance characteristics.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AddEventListenerOptions {\n  once: boolean;\n  passive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Permission State Type Definition\nDESCRIPTION: Type definition for the possible permission states in the camera plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied'\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Registration\nDESCRIPTION: Basic JavaScript code to register the Echo plugin using Capacitor's registerPlugin function.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Copying Web Assets to Native Project\nDESCRIPTION: Command to copy built web assets to the native platform projects for deployment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Implementing Facade Pattern in Java for Capacitor Local Notifications Plugin\nDESCRIPTION: This snippet shows the use of the Facade design pattern in the Local Notifications plugin for Capacitor. It demonstrates how complex subsystem interactions are simplified through a single interface, hiding the underlying complexity from the client code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n    super.load();\n    notificationStorage = new NotificationStorage(getContext());\n    manager = new LocalNotificationManager( … );\n    manager.createNotificationChannel();\n    notificationChannelManager = new NotificationChannelManager(getActivity());\n    staticBridge = this.bridge;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Notification Service Extension with Firebase Messaging\nDESCRIPTION: This Swift code implements the Notification Service Extension for iOS, integrating Firebase Messaging to handle image notifications. It includes methods for receiving notifications and handling service extension time expiration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nimport UserNotifications\nimport FirebaseMessaging\n\nclass NotificationService: UNNotificationServiceExtension {\n    var contentHandler: ((UNNotificationContent) -> Void)?\n    var bestAttemptContent: UNMutableNotificationContent?\n\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        guard let content = request.content.mutableCopy() as? UNMutableNotificationContent else { return }\n        self.contentHandler = contentHandler\n        self.bestAttemptContent = content\n        \n        FIRMessagingExtensionHelper().populateNotificationContent(content, withContentHandler: contentHandler)\n    }\n    \n    override func serviceExtensionTimeWillExpire() {\n        guard let contentHandler = contentHandler,\n              let bestAttemptContent =  bestAttemptContent else { return }\n        \n        contentHandler(bestAttemptContent)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Permissions from AndroidManifest.xml\nDESCRIPTION: Diff showing how to clean up the AndroidManifest.xml by removing permissions that are now included directly in the plugin manifests. This reflects Capacitor 3's more modular approach to permissions management.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n     <!-- Permissions -->\n\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n\n-    <!-- Network API -->\n-    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n-    <!-- Vibration API -->\n-    <uses-permission android:name=\"android.permission.VIBRATE\" />\n\n </manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform to Capacitor Project\nDESCRIPTION: Command to add iOS platform support to an existing Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in capacitor.config.json\nDESCRIPTION: JSON configuration for setting up the server URL in capacitor.config.json, which is necessary for Live Reload functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/live-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"url\": \"http://192.168.1.68:8100\",\n  \"cleartext\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Checking Local Notification Permissions - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This signature for 'checkPermissions' determines current permission status for showing local notifications. Returns a Promise resolving to PermissionStatus. Relies on PermissionStatus type definition. Useful before requesting permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration Values in Android (Java)\nDESCRIPTION: Shows how to access plugin configuration values in the native Android implementation using the getConfig() method. It demonstrates retrieving the 'style' configuration value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString style = getConfig().getString(\"style\");\nif(style) {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Unlock Method Implementation\nDESCRIPTION: Capacitor plugin method implementation for unlocking screen orientation and restoring all supported orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func unlock(_ call: CAPPluginCall) {\n  implementation.unlock {\n    ScreenOrientationPlugin.supportedOrientations = UIInterfaceOrientationMask.all\n    call.resolve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Preferences in Capacitor Configuration\nDESCRIPTION: Example of how to add Cordova plugin preferences to the Capacitor configuration file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cordova\": {\n    \"preferences\": {\n      \"DisableDeploy\": \"true\",\n      \"CameraUsesGeolocation\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jetifier for AndroidX Compatibility in Bash\nDESCRIPTION: This snippet shows how to install and use Jetifier to patch plugins with old Android support dependencies to use AndroidX equivalents. It's a workaround for the 'package android.support.* does not exist' error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\nnpx jetify\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Emitting Plugin Event in Swift\nDESCRIPTION: Shows how to emit a plugin event from the Swift plugin class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nself.notifyListeners(\"myPluginEvent\", data: [:])\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorCookies setCookie Method Signature\nDESCRIPTION: This TypeScript signature defines the `setCookie` method of the Capacitor Cookies API. It accepts a `SetCookieOptions` object containing details like URL, key, value, path, and expiration, and returns a Promise that resolves when the cookie has been written.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetCookie(options: SetCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Geolocation Plugin using npm\nDESCRIPTION: Installs the `@capacitor/geolocation` package using npm and synchronizes the native project dependencies using the Capacitor CLI (`npx cap sync`). This is the standard procedure for adding a Capacitor plugin to a project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/geolocation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining the PermissionState Type Alias in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `PermissionState` representing the standard permission states returned by Capacitor permission checks. Possible values are 'prompt', 'prompt-with-rationale', 'granted', and 'denied'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform to Capacitor Project\nDESCRIPTION: Adds the iOS platform to the Capacitor project using the Capacitor CLI. This creates the necessary iOS project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI Dependencies for Live Reload\nDESCRIPTION: Commands to install the Ionic CLI and native-run utility globally for enabling Live Reload functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/live-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli native-run\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Plugin in Capacitor Swift Bridge\nDESCRIPTION: This Swift code snippet demonstrates how to register the EchoPlugin instance within a custom MyViewController. The method capacitorDidLoad() is overridden to register the plugin with the Capacitor bridge after the web view is initialized. Dependencies include correct subclassing from the appropriate Capacitor base class and having the EchoPlugin defined and imported. This pattern is necessary for enabling custom Swift plugins to be accessible to the frontend.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\noverride open func capacitorDidLoad() {\n    bridge?.registerPluginInstance(EchoPlugin())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin Version\nDESCRIPTION: Diff showing the update to the Gradle plugin version from 8.0.0 to 8.2.1 in the Android build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:8.0.0'\n+       classpath 'com.android.tools.build:gradle:8.2.1'\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Status Bar Plugin using Bash\nDESCRIPTION: This snippet shows the necessary commands to install the @capacitor/status-bar plugin using npm and then synchronize the Capacitor project's native dependencies. This makes the plugin available in the native iOS and Android projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/status-bar\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Constant for External Directory in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the External directory for Capacitor Filesystem operations using the 'EXTERNAL' string literal. On iOS, this maps to the Documents directory. On Android, it refers to a directory on the primary shared/external storage for application-owned persistent files, which are internal to the app and typically not user-visible media. These files are deleted upon uninstallation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n'EXTERNAL'\n```\n\n----------------------------------------\n\nTITLE: Managing Screen Orientation Lifecycle with React useEffect\nDESCRIPTION: React useEffect hook to get the initial orientation when the component loads and clean up listeners when unmounted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  ScreenOrientation.orientation().then(res => setOrientation(res.type));\n\n  return () => {\n    ScreenOrientation.removeAllListeners();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK to iOS Podfile\nDESCRIPTION: Modification to the Podfile to include Firebase Messaging SDK for iOS using CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'FirebaseMessaging' # Add this line\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable API in Web Plugin Method\nDESCRIPTION: This snippet demonstrates how to handle cases where a web API is not available in the browser. It checks for the existence of the Geolocation API and throws an 'unavailable' error if not supported.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync getLocation(): Promise<Location> {\n  if (typeof navigator === 'undefined' || !navigator.geolocation) {\n    throw this.unavailable('Geolocation API not available in this browser.');\n  }\n\n  // TODO: actual web implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Functionality for Capacitor Plugin in TypeScript\nDESCRIPTION: This code shows how to implement the web version of the new openMap method in the web.ts file. It extends the WebPlugin class and implements the EchoPlugin interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  EchoPlugin,\n  OpenMapOptions,\n} from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  // other methods\n\n  async openMap(location: OpenMapOptions): Promise<void> {\n    // logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications in capacitor.config.ts\nDESCRIPTION: TypeScript configuration for Local Notifications in capacitor.config.ts, including type reference and plugin settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/local-notifications\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    LocalNotifications: {\n      smallIcon: \"ic_stat_icon_config_sample\",\n      iconColor: \"#488AFF\",\n      sound: \"beep.wav\",\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Constant for Documents Directory in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the Documents directory for Capacitor Filesystem operations using the 'DOCUMENTS' string literal. On iOS, this refers to the app's private documents directory. On Android, it corresponds to the public Documents folder, requiring legacy external storage permission on Android 10 and having limited access on Android 11+. This directory is intended for user-generated content.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n'DOCUMENTS'\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor Native Platforms - Bash\nDESCRIPTION: This sequence of shell commands installs the required Capacitor platform dependencies for iOS and Android, then registers both platforms with the project. Installation of @capacitor/ios and @capacitor/android via npm is required, followed by executing the Capacitor CLI to add iOS and Android platform folders to the project source.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Using App Launcher in TypeScript\nDESCRIPTION: Example showing how to use the AppLauncher plugin to check if a URL can be opened and open a specific URL with parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app-launcher.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLauncher } from '@capacitor/app-launcher';\n\nconst checkCanOpenUrl = async () => {\n  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });\n\n  console.log('Can open url: ', value);\n};\n\nconst openPortfolioPage = async () => {\n  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });\n};\n```\n\n----------------------------------------\n\nTITLE: Cordova Edit-Config Element for iOS Info.plist (XML)\nDESCRIPTION: This XML shows a Cordova edit-config block used to set iOS Info.plist values like NSCameraUsageDescription. In Capacitor, equivalent keys should be set manually in Info.plist or via the appropriate configuration guide. The snippet demonstrates the style and semantics of Cordova's plugin.xml entries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<edit-config file=\"*-Info.plist\" mode=\"merge\" target=\"NSCameraUsageDescription\">\n    <string>Used to take photos</string>\n</edit-config>\n```\n\n----------------------------------------\n\nTITLE: Installing FFI for Apple Silicon Macs\nDESCRIPTION: Command to install FFI package for running CocoaPods on Apple Silicon Macs through Rosetta.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo arch -x86_64 gem install ffi\n```\n\n----------------------------------------\n\nTITLE: Deleting Notification Channel in Capacitor (Android)\nDESCRIPTION: Delete a notification channel. Only available on Android O or newer (SDK 26+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation to Landscape (TypeScript)\nDESCRIPTION: This snippet demonstrates how to lock the screen orientation to landscape mode using the ScreenOrientation API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/using-api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.lock({ orientation: \"landscape-primary\" })}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform using Capacitor CLI (Bash)\nDESCRIPTION: Integrates the iOS native platform into the Ionic project using the Capacitor CLI (`ionic cap add ios`). This command creates an 'ios' folder containing the native Xcode project configured to run the Ionic web app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nionic cap add ios\n```\n\n----------------------------------------\n\nTITLE: Defining the Bridge's config Property in Swift\nDESCRIPTION: Shows the definition of the `config` property on the Capacitor bridge. This read-only property provides access to the `InstanceConfiguration` object containing the runtime configuration known to Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar config: InstanceConfiguration { get }\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events in Capacitor iOS\nDESCRIPTION: Demonstrates how to trigger JavaScript events on different targets from the iOS native side using the bridge.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\nbridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"{ 'dataKey': 'dataValue' }\")\n```\n\n----------------------------------------\n\nTITLE: Creating Common Gradle Variables File for Android\nDESCRIPTION: This Groovy code defines a set of common variables in a new `android/variables.gradle` file. These variables centralize version numbers for SDKs (min, compile, target) and various AndroidX and other dependencies used in the Android project, improving maintainability.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\next {\n  minSdkVersion = 21\n  compileSdkVersion = 29\n  targetSdkVersion = 29\n  androidxAppCompatVersion = '1.1.0'\n  androidxCoreVersion =  '1.2.0'\n  androidxMaterialVersion =  '1.1.0-rc02'\n  androidxBrowserVersion =  '1.2.0'\n  androidxLocalbroadcastmanagerVersion =  '1.0.0'\n  firebaseMessagingVersion =  '20.1.2'\n  playServicesLocationVersion =  '17.0.0'\n  junitVersion =  '4.12'\n  androidxJunitVersion =  '1.1.1'\n  androidxEspressoCoreVersion =  '3.2.0'\n  cordovaAndroidVersion =  '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Capacitor Plugin for Testing\nDESCRIPTION: This bash command demonstrates how to install a local Capacitor plugin for testing purposes using npm install with a local path.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ../path/to/echo\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable on Mac\nDESCRIPTION: This code sets the JAVA_HOME environment variable on Mac to resolve the 'Unable to locate a Java Runtime' error. It points to the JDK path used by Android Studio.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=\"/Applications/Android Studio.app/Contents/jre/Contents/Home\"\n```\n\n----------------------------------------\n\nTITLE: StatusBar Configuration in TypeScript\nDESCRIPTION: TypeScript configuration example for StatusBar plugin in capacitor.config.ts, showing how to properly type and configure the plugin properties.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"@capacitor/status-bar\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    StatusBar: {\n      overlaysWebView: false,\n      style: \"DARK\",\n      backgroundColor: \"#ffffffff\",\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Splash Screen Capacitor Plugin - Bash\nDESCRIPTION: This snippet provides the commands needed to install the @capacitor/splash-screen plugin and synchronize it with a Capacitor project. Users must have Node.js and npm installed, and a Capacitor project initialized. The commands use npm to add the plugin and the Capacitor CLI to sync native platform dependencies. No file modifications are made beyond package updates and native sync application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/splash-screen\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: EventListenerObject Interface Definition - TypeScript\nDESCRIPTION: Defines the EventListenerObject interface with a handleEvent method for processing events. This interface provides an alternative to function-based event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventListenerObject {\n  handleEvent(evt: Event): void;\n}\n```\n\n----------------------------------------\n\nTITLE: CapacitorApp Interface Definition - TypeScript\nDESCRIPTION: Defines the CapacitorApp interface with methods for retrieving app state and information. Includes method signatures for getState() and getInfo().\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CapacitorApp {\n  getState(): AppState;\n  getInfo(): AppInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Interaction for Google Maps in TypeScript\nDESCRIPTION: Disables touch interaction for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndisableTouch() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPerformed Interface in TypeScript\nDESCRIPTION: This code snippet defines the ActionPerformed interface, which represents the action performed on a notification, including the action ID, input value, and the notification itself.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue: string;\n  notification: PushNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Platform Version in Podfile\nDESCRIPTION: Updates the iOS platform version from an older version to the minimum required iOS 13.0 in the Podfile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '13.0'\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Plugin in MainActivity (Java)\nDESCRIPTION: This code snippet shows how to register the custom native plugin (`EchoPlugin`) within the Android application's `MainActivity.java`. By calling `registerPlugin(EchoPlugin.class)` inside the `onCreate` method, the plugin becomes available to the Capacitor bridge when the app starts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n+        registerPlugin(EchoPlugin.class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Plugin Registration Update\nDESCRIPTION: Shows the new way to register Capacitor plugins using the registerPlugin function with lazy loading support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\nimport type { CoolPlugin } from './definitions';\n\nconst MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {\n  web: () => import('./web').then(m => new m.MyCoolPluginWeb()),\n  // electron: () => (\"./electron\").then(m => new m.MyCoolPluginElectron())\n});\n\nexport * from './definitions';\nexport { MyCoolPlugin };\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications Handlers\nDESCRIPTION: Implementation of the ngOnInit method with Push Notifications API to handle registration, errors, and notification events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomePage implements OnInit {\n\nngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration',\n      (token: Token) => {\n        alert('Push registration success, token: ' + token.value);\n      }\n    );\n\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError',\n      (error: any) => {\n        alert('Error on registration: ' + JSON.stringify(error));\n      }\n    );\n\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      }\n    );\n\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      }\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling API Version Compatibility in Capacitor Android Plugins\nDESCRIPTION: Demonstrates how to check the Android API level and gracefully handle unavailable features by using the unavailable() method for backward compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatUsesNewAndroidAPI(PluginCall call) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available on Android API 25 or earlier.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor App Plugin\nDESCRIPTION: Command to install the Capacitor App plugin. This is an example of adding a Capacitor plugin to your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app\n```\n\n----------------------------------------\n\nTITLE: iOS Scheme Configuration\nDESCRIPTION: Configuration to change the iOS scheme from capacitor to ionic for maintaining LocalStorage data\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"iosScheme\": \"ionic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CameraMoveStartedCallbackData Interface in TypeScript\nDESCRIPTION: Specifies the data structure for the camera move started callback, including map ID and whether the move was initiated by a gesture.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CameraMoveStartedCallbackData {\n  mapId: string;\n  isGesture: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: API: addListener('keyboardWillHide', ...) Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for adding an event listener for the `keyboardWillHide` event. The listener function takes no arguments. It returns a Promise resolving to a `PluginListenerHandle`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardWillHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Configuring CapacitorCookies in TypeScript Configuration\nDESCRIPTION: TypeScript configuration for enabling the CapacitorCookies plugin in the capacitor.config.ts file. Imports the CapacitorConfig type and sets the 'enabled' property to true.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorCookies: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Changing Exact Notification Settings in Capacitor (TypeScript)\nDESCRIPTION: Method to direct the user to application settings to configure exact alarms. Only available on Android 12+, and will return 'granted' on earlier versions. The app will restart if permissions are changed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nchangeExactNotificationSetting() => Promise<SettingsPermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Unlinking Local Plugin from Application\nDESCRIPTION: Command to remove a locally linked plugin from the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall echo\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugin in JavaScript\nDESCRIPTION: This snippet shows how to register the custom EchoPlugin in JavaScript using the registerPlugin function from @capacitor/core.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Plugin\nDESCRIPTION: Commands for installing the published plugin in a Capacitor application. This includes the npm install command and running the Capacitor sync command to update native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor-community/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Clipboard Read Method Definition\nDESCRIPTION: TypeScript method signature for reading data from the clipboard. Returns a Promise containing ClipboardReadResult.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/clipboard.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nread() => Promise<ClipboardReadResult>\n```\n\n----------------------------------------\n\nTITLE: Removing All Keyboard Event Listeners in TypeScript\nDESCRIPTION: Method to remove all native listeners associated with the keyboard plugin. Returns a Promise that resolves when all listeners are removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Marker to Google Maps\nDESCRIPTION: Adds a single marker to the map. Returns a Promise that resolves to a string representing the unique ID of the added marker.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddMarker(marker: Marker) => Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server for Capacitor Docs\nDESCRIPTION: Commands to install project dependencies and start the local development server for Capacitor documentation. Requires npm version 8+ and Node.js 16+.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Push Notifications Plugin\nDESCRIPTION: Commands to install the Capacitor Push Notifications plugin and sync the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Enumerating Scan Orientation Options (TypeScript)\nDESCRIPTION: The `CapacitorBarcodeScannerScanOrientation` enum defines options for the scanner's UI orientation. It includes `PORTRAIT`, `LANDSCAPE`, and `ADAPTIVE` (which likely adjusts based on device orientation).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nenum CapacitorBarcodeScannerScanOrientation {\n    PORTRAIT = 1,\n    LANDSCAPE = 2,\n    ADAPTIVE = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Autofill Credentials Form in Angular\nDESCRIPTION: HTML code for an Angular form with ion-input elements configured for email and password autofill. Includes necessary autocomplete attributes and ngModel bindings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/autofill-credentials.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input appAutofill type=\"email\" name=\"email\" autocomplete=\"email\" [(ngModel)]=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input appAutofill type=\"password\" name=\"password\" autocomplete=\"current-password\" required [(ngModel)]=\"password\"></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generating Icons and Splash Screens with cordova-res in Bash\nDESCRIPTION: Commands to generate and copy icons and splash screens for iOS and Android using cordova-res.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncordova-res ios --skip-config --copy\ncordova-res android --skip-config --copy\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners with InAppBrowser\nDESCRIPTION: TypeScript code to add event listeners for browser events using the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nawait InAppBrowser.addListener('browserClosed', () => {\n    console.log(\"browser was closed.\");\n});\n\nawait InAppBrowser.addListener('browserPageNavigationCompleted', (data) => {\n    console.log(\"browser page navigation was completed. \" + data.url);\n});\n\nawait InAppBrowser.addListener('browserPageLoaded', () => {\n    console.log(\"browser was loaded.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the AppState Interface - TypeScript\nDESCRIPTION: Defines the AppState interface, describing whether the app is active. Used to determine and communicate the current foreground/background state of the app. Returns a boolean flag indicating activity and is intended for consumption by state change listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppState {\n  isActive: boolean; // Whether the app is active or not.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Load Function to Initialize Screen Orientation\nDESCRIPTION: Updates the load() function to set up orientation change listeners and initialize the view controller reference needed for orientation management.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n  NotificationCenter.default.addObserver(\n    self,\n    selector: #selector(self.orientationDidChange),\n    name: UIDevice.orientationDidChangeNotification,\n    object: nil)\n  if let viewController = (self.bridge?.viewController as? CAPBridgeViewController) {\n    implementation.setCapacitorViewController(viewController)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners for 'keyboardDidHide' - Capacitor - TypeScript\nDESCRIPTION: Defines a method for subscribing to the 'keyboardDidHide' event, enabling developers to execute logic when the virtual keyboard is dismissed. Depends on the Capacitor plugin listener interface. Expects an event name ('keyboardDidHide') and a callback function, and returns a promise resolving to a PluginListenerHandle, which allows removing the listener later. Input parameters: event name and listener function; Output: Promise and PluginListenerHandle combination.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation (TypeScript)\nDESCRIPTION: This code shows how to unlock the screen orientation, allowing it to change freely, using the ScreenOrientation API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/using-api.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.unlock()}\n```\n\n----------------------------------------\n\nTITLE: Adding Android-specific Capacitor Configuration\nDESCRIPTION: Adds Android-specific configuration to the Capacitor config file to specify the QA flavor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nandroid: {\n   flavor: \"qa\",\n },\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag Start Listener in TypeScript\nDESCRIPTION: Sets a listener for when a marker drag starts. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragStartListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining AppState Interface in TypeScript\nDESCRIPTION: This snippet defines the AppState interface with a boolean property 'isActive' to indicate whether the app is active or not. It includes a comment indicating the property was introduced in version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppState {\n  isActive: boolean; // Whether the app is active or not. Since 1.0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Single Marker to Map\nDESCRIPTION: Adds a single marker to the map and returns a Promise with the marker's ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddMarker(marker: Marker) => Promise<string>\n```\n\n----------------------------------------\n\nTITLE: API Definition: clearWatch Method (TypeScript)\nDESCRIPTION: TypeScript signature for the `clearWatch` method. It accepts a `ClearWatchOptions` object containing the `id` (CallbackID obtained from `watchPosition`) of the location watch to stop. It returns a Promise that resolves when the specified watch has been successfully cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclearWatch(options: ClearWatchOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Push Notification Block for Non-Users - diff (Swift)\nDESCRIPTION: This snippet is an explicit diff to fully remove the push notification registration and error handler block from AppDelegate.swift when the app does not use push notifications. Eliminates related methods and conditional compilation directives for clarity and maintenance. Requires review to ensure no push notification dependencies remain.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-    #if USE_PUSH\\n-\\n-    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\\n-    }\\n-\\n-    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\\n-    }\\n-\\n-#endif\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Levels for Android Notifications in TypeScript\nDESCRIPTION: Defines a TypeScript type alias `Visibility` specifying how notifications appear on the lockscreen for Android notification channels. It uses numeric literal values (-1, 0, 1) corresponding to Android's `NotificationCompat` visibility constants (VISIBILITY_SECRET, VISIBILITY_PRIVATE, VISIBILITY_PUBLIC). This setting determines if and how notification content is shown on a secure lockscreen and is used within the `Channel` interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n-1 | 0 | 1\n```\n\n----------------------------------------\n\nTITLE: Uploading UI to Apple Watch from Capacitor\nDESCRIPTION: TypeScript example showing how to define a simple UI for the watch using text strings and send it to the paired watch using the updateWatchUI method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync uploadMyWatchUI() {\n    const watchUI = \n        `Text(\"Capacitor WATCH\")\n         Button(\"Add One\", \"inc\")`;\n\n    await Watch.updateWatchUI({\"watchUI\": watchUI});\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Status Bar Webview Overlay in Capacitor\nDESCRIPTION: TypeScript method signature for setting whether the status bar should overlay the webview, useful for device notch handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetOverlaysWebView(options: StatusBarOverlaysWebviewOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Detecting Native Platforms with isNativePlatform\nDESCRIPTION: Shows the signature and usage of isNativePlatform to check if the app is running on a native platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nisNativePlatform: () => boolean;\n```\n\n----------------------------------------\n\nTITLE: Listening to Cluster Click Events - TypeScript\nDESCRIPTION: Establishes an event listener for cluster (group of markers) click events. Callback is of type MapListenerCallback with ClusterClickCallbackData and is optional. Returns a void Promise asynchronously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnClusterClickListener(callback?: MapListenerCallback<ClusterClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Server Hostname (TypeScript)\nDESCRIPTION: This TypeScript excerpt configures the Capacitor app to use a custom hostname (\\'my-app.com\\'), overriding the default \\\"localhost\\\". It is essential for enabling matching between web and native apps for autofill and deep linking; it also specifies \\\"androidScheme\\\" as \\\"https\\\" for Android security compliance. Dependencies: Capacitor 3.x+, edited in \\\"capacitor.config.ts\\\". The server.hostname should match the domain configured with credential managers or site association files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CapacitorConfig = {\n...\n  server: {\n    hostname: 'my-app.com',\n    androidScheme: 'https',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Moving Package Declaration to build.gradle for Capacitor 5.0\nDESCRIPTION: Relocates the package declaration from AndroidManifest.xml to build.gradle using the namespace property, as required by Capacitor 5.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# AndroidManifest.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n- <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"[YOUR_PACKAGE_ID]\">\n+ <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n+     namespace \"[YOUR_PACKAGE_ID]\"\n      compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n```\n\n----------------------------------------\n\nTITLE: Importing Background Runner in iOS AppDelegate\nDESCRIPTION: Adding the import statement for the Background Runner plugin in the iOS AppDelegate.swift file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport CapacitorBackgroundRunner\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms to Capacitor\nDESCRIPTION: Commands to add iOS and Android platforms to the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nionic cap add ios\nionic cap add android\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Package Manager Dependency in Package.swift\nDESCRIPTION: Example of adding a Swift Package Manager dependency (FirebaseFirestore) in a Package.swift file for a Capacitor iOS plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n...\nlet package = Package(\n...\n    dependencies: [\n        .package(url: \"https://github.com/ionic-team/capacitor-swift-pm.git\", from: \"6.0.0\"),\n        .package(url: \"https://github.com/firebase/firebase-ios-sdk.git\",  from: \"11.8.0\")\n    ],\n    targets: [\n        .target(\n            name: \"FirebaseFirestorePlugin\",\n            dependencies: [\n                .product(name: \"Capacitor\", package: \"capacitor-swift-pm\"),\n                .product(name: \"Cordova\", package: \"capacitor-swift-pm\"),\n                .product(name: \"FirebaseCore\", package: \"firebase-ios-sdk\"),\n                .product(name: \"FirebaseFirestore\", package: \"firebase-ios-sdk\")\n            ],\n            path: \"ios/Plugin\")\n    ]\n...\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Marker Clustering in Google Maps\nDESCRIPTION: Enables marker clustering with optional minimum cluster size parameter. Default cluster size is 4 markers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nenableClustering(minClusterSize?: number | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in TypeScript\nDESCRIPTION: This snippet shows how to commit the changes made to the virtual filesystem, applying them to the actual project files using the MobileProject API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/automated-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.commit();\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Card Components with JSX in JavaScript\nDESCRIPTION: This snippet imports the 'DocCard' and 'DocCardList' components from a documentation theme package, allowing the creation of structured, styled documentation cards within a React/JSX environment. No parameters are exposed in this code, but it assumes a build setup supporting ES6 module imports and the Docusaurus theming system. The dependencies are '@theme/DocCard' and '@theme/DocCardList', and these imports enable custom content to be wrapped in standardized documentation card layouts further down in the file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@theme/DocCard';\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Graceful Unavailable Error Handling Using call.unavailable in Capacitor Java\nDESCRIPTION: This Java snippet shows how to use the call.unavailable method to gracefully indicate that a plugin method is not available on older Android API versions. Intended for backward compatibility handling, it checks Build.VERSION.SDK_INT against a version constant and provides a fallback error message. Requires access to Build.VERSION_CODES, PluginCall, and Android Studio environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\\npublic void methodThatUsesNewAndroidAPI(PluginCall call) {\\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\\n        // TODO implementation\\n    } else {\\n        call.unavailable(\"Not available on Android API 25 or earlier.\");\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Capacitor Copy Command using Bash\nDESCRIPTION: This command uses `npx` to run the Capacitor CLI's `copy` command. It synchronizes the web application build artifacts and the Capacitor configuration file into the specified native platform project (`android` or `ios`). This command should be executed after making changes to the web app or updating configuration values. An optional `--inline` flag can be used to inline source maps for debugging Android Web Views.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Removing fileprovider_authority from Android strings.xml for Capacitor 1.1\nDESCRIPTION: This snippet demonstrates the removal of the 'fileprovider_authority' string from the Android strings.xml file. This change is required when updating to Capacitor 1.1.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/1-1.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n     <string name=\"app_name\">My App</string>\n     <string name=\"title_activity_main\">My App</string>\n     <string name=\"package_name\">com.getcapacitor.myapp</string>\n-    <string name=\"fileprovider_authority\">com.getcapacitor.myapp.fileprovider</string>\n     <string name=\"custom_url_scheme\">com.getcapacitor.myapp</string>\n </resources>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Form Template with Autofill Support\nDESCRIPTION: HTML form template for JavaScript applications with event listener workaround for webkit autofill bug.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/autofill-credentials.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input type=\"email\" name=\"email\" autocomplete=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input id=\"pwd\" type=\"password\" name=\"password\" autocomplete=\"current-password\" required></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('pwd').children[0].addEventListener('change', (e) => {\n  this.password = (e.target as any).value;      \n});\n```\n\n----------------------------------------\n\nTITLE: Accessibility API Method: addListener\nDESCRIPTION: TypeScript method signature for setting up a listener for screen reader state changes. Takes an event name and a callback function that receives the new screen reader state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/accessibility.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'accessibilityScreenReaderStateChange', listenerFunc: ScreenReaderStateChangeCallback) => PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Deep Link Routing in Angular with Capacitor App API (TypeScript)\nDESCRIPTION: This snippet shows the import statements needed to implement deep link routing in an Angular project using Capacitor's App API. Dependencies include Angular core modules (Component, NgZone), Angular Router for navigation, and the App plugin for listening to deep link events. No explicit parameters or outputs are present; this establishes the required modules to proceed with deep linking implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Hook Scripts in package.json for Capacitor (JSON)\nDESCRIPTION: This JSON snippet shows how to define custom scripts for Capacitor CLI hooks within the scripts section of your project's package.json. It registers npm commands for various lifecycle hooks—such as before and after copy, update, and sync—by running an echo command displaying both the action and the involved platform ($CAPACITOR_PLATFORM_NAME). No additional dependencies are needed beyond Node.js/npm. Each script will be executed automatically at the relevant Capacitor CLI event, aiding debugging or custom automation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"capacitor:copy:before\\\": \\\"echo copy before $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:copy:after\\\": \\\"echo copy after $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:update:before\\\": \\\"echo update before $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:update:after\\\": \\\"echo update after $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:sync:before\\\": \\\"echo sync before $CAPACITOR_PLATFORM_NAME\\\",\\n    \\\"capacitor:sync:after\\\": \\\"echo sync after $CAPACITOR_PLATFORM_NAME\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Haptics Impact Method Definition\nDESCRIPTION: TypeScript method signature for triggering haptic impact feedback with customizable options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/haptics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimpact(options: HapticsImpactOptions) => void\n```\n\n----------------------------------------\n\nTITLE: Destroying Map Instance\nDESCRIPTION: Destroys the current map instance and cleans up resources.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndestroy() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Enabling Indoor Maps for Google Maps in TypeScript\nDESCRIPTION: Enables or disables indoor maps for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nenableIndoorMaps(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing All Screen Orientation Listeners with Capacitor API (TypeScript)\nDESCRIPTION: Defines the `removeAllListeners()` method signature from the Capacitor Screen Orientation plugin API. This asynchronous function removes all event listeners previously attached using `addListener`, specifically targeting listeners for the 'screenOrientationChange' event. It returns a Promise that resolves once all listeners are removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Capacitor Android Plugin Call in Java\nDESCRIPTION: Demonstrates how to signal a failure or error condition within a plugin method. It uses `call.reject()`, passing an error message string derived from an exception, an optional error code (null here), and the `Exception` object itself.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.reject(exception.getLocalizedMessage(), null, exception);\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Local Capacitor Plugin\nDESCRIPTION: This JSON snippet shows how the project's package.json file is updated when a local plugin is installed, using a file path in the dependencies list.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"echo\": \"file:../path/to/echo\",\n```\n\n----------------------------------------\n\nTITLE: Enabling Touch Interaction for Google Maps\nDESCRIPTION: Enables touch interaction with the map. This allows users to interact with the map through touch gestures.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nenableTouch() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Reader Enabled Status in TypeScript\nDESCRIPTION: TypeScript code snippet showing the isEnabled() method, which checks whether a screen reader is currently active.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-reader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled() => Promise<{ value: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Native Build Command (Bash)\nDESCRIPTION: Shows the basic command structure for initiating a native build using the Capacitor CLI (`cap build`). Requires specifying the target platform (`android` or `ios`) and accepts various optional flags for build customization, such as keystore details, release type, and scheme. Requires the Capacitor CLI to be available via `npx` or installed globally.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap build [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: AppState Interface Definition - TypeScript\nDESCRIPTION: Defines the AppState interface that contains information about the app's active state. Introduced in version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppState {\n  isActive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPerformed Interface in TypeScript\nDESCRIPTION: TypeScript interface for notification action events, including action ID, optional input value, and the notification schema.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue?: string;\n  notification: PushNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Notification Attachment Interface\nDESCRIPTION: TypeScript interface for defining notification attachments including media URLs and platform-specific options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Attachment {\n  id: string;\n  url: string;\n  options: AttachmentOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Splash Screen and Icon Configuration\nDESCRIPTION: Documentation describing how to configure splash screens and icons for Capacitor projects using VS Code extension. Includes file size requirements and steps for generating assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/splash-icon.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Splash Screen & Icon\ndescription: Visual Studio Code Extension for Capacitor\ncontributors:\n  - dtarnawsky\nslug: /vscode/splash-icon\n---\n```\n\n----------------------------------------\n\nTITLE: Clipboard.read() Method Signature\nDESCRIPTION: TypeScript definition for the read method that retrieves data from the system clipboard. It returns a Promise resolving to a ReadResult containing the clipboard content and its type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/clipboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nread() => Promise<ReadResult>\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenOrientationPlugin Interface in TypeScript\nDESCRIPTION: Defines the interface for the ScreenOrientation plugin, including methods for getting orientation, locking/unlocking orientation, and adding/removing event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/designing-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface ScreenOrientationPlugin {\n  /**\n   * Returns the screen's current orientation.\n   */\n  orientation(): Promise<{ type: OrientationType }>;\n\n  /**\n   * Locks the screen orientation.\n   */\n  lock(opts: { orientation: OrientationLockType }): Promise<void>;\n\n  /**\n   * Unlocks the screen's orientation.\n   */\n  unlock(): Promise<void>;\n\n  /**\n   * Listens for screen orientation changes.\n   */\n  addListener(\n    eventName: 'screenOrientationChange',\n    listenerFunc: (orientation: { type: OrientationType }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners\n   */\n  removeAllListeners(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility Elements - TypeScript\nDESCRIPTION: Toggles the accessibility features of the map for improved usability by assistive technologies. Accepts a boolean flag and returns a void Promise. Works only if the underlying map library supports accessibility elements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nenableAccessibilityElements(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Change Handling in ScreenOrientationPlugin\nDESCRIPTION: Adding methods to handle Android configuration changes, particularly when the screen orientation changes, and notify listeners of these changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.res.Configuration;\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Button Click Listener (TypeScript)\nDESCRIPTION: Defines the function signature for setting a callback that will be invoked when the user clicks the 'My Location' button on the map. The function accepts an optional callback of type MapListenerCallback with MyLocationButtonClickCallbackData and returns a Promise that resolves when the listener is set.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationButtonClickListener(callback?: MapListenerCallback<MyLocationButtonClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin via npm and Capacitor Sync in Bash\nDESCRIPTION: Installs a Cordova plugin and synchronizes it with the native project using npm and Capacitor CLI. Requires Node.js, npm, and Capacitor installed and initialized in your project. The package name 'cordova-plugin-name' should be replaced with the actual plugin identifier. The commands add the plugin as a dependency and ensure that native platform projects are updated to include the plugin. Inputs: plugin name (as package); no direct outputs, but modifies node_modules and native project files. Only works in an initialized Capacitor project directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Removing Circles from Google Maps in TypeScript\nDESCRIPTION: Removes multiple circles from the Google Map instance using an array of circle IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nremoveCircles(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Saving and Retrieving Plugin Calls in Android (Java)\nDESCRIPTION: Methods for saving, retrieving, and releasing plugin calls in Android using Java. These methods allow for persisting PluginCall objects for later use in asynchronous operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid saveCall(PluginCall call)\nPluginCall getSavedCall(String callbackId)\nvoid releaseCall(PluginCall call)\nvoid releaseCall(String callbackId)\n```\n\n----------------------------------------\n\nTITLE: Verifying Xcode Command Line Tools Installation\nDESCRIPTION: Command to verify that Xcode Command Line Tools are properly installed by checking the path to the developer directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n# /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Implementing Haptics Functionality in TypeScript\nDESCRIPTION: Complete example class demonstrating various haptic feedback implementations including impact styles, vibration, and selection feedback using Capacitor's Haptics plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/haptics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins, HapticsImpactStyle } from '@capacitor/core';\n\nconst { Haptics } = Plugins;\n\nexport class HapticsExample {\n  hapticsImpact(style = HapticsImpactStyle.Heavy) {\n    Haptics.impact({\n      style: style,\n    });\n  }\n\n  hapticsImpactMedium(style) {\n    this.hapticsImpact(HapticsImpactStyle.Medium);\n  }\n\n  hapticsImpactLight(style) {\n    this.hapticsImpact(HapticsImpactStyle.Light);\n  }\n\n  hapticsVibrate() {\n    Haptics.vibrate();\n  }\n\n  hapticsSelectionStart() {\n    Haptics.selectionStart();\n  }\n\n  hapticsSelectionChanged() {\n    Haptics.selectionChanged();\n  }\n\n  hapticsSelectionEnd() {\n    Haptics.selectionEnd();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: StatusBar Configuration in JSON Format\nDESCRIPTION: JSON configuration example for StatusBar plugin in capacitor.config.json, showing how to set overlay behavior, style, and background color.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"StatusBar\": {\n      \"overlaysWebView\": false,\n      \"style\": \"DARK\",\n      \"backgroundColor\": \"#ffffffff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Polyline Click Event Listener in TypeScript\nDESCRIPTION: Creates a listener for polyline click events using PolylineCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnPolylineClickListener(callback?: MapListenerCallback<PolylineCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using the Echo Plugin\nDESCRIPTION: Demonstrates how to use the Echo plugin in a TypeScript/JavaScript application to communicate with the native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor in the Ionic Project\nDESCRIPTION: Runs the Capacitor initialization command using `npx`. This command prompts the user to enter the application name and a unique package ID (e.g., 'com.mydomain.myappname'), which are stored in the `capacitor.config.json` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n? App name: CapApp\n? App Package ID: com.mydomain.myappname\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Web Server with npm\nDESCRIPTION: This command executes the `start` script defined in the project's `package.json` file, typically used to launch the local development web server. For Live Reload with external devices, this server must be configured to bind to `0.0.0.0` (as noted for `react-scripts` with `HOST=0.0.0.0`) to be accessible on the local network.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/live-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Adding Static Supported Orientations Property (Swift)\nDESCRIPTION: This Swift code adds a static class member `supportedOrientations` to the `ScreenOrientationPlugin` class. This property holds the `UIInterfaceOrientationMask` value that defines which orientations are currently permitted. It is initialized to `UIInterfaceOrientationMask.all`, allowing all orientations by default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\npublic static var supportedOrientations = UIInterfaceOrientationMask.all\n```\n\n----------------------------------------\n\nTITLE: Capacitor Haptics 'selectionEnd' Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Haptics.selectionEnd` method. This method ends the selection haptic feedback sequence initiated by `selectionStart` (e.g., lifting the finger from a control) and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nselectionEnd() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Code comments in dependencies documentation\nDESCRIPTION: Documentation notes about dependency management including frontmatter metadata and informational notes about package updates and security auditing\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/vs-code-ext/dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Dependencies\ndescription: Visual Studio Code Extension for Capacitor\ncontributors:\n  - dtarnawsky\nslug: /vscode/dependencies\n---\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBufferTypes Interface in TypeScript\nDESCRIPTION: This code snippet defines the ArrayBufferTypes interface with its ArrayBuffer property. It specifies the allowed ArrayBuffer types for an ArrayBufferView's buffer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayBufferTypes {\n  ArrayBuffer: ArrayBuffer;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling APNS Registration Callbacks in AppDelegate (Swift)\nDESCRIPTION: These Swift methods (`application(_:didRegisterForRemoteNotificationsWithDeviceToken:)` and `application(_:didFailToRegisterForRemoteNotificationsWithError:)`) are implemented in `AppDelegate.swift`. They handle the results of the app's attempt to register for remote notifications with APNS, relaying the device token to Firebase Messaging or posting a failure notification for Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  Messaging.messaging().apnsToken = deviceToken\n  Messaging.messaging().token(completion: { (token, error) in\n    if let error = error {\n        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n    } else if let token = token {\n        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n    }\n  })\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Echo Plugin in TypeScript\nDESCRIPTION: Shows how to use the Echo plugin in TypeScript code to send data to the native implementation and receive the response.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Enabling CapacitorHttp Plugin in JSON Configuration\nDESCRIPTION: This JSON snippet shows how to enable the CapacitorHttp plugin within the `capacitor.config.json` file. Setting `enabled` to `true` under the `CapacitorHttp` key within `plugins` activates the patching of `window.fetch` and `XMLHttpRequest` to use native HTTP libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorHttp\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Orientation Change Listener\nDESCRIPTION: TypeScript method to add an event listener for screen orientation changes, providing real-time orientation updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Generating a Capacitor Plugin Project (Bash)\nDESCRIPTION: Uses the `npx @capacitor/create-plugin` command to scaffold a new Capacitor plugin project structure suitable for publishing. It specifies various metadata like the plugin's name (scoped package), Java package ID, native class name, repository URL, license, and description.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/create-plugin \\\n  --name @capacitor-community/screen-orientation \\\n  --package-id io.ionic.plugins.screenorientation \\\n  --class-name ScreenOrientation \\\n  --repo \"https://ionic.io\" \\\n  --license \"MIT\" \\\n  --description \"Work with the screen orientation in a common way for iOS, Android, and web\"\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor React Hooks in a Function Component\nDESCRIPTION: This example demonstrates how to import and use Capacitor React hooks in a function component. It shows the usage of the useFilesystem hook to read a file asynchronously within a useEffect hook.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/react-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';\n\nconst MyComponent = () => (\n  const { readFile } = useFilesystem();\n\n  useEffect(() => {\n    const readMyFile = async () => {\n      const file = await readFile({\n        path: filepath,\n        directory: FilesystemDirectory.Data\n      });\n      // ...\n    }\n\n    readMyFile();\n  }, [ readFile ]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Theme for Splash Screen - XML\nDESCRIPTION: Shows how to customize the Android launch theme for controlling the Splash Screen appearance by modifying the AppTheme.NoActionBarLaunch style in styles.xml. The style specifies the splash image background. This is relevant for adjusting compatibility with or without the Android 12 Splash Screen API, and for controlling how the splash screen is rendered during launch. The XML is meant to be placed in 'android/app/src/main/res/values/styles.xml'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\\\"AppTheme.NoActionBarLaunch\\\" parent=\\\"AppTheme.NoActionBar\\\">\\n    <item name=\\\"android:background\\\">@drawable/splash</item>\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners\nDESCRIPTION: TypeScript function to remove all listeners for screen orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Click Listener in Google Maps\nDESCRIPTION: Method to set up a callback for my-location click events on the map. Takes an optional callback function that receives MapClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Return Method in Java for Android\nDESCRIPTION: This snippet shows how to annotate a value return method in Java for an Android Capacitor plugin. The @PluginMethod annotation is used without specifying a return type, as value return is the default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void method2(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data to Caller Using PluginCall.resolve in Capacitor Java\nDESCRIPTION: This code illustrates how to structure and return nested JSON-serializable data to the client by constructing a JSObject and resolving a plugin call. It is a common pattern when sending multiple data items. Requires the Capacitor runtime with JSObject and PluginCall imports. Input is not specified; the output is an object with a boolean 'added' property and an 'info' object containing an 'id'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\\nret.put(\"added\", true);\\nJSObject info = new JSObject();\\ninfo.put(\"id\", \"unique-id-1234\");\\nret.put(\"info\", info);\\ncall.resolve(ret);\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Project Dependencies - Bash\nDESCRIPTION: This shell command synchronizes all iOS platform files for your Capacitor project, ensuring any new configuration or dependency changes (such as those in the Podfile) are reflected in the iOS build. It is required after modifying dependencies or the iOS platform structure, and expects Capacitor CLI with iOS added to your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Importing Push Notifications in Angular Component\nDESCRIPTION: TypeScript import statement for the Capacitor Push Notifications API in an Angular component.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin Version\nDESCRIPTION: Updates the Android Gradle plugin from version 7.2.1 to 8.0.0\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/5-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:7.2.1'\n+       classpath 'com.android.tools.build:gradle:8.0.0'\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Resource Generation Tool\nDESCRIPTION: Command to install cordova-res tool for generating icons and splash screens\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cordova-res\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project Using CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to initialize a new Capacitor configuration using the CLI command 'npx cap init <appName> <appID>'. It requires Node.js and npm to be installed. The <appName> specifies the application's display name, and <appID> should be a reverse-domain identifier. An optional '--web-dir <value>' can set a custom web directory. The command prepares your project to use Capacitor across platforms, generating the necessary configuration files. Limitations include the need for appropriate permissions and an existing web app directory if '--web-dir' is used.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/init.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init <appName> <appID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in Android Manifest\nDESCRIPTION: XML configuration for registering a custom URL scheme in Android by adding an intent-filter to the AndroidManifest.xml file within the activity section.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"@string/custom_url_scheme\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Documenting Keyboard Plugin Update in Markdown\nDESCRIPTION: Explains that the 'style' configuration option now uses the KeyboardStyle enum for options in the Keyboard plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### Keyboard\n\n- `style` config option now uses the `KeyboardStyle` enum for options.\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Return Method in Android (Java)\nDESCRIPTION: This Java code snippet shows the Android implementation for a Capacitor plugin method (`method2`) that returns data. The `@PluginMethod()` annotation is used (specifying the return type is optional as `RETURN_PROMISE` is the default). The method implementation should eventually call `call.resolve()` with a `JSObject` containing the data to fulfill the promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void method2(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Android Product Flavors in build.gradle\nDESCRIPTION: Gradle configuration to create development and QA environment product flavors with different application IDs and display names.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nflavorDimensions = [\"environment\"]\nproductFlavors {\n  dev {\n      dimension \"environment\"\n      manifestPlaceholders = [displayName:\"My App\"]\n  }\n  qa {\n      dimension \"environment\"\n      applicationIdSuffix \".qa\"\n      manifestPlaceholders = [displayName:\"My App - QA\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Reader speak Method Definition\nDESCRIPTION: Type definition for the speak method that provides text-to-speech functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-reader.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nspeak(options: SpeakOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Certificate Details\nDESCRIPTION: Command to list the details of an existing Android keystore certificate, including the SHA256 fingerprint needed for deep linking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore my-release-key.keystore\n```\n\n----------------------------------------\n\nTITLE: Defining GalleryPhoto Interface in TypeScript\nDESCRIPTION: This snippet defines the GalleryPhoto interface, which represents a single photo picked from the device's gallery. It includes properties for the file path, web path, EXIF data, and image format.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryPhoto {\n  path: string;\n  webPath: string;\n  exif: any;\n  format: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CapacitorCookies Plugin in TypeScript Configuration\nDESCRIPTION: This TypeScript snippet demonstrates configuring the CapacitorCookies plugin in a `capacitor.config.ts` file. It imports `CapacitorConfig` from `@capacitor/cli` and sets the `enabled` property to `true` within the `plugins.CapacitorCookies` object to enable native cookie handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorCookies: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Adding SCHEDULE_EXACT_ALARM Permission to Android Manifest\nDESCRIPTION: XML snippet to add the SCHEDULE_EXACT_ALARM permission to the AndroidManifest.xml file for Android 12+ exact notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.SCHEDULE_EXACT_ALARM\" />\n```\n\n----------------------------------------\n\nTITLE: Requesting Video Permission using Block-based API - Swift\nDESCRIPTION: Here, video access is requested using AVCaptureDevice's block-based API. Upon user response, the plugin's checkPermissions method is invoked to resolve the permission status. This is a best practice for frameworks providing callback-style permission requests. Dependency: AVFoundation and Capacitor; should be implemented inside the plugin class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in\n        self?.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Zoom Level\nDESCRIPTION: TypeScript method to set the current text zoom level in the web view, taking an options object with the new zoom value as a decimal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/text-zoom.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Methods in iOS Capacitor Plugin\nDESCRIPTION: Shows how to indicate that a method cannot be implemented for iOS using the unimplemented() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatRequiresAndroid(_ call: CAPPluginCall) {\n    call.unimplemented(\"Not implemented on iOS.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project Management with Trapeze (TypeScript)\nDESCRIPTION: Sets up a MobileProject instance from @trapezedev/project with configurations for iOS and Android project paths. The snippet shows initialization, configuration object structure, and loading the project into the API. Requires Node.js, TypeScript, and @trapezedev/project package. Inputs include project root and platform paths; outputs are project management objects for further operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/automated-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MobileProject, MobileProjectConfig } from '@trapezedev/project';\n\n// This takes a MobileProjectConfig\n// to know where the ios and android projects are\nconst config: MobileProjectConfig = {\n  ios: {\n    path: 'ios/App',\n  },\n  android: {\n    path: 'android',\n  },\n};\n\nconst project = new MobileProject(process.cwd(), config);\nawait project.load();\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/network Plugin\nDESCRIPTION: Commands to install the @capacitor/network plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/network\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Registration\nDESCRIPTION: Registers the Echo plugin in JavaScript using registerPlugin from @capacitor/core to create a bridge to the native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for iOS Development\nDESCRIPTION: Command to install the Xcode Command Line Tools which are required for iOS development with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Documenting Capacitor Plugin Methods with JSDoc\nDESCRIPTION: This TypeScript code demonstrates how to add JSDoc comment blocks to document plugin functionality, including method descriptions and parameter details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n\n  /**\n   * Opens the map at a given location.\n   *\n   * @since 1.1.0\n   */\n  openMap(options: OpenMapOptions): Promise<void>;\n}\n\nexport interface OpenMapOptions {\n  /**\n   * The latitude at which to open the map.\n   */\n  latitude: number;\n\n  /**\n   * The longitude at which to open the map.\n   */\n  longitude: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing the Splash Screen in Capacitor - TypeScript\nDESCRIPTION: Method to show the splash screen. Accepts optional ShowOptions to configure autoHide, duration, and fade animations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: ShowOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientation Class in Java for Android\nDESCRIPTION: This class handles the core functionality for screen orientation detection, providing a method to get the current orientation type by mapping Android rotation values to orientation types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport android.view.Surface;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class ScreenOrientation {\n   private AppCompatActivity activity;\n\n   public ScreenOrientation(AppCompatActivity activity) {\n       this.activity = activity;\n   }\n\n   public String getCurrentOrientationType() {\n       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n       return fromRotationToOrientationType(rotation);\n   }\n\n   private String fromRotationToOrientationType(int rotation) {\n       switch (rotation) {\n           case Surface.ROTATION_90:\n               return \"landscape-primary\";\n           case Surface.ROTATION_180:\n               return \"portrait-secondary\";\n           case Surface.ROTATION_270:\n               return \"landscape-secondary\";\n           default:\n               return \"portrait-primary\";\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin Documentation\nDESCRIPTION: Command to run the docgen tool which generates documentation in README.md based on JSDoc comments in the code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docgen\n```\n\n----------------------------------------\n\nTITLE: Defining ActionType Interface for Local Notifications in TypeScript\nDESCRIPTION: This snippet defines the ActionType interface, which represents a collection of actions for local notifications. It includes properties for configuring various aspects of notification categories, particularly for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionType {\n  id: string;\n  actions: Action[];\n  iosHiddenPreviewsBodyPlaceholder?: string;\n  iosCustomDismissAction?: boolean;\n  iosAllowInCarPlay?: boolean;\n  iosHiddenPreviewsShowTitle?: boolean;\n  iosHiddenPreviewsShowSubtitle?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Status Bar in Capacitor\nDESCRIPTION: TypeScript method signature for making the status bar visible, with optional animation options parameter for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options?: StatusBarAnimationOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Markers from Google Maps in TypeScript\nDESCRIPTION: Removes multiple markers from the Google Map instance using an array of marker IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarkers(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening Native Project Workspace with Capacitor CLI (Bash)\nDESCRIPTION: Executes the Capacitor CLI 'open' command to launch the native development workspace for the specified platform. Requires Node.js and the Capacitor CLI to be installed in your project. The '<platform>' argument must be provided and can be either 'android' or 'ios'; this determines whether Android Studio or Xcode will be opened. Inputting the required platform value triggers the corresponding IDE for native development. The command outputs an error if the platform argument is missing or invalid.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/open.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open <platform>\n```\n\n----------------------------------------\n\nTITLE: Defining Registration Error Payload - TypeScript\nDESCRIPTION: Represents an error structure for registration failures, with a string 'error' property describing the failure. Used for error reporting from notification registration operations. No dependencies required; input/output is the error message string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegistrationError {\n  error: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Barcode Type Hint Options (TypeScript)\nDESCRIPTION: This TypeScript type alias `CapacitorBarcodeScannerTypeHint` specifies the expected barcode format(s) for scanning. It combines the standard formats defined in `Html5QrcodeSupportedFormats` with a special `CapacitorBarcodeScannerTypeHintALLOption` to allow scanning for any supported barcode type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#html5qrcodesupportedformats\">Html5QrcodeSupportedFormats</a> | <a href=\"#capacitorbarcodescannertypehintalloption\">CapacitorBarcodeScannerTypeHintALLOption</a>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Full Screen Requirement in iOS (iPad) - XML\nDESCRIPTION: This XML property should be added to the Info.plist file of an iOS project to enforce 'Requires Full Screen' mode, which is necessary to lock orientation on iPad devices. This prevents iPad multitasking and allows orientation locking to function. No additional dependencies are needed, but usage may limit multitasking features for your application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UIRequiresFullScreen</key>\\n  <true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS App Delegate for Background Runner\nDESCRIPTION: Swift code to register and initialize Background Runner in the app delegate\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    // ....\n    BackgroundRunnerPlugin.registerBackgroundTask()\n    BackgroundRunnerPlugin.handleApplicationDidFinishLaunching(launchOptions: launchOptions)\n    // ....\n\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting View Controllers in Capacitor iOS\nDESCRIPTION: Shows how to present custom view controllers over the main Capacitor view controller, including handling for iPad devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nDispatchQueue.main.async {\n  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nself.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Plugin Method Types in TypeScript\nDESCRIPTION: This TypeScript interface defines a Capacitor plugin `MyPlugin` with three different method types: `method1` returning a void promise, `method2` returning a promise resolving with `MyData`, and `method3` accepting a callback function `MyPluginCallback` and returning a promise resolving with a `CallbackID` string. It also defines the `MyData` interface and the `MyPluginCallback` type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CallbackID = string;\n\nexport interface MyData {\n  data: string;\n}\n\nexport type MyPluginCallback = (message: MyData | null, err?: any) => void;\n\nexport interface MyPlugin {\n  method1(): Promise<void>;\n  method2(): Promise<MyData>;\n  method3(callback: MyPluginCallback): Promise<CallbackID>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Capacitor Plugin in Android MainActivity\nDESCRIPTION: This code snippet shows how to register the custom `EchoPlugin` within the Android application's `MainActivity.java`. By overriding the `onCreate` method and calling `registerPlugin(EchoPlugin.class)` before `super.onCreate(savedInstanceState)`, the plugin becomes available to the Capacitor bridge when the activity is created.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n+        registerPlugin(EchoPlugin.class);\n         super.onCreate(savedInstanceState);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: iOS Keep Alive Flag Setting\nDESCRIPTION: Code to set the keepAlive flag for multiple completions in iOS. This allows the plugin call to persist for multiple resolve() calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.keepAlive = true\n```\n\n----------------------------------------\n\nTITLE: Creating Echo Plugin JavaScript Interface\nDESCRIPTION: Demonstrates how to create the JavaScript interface for the Echo plugin using registerPlugin from @capacitor/core.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Setting Map Padding in Google Maps\nDESCRIPTION: Sets padding on the map to adjust the visible area. Useful when UI elements overlap the map and you want to ensure certain map areas remain visible.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nsetPadding(padding: MapPadding) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the CameraPermissionType Type Alias in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `CameraPermissionType` used to specify which permissions related to the Camera plugin are being referenced, either 'camera' or 'photos'. This is used in permission request configurations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionType = 'camera' | 'photos';\n```\n\n----------------------------------------\n\nTITLE: Cluster Click Event Listener in TypeScript\nDESCRIPTION: Establishes a listener for cluster click events with a callback receiving ClusterClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnClusterClickListener(callback?: MapListenerCallback<ClusterClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Package using npm\nDESCRIPTION: This command uses Node Package Manager (npm) to download and install the `@capacitor/ios` package, which contains the necessary native iOS runtime and tooling for Capacitor projects. This is a prerequisite before adding the iOS platform to your Capacitor application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Text Zoom Plugin (Bash)\nDESCRIPTION: Bash commands to install the Capacitor Text Zoom plugin using npm and then synchronize the project dependencies using the Capacitor CLI (`npx cap sync`). This makes the plugin available in the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/text-zoom.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/text-zoom\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Managing Screen Orientation Lifecycle in React\nDESCRIPTION: React useEffect hook that gets the initial orientation, sets up listeners, and handles cleanup when the component unmounts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  ScreenOrientation.orientation().then(res => setOrientation(res.type));\n\n  return () => {\n    ScreenOrientation.removeAllListeners();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Web Runtime\nDESCRIPTION: JSON configuration to enable bundled web runtime in Capacitor configuration file\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"bundledWebRuntime\": true\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Android and iOS Platform Dependencies\nDESCRIPTION: This command installs the necessary dependencies for Android and iOS platforms in your Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/android @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration in Capacitor Config File\nDESCRIPTION: Example of how to define configuration values for a plugin in the Capacitor configuration file. The configuration is placed under the plugin's name in the plugins property.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  appId: 'com.company.app',\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: '#FF0000'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Status Bar Capacitor Plugin\nDESCRIPTION: Commands to install the latest v5 version of the @capacitor/status-bar plugin and sync the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/status-bar@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining Weekday Enum in TypeScript\nDESCRIPTION: This code snippet defines the Weekday enum, which represents the days of the week for scheduling notifications in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nenum Weekday {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the removeAllListeners Function in TypeScript\nDESCRIPTION: Shows the TypeScript function signature for `removeAllListeners`. This function removes all event listeners (both 'accel' and 'orientation') previously attached to the Motion plugin instance. It returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/motion.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Migration Steps Reference in Markdown\nDESCRIPTION: Example path and configuration references showing the key files involved in Cordova to Capacitor migration, including config.xml, package.json, and cordova section references.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nconfig.xml\\npackage.json\\ncordova\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Assets for Deep Linking Files\nDESCRIPTION: JSON configuration to be added to angular.json to ensure .well-known directory and its files are properly copied during the build process for Angular applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"glob\": \"**/*\",\n  \"input\": \"src/.well-known\",\n  \"output\": \".well-known/\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Webkit Bug Workaround\nDESCRIPTION: Event listener implementation to handle ion-input value changes due to webkit autofill bug\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/autofill-credentials.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('pwd').children[0].addEventListener('change', (e) => {\n  this.password = (e.target as any).value;      \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Map Type in Google Maps\nDESCRIPTION: Sets the type of map to display (e.g., normal, satellite, terrain). The mapType parameter should be a value from the MapType enum.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nsetMapType(mapType: MapType) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Plugin with NPM\nDESCRIPTION: This command uses npm to run the Capacitor plugin generator, which prompts for input to create a new plugin project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners from Capacitor Plugins\nDESCRIPTION: Demonstrates how to properly remove event listeners from a Capacitor plugin to prevent memory leaks and unnecessary callback executions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a video in a Markdown file using HTML video tags and React-style dynamic source import.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/2-web-to-native.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<video style={{borderRadius:5}} width=\"100%\" controls>\n      <source src={require('@site/static/video/existing-project.mp4').default} type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Google Maps Plugin (Bash)\nDESCRIPTION: Installs the @capacitor/google-maps plugin using npm and syncs the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/google-maps\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for Configuration Changes\nDESCRIPTION: Diff showing the addition of configuration change handling in the AndroidManifest.xml file to avoid app restarts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n         <activity\n-            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n+            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode\"\n             android:name=\"com.example.app\"\n             android:label=\"@string/title_activity_main\"\n             android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n             android:launchMode=\"singleTask\">\n```\n\n----------------------------------------\n\nTITLE: Tracking Screen Orientation State in React\nDESCRIPTION: React hook code that initializes a state variable to track the current screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [orientation, setOrientation] = useState<string>('');\n```\n\n----------------------------------------\n\nTITLE: Removing Delivered Notifications in Capacitor\nDESCRIPTION: Removes specified notifications from the notifications screen. Requires a DeliveredNotifications object as parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Main Activity Title in strings.xml - XML\nDESCRIPTION: Changes the UI title of the main activity within the app by updating 'title_activity_main' in 'strings.xml'. This is typically used in apps with a single or primary activity to present a custom title to the user. No dependencies beyond a standard Android resources setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\\\"title_activity_main\\\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Battery Info Method Definition\nDESCRIPTION: TypeScript method definition for getting battery information\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetBatteryInfo() => Promise<BatteryInfo>\n```\n\n----------------------------------------\n\nTITLE: Network Status Query Method Definition\nDESCRIPTION: TypeScript method signature for querying current network status, returns a Promise with NetworkStatus object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/network.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus() => Promise<NetworkStatus>\n```\n\n----------------------------------------\n\nTITLE: Enabling CapacitorCookies Plugin in JSON Configuration\nDESCRIPTION: This JSON snippet shows how to enable the CapacitorCookies plugin within the `capacitor.config.json` file. Setting the `enabled` property to `true` under `plugins.CapacitorCookies` activates the patching of `document.cookie` to use native libraries instead of the default browser implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorCookies\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for Push Notification Icon\nDESCRIPTION: Specifies a custom icon for push notifications in the AndroidManifest.xml file. This meta-data tag tells Firebase Messaging to use the specified drawable resource ('@mipmap/push_icon_name') for notifications instead of the default application icon, which is recommended for proper display (white pixels on transparent background).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.firebase.messaging.default_notification_icon\" android:resource=\"@mipmap/push_icon_name\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Browser Finished Event Listener in TypeScript\nDESCRIPTION: TypeScript definition for adding a listener for the 'browserFinished' event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Disabling Marker Clustering in Google Maps\nDESCRIPTION: Disables clustering of markers on the map. This will cause all markers to be displayed individually.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndisableClustering() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Hiding the Splash Screen in Capacitor - TypeScript\nDESCRIPTION: Method to hide the splash screen. Accepts optional HideOptions to configure fadeOutDuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: HideOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Button Click Listener in TypeScript for Capacitor Google Maps\nDESCRIPTION: Defines a method to set a listener for the my location button click event on a Google Map. It takes an optional callback function that receives my location button click data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationButtonClickListener(callback?: MapListenerCallback<MyLocationButtonClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening Capacitor Android Project in Android Studio\nDESCRIPTION: Command to open a Capacitor Android project in Android Studio. After running this command, you can use the standard Android Studio workflow to build, emulate, and run your app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/running-your-app.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Opening the iOS Project with Capacitor - Bash\nDESCRIPTION: This shell command opens the iOS project for your Capacitor app using the Capacitor CLI. It requires that you have Capacitor installed and initialized in your project. Running this command will launch Xcode with your iOS project, allowing you to manage configuration and add the required plist for Firebase integration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the newly created Ionic project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd capApp/\n```\n\n----------------------------------------\n\nTITLE: Styling the Capacitor Google Maps Web Component with CSS\nDESCRIPTION: Provides basic CSS rules to style the `<capacitor-google-map>` element. It sets `display: inline-block` and explicitly defines `width` and `height` (e.g., 275px by 400px). These styles are necessary as the custom element has no intrinsic dimensions by default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\ncapacitor-google-map {\n  display: inline-block;\n  width: 275px;\n  height: 400px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Path to FileProvider Paths for Android\nDESCRIPTION: This diff shows how to add a `<cache-path>` element to the `android/app/src/main/res/xml/file_paths.xml` file. This addition is necessary to grant the FileProvider access to the cache directory, which avoids potential permission errors when editing gallery images using plugins like the Camera plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <external-path name=\"my_images\" path=\".\" />\n+    <cache-path name=\"my_cache_images\" path=\".\" />\n </paths>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor CLI v5\nDESCRIPTION: Commands for installing Capacitor CLI version 5 and running the migration tool.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @capacitor/cli@latest-5\n\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Package Visibility for App Launcher\nDESCRIPTION: XML configuration example for Android's AndroidManifest.xml to add package names to query, necessary for Android 11 and newer due to package visibility restrictions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app-launcher.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <package android:name=\"com.getcapacitor.myapp\" />\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Simple Capacitor Watch Installation\nDESCRIPTION: Basic npm installation commands for adding the Capacitor Watch plugin to a project and syncing the native project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/watch\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Methods in Web Plugin Class\nDESCRIPTION: This code demonstrates how to implement checkPermissions() and requestPermissions() methods in the web plugin class. It includes a TODO comment for the actual implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PermissionStatus } from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  async echo(options: { value: string }) {\n    ...\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    // TODO\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners for Capacitor InAppBrowser (TypeScript)\nDESCRIPTION: Imports the `InAppBrowser` object and calls the `removeAllListeners` method. This removes all event listeners previously attached to the InAppBrowser instance using `addListener`. Requires the `@capacitor/inappbrowser` plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nInAppBrowser.removeAllListeners();\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 6 CLI for Migration\nDESCRIPTION: Command to install the latest-6 version of the Capacitor CLI as a development dependency in your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @capacitor/cli@latest-6\n```\n\n----------------------------------------\n\nTITLE: Upgrading OpenSSL and Ruby with Homebrew for CocoaPods (bash)\nDESCRIPTION: This bash snippet updates OpenSSL and Ruby using Homebrew, addressing CocoaPods connectivity issues due to outdated cryptographic libraries. It also links the installed Ruby to ensure it is used as the default. Requires Homebrew to be installed on the system. Commands should be run one after another; they install/upgrade required dependencies so that CocoaPods can connect with GitHub securely.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\nbrew upgrade openssl\nbrew install ruby\nbrew link --overwrite ruby\n```\n\n----------------------------------------\n\nTITLE: Removing All Delivered Notifications in Capacitor\nDESCRIPTION: Removes all notifications from the notifications screen. Returns a Promise that resolves when complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing USE_PUSH Compilation Condition in AppDelegate - diff (Swift)\nDESCRIPTION: This code diff illustrates removing the conditional compilation block around push notification registration handlers in AppDelegate.swift. By deleting #if USE_PUSH and #endif, these methods are always included if needed, or the entire block can be removed if push notifications are not used. Applicable for apps refactoring notification logic; ensures code consistency and avoids dead code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n\\n-    #if USE_PUSH\\n\\n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\\n        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\\n     }\\n\\n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\\n        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\\n     }\\n\\n-#endif\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Network Permissions in AndroidManifest.xml\nDESCRIPTION: Demonstrates how to add network access permissions to the Android app by modifying the AndroidManifest.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.getcapacitor.myapp\">\n    <activity>\n      <!-- other stuff -->\n    </activity>\n\n    <!-- More stuff -->\n\n    <!-- Your permissions -->\n\n    <!-- Network API -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding a Marker to the Map - TypeScript\nDESCRIPTION: Asynchronously adds a single marker to the map. Requires a Marker object parameter with marker details like coordinates and options. Returns a Promise that resolves to a string identifier representing the newly added marker. Requires Marker type and Capacitor Maps integration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\naddMarker(marker: Marker) => Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Camera Movement Start Listener in TypeScript\nDESCRIPTION: Sets up a listener for camera movement start events using a callback with CameraMoveStartedCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCameraMoveStartedListener(callback?: MapListenerCallback<CameraMoveStartedCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Preferences Capacitor Plugin\nDESCRIPTION: Commands to install the Preferences Capacitor plugin and synchronize the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/preferences.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/preferences@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Triggering Impact Haptic Feedback - TypeScript\nDESCRIPTION: This is the signature for the Haptics.impact method, which triggers a device impact haptic feedback. It accepts an optional ImpactOptions object parameter that determines the style (Heavy, Medium, Light) of haptic feedback. 'options' must match the ImpactOptions interface; the method returns a Promise that resolves when feedback is triggered. Only works on supported devices and operating systems.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/haptics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimpact(options?: ImpactOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Geolocation\nDESCRIPTION: XML configuration needed in AndroidManifest.xml to enable location services in Android applications using the Geolocation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation Plugin -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Syncing Capacitor iOS Native Project\nDESCRIPTION: Command to synchronize the iOS native project with Capacitor changes after updating the package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/updating.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync ios\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientationWeb Plugin in TypeScript\nDESCRIPTION: Updates the ScreenOrientation variable declaration to register the ScreenOrientationWeb class as the web implementation of the plugin using Capacitor's registerPlugin function.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n  {\n    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Polygons to Google Maps in TypeScript\nDESCRIPTION: Adds multiple polygons to the Google Map instance and returns a promise with an array of polygon IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\naddPolygons(polygons: Polygon[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Defining Token Interface in TypeScript\nDESCRIPTION: Interface for push notification token, containing the value which represents APNS token on iOS and FCM token on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Token {\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Device getBatteryInfo Method Type Definition\nDESCRIPTION: TypeScript definition for the getBatteryInfo() method that returns battery status\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/device.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetBatteryInfo() => Promise<BatteryInfo>\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Interface in TypeScript\nDESCRIPTION: Defines the Attachment interface representing a notification attachment. It includes properties for id, url, and options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Attachment {\n  id: string;\n  url: string;\n  options: AttachmentOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Push Notification Action Listener - TypeScript\nDESCRIPTION: Adds listener for push notification action performance, providing action details.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationActionPerformed', listenerFunc: (notification: ActionPerformed) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Clearing All Keys and Values from Storage in TypeScript\nDESCRIPTION: This TypeScript snippet shows the method signature for clear, which deletes all keys and values from storage. No parameters are required; the function returns a Promise resolving when the clear operation is complete. Requires @capacitor/storage. Available since API version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclear() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the iOS project in Xcode using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Adding Mobile Platforms to Ionic Project\nDESCRIPTION: Commands to add Android and iOS platforms to an Ionic project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/with-ionic.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nionic capacitor add android\nionic capacitor add ios\n```\n\n----------------------------------------\n\nTITLE: Defining the URLOpenListenerEvent Interface - TypeScript\nDESCRIPTION: Specifies the URLOpenListenerEvent interface representing data emitted when an app is opened via a URL. It includes the URL, iOS-specific source application and in-place opening flags, allowing listeners to process contextual information about incoming deep links or file URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface URLOpenListenerEvent {\n  url: string; // The URL the app was opened with.\n  iosSourceApplication: any; // Source application opening the app (iOS only)\n  iosOpenInPlace: boolean; // Whether to open document in-place (iOS only)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Circles to Google Maps\nDESCRIPTION: Adds multiple circle shapes to the map. Returns a Promise that resolves to an array of strings representing the unique IDs of the added circles.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\naddCircles(circles: Circle[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Plugin Load Implementation in Capacitor Android\nDESCRIPTION: Shows how to implement the load() method which runs code when the plugin is first loaded, allowing for initialization tasks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard setScroll() Method Signature\nDESCRIPTION: Defines the `setScroll` method to programmatically enable or disable WebView scrolling when the keyboard is open. It accepts an options object with an `isDisabled` boolean property. This method is only supported on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetScroll(options: { isDisabled: boolean; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Install-time Permissions to Android Manifest\nDESCRIPTION: Example showing how to add install-time permissions to the AndroidManifest.xml file of a Capacitor plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.mycompany.plugins.network\">\n   <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the PluginListenerHandle object, which contains a remove method to unregister a plugin listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Web Plugin Registration Update\nDESCRIPTION: Shows the new pattern for registering web plugins using registerPlugin function with lazy loading support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/plugins/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\nimport type { CoolPlugin } from './definitions';\n\nconst MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {\n  web: () => import('./web').then(m => new m.MyCoolPluginWeb()),\n  // electron: () => (\"./electron\").then(m => new m.MyCoolPluginElectron())\n});\n\nexport * from './definitions';\nexport { MyCoolPlugin };\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Haptics Plugin using npm\nDESCRIPTION: Shows the command-line instructions to install the `@capacitor/haptics` package using npm and then synchronize the Capacitor project using `npx cap sync`. This makes the plugin available in the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/haptics\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Getting Device Language Code using Capacitor Device Plugin\nDESCRIPTION: Provides the TypeScript signature for the `getLanguageCode()` method. This asynchronous function returns a Promise that resolves to a `GetLanguageCodeResult` object, containing the device's currently configured language locale code (e.g., 'en').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageCode() => Promise<GetLanguageCodeResult>\n```\n\n----------------------------------------\n\nTITLE: Removing All Motion Listeners\nDESCRIPTION: Code snippet showing how to remove all listeners attached to the Motion plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/motion.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Ionic Native Plugins in Capacitor\nDESCRIPTION: Commands to update both the Ionic Native wrapper and Cordova plugin to new versions, followed by updating the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/using-cordova-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic-native/javascript-package-name@2\nnpm install cordova-plugin-name@2\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Updating Cordova Plugin Version\nDESCRIPTION: Commands to update an existing Cordova plugin to a specific version and sync the changes with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/cordova.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name@version\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Values in Capacitor Config\nDESCRIPTION: Example showing how to define configuration values for a plugin named 'MyCoolPlugin' within the plugins property of a Capacitor configuration file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  appId: 'com.company.app',\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: '#FF0000'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Return Method in Objective-C\nDESCRIPTION: Objective-C implementation of a value return method for iOS platform using the CAP_PLUGIN_METHOD macro with CAPPluginReturnPromise return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Android Native Binary with Capacitor CLI in Bash\nDESCRIPTION: This Bash command uses the Capacitor CLI to compile the native Android project, producing a signed AAB or APK suitable for distribution. This is used either in local terminals or CI/CD pipelines as part of the mobile app release process. Prerequisites include a configured Android project and synced web assets. The command outputs the compiled binary file in the designated build directory. Errors may result from configuration or signing issues.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap build android\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Deep Linking with Angular and Capacitor - TypeScript\nDESCRIPTION: Imports Angular's NgZone and Router, as well as Capacitor's App and URLOpenListenerEvent. This sets up the prerequisites for listening and routing to URLs opened from external links in an Angular-based Capacitor application. All dependencies must be installed and available in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { App, URLOpenListenerEvent } from '@capacitor/app';\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Capacitor iOS Plugin in Swift\nDESCRIPTION: Demonstrates how to return complex data structures back to the client using call.resolve()\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Interaction for Google Maps\nDESCRIPTION: Disables touch interaction with the map. This prevents users from interacting with the map through touch gestures.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndisableTouch() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Copying Files with Capacitor Filesystem in TypeScript\nDESCRIPTION: Function to copy a file or directory using Capacitor's Filesystem plugin. Takes CopyOptions as input and returns a Promise that resolves with a CopyResult object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncopy(options: CopyOptions) => Promise<CopyResult>\n```\n\n----------------------------------------\n\nTITLE: Delete Notification Channel - TypeScript\nDESCRIPTION: Deletes a notification channel on Android O or newer (SDK 26+). Requires channel ID as parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining EventTarget Interface in TypeScript\nDESCRIPTION: This code snippet defines the EventTarget interface with its methods addEventListener, dispatchEvent, and removeEventListener. It includes detailed type information and method signatures.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventTarget {\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;\n  dispatchEvent(event: Event): boolean;\n  removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Month (UTC) with Date.getUTCMonth() in JavaScript\nDESCRIPTION: The `getUTCMonth()` method returns the month (0-11) in the specified date according to universal time (UTC). 0 corresponds to January, 1 to February, and so on.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCMonth(): number\n```\n\n----------------------------------------\n\nTITLE: Sample Apple App Site Association File (JSON)\nDESCRIPTION: This JSON code sample defines the \\'apple-app-site-association\\' file, which links an iOS app to its website for credential autofill and deep linking. Replace \\\"TEAMID.BUNDLEID\\\" with your own Apple Team ID and App Bundle ID. The JSON structure declares appID and allowed paths. File must be named without a .json extension and hosted at \\'https://<yourdomain>/.well-known/apple-app-site-association\\' over HTTPS. This is mandatory for proper autofill on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from Capacitor Plugin in TypeScript\nDESCRIPTION: Illustrates how to remove an event listener from a Capacitor plugin in TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Installing Geolocation Plugin with npm\nDESCRIPTION: Commands to install the latest version of the Capacitor Geolocation plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/geolocation@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting Call to Persist for Multiple Completions in Android\nDESCRIPTION: Code to mark a plugin call in Android to allow for multiple completions. Setting the keepAlive property to true enables the call to persist and resolve multiple times.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.setKeepAlive(true);\n```\n\n----------------------------------------\n\nTITLE: Referencing Plugin Types in Consumer's Config File\nDESCRIPTION: Example of how a plugin consumer would reference the plugin's types in their Capacitor configuration file to access the typing information for configuration values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor-community/my-cool-plugin\" />\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: \"com.company.app\",\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: \"#034821\"\n    }\n  }\n}\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options Interface in TypeScript\nDESCRIPTION: TypeScript interface for iOS build configuration options including signing style, export method, certificates, and provisioning profiles.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/config.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuildOptions?: {\n  signingStyle?: 'automatic' | 'manual';\n  exportMethod?: string;\n  signingCertificate?: string;\n  provisioningProfile?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Ionic Web Assets using Bash\nDESCRIPTION: Compiles the Ionic Angular application and generates the web assets into the `www` directory (by default for Angular projects). This build is a prerequisite for Capacitor as it copies these web assets into the native platform projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Moving Package Declaration to build.gradle\nDESCRIPTION: Moves the package declaration from AndroidManifest.xml to build.gradle and updates the manifest accordingly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# AndroidManifest.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n- <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"[YOUR_PACKAGE_ID]\">\n+ <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n+     namespace \"[YOUR_PACKAGE_ID]\"\n      compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n```\n\n----------------------------------------\n\nTITLE: Running Live Reload with Ionic CLI for Android and iOS\nDESCRIPTION: Commands to start the Live Reload process using Ionic CLI for Android and iOS platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/live-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run android -l --external\n```\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run ios -l --external\n```\n\n----------------------------------------\n\nTITLE: Declaring Void Return Methods in Objective-C\nDESCRIPTION: Objective-C declaration for a void return method in an iOS Capacitor plugin using the CAP_PLUGIN macro with CAPPluginReturnNone return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Clipboard Plugin\nDESCRIPTION: Commands to install the @capacitor/clipboard plugin and synchronize the native project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/clipboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/clipboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Building and Updating Capacitor Project\nDESCRIPTION: Commands to build the Ionic app and copy the updated web assets to the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Managing Screen Orientation in React Component Lifecycle\nDESCRIPTION: This useEffect hook retrieves the initial orientation, sets up listeners, and cleans up listeners when the component unmounts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  ScreenOrientation.orientation().then(res => setOrientation(res.type));\n\n  return () => {\n    ScreenOrientation.removeAllListeners();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Updating Native Project with New Plugins\nDESCRIPTION: Commands for installing new plugins and updating the native project configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install really-cool-plugin\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Required folder structure for splash screen and icon assets\nDESCRIPTION: Shows the expected folder structure and file naming convention for source images that will be used to generate platform-specific assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nassets/\n├── icon-only.png\n├── icon-foreground.png\n├── icon-background.png\n├── splash.png\n└── splash-dark.png\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the PermissionState type alias, which represents the possible states of a permission in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Screen Orientation\nDESCRIPTION: JSX conditional rendering that displays different UI elements depending on whether the orientation is portrait or landscape.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  orientation.includes('portrait') &&\n    {\n      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */\n    };\n}\n{\n  orientation.includes('landscape') &&\n    {\n      /* Let the user \"sign\" and unlock screen orientation through a confirmation button. */\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Echo Plugin in Swift for Capacitor iOS\nDESCRIPTION: Demonstrates a simple Echo plugin that receives a value and returns it. Shows how to access call data and resolve with a result.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(EchoPlugin)\npublic class EchoPlugin: CAPPlugin {\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.resolve([\n        \"value\": value\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientation Class in Java\nDESCRIPTION: This snippet shows the implementation of the ScreenOrientation class, which handles getting the current screen orientation and converting rotation to orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport android.view.Surface;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class ScreenOrientation {\n   private AppCompatActivity activity;\n\n   public ScreenOrientation(AppCompatActivity activity) {\n       this.activity = activity;\n   }\n\n   public String getCurrentOrientationType() {\n       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n       return fromRotationToOrientationType(rotation);\n   }\n\n   private String fromRotationToOrientationType(int rotation) {\n       switch (rotation) {\n           case Surface.ROTATION_90:\n               return \"landscape-primary\";\n           case Surface.ROTATION_180:\n               return \"portrait-secondary\";\n           case Surface.ROTATION_270:\n               return \"landscape-secondary\";\n           default:\n               return \"portrait-primary\";\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Interface Properties Type Definitions\nDESCRIPTION: Type definitions for DOM Event interface properties including event bubbling, cancellation, propagation, and target information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Event {\n  bubbles: boolean;\n  cancelBubble: boolean;\n  cancelable: boolean;\n  composed: boolean;\n  currentTarget: EventTarget;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  returnValue: boolean;\n  srcElement: EventTarget;\n  target: EventTarget;\n  timeStamp: number;\n  type: string;\n  AT_TARGET: number;\n  BUBBLING_PHASE: number;\n  CAPTURING_PHASE: number;\n  NONE: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/clipboard plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/clipboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/clipboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting Milliseconds (UTC) with Date.setUTCMilliseconds() in JavaScript\nDESCRIPTION: The `setUTCMilliseconds()` method sets the milliseconds for a specified date according to universal time (UTC). It accepts one parameter, `ms` (0-999), and returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nsetUTCMilliseconds(ms: number): number\n```\n\n----------------------------------------\n\nTITLE: Angular Form Template with Autofill Support\nDESCRIPTION: HTML form template for Angular applications implementing credential autofill functionality using ion-input components with proper autocomplete attributes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/autofill-credentials.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input appAutofill type=\"email\" name=\"email\" autocomplete=\"email\" [(ngModel)]=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input appAutofill type=\"password\" name=\"password\" autocomplete=\"current-password\" required [(ngModel)]=\"password\"></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Changing Package ID in build.gradle\nDESCRIPTION: Shows how to modify the applicationId in the Android build.gradle file to change your app's Package ID (Application ID).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndefaultConfig {\n-       applicationId \"com.capacitorjs.app\"\n+       applicationId \"com.mycompany.myapp\"\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version for Capacitor 6.0\nDESCRIPTION: Update the default Kotlin version from 1.8.20 to 1.9.10 in the build.gradle file, used when the kotlin_version property is not specified.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/6-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\nbuildscript {\n-    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.8.20'\n+    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.9.10'\n    repositories {\n```\n\n----------------------------------------\n\nTITLE: Updating Android Plugin Variables in build.gradle\nDESCRIPTION: Updates the minimum versions for various Android dependencies in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\next {\n    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'\n-   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'\n+   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.7.0'\n-   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'\n+   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.2.1'\n-   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'\n+   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.6.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugins using npm and Capacitor CLI - Bash\nDESCRIPTION: Shows the recommended commands for installing a Cordova plugin in a Capacitor-based project. The sample uses npm to install the Cordova plugin package and npx cap sync to synchronize the installation to native platforms. No specific parameters other than the plugin name are needed. These steps are essential to ensure the plugin is linked to iOS and Android subprojects, and any additional configuration may be required manually afterward.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: TypeScript Share API Method: canShare\nDESCRIPTION: Method to check if sharing functionality is supported on the current platform. Returns a Promise with a boolean value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/share.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncanShare() => Promise<CanShareResult>\n```\n\n----------------------------------------\n\nTITLE: Executing Global Plugin Link Command using Bash\nDESCRIPTION: Shows the command to create a global symbolic link for the current plugin package. This step is necessary for local testing, allowing other projects to link to this local version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm link\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: Defines the PermissionStatus interface for representing the current permission state for displaying notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  display: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Importance type alias, which represents the importance levels for notifications in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: This code snippet defines the PluginListenerHandle interface, which represents a handle for removing a plugin listener in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate for ScreenOrientation Plugin\nDESCRIPTION: Required modifications to the AppDelegate.swift file in iOS projects to support the ScreenOrientation plugin. This includes importing the plugin and adding a method to handle supported orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/packaging.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n+ import CapacitorCommunityScreenOrientation\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n+     return ScreenOrientationPlugin.supportedOrientations\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Channel in Capacitor (Android)\nDESCRIPTION: Create a notification channel. Only available on Android O or newer (SDK 26+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode via Capacitor CLI\nDESCRIPTION: This Capacitor CLI command (`npx cap open ios`) automatically locates and opens the generated iOS project (`.xcworkspace` file) in Xcode, the native IDE for iOS development. This allows developers to manage native configurations, build, and run the app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Plugin via NPM\nDESCRIPTION: Commands for installing the packaged Capacitor plugin using npm and syncing the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor-community/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Dependencies\nDESCRIPTION: These commands update Capacitor core, iOS, Android, and CLI dependencies to the latest version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core @capacitor/ios @capacitor/android\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Querying Network Status with getStatus Method\nDESCRIPTION: TypeScript definition for the getStatus method which returns a Promise containing the current network connection status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/network.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus() => Promise<ConnectionStatus>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard in TypeScript Configuration\nDESCRIPTION: TypeScript configuration example for the Keyboard plugin, including type references and using enum values for resize mode and keyboard style.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\nimport { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: KeyboardResize.Body,\n      style: KeyboardStyle.Dark,\n      resizeOnFullScreen: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining `iosUNNotificationAttachmentOptionsTypeHintKey` Property Type as `string`\nDESCRIPTION: Specifies that the `iosUNNotificationAttachmentOptionsTypeHintKey` property within the LocalNotificationAttachmentOptions interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Basic Google Maps Component Usage\nDESCRIPTION: HTML and CSS implementation for rendering the Google Maps component\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<capacitor-google-map id=\"map\"></capacitor-google-map>\n```\n\nLANGUAGE: css\nCODE:\n```\ncapacitor-google-map {\n  display: inline-block;\n  width: 275px;\n  height: 400px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Capacitor Plugin in TypeScript\nDESCRIPTION: Demonstrates how to add an event listener to a Capacitor plugin in TypeScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Method Handler for Unlocking Screen Orientation\nDESCRIPTION: Implements the Capacitor plugin method that processes unlock calls from JavaScript, with appropriate error handling and response resolution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func unlock(_ call: CAPPluginCall) {\n  implementation.unlock { error in\n    if let error = error {\n      call.reject(error.localizedDescription)\n    }\n    call.resolve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientationPlugin in Java\nDESCRIPTION: This snippet shows how to create the main ScreenOrientationPlugin class and register it with Capacitor. It includes method stubs for orientation, lock, and unlock functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void lock(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void unlock(PluginCall call) {\n       call.resolve();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Dialog Plugin\nDESCRIPTION: Commands to install the Dialog plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/dialog\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Deployment Target in podspec\nDESCRIPTION: Updates the .podspec to set the minimum iOS deployment target to 12.0 for plugin compatibility with Capacitor 3. Ensures the plugin cannot be installed on older systems. No direct input/output except affecting supported platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-s.ios.deployment_target  = '11.0'\n+s.ios.deployment_target  = '12.0'\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in Capacitor Push Notifications\nDESCRIPTION: Remove all native listeners for the Push Notifications plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Files with Capacitor Filesystem API (appendFile)\nDESCRIPTION: Defines the `appendFile` method signature from the Capacitor Filesystem API. This asynchronous function takes `AppendFileOptions` (specifying path, data, optional directory, and encoding) and returns a Promise that resolves when the data has been appended to the file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nappendFile(options: AppendFileOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Motion Plugin via npm\nDESCRIPTION: Installs the `@capacitor/motion` package using npm and then synchronizes the native project dependencies using the Capacitor CLI command `npx cap sync`. This step is necessary to integrate the plugin into a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/motion\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Fixing GitHub Connection Issues with CocoaPods\nDESCRIPTION: These commands update openssl and Ruby to fix GitHub connection issues with CocoaPods. This solution helps when macOS has outdated cryptographic protocols that GitHub no longer accepts for repository access.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\nbrew upgrade openssl\nbrew install ruby\nbrew link --overwrite ruby\n```\n\n----------------------------------------\n\nTITLE: Device getId Method Signature\nDESCRIPTION: TypeScript method signature for getId() that returns a Promise containing a unique identifier for the device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetId() => Promise<DeviceId>\n```\n\n----------------------------------------\n\nTITLE: API: setStyle() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `setStyle()` method. It takes `KeyboardStyleOptions` to programmatically set the keyboard's visual style (e.g., light or dark). This method is only supported on iOS and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetStyle(options: KeyboardStyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Getting Minutes (Local) with Date.getMinutes() in JavaScript\nDESCRIPTION: The `getMinutes()` method returns the minutes (0-59) in the specified date according to local time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ngetMinutes(): number\n```\n\n----------------------------------------\n\nTITLE: Network Status Change Listener Definition\nDESCRIPTION: TypeScript method signature for adding a network status change event listener, returns a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/network.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'networkStatusChange', listenerFunc: (status: NetworkStatus) => void) => PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Manually Opening iOS Project in Xcode\nDESCRIPTION: Provides an alternative command to manually open the iOS project workspace in Xcode using the 'open' command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/App/App.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Creating Privacy Manifest for iOS App Using UserDefaults API\nDESCRIPTION: This XML snippet demonstrates a sample PrivacyInfo.xcprivacy file for an app using the UserDefaults API through the @capacitor/preferences plugin. It declares the use of NSPrivacyAccessedAPICategoryUserDefaults with the reason code CA92.1.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/privacy-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyTracking</key>\n    <false/>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>CA92.1</string>\n        </array>\n      </dict>\n    </array>\n    <key>NSPrivacyTrackingDomains</key>\n    <array/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Setting keepAlive for Multiple Completions in iOS (Swift)\nDESCRIPTION: Code snippet showing how to set the keepAlive property to true for a CAPPluginCall in iOS. This allows the call to be completed multiple times.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.keepAlive = true\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project with Capacitor\nDESCRIPTION: Command to open the Android project in Android Studio using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Capacitor and Cordova Plugins\nDESCRIPTION: Command to list all installed Capacitor and Cordova plugins along with their version numbers in a Capacitor project. This helps in determining the exact versions of plugins currently in use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/cordova.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Pods for Sandbox Sync\nDESCRIPTION: Command to update iOS pods when encountering 'Sandbox not in sync with the Podfile.lock' error\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/share Plugin\nDESCRIPTION: Commands for installing the Share Capacitor plugin and synchronizing with your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/share.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/share\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Adding AppRestoredResult Event Listener in Capacitor App API\nDESCRIPTION: Adds a listener for the appRestoredResult event which triggers when the app was launched with previously persisted plugin call data. This is particularly important for Android apps using plugins with external Activities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'appRestoredResult', listenerFunc: RestoredListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Removing All Plugin Listeners\nDESCRIPTION: Method to remove all registered listeners for the plugin. Returns a void promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Finished Event Listener\nDESCRIPTION: Method to listen for browser finished events on Android and iOS, which fires when the browser is closed by the user.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Setting Full Year (Local) with Date.setFullYear() in JavaScript\nDESCRIPTION: The `setFullYear()` method sets the full year for a specified date according to local time. It requires the year value `year` (4 digits) and optionally accepts the month `month` (0-11) and day `date` (1-31). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nsetFullYear(year: number, month?: number, date?: number): number\n```\n\n----------------------------------------\n\nTITLE: Defining the CapacitorHttp `post` Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `post` method of the CapacitorHttp API. It requires an `HttpOptions` object, which should include the data to be sent, and returns a `Promise` resolving with an `HttpResponse`. This method is used for making HTTP POST requests via native libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npost(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy in Capacitor Web View (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to add a Content Security Policy (CSP) to a Capacitor app by including a <meta> tag in the <head> section of an HTML file. The CSP restricts allowed sources for content to the current origin and 'foo.com', enhancing security by controlling resource loading. Prerequisites include basic app knowledge and access to the HTML source. The 'http-equiv' attribute specifies the CSP, while the 'content' attribute enforces the allowed sources. Limitation: actual policy should be tailored to your app's needs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta\\n  http-equiv=\\\"Content-Security-Policy\\\"\\n  content=\\\"default-src 'self' foo.com\\\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing All Keyboard Event Listeners in Capacitor\nDESCRIPTION: Method to remove all native listeners for the Keyboard plugin, cleaning up any event subscriptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Status Bar Overlay Options Interface\nDESCRIPTION: Interface defining options for controlling whether the status bar overlays the WebView. Includes a boolean property to toggle the overlay behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SetOverlaysWebViewOptions {\n  overlay: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Language Tag Method Definition\nDESCRIPTION: TypeScript method definition for getting device language tag\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageTag() => Promise<LanguageTag>\n```\n\n----------------------------------------\n\nTITLE: Using Facade Pattern in Capacitor Local Notifications Plugin\nDESCRIPTION: This Java code shows the Facade pattern implementation in the Capacitor Local Notifications plugin. The load method initializes multiple complex subsystems (storage, manager, channel manager) but presents a simplified interface to the plugin code, hiding the complexity of the notification subsystem.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n    super.load();\n    notificationStorage = new NotificationStorage(getContext());\n    manager = new LocalNotificationManager( … );\n    manager.createNotificationChannel();\n    notificationChannelManager = new NotificationChannelManager(getActivity());\n    staticBridge = this.bridge;\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Documentation in Markdown\nDESCRIPTION: Markdown documentation outlining the components folder organization, including global components used across multiple sections and page-specific components that mirror the routing structure\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/src/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Components folder\n\nThis folder is meant to house components that are used across multiple versions. For components that are meant to be used in a specific version only, consider putting them directly in `/docs/` in the appropriate subfolder. [See here](/README.md#Versioning) for more details.\n\n## Global\n\nGlobal components are used on many pages spanning many sections.\n\n## Page\n\nPage components are confined to a section of pages or a single page. The layout of this directory is meant to mirror the [directory used for routing]()\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interfaces for plugin configuration and inclusion settings. Allows for custom plugin configuration by class name and specification of plugins to include during sync operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/config.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nplugins?: PluginsConfig;\nincludePlugins?: string[];\n\nexport interface PluginsConfig {\n    [key: string]: {\n        [key: string]: any;\n    } | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Script for Trapeze in JSON\nDESCRIPTION: This JSON snippet demonstrates how to set up an NPM script to run the Trapeze configuration tool with a YAML configuration file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/automated-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"cap-config\": \"trapeze run config.yaml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Screen Orientation in Info.plist\nDESCRIPTION: XML configuration to limit screen orientation on iOS devices. This example restricts iPhones to portrait mode while allowing iPads to use landscape orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UISupportedInterfaceOrientations</key>\n  <array>\n    <string>UIInterfaceOrientationPortrait</string>\n  </array>\n  <key>UISupportedInterfaceOrientations~ipad</key>\n  <array>\n    <string>UIInterfaceOrientationLandscapeRight</string>\n    <string>UIInterfaceOrientationLandscapeLeft</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Type alias representing the possible states of a permission request in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Installing Keyboard Capacitor Plugin\nDESCRIPTION: Commands to install the Keyboard Capacitor plugin and sync the project after installation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/keyboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/keyboard@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation for Capacitor\nDESCRIPTION: Command to verify Node.js installation by checking the installed version. Node.js 12 or higher is required for Capacitor development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n# v18.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining ReaddirResult Interface in TypeScript\nDESCRIPTION: Defines the result interface returned after reading the contents of a directory using the Capacitor Filesystem API. Contains a `files` property which is an array of strings listing the names of files and subdirectories.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReaddirResult {\n  /**\n   * List of files and directories inside the directory\n   * @since 1.0.0\n   */\n  files: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Plugin Call Persistence Methods\nDESCRIPTION: Core methods available in iOS for saving, retrieving, and releasing plugin calls. These methods allow managing CAPPluginCall objects for asynchronous operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc saveCall(_ call: CAPPluginCall)\nfunc savedCall(withID: String) -> CAPPluginCall?\nfunc releaseCall(_ call: CAPPluginCall)\nfunc releaseCall(withID: String)\n```\n\n----------------------------------------\n\nTITLE: Opening Native Project IDEs with Capacitor CLI (Bash)\nDESCRIPTION: Uses the Capacitor CLI command `npx cap open` followed by the platform (ios or android) to open the respective native project in its IDE (Xcode for iOS, Android Studio for Android). This is typically done after configuring Live Reload to run the app on a device or simulator.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Installing @ionic/pwa-elements via npm Bash Command\nDESCRIPTION: Installs the @ionic/pwa-elements package from npm to add web-based UI functionality for plugins such as Camera and Toast in Capacitor projects. This command must be run in your project's root directory. There are no arguments besides the package name, and after installation you should integrate the loader module as shown in framework-specific steps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/pwa-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Complete Podfile Configuration for iOS\nDESCRIPTION: Full Podfile configuration including Capacitor pods and Firebase Messaging for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n\nplatform :ios, '14.0'\nuse_frameworks!\n\n# workaround to avoid Xcode caching of Pods that requires\n# Product -> Clean Build Folder after new Cordova plugins installed\n# Requires CocoaPods 1.6 or newer\ninstall! 'cocoapods', :disable_input_output_paths => true\n\ndef capacitor_pods\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'\n  pod 'CapacitorHaptics', :path => '../../node_modules/@capacitor/haptics'\n  pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'\n  pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'\n  pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'\nend\n\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'FirebaseMessaging'\nend\n\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router for Deep Linking\nDESCRIPTION: Configuration of Vue Router for handling deep links in a Vue application. This code sets up the router instance that will be used for navigation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Jetifier in gradle.properties\nDESCRIPTION: Removes the android.enableJetifier property from gradle.properties to disable Jetifier.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# gradle.properties\n\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n- # Automatically convert third-party libraries to use AndroidX\n- android.enableJetifier=true\n```\n\n----------------------------------------\n\nTITLE: Apple Silicon CocoaPods Installation Commands\nDESCRIPTION: Terminal commands to install FFI and run pod install using Rosetta x86_64 architecture simulation on Apple Silicon Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/faqs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: File Viewer Resource Opening Method\nDESCRIPTION: TypeScript interface definition for opening documents from app resources.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/file-viewer.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nopenDocumentFromResources(options: OpenFromResourcesOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Android Plugin Variables in build.gradle\nDESCRIPTION: Updates the minimum versions for various Android dependencies in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\next {\n    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'\n-   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.4.2'\n+   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'\n-   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.3'\n+   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'\n-   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.4.0'\n+   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation Example\nDESCRIPTION: Complete JavaScript/HTML implementation for Google Maps\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<capacitor-google-map id=\"map\"></capacitor-google-map>\n<button onclick=\"createMap()\">Create Map</button>\n\n<style>\n  capacitor-google-map {\n    display: inline-block;\n    width: 275px;\n    height: 400px;\n  }\n</style>\n\n<script>\n  import { GoogleMap } from '@capacitor/google-maps';\n\n  const createMap = async () => {\n    const mapRef = document.getElementById('map');\n\n    const newMap = await GoogleMap.create({\n      id: 'my-map',\n      element: mapRef,\n      apiKey: 'YOUR_API_KEY_HERE',\n      config: {\n        center: {\n          lat: 33.6,\n          lng: -117.9,\n        },\n        zoom: 8,\n      },\n    });\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding CocoaPods Dependency in Podspec\nDESCRIPTION: Example of adding a CocoaPods dependency (FirebaseFirestore) in a .podspec file for a Capacitor iOS plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n  s.dependency 'Capacitor'\n  s.dependency 'FirebaseFirestore', '~> 11.8'\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Versions in build.gradle for Android\nDESCRIPTION: A diff snippet for updating the compileSdkVersion and targetSdkVersion from 29 to 30 in the android/build.gradle file when migrating to Capacitor 3. This ensures compatibility with the latest Android APIs. Requires Gradle access and permissions to change the build configuration. No functional inputs or outputs beyond build configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nandroid {\n-   compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 29\n+   compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 30\n    defaultConfig {\n        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 21\n-       targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 29\n+       targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 30\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on iOS Device\nDESCRIPTION: This command runs a debug build of the Capacitor app on an iOS device using the CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Interface Properties - TypeScript\nDESCRIPTION: Type definitions for notification configuration options including auto-cancel, icons, and channel settings. Primarily focused on Android platform features.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationOptions {\n  autoCancel?: boolean;\n  largeBody?: string;\n  summaryText?: string;\n  smallIcon?: string;\n  largeIcon?: string;\n  channelId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android App Build Gradle\nDESCRIPTION: These diff snippets show how to update the Android app's build.gradle file to use the common variables and update dependency versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n android {\n-    compileSdkVersion 28\n+    compileSdkVersion rootProject.ext.compileSdkVersion\n     defaultConfig {\n         applicationId \"com.example.app\"\n-        minSdkVersion 21\n-        targetSdkVersion 28\n+        minSdkVersion rootProject.ext.minSdkVersion\n+        targetSdkVersion rootProject.ext.targetSdkVersion\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n```\n\nLANGUAGE: diff\nCODE:\n```\n dependencies {\n     implementation fileTree(include: ['*.jar'], dir: 'libs')\n-    implementation 'androidx.appcompat:appcompat:1.0.0'\n+    implementation \"androidx.appcompat:appcompat:$androidxAppCompatVersion\"\n     implementation project(':capacitor-android')\n-    testImplementation 'junit:junit:4.12'\n-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'\n+    testImplementation \"junit:junit:$junitVersion\"\n+    androidTestImplementation \"androidx.test.ext:junit:$androidxJunitVersion\"\n+    androidTestImplementation \"androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion\"\n     implementation project(':capacitor-cordova-android-plugins')\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Privacy Manifest for Filesystem Access (XML)\nDESCRIPTION: Example PrivacyInfo.xcprivacy configuration for iOS. It declares the usage of the NSPrivacyAccessedAPICategoryFileTimestamp API category with reason C617.1, which is required by Apple starting May 1st, 2024, when using this plugin for App Store submissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>C617.1</string>\n        </array>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Hook Scripts in Package.json (JSON)\nDESCRIPTION: Shows how to define scripts in a plugin's package.json to respond to various Capacitor lifecycle events. The example outputs a message indicating which Capacitor command is being run and on which platform using the $CAPACITOR_PLATFORM_NAME environment variable. No external dependencies are required beyond a standard Capacitor or Cordova plugin project, and the scripts may be adjusted to run custom build, setup, or cleanup commands as needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/plugin-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"capacitor:copy:before\": \"echo copy before $CAPACITOR_PLATFORM_NAME\",\n    \"capacitor:copy:after\": \"echo copy after $CAPACITOR_PLATFORM_NAME\",\n    \"capacitor:update:before\": \"echo update before $CAPACITOR_PLATFORM_NAME\",\n    \"capacitor:update:after\": \"echo update after $CAPACITOR_PLATFORM_NAME\",\n    \"capacitor:sync:before\": \"echo sync before $CAPACITOR_PLATFORM_NAME\",\n    \"capacitor:sync:after\": \"echo sync after $CAPACITOR_PLATFORM_NAME\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WatchPositionCallback Type Alias in TypeScript\nDESCRIPTION: Defines the `WatchPositionCallback` type alias in TypeScript. This function type accepts a `Position` object (or null if there's an error) and an optional error object (`err`) as parameters, returning nothing (`void`). It is used as the callback function signature for watching continuous geolocation updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/geolocation.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n(position: <a href=\\\"#position\\\">Position</a> | null, err?: any): void\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 2.0 Core Dependencies\nDESCRIPTION: Command to update Capacitor CLI and Core to version 2.0 using npm install.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@2 @capacitor/core@2\n```\n\n----------------------------------------\n\nTITLE: Running Default Capacitor Builds - Bash\nDESCRIPTION: Use these commands to build your app with the default environment configuration. Simply run the standard Capacitor CLI commands for copy and run without setting NODE_ENV, which will use the non-QA flavor/scheme as per your dynamic configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/environment-specific-configurations.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\nnpx cap run ios \t#npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Disabling Marker Clustering for Google Maps in TypeScript\nDESCRIPTION: Disables marker clustering for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndisableClustering() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Zoom for iPad in Capacitor Config\nDESCRIPTION: JSON configuration needed in the Capacitor configuration file to make the text-zoom plugin work on iPads by setting the preferred content mode to mobile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/text-zoom.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"preferredContentMode\": \"mobile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constant for External Storage Directory in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the External Storage directory using the 'EXTERNAL_STORAGE' string literal. On iOS, this maps to the Documents directory. On Android, it refers to the primary shared/external storage directory. Access requires enabling legacy external storage on Android 10 and is not permitted on Android 11 or newer.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n'EXTERNAL_STORAGE'\n```\n\n----------------------------------------\n\nTITLE: iOS Podfile Configuration\nDESCRIPTION: Setting minimum iOS deployment target in Podfile\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '14.0'\n```\n\n----------------------------------------\n\nTITLE: Navigation Path for Web Testing\nDESCRIPTION: Menu navigation path to build and launch the application in a web browser through the VS Code extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/3-build-and-run.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRun > Web\n```\n\n----------------------------------------\n\nTITLE: Setting keepAlive for Multiple Completions in Android (Java)\nDESCRIPTION: Code snippet showing how to set the keepAlive property to true for a PluginCall in Android. This allows the call to be completed multiple times.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.setKeepAlive(true);\n```\n\n----------------------------------------\n\nTITLE: Handling Lock Method in Plugin\nDESCRIPTION: Plugin method that validates the input orientation parameter and calls the implementation's lock method to lock the screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void lock(PluginCall call) {\n   String orientationType = call.getString(\"orientation\");\n   if(orientationType == null) {\n       call.reject(\"Input option 'orientation' must be provided.\");\n       return;\n   }\n   implementation.lock(orientationType);\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Jetifier for Capacitor 5.0\nDESCRIPTION: Removes the Android Jetifier configuration from gradle.properties as it's no longer needed in Capacitor 5.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# gradle.properties\n\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n- # Automatically convert third-party libraries to use AndroidX\n- android.enableJetifier=true\n```\n\n----------------------------------------\n\nTITLE: Updating Watch Data in Capacitor\nDESCRIPTION: Updates state data on a connected watch. Takes an options object with a data parameter containing key-value pairs to update. Returns a Promise that resolves when the data has been updated on the watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWatchData(options: { data: { [key: string]: string; }; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Specifying PermissionState Type Alias - TypeScript\nDESCRIPTION: Defines a TypeScript union of string literals for notification permission state including 'prompt', 'prompt-with-rationale', 'granted', and 'denied'. No dependencies. Used for permission objects, constraining allowed values for permission checking workflows.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Version in Podfile\nDESCRIPTION: Updates the iOS version to 14.0 in the Podfile for plugins with old structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-platform :ios, '13.0'\n+platform :ios, '14.0'\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version in gradle-wrapper.properties\nDESCRIPTION: Updates the Gradle wrapper version to 8.11.1 in the gradle-wrapper.properties file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-8.2.1-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.11.1-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Verifying CocoaPods Installation\nDESCRIPTION: Command to verify that CocoaPods is properly installed by checking its version.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npod --version\n# 1.12.1\n```\n\n----------------------------------------\n\nTITLE: Updating App ID in Capacitor Config\nDESCRIPTION: Configuration change to set a custom app ID in the capacitor.config.ts file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst config: CapacitorConfig = {\n- appId: 'io.ionic.starter',\n+ appId: 'com.mydomain.myappnam',\n  appName: 'capApp',\n  webDir: 'www'\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Prettier Configuration for Java in package.json\nDESCRIPTION: Updates the prettier npm script to include the Java plugin for proper formatting of Java files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-    \"prettier\": \"prettier \\\"**/*.{css,html,ts,js,java}\\\"\",\n+    \"prettier\": \"prettier \\\"**/*.{css,html,ts,js,java}\\\" --plugin=prettier-plugin-java\",\n```\n\n----------------------------------------\n\nTITLE: Complete AppDelegate.swift Implementation with Firebase\nDESCRIPTION: Full implementation of the AppDelegate.swift file configured for Firebase push notifications, including initialization and notification handling methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport Firebase\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    FirebaseApp.configure()\n    return true\n  }\n\n  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Messaging.messaging().apnsToken = deviceToken\n    Messaging.messaging().token(completion: { (token, error) in\n      if let error = error {\n          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n      } else if let token = token {\n          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n      }\n    })\n  }\n\n  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables in Gradle\nDESCRIPTION: Updated minimum SDK versions and dependency versions for Android project configuration in variables.gradle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/4-0.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 32\ntargetSdkVersion = 32\nandroidxActivityVersion = '1.4.0'\nandroidxAppCompatVersion = '1.4.2'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.8.0'\nandroidxFragmentVersion = '1.4.1'\ncoreSplashScreenVersion = '1.0.0-rc01'\nandroidxWebkitVersion = '1.4.0'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.3'\nandroidxEspressoCoreVersion = '3.4.0'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Defining a State Change Listener Type Alias in Capacitor (TypeScript)\nDESCRIPTION: Defines the TypeScript type alias `StateChangeListener`. This type represents a function that will be called when the application's state changes (e.g., becoming active or inactive). The function receives a single argument `state` of type `AppState`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype StateChangeListener = (state: AppState) => void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition\nDESCRIPTION: Adds TypeScript type definitions to the Echo plugin for better type safety and IDE support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n}\n\nconst Echo = registerPlugin<EchoPlugin>('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Including Capacitor Runtime in HTML\nDESCRIPTION: HTML script tags showing how to include Capacitor runtime before other JavaScript files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"capacitor.js\"></script>\n<script src=\"your/app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Opening Native IDE Projects with Capacitor CLI\nDESCRIPTION: Command to open native platform projects in their respective IDEs. For iOS, opens Xcode, and for Android, opens Android Studio. Requires specifying the target platform as either 'android' or 'ios'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/open.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open <platform>\n```\n\n----------------------------------------\n\nTITLE: Setting Keep Alive Flag - iOS Swift\nDESCRIPTION: Code to set the keepAlive property for a plugin call in iOS, enabling multiple completions. This allows the call to persist for repeated resolve() invocations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.keepAlive = true\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: Interface definition for a plugin listener handle with a remove method to deregister listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Property with AbortSignal Type in TypeScript\nDESCRIPTION: This code snippet defines a property named 'signal' with the type AbortSignal. It appears to be part of an interface or type definition, likely used in Capacitor's API for handling cancellable operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsignal: AbortSignal\n```\n\n----------------------------------------\n\nTITLE: Setting Text Zoom Level - @capacitor/text-zoom TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to set the text zoom level using the set() method of the @capacitor/text-zoom plugin. The function accepts a SetOptions object containing a required 'value' property (type: number) that specifies the zoom level as a decimal (e.g., 1.2 for 120%). Returns a Promise resolving to void. Input: SetOptions. Output: Updates the current zoom level.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/text-zoom.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Watch UI Text with Variable (Text/DSL)\nDESCRIPTION: This snippet shows an example of defining a Text component for the watch UI using the plugin's string format. It includes a variable placeholder (`$number`) which can be dynamically updated using the `updateWatchData` method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nText(\"Show my $number\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with isNativePlatform\nDESCRIPTION: Example showing how to use isNativePlatform to implement conditional logic for native platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Running Automated Configuration via npm Script - Bash\nDESCRIPTION: This command demonstrates how to trigger the defined automation script (\"cap-config\") from the command line using npm. It allows seamless execution of configuration changes specified in the project's YAML file through the Trapeze CLI. Prerequisites include a valid script definition in package.json and the Trapeze CLI installed and accessible (either globally or as a local dependency).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/automated-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cap-config\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration CLI (Bash)\nDESCRIPTION: Demonstrates initializing a new Capacitor project configuration using the CLI by specifying an application name and unique App ID. Requires the Node.js runtime and Capacitor CLI (installed via npm or npx). Parameters include \\u003CappName\\u003E for the application name and \\u003CappID\\u003E for the package identifier; an optional --web-dir parameter specifies the build directory for the web assets. The command outputs the initialization status and creates the required config files; invalid inputs or missing required arguments will result in an error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/init.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init <appName> <appID>\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor iOS Project with Rosetta\nDESCRIPTION: Commands to update a Capacitor iOS project when using CocoaPods through Rosetta on Apple Silicon Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\narch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via Ruby Gem\nDESCRIPTION: Alternative command to install CocoaPods using Ruby Gem instead of Homebrew.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Config Values on iOS - Swift\nDESCRIPTION: This Swift snippet shows how to access a plugin configuration value named 'style' from within a Capacitor iOS native plugin. The getConfig() method retrieves the plugin settings and getString() fetches a specific value. If a 'style' value is present, the code executes the style application logic. Dependencies: Capacitor native plugin runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let style = getConfig().getString(\"style\") {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Capacitor Plugin Project with npx\nDESCRIPTION: Command to generate a new Capacitor plugin project using @capacitor/create-plugin. It sets up the project structure with specified name, package ID, class name, and other metadata.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/create-plugin \\\n  --name @capacitor-community/screen-orientation \\\n  --package-id io.ionic.plugins.screenorientation \\\n  --class-name ScreenOrientation \\\n  --repo \"https://ionic.io\" \\\n  --license \"MIT\" \\\n  --description \"Work with the screen orientation in a common way for iOS, Android, and web\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notification Presentation Options in capacitor.config.json\nDESCRIPTION: This JSON snippet shows how to configure the `presentationOptions` for the Push Notifications plugin within the `capacitor.config.json` file. It defines how notifications are displayed when the app is in the foreground, allowing options like 'badge', 'sound', and 'alert'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"PushNotifications\": {\n      \"presentationOptions\": [\"badge\", \"sound\", \"alert\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Browser with InAppBrowser\nDESCRIPTION: TypeScript code to close the currently active browser (Web View or System Browser) using the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nawait InAppBrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Admob Plugin via npm\nDESCRIPTION: This code snippet demonstrates how to install the Capacitor Community Admob plugin using npm and update Capacitor. It's the first step in integrating Admob advertisements into a Capacitor app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/ads.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/admob\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Listener Component in React with Capacitor - TypeScript\nDESCRIPTION: Defines a functional component, AppUrlListener, that registers an event listener for 'appUrlOpen' via Capacitor on mount. Extracts the relevant slug from the incoming URL and uses React Router's history.push to perform client-side navigation. This component should be rendered in a context where React Router's history is available. The component returns null, as it only provides routing side effects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst AppUrlListener: React.FC<any> = () => {\n  let history = useHistory();\n  useEffect(() => {\n    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {\n      // Example url: https://beerswift.app/tabs/tab2\n      // slug = /tabs/tab2\n      const slug = event.url.split('.app').pop();\n      if (slug) {\n        history.push(slug);\n      }\n      // If no match, do nothing - let regular routing\n      // logic take over\n    });\n  }, []);\n\n  return null;\n};\n\nexport default AppUrlListener;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Alias for OperatingSystem in Capacitor\nDESCRIPTION: Defines the OperatingSystem type alias which represents possible operating systems that can be detected by the Capacitor Device plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype OperatingSystem = 'ios' | 'android' | 'windows' | 'mac' | 'unknown';\n```\n\n----------------------------------------\n\nTITLE: Using CapacitorCookies API for Cookie Management\nDESCRIPTION: Demonstrates how to use the CapacitorCookies API to get, set, delete, and clear cookies. Includes standard document.cookie operations and Capacitor-specific methods for managing cookies at specific URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorCookies } from '@capacitor/core';\n\nconst getCookies = () => {\n  return document.cookie;\n};\n\nconst setCookie = () => {\n  document.cookie = key + '=' + value;\n};\n\nconst setCapacitorCookie = async () => {\n  await CapacitorCookies.setCookie({\n    url: 'http://example.com',\n    key: 'language',\n    value: 'en',\n  });\n};\n\nconst deleteCookie = async () => {\n  await CapacitorCookies.deleteCookie({\n    url: 'https://example.com',\n    key: 'language',\n  });\n};\n\nconst clearCookiesOnUrl = async () => {\n  await CapacitorCookies.clearCookies({\n    url: 'https://example.com',\n  });\n};\n\nconst clearAllCookies = async () => {\n  await CapacitorCookies.clearAllCookies();\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Launch Theme for Splash Screen (XML)\nDESCRIPTION: This XML snippet configures the Android launch theme background resource in styles.xml to support custom splash image names. By editing this style block and updating the drawable resource reference, developers can ensure their chosen splash image is used at app launch. No external dependencies except the Android build system; the NAME must match a valid drawable in the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/splash-screen.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\\\"AppTheme.NoActionBarLaunch\\\" parent=\\\"AppTheme.NoActionBar\\\">\\n    <item name=\\\"android:background\\\">@drawable/NAME</item>\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Web Plugin Structure\nDESCRIPTION: Creates the basic structure for a Capacitor web plugin by extending WebPlugin class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\nimport type { ScreenOrientationPlugin } from './definitions';\n\nexport class ScreenOrientationWeb extends WebPlugin {\n  constructor() {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientation Class in Java\nDESCRIPTION: This snippet defines the ScreenOrientation class, which handles getting the current screen orientation. It includes methods to convert rotation values to orientation types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport android.view.Surface;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class ScreenOrientation {\n   private AppCompatActivity activity;\n\n   public ScreenOrientation(AppCompatActivity activity) {\n       this.activity = activity;\n   }\n\n   public String getCurrentOrientationType() {\n       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n       return fromRotationToOrientationType(rotation);\n   }\n\n   private String fromRotationToOrientationType(int rotation) {\n       switch (rotation) {\n           case Surface.ROTATION_90:\n               return \"landscape-primary\";\n           case Surface.ROTATION_180:\n               return \"portrait-secondary\";\n           case Surface.ROTATION_270:\n               return \"landscape-secondary\";\n           default:\n               return \"portrait-primary\";\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Package\nDESCRIPTION: Command to install the @capacitor/ios package using npm package manager.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Example Output of Capacitor List Command\nDESCRIPTION: Sample output showing installed plugins, including both Capacitor and Cordova plugins, with their respective versions where applicable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/ls.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFound 1 Capacitor plugin for android:\n    capacitor-mapbox (0.0.1)\nFound 2 Cordova plugins for android:\n    cordova-plugin-camera\n    cordova-plugin-splashscreen\n```\n\n----------------------------------------\n\nTITLE: Renaming Files/Directories with Capacitor Filesystem API in TypeScript\nDESCRIPTION: Defines the `rename` method signature in TypeScript for the Capacitor Filesystem API. This asynchronous function renames a file or directory based on the provided options. It takes `RenameOptions` (documented as using `CopyOptions` interface link) and returns a Promise that resolves with no value upon successful completion. Available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nrename(options: RenameOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Enabling Touch Interaction for Google Maps in TypeScript\nDESCRIPTION: Enables touch interaction for the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenableTouch() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Action Types Registration Interface\nDESCRIPTION: TypeScript interface for registering notification action types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegisterActionTypesOptions {\n  types: ActionType[];\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Orientation Change Handling\nDESCRIPTION: Updated method that uses hasOrientationChanged to ensure only actual orientation changes trigger event listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   if(implementation.hasOrientationChanged(newConfig.orientation)) {\n       this.onOrientationChanged();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Full Year (UTC) with Date.getUTCFullYear() in JavaScript\nDESCRIPTION: The `getUTCFullYear()` method returns the year (four digits for dates between year 1000 and 9999) of the specified date according to universal time (UTC).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCFullYear(): number\n```\n\n----------------------------------------\n\nTITLE: Creating Android Asset Links JSON\nDESCRIPTION: JSON structure for the assetlinks.json file, which associates a website with an Android app for deep linking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"com.netkosoft.beerswift\",\n      \"sha256_cert_fingerprints\": [\"43:12:D4:27:D7:C4:14...\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Autofill Credentials Form in JavaScript\nDESCRIPTION: HTML code for a JavaScript form with ion-input elements configured for email and password autofill. Includes necessary autocomplete attributes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/autofill-credentials.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input type=\"email\" name=\"email\" autocomplete=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input id=\"pwd\" type=\"password\" name=\"password\" autocomplete=\"current-password\" required></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Applying Variables Gradle in Android Build File\nDESCRIPTION: Updates the main build.gradle file to apply the variables.gradle file to make the defined variables available in the Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n         classpath 'com.android.tools.build:gradle:4.1.1'\n         classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n }\n\n+apply from: \"variables.gradle\"\n\n allprojects {\n     repositories {\n         google()\n         jcenter()\n\n```\n\n----------------------------------------\n\nTITLE: Defining `iosHiddenPreviewsBodyPlaceholder` Property Type as `string`\nDESCRIPTION: Specifies that the `iosHiddenPreviewsBodyPlaceholder` property within the LocalNotificationActionType interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Creating Android Common Variables\nDESCRIPTION: Groovy code to define common variables for Android build configuration. This should be placed in a new file named 'variables.gradle' in the android directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\next {\n  minSdkVersion = 21\n  compileSdkVersion = 29\n  targetSdkVersion = 29\n  androidxAppCompatVersion = '1.1.0'\n  androidxCoreVersion =  '1.2.0'\n  androidxMaterialVersion =  '1.1.0-rc02'\n  androidxBrowserVersion =  '2.0.0'\n  androidxLocalbroadcastmanagerVersion =  '1.0.0'\n  firebaseMessagingVersion =  '20.1.2'\n  playServicesLocationVersion =  '17.0.0'\n  junitVersion =  '4.12'\n  androidxJunitVersion =  '1.1.1'\n  androidxEspressoCoreVersion =  '3.2.0'\n  cordovaAndroidVersion =  '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Type alias for permission states of notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Platform\nDESCRIPTION: Command to add the Capacitor iOS platform to the project. This is necessary before adding the iOS project with SPM support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Initializing a Capacitor Plugin with Plugin Generator - Bash\nDESCRIPTION: This Bash snippet demonstrates the command to initialize a new Capacitor plugin project using the official Capacitor plugin generator. It requires Node.js (preferably the latest LTS version) and npm version 6 or higher to be installed. The command launches an interactive setup process, prompting the user for essential plugin details and configuring a starter project structure; it can also accept additional command-line options for non-interactive use. The main input is the command itself, and the output is a generated plugin project ready for development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/plugin\n\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Methods in Java for Capacitor Android Plugins\nDESCRIPTION: Demonstrates how to use the 'unimplemented' method to indicate that a plugin method is not available on Android. This is useful for methods that are specific to other platforms like iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatRequiresIOS(PluginCall call) {\n    call.unimplemented(\"Not implemented on Android.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PendingLocalNotificationSchema Interface in TypeScript\nDESCRIPTION: Defines the PendingLocalNotificationSchema interface for representing a pending local notification. It includes properties for title, body, id, schedule, and extra data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PendingLocalNotificationSchema {\n  title: string;\n  body: string;\n  id: number;\n  schedule: Schedule;\n  extra: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Motion Listeners\nDESCRIPTION: API definition for the method to remove all listeners attached to the Motion plugin. This is useful for cleanup when motion tracking is no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/motion.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening Capacitor iOS Project in Xcode\nDESCRIPTION: Command to open a Capacitor iOS project in Xcode. After running this command, you can use the standard Xcode workflow to build, simulate, and run your app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/running-your-app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Requesting All Defined Permissions in Capacitor Plugin using Diff\nDESCRIPTION: Shows a modification to the permission handling logic. Instead of checking a specific permission state, it uses `hasRequiredPermissions()` (implicitly checking all defined permissions) and then calls `requestAllPermissions()`. This helper method requests all permissions declared in the `@CapacitorPlugin` annotation's `permissions` attribute and triggers the specified callback method (\"cameraPermsCallback\") after the user responds.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n @PluginMethod()\n public void takePhoto(PluginCall call) {\n   if (!hasRequiredPermissions()) {\n+    requestAllPermissions(call, \"cameraPermsCallback\");\n   } else {\n     loadCamera(call);\n   }\n }\n\n @PermissionCallback\n private void cameraPermsCallback(PluginCall call) {\n   ...\n }\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Jetifier for AndroidX Compatibility\nDESCRIPTION: This snippet shows how to install and run jetifier to patch plugins with old Android support dependencies to use AndroidX equivalents. It's a workaround for the 'package android.support.* does not exist' error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\nnpx jetify\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Installing Google Maps Capacitor Plugin\nDESCRIPTION: Commands to install the Google Maps plugin and sync with Capacitor\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/google-maps\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: List Notification Channels - TypeScript\nDESCRIPTION: Lists all available notification channels on Android O or newer (SDK 26+). Returns ListChannelsResult.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: Handling Intents with Results in Android Capacitor Plugins\nDESCRIPTION: This snippet demonstrates how to launch an Intent expecting a result in an Android Capacitor plugin. It uses an image picker as an example, showing how to start the activity and handle the result using the @ActivityCallback annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin()\nclass ImagePicker extends Plugin {\n\n  @PluginMethod()\n  public void pickImage(PluginCall call) {\n    Intent intent = new Intent(Intent.ACTION_PICK);\n    intent.setType(\"image/*\");\n\n    // Start the Activity for result using the name of the callback method\n    startActivityForResult(call, intent, \"pickImageResult\");\n  }\n\n  @ActivityCallback\n  private void pickImageResult(PluginCall call, ActivityResult result) {\n    if (call == null) {\n      return;\n    }\n\n    // Do something with the result data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Push Notification Handlers in iOS AppDelegate\nDESCRIPTION: If the application does not use push notifications, remove the entire code block related to push notification registration, including the `#if USE_PUSH` directive and the `didRegisterForRemoteNotificationsWithDeviceToken` and `didFailToRegisterForRemoteNotificationsWithError` methods, from `ios/App/App/AppDelegate.swift`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-    #if USE_PUSH\n-\n-    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n-    }\n-\n-    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n-    }\n-\n-#endif\n```\n\n----------------------------------------\n\nTITLE: Building Web Project in Capacitor\nDESCRIPTION: Command to build the web project in Capacitor. This step is required before adding the iOS project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Linking Local Capacitor Plugin for Testing using npm\nDESCRIPTION: Provides the shell command `npm install ../path/to/echo` to link a locally developed plugin (located at `../path/to/echo`) to a Capacitor application. This allows testing the plugin within the app environment without publishing it first.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ../path/to/echo\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor AppLauncher Plugin - Bash\nDESCRIPTION: This bash snippet provides commands to install the @capacitor/app-launcher package and synchronize it with the Capacitor project. The first command installs the plugin via npm, and the second runs the 'npx cap sync' command to integrate the native plugin implementations on all platforms. These steps are mandatory before using any AppLauncher APIs in TypeScript code. Requires npm and Capacitor CLI as prerequisites.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app-launcher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app-launcher\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in Capacitor Config\nDESCRIPTION: JSON configuration to set the server URL in capacitor.config.json for Live Reload. The URL should use the local IP address and port of the web server.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/live-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"url\": \"http://192.168.1.68:8100\",\n  \"cleartext\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks in Swift for Capacitor iOS\nDESCRIPTION: Demonstrates how to implement the checkPermissions method to return current permission status for location services\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func checkPermissions(_ call: CAPPluginCall) {\n    let locationState: String\n\n    switch CLLocationManager.authorizationStatus() {\n    case .notDetermined:\n        locationState = \"prompt\"\n    case .restricted, .denied:\n        locationState = \"denied\"\n    case .authorizedAlways, .authorizedWhenInUse:\n        locationState = \"granted\"\n    @unknown default:\n        locationState = \"prompt\"\n    }\n\n    call.resolve([\"location\": locationState])\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper to 8.0.2 for Capacitor 5.0\nDESCRIPTION: Updates the Gradle wrapper distribution URL from 7.4.2 to 8.0.2 in the gradle-wrapper.properties file to support Capacitor 5.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Gitignore for Capacitor 1.1\nDESCRIPTION: Shows the diff for adding Podfile.lock to the iOS .gitignore file. This prevents the Podfile.lock from being committed to version control, which is a recommended practice for Capacitor 1.1.0 and later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/1-1.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n App/build\n App/Pods\n App/public\n+App/Podfile.lock\n xcuserdata\n\n # Cordova plugins for Capacitor\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins with Capacitor CLI\nDESCRIPTION: Command to list all installed Cordova and Capacitor plugins using the Capacitor CLI. An optional platform parameter can be provided to filter plugins specific to Android or iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Defining the openUrl Method Signature in Capacitor App Launcher API\nDESCRIPTION: TypeScript signature for the `openUrl` method of the App Launcher plugin. This method attempts to open another application using the provided URL. The URL should be a known URL scheme on iOS, or either a URL scheme or an app package name on Android. It accepts an options object with a `url` property and returns a Promise resolving to an object indicating completion status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app-launcher.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nopenUrl(options: OpenURLOptions) => Promise<OpenURLResult>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on Android Device\nDESCRIPTION: This command runs a debug build of the Capacitor app on an Android device using the CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Type Definitions in Capacitor Config (TypeScript)\nDESCRIPTION: Shows how to reference and use the plugin's type definitions in a Capacitor configuration file. It includes the type reference and demonstrates setting typed configuration values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor-community/my-cool-plugin\" />\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: \"com.company.app\",\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: \"#034821\"\n    }\n  }\n}\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Declaring Weekday Enum - TypeScript\nDESCRIPTION: Defines an enum for the days of the week with numeric values from 1 (Sunday) through 7 (Saturday). No dependencies. Used for scheduling APIs or recurring notification definitions, mapping each weekday to a unique number.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nenum Weekday {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in TypeScript\nDESCRIPTION: TypeScript configuration example for the Splash Screen plugin using capacitor.config.ts with type references and all available options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    SplashScreen: {\n      launchShowDuration: 3000,\n      launchAutoHide: true,\n      launchFadeOutDuration: 3000,\n      backgroundColor: \"#ffffffff\",\n      androidSplashResourceName: \"splash\",\n      androidScaleType: \"CENTER_CROP\",\n      showSpinner: true,\n      androidSpinnerStyle: \"large\",\n      iosSpinnerStyle: \"small\",\n      spinnerColor: \"#999999\",\n      splashFullScreen: true,\n      splashImmersive: true,\n      layoutName: \"launch_screen\",\n      useDialog: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Core Dependencies\nDESCRIPTION: Commands to install the Capacitor core and CLI packages in an existing web application using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\nnpm install @capacitor/core @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Referencing Plugin Types in Capacitor Config\nDESCRIPTION: Example of how a plugin consumer can reference the plugin's types in their capacitor.config.ts file to get typing support for the plugin's configuration values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor-community/my-cool-plugin\" />\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: \"com.company.app\",\n  ...\n  plugins: {\n    MyCoolPlugin: {\n      style: \"dark\",\n      iconColor: \"#034821\"\n    }\n  }\n}\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Opens the iOS project in Xcode using the Capacitor CLI. This command launches Xcode with the project workspace.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Push Notifications in Angular Component\nDESCRIPTION: TypeScript code to import necessary types and functions from the Capacitor Push Notifications plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n```\n\n----------------------------------------\n\nTITLE: Example package.json Entry for Locally Linked Plugin\nDESCRIPTION: Illustrates how a locally linked plugin appears in the `dependencies` section of an application's `package.json` file. It uses the `file:` protocol followed by the relative path to the local plugin directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"echo\": \"file:../path/to/echo\",\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Android Platform via NPM\nDESCRIPTION: Install the latest Capacitor 3 Android platform using npm and then synchronize the native Android project using the Capacitor CLI (`npx cap sync android`). This updates the native Android project with the required dependencies and configurations for Capacitor 3.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android@latest-3\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from Storage in TypeScript\nDESCRIPTION: This snippet shows the TypeScript method signature for the get function of the Storage API, which retrieves a value for a specific key from persistent storage. Requires the @capacitor/storage plugin. The function accepts an options object adhering to GetOptions (specifically a key property) and returns a Promise resolving to a GetResult object, containing the value as a string or null. Intended for use in async code and is available since Storage API version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget(options: GetOptions) => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Closing the Browser in TypeScript\nDESCRIPTION: TypeScript definition for the Browser.close() method, which closes an open browser window on Web and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclose() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Orientation Change Listener\nDESCRIPTION: TypeScript function to add a listener for screen orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: API Signature: close Method in TypeScript\nDESCRIPTION: Defines the signature for the `close` method. It takes no arguments and returns a `Promise<void>`. This method closes the currently active browser opened via `openInWebView` or `openInSystemBrowser`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclose() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the Capacitor iOS project in Xcode for development and building.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Running Trapeze Configuration via npm Script (Bash)\nDESCRIPTION: Shows how to execute the previously defined npm script to apply project configuration using Trapeze. Assumes that the 'cap-config' script is defined in package.json and Trapeze is installed. The command runs configuration changes declared in the YAML file against the Capicator project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/automated-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cap-config\n```\n\n----------------------------------------\n\nTITLE: Removing All Native Plugin Listeners in Capacitor (TypeScript)\nDESCRIPTION: This method unregisters all native event listeners assigned via the plugin, useful for cleanup and to prevent memory leaks. It returns a Promise resolving to void and affects all registered listeners for the current plugin context. No parameters are required. It should be invoked when event listeners are no longer needed, typically as part of teardown procedures. Requires Capacitor and the relevant runtime environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Text Zoom Plugin\nDESCRIPTION: Bash commands to install the @capacitor/text-zoom plugin using npm and then synchronize the native project dependencies using the Capacitor CLI (`npx cap sync`). Requires Node.js, npm, and Capacitor CLI to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/text-zoom.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/text-zoom\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability with Capacitor.isPluginAvailable in TypeScript\nDESCRIPTION: Shows how to use Capacitor.isPluginAvailable to check if a specific plugin is available on the current platform. This allows for graceful fallbacks when certain functionalities are not available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Bridge's viewController Property in Swift\nDESCRIPTION: Shows the definition of the `viewController` property on the Capacitor bridge. This read-only property provides access to the main `UIViewController` used by Capacitor, enabling presentation of native views.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar viewController: UIViewController? { get }\n```\n\n----------------------------------------\n\nTITLE: Managing Version and Build Numbers in Capacitor Projects\nDESCRIPTION: Shows various operations for managing version numbers and build numbers for both iOS and Android platforms using the project API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/automated-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.ios?.setVersion('App', 'Debug', '1.4.5');\nawait project.ios?.incrementBuild('App');\nawait project.ios?.getBuild('App', 'Debug');\nawait project.ios?.getBuild('App', 'Release');\nawait project.android?.setVersionName('1.0.2');\nawait project.android?.getVersionName();\nawait project.android?.setVersionCode(11);\nawait project.android?.getVersionCode();\nawait project.android?.incrementVersionCode();\n```\n\n----------------------------------------\n\nTITLE: Installing Google Maps Capacitor Plugin\nDESCRIPTION: Commands to install the Google Maps plugin and sync with Capacitor\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/google-maps\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Prompt Dialog API in TypeScript\nDESCRIPTION: API definition for showing a prompt dialog using the Dialog.prompt() method. Includes parameter type and return type information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/dialog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprompt(options: PromptOptions) => Promise<PromptResult>\n```\n\n----------------------------------------\n\nTITLE: Adding JSDoc Comments for Plugin Method Documentation (TypeScript)\nDESCRIPTION: This snippet demonstrates best practice for documenting new plugin methods and properties with JSDoc-style comment blocks in TypeScript. It adds descriptions and version metadata to `openMap` and its parameters, aiding in automated documentation generation. Placed in `src/definitions.ts`, with comments above function and property declarations. Requires JSDoc and optional use of @capacitor/docgen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n\n+  /**\n+   * Opens the map at a given location.\n+   *\n+   * @since 1.1.0\n+   */\n   openMap(options: OpenMapOptions): Promise<void>;\n }\n\n export interface OpenMapOptions {\n+  /**\n+   * The latitude at which to open the map.\n+   */\n   latitude: number;\n\n+  /**\n+   * The longitude at which to open the map.\n+   */\n   longitude: number;\n }\n\n```\n\n----------------------------------------\n\nTITLE: Setting Android Target SDK Version in Capacitor\nDESCRIPTION: This code snippet shows how to set the target SDK version in the '/android/variables.gradle' file of a Capacitor project. The example sets the target SDK to version 34.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/setting-target-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntargetSdkVersion = 34\n```\n\n----------------------------------------\n\nTITLE: Installing cordova-res Globally using npm (Bash)\nDESCRIPTION: This command installs the `cordova-res` command-line tool globally using the Node Package Manager (npm). Global installation makes the `cordova-res` command accessible from any directory in the terminal. This tool is required for generating platform-specific icons and splash screens.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cordova-res\n```\n\n----------------------------------------\n\nTITLE: Defining `channels` Property Type as Array of `NotificationChannel`\nDESCRIPTION: Specifies that the `channels` property within the NotificationChannelList interface must be an array of NotificationChannel objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nNotificationChannel[]\n```\n\n----------------------------------------\n\nTITLE: Updating Java Package Name for Android Plugin Files\nDESCRIPTION: The package declaration to be used in Android plugin files after porting the code to the new plugin project structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.plugins.screenorientation\n```\n\n----------------------------------------\n\nTITLE: Defining the CapacitorHttp `delete` Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet outlines the signature for the `delete` method in the CapacitorHttp API. It takes an `HttpOptions` object specifying the resource to be deleted and returns a `Promise` which resolves with an `HttpResponse`. It allows performing HTTP DELETE requests using the native libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor React Hooks\nDESCRIPTION: This command installs the community-maintained React hooks for Capacitor using npm. These hooks simplify access to Capacitor APIs in React function components.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/react-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag End Listener in Google Maps\nDESCRIPTION: Method to set up a callback for when marker dragging ends. Takes an optional callback function that receives MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragEndListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Share Plugin using npm\nDESCRIPTION: Installs the `@capacitor/share` package using npm and then syncs the Capacitor project to update native dependencies. This command is necessary to add the plugin to your Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/share.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/share\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Functionality in TypeScript\nDESCRIPTION: Provides a basic implementation structure for the `openMap` method within the plugin's web platform class (`src/web.ts`). This asynchronous function receives location data and is intended to contain the web-specific logic.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync openMap(location: { latitude: number, longitude: number}): Promise<void> {\n  // logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorConfig TypeScript Interface for Configuration Options\nDESCRIPTION: A detailed TypeScript interface that defines all the configuration options available in Capacitor, including core settings and platform-specific options for Android and iOS. Each property includes JSDoc comments describing its purpose, version introduced, and default values where applicable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CapacitorConfig {\n  /**\n   * The unique identifier of your packaged app.\n   *\n   * This is also known as the Bundle ID in iOS and the Application ID in\n   * Android. It must be in reverse domain name notation, generally\n   * representing a domain name that you or your company owns.\n   *\n   * @since 1.0.0\n   */\n  appId?: string;\n\n  /**\n   * The human-friendly name of your app.\n   *\n   * This should be what you'd see in the App Store, but can be changed after\n   * within each native platform after it is generated.\n   *\n   * @since 1.0.0\n   */\n  appName?: string;\n\n  /**\n   * The directory of your compiled web assets.\n   *\n   * This directory should contain the final `index.html` of your app.\n   *\n   * @since 1.0.0\n   */\n  webDir?: string;\n\n  /**\n   * Whether to copy the Capacitor runtime bundle or not.\n   *\n   * If your app is not using a bundler, set this to `true`, then Capacitor\n   * will create a `capacitor.js` file that you'll need to add as a script in\n   * your `index.html` file.\n   *\n   * @since 1.0.0\n   * @default false\n   */\n  bundledWebRuntime?: boolean;\n\n  /**\n   * Hide or show the native logs for iOS and Android.\n   *\n   * @since 2.1.0\n   * @deprecated 3.0.0\n   * @default false\n   */\n  hideLogs?: boolean;\n\n  /**\n   * The build configuration (as defined by the native app) under which Capacitor\n   * will send statements to the log system. This applies to log statements in\n   * native code as well as statements redirected from JavaScript (`console.debug`,\n   * `console.error`, etc.). Enabling logging will let statements render in the\n   * Xcode and Android Studio windows but can leak information on device if enabled\n   * in released builds.\n   *\n   * 'none' = logs are never produced\n   * 'debug' = logs are produced in debug builds but not production builds\n   * 'production' = logs are always produced\n   *\n   * @since 3.0.0\n   * @default debug\n   */\n  loggingBehavior?: 'none' | 'debug' | 'production';\n\n  /**\n   * User agent of Capacitor Web View.\n   *\n   * @since 1.4.0\n   */\n  overrideUserAgent?: string;\n\n  /**\n   * String to append to the original user agent of Capacitor Web View.\n   *\n   * This is disregarded if `overrideUserAgent` is used.\n   *\n   * @since 1.4.0\n   */\n  appendUserAgent?: string;\n\n  /**\n   * Background color of the Capacitor Web View.\n   *\n   * @since 1.1.0\n   */\n  backgroundColor?: string;\n\n  android?: {\n    /**\n     * Specify a custom path to the native Android project.\n     *\n     * @since 3.0.0\n     * @default android\n     */\n    path?: string;\n\n    /**\n     * User agent of Capacitor Web View on Android.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for Android.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for Android.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Enable mixed content in the Capacitor Web View for Android.\n     *\n     * [Mixed\n     * content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content)\n     * is disabled by default for security. During development, you may need to\n     * enable it to allow the Web View to load files from different schemes.\n     *\n     * **This is not intended for use in production.**\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    allowMixedContent?: boolean;\n\n    /**\n     * This enables a simpler keyboard which may have some limitations.\n     *\n     * This will capture JS keys using an alternative\n     * [`InputConnection`](https://developer.android.com/reference/android/view/inputmethod/InputConnection).\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    captureInput?: boolean;\n\n    /**\n     * Always enable debuggable web content.\n     *\n     * This is automatically enabled during development.\n     *\n     * @since 1.0.0\n     * @default false\n     */\n    webContentsDebuggingEnabled?: boolean;\n\n    /**\n     * Hide or show the native logs for Android.\n     *\n     * Overrides global `hideLogs` option.\n     *\n     * @since 2.1.0\n     * @deprecated 3.0.0\n     * @default false\n     */\n    hideLogs?: boolean;\n\n    /**\n     * The build configuration under which Capacitor will generate logs on Android.\n     *\n     * Overrides global `loggingBehavior` option.\n     *\n     * @since 3.0.0\n     * @default debug\n     */\n    loggingBehavior?: 'none' | 'debug' | 'production';\n\n    /**\n     * Allowlist of plugins to include during `npx cap sync` for Android.\n     *\n     * Overrides global `includePlugins` option.\n     *\n     * @since 3.0.0\n     */\n    includePlugins?: string[];\n\n    /**\n     * Android flavor to use.\n     *\n     * If the app has flavors declared in the `build.gradle`\n     * configure the flavor you want to run with `npx cap run` command.\n     *\n     * @since 3.1.0\n     */\n    flavor?: string;\n\n    /**\n     * Whether to give the webview initial focus.\n     *\n     * @since 3.5.1\n     * @default true\n     */\n    initialFocus?: boolean;\n\n    /**\n     * The minimum supported webview version on Android supported by your app.\n     *\n     * The minimum supported cannot be lower than version `55`, which is required for Capacitor.\n     *\n     * If the device uses a lower WebView version, an error message will be shown on Logcat.\n     * If `server.errorPath` is configured, the WebView will redirect to that file, so can be\n     * used to show a custom error.\n     *\n     * @since 4.0.0\n     * @default 60\n     */\n    minWebViewVersion?: number;\n\n    buildOptions?: {\n      /**\n       * Path to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePath?: string;\n\n      /**\n       * Password to your keystore\n       *\n       * @since 4.4.0\n       */\n      keystorePassword?: string;\n\n      /**\n       * Alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAlias?: string;\n\n      /**\n       * Password for the alias in the keystore to use\n       *\n       * @since 4.4.0\n       */\n      keystoreAliasPassword?: string;\n\n      /**\n       * Bundle type for your release build\n       *\n       * @since 4.4.0\n       * @default \"AAB\"\n       */\n      releaseType?: 'AAB' | 'APK';\n    };\n\n    /**\n     * Use legacy [addJavascriptInterface](https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String))\n     * instead of the new and more secure [addWebMessageListener](https://developer.android.com/reference/androidx/webkit/WebViewCompat#addWebMessageListener(android.webkit.WebView,java.lang.String,java.util.Set%3Cjava.lang.String%3E,androidx.webkit.WebViewCompat.WebMessageListener))\n     *\n     * @since 4.5.0\n     * @default false\n     */\n    useLegacyBridge: boolean;\n  };\n\n  ios?: {\n    /**\n     * Specify a custom path to the native iOS project.\n     *\n     * @since 3.0.0\n     * @default ios\n     */\n    path?: string;\n\n    /**\n     * iOS build scheme to use.\n     *\n     * Usually this matches your app's target in Xcode. You can use the\n     * following command to list schemes:\n     *\n     * ```shell\n     * xcodebuild -workspace ios/App/App.xcworkspace -list\n     * ```\n     *\n     * @since 3.0.0\n     * @default App\n     */\n    scheme?: string;\n\n    /**\n     * User agent of Capacitor Web View on iOS.\n     *\n     * Overrides global `overrideUserAgent` option.\n     *\n     * @since 1.4.0\n     */\n    overrideUserAgent?: string;\n\n    /**\n     * String to append to the original user agent of Capacitor Web View for iOS.\n     *\n     * Overrides global `appendUserAgent` option.\n     *\n     * This is disregarded if `overrideUserAgent` is used.\n     *\n     * @since 1.4.0\n     */\n    appendUserAgent?: string;\n\n    /**\n     * Background color of the Capacitor Web View for iOS.\n     *\n     * Overrides global `backgroundColor` option.\n     *\n     * @since 1.1.0\n     */\n    backgroundColor?: string;\n\n    /**\n     * Configure the scroll view's content inset adjustment behavior.\n     *\n     * This will set the\n     * [`contentInsetAdjustmentBehavior`](https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 2.0.0\n     * @default never\n     */\n    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';\n\n    /**\n     * Configure whether the scroll view is scrollable.\n     *\n     * This will set the\n     * [`isScrollEnabled`](https://developer.apple.com/documentation/uikit/uiscrollview/1619395-isscrollenabled)\n     * property on the Web View's\n     * [`UIScrollView`](https://developer.apple.com/documentation/uikit/uiscrollview).\n     *\n     * @since 1.0.0\n     */\n    scrollEnabled?: boolean;\n\n    /**\n     * Configure custom linker flags for compiling Cordova plugins.\n     *\n     * @since 1.0.0\n     * @default []\n     */\n    cordovaLinkerFlags?: string[];\n\n    /**\n     * Allow destination previews when pressing on links.\n     *\n     * This will set the\n     * [`allowsLinkPreview`](https://developer.apple.com/documentation/webkit/wkwebview/1415000-allowslinkpreview)\n     * property on the Web View, instead of using the default value.\n     *\n     * @since 2.0.0\n     */\n    allowsLinkPreview?: boolean;\n\n    /**\n     * Hide or show the native logs for iOS.\n     *\n     * Overrides global `hideLogs` option.\n     *\n     * @since 1.1.0\n     * @deprecated 3.0.0\n     * @default false\n     */\n    hideLogs?: boolean;\n\n    /**\n\n\n```\n\n----------------------------------------\n\nTITLE: Applying Variables in Android Build Gradle\nDESCRIPTION: Apply the variables.gradle file in the main Android build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n         classpath 'com.android.tools.build:gradle:4.1.1'\n         classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n }\n\n+apply from: \"variables.gradle\"\n\n allprojects {\n     repositories {\n         google()\n         jcenter()\n\n```\n\n----------------------------------------\n\nTITLE: Applying Android Common Variables\nDESCRIPTION: Diff showing how to apply the common variables in the android/build.gradle file. This step is necessary after creating the variables.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n         classpath 'com.android.tools.build:gradle:4.1.1'\n         classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n }\n\n+apply from: \"variables.gradle\"\n\n allprojects {\n     repositories {\n         google()\n         jcenter()\n\n```\n\n----------------------------------------\n\nTITLE: Setting Bounds Changed Listener in TypeScript\nDESCRIPTION: Sets a listener for when the map bounds change. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnBoundsChangedListener(callback?: MapListenerCallback<CameraIdleCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: List Installed Plugins Using Capacitor CLI\nDESCRIPTION: Command to list all installed Cordova and Capacitor plugins. Optionally accepts a platform parameter (android or ios) to filter results for a specific platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls [platform]\n```\n\n----------------------------------------\n\nTITLE: Triggering Haptic Notification in TypeScript\nDESCRIPTION: Function to trigger a haptic notification feedback with optional notification type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/haptics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnotification(options?: NotificationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Local Plugin Dependency in package.json for Capacitor Project\nDESCRIPTION: This JSON snippet shows how to include a local plugin as a dependency in the project's package.json file. It uses a file path to link the plugin for local testing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"echo\": \"file:../path/to/echo\",\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Importance type alias, representing the importance level of a notification channel on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: Defining Trapeze Configuration Script in package.json (JSON)\nDESCRIPTION: Adds an npm script named 'cap-config' to run Trapeze's configuration tool with a specified YAML config file. Requires that trapeze be installed as a dependency or globally. Input is a package.json scripts object; output is the ability to run configuration via npm run. Constraints: YAML file (config.yaml) must exist and be properly formatted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/automated-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"cap-config\": \"trapeze run config.yaml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Idle Event Listener in TypeScript\nDESCRIPTION: Configures a listener for camera idle events with a callback receiving CameraIdleCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCameraIdleListener(callback?: MapListenerCallback<CameraIdleCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating ScreenOrientationPlugin for Orientation Detection\nDESCRIPTION: This code updates the ScreenOrientationPlugin class to use the ScreenOrientation implementation for getting the current orientation type. It includes the load() method for initialization.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugins.ScreenOrientation;\n\nimport com.getcapacitor.JSObject;\n/* Remaining imports omitted for brevity */\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   private ScreenOrientation implementation;\n\n   @Override\n   public void load() {\n       implementation = new ScreenOrientation(getActivity());\n   }\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       JSObject ret = new JSObject();\n       String type = implementation.getCurrentOrientationType();\n       ret.put(\"type\", type);\n       call.resolve(ret);\n   }\n\n   /* Remaining code omitted for brevity */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing StatusBar Capacitor Plugin\nDESCRIPTION: Commands to install the StatusBar Capacitor plugin and synchronize the native project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/status-bar\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Providing TypeScript Type Definitions for Plugin Configuration\nDESCRIPTION: Example showing how to extend the PluginsConfig interface to provide typing and documentation for a plugin's configuration values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    MyCoolPlugin?: {\n      /**\n       * Override the cool theme style if your app doesn't support light/dark theme changes.\n       *\n       * @since 1.0.0\n       * @example \"light\"\n       */\n      style?: 'dark' | 'light';\n\n      /**\n       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.\n       *\n       * @since 1.0.0\n       * @default #ffffff\n       * @example \"#FF9900\"\n       */\n      iconColor?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Capacitor Project\nDESCRIPTION: Command to sync the Capacitor project after adding a new plugin. This updates the iOS project with the newly added plugin and its SPM dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Complete Android Activity Configuration\nDESCRIPTION: Full XML configuration for the Android activity including both main intent filter and deep linking intent filter\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n    android:name=\"com.netkosoft.beerswift.MainActivity\"\n    android:label=\"@string/title_activity_main\"\n    android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n    android:launchMode=\"singleTask\">\n\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Installing App Launcher Plugin\nDESCRIPTION: Commands to install the AppLauncher Capacitor plugin and sync the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app-launcher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app-launcher@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Plugin Functionality in TypeScript\nDESCRIPTION: Demonstrates how to implement the web version of a plugin method in the src/web.ts file. The example shows implementing the openMap method for the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n import type {\n   EchoPlugin,\n+  OpenMapOptions,\n } from './definitions';\n\n export class EchoWeb extends WebPlugin implements EchoPlugin {\n   // other methods\n\n+  async openMap(location: OpenMapOptions): Promise<void> {\n+    // logic here\n+  }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin Version for Android\nDESCRIPTION: Diff showing the update of the Gradle plugin version in the Android build.gradle file for Capacitor 7.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:8.2.1'\n+       classpath 'com.android.tools.build:gradle:8.7.2'\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 3 CLI and Core Packages\nDESCRIPTION: Command to update Capacitor CLI and Core packages to the latest 3.x versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@latest-3 @capacitor/core@latest-3\n```\n\n----------------------------------------\n\nTITLE: Publishing the Plugin to npm (Shell Script)\nDESCRIPTION: Command used to publish the plugin to the npm registry. This builds the JavaScript bundle and pushes the package for public/installable use in other Capacitor apps. Should be executed from the plugin's directory and requires proper npm authentication.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n\n```\n\n----------------------------------------\n\nTITLE: Accessibility API Method: isScreenReaderEnabled\nDESCRIPTION: TypeScript method signature for checking if a screen reader is enabled on the device. Returns a Promise with a ScreenReaderEnabledResult that contains a boolean value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/accessibility.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisScreenReaderEnabled() => Promise<ScreenReaderEnabledResult>\n```\n\n----------------------------------------\n\nTITLE: Verifying CocoaPods Installation\nDESCRIPTION: Command to verify the installation and version of CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npod --version\n# 1.12.1\n```\n\n----------------------------------------\n\nTITLE: Android Plugin Annotation Update\nDESCRIPTION: Shows how to migrate from @NativePlugin to @CapacitorPlugin annotation, including changes to permission handling and request codes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-@NativePlugin(\n+@CapacitorPlugin(\n     name = \"FooBar\",\n-    requestCodes = {\n-        FooBarPlugin.REQUEST_SOME_METHOD,\n-        FooBarPlugin.REQUEST_SOME_OTHER_METHOD\n-    },\n-    permissionRequestCode = FooBarPlugin.REQUEST_ALL_PERMISSIONS,\n-    permissions = { Manifest.permission.FOO, Manifest.permission.BAR }\n+    permissions = {\n+        @Permission(strings = { Manifest.permission.FOO }, alias = \"foo\"),\n+        @Permission(strings = { Manifest.permission.BAR }, alias = \"bar\")\n+    })\n )\n public class FooBarPlugin extends Plugin {\n     static final int REQUEST_SOME_METHOD = 10051;\n     static final int REQUEST_SOME_OTHER_METHOD = 10052;\n```\n\n----------------------------------------\n\nTITLE: Generating Assets for All Platforms\nDESCRIPTION: Command to generate assets for all supported platforms (iOS, Android, and PWA) using the capacitor-assets CLI tool.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx capacitor-assets generate\n```\n\n----------------------------------------\n\nTITLE: Installing In-App Purchase Plugin for Capacitor\nDESCRIPTION: Installs the cordova-plugin-purchase plugin and updates Capacitor to enable in-app purchase functionality in your application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/in-app-purchases.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-purchase\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Mapping Orientation Type String to UIInterfaceOrientationMask (Swift)\nDESCRIPTION: This private Swift function within the `ScreenOrientation` class converts a string representation of an orientation type (e.g., \"landscape-primary\") into its corresponding `UIInterfaceOrientationMask` enum value. This mask is used to inform iOS about the desired orientation restrictions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToMask(_ orientationType: String) -> UIInterfaceOrientationMask {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientationMask.landscapeLeft\n  case \"landscape-secondary\":\n    return UIInterfaceOrientationMask.landscapeRight\n  case \"portrait-secondary\":\n    return UIInterfaceOrientationMask.portraitUpsideDown\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientationMask.portrait\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Native Platform with Capacitor CLI\nDESCRIPTION: Command to add a native platform project (Android or iOS) to your Capacitor app. Requires specifying the platform name as an argument. For iOS, an optional package manager can be specified.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add <platform>\n```\n\n----------------------------------------\n\nTITLE: Defining CapacitorCookies clearAllCookies Method Signature\nDESCRIPTION: This TypeScript signature defines the `clearAllCookies` method of the Capacitor Cookies API. It takes no arguments and returns a Promise that resolves when all cookies stored by the application on the device have been cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclearAllCookies() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Web Implementation with registerPlugin (TypeScript)\nDESCRIPTION: Registers the web-specific implementation of the ScreenOrientation plugin using Capacitor's registerPlugin method. This pattern enables conditional loading and instantiation of platform-specific implementations, ensuring the correct class is used at runtime. The snippet imports and creates an instance of ScreenOrientationWeb only for the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n  {\n    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Google Maps iOS Utils Pod\nDESCRIPTION: Shows the commands to navigate to the iOS app directory and run `pod update` specifically for the `Google-Maps-iOS-Utils` pod. This ensures the correct version is installed after removing a previous workaround from the Podfile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ios/App\npod update Google-Maps-iOS-Utils\n```\n\n----------------------------------------\n\nTITLE: Getting Device Language Tag using Capacitor Device Plugin\nDESCRIPTION: Provides the TypeScript signature for the `getLanguageTag()` method. This asynchronous function returns a Promise that resolves to a `LanguageTag` object, containing the device's currently configured language locale tag (e.g., 'en-US').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageTag() => Promise<LanguageTag>\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in iOS Swift\nDESCRIPTION: Example of accessing plugin configuration values in the native iOS implementation using the getConfig() utility method provided by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let style = getConfig().getString(\"style\") {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Hide Splash Screen Method Definition\nDESCRIPTION: TypeScript method signature for hiding the splash screen. Takes optional HideOptions parameter to configure fade out duration behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: HideOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Markers from Map\nDESCRIPTION: Removes multiple markers from the map using an array of marker IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarkers(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router for Deep Linking - TypeScript\nDESCRIPTION: Initializes a new VueRouter instance with an empty routes array as a placeholder. This sets up the router instance needed for handling client-side navigation in response to deep link events. It's expected that actual routes would be added as required by the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Capacitor Watch Plugin Installation\nDESCRIPTION: Simplified installation commands for the Capacitor Watch plugin, suitable for projects with minimal setup requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/watch\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/app Plugin\nDESCRIPTION: Commands to install the @capacitor/app plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Method in ScreenOrientationPlugin\nDESCRIPTION: Implementation of the lock method in the plugin class, which validates input and calls the implementation class.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void lock(PluginCall call) {\n   String orientationType = call.getString(\"orientation\");\n   if(orientationType == null) {\n       call.reject(\"Input option 'orientation' must be provided.\");\n       return;\n   }\n   implementation.lock(orientationType);\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CapacitorBackgroundRunner in AppDelegate - Swift\nDESCRIPTION: Imports the CapacitorBackgroundRunner module to enable background processing features on iOS. Place this import beneath existing Capacitor imports within AppDelegate.swift. No external parameters; integrates background runner APIs for event handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport CapacitorBackgroundRunner\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity for Automatic Plugin Loading in Java\nDESCRIPTION: Updates the MainActivity.java file to remove manual plugin registration and switch to automatic plugin loading in Capacitor 3.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_8\n\nLANGUAGE: Diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-\n-        // Initializes the Bridge\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n-            // Additional plugins you've installed go here\n-            add(Plugin1.class);\n-            add(Plugin2.class);\n-        }});\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Defining the `removeAllListeners` Method Signature (TypeScript)\nDESCRIPTION: This TypeScript signature specifies the `removeAllListeners` method provided by the Motion plugin. This asynchronous function takes no arguments and returns a Promise that resolves with `void` once all listeners attached to the plugin have been successfully removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/motion.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Maven Repository from Android Build\nDESCRIPTION: Removes the unnecessary Maven repository entry from the app-level build.gradle since Capacitor is now distributed via npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n repositories {\n-    maven {\n-        url \"https://dl.bintray.com/ionic-team/capacitor\"\n-    }\n     flatDir {\n         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor HTTP Plugin in TypeScript - TypeScript\nDESCRIPTION: This TypeScript configuration demonstrates enabling the Capacitor HTTP plugin within a 'capacitor.config.ts' file. It imports types from '@capacitor/cli' and defines the configuration object, setting 'CapacitorHttp.enabled' to true. After editing, the config is exported for use by the Capacitor CLI. The code requires '@capacitor/cli' as a prerequisite, and outputs a valid Capacitor configuration object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    CapacitorHttp: {\\n      enabled: true,\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Removing USE_PUSH Condition in iOS AppDelegate\nDESCRIPTION: If using push notifications, remove the `#if USE_PUSH` and `#endif` preprocessor directives surrounding the push notification registration methods (`didRegisterForRemoteNotificationsWithDeviceToken`, `didFailToRegisterForRemoteNotificationsWithError`) in `ios/App/App/AppDelegate.swift`. This condition is no longer necessary in Capacitor 3.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n\n-    #if USE_PUSH\n \n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n     }\n \n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n     }\n \n-#endif\n```\n\n----------------------------------------\n\nTITLE: Installing PWA Elements via npm\nDESCRIPTION: Command to install the @ionic/pwa-elements package using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/pwa-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Mocking Capacitor Storage Plugin in Jasmine Tests\nDESCRIPTION: Example of mocking the Storage plugin methods in Jasmine tests using spyOn with custom return values for different method arguments and verifying method calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/mocking-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    spyOn(Storage, 'get');\n    (Storage.get as any)\n      .withArgs({ key: 'firstName' })\n      .and.returnValue(Promise.resolve({ value: 'Jason' }));\n    (Storage.get as any)\n      .withArgs({ key: 'lastName' })\n      .and.returnValue(Promise.resolve({ value: 'Jones' }));\n\n    fixture.detectChanges();\n    await fixture.whenRenderingDone();\n\n    expect(component.firstName).toEqual('Jason');\n    expect(component.lastName).toEqual('Jones');\n  });\n\n  it('clears the storage', () => {\n    spyOn(Storage, 'clear');\n    click(clear.nativeElement);\n    fixture.detectChanges();\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Building Ionic Application\nDESCRIPTION: Command to build the Ionic project, creating the www folder required by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Settings with JSON5\nDESCRIPTION: Complete example of a capacitor.config.json configuration file showing all available options including app details, web directory settings, server configuration, and platform-specific settings for iOS and Android. Includes detailed comments explaining each configuration option.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/config.md#2025-04-23_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"appId\": \"com.company.appname\",\n  \"appName\": \"Capacitor Kitchen Sink\",\n  \"webDir\": \"www\",\n  \"npmClient\": \"npm\",\n  \"bundledWebRuntime\": false,\n  \"windowsAndroidStudioPath\": \"C:\\\\Program Files\\Android\\Android Studio\\binstudio64.exe\",\n  \"hideLogs\": true,\n  \"server\": {\n    \"url\": \"http://192.168.1.33:8100\",\n    \"hostname\": \"app\",\n    \"iosScheme\": \"ionic\",\n    \"androidScheme\": \"http\",\n    \"allowNavigation\": [\"example.org\", \"*.example.org\", \"192.0.2.1\"]\n  },\n  \"overrideUserAgent\": \"my custom user agent\",\n  \"appendUserAgent\": \"string to append\",\n  \"backgroundColor\": \"#ffffff\",\n  \"android\": {\n    \"overrideUserAgent\": \"my custom user agent for Android\",\n    \"appendUserAgent\": \"string to append for Android\",\n    \"backgroundColor\": \"#ffffff\",\n    \"allowMixedContent\": true,\n    \"captureInput\": true,\n    \"webContentsDebuggingEnabled\": true,\n    \"hideLogs\": true\n  },\n  \"ios\": {\n    \"overrideUserAgent\": \"my custom user agent for iOS\",\n    \"appendUserAgent\": \"string to append for iOS\",\n    \"backgroundColor\": \"#ffffff\",\n    \"contentInset\": \"always\",\n    \"cordovaSwiftVersion\": \"4.2\",\n    \"minVersion\": \"11.3\",\n    \"cordovaLinkerFlags\": [\"-ObjC\"],\n    \"allowsLinkPreview\": false,\n    \"hideLogs\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Method in Java\nDESCRIPTION: Java implementation of a callback method for Android platform using the @PluginMethod annotation with RETURN_CALLBACK return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)\npublic void method3(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing App Launcher Capacitor Plugin\nDESCRIPTION: Commands to install the App Launcher plugin and synchronize the native projects with the updated plugin configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app-launcher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app-launcher\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: App State and URL Handling Example\nDESCRIPTION: TypeScript example demonstrating how to use the App plugin to listen for app state changes, URL opens, and restored results, as well as checking the app launch URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from '@capacitor/app';\n\nApp.addListener('appStateChange', ({ isActive }) => {\n  console.log('App state changed. Is active?', isActive);\n});\n\nApp.addListener('appUrlOpen', data => {\n  console.log('App opened with URL:', data);\n});\n\nApp.addListener('appRestoredResult', data => {\n  console.log('Restored state:', data);\n});\n\nconst checkAppLaunchUrl = async () => {\n  const { url } = await App.getLaunchUrl();\n\n  console.log('App opened with URL: ' + url);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock and Unlock Methods in ScreenOrientation\nDESCRIPTION: This snippet demonstrates the implementation of lock and unlock methods in the ScreenOrientation class for controlling screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate int fromOrientationTypeToEnum(String orientationType) {\n   switch (orientationType) {\n       case \"landscape-primary\":\n           return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n       case \"landscape-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;\n       case \"portrait-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;\n       default:\n           // Case: portrait-primary\n           return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n   }\n}\n\npublic void lock(String orientationType) {\n   int orientationEnum = fromOrientationTypeToEnum(orientationType);\n   activity.setRequestedOrientation(orientationEnum);\n}\n\npublic void unlock() {\n   activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with PluginCall.reject in Capacitor Java\nDESCRIPTION: This snippet demonstrates the use of the reject method on PluginCall for error handling, optionally passing message, error code, and exception details. It is used to forward error status and debugging information back to the client. Dependencies include the Capacitor PluginCall API and exception handling. The method accepts an exception object for more granular error reporting.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.reject(exception.getLocalizedMessage(), null, exception);\n```\n\n----------------------------------------\n\nTITLE: Updating FileProvider Paths for Android\nDESCRIPTION: Diff showing the addition of cache path to the FileProvider configuration in file_paths.xml to avoid permission errors when editing gallery images.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <external-path name=\"my_images\" path=\".\" />\n+    <cache-path name=\"my_cache_images\" path=\".\" />\n </paths>\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacitor Plugin Lifecycle Method\nDESCRIPTION: This code shows how to implement the load() method that runs when the plugin is first loaded, which is useful for setting up Notification Center event handlers or other initialization tasks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\noverride public func load() {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleEvery Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias for ScheduleEvery, representing the available scheduling intervals for recurring notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScheduleEvery = 'year' | 'month' | 'two-weeks' | 'week' | 'day' | 'hour' | 'minute' | 'second';\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor for Script Include in JSON\nDESCRIPTION: JSON configuration to enable bundled web runtime for Capacitor. This is necessary when using Capacitor as a script include in projects without a build system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundledWebRuntime\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining showActions Method in Action Sheet Plugin - TypeScript\nDESCRIPTION: This snippet declares the showActions API method, detailing its TypeScript function signature for presenting an Action Sheet modal with selectable options. The method accepts a ShowActionsOptions parameter (containing title, message, and options array) and returns a Promise that resolves to a ShowActionsResult (an object with the zero-based index of a selected option). Inputs: ShowActionsOptions; Output: Promise of ShowActionsResult. Prerequisite: @capacitor/action-sheet must be installed and imported into the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshowActions(options: ShowActionsOptions) => Promise<ShowActionsResult>\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in strings.xml\nDESCRIPTION: Shows how to change the app name by modifying the app_name value in the strings.xml resource file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"app_name\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager for macOS\nDESCRIPTION: Bash command to install Homebrew, which is needed for installing CocoaPods for iOS development with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing requestPermissions using Block-based API in Swift\nDESCRIPTION: Demonstrates how to implement the `requestPermissions` method when the underlying iOS framework provides a block-based API for requesting authorization (e.g., `AVCaptureDevice` for camera/video access). The request is made, and upon completion, the plugin's own `checkPermissions` method is called within the completion handler to return the updated status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in\n        self?.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor 3 CLI and Core via npm (Bash)\nDESCRIPTION: This command installs the latest version 3 of both @capacitor/cli and @capacitor/core packages globally for your project using npm. It is required as a first step before upgrading any configuration or plugins for Capacitor 3. Ensure that you have NodeJS 12+ installed; this command must be run in your project's root directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@latest-3 @capacitor/core@latest-3\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Community Admob Plugin\nDESCRIPTION: This code snippet demonstrates how to install the Capacitor Community Admob plugin using npm and update the Capacitor project. It's a prerequisite step for integrating Google Admob advertisements into a Capacitor app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/ads.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/admob\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationScheduleOptions Interface in Markdown\nDESCRIPTION: A markdown table detailing the properties of the NotificationScheduleOptions interface. It includes property names, types, descriptions, and the version since which each property has been available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                   | Type                 | Description| Since |\n| ---------------------- | -------------------- || ----- |\n| **`id`**               | <code>number</code>  | The notification identifier. On Android it's a 32-bit int. So the value should be between -2147483648 and 2147483647 inclusive.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | 1.0.0 |\n| **`title`**            | <code>string</code>  | The title of the notification| 1.0.0 |\n| **`body`**             | <code>string</code>  | The body of the notification, shown below the title| 1.0.0 |\n| **`scheduleAt`**       | <code>Date</code>    | Date to send this notification| 1.0.0 |\n| **`sound`**            | <code>string</code>  | Name of the audio file to play when this notification is displayed. Include the file extension with the filename. On iOS, the file should be in the app bundle. On Android, the file should be in res/raw folder. Recommended format is `.wav` because is supported by both iOS and Android. Only available for iOS and Android &lt; 26. For Android 26+ use channelId of a channel configured with the desired sound. If the sound file is not found, (i.e. empty string or wrong name) the default system notification sound will be used. If not provided, it will produce the default sound on Android and no sound on iOS. | 1.0.0 |\n| **`actionTypeId`**     | <code>string</code>  | Associate an action type with this notification| 1.0.0 |\n| **`threadIdentifier`** | <code>string</code>  | Used to group multiple notifications. Sets `threadIdentifier` on the [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent). Only available for iOS.                                                                                                                                                                                                                                                                                                                                                                                                        | 1.0.0 |\n| **`summaryArgument`**  | <code>string</code>  | The string this notification adds to the category's summary format string. Sets `summaryArgument` on the [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent). Only available for iOS.                                                                                                                                                                                                                                                                                                                                                                    | 1.0.0 |\n| **`group`**            | <code>string</code>  | Used to group multiple notifications. Calls `setGroup()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                                           | 1.0.0 |\n| **`groupSummary`**     | <code>string</code>  | If true, this notification becomes the summary for a group of notifications. Calls `setGroupSummary()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android when using `group`.                                                                                                                                                                                                                                                                                                                          | 1.0.0 |\n| **`extra`**            | <code>any</code>     | Set extra data to store within this notification| 1.0.0 |\n| **`ongoing`**          | <code>boolean</code> | If true, the notification can't be swiped away. Calls `setOngoing()` on [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder) with the provided value. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                               | 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Capacitor Camera API: pickImages Method Signature\nDESCRIPTION: TypeScript signature for the `pickImages` method. This allows users to select multiple images from the photo gallery, configured via `GalleryImageOptions`. On iOS 13 and older, it only permits selecting a single picture. It returns a Promise resolving to a `GalleryPhotos` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npickImages(options: GalleryImageOptions) => Promise<GalleryPhotos>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Serialization in Swift Capacitor Plugin\nDESCRIPTION: Shows how to configure a Capacitor plugin to opt-out of automatic date serialization. This affects how JavaScript Date objects are passed to the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\noverride func load() {\n    shouldStringifyDatesInCalls = false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating android:configChanges in AndroidManifest.xml\nDESCRIPTION: This diff shows the modification needed in `android/app/src/main/AndroidManifest.xml`. It adds `smallestScreenSize`, `screenLayout`, and `uiMode` to the `android:configChanges` attribute of the main activity to prevent unnecessary app restarts during certain configuration changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n         <activity\n-            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n+            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode\"\n             android:name=\"com.example.app\"\n             android:label=\"@string/title_activity_main\"\n             android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n             android:launchMode=\"singleTask\">\n\n```\n\n----------------------------------------\n\nTITLE: Integrating the Deep Link Listener Component in a React App\nDESCRIPTION: Demonstrates placing the `AppUrlListener` component within the `IonReactRouter` (or a similar router setup) in the main React `App` component. This ensures the listener is active and has access to the routing context provided by `react-router-dom`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst App: React.FC = () => {\n  return (\n    <IonApp>\n      <IonReactRouter>\n        <AppUrlListener></AppUrlListener>\n        <IonRouterOutlet>\n          <Route path=\"/home\" component={Home} exact={true} />\n          <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Version\nDESCRIPTION: Configuration for setting minimum Android SDK version to 26 in variables.gradle file\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/barcode-scanner.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\next {\n    minSdkVersion = 26\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Pods with Capacitor\nDESCRIPTION: Command to update CocoaPods dependencies when encountering 'Sandbox not in sync with the Podfile.lock' error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Attachment Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface for notification attachments that includes an identifier, URL and options. Used for adding media attachments to notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Attachment {\n  id: string;\n  url: string;\n  options: AttachmentOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Build Script for Rollup Configuration in package.json\nDESCRIPTION: Updates the build script to use the new rollup configuration file with .mjs extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-    \"build\": \"npm run clean && npm run docgen && tsc && rollup -c rollup.config.js\",\n+    \"build\": \"npm run clean && npm run docgen && tsc && rollup -c rollup.config.mjs\",\n```\n\n----------------------------------------\n\nTITLE: Author Element in Cordova config.xml\nDESCRIPTION: Example of the author element in Cordova's config.xml, which can be configured in package.json for Capacitor but is not used by the framework.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<author email=\"email@test.com\" href=\"http://ionicframework.com/\">Ionic Framework Team</author>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Web Runtime\nDESCRIPTION: JSON configuration to enable bundled web runtime in Capacitor config file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"bundledWebRuntime\": true\n```\n\n----------------------------------------\n\nTITLE: Updating Cordova Plugins in Capacitor\nDESCRIPTION: Commands to update a Cordova plugin to a specific version and sync the changes with the native project in Capacitor. This involves using npm to update the plugin and then running the Capacitor sync command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/cordova.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name@version\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Name in Capacitor Android Apps\nDESCRIPTION: Set the Activity name to match the app name in strings.xml. This is recommended for apps with only one main activity running the web content.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"title_activity_main\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Setting the Status Bar Background Color (TypeScript API - Android Only)\nDESCRIPTION: This TypeScript signature defines the `setBackgroundColor` method, used to change the background color of the status bar. It requires an options object conforming to `BackgroundColorOptions` (containing a hex color string). This method is only functional on the Android platform and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetBackgroundColor(options: BackgroundColorOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Capacitor App with Plugin Changes\nDESCRIPTION: Shows the `npx cap sync` command, which updates the native Android and iOS projects within a Capacitor application to recognize newly added or updated plugins. The example output indicates successful detection of the 'echo' plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\nLANGUAGE: bash\nCODE:\n```\n[info] Found 1 Capacitor plugin for android:\n    - echo (0.0.1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Plugin in TypeScript\nDESCRIPTION: TypeScript configuration example for the Keyboard plugin in capacitor.config.ts\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/keyboard.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\nimport { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: KeyboardResize.Body,\n      style: KeyboardStyle.Dark,\n      resizeOnFullScreen: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Asset Directory Structure\nDESCRIPTION: Required folder structure for icon and splash screen source images. Shows the necessary file names and organization for the assets directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nassets/\n├── icon-only.png\n├── icon-foreground.png\n├── icon-background.png\n├── splash.png\n└── splash-dark.png\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables for Capacitor 5\nDESCRIPTION: Updated minimum values for Android project variables in variables.gradle file, including SDK versions and dependency versions required for Capacitor 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 33\ntargetSdkVersion = 33\nandroidxActivityVersion = '1.7.0'\nandroidxAppCompatVersion = '1.6.1'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.10.0'\nandroidxFragmentVersion = '1.5.6'\ncoreSplashScreenVersion = '1.0.0'\nandroidxWebkitVersion = '1.6.1'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.5'\nandroidxEspressoCoreVersion = '3.5.1'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Declaring a File-based Plugin Dependency in package.json\nDESCRIPTION: Illustrates how the plugin dependency will appear in a project's `package.json` after being installed from a local file path. This is automatically generated by npm and is not to be edited manually. Helps ensure the app uses the local plugin code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"echo\": \"file:../path/to/echo\",\n\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Copy Command\nDESCRIPTION: Command to copy web app build and Capacitor configuration files to native platform projects. The platform parameter is optional and can be either 'android' or 'ios'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy [platform]\n```\n\n----------------------------------------\n\nTITLE: Generating Capacitor Plugin Documentation\nDESCRIPTION: This bash command shows how to manually run the documentation generation script for a Capacitor plugin using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docgen\n```\n\n----------------------------------------\n\nTITLE: Defining MapListenerCallback Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for the callback function used in map event listeners. The function takes a generic parameter T and returns void.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n<code>(data: T): void</code>\n```\n\n----------------------------------------\n\nTITLE: Unlinking the Local Plugin from the App (Shell Script)\nDESCRIPTION: This command removes the local file-based plugin dependency from the app, effectively unlinking it from the project. Should be run from the app's root directory. Ensures future builds and syncs omit the local plugin code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall echo\n\n```\n\n----------------------------------------\n\nTITLE: mkdir API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `mkdir` method of the Capacitor Filesystem API. This asynchronous function creates a new directory based on the provided `MkdirOptions` and returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmkdir(options: MkdirOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring CapacitorHttp Plugin in JSON\nDESCRIPTION: Configuration example for the CapacitorHttp plugin in capacitor.config.json to enable patching of fetch and XMLHttpRequest.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorHttp\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Notification Channel - TypeScript\nDESCRIPTION: Creates a notification channel on Android O or newer (SDK 26+). Takes a Channel object as parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: Channel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Capacitor Plugin with Web Support in TypeScript\nDESCRIPTION: This code illustrates how to consume a custom Capacitor plugin within an application, ensuring the web implementation is correctly loaded. It imports `Plugins` from `@capacitor/core` and, crucially, imports the custom plugin package (`'my-plugin'`) directly to trigger the `registerWebPlugin` call. The plugin is then destructured from `Plugins` and its `echo` method is invoked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n// Import plugins from Capacitor Core\nimport { Plugins } from '@capacitor/core';\n// Import custom plugin package for web support too\nimport 'my-plugin';\n\n// Destructure custom plugin from core plugins\nconst { MyPlugin } = Plugins;\nawait MyPlugin.echo({\n  value: 'Hello from web!',\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Type Alias in TypeScript\nDESCRIPTION: Defines the Visibility type alias for specifying notification visibility on the lock screen, referencing Android developer documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Adding Network Permissions in AndroidManifest.xml\nDESCRIPTION: Demonstrates how to add network permissions to the AndroidManifest.xml file by including the ACCESS_NETWORK_STATE permission.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.getcapacitor.myapp\">\n    <activity>\n      <!-- other stuff -->\n    </activity>\n\n    <!-- More stuff -->\n\n    <!-- Your permissions -->\n\n    <!-- Network API -->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Documenting Toast Plugin Update in Markdown\nDESCRIPTION: Mentions that on Android 12 and newer, all toasts are displayed at the bottom of the screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### Toast\n\n- On Android 12 and newer all toasts are shown at the bottom.\n```\n\n----------------------------------------\n\nTITLE: Debugging CocoaPods Error Output\nDESCRIPTION: Error output showing a common CocoaPods installation issue on Apple Silicon devices, specifically related to FFI library errors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[error] Analyzing dependencies\n        /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi/library.rb:275: [BUG] Bus Error at 0x0000000000000000\n        ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]\n```\n\n----------------------------------------\n\nTITLE: Android Keep Alive Flag Setting\nDESCRIPTION: Code to set the keepAlive flag for multiple completions in Android. This allows the plugin call to persist for multiple resolve() calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.setKeepAlive(true);\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore Certificate with Keytool\nDESCRIPTION: This command creates a new keystore certificate for Android app signing. It generates a 2048-bit RSA key pair and a self-signed certificate, valid for 10000 days.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -v -keystore KEY-NAME.keystore -alias ALIAS -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Removing a Value from Storage in TypeScript\nDESCRIPTION: The remove function removes a value associated with a given key. This TypeScript method takes a RemoveOptions object with the key to remove and returns a Promise resolving when the item is removed. Requires @capacitor/storage. No value is returned.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremove(options: RemoveOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: CapacitorCookies API Method: deleteCookie\nDESCRIPTION: TypeScript declaration for the deleteCookie method that removes a cookie from the device. Accepts DeleteCookieOptions containing the URL and key of the cookie to delete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteCookie(options: DeleteCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Foreground Notification Options in JSON\nDESCRIPTION: Configures how push notifications are presented when the app is in the foreground on iOS using `capacitor.config.json`. The `presentationOptions` array specifies whether to show a badge, play a sound, or display an alert.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"PushNotifications\": {\n      \"presentationOptions\": [\"badge\", \"sound\", \"alert\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Keyboard Configuration in Capacitor\nDESCRIPTION: JSON configuration for iOS keyboard behavior including resize mode and style settings in capacitor.config.json.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"dark\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Angular\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in an Angular application's main file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/pwa-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n// Call the element loader after the platform has been bootstrapped\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom URL Scheme in AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet should be placed inside the 'activity' section of AndroidManifest.xml to handle custom URL scheme deep links on Android. The 'intent-filter' specifies which URLs the app can open. Requires editing strings.xml for the correct scheme. Outputs: App launches in response to matching URLs. Must be kept consistent with app configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"@string/custom_url_scheme\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Name in strings.xml\nDESCRIPTION: Shows how to change the activity name to match the app name in the strings.xml resource file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"title_activity_main\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Migration Command\nDESCRIPTION: Command to execute the Capacitor migration tool that automates the upgrade process from Capacitor 5 to Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Installing App Launcher Plugin with npm\nDESCRIPTION: Commands to install the @capacitor/app-launcher plugin and synchronize the project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app-launcher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app-launcher\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Android App Build Gradle\nDESCRIPTION: Update the app/build.gradle file to use the common variables and update dependency versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n android {\n-    compileSdkVersion 28\n+    compileSdkVersion rootProject.ext.compileSdkVersion\n     defaultConfig {\n         applicationId \"com.example.app\"\n-        minSdkVersion 21\n-        targetSdkVersion 28\n+        minSdkVersion rootProject.ext.minSdkVersion\n+        targetSdkVersion rootProject.ext.targetSdkVersion\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n```\n\nLANGUAGE: diff\nCODE:\n```\n dependencies {\n     implementation fileTree(include: ['*.jar'], dir: 'libs')\n-    implementation 'androidx.appcompat:appcompat:1.0.0'\n+    implementation \"androidx.appcompat:appcompat:$androidxAppCompatVersion\"\n     implementation project(':capacitor-android')\n-    testImplementation 'junit:junit:4.12'\n-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'\n+    testImplementation \"junit:junit:$junitVersion\"\n+    androidTestImplementation \"androidx.test.ext:junit:$androidxJunitVersion\"\n+    androidTestImplementation \"androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion\"\n     implementation project(':capacitor-cordova-android-plugins')\n```\n\n----------------------------------------\n\nTITLE: Constant for Cache Directory in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the Cache directory for Capacitor Filesystem operations using the 'CACHE' string literal. This directory is designated for temporary, app-specific files that can be regenerated. The OS may delete files in this directory during low memory conditions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n'CACHE'\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Serialization in Capacitor Plugins\nDESCRIPTION: Demonstrates how to configure a Capacitor plugin to opt out of automatic date stringification by setting the shouldStringifyDatesInCalls property during plugin loading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/data-types.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\noverride func load() {\n    shouldStringifyDatesInCalls = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Camera Properties - TypeScript\nDESCRIPTION: Sets the camera configuration (position, zoom, etc.) for the map asynchronously. Accepts a CameraConfig object defining new camera parameters. Returns a void Promise and requires dependencies for CameraConfig and map initialization.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nsetCamera(config: CameraConfig) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables in Gradle\nDESCRIPTION: Groovy code snippet for updating Android project variables in the variables.gradle file to meet Capacitor 7 requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 23\ncompileSdkVersion = 35\ntargetSdkVersion = 35\nandroidxActivityVersion = '1.9.2'\nandroidxAppCompatVersion = '1.7.0'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.15.0'\nandroidxFragmentVersion = '1.8.4'\ncoreSplashScreenVersion = '1.0.1'\nandroidxWebkitVersion = '1.12.1'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.2.1'\nandroidxEspressoCoreVersion = '3.6.1'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Setting Padding for Google Maps in TypeScript\nDESCRIPTION: Sets the padding for the Google Map instance using a MapPadding object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nsetPadding(padding: MapPadding) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOptions Interface for Local Notifications in TypeScript\nDESCRIPTION: This snippet defines the CancelOptions interface, which is used to specify which notifications to cancel. It contains a single property for a list of notification descriptors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CancelOptions {\n  notifications: LocalNotificationDescriptor[];\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element for Converted File\nDESCRIPTION: Shows the HTML markup that works with the converted file path to display the saved image.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Method for iOS Platform in Swift\nDESCRIPTION: Shows the native iOS implementation of the `openMap` method within the `EchoPlugin.swift` file. It uses the `@objc` attribute to expose the method to the Objective-C runtime, retrieves `latitude` (as String) and `longitude` (as Number) parameters from the `CAPPluginCall` object, includes a placeholder for native logic, and resolves the call. Requires registration in the plugin's `.m` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@objc func openMap(_ call: CAPPluginCall) {\n  let latitude = call.getString(\"latitude\")\n  let longitude = call.getNumber(\"longitude\")\n\n  // more logic\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Capacitor Plugins with CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the 'npx cap sync' command to synchronize Capacitor plugins and project assets for specified native platforms. It accepts options such as '--deployment' for iOS and an optional platform parameter (android or ios). No dependencies beyond Node.js, Capacitor CLI, and platform SDKs are required. Outputs include updated native project files and installed dependencies for the selected platform(s).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync [options] [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Configuration\nDESCRIPTION: Changes required in gradle.properties and AndroidManifest.xml for modern Android development practices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/5-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# gradle.properties\n\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n- # Automatically convert third-party libraries to use AndroidX\n- android.enableJetifier=true\n\n# AndroidManifest.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n- <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"[YOUR_PACKAGE_ID]\">\n+ <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n# build.gradle\n\nandroid {\n+     namespace \"[YOUR_PACKAGE_ID]\"\n      compileSdkVersion rootProject.ext.compileSdkVersion\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables in Gradle\nDESCRIPTION: Update the Android project variables in the variables.gradle file to meet the new minimum requirements for Capacitor 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 33\ntargetSdkVersion = 33\nandroidxActivityVersion = '1.7.0'\nandroidxAppCompatVersion = '1.6.1'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.10.0'\nandroidxFragmentVersion = '1.5.6'\ncoreSplashScreenVersion = '1.0.0'\nandroidxWebkitVersion = '1.6.1'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.5'\nandroidxEspressoCoreVersion = '3.5.1'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in Capacitor with Angular Router\nDESCRIPTION: Defines the `initializeApp` method in an Angular component. It adds a listener to the Capacitor `App` plugin's `appUrlOpen` event. When a deep link opens the app, the callback extracts the URL path (`slug`) and uses the Angular `Router` within `NgZone.run()` to navigate to the corresponding route within the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninitializeApp() {\n    App.addListener('appUrlOpen', (data: any) => {\n        this.zone.run(() => {\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = data.url.split(\".app\").pop();\n            if (slug) {\n                this.router.navigateByUrl(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing New Capacitor Project with npm\nDESCRIPTION: Command to create a new Capacitor project using npm. This is the first step in setting up a Capacitor project with SPM support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/spm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/app@latest\n```\n\n----------------------------------------\n\nTITLE: Date API Method Signatures in TypeScript\nDESCRIPTION: TypeScript interface definitions for Date methods including conversion to strings, getting/setting time components, and timezone operations. Methods support both local time and UTC operations with various levels of precision from milliseconds to years.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Date {\n  toString(): string;\n  toDateString(): string;\n  toTimeString(): string;\n  toLocaleString(): string;\n  toLocaleDateString(): string;\n  toLocaleTimeString(): string;\n  valueOf(): number;\n  getTime(): number;\n  getFullYear(): number;\n  getUTCFullYear(): number;\n  getMonth(): number;\n  getUTCMonth(): number;\n  getDate(): number;\n  getUTCDate(): number;\n  getDay(): number;\n  getUTCDay(): number;\n  getHours(): number;\n  getUTCHours(): number;\n  getMinutes(): number;\n  getUTCMinutes(): number;\n  getSeconds(): number;\n  getUTCSeconds(): number;\n  getMilliseconds(): number;\n  getUTCMilliseconds(): number;\n  getTimezoneOffset(): number;\n  setTime(time: number): number;\n  setMilliseconds(ms: number): number;\n  setUTCMilliseconds(ms: number): number;\n  setSeconds(sec: number, ms?: number): number;\n  setUTCSeconds(sec: number, ms?: number): number;\n  setMinutes(min: number, sec?: number, ms?: number): number;\n  setUTCMinutes(min: number, sec?: number, ms?: number): number;\n  setHours(hours: number, min?: number, sec?: number, ms?: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Activity Configuration Changes\nDESCRIPTION: Updates the AndroidManifest.xml to handle more configuration changes without restarting the app, improving user experience.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n         <activity\n-            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n+            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode\"\n             android:name=\"com.example.app\"\n             android:label=\"@string/title_activity_main\"\n             android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n             android:launchMode=\"singleTask\">\n```\n\n----------------------------------------\n\nTITLE: Installing cordova-res Tool in Bash\nDESCRIPTION: Command to install the cordova-res tool globally for generating icons and splash screens.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cordova-res\n```\n\n----------------------------------------\n\nTITLE: Updating Watch UI in Capacitor\nDESCRIPTION: Updates the user interface displayed on a connected watch. Takes an options object with a watchUI string parameter that contains the new UI to display. Returns a Promise that resolves when the UI has been updated.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWatchUI(options: { watchUI: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Converting File Paths with convertFileSrc\nDESCRIPTION: Demonstrates how to use the convertFileSrc utility to transform device file paths into Web View-compatible URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconvertFileSrc: (filePath: string) => string;\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor in Ionic Project\nDESCRIPTION: Commands to navigate to the project directory and initialize Capacitor with app information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd capApp/\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Capacitor Server Configuration\nDESCRIPTION: TypeScript configuration for setting custom hostname and Android scheme in Capacitor config\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/autofill-credentials.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CapacitorConfig = {\n...\n  server: {\n    hostname: 'my-app.com',\n    androidScheme: 'https',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Global Style File in Docusaurus Configuration\nDESCRIPTION: This snippet shows how the global style file from the styles folder is referenced in the docusaurus.config.js file. It demonstrates the integration of custom styles into the Docusaurus theme.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/src/styles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[docusaurus.config.js](/docusaurus.config.js)\n```\n\n----------------------------------------\n\nTITLE: Moving Package ID to build.gradle for Capacitor 5\nDESCRIPTION: Changes required to move package ID from AndroidManifest.xml to build.gradle file for Capacitor 5 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n# AndroidManifest.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n- <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"[YOUR_PACKAGE_ID]\">\n+ <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n```\n\n----------------------------------------\n\nTITLE: Including PWA Elements via Script Tag in HTML\nDESCRIPTION: Loads the PWA Elements web components directly from a CDN by adding script tags in the HTML <head>. The first script uses the ES module build for modern browsers, while the second fallback is for legacy browsers via nomodule. No installation or import is needed, but these scripts require an internet connection unless self-hosted. Inputs are script source URLs; output is registering elements globally for use in your app’s HTML.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/pwa-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js\"\n></script>\n<script\n  nomodule\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Push Notifications Plugin with npm\nDESCRIPTION: Command to install the latest version of the @capacitor/push-notifications plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Lock Method in ScreenOrientation\nDESCRIPTION: Adds a method to lock the screen orientation by setting the activity's requested orientation to the specified orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic void lock(String orientationType) {\n   int orientationEnum = fromOrientationTypeToEnum(orientationType);\n   activity.setRequestedOrientation(orientationEnum);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pods to Fix Sandbox Sync Errors\nDESCRIPTION: This command updates the CocoaPods dependencies when encountering a 'Sandbox not in sync with the Podfile.lock' error. It resolves dependency installation issues by running the Capacitor update command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Capacitor/Cordova Plugins using Capacitor CLI (Bash)\nDESCRIPTION: This command uses the Capacitor CLI via `npx` to list all installed Cordova and Capacitor plugins in the current project. An optional platform argument (`android` or `ios`) can be provided to filter the plugins for a specific platform. Requires Capacitor CLI (`@capacitor/cli`) and Node.js/npm (for `npx`) to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Getting Preferred Text Zoom Level in TypeScript\nDESCRIPTION: TypeScript signature for the `getPreferred()` method of the Text Zoom API. This asynchronous function retrieves the user's preferred text zoom level, typically configured in the operating system's accessibility settings. The zoom level is returned as a decimal number within a Promise resolving to a `GetPreferredResult` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/text-zoom.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreferred() => Promise<GetPreferredResult>\n```\n\n----------------------------------------\n\nTITLE: Unsafe Direct Dictionary Access to Nullable Values (Swift)\nDESCRIPTION: This Swift snippet illustrates a potential pitfall when directly accessing a value from the options property of CAPPluginCall without type-checking. Since the dictionary can contain NSNull objects (converted from null in JavaScript), checking for nil only verifies the presence of any value, including NSNull, which evaluates as truthy. This code pattern is discouraged, as it leads to incorrect logic paths if nulls are significant.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nif call.options[\"foo\"] != nil {\n    // BAD: the key returned a truthy `NSNull` object, so this block will run\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Status Bar Information (TypeScript)\nDESCRIPTION: Defines getInfo, a method returning a Promise with current StatusBarInfo. No parameters required. Returns an object with visibility, style, color, and overlay state. Used for querying real-time status bar properties; the fields available may vary by platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/status-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo() => Promise<StatusBarInfo>\n```\n\n----------------------------------------\n\nTITLE: Setting My Location Click Listener (TypeScript)\nDESCRIPTION: Defines the function signature for setting a callback that will be invoked when the user clicks their current location marker (the blue dot) on the map. It takes an optional callback of type MapListenerCallback with MapClickCallbackData and returns a Promise indicating completion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMyLocationClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing ffi and Running pod install Under Rosetta (shell)\nDESCRIPTION: This shell snippet is for Apple Silicon Mac users who experience a 'ffi' Bus Error while running CocoaPods. The commands use 'arch -x86_64' to install the ffi gem and execute 'pod install' under a simulated Intel architecture environment, resolving compatibility issues. Requires Rosetta 2, Ruby, CocoaPods, and gem tools. Inputs are executed sequentially in Terminal; the output is a successful ffi installation and pod dependency resolution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Haptics Notification Method Definition\nDESCRIPTION: TypeScript method signature for triggering haptic notification feedback with customizable options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/haptics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnotification(options: HapticsNotificationOptions) => void\n```\n\n----------------------------------------\n\nTITLE: Installing 'ffi' Gem via Rosetta on Apple Silicon (Bash)\nDESCRIPTION: This command installs the 'ffi' Ruby gem specifically using Rosetta 2 emulation (`arch -x86_64`) on Apple Silicon Macs. This is often a necessary step when installing CocoaPods via RubyGems on these machines, as some gems may require x86_64 architecture. Requires administrator privileges (`sudo`).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo arch -x86_64 gem install ffi\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest with Placeholders\nDESCRIPTION: Modification to AndroidManifest.xml to use the displayName placeholder.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  ...snip...\n  android:label=\"${displayName}\">\n\n  <activity\n    ...snip...\n    android:label=\"${displayName}\">\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Development Web Server - Bash\nDESCRIPTION: Runs the local web server hosting the front-end using npm scripts. This is typically executed as part of setting up the manual Live Reload workflow. Ensure the server is bound to 0.0.0.0 so it is accessible from other devices on the network.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Getting Preferred Text Zoom Level - @capacitor/text-zoom TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to obtain the user's preferred zoom level by invoking getPreferred() from the @capacitor/text-zoom API. Returns a Promise resolving to a GetPreferredResult object with a single 'value' property indicating the preferred text zoom as a decimal. No input parameters. Outputs preferred zoom level. Requires the plugin as a dependency.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/text-zoom.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreferred() => Promise<GetPreferredResult>\n```\n\n----------------------------------------\n\nTITLE: Removing All Screen Reader Event Listeners in TypeScript\nDESCRIPTION: Defines the `removeAllListeners()` method signature. This asynchronous method removes all event listeners previously attached to the Screen Reader plugin instance and returns a Promise that resolves when done.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/screen-reader.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Commands in Background Runner\nDESCRIPTION: JavaScript code to listen for commands from the watch in a background task using the Background Runner plugin's event system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"WatchConnectivity_didReceiveUserInfo\", (args) => {\n  console.log(args.message.jsCommand);\n})\n```\n\n----------------------------------------\n\nTITLE: Defining beforeExit Method in Capacitor's Background Task API\nDESCRIPTION: This code snippet shows the TypeScript definition for the beforeExit method, which allows running short-lived background tasks when an app is backgrounded. The method returns a callback ID that must be used when finishing the task.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/background-task.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeExit(cb: Function) => CallbackID\n```\n\n----------------------------------------\n\nTITLE: Defining StyleSpan Interface for Polyline Segments in TypeScript\nDESCRIPTION: Interface for styling individual segments of a polyline in Google Maps. Allows specifying color and segment length for different portions of a polyline path.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  color: string;\n  \n  /**\n   * The length of this span in number of segments.\n   */\n  segments: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android App on Device or Emulator - Bash\nDESCRIPTION: This command executes the Capacitor app on either a connected physical Android device or a configured emulator. It prompts the user to select a target device or emulator. API 24+ emulator images are required, and System WebView should be updated for optimal compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Installing cordova-res Tool Globally - Bash Command\nDESCRIPTION: Installs the global cordova-res command-line utility needed to generate and manage icon and splash screen assets for Capacitor-based projects. Requires npm and administrative privileges for global installation. No input arguments; outputs the installed utility available in the system's PATH.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cordova-res\n```\n\n----------------------------------------\n\nTITLE: Destroying Google Maps Instance\nDESCRIPTION: Destroys the map instance and cleans up any resources. Should be called when the map is no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ndestroy() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Jest Testing Implementation\nDESCRIPTION: Example of mocking and testing Capacitor Storage plugin methods using Jest, including get and clear operations with mock implementations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/mocking-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  it(\"gets the first and last name\", async () => {\n    Storage.get = jest.fn().mockImplementation(\n      async (data: { key: string }): Promise<{ value: string }> => {\n        return data.key === \"firstName\"\n          ? { value: \"Jimmy\" }\n          : data.key === \"lastName\"\n          ? { value: \"Simms\" }\n          : { value: \"unknown\" };\n      }\n    );\n    const w = mount(Home);\n    await flushPromises();\n    expect(w.vm.firstName).toEqual(\"Jimmy\");\n    expect(w.vm.lastName).toEqual(\"Simms\");\n  });\n\n  it(\"clears the storage\", () => {\n    const button = wrapper.findComponent('[data-testid=\"clear\"]');\n    Storage.clear = jest.fn().mockResolvedValue(undefined);\n    button.trigger(\"click\");\n    expect(Storage.clear).toHaveBeenCalledTimes(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Permissions in Swift for Capacitor iOS\nDESCRIPTION: Shows how to request multiple permissions using a DispatchGroup to synchronize calls\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet store = CNContactStore()\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    // get the permissions to check or default to all of them\n    var permissions = call.getArray(\"types\", String.self) ?? []\n    if permissions.isEmpty {\n        permissions = [\"contacts\", \"camera\"]\n    }\n\n    let group = DispatchGroup()\n    if permissions.contains(\"contacts\") {\n        group.enter()\n        store.requestAccess(for: .contacts) { (_, _) in\n            group.leave()\n        }\n    }\n    if permissions.contains(\"camera\") {\n        group.enter()\n        AVCaptureDevice.requestAccess(for: .video) { _ in\n            group.leave()\n        }\n    }\n    group.notify(queue: DispatchQueue.main) {\n        self.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Watch Plugin via npm\nDESCRIPTION: Command line instructions for installing the Capacitor Watch plugin and opening the iOS project in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/watch\nnpx cap sync\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor CLI v5 for Migration\nDESCRIPTION: Command to install the latest Capacitor CLI version 5 as a development dependency in your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @capacitor/cli@latest-5\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation in TypeScript\nDESCRIPTION: Implements a button click handler to unlock the screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/using-api.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.unlock()}\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rule: Keep Plugin Classes - ProGuard\nDESCRIPTION: Ensures that classes within a plugin (e.g., com.mythirdpartyplugin) are retained during ProGuard minification and obfuscation, preventing runtime errors due to missing classes. This rule is added to the proguard-rules.pro file in the Android project. No parameters are used. Limitation: Overly broad usage may reduce minification effectiveness.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class com.mythirdpartyplugin.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue Router Instance\nDESCRIPTION: Code for mounting the Vue Router instance in a Vue application. This connects the router to the Vue application, enabling route navigation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst VueApp = new Vue({\n  router,\n}).$mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Closing the In-App Browser using Browser.close - TypeScript\nDESCRIPTION: This TypeScript snippet provides the Browser.close method signature for closing an open browser window in-app. Requires @capacitor/browser and works only on Web and iOS platforms; it does nothing on other platforms. No parameters are needed, and the function returns a Promise<void>. No input besides invocation; action closes the browser window.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/browser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclose() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the BackButtonListenerEvent Interface - TypeScript\nDESCRIPTION: Declares the BackButtonListenerEvent interface for tracking hardware or virtual back button presses, including a boolean indicating if backward navigation is possible. Used for custom navigation handling in Capacitor apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BackButtonListenerEvent {\n  canGoBack: boolean; // Indicates whether the browser can go back in history.\n}\n```\n\n----------------------------------------\n\nTITLE: ReaddirOptions Type Definition in TypeScript\nDESCRIPTION: Interface for options when reading directory contents, specifying path and directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReaddirOptions {\n  path: string;\n  directory: Directory;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Package ID in Android Gradle File\nDESCRIPTION: Demonstrates how to change the applicationId (Package ID) in the android/app/build.gradle file for a Capacitor Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndefaultConfig {\n-       applicationId \"com.capacitorjs.app\"\n+       applicationId \"com.mycompany.myapp\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Lock\nDESCRIPTION: Implementation method to lock the screen orientation to a specified orientation type by setting the requested orientation on the activity.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic void lock(String orientationType) {\n   int orientationEnum = fromOrientationTypeToEnum(orientationType);\n   activity.setRequestedOrientation(orientationEnum);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Web App for Capacitor in Bash\nDESCRIPTION: Command to build the web project before adding native platforms in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Project with Capacitor\nDESCRIPTION: Command to update the iOS project with new CocoaPods dependencies using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners for Capacitor App Plugin (TypeScript)\nDESCRIPTION: Removes all previously registered native event listeners associated with the Capacitor App plugin instance. This is useful for cleanup, especially in scenarios like component unmounting in frontend frameworks. The method returns a Promise that resolves when all listeners have been successfully removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Web Plugin Structure in TypeScript\nDESCRIPTION: Shows the basic structure of a Capacitor web plugin implementation with an echo functionality example.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\n\nimport type { EchoPlugin } from './definitions';\n\nexport class EchoWeb extends WebPlugin implements EchoPlugin {\n  async echo(options: { value: string }) {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Camera Capacitor Plugin\nDESCRIPTION: Installation commands for the Capacitor Camera plugin using npm followed by syncing the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/camera\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Using convertFileSrc with Filesystem API\nDESCRIPTION: Example showing how to save a file using the Filesystem API and then convert its path for use in a web context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Platform Packages - Node Package Manager - Bash\nDESCRIPTION: This bash snippet provides the npm commands to update Capacitor platform packages for iOS and Android. Keeping these platforms updated ensures compatibility with the latest Capacitor APIs and native runtime improvements. Requires an existing Capacitor project and npm. After running, the native projects will use the latest stable platform dependencies; additional project syncing may be needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/basics/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\nnpm install @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Remove All Listeners - TypeScript\nDESCRIPTION: Removes all native listeners for the push notification plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/push-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in Capacitor Filesystem with TypeScript\nDESCRIPTION: Function to remove all event listeners for the Filesystem plugin. Returns a Promise that resolves when all listeners have been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing fileprovider_authority from Android strings\nDESCRIPTION: Removes the deprecated fileprovider_authority string from the Android strings.xml resource file while preserving other app configuration values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/1-1.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n     <string name=\"app_name\">My App</string>\n     <string name=\"title_activity_main\">My App</string>\n     <string name=\"package_name\">com.getcapacitor.myapp</string>\n-    <string name=\"fileprovider_authority\">com.getcapacitor.myapp.fileprovider</string>\n     <string name=\"custom_url_scheme\">com.getcapacitor.myapp</string>\n </resources>\n```\n\n----------------------------------------\n\nTITLE: Renaming Files/Directories with Capacitor Filesystem API (rename)\nDESCRIPTION: Defines the `rename` method signature from the Capacitor Filesystem API. This asynchronous function takes `RenameOptions` (specifying the source path (`from`), destination path (`to`), and optional source/destination directories) and returns a Promise that resolves when the file or directory has been renamed or moved.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrename(options: RenameOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Deployment Target in Podfile\nDESCRIPTION: Ruby code snippet to update the iOS deployment target to 14.0 in the Podfile for a Capacitor iOS project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '14.0'\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Messaging to iOS Notification Service Extension in Podfile\nDESCRIPTION: Adds the Firebase Messaging pod to the iOS notification service extension target in the Podfile to enable handling of rich push notifications with images.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'pushextension' do\n  pod 'Firebase/Messaging'\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Core and CLI\nDESCRIPTION: Commands for updating Capacitor core dependencies and CLI tools to version 2.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@2\nnpm install @capacitor/core@2\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with BackgroundRunner API in TypeScript\nDESCRIPTION: This TypeScript snippet shows the function signature for `checkPermissions()`. This method is part of the Background Runner JavaScript API and is used to check the current permission status for various device APIs (like geolocation and notifications) that the background runner might need access to. It returns a `PermissionStatus` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => any\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor bundledWebRuntime Option – JSON\nDESCRIPTION: This snippet demonstrates how to set the 'bundledWebRuntime' property to true in the Capacitor configuration file. This enables the inclusion of the Capacitor runtime bundle for projects not using a build system. The configuration must be placed in the appropriate Capacitor config JSON file (e.g., capacitor.config.json). Set this value to 'true' to ensure 'capacitor.js' is bundled into the web assets for standalone web app usage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundledWebRuntime\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Preferences Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/preferences plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/preferences.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/preferences\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins with Capacitor CLI (Bash)\nDESCRIPTION: This command uses the Capacitor CLI (`cap`) via `npx` to list all installed Cordova and Capacitor plugins within the project. An optional platform argument (`android` or `ios`) can be provided to filter the list for a specific platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls [<platform>]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum: CameraSource\nDESCRIPTION: Enum defining camera source options for capturing photos including prompt, camera, and photos gallery.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraSource {\n  Prompt = 'PROMPT',\n  Camera = 'CAMERA',\n  Photos = 'PHOTOS'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type in TypeScript\nDESCRIPTION: Defines a union type for PermissionState with possible values for different permission states.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Platform Dependencies\nDESCRIPTION: Commands to update Capacitor platform-specific dependencies for iOS, Android, and Electron. Each platform requires a separate update command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# iOS\nnpm install @capacitor/ios@2\nnpx cap sync ios\n\n# Android\nnpm install @capacitor/android@2\nnpx cap sync android\n\n# Electron\ncd electron\nnpm install @capacitor/electron@2\n```\n\n----------------------------------------\n\nTITLE: Creating Android Asset Links JSON\nDESCRIPTION: JSON structure for the Android asset links file, which associates a website with an Android app for deep linking purposes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"com.netkosoft.beerswift\",\n      \"sha256_cert_fingerprints\": [\"43:12:D4:27:D7:C4:14...\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: Defines the PluginListenerHandle interface for managing plugin event listeners, including a method to remove the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: NotificationScheduleOptions Interface Definition\nDESCRIPTION: Interface definition for scheduling notifications in Capacitor applications. Contains properties for configuring notification content, timing, and platform-specific behaviors for iOS and Android platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationScheduleOptions {\n  id: number;           // 32-bit int (-2147483648 to 2147483647)\n  title: string;         // notification title\n  body: string;          // notification body text\n  scheduleAt: Date;      // scheduled delivery date\n  sound?: string;        // sound file name\n  actionTypeId?: string; // associated action type\n  threadIdentifier?: string;  // iOS grouping identifier\n  summaryArgument?: string;   // iOS category summary format\n  group?: string;        // Android grouping identifier\n  groupSummary?: string; // Android group summary flag\n  extra?: any;          // additional notification data\n  ongoing?: boolean;    // Android swipe prevention flag\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Splash Screen Plugin Updates in Markdown\nDESCRIPTION: Explains changes related to the Android 12 Splash Screen API, including limitations on configuration options and differences between initial and show() method splash screens.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### Splash Screen\n\n- If switching to the new Android 12 Splash Screen API, most configuration options won't be available for the initial Splash Screen, but they will still be available for the Splash Screen that appears when calling `show()`. Also, on Android 12+ devices the initial Splash Screen is different from the Splash Screen shown by `show()` method.\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin for Capacitor 5\nDESCRIPTION: Update to the Gradle plugin version required for Capacitor 5 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:7.2.1'\n+       classpath 'com.android.tools.build:gradle:8.0.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Flavor in Capacitor Config - TypeScript\nDESCRIPTION: Specifies the Android product flavor to use in the Capacitor TypeScript configuration for environment-specific builds. By setting the 'flavor' property in the 'android' object, commands like 'npx cap run android' operate with the desired environment configuration. Requires flavors defined in android/app/build.gradle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nandroid: {\n   flavor: \"qa\",\n },\n```\n\n----------------------------------------\n\nTITLE: Android Permissions Configuration\nDESCRIPTION: Required Android manifest permissions for external storage access\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Running Ionic Live Reload Commands\nDESCRIPTION: Commands to start Live Reload for Android and iOS platforms using the Ionic CLI with external flag for network access.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/live-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run android -l --external\nionic cap run ios -l --external\n```\n\n----------------------------------------\n\nTITLE: Including PWA Elements via Script Tag (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to include PWA Elements directly in the `index.html` file using script tags pointing to the CDN (unpkg). It includes both module and nomodule versions for broader browser compatibility. However, this method is noted to not work for offline scenarios.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/pwa-elements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js\"\n></script>\n<script\n  nomodule\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Defining the triggerJSEvent Method Signatures in Swift\nDESCRIPTION: Displays the method signatures for `triggerJSEvent` on the Capacitor bridge. This method allows native Swift code to fire custom events on JavaScript EventTargets like `window` or `document`, optionally passing string data. Using Plugin Events is generally preferred.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc triggerJSEvent(eventName: String, target: String)\nfunc triggerJSEvent(eventName: String, target: String, data: String)\n```\n\n----------------------------------------\n\nTITLE: API: hide() Method Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the `hide()` method of the Keyboard plugin. This method programmatically hides the keyboard and returns a Promise that resolves when the action is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhide() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting androidScheme in Capacitor Config\nDESCRIPTION: Configuration to set the androidScheme to 'http' in Capacitor configuration file to maintain data access when upgrading to Capacitor 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  server: {\n    androidScheme: 'http';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Scheme in Capacitor Configuration\nDESCRIPTION: Example of how to set the iOS scheme to 'ionic' in the Capacitor configuration file to maintain compatibility with Cordova's default behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"iosScheme\": \"ionic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Screen Reader Plugin via npm\nDESCRIPTION: Installs the `@capacitor/screen-reader` package using npm and then syncs the native project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/screen-reader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-reader\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Cordova Plugins and Resyncing - Bash\nDESCRIPTION: Demonstrates how to update a Cordova plugin to a specific version and synchronize the changes with native platforms using Capacitor CLI. The npm install command can specify a version, and npx cap sync updates platfrom files. This process is necessary to keep plugins current and ensure compatibility across iOS/Android native codebases.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/cordova.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name@version\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Hiding the Status Bar - TypeScript\nDESCRIPTION: TypeScript method signature to hide the status bar, accepting optional AnimationOptions for iOS animation customization. Returns a Promise that resolves when the action completes. Supported on both Android and iOS, but animation customization only affects iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/status-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhide(options?: AnimationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Closing InAppBrowser Instance with Capacitor (TypeScript)\nDESCRIPTION: Imports the `InAppBrowser` object and calls the `close` method asynchronously. This closes the currently active browser instance that was opened using either `openInSystemBrowser` or `openInWebView`. Requires the `@capacitor/inappbrowser` plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nawait InAppBrowser.close();\n```\n\n----------------------------------------\n\nTITLE: Defining EnabledResult Interface for Local Notifications in TypeScript\nDESCRIPTION: This snippet defines the EnabledResult interface, which represents the result of checking whether local notifications are enabled on the device. It contains a single boolean property.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EnabledResult {\n  value: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Capacitor iOS Plugin in Objective-C\nDESCRIPTION: Shows how to register a Capacitor iOS plugin using Objective-C macros. This step is crucial for making the plugin and its methods available to the Capacitor web runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_7\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Android Splash Screen Style Configuration\nDESCRIPTION: XML configuration for Android splash screen styling in styles.xml, defining the background resource for the splash screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"AppTheme.NoActionBar\">\n    <item name=\"android:background\">@drawable/NAME</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Building and Syncing Capacitor Project\nDESCRIPTION: Commands to build the Ionic application and copy the changes to the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Getting Locale String with Date.toLocaleString() in JavaScript\nDESCRIPTION: The `toLocaleString()` method returns a string representing the Date object according to language-specific conventions of the host environment's current locale. It formats both the date and time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntoLocaleString(): string\n```\n\n----------------------------------------\n\nTITLE: Using Capacitor Cookies API in TypeScript\nDESCRIPTION: This TypeScript example showcases various ways to interact with cookies in a Capacitor application. It includes functions for getting cookies using `document.cookie`, setting a cookie using `document.cookie`, and using the `CapacitorCookies` API methods (`setCookie`, `deleteCookie`, `clearCookies`, `clearAllCookies`) for more granular native control over cookies, including specifying URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorCookies } from '@capacitor/core';\n\nconst getCookies = () => {\n  return document.cookie;\n};\n\nconst setCookie = () => {\n  document.cookie = key + '=' + value;\n};\n\nconst setCapacitorCookie = async () => {\n  await CapacitorCookies.setCookie({\n    url: 'http://example.com',\n    key: 'language',\n    value: 'en',\n  });\n};\n\nconst deleteCookie = async () => {\n  await CapacitorCookies.deleteCookie({\n    url: 'https://example.com',\n    key: 'language',\n  });\n};\n\nconst clearCookiesOnUrl = async () => {\n  await CapacitorCookies.clearCookies({\n    url: 'https://example.com',\n  });\n};\n\nconst clearAllCookies = async () => {\n  await CapacitorCookies.clearAllCookies();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface for plugin-specific configurations including Capacitor Cookies and Http plugin settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/config.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nplugins?: {\n  [key: string]: {\n    [key: string]: any;\n  } | undefined;\n  CapacitorCookies?: {\n    enabled?: boolean;\n  };\n  CapacitorHttp?: {\n    enabled?: boolean;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in Capacitor Android Apps\nDESCRIPTION: Change the name of your Capacitor Android app by modifying the app_name value in strings.xml resource file. This controls what users see in the app launcher.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"app_name\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Download Related Type Definitions in TypeScript\nDESCRIPTION: Interfaces for file download operations including progress tracking and results.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DownloadFileResult {\n  path: string;\n  blob: Blob;\n}\n\ninterface DownloadFileOptions {\n  path: string;\n  directory: Directory;\n  progress: boolean;\n  recursive: boolean;\n}\n\ninterface ProgressStatus {\n  url: string;\n  bytes: number;\n  contentLength: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Status Bar Animation Enum\nDESCRIPTION: Enumeration defining animation options for showing/hiding the status bar including None (no animation), Slide (slide animation, not supported on iOS 15+), and Fade (fade animation).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nenum Animation {\n  None = 'NONE',\n  Slide = 'SLIDE',\n  Fade = 'FADE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `iosHiddenPreviewsShowSubtitle` Property Type as `boolean`\nDESCRIPTION: Specifies that the `iosHiddenPreviewsShowSubtitle` property within the LocalNotificationActionType interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Splash Screen Resource\nDESCRIPTION: XML configuration for customizing the Android splash screen resource name in the app's styles.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"AppTheme.NoActionBar\">\n    <item name=\"android:background\">@drawable/NAME</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Running Live Reload on Android and iOS using Ionic CLI - Bash\nDESCRIPTION: Invokes the Ionic CLI to run the app on either Android or iOS with live reload enabled. The '-l' flag activates live reload, and '--external' ensures the local server is accessible from the device. Requires prior installation of Ionic CLI, native-run, and platform setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run android -l --external\nionic cap run ios -l --external\n```\n\n----------------------------------------\n\nTITLE: Running iOS App via Command Line\nDESCRIPTION: Command to run the iOS app on a device or simulator using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Installing Barcode Scanner Plugin\nDESCRIPTION: Commands to install the Capacitor Barcode Scanner plugin and sync the native projects\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/barcode-scanner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/barcode-scanner\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Reader Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/screen-reader plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-reader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-reader\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting Text Zoom Level in TypeScript\nDESCRIPTION: TypeScript signature for the `set()` method of the Text Zoom API. This asynchronous function sets the Web View's current text zoom level. It accepts a `SetOptions` object containing the desired zoom level (`value`) as a decimal number (e.g., 1.2 for 120%). The function returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/text-zoom.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: SetOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Capacitor CLI in Node.js\nDESCRIPTION: Command to install the latest version of the Capacitor CLI as a dev dependency in a Node.js project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @capacitor/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode for Testing using Capacitor CLI (bash)\nDESCRIPTION: This command uses the Capacitor CLI to open the native iOS project in Xcode. This step is part of the testing phase, allowing the developer to build and run the application on a physical iOS device or simulator to test push notification functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Removing NSAppTransportSecurity from iOS Info.plist\nDESCRIPTION: Optional removal of NSAppTransportSecurity entry from Info.plist as it's only needed for live reload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-<key>NSAppTransportSecurity</key>\n-<dict>\n-\t\t  <key>NSAllowsArbitraryLoads</key>\n-  \t\t<true/>\n-</dict>\n```\n\n----------------------------------------\n\nTITLE: Documenting Device Plugin Updates in Markdown\nDESCRIPTION: Details updates to the Device plugin including improved model reporting on iOS and language code standardization across platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### Device\n\n- `model` now returns the exact model on iOS (from \"iPhone\" to \"iPhone13.4\").\n- `getLanguageCode()` now returns short language code on web (as other platforms did), to get full code use `getLanguageTag()`.\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientationPlugin Interface Methods (TypeScript)\nDESCRIPTION: Implements the required methods of the ScreenOrientationPlugin interface: orientation (returns current type), lock (locks to a given orientation), and unlock (releases lock). Methods rely on the native window.screen.orientation methods and use async/await for asynchronous behavior. This ensures the web implementation matches the signature and intent of platform-native interfaces.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n async orientation(): Promise<{ type: OrientationType }> {\n   return { type: window.screen.orientation.type };\n }\n\n async lock(opts: { orientation: OrientationLockType }): Promise<void> {\n   await window.screen.orientation.lock(opts.orientation);\n }\n\n async unlock(): Promise<void> {\n   window.screen.orientation.unlock();\n }\n```\n\n----------------------------------------\n\nTITLE: Updating OpenSSL and Ruby for CocoaPods GitHub Connection\nDESCRIPTION: Commands to fix GitHub connection issues with CocoaPods by updating openssl and Ruby using Homebrew.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\nbrew upgrade openssl\nbrew install ruby\nbrew link --overwrite ruby\n```\n\n----------------------------------------\n\nTITLE: Defining the AppLaunchUrl Interface - TypeScript\nDESCRIPTION: Creates the AppLaunchUrl interface to encapsulate the URL used when opening the app. This is typically employed to listen for or process deep link events and contains a single string URL property.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppLaunchUrl {\n  url: string; // The url used to open the app.\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Channels in Capacitor (TypeScript)\nDESCRIPTION: Method to retrieve a list of all notification channels. This functionality is only available for Android devices and returns a ListChannelsResult object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Type Alias in TypeScript\nDESCRIPTION: Type alias for notification visibility, referencing Android Developer Docs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from Capacitor Plugin in TypeScript\nDESCRIPTION: Illustrates how to remove an event listener from a Capacitor plugin in TypeScript. This is important for cleaning up listeners when they are no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Invoking Capacitor CLI with Options and Commands - Bash\nDESCRIPTION: This snippet shows the syntax for invoking the Capacitor CLI tool using npx. It demonstrates how to pass optional flags for version (\\\"-V\\\") and help (\\\"-h\\\"), as well as how to specify additional CLI commands. No additional dependencies are required beyond having Node.js and npx installed. The main parameter is the optional command name and optional flags as described. The output will display either version/help information or execute the chosen command. Limitations: Designed for use in a Unix-like terminal; must have npx and capacitor installed (locally or globally).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap [-V] [-h] [<command>]\n```\n\n----------------------------------------\n\nTITLE: TypeScript ArrayLike Interface\nDESCRIPTION: Simple interface definition for array-like objects containing only a length property of type number.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayLike {\n    length: number\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Functionality in iOS Plugin\nDESCRIPTION: Shows how to use the 'unimplemented' error to indicate that a method cannot be implemented for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatRequiresAndroid(_ call: CAPPluginCall) {\n    call.unimplemented(\"Not implemented on iOS.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore Certificate\nDESCRIPTION: Command to generate a new keystore certificate with RSA algorithm and 2048-bit key size, valid for 10000 days\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -v -keystore KEY-NAME.keystore -alias ALIAS -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Removing Android fileprovider_authority from strings.xml - diff\nDESCRIPTION: This snippet shows how to remove the \"fileprovider_authority\" string from the android/app/src/main/res/values/strings.xml file when upgrading to Capacitor 1.1.0. This change is necessary as the referenced string is no longer required or supported in the updated version of Capacitor. The snippet specifically deletes only the relevant line, ensuring the rest of the configuration remains unchanged.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/1-1.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n     <string name=\\\"app_name\\\">My App</string>\\n     <string name=\\\"title_activity_main\\\">My App</string>\\n     <string name=\\\"package_name\\\">com.getcapacitor.myapp</string>\\n-    <string name=\\\"fileprovider_authority\\\">com.getcapacitor.myapp.fileprovider</string>\\n     <string name=\\\"custom_url_scheme\\\">com.getcapacitor.myapp</string>\\n </resources>\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in build.gradle\nDESCRIPTION: Updates the Android build configuration to use the newer compileSdk syntax and increases both compileSdk and targetSdkVersion from 33 to 34 as required by Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/6-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n+    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34\n-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33\n+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34\n```\n\n----------------------------------------\n\nTITLE: Unlinking Local Capacitor Plugin using npm\nDESCRIPTION: Provides the shell command `npm uninstall echo` to remove the local link to the specified plugin (`echo`) from the Capacitor application's dependencies and `node_modules`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall echo\n```\n\n----------------------------------------\n\nTITLE: Modifying Android build.gradle for Background Runner\nDESCRIPTION: Required changes to the Android build.gradle file to include the Background Runner plugin libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n...\n\nrepositories {\n    flatDir{\n        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n+\t\tdirs '../../node_modules/@capacitor/background-runner/android/src/main/libs', 'libs'\n    }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Enumerating FilesystemEncoding Values for Filesystem Plugin - TypeScript\nDESCRIPTION: Defines the FilesystemEncoding enum listing supported encodings: UTF8, ASCII, and UTF16. This is used to specify string encoding in file operations where textual content is read from or written to disk. Used as a parameter in Filesystem plugin methods. Inputs: encoding mode; output: affects reading/writing file data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum FilesystemEncoding {\n  UTF8 = \"utf8\",\n  ASCII = \"ascii\",\n  UTF16 = \"utf16\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Web Code for Apple Silicon Macs\nDESCRIPTION: Commands to update web code and install pods on Apple Silicon Macs using Rosetta.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\narch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project\nDESCRIPTION: Command to initialize a new Capacitor project, requiring app name and bundle ID from existing Cordova config.xml\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Installing cordova-plugin-purchase for Capacitor - Shell\nDESCRIPTION: This snippet installs the cordova-plugin-purchase plugin and updates the Capacitor project to recognize the new plugin. The first command uses npm to add the plugin to the project's dependencies, while the second command synchronizes the Capacitor native projects with the latest changes. Dependencies required include Node.js, npm, and Capacitor CLI. Input parameters are the package name to install, and both commands are expected to be run from the root directory of a Capacitor project. Expected output is an updated project with the in-app purchase plugin available; errors may occur if prerequisites are missing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/in-app-purchases.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-purchase\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Configuring iPad Full Screen Requirement\nDESCRIPTION: XML configuration for Info.plist to enable orientation locking on iPad by requiring full screen mode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>UIRequiresFullScreen</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Adding android:exported Tag to AndroidManifest.xml\nDESCRIPTION: Adds the required android:exported attribute to the activity tag in AndroidManifest.xml to comply with Android 12+ requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nandroid:exported=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability in Capacitor (TypeScript)\nDESCRIPTION: This snippet demonstrates how to check if a plugin (in this case, the Camera) is available using Capacitor's JavaScript API. It shows how to provide alternative functionality when a plugin is not available, which is useful when running the app as a PWA.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/progressive-web-app.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  Camera.getPhoto();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Clipboard Plugin with npm - Bash\nDESCRIPTION: Demonstrates how to install the @capacitor/clipboard plugin using npm and synchronize the plugin with a Capacitor project. Developers must have npm, Node.js, and an existing Capacitor project. The 'npm install' command installs the clipboard package and 'npx cap sync' ensures the Capacitor build system recognizes the newly installed plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/clipboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/clipboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Running iOS App via Command Line\nDESCRIPTION: Command to run the iOS app on a device or simulator using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Cookies Support on iOS\nDESCRIPTION: XML configuration to add to Info.plist for enabling third-party cookies support on iOS 14 and above. The WKAppBoundDomains key specifies domains that can use cookies, with a limit of 10 domains.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>WKAppBoundDomains</key>\n<array>\n  <string>www.mydomain.com</string>\n  <string>api.mydomain.com</string>\n  <string>www.myothercooldomain.com</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Background Color in Capacitor\nDESCRIPTION: TypeScript method signature for changing the background color of the status bar using StatusBarBackgroundColorOptions parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetBackgroundColor(options: StatusBarBackgroundColorOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: ReadableStream Interface Type Definition\nDESCRIPTION: Interface for handling readable streams of byte data with methods for stream manipulation and piping.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadableStream<R> {\n  locked: boolean;\n  cancel(reason?: any): Promise<void>;\n  getReader(): ReadableStreamDefaultReader<R>;\n  pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\n  pipeTo(dest: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  tee(): [ReadableStream<R>, ReadableStream<R>];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CapacitorCookies in JSON Configuration\nDESCRIPTION: JSON configuration for enabling the CapacitorCookies plugin in the capacitor.config.json file. Setting the 'enabled' property to true allows document.cookie to use native libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorCookies\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Method in Java\nDESCRIPTION: Java implementation of a void return method for Android platform using the @PluginMethod annotation with RETURN_NONE return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/method-types.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_NONE)\npublic void method1(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Splash Screen Plugin for Capacitor\nDESCRIPTION: Commands to install the latest version of the Capacitor splash screen plugin and sync the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/splash-screen@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Navigation Path for HTTPS Setting\nDESCRIPTION: Menu navigation path to enable HTTPS serving of the application in the VS Code extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/3-build-and-run.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nSettings > Use HTTPS\n```\n\n----------------------------------------\n\nTITLE: Defining CameraDirection Enum in Markdown\nDESCRIPTION: Defines the CameraDirection enum which specifies the direction of the camera. It includes options for Rear and Front camera directions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### CameraDirection\n\n| Members     | Value                |\n| ----------- | -------------------- |\n| **`Rear`**  | <code>\"REAR\"</code>  |\n| **`Front`** | <code>\"FRONT\"</code> |\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Orientation Plugin\nDESCRIPTION: Shell commands for installing the @capacitor/screen-orientation plugin and syncing the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: Interface for permission status, containing the state of receiving notifications permission.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  receive: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Text Zoom Level in TypeScript\nDESCRIPTION: TypeScript signature for the `get()` method of the Text Zoom API. This asynchronous function retrieves the current zoom level of the Web View content. The zoom level is returned as a decimal number (e.g., 1.2 represents 120%) within a Promise resolving to a `GetResult` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/text-zoom.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget() => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners with InAppBrowser\nDESCRIPTION: TypeScript code to remove all event listeners for browser events using the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser } from '@capacitor/inappbrowser';\nInAppBrowser.removeAllListeners();\n```\n\n----------------------------------------\n\nTITLE: Creating Android Variables Gradle File\nDESCRIPTION: Creates a variables.gradle file with common SDK and dependency versions for Android, defining minimum SDK, target SDK, and various AndroidX library versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\next {\n  minSdkVersion = 21\n  compileSdkVersion = 29\n  targetSdkVersion = 29\n  androidxAppCompatVersion = '1.1.0'\n  androidxCoreVersion =  '1.2.0'\n  androidxMaterialVersion =  '1.1.0-rc02'\n  androidxBrowserVersion =  '1.2.0'\n  androidxLocalbroadcastmanagerVersion =  '1.0.0'\n  firebaseMessagingVersion =  '20.1.2'\n  playServicesLocationVersion =  '17.0.0'\n  junitVersion =  '4.12'\n  androidxJunitVersion =  '1.1.1'\n  androidxEspressoCoreVersion =  '3.2.0'\n  cordovaAndroidVersion =  '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via Ruby Gem\nDESCRIPTION: Alternative command to install CocoaPods directly using Ruby Gem, not recommended for Apple Silicon Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Method Definition\nDESCRIPTION: TypeScript method signature for displaying alert dialogs. Shows the required AlertOptions parameter type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/dialog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nalert(options: AlertOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Geolocation Interface Definition\nDESCRIPTION: TypeScript interface for accessing device location information through Capacitor, including detailed position data like coordinates, altitude, and speed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetCurrentPositionResult {\n  latitude: number;\n  longitude: number;\n  accuracy: number;\n  altitude: number | null;\n  altitudeAccuracy: number | null;\n  speed: number | null;\n  heading: number | null;\n}\n```\n\n----------------------------------------\n\nTITLE: MapType Enum Definition\nDESCRIPTION: Defines the available map display types including Normal (basic), Hybrid (satellite with labels), Satellite (imagery only), Terrain (topographic), and None (no base tiles).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nenum MapType {\n  Normal = 'Normal',\n  Hybrid = 'Hybrid',\n  Satellite = 'Satellite',\n  Terrain = 'Terrain',\n  None = 'None'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform using Capacitor CLI\nDESCRIPTION: This command utilizes the Capacitor CLI (`npx cap`) to scaffold the native iOS project after the `@capacitor/ios` package has been installed. It creates the necessary Xcode project files, configuration, and installs required CocoaPods dependencies within an `ios` directory in your project root. This step integrates the Capacitor iOS runtime into your application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: Opens the generated Android project in Android Studio for development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Accessing Cordova Widget ID in XML Configuration\nDESCRIPTION: Example of the widget ID field in Cordova's config.xml file that needs to be referenced during Capacitor migration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<widget id=\"io.ionic.myapp\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Change Listener\nDESCRIPTION: Adds event listener for screen orientation changes in the constructor to notify plugin listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor() {\n   super();\n   window.screen.orientation.addEventListener(\"change\", () => {\n     const type = window.screen.orientation.type;\n     this.notifyListeners(\"screenOrientationChange\", { type });\n   });\n }\n```\n\n----------------------------------------\n\nTITLE: Defining the checkPermissions API Method in TypeScript\nDESCRIPTION: Type definition for the `checkPermissions` method. It takes no arguments and returns a `Promise` that resolves with the current `PermissionStatus` for location access (e.g., 'granted', 'denied', 'prompt'). It throws an error if system-level location services are disabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notification Events in AppDelegate - Swift\nDESCRIPTION: Handles remote notification events by dispatching them to the Background Runner plugin and calling the completion handler with appropriate UIBackgroundFetchResult. Depends on import CapacitorBackgroundRunner. Method is required for silent push and background notification support; userInfo contains the notification data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\\n        // ....\\n        BackgroundRunnerPlugin.dispatchEvent(event: \\\"remoteNotification\\\", eventArgs: userInfo) { result in\\n            switch result {\\n            case .success:\\n                completionHandler(.newData)\\n            case .failure:\\n                completionHandler(.failed)\\n            }\\n        }\\n    }\n```\n\n----------------------------------------\n\nTITLE: Android Activity Result API Implementation\nDESCRIPTION: Demonstrates migration to AndroidX Activity Result API from manual request codes, using new @ActivityCallback annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/plugins/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-static final int IMAGE_REQUEST = 10052;\n\n @PluginMethod\n public void chooseImage(PluginCall call) {\n     Intent intent = new Intent(Intent.ACTION_PICK);\n     intent.setType(\"image/*\");\n-    startActivityForResult(call, intent, IMAGE_REQUEST);\n+    startActivityForResult(call, intent, \"chooseImageResult\");\n }\n\n+@ActivityCallback\n+private void chooseImageResult(PluginCall call, ActivityResult result) {\n+    if (result.getResultCode() == Activity.RESULT_CANCELED) {\n+        call.reject(\"Activity canceled\");\n+    } else {\n+        Intent data = result.getData();\n+        // do something with the result data\n+        call.resolve(\"Success!\");\n+    }\n+}\n```\n\n----------------------------------------\n\nTITLE: Importing the React Deep Link Listener Component\nDESCRIPTION: Shows how to import the previously defined `AppUrlListener` component into the main application file (`App.tsx`) for use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AppUrlListener from './pages/AppUrlListener';\n```\n\n----------------------------------------\n\nTITLE: Adding Install-time Permissions to AndroidManifest.xml (Diff Format)\nDESCRIPTION: This diff snippet demonstrates the insertion of a required Android install-time permission into an AndroidManifest.xml file for a Capacitor plugin. Only install-time permissions (not runtime) should be added at the plugin level, and plugin documentation should inform consumers of additional runtime permission needs. Dependencies include AndroidManifest.xml access and correct XML syntax.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\\n      package=\"com.mycompany.plugins.network\">\\n+     <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\\n  </manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for Camera Plugin\nDESCRIPTION: XML configuration to add necessary permissions to the AndroidManifest.xml file for using the Camera plugin on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\"/>\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Firebase Import Statements for iOS AppDelegate\nDESCRIPTION: Required import statements for Firebase integration in AppDelegate.swift\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport FirebaseCore\nimport FirebaseMessaging\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView-Accessible Custom Plugin in Java for Capacitor Android\nDESCRIPTION: This snippet demonstrates how to create a custom Capacitor plugin in Java. It shows the structure of a plugin class with custom methods that can be called from the WebView.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.getcapacitor.NativePlugin;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\n\n@NativePlugin()\npublic class CustomNativePlugin extends Plugin {\n\n  @PluginMethod()\n  public void customCall(PluginCall call) {\n    String message = call.getString(\"message\");\n    // More code here...\n    call.success();\n  }\n\n  @PluginMethod()\n  public void customFunction(PluginCall call) {\n    // More code here...\n    call.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated fileprovider_authority from Android Strings\nDESCRIPTION: Shows the diff for removing the fileprovider_authority string from the Android strings.xml file. This configuration is no longer needed in Capacitor 1.1.0 as the file provider handling has been updated.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/1-1.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n     <string name=\"app_name\">My App</string>\n     <string name=\"title_activity_main\">My App</string>\n     <string name=\"package_name\">com.getcapacitor.myapp</string>\n-    <string name=\"fileprovider_authority\">com.getcapacitor.myapp.fileprovider</string>\n     <string name=\"custom_url_scheme\">com.getcapacitor.myapp</string>\n </resources>\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Permission Status - TypeScript\nDESCRIPTION: Represents the permission status for receiving notifications, encoding the state via a PermissionState type alias. Used for querying or reporting notification permissions. No dependencies beyond type alias definition; main parameter is 'receive', which reflects the granted, denied, or prompt state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  receive: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Deployment Target in Podfile (Diff)\nDESCRIPTION: This diff-style snippet shows the recommended change in Podfile to set the minimum iOS deployment target to 12.0 for Capacitor 3 compatibility. This update is required for Xcode 12 and later, and must be made in ios/App/Podfile for your project to build successfully on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-platform :ios, '11.0'\n+platform :ios, '12.0'\n use_frameworks!\n```\n\n----------------------------------------\n\nTITLE: Running the Capacitor Update Command (Bash)\nDESCRIPTION: This Bash command executes the Capacitor update process using `npx`. It synchronizes native project dependencies (for Android and/or iOS) with those defined in the project's `package.json`. Optionally, a specific platform (`android` or `ios`) can be provided to update only that platform. The `--deployment` option modifies the pod installation behavior on iOS, preventing Podfile.lock deletion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Position Type Definition\nDESCRIPTION: Defines a Position type as an array of coordinates following RFC 7946 specification. Supports 2-3 elements representing X, Y and optional Z coordinates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rule for Exempting Plugin Classes\nDESCRIPTION: A ProGuard configuration rule that prevents obfuscation and optimization of all Capacitor plugin classes, which can be used as a broad solution when specific plugins are causing issues with ProGuard.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keep public class * extends com.getcapacitor.Plugin\n```\n\n----------------------------------------\n\nTITLE: Device getLanguageTag Method Signature\nDESCRIPTION: TypeScript method signature for getLanguageTag() that returns a Promise containing the device's current language locale tag.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageTag() => Promise<LanguageTag>\n```\n\n----------------------------------------\n\nTITLE: Setting Capacitor View Controller in iOS Screen Orientation Class\nDESCRIPTION: Adds properties to store the view controller and its supported orientations, along with a method to set these values. This allows the plugin to restore original orientations when unlocking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n    private var supportedOrientations: [Int] = []\n    private var capViewController: CAPBridgeViewController?\n\n    public func setCapacitorViewController(_ viewController: CAPBridgeViewController) {\n        self.capViewController = viewController\n        self.supportedOrientations =  viewController.supportedOrientations\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Methods in iOS Capacitor Plugin\nDESCRIPTION: Shows how to use the 'unimplemented' method to indicate that a particular functionality cannot be implemented for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatRequiresAndroid(_ call: CAPPluginCall) {\n    call.unimplemented(\"Not implemented on iOS.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android targetSDK and compileSDK to 33\nDESCRIPTION: Changes required in build.gradle to update the compileSdkVersion and targetSdkVersion from 32 to 33 for Capacitor 5.0 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 32\n+    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 32\n+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin TypeScript Wrapper - Bash\nDESCRIPTION: Provides the command to optionally install an '@awesome-cordova-plugins' wrapper for a Cordova plugin. This is used to enable TypeScript support when integrating plugins into Ionic/Capacitor projects. The main prerequisite is having npm set up; simply substitute the correct plugin name. The code is intended for enhanced developer experience and type safety in JavaScript/TypeScript apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/cordova.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @awesome-cordova-plugins/plugin-name\n```\n\n----------------------------------------\n\nTITLE: Adding Exact Alarm Permission for Android Notifications\nDESCRIPTION: Permission required for scheduling exact notifications on Android 12 and above.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.SCHEDULE_EXACT_ALARM\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Channels (Android) - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This function signature for 'listChannels' returns a list of all notification channels available in the app, accessible only on Android. Returns a Promise resolving to ListChannelsResult. Requires ListChannelsResult type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut for Running App\nDESCRIPTION: Keyboard shortcut combination to quickly run the Capacitor application. Uses Option+R on Mac or Alt+R on Windows.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/3-build-and-run.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n⌥ + R (Mac)\nALT + R (Windows)\n```\n\n----------------------------------------\n\nTITLE: Building Ionic App and Adding Native Platforms\nDESCRIPTION: Commands to build the Ionic app and add iOS and Android platforms using Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Map Event Listener Callback\nDESCRIPTION: Type definition for callback functions that handle map events. Takes generic type T as parameter and returns void.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n(data: T): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Utilizing FileSystem React Hooks with Capacitor - TypeScript\nDESCRIPTION: Demonstrates how to import specific React hooks and utilities from @capacitor-community/react-hooks/filesystem, and utilize them within a functional React component to read a file from the device's filesystem. Dependencies include React (with access to useEffect), @capacitor-community/react-hooks, and appropriate Capacitor plugins. Key parameters used are the file path and FilesystemDirectory.Data, with the asynchronous readFile function returning file data. The snippet expects properly initialized Capacitor and Filesystem plugin, and is designed for modern React environments using functional components.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/react-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';\n\nconst MyComponent = () => (\n  const { readFile } = useFilesystem();\n\n  useEffect(() => {\n    const readMyFile = async () => {\n      const file = await readFile({\n        path: filepath,\n        directory: FilesystemDirectory.Data\n      });\n      // ...\n    }\n\n    readMyFile();\n  }, [ readFile ]);\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Push Notifications Plugin via npm\nDESCRIPTION: Installs the @capacitor/push-notifications plugin using npm and syncs the project with Capacitor CLI. This command downloads and adds the plugin package to your project's dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag Start Listener in Google Maps\nDESCRIPTION: Method to set up a callback for when marker dragging starts. Takes an optional callback function that receives MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragStartListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor iOS Platform via NPM\nDESCRIPTION: Install the latest Capacitor 3 iOS platform using npm and then synchronize the native iOS project using the Capacitor CLI (`npx cap sync ios`). This ensures the native project uses the updated dependencies and configurations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios@latest-3\nnpx cap sync ios\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Platform-Specific Dependencies\nDESCRIPTION: Commands to update iOS, Android, and Electron platform dependencies to Capacitor 2.0, including the sync command for iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# iOS\nnpm install @capacitor/ios@2\nnpx cap sync ios\n\n# Android\nnpm install @capacitor/android@2\nnpx cap sync android\n\n# Electron\ncd electron\nnpm install @capacitor/electron@2\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor iOS App on Command-Line\nDESCRIPTION: Runs the Capacitor iOS app on a device or simulator using the Capacitor CLI. This command prompts for target selection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Adding Outsystems Maven Repository for Android (Gradle)\nDESCRIPTION: This Gradle configuration adds the Outsystems public artifact repository to the `allprojects > repositories` section in the `android/build.gradle` file. This repository is required to fetch the native Android barcode scanning library dependencies used by the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            url 'https://pkgs.dev.azure.com/OutSystemsRD/9e79bc5b-69b2-4476-9ca5-d67594972a52/_packaging/PublicArtifactRepository/maven/v1'\n            name 'Azure'\n            credentials {\n                username = \"optional\"\n                password = \"\"\n            }\n            content {\n                includeGroup \"com.github.outsystems\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cocoapods for iOS in Capacitor Project\nDESCRIPTION: This bash command updates Cocoapods for the iOS platform in a Capacitor project after adding Firebase Messaging to the Podfile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Marker Click Event Listener in TypeScript\nDESCRIPTION: Creates a listener for marker click events with MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Displaying Screen Orientation Error in Web Console\nDESCRIPTION: This error message appears in the browser's console when trying to use the ScreenOrientation plugin without a web implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUncaught (in promise) ScreenOrientation does not have web implementation.\n```\n\n----------------------------------------\n\nTITLE: ActionType Interface Definition\nDESCRIPTION: Defines the structure for notification action types including iOS-specific configurations. Contains properties for action grouping and display options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionType {\n  id: string;\n  actions: Action[];\n  iosHiddenPreviewsBodyPlaceholder?: string;\n  iosCustomDismissAction?: boolean;\n  iosAllowInCarPlay?: boolean;\n  iosHiddenPreviewsShowTitle?: boolean;\n  iosHiddenPreviewsShowSubtitle?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cordova Plugins in Capacitor\nDESCRIPTION: Commands for updating Cordova plugins to a specific version and syncing the changes to native projects using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/cordova.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name@version\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock and Unlock in ScreenOrientationPlugin\nDESCRIPTION: This snippet shows the implementation of lock and unlock methods in the ScreenOrientationPlugin class. It includes input validation for the lock method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void lock(PluginCall call) {\n   String orientationType = call.getString(\"orientation\");\n   if(orientationType == null) {\n       call.reject(\"Input option 'orientation' must be provided.\");\n       return;\n   }\n   implementation.lock(orientationType);\n   call.resolve();\n}\n\n@PluginMethod()\npublic void unlock(PluginCall call) {\n   implementation.unlock();\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Sync Command using Bash\nDESCRIPTION: Shows the Capacitor CLI command to synchronize the project. This command updates the native Android and iOS projects, detecting and integrating any linked or newly installed Capacitor plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Splash Screen Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/splash-screen plugin and synchronize the native project with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/splash-screen\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Generating splash screens and icons for all platforms\nDESCRIPTION: Command to generate splash screen and icon assets for all supported platforms (iOS, Android, and PWA) using the source images provided in the assets folder.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx capacitor-assets generate\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias for PermissionState, representing the possible states of a permission request.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen Plugin in TypeScript\nDESCRIPTION: Example of configuring the Splash Screen plugin in capacitor.config.ts, including type references and various configuration options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    SplashScreen: {\n      launchShowDuration: 3000,\n      launchAutoHide: true,\n      launchFadeOutDuration: 3000,\n      backgroundColor: \"#ffffffff\",\n      androidSplashResourceName: \"splash\",\n      androidScaleType: \"CENTER_CROP\",\n      showSpinner: true,\n      androidSpinnerStyle: \"large\",\n      iosSpinnerStyle: \"small\",\n      spinnerColor: \"#999999\",\n      splashFullScreen: true,\n      splashImmersive: true,\n      layoutName: \"launch_screen\",\n      useDialog: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Action Interface Definition\nDESCRIPTION: Defines the structure for individual notification actions with properties for configuration and iOS-specific features including text input options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Action {\n  id: string;\n  title: string;\n  requiresAuthentication?: boolean;\n  foreground?: boolean;\n  destructive?: boolean;\n  input?: boolean;\n  inputButtonTitle?: string;\n  inputPlaceholder?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Circle Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when a circle is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnCircleClickListener(callback?: MapListenerCallback<CircleClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Device getBatteryInfo Method Signature\nDESCRIPTION: TypeScript method signature for getBatteryInfo() that returns a Promise containing information about the device's battery status.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetBatteryInfo() => Promise<BatteryInfo>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/browser Plugin\nDESCRIPTION: Commands to install the @capacitor/browser plugin and synchronize the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/browser\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Emitting Plugin-Specific Events in Capacitor iOS Plugin\nDESCRIPTION: Demonstrates how to emit plugin-specific events that can be listened to on the JavaScript side. Shows the Swift code to notify listeners of a custom event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nself.notifyListeners(\"myPluginEvent\", data: [:])\n```\n\n----------------------------------------\n\nTITLE: Storage Remove Method TypeScript Definition\nDESCRIPTION: Type definition for the Storage.remove() method which deletes a value by key and returns a promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/storage.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremove(options: { key: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: EventListenerOptions Interface Definition - TypeScript\nDESCRIPTION: Defines basic options for event listeners with a capture flag. This interface specifies whether events are captured in the capturing or bubbling phase.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventListenerOptions {\n  capture: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Android Storage Permissions\nDESCRIPTION: Required Android manifest permissions for saving photos to gallery\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Building Web Assets for Ionic App (Bash)\nDESCRIPTION: Compiles the Ionic Angular application and generates the optimized web assets in the 'www' directory (by default). This build step is necessary before adding native platforms or updating them with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Updating iOS .gitignore for Capacitor 1.1\nDESCRIPTION: This snippet shows the changes to be made in the iOS .gitignore file. It adds 'Podfile.lock' to the list of ignored files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/1-1.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n App/build\n App/Pods\n App/public\n+App/Podfile.lock\n xcuserdata\n\n # Cordova plugins for Capacitor\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager\nDESCRIPTION: Command to install Homebrew package manager on macOS, which is required for installing CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Router and NgZone Injection in Angular App Component - TypeScript\nDESCRIPTION: Defines the Angular component constructor, injecting Router and NgZone, and calls the initializeApp method. This ensures that the deep link routing functionality is set up when the app initializes. Requires Angular dependency injection and that 'initializeApp' is implemented within the component.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private router: Router, private zone: NgZone) {\n    this.initializeApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Native Capacitor Plugins and Creating a Custom JS Wrapper using TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Plugins` object from `@capacitor/core` to access the underlying native plugin (`SuperGreatPlugin`). It then defines a TypeScript class (`CustomSuperPlugin`) that acts as a custom JavaScript frontend, wrapping a method call (`awesome`) to the native plugin. This pattern is used when you need custom JavaScript logic or a specific API design for your plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/js.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Plugins } from '@capacitor/core';\n\nconst { SuperGreatPlugin } = Plugins;\n\nexport class CustomSuperPlugin {\n  constructor() {}\n  customAwesomeness() {\n    SuperGreatPlugin.awesome();\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling iPad Orientation Lock in Info.plist\nDESCRIPTION: XML configuration for Info.plist that enables full-screen mode on iPad, which is required for orientation locking to work properly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>UIRequiresFullScreen</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Switching to automatic Android plugin loading\nDESCRIPTION: Updates MainActivity.java to remove the manual plugin registration, allowing Capacitor 3 to automatically load plugins installed via npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-\n-        // Initializes the Bridge\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n-            // Additional plugins you've installed go here\n-            add(Plugin1.class);\n-            add(Plugin2.class);\n-        }});\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Serialization in Swift for Capacitor Plugin\nDESCRIPTION: Shows how to configure date serialization behavior in a Capacitor plugin. This example demonstrates opting out of automatic date stringification for plugin calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\noverride func load() {\n    shouldStringifyDatesInCalls = false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/haptics with npm - Bash\nDESCRIPTION: Demonstrates how to install the @capacitor/haptics plugin and synchronize it with your Capacitor project. Requires Node.js and npm or yarn installed. Running these commands installs the library to your project dependencies and ensures Capacitor is aware of the new plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/haptics\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Removing Old Capacitor 2 Storage Data in TypeScript\nDESCRIPTION: API definition for the `removeOld` method. This asynchronous function removes data stored by the Capacitor 2 Storage plugin (keys typically prefixed with `_cap_`). It is intended to be used after a successful migration using the `migrate` method. Returns a Promise that resolves once the old data is removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOld() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Core in TypeScript\nDESCRIPTION: Demonstrates how to import the Capacitor core module in a TypeScript project. This is typically used in apps with a build system that supports JavaScript modules.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Angular\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in an Angular application's main.ts file, including production mode check.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/web/pwa-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n// Call the element loader before the bootstrapModule/bootstrapApplication call\ndefineCustomElements(window);\nif (environment.production) {\n  enableProdMode();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor React Hooks via npm\nDESCRIPTION: This command installs the community-maintained React hooks for Capacitor using npm. These hooks simplify access to Capacitor APIs in React function components.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/react-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Package Manager Dependencies for Capacitor Plugins\nDESCRIPTION: Demonstrates how to set up Swift Package Manager dependencies for a Capacitor plugin using the Package.swift file. The example adds FirebaseFirestore and its required components.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n...\nlet package = Package(\n...\n    dependencies: [\n        .package(url: \"https://github.com/ionic-team/capacitor-swift-pm.git\", from: \"7.0.0\"),\n        .package(url: \"https://github.com/firebase/firebase-ios-sdk.git\",  from: \"11.8.0\")\n    ],\n    targets: [\n        .target(\n            name: \"FirebaseFirestorePlugin\",\n            dependencies: [\n                .product(name: \"Capacitor\", package: \"capacitor-swift-pm\"),\n                .product(name: \"Cordova\", package: \"capacitor-swift-pm\"),\n                .product(name: \"FirebaseCore\", package: \"firebase-ios-sdk\"),\n                .product(name: \"FirebaseFirestore\", package: \"firebase-ios-sdk\")\n            ],\n            path: \"ios/Plugin\")\n    ]\n...\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Single-Completion Plugin Calls in Capacitor (Swift)\nDESCRIPTION: Defines the Swift methods (`saveCall`, `savedCall`, `releaseCall`) provided by the Capacitor bridge on iOS for managing plugin calls (`CAPPluginCall`) that need to be saved for a single future completion. These methods allow saving a call, retrieving it later by its ID, and releasing it once resolved or rejected.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nfunc saveCall(_ call: CAPPluginCall)\nfunc savedCall(withID: String) -> CAPPluginCall?\nfunc releaseCall(_ call: CAPPluginCall)\nfunc releaseCall(withID: String)\n```\n```\n\n----------------------------------------\n\nTITLE: Android Geolocation Permissions XML\nDESCRIPTION: Required Android manifest permissions for geolocation functionality\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation API -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Full Example Podfile for Firebase Push Notifications - Ruby\nDESCRIPTION: This complete Podfile configures the iOS deployment version, enables necessary CocoaPods settings, and bundles both Capacitor and Firebase dependencies for your app. It should replace your current Podfile or be updated to ensure all lines, particularly those under the App target, are present. No additional input is required, but you need the correct filesystem paths and package names as used in your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '11.0'\nuse_frameworks!\n\n# workaround to avoid Xcode caching of Pods that requires\n# Product -> Clean Build Folder after new Cordova plugins installed\n# Requires CocoaPods 1.6 or newer\ninstall! 'cocoapods', :disable_input_output_paths => true\n\ndef capacitor_pods\n  # Automatic Capacitor Pod dependencies, do not delete\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\n\n  # Do not delete\nend\n\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'FirebaseCore', '7.11.0'\n  pod 'Firebase/Messaging', '7.11.0'\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: Command to install Xcode Command Line Tools required for iOS development with Capacitor\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/dependencies.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript method signature defines 'getPending', a function to retrieve all notifications that are scheduled but have not yet been delivered. It returns a promise with a PendingResult. Dependency: the PendingResult type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetPending() => Promise<PendingResult>\n```\n\n----------------------------------------\n\nTITLE: Markdown Content for Extension Recommendations\nDESCRIPTION: Markdown content explaining the various scenarios where the VS Code extension provides recommendations for Capacitor projects, including package deprecations, plugin alternatives, and configuration issues.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/vs-code-ext/recommendations.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Recommendations\ndescription: Visual Studio Code Extension for Capacitor\ncontributors:\n  - dtarnawsky\nslug: /vscode/recommendations\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server\nDESCRIPTION: Command to start the local development server for framework-based applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/live-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining WatchPositionCallback Type Alias in TypeScript\nDESCRIPTION: Defines the callback function signature for watching position changes, accepting a Position object or null and optional error parameter\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n(position: Position | null, err?: any): void\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase in AppDelegate.swift\nDESCRIPTION: Import statement for Firebase to be added at the top of the AppDelegate.swift file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Firebase\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Migration Command\nDESCRIPTION: Command to execute the Capacitor migration assistant that automates the update process from version 5 to 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Updating gitignore file for iOS public folder\nDESCRIPTION: Updates the .gitignore file to reflect the new location of the public folder in iOS. Changes the ignore path from App/public to App/App/public to ensure the copied web assets aren't committed to the repository.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n App/build\n App/Pods\n-App/public\n+App/App/public\n App/Podfile.lock\n xcuserdata\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in build.gradle\nDESCRIPTION: Updates the targetSDK, compileSDK to 35 and minSDK to 23 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nandroid {\n-    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34\n+    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 35\ndefaultConfig {\n-        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 22\n+        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23\n-        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34\n+        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 35\n...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Jetifier for Android X Compatibility\nDESCRIPTION: Commands to install and run the jetifier tool, which patches Cordova or Capacitor plugins that don't yet use Android X, ensuring compatibility with Capacitor 2.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/updating.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D jetifier\nnpx jetifier\n```\n\n----------------------------------------\n\nTITLE: Importing AppUrlListener Component in React (TypeScript)\nDESCRIPTION: This snippet shows how to import the AppUrlListener helper component, which handles deep linking, into the main application file in a React Project using TypeScript. Ensures that deep link handling is included during app initialization. No special parameters or output; must be present wherever routing is bootstrapped.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AppUrlListener from './pages/AppUrlListener';\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Notification Options - TypeScript\nDESCRIPTION: Interface definition for badge notification settings including count and notification text properties.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/background-runner.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationBadgeOptions {\n  count: number;\n  notificationTitle: string;\n  notificationSubtitle?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying the Capacitor Plugin Build\nDESCRIPTION: Command to verify that the plugin code has been properly ported and can be built without errors. This is an important step before publishing the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Blob Interface Type Definition\nDESCRIPTION: Interface for handling file-like objects of immutable, raw data with size and type properties and methods for data manipulation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Blob {\n  size: number;\n  type: string;\n  arrayBuffer(): Promise<ArrayBuffer>;\n  slice(start?: number, end?: number, contentType?: string): Blob;\n  stream(): ReadableStream;\n  text(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Android Project Variables for Capacitor 6\nDESCRIPTION: Required updates to the variables.gradle file with new minimum SDK versions and dependency versions for compatibility with Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 34\ntargetSdkVersion = 34\nandroidxActivityVersion = '1.8.0'\nandroidxAppCompatVersion = '1.6.1'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.12.0'\nandroidxFragmentVersion = '1.6.2'\ncoreSplashScreenVersion = '1.0.1'\nandroidxWebkitVersion = '1.9.0'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.5'\nandroidxEspressoCoreVersion = '3.5.1'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Installing Text Zoom Capacitor Plugin\nDESCRIPTION: Bash commands to install the Text Zoom Capacitor plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/text-zoom.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/text-zoom@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Vue\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a Vue application's main file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/pwa-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  el: '#app',\n  router,\n  template: '<App/>',\n  components: { App },\n});\n\n// Call the element loader after the platform has been bootstrapped\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Configuration\nDESCRIPTION: Command to initialize Capacitor with app name and bundle identifier. Uses npx to execute local binaries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init [appName] [appId]\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Interface in TypeScript\nDESCRIPTION: This code snippet defines the Channel interface for configuring notification channels in Capacitor. It includes properties for channel identification, appearance, and behavior settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Channel {\n  id: string;\n  name: string;\n  description: string;\n  sound: string;\n  importance: Importance;\n  visibility: Visibility;\n  lights: boolean;\n  lightColor: string;\n  vibration: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventListenerObject Interface in TypeScript\nDESCRIPTION: This code snippet defines the EventListenerObject interface with its handleEvent method. It specifies the method signature for handling events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventListenerObject {\n  handleEvent(evt: Event): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Device getLanguageCode Method Signature\nDESCRIPTION: TypeScript method signature for getLanguageCode() that returns a Promise containing the device's current language locale code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageCode() => Promise<GetLanguageCodeResult>\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Methods in Web Plugin in TypeScript\nDESCRIPTION: This snippet shows the skeleton implementation of checkPermissions() and requestPermissions() methods in a Capacitor web plugin. It includes error handling for unsupported browsers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync checkPermissions(): Promise<PermissionStatus> {\n  if (typeof navigator === 'undefined' || !navigator.permissions) {\n    throw this.unavailable('Permissions API not available in this browser.');\n  }\n\n  const permission = await navigator.permissions.query( ... );\n\n  // TODO\n}\n\nasync requestPermissions(): Promise<PermissionStatus> {\n  // TODO: does the web support requesting permissions for my plugin?\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an npm Script for Automated Configuration - JSON\nDESCRIPTION: This code shows how to define a custom npm script (\"cap-config\") in package.json to run the Trapeze CLI tool with a YAML config file for automated project configuration. The script executes 'trapeze run config.yaml', where 'config.yaml' should follow Trapeze's expected format. This approach requires Trapeze to be installed as a dev dependency and is suitable for CI/CD and plugin-driven workflows.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/automated-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"cap-config\": \"trapeze run config.yaml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Network Listeners Method Definition\nDESCRIPTION: TypeScript method signature for removing all native network status listeners.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/network.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => void\n```\n\n----------------------------------------\n\nTITLE: Defining AbortSignalEventMap Interface in TypeScript\nDESCRIPTION: This snippet defines the AbortSignalEventMap interface, which maps the 'abort' event to the Event type. This is used in conjunction with the AbortSignal interface for event handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AbortSignalEventMap {\n  \"abort\": Event;\n}\n```\n\n----------------------------------------\n\nTITLE: Haptics Selection End Method Signature - TypeScript\nDESCRIPTION: Describes the selectionEnd function, which finalizes a selection operation and ends the related haptic sequence. No arguments. Asynchronous, returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nselectionEnd() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android API Key (XML)\nDESCRIPTION: Adds the Google Maps API key to the AndroidManifest.xml file within the <application> tag. This is required for the Google Maps SDK on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"YOUR_API_KEY_HERE\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing FFI on Apple Silicon Mac\nDESCRIPTION: Commands to resolve the FFI bus error on Apple Silicon Macs by installing and running pod install using Rosetta x86_64 architecture.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Defining iOSSystemBrowserOptions Interface in TypeScript\nDESCRIPTION: Interface specifying configuration options for iOS Safari View Controller including close button text, view style, animation effects and browser behavior settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface iOSSystemBrowserOptions {\n  closeButtonText?: DismissStyle;\n  viewStyle?: iOSViewStyle;\n  animationEffect?: iOSAnimation;\n  enableBarsCollapsing?: boolean;\n  enableReadersMode?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Block-based API in Swift for Capacitor iOS\nDESCRIPTION: Shows how to implement requestPermissions using a block-based API for video capture permissions\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in\n        self?.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Common Variables for Android\nDESCRIPTION: Create a variables.gradle file with common version numbers and configurations for the Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\next {\n  minSdkVersion = 21\n  compileSdkVersion = 29\n  targetSdkVersion = 29\n  androidxAppCompatVersion = '1.1.0'\n  androidxCoreVersion =  '1.2.0'\n  androidxMaterialVersion =  '1.1.0-rc02'\n  androidxBrowserVersion =  '2.0.0'\n  androidxLocalbroadcastmanagerVersion =  '1.0.0'\n  firebaseMessagingVersion =  '20.1.2'\n  playServicesLocationVersion =  '17.0.0'\n  junitVersion =  '4.12'\n  androidxJunitVersion =  '1.1.1'\n  androidxEspressoCoreVersion =  '3.2.0'\n  cordovaAndroidVersion =  '7.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Wiring Plugin Method to Orientation Implementation in Swift\nDESCRIPTION: This Swift code expands the ScreenOrientationPlugin to delegate the orientation method to the ScreenOrientation implementation class. When the orientation method is called from JavaScript, it returns the current device orientation in a promise. Dependencies include CAPPlugin and the implementation class; the output is a resolved object containing the orientation type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n@objc(ScreenOrientationPlugin)\\npublic class ScreenOrientationPlugin: CAPPlugin {\\n\\n  private let implementation = ScreenOrientation()\\n\\n  @objc public func orientation(_ call: CAPPluginCall) {\\n    let orientationType = implementation.getCurrentOrientationType();\\n    call.resolve([\\\"type\\\": orientationType])\\n  }\\n\\n  /* Remaining code omitted for brevity */\\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying the Map Instance - TypeScript\nDESCRIPTION: Destroys the current Google Map instance and releases associated resources. No parameters required. Method is asynchronous and returns a void Promise. It should be called before component or application teardown.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndestroy() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Example Podfile with Firebase Messaging Integration (Ruby)\nDESCRIPTION: This provides a full example of a `Podfile` for a Capacitor iOS project, demonstrating where the `pod 'Firebase/Messaging'` line is added alongside the standard Capacitor pods within the `target 'App'` block. It specifies the iOS platform version (12.0) and uses `use_frameworks!`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '12.0'\nuse_frameworks!\n\n# workaround to avoid Xcode caching of Pods that requires\n# Product -> Clean Build Folder after new Cordova plugins installed\n# Requires CocoaPods 1.6 or newer\ninstall! 'cocoapods', :disable_input_output_paths => true\n\ndef capacitor_pods\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\nend\n\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'Firebase/Messaging'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Splash Theme with XML - XML\nDESCRIPTION: This snippet demonstrates how to set or modify the Android App Theme for the launch activity in styles.xml, specifically customizing the background drawable for the splash screen. The <style> element assigns a background image to the launch theme and inherits from a parent theme. Editing this configuration requires basic familiarity with Android app resource files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\\\"AppTheme.NoActionBarLaunch\\\" parent=\\\"AppTheme.NoActionBar\\\">\\n    <item name=\\\"android:background\\\">@drawable/splash</item>\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Removing Directories with Capacitor Filesystem API (rmdir)\nDESCRIPTION: Defines the `rmdir` method signature from the Capacitor Filesystem API. This asynchronous function takes `RmdirOptions` (specifying the path, optional directory, and recursive flag for deleting non-empty directories) and returns a Promise that resolves when the directory has been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrmdir(options: RmdirOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Polygon Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when a polygon is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnPolygonClickListener(callback?: MapListenerCallback<PolygonClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Change Tracking in ScreenOrientation\nDESCRIPTION: This snippet shows how to implement orientation change tracking in the ScreenOrientation class to avoid duplicate notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Nullable private int configOrientation;\n\npublic boolean hasOrientationChanged(int orientation) {\n    if (orientation == configOrientation) {\n        return false;\n    } else {\n        this.configOrientation = orientation;\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Capacitor Live Reload with Ionic CLI\nDESCRIPTION: These commands use the Ionic CLI to initiate a Live Reload session for Capacitor projects on Android and iOS. The `-l` flag enables live reload, and `--external` makes the development server accessible on the local network, necessary for running on physical devices. This command automates building, copying assets, and opening the native IDE.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/live-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic cap run android -l --external\nionic cap run ios -l --external\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS AppDelegate.swift for Screen Orientation Support\nDESCRIPTION: Required code modifications to the iOS AppDelegate.swift file to enable screen orientation functionality. This adds the necessary import and implements the supportedInterfaceOrientationsFor method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/packaging.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport UIKit\n+ import CapacitorCommunityScreenOrientation\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -\\> UIInterfaceOrientationMask {\n+     return ScreenOrientationPlugin.supportedOrientations\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Project Changes\nDESCRIPTION: Shows how to commit changes to the filesystem after making modifications to the project configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/automated-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.commit();\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Definitions for addListener Method\nDESCRIPTION: Change the return type of the addListener method to only return a Promise, removing the '& PluginListenerHandle' part.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/6-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  addListener(\n    eventName: 'resume',\n    listenerFunc: () => void,\n- ): Promise<PluginListenerHandle> & PluginListenerHandle;\n+ ): Promise<PluginListenerHandle>;\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in TypeScript\nDESCRIPTION: TypeScript definition for removing all native listeners for the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Motion Capacitor Plugin\nDESCRIPTION: Commands to install the Motion Capacitor plugin and synchronize it with your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/motion\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Including PWA Elements via Script Tags\nDESCRIPTION: HTML script tags to include PWA Elements directly in the index.html file, with both module and nomodule versions for compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/web/pwa-elements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js\"\n></script>\n<script\n  nomodule\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Defining the portablePath Method Signature in Swift\nDESCRIPTION: Shows the method signature for `portablePath` on the Capacitor bridge. This function translates a native iOS file URL (typically a `file://` URL) into a URL format that can be safely loaded and understood by the web view.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfunc portablePath(fromLocalURL localURL: URL?) -> URL?\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Code to Native Project in Capacitor\nDESCRIPTION: This command syncs your web application to your native project, copying the built web application (default 'www' directory) to the native project and installing native project dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Initializing Watch App Main Entry Point (Swift)\nDESCRIPTION: This Swift code defines the main entry point for the watchOS application using SwiftUI. It imports necessary frameworks (SwiftUI, WatchConnectivity, iOS_capWatch_watch), sets up the main App structure, and initializes the `CapWatchContentView` provided by the plugin. It also configures and activates the WatchConnectivity session for the watch app when the view appears.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport WatchConnectivity\nimport iOS_capWatch_watch\n\n@main\nstruct watchddgg_Watch_AppApp: App {\n    var body: some Scene {\n        WindowGroup {\n            CapWatchContentView()\n                .onAppear {\n                    assert(WCSession.isSupported(), \"This sample requires Watch Connectivity support!\")\n                    WCSession.default.delegate = WatchViewModel.shared\n                    WCSession.default.activate()\n                }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `inputValue` Property Type as `string` for LocalNotificationActionPerformed\nDESCRIPTION: Specifies that the `inputValue` property within the LocalNotificationActionPerformed interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Capacitor Configuration File\nDESCRIPTION: Example of a typed Capacitor configuration file (capacitor.config.ts) that includes plugin-specific settings and type references.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/local-notifications\" />\n/// <reference types=\"@capacitor/push-notifications\" />\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.capacitorjs.app.testapp',\n  appName: 'capacitor-testapp',\n  webDir: 'build',\n  plugins: {\n    SplashScreen: {\n      launchAutoHide: false,\n    },\n    LocalNotifications: {\n      smallIcon: 'ic_stat_icon_config_sample',\n      iconColor: '#CE0B7C',\n    },\n    PushNotifications: {\n      presentationOptions: ['alert', 'sound'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Example Complete AppDelegate.swift with Firebase Messaging Support - Swift\nDESCRIPTION: This Swift code presents a near-complete AppDelegate.swift file for a Capacitor iOS app with Firebase Messaging integration. It shows imports, class declaration, window property, and key AppDelegate lifecycle methods. It configures Firebase and implements notification registration event handling with NotificationCenter callbacks. Dependencies: Capacitor, Firebase/Messaging, and proper Info.plist setup. Inputs: UIApplication events and launch options. Outputs: Registers the app with Firebase Messaging and posts results to NotificationCenter. Limitation: The snippet may need additional code (e.g., closing braces) for use as a drop-in replacement.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport Firebase\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    FirebaseApp.configure()\n    return true\n  }\n\n  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Messaging.messaging().apnsToken = deviceToken\n    Messaging.messaging().token(completion: { (token, error) in\n      if let error = error {\n          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n      } else if let token = token {\n          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n      }\n    })\n  }\n\n  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Event Interface Methods Type Definitions\nDESCRIPTION: Type definitions for DOM Event interface methods including path composition, event initialization, and propagation control.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Event {\n  composedPath(): EventTarget[];\n  initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\n  preventDefault(): void;\n  stopImmediatePropagation(): void;\n  stopPropagation(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `iosUNNotificationAttachmentOptionsThumbnailHiddenKey` Property Type as `string`\nDESCRIPTION: Specifies that the `iosUNNotificationAttachmentOptionsThumbnailHiddenKey` property within the LocalNotificationAttachmentOptions interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Adding a Native Platform Project using Capacitor CLI (Bash)\nDESCRIPTION: This command utilizes the Capacitor CLI via `npx` to add a native platform project (either 'android' or 'ios') to the current Capacitor application. The `<platform>` argument is required and specifies which native platform to add.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add <platform>\n```\n\n----------------------------------------\n\nTITLE: Accessing Bridge Instance in Android Plugin\nDESCRIPTION: Shows how to access the Capacitor bridge instance from within a plugin. The bridge provides core functionality for plugin operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nthis.bridge\n```\n\n----------------------------------------\n\nTITLE: Updating Android Package Name (Java)\nDESCRIPTION: Specifies the Java package declaration that should be used at the top of the Android Java source files (`ScreenOrientation.java`, `ScreenOrientationPlugin.java`) within the generated plugin project. This package name corresponds to the `--package-id` provided during project generation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.plugins.screenorientation\n```\n\n----------------------------------------\n\nTITLE: Converting Array with NSNull to Swift Optional Array (Swift)\nDESCRIPTION: This Swift snippet demonstrates the correct way to handle an array containing `NSNull` values retrieved from a Capacitor plugin call. It uses the Capacitor-provided `capacitor.replacingNullValues()` extension method on the retrieved array (of type `[JSValue]`) and then attempts to cast the result to the desired Swift optional array type (`[Int?]`). This extension correctly maps `NSNull` instances to `nil` within the Swift array.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nif let values = call.getArray(\"bar\")?.capacitor.replacingNullValues() as? [Int?] {\n    // GOOD: `values` is now cast to `[Int?]?` with `nil` at index 2\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining LocalNotificationSchema Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the LocalNotificationSchema using a markdown table. It includes details such as property names, types, descriptions, and the version each property was introduced.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                   | Type                                          | Description| Since |\n| ---------------------- | --------------------------------------------- || ----- |\n| **`title`**            | <code>string</code>                           | The title of the notification| 1.0.0 |\n| **`body`**             | <code>string</code>                           | The body of the notification, shown below the title| 1.0.0 |\n| **`largeBody`**        | <code>string</code>                           | Sets a multiline text block for display in a big text notification style| 1.0.0 |\n| **`summaryText`**      | <code>string</code>                           | Used to set the summary text detail in inbox and big text notification styles. Only available for Android| 1.0.0 |\n| **`id`**               | <code>number</code>                           | The notification identifier. On Android it's a 32-bit int. So the value should be between -2147483648 and 2147483647 inclusive.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | 1.0.0 |\n| **`schedule`**         | <code><a href=\"#schedule\">Schedule</a></code> | <a href=\"#schedule\">Schedule</a> this notification for a later time.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | 1.0.0 |\n| **`sound`**            | <code>string</code>                           | Name of the audio file to play when this notification is displayed. Include the file extension with the filename. On iOS, the file should be in the app bundle. On Android, the file should be in res/raw folder. Recommended format is `.wav` because is supported by both iOS and Android. Only available for iOS and Android &lt; 26. For Android 26+ use channelId of a channel configured with the desired sound. If the sound file is not found, (i.e. empty string or wrong name) the default system notification sound will be used. If not provided, it will produce the default sound on Android and no sound on iOS. | 1.0.0 |\n| **`smallIcon`**        | <code>string</code>                           | Set a custom status bar icon. If set, this overrides the `smallIcon` option from Capacitor configuration. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                     | 1.0.0 |\n| **`largeIcon`**        | <code>string</code>                           | Set a large icon for notifications. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                                           | 1.0.0 |\n| **`iconColor`**        | <code>string</code>                           | Set the color of the notification icon. Only available for Android| 1.0.0 |\n| **`attachments`**      | <code>Attachment[]</code>                     | Set attachments for this notification| 1.0.0 |\n| **`actionTypeId`**     | <code>string</code>                           | Associate an action type with this notification| 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Creating New Capacitor Project\nDESCRIPTION: Command to create a fresh Capacitor project with a basic project structure.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/cli create\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications Presentation Options in Capacitor\nDESCRIPTION: JSON configuration for controlling how push notifications appear when the app is in the foreground on iOS, setting presentation options in capacitor.config.json.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"plugins\": {\n  \"PushNotifications\": {\n    \"presentationOptions\": [\"badge\", \"sound\", \"alert\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Method in ScreenOrientationPlugin for Swift\nDESCRIPTION: This method handles the lock call in the ScreenOrientationPlugin, validating input and updating the supported orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func lock(_ call: CAPPluginCall) {\n  guard let lockToOrientation = call.getString(\"orientation\") else {\n    call.reject(\"Input option 'orientation' must be provided.\")\n    return\n  }\n  implementation.lock(lockToOrientation, completion: { (mask) -> Void in\n    ScreenOrientationPlugin.supportedOrientations = mask;\n    call.resolve()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Command to open the iOS project in Xcode using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Defining Encoding Enum in TypeScript\nDESCRIPTION: Defines an enum for Encoding with various encoding types, their values, and descriptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nenum Encoding {\n  UTF8 = 'utf8',\n  ASCII = 'ascii',\n  UTF16 = 'utf16'\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Opening iOS Xcode Workspace using 'open' Command\nDESCRIPTION: This command uses the macOS `open` utility to directly launch the Xcode workspace file (`App.xcworkspace`) located within the `ios/App` directory of the Capacitor project. This is an alternative method to `npx cap open ios` for accessing the native iOS project in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/App/App.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Setting Info Window Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when an info window is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnInfoWindowClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Importing FirebaseCore in AppDelegate - Swift\nDESCRIPTION: Add this Swift import statement at the top of your AppDelegate.swift file to access the FirebaseCore API, a dependency necessary for initializing Firebase services within the app lifecycle. Requires the 'FirebaseCore' pod to be installed and included in your project as per the Podfile configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nimport FirebaseCore\n```\n\n----------------------------------------\n\nTITLE: Opening Android Native Project in Android Studio using Capacitor CLI in Bash\nDESCRIPTION: This Bash example shows how to open the Android part of a Capacitor project in Android Studio via the Capacitor CLI. Intended for full control over the Android native code or for using Android Studio features beyond the CLI. Assumes Android Studio is installed and that Android has been added as a platform to your Capacitor project. On execution, Android Studio launches with the relevant project loaded.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/basics/workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Jetifier for AndroidX Migration\nDESCRIPTION: These commands install the 'jetifier' tool using npm and then run it using npx. Jetifier patches Node modules (like Cordova or older Capacitor plugins) that still use the old Android Support Library dependencies to use AndroidX instead, which is required by Capacitor 2.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\nnpx jetifier\n```\n\n----------------------------------------\n\nTITLE: Updating to Java 17 in build.gradle\nDESCRIPTION: Updates the Java compatibility to version 17 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\ncompileOptions {\n-    sourceCompatibility JavaVersion.VERSION_11\n+    sourceCompatibility JavaVersion.VERSION_17\n-    targetCompatibility JavaVersion.VERSION_11\n+    targetCompatibility JavaVersion.VERSION_17\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Maven Repository from Android Build Gradle\nDESCRIPTION: This diff snippet shows how to remove the maven repository entry from the Android app's build.gradle file, as it is no longer needed and can cause problems.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n repositories {\n-    maven {\n-        url \"https://dl.bintray.com/ionic-team/capacitor\"\n-    }\n     flatDir {\n         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Activity Result Handling with Callbacks in Android (Java)\nDESCRIPTION: This snippet shows how to transition from manually handling request codes for activity results to using string-based callback annotations (@ActivityCallback) in a Capacitor 3 Android plugin. The new implementation removes the need for static integer request codes, instead starting activities with a string identifier and providing a callback method to handle results. Dependencies: Capacitor 3 Android core. Inputs are intents and plugin calls; outputs are processed activity results resolved or rejected in the call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-static final int IMAGE_REQUEST = 10052;\n\n @PluginMethod\n public void chooseImage(PluginCall call) {\n     Intent intent = new Intent(Intent.ACTION_PICK);\n     intent.setType(\"image/*\");\n-    startActivityForResult(call, intent, IMAGE_REQUEST);\n+    startActivityForResult(call, intent, \"chooseImageResult\");\n }\n\n+@ActivityCallback\n+private void chooseImageResult(PluginCall call, ActivityResult result) {\n+    if (result.getResultCode() == Activity.RESULT_CANCELED) {\n+        call.reject(\"Activity canceled\");\n+    } else {\n+        Intent data = result.getData();\n+        // do something with the result data\n+        call.resolve(\"Success!\");\n+    }\n+}\n```\n\n----------------------------------------\n\nTITLE: Defining `notifications` Property Type as Array of `LocalNotificationRequest`\nDESCRIPTION: Specifies that the `notifications` property within the LocalNotificationPendingList interface must be an array of LocalNotificationRequest objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nLocalNotificationRequest[]\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Position for Google Maps in TypeScript\nDESCRIPTION: Sets the camera position for the Google Map instance using a CameraConfig object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nsetCamera(config: CameraConfig) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools (Bash)\nDESCRIPTION: This command initiates the installation of the Xcode Command Line Tools on macOS. These tools are additional components required alongside Xcode for building and testing iOS applications with Capacitor. User interaction (entering password) is typically required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Enabling Traffic Layer Overlay - TypeScript\nDESCRIPTION: Shows or hides the traffic overlay on the map, controlled with a boolean parameter. Asynchronous and returns a void Promise. Functional only if traffic data is available for the map region.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nenableTrafficLayer(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Map Bounds Change Listener in TypeScript\nDESCRIPTION: Sets up a listener for map bounds change events using a callback function that receives CameraIdleCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnBoundsChangedListener(callback?: MapListenerCallback<CameraIdleCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing AdMob Plugin for Capacitor using Shell Commands\nDESCRIPTION: This snippet demonstrates how to install the Capacitor Community AdMob plugin and update project dependencies using shell commands. These commands should be executed in the root directory of your Capacitor project. The first command installs the AdMob plugin via npm, while the second ensures all native platforms are synchronized with the latest dependencies. Both npm and Capacitor CLI (npx cap) must be installed. No direct input or output is expected, but errors will be output if dependencies are missing or the environment is misconfigured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/ads.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/admob\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Browser Plugin\nDESCRIPTION: Commands to install the @capacitor/browser plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/browser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/browser\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Permission for Cross-Platform Compatibility\nDESCRIPTION: Shows how to define a permission with an empty strings array when a permission is needed on other platforms but not on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Permission(\n    alias = \"notifications\",\n    strings = {}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on Android Device or Emulator\nDESCRIPTION: Runs the Capacitor app on a connected Android device or emulator, with interactive target selection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor CLI Command in Bash\nDESCRIPTION: This command runs the Capacitor CLI to view all available commands and options. It can be used with optional flags to display the version number or usage information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/cap.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap [-V] [-h]\n```\n\n----------------------------------------\n\nTITLE: rmdir API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `rmdir` method of the Capacitor Filesystem API. This asynchronous function removes a directory based on the provided `RmdirOptions` and returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrmdir(options: RmdirOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing ScreenOrientationPlugin Methods in TypeScript\nDESCRIPTION: Implements the orientation(), lock(), and unlock() methods for the ScreenOrientationWeb class. These methods interact with the Screen Orientation Web API and handle cases where the API is not available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ScreenOrientationWeb\n  extends WebPlugin\n  implements ScreenOrientationPlugin\n{\n  async orientation(): Promise<ScreenOrientationResult> {\n    if (typeof screen === 'undefined' || !screen.orientation) {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n    return { type: screen.orientation.type };\n  }\n\n  async lock(options: OrientationLockOptions): Promise<void> {\n    if (\n      typeof screen === 'undefined' ||\n      !screen.orientation ||\n      !(screen.orientation as any).lock\n    ) {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n    try {\n      await (screen.orientation as any).lock(options.orientation);\n    } catch {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n  }\n\n  async unlock(): Promise<void> {\n    if (\n      typeof screen === 'undefined' ||\n      !screen.orientation ||\n      !screen.orientation.unlock\n    ) {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n    try {\n      screen.orientation.unlock();\n    } catch {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Delivered Notifications - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This TypeScript function signature for 'removeDeliveredNotifications' defines a method to remove specified delivered notifications from the notification screen. Accepts a DeliveredNotifications object and returns a Promise. Requires DeliveredNotifications type and is available since plugin v4.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: DeliveredNotifications) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Method in Android (Java)\nDESCRIPTION: Shows the Java implementation for a Capacitor plugin method (`method1`) that returns no data on Android. It uses the `@PluginMethod` annotation with `returnType = PluginMethod.RETURN_NONE` to indicate that the promise resolution value should be ignored.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_NONE)\npublic void method1(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Community Admob Plugin\nDESCRIPTION: Commands to install the Capacitor Community Admob plugin and update Capacitor. This plugin allows integration of Google Admob advertisements in Capacitor applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/ads.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/admob\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Defining SettingsPermissionStatus Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the SettingsPermissionStatus object, which contains the permission state for using exact alarms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SettingsPermissionStatus {\n  exact_alarm: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore Certificate\nDESCRIPTION: Command to create a new Android keystore certificate for app signing and deep linking setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -v -keystore KEY-NAME.keystore -alias ALIAS -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Flavor in Capacitor\nDESCRIPTION: TypeScript code for specifying which Android product flavor to use in the Capacitor configuration file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nandroid: {\n   flavor: \"qa\",\n },\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Messaging Dependency in Podfile (Ruby)\nDESCRIPTION: This snippet shows how to add the `Firebase/Messaging` pod dependency within the `target 'App'` block of the project's `Podfile`. This ensures CocoaPods includes the Firebase SDK during installation, which is required for push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\ncapacitor_pods\n# Add your Pods here\npod 'Firebase/Messaging' # Add this line\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Watch Interaction API in Capacitor\nDESCRIPTION: Specifies the API for interacting with a watch paired with a Capacitor app. It includes methods for sending messages, transferring user info, updating application context, checking reachability, and updating the watch UI and data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n#### CapcacitorWatch\n\nInteract with a watch paired with this app\n\nsendMessage, transferUserInfo and updateApplicationContext are raw routes to the WCSession delegate methods, but have no effects currently in a CapactiorWatch Watch application.\nThey could be used if a native watch app is developed as a companion app to a Capacitor app\n\n| Prop                           | Type                                                                     | Description                                                                                                                                                 |\n| ------------------------------ | ------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`sendMessage`**              | <code>(options: []) =&gt; void</code>                                    | Sends a message to the watch with the sendMessage() WCSession delegate method This has no effect on a CapacitorWatch watch app                              |\n| **`transferUserInfo`**         | <code>(options: []) =&gt; void</code>                                    | Sends information to the watch with the transferUserInfo() WCSession delegate method This has no effect on a CapacitorWatch watch app                       |\n| **`updateApplicationContext`** | <code>(options: []) =&gt; void</code>                                    | Updates the application context on the watch with the updateApplicationContext() WCSession delegate method This has no effect on a CapacitorWatch watch app |\n| **`isReachable`**              | <code>boolean</code>                                                     | Checks to see if the compaion watch is reachable                                                                                                            |\n| **`updateWatchUI`**            | <code>(options: { watchUI: string; }) =&gt; void</code>                  | Replaces the current UI on the watch with what is specified here.                                                                                           |\n| **`updateWatchData`**          | <code>(options: { data: { [key: string]: string; }; }) =&gt; void</code> | Updates the data the watch is using to display variables in text and button fields                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Defining RmdirOptions Interface in TypeScript\nDESCRIPTION: Specifies the options for the `rmdir` (remove directory) operation in the Capacitor Filesystem API. It includes the path and base directory for the directory to be removed, along with a flag to enable recursive deletion.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Date Method Signatures in TypeScript\nDESCRIPTION: TypeScript method signatures for Date object operations including string conversions, time retrievals, and component manipulations in both local and UTC time. Methods include basic operations like toString(), time component getters/setters, and timezone operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string\ntoDateString(): string\ntoTimeString(): string\ntoLocaleString(): string\ntoLocaleDateString(): string\ntoLocaleTimeString(): string\nvalueOf(): number\ngetTime(): number\ngetFullYear(): number\ngetUTCFullYear(): number\ngetMonth(): number\ngetUTCMonth(): number\ngetDate(): number\ngetUTCDate(): number\ngetDay(): number\ngetUTCDay(): number\ngetHours(): number\ngetUTCHours(): number\ngetMinutes(): number\ngetUTCMinutes(): number\ngetSeconds(): number\ngetUTCSeconds(): number\ngetMilliseconds(): number\ngetUTCMilliseconds(): number\ngetTimezoneOffset(): number\nsetTime(time: number): number\nsetMilliseconds(ms: number): number\nsetUTCMilliseconds(ms: number): number\nsetSeconds(sec: number, ms?: number | undefined): number\nsetUTCSeconds(sec: number, ms?: number | undefined): number\nsetMinutes(min: number, sec?: number | undefined, ms?: number | undefined): number\nsetUTCMinutes(min: number, sec?: number | undefined, ms?: number | undefined): number\nsetHours(hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined): number\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Assets Package\nDESCRIPTION: Command to install the @capacitor/assets package as a development dependency using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/assets --save-dev\n```\n\n----------------------------------------\n\nTITLE: LocalNotificationSchema Properties Table in Markdown\nDESCRIPTION: Markdown table documenting the properties, types, and descriptions for LocalNotificationSchema. Includes version information and platform-specific details for configuring notifications in Capacitor applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                   | Type                                          | Description| Since |\n| ---------------------- | --------------------------------------------- || ----- |\n| **`title`**            | <code>string</code>                           | The title of the notification| 1.0.0 |\n| **`body`**             | <code>string</code>                           | The body of the notification, shown below the title| 1.0.0 |\n| **`largeBody`**        | <code>string</code>                           | Sets a multiline text block for display in a big text notification style| 1.0.0 |\n| **`summaryText`**      | <code>string</code>                           | Used to set the summary text detail in inbox and big text notification styles. Only available for Android| 1.0.0 |\n| **`id`**               | <code>number</code>                           | The notification identifier. On Android it's a 32-bit int. So the value should be between -2147483648 and 2147483647 inclusive.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | 1.0.0 |\n| **`schedule`**         | <code><a href=\"#schedule\">Schedule</a></code> | <a href=\"#schedule\">Schedule</a> this notification for a later time| 1.0.0 |\n| **`sound`**            | <code>string</code>                           | Name of the audio file to play when this notification is displayed. Include the file extension with the filename. On iOS, the file should be in the app bundle. On Android, the file should be in res/raw folder. Recommended format is `.wav` because is supported by both iOS and Android. Only available for iOS and Android &lt; 26. For Android 26+ use channelId of a channel configured with the desired sound. If the sound file is not found, (i.e. empty string or wrong name) the default system notification sound will be used. If not provided, it will produce the default sound on Android and no sound on iOS. | 1.0.0 |\n| **`smallIcon`**        | <code>string</code>                           | Set a custom status bar icon. If set, this overrides the `smallIcon` option from Capacitor configuration. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                     | 1.0.0 |\n| **`largeIcon`**        | <code>string</code>                           | Set a large icon for notifications. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                                           | 1.0.0 |\n| **`iconColor`**        | <code>string</code>                           | Set the color of the notification icon. Only available for Android| 1.0.0 |\n| **`attachments`**      | <code>Attachment[]</code>                     | Set attachments for this notification| 1.0.0 |\n| **`actionTypeId`**     | <code>string</code>                           | Associate an action type with this notification| 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Locking\nDESCRIPTION: Method to lock the screen orientation to a specific type by setting the activity's requested orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void lock(String orientationType) {\n   int orientationEnum = fromOrientationTypeToEnum(orientationType);\n   activity.setRequestedOrientation(orientationEnum);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Capacitor Bridge in Android Plugin\nDESCRIPTION: Shows how to access the Capacitor bridge object in an Android plugin. The bridge is the core component for interacting with the Capacitor runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nthis.bridge\n```\n\n----------------------------------------\n\nTITLE: Styling the Capacitor Google Map Component (CSS)\nDESCRIPTION: Provides basic CSS styling for the `<capacitor-google-map>` element. Since the element has no intrinsic size, explicit `width` and `height` are necessary for it to be rendered.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\ncapacitor-google-map {\n  display: inline-block;\n  width: 275px;\n  height: 400px;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WatchConnectivity Session in AppDelegate (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to initialize the WatchConnectivity session within the iOS application's AppDelegate. It asserts that WatchConnectivity is supported, sets the shared CapWatchSessionDelegate as the delegate for the default WCSession, and activates the session. This setup is required in the `application(_:didFinishLaunchingWithOptions:)` method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nassert(WCSession.isSupported(), \"This sample requires Watch Connectivity support!\")\nWCSession.default.delegate = CapWatchSessionDelegate.shared\nWCSession.default.activate()\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in Capacitor Browser Plugin\nDESCRIPTION: TypeScript definition for removeAllListeners() method, which removes all native listeners for this plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase SDK in AppDelegate - Swift\nDESCRIPTION: This Swift statement imports the Firebase module at the top of the AppDelegate.swift file, allowing you to use FirebaseApp and Messaging classes in your iOS app. Dependency: 'pod Firebase/Messaging' must be installed. Inputs/outputs: none directly; required for access to Firebase APIs. Limitation: Must be placed before using any Firebase-related classes in this file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport Firebase\n\n```\n\n----------------------------------------\n\nTITLE: Copying Capacitor Configuration to Native Projects - Bash\nDESCRIPTION: Runs the Capacitor command to propagate updated configuration and assets to all installed native projects. This ensures that native projects use the latest web assets and configuration, necessary when setting up live reload after config changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Constant for ASCII Encoding in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the ASCII encoding (Seven-bit ASCII/ISO646-US) using the 'ascii' string literal for file operations within the Capacitor Filesystem API. This encoding option is only supported on the Android platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n'ascii'\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Android Plugin Loading in MainActivity\nDESCRIPTION: Simplify `MainActivity.java` by removing the `onCreate` method override if it only contained the default `this.init` call for plugin registration. Capacitor 3 favors automatic loading for plugins installed via npm, making manual registration in `onCreate` unnecessary for those plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-\n-        // Initializes the Bridge\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n-            // Additional plugins you've installed go here\n-            add(Plugin1.class);\n-            add(Plugin2.class);\n-        }});\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Marker Drag Start Event Listener in TypeScript\nDESCRIPTION: Sets up a listener for marker drag start events with MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragStartListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Universal Links Site Association File\nDESCRIPTION: Provides the required JSON structure for the `apple-app-site-association` file used for iOS Universal Links. This file must be hosted at `/.well-known/apple-app-site-association` on the corresponding HTTPS website. It links the website to the app via `appID` (composed of Team ID and Bundle ID) and specifies which paths (`paths`) should trigger the app opening (`*` for all paths).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `vibration` Property Type as `boolean` for NotificationChannel\nDESCRIPTION: Specifies that the `vibration` property within the NotificationChannel interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Building the Web App Before Adding Native Platforms - Bash Command\nDESCRIPTION: Executes the build pipeline for the existing web project (typically a React, Angular, or Vue app), producing the output in the \\'www\\' directory. This build step is a prerequisite before adding iOS or Android platforms to ensure Capacitor references the correct assets. Requires Node.js, npm, and a frontend framework build system. Produces build artifacts in the default web directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project in Bash\nDESCRIPTION: Command to initialize a Capacitor project, prompting for app name and Bundle ID which can be found in the Cordova config.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Converting OrientationType to Int in Swift\nDESCRIPTION: This method maps a string representation of orientation type to its corresponding UIInterfaceOrientation raw value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToInt(_ orientationType: String) -> Int {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientation.landscapeLeft.rawValue\n  case \"landscape-secondary\":\n    return UIInterfaceOrientation.landscapeRight.rawValue\n  case \"portrait-secondary\":\n    return UIInterfaceOrientation.portraitUpsideDown.rawValue\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientation.portrait.rawValue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Push Notifications Plugin\nDESCRIPTION: Commands to install the Capacitor Push Notifications plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining the Local Notification Action Performed Listener (TypeScript)\nDESCRIPTION: Provides the TypeScript type signature for the `addListener` method specifically for the `localNotificationActionPerformed` event. This listener is triggered when a user interacts with a local notification action. It requires the event name ('localNotificationActionPerformed') and a callback function that receives an `ActionPerformed` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'localNotificationActionPerformed', listenerFunc: (notificationAction: ActionPerformed) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Copying Web Assets in Capacitor iOS Project\nDESCRIPTION: Command to copy only web assets to the iOS project, which is faster when native dependencies don't need updating.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: This command opens the Android Capacitor project in Android Studio. It allows for more control over the native Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Updating the iOS Native Project with Capacitor CLI - Bash\nDESCRIPTION: This Bash command uses the Capacitor CLI to update the native iOS project with new configuration or dependency changes (such as updated Podfile or added resources). Requires Capacitor CLI and prior iOS platform initialization. Input: none; Output: syncs and updates files in the iOS directory. Limitation: Should be run after any changes to native configuration or dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n\n```\n\n----------------------------------------\n\nTITLE: Changing App ID in Capacitor Android Apps\nDESCRIPTION: To modify the bundle/app ID for a Capacitor Android app, edit the applicationId line in the android/app/build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napplicationId \"com.getcapacitor.myapp\"\n```\n\n----------------------------------------\n\nTITLE: Opening the Android Project with Capacitor CLI - Bash\nDESCRIPTION: This Bash command uses the Capacitor CLI to open the Android project in Android Studio. Input: none; Output: launches Android Studio with the Android platform directory opened. Limitation: The project must already be initialized with 'npx cap add android'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Splash Screen Style\nDESCRIPTION: XML configuration for Android splash screen styling, showing how to disable the compatibility library by changing the parent theme.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"AppTheme.NoActionBar\">\n    <item name=\"android:background\">@drawable/splash</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Verifying the Plugin Build (Bash)\nDESCRIPTION: Executes the `verify` script defined in the plugin project's `package.json`. This command typically runs checks like linting, building the web assets, and potentially compiling native code to ensure the ported plugin code is correctly integrated and free of errors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Info Window Click Listener in TypeScript\nDESCRIPTION: Sets up a listener for info window click events with MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnInfoWindowClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS (Bash)\nDESCRIPTION: This command downloads and executes the official installation script for Homebrew, a package manager for macOS. Homebrew is recommended for easily installing CocoaPods, which is a dependency manager used by Capacitor for iOS projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Target SDK Version in variables.gradle - Groovy\nDESCRIPTION: This snippet sets the Android target SDK version in the /android/variables.gradle file for a Capacitor project. No external dependencies are required, but the correct targetSdkVersion value must match the major version of Capacitor in use. The key parameter is targetSdkVersion, which determines the maximum supported Android runtime. Ensure to update this value according to official Capacitor documentation for Google Play compliance. The only expected output is updating the build configuration; setting an unsupported target SDK may result in build or runtime compatibility issues.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/setting-target-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntargetSdkVersion = 34\n```\n\n----------------------------------------\n\nTITLE: Updating Android MainActivity Plugin Loading\nDESCRIPTION: Removing manual plugin initialization in favor of automatic plugin loading in MainActivity.java.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/4-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-\n-        // Initializes the Bridge\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n-            // Additional plugins you've installed go here\n-            add(Plugin1.class);\n-            add(Plugin2.class);\n-        }});\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS with SPM\nDESCRIPTION: Commands to install and set up a new Capacitor iOS project using Swift Package Manager instead of CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/spm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\nnpm run build\nnpx cap add ios --packagemanager SPM\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version for Capacitor 5.0\nDESCRIPTION: Updates the Kotlin version from 1.7.0 to 1.8.20 and modernizes the Kotlin standard library dependency for Capacitor 5.0 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\nbuildscript {\n-    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.7.0'\n+    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.8.20'\n    repositories {\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\ndependencies {\n-    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n+    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project Manually\nDESCRIPTION: Alternative command to manually open the iOS project workspace in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/App/App.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Defining the 'ALL' Barcode Type Hint Option (TypeScript)\nDESCRIPTION: The `CapacitorBarcodeScannerTypeHintALLOption` enum defines a single member `ALL` with a specific numeric value. This option can be used in the `hint` property of `CapacitorBarcodeScannerOptions` to indicate that the scanner should attempt to detect any supported barcode type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum CapacitorBarcodeScannerTypeHintALLOption {\n    ALL = 17\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Overlay Behavior (TypeScript API - Android Only)\nDESCRIPTION: This TypeScript signature defines the `setOverlaysWebView` method, which controls whether the status bar overlays the web content or pushes it down. It accepts an options object conforming to `SetOverlaysWebViewOptions` (specifying the boolean `overlay` value). This method is only functional on the Android platform and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/status-bar.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetOverlaysWebView(options: SetOverlaysWebViewOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Web Implementation for ScreenOrientation Plugin in TypeScript\nDESCRIPTION: Updates the registerPlugin function call to include the web implementation of the ScreenOrientation plugin. This allows the plugin to use the web implementation when running in a web environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n  {\n    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in Capacitor Android Apps\nDESCRIPTION: Set a custom URL scheme in strings.xml to allow your app to respond to custom URLs on launch. This enables deep linking and app interactions through URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"custom_url_scheme\">com.getcapacitor.myapp</string>\n```\n\n----------------------------------------\n\nTITLE: Defining LocalNotificationSchedule Interface in TypeScript\nDESCRIPTION: This code snippet defines the LocalNotificationSchedule interface used for scheduling local notifications in Capacitor. It includes options for setting the time, repetition, and frequency of notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LocalNotificationSchedule {\n  at?: Date;\n  repeats?: boolean;\n  every?: \"year\" | \"month\" | \"two-weeks\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\";\n  count?: number;\n  on?: {\n    year?: number;\n    month?: number;\n    day?: number;\n    hour?: number;\n    minute?: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week (UTC) with Date.getUTCDay() in JavaScript\nDESCRIPTION: The `getUTCDay()` method returns the day of the week (0-6) for the specified date according to universal time (UTC), where 0 represents Sunday.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCDay(): number\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum: CameraDirection\nDESCRIPTION: Enum defining camera direction options for front and rear cameras.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nenum CameraDirection {\n  Rear = 'REAR',\n  Front = 'FRONT'\n}\n```\n\n----------------------------------------\n\nTITLE: API Signature: removeAllListeners Method in TypeScript\nDESCRIPTION: Defines the signature for the `removeAllListeners` method. It takes no arguments and returns `void`. This method removes all registered event listeners for the InAppBrowser.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => void\n```\n\n----------------------------------------\n\nTITLE: Setting up Android Product Flavors\nDESCRIPTION: Modifies the Android Gradle file to set up product flavors for different environments.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nflavorDimensions \"environment\"\nproductFlavors {\n  dev {\n      dimension \"environment\"\n      manifestPlaceholders = [displayName:\"My App\"]\n  }\n  qa {\n      dimension \"environment\"\n      applicationIdSuffix \".qa\"\n      manifestPlaceholders = [displayName:\"My App - QA\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing File Viewer Plugin with NPM\nDESCRIPTION: Commands to install the Capacitor File Viewer plugin and sync with native platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/file-viewer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/file-viewer\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Disabling Android 12 Splash Screen Compatibility Library\nDESCRIPTION: XML configuration to disable the Android Splash Screen compatibility library by changing the parent theme in styles.xml.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/splash-screen.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"AppTheme.NoActionBar\">\n    <item name=\"android:background\">@drawable/splash</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in capacitor.config.ts - TypeScript\nDESCRIPTION: Illustrates using TypeScript to configure the Splash Screen plugin within capacitor.config.ts. The example makes use of type definitions for configuration validation and follows the CapacitorConfig interface. Similar to the JSON version, it sets up all configuration keys. Requires @capacitor/cli and relevant type definitions; outputs an exported config object for use in the Capacitor build system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\\\"@capacitor/splash-screen\\\" />\\n\\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    SplashScreen: {\\n      launchShowDuration: 3000,\\n      launchAutoHide: true,\\n      backgroundColor: \\\"#ffffffff\\\",\\n      androidSplashResourceName: \\\"splash\\\",\\n      androidScaleType: \\\"CENTER_CROP\\\",\\n      showSpinner: true,\\n      androidSpinnerStyle: \\\"large\\\",\\n      iosSpinnerStyle: \\\"small\\\",\\n      spinnerColor: \\\"#999999\\\",\\n      splashFullScreen: true,\\n      splashImmersive: true,\\n      layoutName: \\\"launch_screen\\\",\\n      useDialog: true,\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Listening to Map Click Events - TypeScript\nDESCRIPTION: Allows the application to register a callback for generic map click events, enabling custom interaction logic. The callback is optional and typed for MapClickCallbackData. Asynchronous and returns a void Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMapClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Unlock Method in ScreenOrientationPlugin (Swift)\nDESCRIPTION: This Swift `@objc` function exposes the screen unlocking functionality to Capacitor. It calls the `implementation.unlock` method and, within the completion handler, resets the static `ScreenOrientationPlugin.supportedOrientations` property to `UIInterfaceOrientationMask.all` to allow all orientations again.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@objc public func unlock(_ call: CAPPluginCall) {\n  implementation.unlock {\n    ScreenOrientationPlugin.supportedOrientations = UIInterfaceOrientationMask.all\n    call.resolve()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes (Local) with Date.setMinutes() in JavaScript\nDESCRIPTION: The `setMinutes()` method sets the minutes for a specified date according to local time. It requires the minutes value `min` (0-59) and optionally accepts seconds `sec` (0-59) and milliseconds `ms` (0-999). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nsetMinutes(min: number, sec?: number, ms?: number): number\n```\n\n----------------------------------------\n\nTITLE: Updating Java Compatibility to Java 17 for Capacitor 5.0\nDESCRIPTION: Updates the Java compatibility settings in build.gradle from Java 11 to Java 17 to support Capacitor 5.0 requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/5-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\ncompileOptions {\n-    sourceCompatibility JavaVersion.VERSION_11\n+    sourceCompatibility JavaVersion.VERSION_17\n-    targetCompatibility JavaVersion.VERSION_11\n+    targetCompatibility JavaVersion.VERSION_17\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientationPlugin in MainActivity\nDESCRIPTION: This snippet demonstrates how to register the ScreenOrientationPlugin in the MainActivity class of the Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin;\n\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;\n\npublic class MainActivity extends BridgeActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        registerPlugin(ScreenOrientationPlugin.class);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android Notification Channel in Capacitor\nDESCRIPTION: TypeScript method signature for creating a notification channel on Android 8.0+ (SDK 26+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChannel(channel: NotificationChannel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper to 8.0.2\nDESCRIPTION: Updates the Gradle wrapper version to 8.0.2 in the gradle-wrapper.properties file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Using Converted File Path in HTML\nDESCRIPTION: Demonstrates how to use the Web View-friendly path generated by `Capacitor.convertFileSrc` as the `src` attribute for an HTML `<img>` tag.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/web.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: Defining `granted` Property Type as `boolean` for NotificationPermissionResponse\nDESCRIPTION: Specifies that the `granted` property within the NotificationPermissionResponse interface must be of type boolean, indicating if permission was granted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Implementing requestPermissions using Delegate-based API in Swift\nDESCRIPTION: Illustrates handling permission requests for iOS frameworks that use a delegate pattern (e.g., `CLLocationManager`). It involves saving the `CAPPluginCall` using `bridge?.saveCall` before initiating the asynchronous permission request (`manager.requestWhenInUseAuthorization()`). The result is handled in the corresponding delegate method (`locationManager(_:didChangeAuthorization:)`), where the saved call is retrieved using `bridge?.getSavedCall` and then resolved by calling `checkPermissions`. The call is released using `bridge?.releaseCall` afterwards.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nvar permissionCallID: String?\nvar locationManager: CLLocationManager?\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    if let manager = locationManager, CLLocationManager.locationServicesEnabled() {\n        if CLLocationManager.authorizationStatus() == .notDetermined {\n            bridge?.saveCall(call)\n            permissionCallID = call.callbackId\n            manager.requestWhenInUseAuthorization()\n        } else {\n            checkPermissions(call)\n        }\n    } else {\n        call.reject(\"Location services are disabled\")\n    }\n}\n\npublic func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n    if let callID = permissionCallID, let call = bridge?.getSavedCall(callID) {\n        checkPermissions(call)\n        bridge?.releaseCall(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unlock Method in ScreenOrientationPlugin\nDESCRIPTION: Implements the unlock method in the plugin class, which calls the implementation's unlock method to allow the screen orientation to be determined by the system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void unlock(PluginCall call) {\n   implementation.unlock();\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platform with Capacitor CLI (Bash)\nDESCRIPTION: This Bash snippet shows how to add a native platform (either Android or iOS) to a Capacitor project using the CLI. The only dependency is that the \"npx\" executable and \"@capacitor/cli\" must be available in your Node.js environment. Replace \\u003cplatform\\u003e with either \"android\" or \"ios\" as required. Running this command generates platform-specific source directories within your project to support native functionality. Inputs must be one of the supported platforms; using any other value will result in an error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/commands/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add <platform>\n```\n\n----------------------------------------\n\nTITLE: Opening the iOS Project with Capacitor CLI - Bash\nDESCRIPTION: This Bash command uses the Capacitor CLI to open the iOS project in Xcode so you can add resources or perform additional configuration. Requires Capacitor CLI to be installed in your project. Input: none; Output: launches Xcode and opens the iOS workspace for editing. Limitation: Must be run from the root directory of a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n\n```\n\n----------------------------------------\n\nTITLE: Capacitor Haptics 'notification' Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Haptics.notification` method, used to trigger a notification feedback (e.g., success, warning, error). It accepts an optional `NotificationOptions` parameter to specify the type (defaulting to SUCCESS) and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnotification(options?: NotificationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications Presentation Options in TypeScript\nDESCRIPTION: TypeScript configuration for specifying how push notifications are displayed when the app is in the foreground.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/push-notifications\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    PushNotifications: {\n      presentationOptions: [\"badge\", \"sound\", \"alert\"],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Hosting React Scripts Server on 0.0.0.0 - Bash\nDESCRIPTION: Starts the React development server, binding it to 0.0.0.0 to allow LAN access for testing from physical devices. This is a recommended environment variable setup if using Create React App in a Capacitor project. Adjust the port if necessary.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHOST=0.0.0.0 npm run start\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Router with Vue Instance\nDESCRIPTION: Registers the configured `VueRouter` instance with the main Vue application instance and mounts the application to the DOM element with the ID `#app`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst VueApp = new Vue({\n  router,\n}).$mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Porting Cordova Plugin Preferences to Capacitor Configuration (JSON)\nDESCRIPTION: This JSON snippet belongs in the Capacitor configuration file (usually capacitor.config.json), under the 'cordova.preferences' object. It allows you to carry over plugin-specific preferences (like DisableDeploy) from Cordova's config.xml. The preferences are string values and can impact plugin behavior at runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cordova\": {\n    \"preferences\": {\n      \"DisableDeploy\": \"true\",\n      \"CameraUsesGeolocation\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `actions` Property Type as Array of `LocalNotificationAction`\nDESCRIPTION: Specifies that the `actions` property within the LocalNotificationActionType interface must be an array of LocalNotificationAction objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nLocalNotificationAction[]\n```\n\n----------------------------------------\n\nTITLE: Running build command for Capacitor web app\nDESCRIPTION: This bash command runs the build script defined in package.json to build the web code for a Capacitor app. It's typically used to build a Progressive Web App if configured.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/building-your-app.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Podfile for Multiple iOS Targets\nDESCRIPTION: Ruby code for the Podfile that adds Capacitor dependencies to both the default and QA iOS targets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n...snip...\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\nend\n\ntarget 'App QA' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Static Orientation Support Declaration\nDESCRIPTION: Declares a static property to maintain the currently supported orientation mask, initially set to support all orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\npublic static var supportedOrientations = UIInterfaceOrientationMask.all\n```\n\n----------------------------------------\n\nTITLE: Installing FFI and CocoaPods on Apple Silicon\nDESCRIPTION: Commands for installing FFI and running pod install on Apple Silicon Macs using Rosetta 2 architecture simulation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/faqs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Defining `options` Property Type as `LocalNotificationAttachmentOptions` for LocalNotificationAttachment\nDESCRIPTION: Specifies that the `options` property within the LocalNotificationAttachment interface must be of type LocalNotificationAttachmentOptions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#localnotificationattachmentoptions\">LocalNotificationAttachmentOptions</a>\n```\n\n----------------------------------------\n\nTITLE: Registering Screen Orientation Plugin with Capacitor\nDESCRIPTION: Implementation of the plugin registration using Capacitor's registerPlugin function. This code exports the plugin interface and creates a plugin instance that can be used throughout the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/designing-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nimport type { ScreenOrientationPlugin } from './definitions';\n\nconst ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(\n  'ScreenOrientation',\n);\n\nexport * from './definitions';\nexport { ScreenOrientation };\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Notifications Plugin in capacitor.config.ts - TypeScript\nDESCRIPTION: This snippet configures Local Notifications in a TypeScript-based capacitor.config.ts file. It imports the appropriate type definitions and creates a CapacitorConfig object specifying plugin options, similar to the JSON example. This approach allows type safety and IDE autocomplete but requires the file to be processed by the Capacitor CLI. Key parameters include smallIcon (drawable resource ID), iconColor (hex color), and sound (sound file name).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\\\"@capacitor/local-notifications\\\" />\\n\\nimport { CapacitorConfig } from '@capacitor/cli';\\n\\nconst config: CapacitorConfig = {\\n  plugins: {\\n    LocalNotifications: {\\n      smallIcon: \\\"ic_stat_icon_config_sample\\\",\\n      iconColor: \\\"#488AFF\\\",\\n      sound: \\\"beep.wav\\\",\\n    },\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Checking Privacy Screen Status in TypeScript\nDESCRIPTION: Function to check if privacy screen is currently enabled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/privacy-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled() => Promise<{ enabled: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Code to Capacitor Project\nDESCRIPTION: This command copies the built web bundle to Android and iOS projects and updates native dependencies. It's essential after building web code for distribution in a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms with Capacitor\nDESCRIPTION: Uses the Capacitor CLI (`npx cap`) to add the native iOS and Android platform projects to the application. These commands create the `ios` and `android` directories containing the respective native project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Android Manifest Permissions\nDESCRIPTION: Example of removing unnecessary permissions from AndroidManifest.xml for Haptics and Network plugins, as these permissions are now included in the plugins' own manifest files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n     <!-- Permissions -->\n\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n\n-    <!-- Network API -->\n-    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n-    <!-- Vibration API -->\n-    <uses-permission android:name=\"android.permission.VIBRATE\" />\n\n </manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining `id` Property Type as `string` for LocalNotificationActionType\nDESCRIPTION: Specifies that the `id` property within the LocalNotificationActionType interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Setting Minutes (UTC) with Date.setUTCMinutes() in JavaScript\nDESCRIPTION: The `setUTCMinutes()` method sets the minutes for a specified date according to universal time (UTC). It requires the minutes value `min` (0-59) and optionally accepts seconds `sec` (0-59) and milliseconds `ms` (0-999). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nsetUTCMinutes(min: number, sec?: number, ms?: number): number\n```\n\n----------------------------------------\n\nTITLE: Updating Pod Target Name in Ruby Podfile\nDESCRIPTION: Shows how to rename the target in the iOS Podfile when changing the app name. The target name should match the new app name configured in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'MyRenamedApp' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Marker Drag Event Listener in TypeScript\nDESCRIPTION: Establishes a listener for marker drag events using MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable on Mac\nDESCRIPTION: This code snippet demonstrates how to set the JAVA_HOME environment variable on Mac to resolve the 'Unable to locate a Java Runtime' error. It should be added to the .zshrc or .bashrc file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=\"/Applications/Android Studio.app/Contents/jbr/Contents/Home\"\n```\n\n----------------------------------------\n\nTITLE: Implementing `requestPermissions` with Unimplemented Stub (TypeScript)\nDESCRIPTION: This snippet provides an example implementation for the `requestPermissions` method on the web where requesting permission might not be separable from the API call itself (e.g., Geolocation). In such cases, it's recommended to throw an `unimplemented` error using `this.unimplemented()`, clearly indicating the limitation on the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nasync requestPermissions(): Promise<PermissionStatus> {\n  // TODO: does the web support requesting permissions for my plugin?\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using isNativePlatform for Conditional Logic\nDESCRIPTION: Shows how to use isNativePlatform to conditionally execute code only when running on native platforms (iOS or Android).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.isNativePlatform()) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Edit-Config Element for iOS in Cordova config.xml\nDESCRIPTION: Example of an edit-config element in Cordova's config.xml, which needs to be configured in Info.plist for Capacitor iOS projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<edit-config file=\"*-Info.plist\" mode=\"merge\" target=\"NSCameraUsageDescription\">\n    <string>Used to take photos</string>\n</edit-config>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/network Plugin - Bash\nDESCRIPTION: This snippet provides the commands needed to add the @capacitor/network plugin to a Capacitor project and synchronize native platform files. Dependencies include Node.js, npm, and an initialized Capacitor project. Execute these commands in the project root; the first installs the plugin, while the second updates native project assets. No parameters are required, and the commands must be run with appropriate shell permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/network\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Java Package Name in Android Plugin Files\nDESCRIPTION: Code snippet showing the package name declaration that should be used in the Android Java files for the plugin. This matches the package-id provided during plugin creation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.plugins.screenorientation\n```\n\n----------------------------------------\n\nTITLE: Defining SettingsPermissionStatus Interface in TypeScript\nDESCRIPTION: This code snippet defines the SettingsPermissionStatus interface, which represents the permission status for using exact alarms in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SettingsPermissionStatus {\n  exact_alarm: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Value Return Method in iOS (Objective-C)\nDESCRIPTION: This Objective-C snippet demonstrates declaring a Capacitor plugin method (`method2`) for iOS that returns a value. The `CAP_PLUGIN_METHOD` macro is used with `CAPPluginReturnPromise` to specify that this method will resolve the promise with data. The implementation should eventually call `[call resolve:@{ ... }]`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback Method in iOS (Objective-C)\nDESCRIPTION: Demonstrates how to declare a Capacitor plugin method (`method3`) that uses callbacks in the plugin's `.m` file for iOS. It uses the `CAP_PLUGIN_METHOD` macro with the `CAPPluginReturnCallback` return type specifier. The native implementation must retain the call to invoke the callback later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_6\n\nLANGUAGE: objectivec\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MapListenerCallback Type in TypeScript\nDESCRIPTION: Type alias for callback functions used with map event listeners. Takes generic type parameter T for the event data and returns void.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n(data: T): void\n```\n\n----------------------------------------\n\nTITLE: Cordova Preferences Configuration\nDESCRIPTION: Example of Cordova preferences configuration in Capacitor's configuration file\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cordova\": {\n    \"preferences\": {\n      \"DisableDeploy\": \"true\",\n      \"CameraUsesGeolocation\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Screen Orientation Not Implemented Error\nDESCRIPTION: Error message displayed when attempting to use the Screen Orientation plugin before implementing platform-specific code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUncaught (in promise) ScreenOrientation does not have web implementation.\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with Capacitor Filesystem API (deleteFile)\nDESCRIPTION: Defines the `deleteFile` method signature from the Capacitor Filesystem API. This asynchronous function takes `DeleteFileOptions` (specifying the path and optional directory of the file to delete) and returns a Promise that resolves when the file has been deleted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteFile(options: DeleteFileOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Android Plugins in MainActivity\nDESCRIPTION: If your application includes custom native Android plugins (built specifically for the app, not installed via npm), you must still register them explicitly within the `onCreate` method of `MainActivity.java` using `registerPlugin(YourCustomPlugin.class)`, even after enabling automatic loading for standard plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n+        registerPlugin(PluginInMyApp.class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing cordova-res globally using npm\nDESCRIPTION: This command installs the cordova-res tool globally on the system, which is used for generating splash screens and icons.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/splash-screens-and-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g cordova-res\n```\n\n----------------------------------------\n\nTITLE: Constant for UTF-8 Encoding in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the UTF-8 encoding (Eight-bit UCS Transformation Format) using the 'utf8' string literal for reading or writing text files with the Capacitor Filesystem API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n'utf8'\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Project with CocoaPods Dependencies\nDESCRIPTION: Command to update the iOS project with the newly added Firebase dependencies using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Defining `iosCustomDismissAction` Property Type as `boolean`\nDESCRIPTION: Specifies that the `iosCustomDismissAction` property within the LocalNotificationActionType interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Event Interface TypeScript Definition\nDESCRIPTION: TypeScript interface definition for DOM Event object, detailing all properties and methods available for event handling in the DOM, including event phases, propagation control, and event metadata.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Event {\n  bubbles: boolean;\n  cancelBubble: boolean;\n  cancelable: boolean;\n  composed: boolean;\n  currentTarget: EventTarget;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  returnValue: boolean;\n  srcElement: EventTarget;\n  target: EventTarget;\n  timeStamp: number;\n  type: string;\n  AT_TARGET: number;\n  BUBBLING_PHASE: number;\n  CAPTURING_PHASE: number;\n  NONE: number;\n\n  composedPath(): EventTarget[];\n  initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\n  preventDefault(): void;\n  stopImmediatePropagation(): void;\n  stopPropagation(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Screen Orientation Unlock Implementation\nDESCRIPTION: Implementation of the unlock method that releases orientation lock and allows device auto-rotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\npublic func unlock(completion: @escaping () -> Void) {\n  DispatchQueue.main.async {\n    let unknownOrientation = UIInterfaceOrientation.unknown.rawValue\n    UIDevice.current.setValue(unknownOrientation, forKey: \"orientation\")\n    UINavigationController.attemptRotationToDeviceOrientation()\n    completion()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Podfile for iOS QA Target\nDESCRIPTION: Modification to the Podfile to include the new 'App QA' target for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\nend\n\ntarget 'App QA' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Apple App Site Association Configuration\nDESCRIPTION: JSON configuration for Apple App Site Association file to enable credential autofill on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/autofill-credentials.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Camera Permission State Type Definition\nDESCRIPTION: Type definition for camera permission states including standard permission states and a 'limited' option.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionState = PermissionState | 'limited'\n```\n\n----------------------------------------\n\nTITLE: Haptics Vibrate Method Definition\nDESCRIPTION: TypeScript method signature for triggering device vibration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/haptics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvibrate() => void\n```\n\n----------------------------------------\n\nTITLE: File Interface Definition in TypeScript\nDESCRIPTION: Defines the File interface for handling file information and content access in web applications. Specifies core properties for file metadata.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface File {\n  lastModified: number;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS AppDelegate for Screen Orientation (Diff/Swift)\nDESCRIPTION: Provides instructions for modifying the `AppDelegate.swift` file in an iOS Capacitor project to integrate the Screen Orientation plugin. It involves importing the plugin module and implementing the `application(_:supportedInterfaceOrientationsFor:)` method to return the orientations supported by the plugin. This snippet is intended for the plugin's README documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/packaging.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport UIKit\n+ import CapacitorCommunityScreenOrientation\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n+     return ScreenOrientationPlugin.supportedOrientations\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Plugins for AndroidX using Jetifier - Bash\nDESCRIPTION: This Bash snippet installs the Jetifier tool and runs it to patch old Android support dependencies in plugins to AndroidX equivalents. It also performs a Capacitor sync to update the Android project with patched plugins. Dependencies include Node.js, npm, and Capacitor CLI. Run this when encountering 'package android.support.* does not exist' errors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\\nnpx jetify\\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Opening Native IDE\nDESCRIPTION: Command to open the native IDE for platform-specific development and debugging.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open\n```\n\n----------------------------------------\n\nTITLE: AttachmentOptions Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining iOS-specific attachment options for notifications, including type hints and thumbnail settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AttachmentOptions {\n  iosUNNotificationAttachmentOptionsTypeHintKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailHiddenKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailClippingRectKey: string;\n  iosUNNotificationAttachmentOptionsThumbnailTimeKey: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Including PWA Elements via Script Tags\nDESCRIPTION: HTML snippet for including PWA Elements through script tags in the index.html file. This method is not suitable for offline scenarios.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/pwa-elements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js\"\n></script>\n<script\n  nomodule\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard show() Method Signature\nDESCRIPTION: Defines the `show()` method of the Keyboard API, which programmatically shows the keyboard. This method returns a Promise that resolves when the action is complete. It is noted as alpha, may have issues, and is currently only supported on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshow() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Confirm Modal Interface Definition\nDESCRIPTION: TypeScript interface definition for the confirm modal function showing the options parameter type and return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/modals.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(options: ConfirmOptions) => Promise<ConfirmResult>\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Delivered Push Notifications in Capacitor\nDESCRIPTION: TypeScript method signature for removing specified notifications from the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDeliveredNotifications(delivered: PushNotificationDeliveredList) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Copy Command\nDESCRIPTION: Copies web app build and Capacitor configuration file into the native platform project. Can target specific platforms (Android/iOS) and supports inline JS source maps for debugging. Should be run after web app changes or configuration updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Defining PushNotificationSchema Interface in TypeScript\nDESCRIPTION: Comprehensive interface for push notification schema, including properties for title, body, id, badge, and various Android-specific fields.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PushNotificationSchema {\n  title: string;\n  subtitle: string;\n  body: string;\n  id: string;\n  tag: string;\n  badge: number;\n  notification: any;\n  data: any;\n  click_action: string;\n  link: string;\n  group: string;\n  groupSummary: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OrientationType to ActivityInfo Mapping in ScreenOrientation\nDESCRIPTION: Adds a helper method to convert orientation type strings (from JavaScript) to Android ActivityInfo orientation constants for locking screen orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate int fromOrientationTypeToEnum(String orientationType) {\n   switch (orientationType) {\n       case \"landscape-primary\":\n           return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n       case \"landscape-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;\n       case \"portrait-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;\n       default:\n           // Case: portrait-primary\n           return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Copying Splash Screens and Icons - Bash Commands Using cordova-res\nDESCRIPTION: Runs cordova-res tool for both iOS and Android to generate and copy splash screen and icon assets into the corresponding Capacitor native projects. Requires cordova-res installed globally and existing source images in the standard resources folder. Uses the --skip-config flag to bypass config file parsing and --copy to place the images in the correct place. Output: updated native projects with fresh assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncordova-res ios --skip-config --copy\ncordova-res android --skip-config --copy\n```\n\n----------------------------------------\n\nTITLE: Defining CameraResultType Enum in Markdown\nDESCRIPTION: Defines the CameraResultType enum which specifies the format of the camera result. It includes options for URI, Base64, and DataUrl formats.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### CameraResultType\n\n| Members       | Value                  |\n| ------------- | ---------------------- |\n| **`Uri`**     | <code>\"uri\"</code>     |\n| **`Base64`**  | <code>\"base64\"</code>  |\n| **`DataUrl`** | <code>\"dataUrl\"</code> |\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor in Ionic Project using Bash\nDESCRIPTION: Initializes Capacitor within the current Ionic project directory using the Capacitor CLI (`npx cap init`). This command prompts the user to enter the App Name and App Package ID, which are essential identifiers for the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init\n? App name: CapApp\n? App Package ID: com.mydomain.myappname\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App as a Progressive Web App\nDESCRIPTION: Command to serve a Capacitor app locally as a Progressive Web App. This launches a development web server and opens the app in a browser, though it's recommended to use your framework's built-in server tools for more comprehensive web development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/running-your-app.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap serve\n```\n\n----------------------------------------\n\nTITLE: Haptics Selection Start Method Signature - TypeScript\nDESCRIPTION: TypeScript signature for the selectionStart function, which initiates a selection-related haptic effect on the device. Does not accept parameters. Returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectionStart() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Capacitor iOS Plugin in Objective-C\nDESCRIPTION: Shows how to register a plugin and its methods using Capacitor Objective-C macros\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(EchoPlugin, \"Echo\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining `actionId` Property Type as `string` for LocalNotificationActionPerformed\nDESCRIPTION: Specifies that the `actionId` property within the LocalNotificationActionPerformed interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Adding Geolocation Permissions to Android Manifest\nDESCRIPTION: XML configuration for adding the required permissions for geolocation functionality in the Android manifest file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Geolocation API -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-feature android:name=\"android.hardware.location.gps\" />\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: Command to open the Android project in Android Studio using Capacitor CLI\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Getting Current Map Bounds in Google Maps\nDESCRIPTION: Gets the current viewport bounds of the map. Returns a Promise that resolves to a LatLngBounds object containing the northeast and southwest coordinates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ngetMapBounds() => Promise<LatLngBounds>\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rule for Third-Party Plugin\nDESCRIPTION: A ProGuard configuration rule example that exempts a specific third-party plugin from code shrinking and obfuscation, preserving all its classes and methods during the build process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: ProGuard\nCODE:\n```\n-keep class com.mythirdpartyplugin.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version\nDESCRIPTION: Diff showing the update to the Gradle wrapper distribution URL from 8.0.2 to 8.2.1 in the properties file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.2.1-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Updating Android App Build Gradle with Common Variables\nDESCRIPTION: Updates the app-level build.gradle to use the defined variables for SDK versions, making build configuration more maintainable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n android {\n-    compileSdkVersion 28\n+    compileSdkVersion rootProject.ext.compileSdkVersion\n     defaultConfig {\n         applicationId \"com.example.app\"\n-        minSdkVersion 21\n-        targetSdkVersion 28\n+        minSdkVersion rootProject.ext.minSdkVersion\n+        targetSdkVersion rootProject.ext.targetSdkVersion\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n```\n\n----------------------------------------\n\nTITLE: Installing PWA Elements via npm\nDESCRIPTION: Command to install the @ionic/pwa-elements package using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/pwa-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Updating Watch UI in TypeScript\nDESCRIPTION: This method replaces the current watch UI with a new UI specified in the options. It takes an object with a 'watchUI' string property and returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWatchUI(options: { watchUI: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening the Android Project with Capacitor - Bash\nDESCRIPTION: This shell command is used to open the Android project using Capacitor CLI, typically to allow configuration or running the app from Android Studio. It requires a Capacitor project set up with Android as a supported platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: iOS Third Party Cookies Configuration\nDESCRIPTION: XML configuration for enabling third-party cookies support on iOS 14+ by adding domain entries to Info.plist file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>WKAppBoundDomains</key>\n<array>\n  <string>www.mydomain.com</string>\n  <string>api.mydomain.com</string>\n  <string>www.myothercooldomain.com</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback Method in Objective-C for iOS\nDESCRIPTION: This snippet demonstrates how to declare a callback method in Objective-C for an iOS Capacitor plugin. The CAP_PLUGIN_METHOD macro is used with CAPPluginReturnCallback to specify the return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);\n)\n```\n\n----------------------------------------\n\nTITLE: Starting an Android Activity with an Intent (No Result) in Java\nDESCRIPTION: Shows the basic pattern for launching an Android Activity using an `Intent` from within a Capacitor plugin or other Android component, without expecting a result. It creates an `Intent` (using `ACTION_VIEW` as an example) and starts the corresponding Activity using `getActivity().startActivity()`. Requires Android SDK context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nIntent intent = new Intent(Intent.ACTION_VIEW);\ngetActivity().startActivity(intent);\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleOn Interface in TypeScript\nDESCRIPTION: Defines the ScheduleOn interface used for scheduling notifications. It includes properties for year, month, day, weekday, hour, minute, and second.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScheduleOn {\n  year: number;\n  month: number;\n  day: number;\n  weekday: Weekday;\n  hour: number;\n  minute: number;\n  second: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Scheme in Capacitor Config\nDESCRIPTION: TypeScript configuration to set the androidScheme to 'http' for backward compatibility in existing apps updating to Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  server: {\n    androidScheme: \"http\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Browserlist Configuration in Markdown\nDESCRIPTION: A markdown link reference to the browserlist documentation, demonstrating how to properly link to external configuration documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/recommendations.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`browserlist`](https://github.com/browserslist/browserslist)\n```\n\n----------------------------------------\n\nTITLE: Defining RenameResult and RenameOptions for Filesystem Plugin - TypeScript\nDESCRIPTION: Outlines the stub for RenameResult (output of a rename operation) and RenameOptions (inputs for renaming a file or directory), used in the Filesystem Plugin. No properties are defined in these code snippets, suggesting extension elsewhere or that they serve as placeholders/templates. Used in Filesystem.rename(). Dependencies/outputs may be specified in other locations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RenameResult {}\n\ninterface RenameOptions {}\n```\n\n----------------------------------------\n\nTITLE: Defining GetUriResult Interface in TypeScript\nDESCRIPTION: Defines the result interface returned when requesting a file's URI using the Capacitor Filesystem API. Contains the `uri` (string) of the specified file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetUriResult {\n  /**\n   * The uri of the file\n   * @since 1.0.0\n   */\n  uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Native IDEs for iOS and Android Projects - Bash\nDESCRIPTION: Opens the Xcode or Android Studio project for iOS or Android, respectively, in preparation for running the native app with live reload enabled. These commands expect Capacitor platforms to be previously added.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Defining the Keyboard addListener('keyboardDidShow') Method Signature\nDESCRIPTION: Defines the `addListener` method for subscribing to the `keyboardDidShow` event, which fires after the keyboard has finished animating into view. The listener function receives a `KeyboardInfo` object with the keyboard height. Returns a `PluginListenerHandle`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/keyboard.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'keyboardDidShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Angular\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in an Angular application, typically in main.ts. It also includes conditional production mode enabling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/pwa-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n// Call the element loader before the bootstrapModule/bootstrapApplication call\ndefineCustomElements(window);\nif (environment.production) {\n  enableProdMode();\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Map Initialization\nDESCRIPTION: Core TypeScript code for creating and manipulating a Google Map instance\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleMap } from '@capacitor/google-maps';\n\nconst apiKey = 'YOUR_API_KEY_HERE';\n\nconst mapRef = document.getElementById('map');\n\nconst newMap = await GoogleMap.create({\n  id: 'my-map',\n  element: mapRef,\n  apiKey: apiKey,\n  config: {\n    center: {\n      lat: 33.6,\n      lng: -117.9,\n    },\n    zoom: 8,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Value Return Methods in Objective-C\nDESCRIPTION: Objective-C declaration for a value return method in an iOS Capacitor plugin using the CAP_PLUGIN macro with CAPPluginReturnPromise return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Methods for Platform-Specific Features\nDESCRIPTION: Shows how to use the 'unimplemented' error to indicate that a method is not available on iOS. This is useful for methods that only make sense on other platforms like Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatRequiresAndroid(_ call: CAPPluginCall) {\n    call.unimplemented(\"Not implemented on iOS.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Capacitor Plugin Project with npx\nDESCRIPTION: Command to scaffold a new Capacitor plugin project using the official plugin generator. This creates the structure and configuration needed for a publishable plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/create-plugin \\\n  --name @capacitor-community/screen-orientation \\\n  --package-id io.ionic.plugins.screenorientation \\\n  --class-name ScreenOrientation \\\n  --repo \"https://ionic.io\" \\\n  --license \"MIT\" \\\n  --description \"Work with the screen orientation in a common way for iOS, Android, and web\"\n```\n\n----------------------------------------\n\nTITLE: Linking to Docusaurus Static Assets Documentation\nDESCRIPTION: This snippet provides a hyperlink to the official Docusaurus documentation about static assets. It explains where to find more information on how static assets are handled in Docusaurus-based projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/static/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://docusaurus.io/docs/static-assets\n```\n\n----------------------------------------\n\nTITLE: Attempting Direct Cast of Array with NSNull to Optional Type (Swift)\nDESCRIPTION: This Swift snippet illustrates a common pitfall when working with arrays containing `NSNull` values passed from JavaScript. Trying to directly cast such an array to a specific Swift optional type (e.g., `[Int?]`) using `call.getArray(\"bar\", Int?.self)` will fail because the array actually contains a mix of `Int` and `NSNull` objects, which cannot be directly bridged to `[Int?]`. The `if let` block will not execute.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/data-types.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nif let values = call.getArray(\"bar\", Int?.self) {\n    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Reader Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/screen-reader plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-reader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-reader@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Extending PluginsConfig Interface for TypeScript Support\nDESCRIPTION: Code showing how to extend the PluginsConfig interface to provide typing and documentation for your plugin's configuration values. This allows TypeScript users to get proper code completion and validation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    MyCoolPlugin?: {\n      /**\n       * Override the cool theme style if your app doesn't support light/dark theme changes.\n       *\n       * @since 1.0.0\n       * @example \"light\"\n       */\n      style?: 'dark' | 'light';\n\n      /**\n       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.\n       *\n       * @since 1.0.0\n       * @default #ffffff\n       * @example \"#FF9900\"\n       */\n      iconColor?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow-Intent Elements in Cordova config.xml\nDESCRIPTION: Example of allow-intent elements in Cordova's config.xml, which are either not used or have configurable alternatives in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<allow-intent href=\"http://*/*\" />\n<allow-intent href=\"https://*/*\" />\n<allow-intent href=\"tel:*\" />\n<allow-intent href=\"sms:*\" />\n<allow-intent href=\"mailto:*\" />\n<allow-intent href=\"geo:*\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Application Event Handling from CAPBridge to ApplicationDelegateProxy - diff (Swift)\nDESCRIPTION: This Swift diff snippet demonstrates updating AppDelegate.swift to use ApplicationDelegateProxy instead of deprecated CAPBridge methods for application event processing. These changes allow the Capacitor iOS plugin system to appropriately handle incoming URLs and user activity. Requires Capacitor v3 and its associated Swift APIs; inputs are UIApplication events, outputs are Boolean return values indicating event handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\\n         // Called when the app was launched with a url. Feel free to add additional processing here,\\n         // but if you want the App API to support tracking app url opens, make sure to keep this call\\n-        return CAPBridge.handleOpenUrl(url, options)\\n+        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\\n     }\\n\\n     func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\\n         // Called when the app was launched with an activity, including Universal Links.\\n         // Feel free to add additional processing here, but if you want the App API to support\\n         // tracking app url opens, make sure to keep this call\\n-        return CAPBridge.handleContinueActivity(userActivity, restorationHandler)\\n+        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\\n     }\\n\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the PermissionState type alias, representing the various states of notification permission.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Using Bridge Pattern in Capacitor Device Plugin (Swift)\nDESCRIPTION: Example of the Bridge design pattern from the Capacitor Device plugin, showing how implementation details are abstracted through an interface method. The method gets the language code from the implementation and resolves it in the plugin call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@objc func getLanguageCode(_ call: CAPPluginCall) {\n    let code = implementation.getLanguageCode()\n    call.resolve([ \"value\": code ])\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platform with Capacitor CLI\nDESCRIPTION: This command adds a native platform project (Android or iOS) to your Capacitor project. The platform argument is required and must be either 'android' or 'ios'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add <platform>\n```\n\n----------------------------------------\n\nTITLE: Defining CameraConfig Interface for Google Maps in TypeScript\nDESCRIPTION: Interface for configuring the camera view in Google Maps. Includes properties for setting coordinate position, zoom level, bearing, viewing angle, and animation options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * Location on the Earth towards which the camera points.\n   */\n  coordinate: LatLng;\n  \n  /**\n   * Sets the zoom of the map.\n   */\n  zoom: number;\n  \n  /**\n   * Bearing of the camera, in degrees clockwise from true north.\n   * Default: 0\n   */\n  bearing: number;\n  \n  /**\n   * The angle, in degrees, of the camera from the nadir (directly facing the Earth).\n   * The only allowed values are 0 and 45.\n   * Default: 0\n   */\n  angle: number;\n  \n  /**\n   * Animate the transition to the new Camera properties.\n   * Default: false\n   */\n  animate: boolean;\n  \n  /**\n   * This configuration option is not being used.\n   */\n  animationDuration: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FFI on Apple Silicon\nDESCRIPTION: Commands to install FFI and run pod install on Apple Silicon Macs using Rosetta x86_64 architecture simulation\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration Values in iOS (Swift)\nDESCRIPTION: Demonstrates how to access plugin configuration values in the native iOS implementation using the getConfig() method. It shows checking for the 'style' configuration value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let style = getConfig().getString(\"style\") {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Capacitor CLI using npx\nDESCRIPTION: Demonstrates how to run the Capacitor command-line interface (CLI). Unlike Cordova's global CLI, the Capacitor CLI is installed locally into each project as an npm dependency and executed using the `npx cap` command within the application's directory. This method simplifies version management across different projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Mapping for Jasmine Mocks in tsconfig.spec.json (JSON)\nDESCRIPTION: Demonstrates how to configure TypeScript path mappings in `tsconfig.spec.json` specifically for unit tests using Jasmine. It adds a mapping for `@capacitor/*` to redirect imports of Capacitor plugins (like `@capacitor/storage`) to the corresponding mock files located in the `__mocks__/@capacitor/` directory. Crucially, it also includes the base paths from `tsconfig.json` as the `paths` object is replaced, not merged.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/mocking-plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"],\n      \"@test/*\": [\"test/*\"],\n      \"@capacitor/*\": [\"__mocks__/@capacitor/*\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: Capacitor Cordova Preferences Configuration in JSON\nDESCRIPTION: Example of setting Cordova plugin preferences in capacitor.config.json file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cordova\": {\n    \"preferences\": {\n      \"DisableDeploy\": \"true\",\n      \"CameraUsesGeolocation\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin Version\nDESCRIPTION: This diff snippet shows how to update the Google Services plugin version in the Android build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n     dependencies {\n         classpath 'com.android.tools.build:gradle:4.1.1'\n-        classpath 'com.google.gms:google-services:4.2.0'\n+        classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Properties in TypeScript\nDESCRIPTION: Lists the properties available on a Uint8Array instance. These include `BYTES_PER_ELEMENT` (size of each element), `buffer` (the underlying ArrayBuffer), `byteLength` (total bytes), `byteOffset` (offset within the buffer), and `length` (number of elements).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Properties\nBYTES_PER_ELEMENT: number;\nbuffer: ArrayBufferLike;\nbyteLength: number;\nbyteOffset: number;\nlength: number;\n```\n\n----------------------------------------\n\nTITLE: Installing and Adding Platforms in Capacitor\nDESCRIPTION: Commands to install iOS and Android platforms and add them to the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios @capacitor/android\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Overriding Permission Request Result Handling in Capacitor Plugin - Java\nDESCRIPTION: This snippet shows how to override the handleRequestPermissionsResult method in an Android Capacitor plugin. The function logs the event, retrieves a stored PluginCall, and checks all grantResults. If denied, it calls savedCall.error; otherwise, it proceeds if the requestCode matches. Inputs are requestCode, an array of permissions, and grantResults. Outputs depend on permission status. Requires PluginCall management and logging methods, as well as proper request code management.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void handleRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n  super.handleRequestPermissionsResult(requestCode, permissions, grantResults);\n\n  log(\"handling request perms result\");\n  PluginCall savedCall = getSavedCall();\n  if (savedCall == null) {\n    log(\"No stored plugin call for permissions request result\");\n    return;\n  }\n\n  for(int result : grantResults) {\n    if (result == PackageManager.PERMISSION_DENIED) {\n      savedCall.error(\"User denied permission\");\n      return;\n    }\n  }\n\n  if (requestCode == REQUEST_IMAGE_CAPTURE) {\n    // We got the permission\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Capacitor Plugin Method as Unimplemented on Android in Java\nDESCRIPTION: Demonstrates using `call.unimplemented()` within a Capacitor plugin method in Java to signal that the specific functionality is not available on the Android platform. This is typically used for iOS-only features. The method takes a `PluginCall` object and calls `unimplemented` with an explanatory message.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatRequiresIOS(PluginCall call) {\n    call.unimplemented(\"Not implemented on Android.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android-specific Capacitor Configuration\nDESCRIPTION: Configuration to specify the Android flavor in the Capacitor config file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nandroid: {\n   flavor: \"qa\",\n },\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Style in Capacitor\nDESCRIPTION: TypeScript method signature for setting the current style of the status bar using StatusBarStyleOptions parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetStyle(options: StatusBarStyleOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Content with Native Projects\nDESCRIPTION: Command to copy web directory changes to native projects after building.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/with-ionic.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Installing Text Zoom Capacitor Plugin\nDESCRIPTION: Bash commands to install the @capacitor/text-zoom plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/text-zoom.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/text-zoom\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Local Notifications Plugin - Bash\nDESCRIPTION: These shell commands install the @capacitor/local-notifications package and perform a Capacitor sync to integrate the plugin into your application. To execute, ensure you are in your project root and have npm as well as Capacitor CLI installed. The commands will modify your dependencies and sync to reflect plugin changes. No parameters are necessary beyond a valid Node.js environment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/local-notifications\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Importing Push Notifications API\nDESCRIPTION: TypeScript import statement for the Capacitor Push Notifications API in a component file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Return Method in Java for Android\nDESCRIPTION: This snippet shows how to annotate a void return method in Java for an Android Capacitor plugin. The @PluginMethod annotation specifies that the method returns nothing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_NONE)\npublic void method1(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `remove` Property Type as Void Function for PluginListenerHandle\nDESCRIPTION: Specifies that the `remove` property within the PluginListenerHandle interface must be a function that takes no arguments and returns void, used to remove the listener.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\n() =&gt; void\n```\n\n----------------------------------------\n\nTITLE: Setting Month (UTC) with Date.setUTCMonth() in JavaScript\nDESCRIPTION: The `setUTCMonth()` method sets the month for a specified date according to universal time (UTC). It requires the month value `month` (0-11) and optionally accepts the day value `date` (1-31). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nsetUTCMonth(month: number, date?: number): number\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag Listener in Google Maps\nDESCRIPTION: Method to set up a callback for when marker is being dragged. Takes an optional callback function that receives MarkerClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Serve Command\nDESCRIPTION: Executes the Capacitor CLI serve command to run a Progressive Web App in the browser. The command uses the webDir specified in capacitor.config.json as the source directory for serving the application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/serve.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap serve\n```\n\n----------------------------------------\n\nTITLE: Defining Error Types for Screen Orientation Operations\nDESCRIPTION: Creates an error enumeration to handle cases where orientation operations might fail, specifically when unable to access the window scene.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n    enum ScreenOrientationError: Error {\n        case noWindowScene\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Platform Dependencies\nDESCRIPTION: Commands for updating iOS and Android platform-specific Capacitor dependencies to version 2.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios@2\nnpm install @capacitor/android@2\n```\n\n----------------------------------------\n\nTITLE: Updating Cocoapods for iOS Project\nDESCRIPTION: Updates the Cocoapods dependencies for the iOS project after adding Firebase Messaging to the Podfile. This command should be run after modifying the Podfile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Installing Required Capacitor Plugins for Ionic\nDESCRIPTION: Command to install the essential Capacitor plugins that Ionic Framework uses for native functionality, including app, haptics, keyboard and status-bar plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/with-ionic.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in capacitor.config.json - JSON\nDESCRIPTION: Provides an example of how to configure the Splash Screen plugin via the capacitor.config.json file. All plugin parameters are set, including display duration, colors, spinner style, and platform-specific options. No dependencies besides a standard Capacitor project. Inputs are JSON key-value pairs; outputs are updated splash behavior during app runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"plugins\\\": {\\n    \\\"SplashScreen\\\": {\\n      \\\"launchShowDuration\\\": 3000,\\n      \\\"launchAutoHide\\\": true,\\n      \\\"backgroundColor\\\": \\\"#ffffffff\\\",\\n      \\\"androidSplashResourceName\\\": \\\"splash\\\",\\n      \\\"androidScaleType\\\": \\\"CENTER_CROP\\\",\\n      \\\"showSpinner\\\": true,\\n      \\\"androidSpinnerStyle\\\": \\\"large\\\",\\n      \\\"iosSpinnerStyle\\\": \\\"small\\\",\\n      \\\"spinnerColor\\\": \\\"#999999\\\",\\n      \\\"splashFullScreen\\\": true,\\n      \\\"splashImmersive\\\": true,\\n      \\\"layoutName\\\": \\\"launch_screen\\\",\\n      \\\"useDialog\\\": true\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS .gitignore for Public Folder Location\nDESCRIPTION: Modify the `ios/.gitignore` file to ignore the new recommended location of the `public` folder (`App/App/public`) instead of the old location (`App/public`). This prevents committing copied web assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n App/build\n App/Pods\n-App/public\n+App/App/public\n App/Podfile.lock\n xcuserdata\n```\n\n----------------------------------------\n\nTITLE: Modifying Podfile for App Renaming in iOS\nDESCRIPTION: Indicates the location in the Podfile where the app name needs to be updated after renaming the target in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nThe default Podfile has an 'App' target, which needs to be replaced with <a href=\"https://github.com/ionic-team/capacitor/blob/2.x/ios-template/App/Podfile#L16\" target=\"_blank\">your new name here.</a>\n```\n\n----------------------------------------\n\nTITLE: Indicating Unimplemented Functionality in Web Plugins (TypeScript)\nDESCRIPTION: This snippet shows how to use the `unimplemented` error in a Capacitor web plugin. By calling `this.unimplemented()` with a relevant message, developers can explicitly mark methods that are not (or cannot be) implemented on the web platform, providing clear feedback during development and runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nasync getLocation(): Promise<Location> {\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Screen Orientation in JSX\nDESCRIPTION: Renders different UI components based on whether the screen orientation includes 'portrait' or 'landscape'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/using-api.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  orientation.includes('portrait') &&\n    {\n      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */\n    };\n}\n{\n  orientation.includes('landscape') &&\n    {\n      /* Let the user \"sign\" and unlock screen orientation through a confirmation button. */\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Method in Android (Java)\nDESCRIPTION: This Java code snippet shows the Android implementation for a Capacitor plugin method (`method3`) that uses a callback mechanism for potentially returning data multiple times. The `@PluginMethod` annotation uses `returnType = PluginMethod.RETURN_CALLBACK`. The implementation must save the `PluginCall` object using `call.setKeepAlive(true)` to send data back later using `call.resolve()`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)\npublic void method3(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor with QA Environment Configuration\nDESCRIPTION: Commands for copying and running the Capacitor app with the QA environment-specific configuration using NODE_ENV.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=qa npx cap copy\nNODE_ENV=qa npx cap run ios \t#NODE_ENV=qa npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Complete Home Page Component with Push Notifications\nDESCRIPTION: Full TypeScript implementation of an Angular component with Capacitor Push Notifications integration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\n\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    PushNotifications.addListener('registration', (token: Token) => {\n      alert('Push registration success, token: ' + token.value);\n    });\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener(\n      'pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      },\n    );\n\n    PushNotifications.addListener(\n      'pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hours (UTC) with Date.setUTCHours() in JavaScript\nDESCRIPTION: The `setUTCHours()` method sets the hours for a specified date according to universal time (UTC). It requires the hours value `hours` (0-23) and optionally accepts minutes `min` (0-59), seconds `sec` (0-59), and milliseconds `ms` (0-999). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nsetUTCHours(hours: number, min?: number, sec?: number, ms?: number): number\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Build Command using Bash\nDESCRIPTION: Shows the npm command to compile the TypeScript source code of the plugin. This command should be run within the plugin's directory and typically transpiles TypeScript to JavaScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI and native-run for Live Reload\nDESCRIPTION: Command to install the Ionic CLI and native-run, which are necessary for using Live Reload with Ionic CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/live-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli native-run\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the ListChannelsResult interface, which represents the result of listing all notification channels created by the app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `requiresAuthentication` Property Type as `boolean` for LocalNotificationAction\nDESCRIPTION: Specifies that the `requiresAuthentication` property within the LocalNotificationAction interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element for Displaying Converted File Source\nDESCRIPTION: Shows the HTML markup that works with the convertFileSrc example to display an image loaded from the device filesystem.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: Building and Copying Web Assets to Native Platforms\nDESCRIPTION: Chain of commands to first rebuild the Ionic Angular web application (`ionic build`) and then copy the updated web assets (from the `www` folder) into the native iOS and Android projects (`npx cap copy`). This ensures the native apps use the latest web code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Adding Vibration Permission for Android\nDESCRIPTION: Required permission declaration in AndroidManifest.xml to enable vibration functionality on Android devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/haptics.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Current Map Type for Google Maps in TypeScript\nDESCRIPTION: Retrieves the current map type of the Google Map instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ngetMapType() => Promise<MapType>\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for iOS Project\nDESCRIPTION: Update the .gitignore file for the iOS project to exclude the 'output' directory instead of 'Podfile.lock'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- App/Podfile.lock\n+ App/output \n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin Basic Commands\nDESCRIPTION: Basic commands for installing a Cordova plugin and syncing it with Capacitor native projects. After installation, manual configuration may be required for plugin variables and hooks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions in Capacitor Android Plugin Annotation\nDESCRIPTION: Demonstrates how to configure the @CapacitorPlugin annotation to include permission definitions with aliases that map to Android system permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin(\n    name = \"FooBar\",\n    permissions = {\n        @Permission(\n            alias = \"camera\",\n            strings = { Manifest.permission.CAMERA }\n        ),\n        @Permission(\n            alias = \"storage\",\n            strings = {\n                Manifest.permission.READ_EXTERNAL_STORAGE,\n                Manifest.permission.WRITE_EXTERNAL_STORAGE\n            }\n        )\n    }\n)\npublic class FooBarPlugin extends Plugin {\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Screen Orientation in Info.plist\nDESCRIPTION: This XML snippet shows how to set supported interface orientations for iPhones and iPads in the Info.plist file. It limits iPhones to portrait mode and iPads to landscape modes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UISupportedInterfaceOrientations</key>\n  <array>\n    <string>UIInterfaceOrientationPortrait</string>\n  </array>\n  <key>UISupportedInterfaceOrientations~ipad</key>\n  <array>\n    <string>UIInterfaceOrientationLandscapeRight</string>\n    <string>UIInterfaceOrientationLandscapeLeft</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Removing All Notification Listeners in Capacitor (TypeScript)\nDESCRIPTION: Method to remove all event listeners that were previously registered for this plugin, preventing memory leaks and unwanted callbacks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Camera Permissions from AndroidManifest.xml\nDESCRIPTION: XML snippet showing the Camera permissions that can be removed from AndroidManifest.xml when not using saveToGallery feature in Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\"/>\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Orientation Plugin - Bash\nDESCRIPTION: This snippet demonstrates how to install the @capacitor/screen-orientation plugin and synchronize it with the Capacitor project. It requires npm and Capacitor CLI as prerequisites. The npm install command adds the plugin to the project, while npx cap sync updates the native platform projects accordingly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-orientation\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Display Screen Orientation Plugin Error in Console\nDESCRIPTION: Error message shown when attempting to use the ScreenOrientation plugin before implementation, indicating that the web implementation is missing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/using-api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUncaught (in promise) ScreenOrientation does not have web implementation.\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Android App\nDESCRIPTION: Command to run the Android app on a device or emulator using Capacitor CLI\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Updating App ID in Capacitor Configuration (Diff)\nDESCRIPTION: Shows the modification needed in the `capacitor.config.ts` file to change the default `appId` from 'io.ionic.starter' to a custom one like 'com.mydomain.myappnam'. This unique identifier is crucial for native platform integration and services like push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst config: CapacitorConfig = {\n- appId: 'io.ionic.starter',\n+ appId: 'com.mydomain.myappnam',\n  appName: 'capApp',\n  webDir: 'www'\n};\n```\n\n----------------------------------------\n\nTITLE: Defining `sound` Property Type as `string` for NotificationChannel\nDESCRIPTION: Specifies that the `sound` property within the NotificationChannel interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Path to FileProvider Configuration\nDESCRIPTION: Updates the file_paths.xml to add a cache path, which avoids permission errors when editing gallery images.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <external-path name=\"my_images\" path=\".\" />\n+    <cache-path name=\"my_cache_images\" path=\".\" />\n </paths>\n```\n\n----------------------------------------\n\nTITLE: Getting Date (UTC) with Date.getUTCDate() in JavaScript\nDESCRIPTION: The `getUTCDate()` method returns the day of the month (1-31) for the specified date according to universal time (UTC).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCDate(): number\n```\n\n----------------------------------------\n\nTITLE: Setting up Android Product Flavors\nDESCRIPTION: Gradle configuration to set up product flavors for Android, including dev and qa environments.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/environment-specific-configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nflavorDimensions = [\"environment\"]\nproductFlavors {\n  dev {\n      dimension \"environment\"\n      manifestPlaceholders = [displayName:\"My App\"]\n  }\n  qa {\n      dimension \"environment\"\n      applicationIdSuffix \".qa\"\n      manifestPlaceholders = [displayName:\"My App - QA\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Install-Time Permissions to Plugin Android Manifest using Diff\nDESCRIPTION: Illustrates adding a required install-time permission (`android.permission.ACCESS_NETWORK_STATE`) to the plugin's `AndroidManifest.xml` file. This is done using the `<uses-permission>` tag within the `<manifest>` element. Note that runtime permissions (those requiring user prompts) should not be added here but documented for the app developer to include in the main app's manifest.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.mycompany.plugins.network\">\n+     <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n  </manifest>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Podfile.lock to iOS gitignore\nDESCRIPTION: Updates the iOS .gitignore file to exclude Podfile.lock from version control by adding it to the list of ignored files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/1-1.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n App/build\n App/Pods\n App/public\n+App/Podfile.lock\n xcuserdata\n\n # Cordova plugins for Capacitor\n```\n\n----------------------------------------\n\nTITLE: Haptics Selection Methods Definitions\nDESCRIPTION: TypeScript method signatures for handling haptic feedback during selection operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/haptics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectionStart() => void\n\nselectionChanged() => void\n\nselectionEnd() => void\n```\n\n----------------------------------------\n\nTITLE: Running Trapeze Configuration Tool in Bash\nDESCRIPTION: This bash command shows how to execute the Trapeze configuration tool using the NPM script defined earlier.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/automated-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cap-config\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Project with Capacitor\nDESCRIPTION: Command to update the iOS project with new CocoaPods configurations\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router\nDESCRIPTION: Creates a new instance of `VueRouter`. Although the routes array is empty here, it would typically contain the application's route definitions. The comment suggests using `mode: 'history'` for cleaner URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining `foreground` Property Type as `boolean` for LocalNotificationAction\nDESCRIPTION: Specifies that the `foreground` property within the LocalNotificationAction interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Defining `iosAllowInCarPlay` Property Type as `boolean`\nDESCRIPTION: Specifies that the `iosAllowInCarPlay` property within the LocalNotificationActionType interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Listening to Marker Click Events - TypeScript\nDESCRIPTION: Provides a hook for marker click events through an optional callback receiving MarkerClickCallbackData. The method is asynchronous and returns a void Promise. Relies on the MapListenerCallback type and a properly initialized map.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Sync Command\nDESCRIPTION: Command syntax for running the Capacitor sync command. Can target specific platforms (android/ios) and includes an optional deployment flag for pod installation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/sync.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync [options] [platform]\n```\n\n----------------------------------------\n\nTITLE: Removing Cordova Plugin and Syncing Capacitor in Bash\nDESCRIPTION: Commands to uninstall a Cordova plugin and sync Capacitor to remove the plugin code from native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor SPM Dependency in Package.swift\nDESCRIPTION: Updates the Capacitor Swift Package Manager dependency to use a fixed version instead of the main branch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies: [\n-        .package(url: \"https://github.com/ionic-team/capacitor-swift-pm.git\", branch: \"main\")\n+        .package(url: \"https://github.com/ionic-team/capacitor-swift-pm.git\", from: \"7.0.0\")\n    ],\n```\n\n----------------------------------------\n\nTITLE: Getting Current Platform with getPlatform\nDESCRIPTION: Shows the getPlatform function signature and how to determine which platform (web, iOS, or Android) the app is currently running on.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/web.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetPlatform: () => string;\n```\n\n----------------------------------------\n\nTITLE: Defining `lightColor` Property Type as `string` for NotificationChannel\nDESCRIPTION: Specifies that the `lightColor` property within the NotificationChannel interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Date Object Method Signatures in JavaScript\nDESCRIPTION: This snippet provides method signatures for various Date object methods in JavaScript. It includes methods for converting dates to strings, retrieving date components, and manipulating date values in both local time and UTC.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoString() => string\ntoDateString() => string\ntoTimeString() => string\ntoLocaleString() => string\ntoLocaleDateString() => string\ntoLocaleTimeString() => string\nvalueOf() => number\ngetTime() => number\ngetFullYear() => number\ngetUTCFullYear() => number\ngetMonth() => number\ngetUTCMonth() => number\ngetDate() => number\ngetUTCDate() => number\ngetDay() => number\ngetUTCDay() => number\ngetHours() => number\ngetUTCHours() => number\ngetMinutes() => number\ngetUTCMinutes() => number\ngetSeconds() => number\ngetUTCSeconds() => number\ngetMilliseconds() => number\ngetUTCMilliseconds() => number\ngetTimezoneOffset() => number\nsetTime(time: number) => number\nsetMilliseconds(ms: number) => number\nsetUTCMilliseconds(ms: number) => number\nsetSeconds(sec: number, ms?: number | undefined) => number\nsetUTCSeconds(sec: number, ms?: number | undefined) => number\nsetMinutes(min: number, sec?: number | undefined, ms?: number | undefined) => number\nsetUTCMinutes(min: number, sec?: number | undefined, ms?: number | undefined) => number\nsetHours(hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number\n```\n\n----------------------------------------\n\nTITLE: Getting String Representation with Date.toString() in JavaScript\nDESCRIPTION: The `toString()` method returns a human-readable string representation of the Date object. The specific format of the output string is implementation-dependent and may vary based on the host environment's locale.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Hiding Status Bar in Capacitor\nDESCRIPTION: TypeScript method signature for hiding the status bar, with optional animation options parameter for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhide(options?: StatusBarAnimationOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Permission for Network Access\nDESCRIPTION: Required permission declaration in AndroidManifest.xml to enable network state access in Android applications using Capacitor's Network API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/network.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```\n\n----------------------------------------\n\nTITLE: Registering 'pushNotificationActionPerformed' event listener - Capacitor Plugin - TypeScript\nDESCRIPTION: Adds a listener for when the user interacts with a received push notification (i.e., performs an action). Accepts 'pushNotificationActionPerformed' as the event and a callback taking an ActionPerformed object. Returns a promise and listener handle. Utilized for custom in-app behavior triggered by notification actions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationActionPerformed', listenerFunc: (notification: ActionPerformed) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining ReaddirOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for reading the contents of a directory using the Capacitor Filesystem API. Requires the `path` of the directory to read and the parent `directory`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReaddirOptions {\n  /**\n   * The path of the directory to read\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The Directory to list files from\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Dependencies with Capacitor (bash)\nDESCRIPTION: This bash snippet executes the Capacitor command to update the iOS platform, ensuring that all native project dependencies are synchronized. The 'npx cap update ios' command is used after fixing dependency issues or Podfile changes. Requires Node.js, npm, and Capacitor CLI to be installed in the project. No external parameters required; updates are reflected in the iOS project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Referencing Component Partials Path in Markdown\nDESCRIPTION: A markdown link that references the location where component styles should be defined, instead of editing swizzled component style files directly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/src/theme/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[component partials](/src/styles/components)\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Return Methods in Java\nDESCRIPTION: Java implementation example for a value return method in an Android Capacitor plugin using the default @PluginMethod annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/method-types.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void method2(PluginCall call) {\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio via Capacitor CLI\nDESCRIPTION: Uses the Capacitor CLI (`npx cap`) command `open` to launch Android Studio and load the native Android project located in the `android/` directory. This provides a quick way to access the native project for configuration or development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Commands in Foreground (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to add an event listener using `Watch.addListener` for the `runCommand` event. This allows the application to receive and process commands sent from the watch (specifically, the identifier string associated with a Button) while the app is in the foreground.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/watch.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nWatch.addListener(\"runCommand\", (data: {command: string}) => {\n  console.log(\"PHONE got command - \" + data.command);\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Notification Channel (Android) - Capacitor Plugin API - TypeScript\nDESCRIPTION: This code defines the deleteChannel method, which removes a previously created notification channel on Android devices. The method takes a NotificationChannel object and returns a Promise. Removing a channel deletes all associated settings and cannot be undone unless a new channel with the same ID is created.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(channel: NotificationChannel) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Filesystem Plugin using npm\nDESCRIPTION: Installs the `@capacitor/filesystem` package using npm, the standard package manager for Node.js, and then runs `npx cap sync` to update the native iOS and Android projects with the new dependency.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/filesystem.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/filesystem\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Native Projects and Opening IDEs with Capacitor CLI\nDESCRIPTION: These commands use the Capacitor CLI (`npx cap`). The `copy` command updates the native projects (iOS and Android) with the latest web assets and configuration changes from `capacitor.config.json` (including the server URL for live reload). The `open` commands launch the respective native IDEs (Xcode for iOS, Android Studio for Android), allowing developers to build and run the app on a simulator or device configured for Live Reload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/live-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\nnpx cap open ios\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Capacitor iOS Plugin\nDESCRIPTION: Shows various methods to trigger JavaScript events from a Capacitor iOS plugin, including window and document events with optional data payloads.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nself.bridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\n\nself.bridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"{ 'dataKey': 'dataValue' }\")\n\nself.bridge.triggerWindowJSEvent(eventName: \"myCustomEvent\")\n\nself.bridge.triggerWindowJSEvent(eventName: \"myCustomEvent\", data: \"{ 'dataKey': 'dataValue' }\")\n\nself.bridge.triggerDocumentJSEvent(eventName: \"myCustomEvent\")\n\nself.bridge.triggerDocumentJSEvent(eventName: \"myCustomEvent\", data: \"{ 'dataKey': 'dataValue' }\")\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation\nDESCRIPTION: TypeScript method to unlock the screen orientation, allowing it to change automatically based on device rotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nunlock() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the clearCookies API Method in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `clearCookies` method. It requires an `options` parameter of type `ClearCookieOptions` (containing the URL) and returns a Promise that resolves after clearing cookies associated with the specified URL from the device.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclearCookies(options: ClearCookieOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Page Loaded Event Listener in TypeScript\nDESCRIPTION: TypeScript definition for adding a listener for the 'browserPageLoaded' event, which fires when the initial URL finishes loading on Android and iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Registering PWA Elements Loader in React (TypeScript/JavaScript)\nDESCRIPTION: Imports and executes the defineCustomElements loader from @ionic/pwa-elements in a React (index.tsx or index.js) web app. Required for enabling custom web component support such as the Camera web UI. Ensure @ionic/pwa-elements is installed and invoke defineCustomElements(window) after rendering your root component. Input is the global window object and there is no output; this call enables custom elements for your app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/pwa-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Call the element loader after the app has been rendered the first time\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacitor CLI Hooks in package.json\nDESCRIPTION: Example configuration showing how to implement all available Capacitor CLI hooks in the package.json file. These hooks run before and after copy, update, and sync commands, with access to the platform name via $CAPACITOR_PLATFORM_NAME environment variable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"capacitor:copy:before\": \"echo copy before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:copy:after\": \"echo copy after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:before\": \"echo update before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:after\": \"echo update after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:before\": \"echo sync before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:after\": \"echo sync after $CAPACITOR_PLATFORM_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating compileSdkVersion and targetSDK to 34 in Android\nDESCRIPTION: Replace deprecated compileSdkVersion with compileSdk and update both compile and target SDK versions from 33 to 34 in the Android build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/6-0.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n+    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34\n-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33\n+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions with Delegate-Based API\nDESCRIPTION: This example demonstrates implementing requestPermissions() using a delegate-based API for location services, saving the call to be resolved when the permission status changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nvar permissionCallID: String?\nvar locationManager: CLLocationManager?\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    if let manager = locationManager, CLLocationManager.locationServicesEnabled() {\n        if CLLocationManager.authorizationStatus() == .notDetermined {\n            bridge?.saveCall(call)\n            permissionCallID = call.callbackId\n            manager.requestWhenInUseAuthorization()\n        } else {\n            checkPermissions(call)\n        }\n    } else {\n        call.reject(\"Location services are disabled\")\n    }\n}\n\npublic func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n    if let callID = permissionCallID, let call = bridge?.getSavedCall(callID) {\n        checkPermissions(call)\n        bridge?.releaseCall(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Cordova and Ionic Dependencies in package.json (JSON)\nDESCRIPTION: This JSON snippet illustrates typical dependencies in a project's package.json after migration, reflecting both Cordova and @ionic-native plugins. When adding platforms, Capacitor detects these and installs compatible plugins, omitting any known incompatibilities. All versions should be checked for compatibility with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@ionic-native/camera\": \"^5.3.0\",\n    \"@ionic-native/core\": \"^5.3.0\",\n    \"@ionic-native/file\": \"^5.3.0\",\n    \"cordova-android\": \"8.0.0\",\n    \"cordova-ios\": \"5.0.0\",\n    \"cordova-plugin-camera\": \"4.0.3\",\n    \"cordova-plugin-file\": \"6.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Push Notifications Plugin\nDESCRIPTION: Commands to install the Capacitor Push Notifications plugin and sync the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Watch Data in TypeScript\nDESCRIPTION: Updates the watch's state data with the provided key-value pairs. This method allows for updating specific data points on the watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWatchData(options: { data: { [key: string]: string; }; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Describing Selected Gallery Photo Metadata - Capacitor Camera - TypeScript\nDESCRIPTION: This TypeScript interface documents the structure of a single photo object selected from the gallery via the Capacitor Camera plugin. It includes platform-specific file paths, web-optimized paths for image sources, Exif metadata, and format descriptors. Required dependencies are the Filesystem API for reading local file paths, and familiarity with supported image formats on iOS, Android, and Web. Key parameters detail how photos can be loaded, displayed, and processed after selection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GalleryPhoto {\n  path: string; // Platform-specific file URL for Filesystem API\n  webPath: string; // Path for image src use in web\n  exif: any; // Exif metadata, if any\n  format: string; // Image format, e.g., jpeg, png, gif\n}\n```\n\n----------------------------------------\n\nTITLE: Running Default Environment Capacitor Builds - Bash\nDESCRIPTION: Runs Capacitor copy and run commands using the default environment, as defined in capacitor.config.ts. These commands build and launch the app using the standard configuration without changing environment variables. Suitable for the main environment or development mode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\nnpx cap run ios \\t#npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Notifications in Capacitor\nDESCRIPTION: Example of how to import and use the Toast plugin from Capacitor core to show a simple notification with text. This demonstrates the basic implementation pattern for displaying toast messages in a Capacitor app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\nconst { Toast } = Plugins;\n\nasync show() {\n  await Toast.show({\n    text: 'Hello!'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platform Projects (Android and iOS)\nDESCRIPTION: Uses the Capacitor CLI `add` command (via `npx`) to create the native Android and iOS project folders within the Capacitor application. This sets up the platform-specific directories and initial configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Documentation for Capacitor Plugins\nDESCRIPTION: Markdown structure defining the documentation for using Capacitor plugins, including metadata like title, description, and contributors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/using-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Capacitor Plugins\ndescription: How to use Capacitor Plugins\ncontributors:\n  - jcesarmobile\n  - dotNetkow\ncanonicalUrl: https://capacitorjs.com/docs/basics/using-plugins\n---\n\n# Using Capacitor Plugins\n\nCapacitor ships with a number of built-in plugins, such as [Camera](/apis/camera.md) and [Filesystem](/apis/filesystem.md).\n\nHowever, chances are your app will need to access more native functionality than provided out of the box in Capacitor.\n\nFortunately, you can quickly add your own native functionality by writing a small amount of native code then exposing it as a Capacitor plugin by following the [Plugin Guide](/plugins.md).\n\n## Finding Plugins\n\nThe community has built a number of plugins for various native functionality and you can easily add them to your app.\n\nSee our [Community Plugins](/plugins/community.md) list for some options.\n\n## Using Cordova and Ionic Native Plugins\n\nCapacitor also supports a wide range of [Cordova plugins](/cordova/using-cordova-plugins.md), so there are a lot to choose from.\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Package\nDESCRIPTION: Command to install the @capacitor/ios package using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Publishing Capacitor Plugin to npm\nDESCRIPTION: Shows the standard shell command `npm publish` used to publish the plugin package to the npm registry. This command usually runs the build script first and then uploads the necessary files, making the plugin installable via `npm install`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Status Bar Style Enum\nDESCRIPTION: Enumeration defining status bar text style options including Dark (light text), Light (dark text), and Default (based on device appearance mode).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/status-bar.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum Style {\n  Dark = 'DARK',\n  Light = 'LIGHT',\n  Default = 'DEFAULT'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Webview Scheme in Capacitor Configuration - JSON Block\nDESCRIPTION: Demonstrates configuring the iOS webview scheme in capacitor.config.json via the \\\"iosScheme\\\" property. This mitigates data loss issues arising from changes in URL origin during migration (ionic:// to capacitor://). Inputs: custom scheme string; output: iOS webview uses specified scheme. Constraint: Only affects iOS builds and origin-sensitive APIs such as LocalStorage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"iosScheme\": \"ionic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Milliseconds (Local) with Date.setMilliseconds() in JavaScript\nDESCRIPTION: The `setMilliseconds()` method sets the milliseconds for a specified date according to local time. It accepts one parameter, `ms` (0-999), and returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nsetMilliseconds(ms: number): number\n```\n\n----------------------------------------\n\nTITLE: Creating the ScreenOrientationPlugin Base Class for Android\nDESCRIPTION: The base implementation of the ScreenOrientationPlugin class with method stubs for orientation, lock, and unlock functionality. This class extends Capacitor's Plugin class and uses the @CapacitorPlugin annotation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"ScreenOrientation\")\npublic class ScreenOrientationPlugin extends Plugin {\n\n   @PluginMethod()\n   public void orientation(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void lock(PluginCall call) {\n       call.resolve();\n   }\n\n   @PluginMethod()\n   public void unlock(PluginCall call) {\n       call.resolve();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Capacitor Telemetry Using CLI\nDESCRIPTION: Command to opt back into Capacitor's telemetry data collection program. This command must be run in the project root directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/telemetry.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap telemetry on\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in TypeScript\nDESCRIPTION: TypeScript configuration for Capacitor splash screen with type references and export configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/splash-screen\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    SplashScreen: {\n      launchShowDuration: 3000,\n      launchAutoHide: true,\n      launchFadeOutDuration: 3000,\n      backgroundColor: \"#ffffffff\",\n      androidSplashResourceName: \"splash\",\n      androidScaleType: \"CENTER_CROP\",\n      showSpinner: true,\n      androidSpinnerStyle: \"large\",\n      iosSpinnerStyle: \"small\",\n      spinnerColor: \"#999999\",\n      splashFullScreen: true,\n      splashImmersive: true,\n      layoutName: \"launch_screen\",\n      useDialog: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Removing Obsolete Capacitor Maven Repository from Android Build\nDESCRIPTION: This diff illustrates the removal of the Capacitor-specific maven repository entry from the `repositories` section in `android/app/build.gradle`. Since Capacitor is now distributed via npm, this repository is no longer needed and can be safely removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n repositories {\n-    maven {\n-        url \"https://dl.bintray.com/ionic-team/capacitor\"\n-    }\n     flatDir {\n         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n     }\n }\n\n```\n\n----------------------------------------\n\nTITLE: Updating Podfile for iOS QA Target\nDESCRIPTION: Modifies the Podfile to include a new target for the QA environment in iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\nend\n\ntarget 'App QA' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Completed AppDelegate.swift with Firebase Initialization - Swift\nDESCRIPTION: This example shows a fully integrated AppDelegate.swift file for a Capacitor iOS app configured to use Firebase push notifications. It imports Capacitor and FirebaseCore, and includes Firebase initialization within the application lifecycle. Replace your AppDelegate implementation with this or add its relevant parts to ensure correct integration. Assumes you have previously linked Firebase via CocoaPods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport FirebaseCore\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    FirebaseApp.configure()\n    return true\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating iOS .gitignore File - diff\nDESCRIPTION: This snippet demonstrates how to update the iOS project's .gitignore by adding the Podfile.lock entry. This step ensures that the Podfile.lock is ignored by version control, which can help prevent potential dependency issues when working in a team. To use, append '+App/Podfile.lock' to the ios/.gitignore file, as shown.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/1-1.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\\n App/build\\n App/Pods\\n App/public\\n+App/Podfile.lock\\n xcuserdata\\n\\n # Cordova plugins for Capacitor\\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown for Capacitor Project Creation\nDESCRIPTION: This code snippet demonstrates how to embed a video in Markdown, specifically for showing the process of creating a new Capacitor project. It uses HTML video tags within the Markdown file and includes custom styling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/vs-code-ext/1-new-project.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<video style={{borderRadius:5}} width=\"100%\" controls>\n      <source src={require('@site/static/video/new-project.mp4').default} type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Defining `inputPlaceholder` Property Type as `string` for LocalNotificationAction\nDESCRIPTION: Specifies that the `inputPlaceholder` property within the LocalNotificationAction interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Getting Locale Time String with Date.toLocaleTimeString() in JavaScript\nDESCRIPTION: The `toLocaleTimeString()` method returns a string representing the time portion of the Date object, formatted according to language-specific conventions of the host environment's current locale.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntoLocaleTimeString(): string\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in TypeScript\nDESCRIPTION: TypeScript code snippet for removing all listeners attached to the Screen Reader plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-reader.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Android SplashScreen Theme\nDESCRIPTION: Update the Android splash screen theme to use the new Android 12 Splash Screen API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"Theme.SplashScreen\">\n    <item name=\"android:background\">@drawable/splash</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Validating Plugin Call Data in Swift\nDESCRIPTION: Shows how to access and validate data passed to a plugin method, including required fields and default values. Demonstrates various data access methods on the CAPPluginCall instance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBool(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Zoom for iPad in Capacitor\nDESCRIPTION: JSON configuration required in the Capacitor configuration file to make text-zoom plugin work on iPads by setting the preferredContentMode to mobile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/text-zoom.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"preferredContentMode\": \"mobile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Intents with Results in Java for Capacitor Android Plugins\nDESCRIPTION: Demonstrates how to launch an Intent and handle its result using the @ActivityCallback annotation. This example shows an image picker implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@CapacitorPlugin()\nclass ImagePicker extends Plugin {\n\n  @PluginMethod()\n  public void pickImage(PluginCall call) {\n    Intent intent = new Intent(Intent.ACTION_PICK);\n    intent.setType(\"image/*\");\n\n    // Start the Activity for result using the name of the callback method\n    startActivityForResult(call, intent, \"pickImageResult\");\n  }\n\n  @ActivityCallback\n  private void pickImageResult(PluginCall call, ActivityResult result) {\n    if (call == null) {\n      return;\n    }\n\n    // Do something with the result data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing App Name in Cordova Config\nDESCRIPTION: Example showing how to find the app name in Cordova's config.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<name>MyApp</name>\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Interface in TypeScript\nDESCRIPTION: This code snippet defines the PermissionStatus interface, which represents the permission state for receiving notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  receive: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Month (Local) with Date.setMonth() in JavaScript\nDESCRIPTION: The `setMonth()` method sets the month for a specified date according to local time. It requires the month value `month` (0-11) and optionally accepts the day value `date` (1-31). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nsetMonth(month: number, date?: number): number\n```\n\n----------------------------------------\n\nTITLE: Getting Month (Local) with Date.getMonth() in JavaScript\nDESCRIPTION: The `getMonth()` method returns the month (0-11) in the specified date according to local time. 0 corresponds to January, 1 to February, and so on.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngetMonth(): number\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Camera Permissions\nDESCRIPTION: Required Android manifest permissions for camera functionality and storage access.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Theme Components\nDESCRIPTION: Imports DocCard and DocCardList components from Docusaurus theme for documentation layout purposes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@theme/DocCard';\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offset with Date.getTimezoneOffset() in JavaScript\nDESCRIPTION: The `getTimezoneOffset()` method returns the difference in minutes between the local time on the host machine and Universal Coordinated Time (UTC). A positive value indicates local time is behind UTC, while a negative value indicates it's ahead.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ngetTimezoneOffset(): number\n```\n\n----------------------------------------\n\nTITLE: Getting Date String with Date.toDateString() in JavaScript\nDESCRIPTION: The `toDateString()` method returns the date portion of the Date object as a human-readable string (e.g., 'Wed Aug 23 2023').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoDateString(): string\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Splash Screen Resource in XML\nDESCRIPTION: This XML snippet demonstrates how to set a custom drawable resource as the background for the Android splash screen theme in a Capacitor project. The \\u003cstyle\\u003e tag targets the splash theme, and the background drawable (e.g., @drawable/NAME) must match the actual resource location. Editing this file requires no additional dependencies but does require proper resource placement in the Android project structure. The primary input is the drawable resource name in the \\u003citem\\u003e element.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\\\"AppTheme.NoActionBarLaunch\\\" parent=\\\"AppTheme.NoActionBar\\\">\\n    <item name=\\\"android:background\\\">@drawable/NAME</item>\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Removing all plugin listeners - Capacitor Plugin - TypeScript\nDESCRIPTION: Removes all native listeners previously registered with the plugin. Does not require input parameters and returns a promise that resolves when the operation is complete. Used for cleanup or teardown procedures. Available since version 1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin Documentation (Shell Script)\nDESCRIPTION: Shows the command to manually generate plugin API documentation using @capacitor/docgen. This builds documentation files such as README.md from JSDoc annotations within TypeScript files. Must be run from the plugin root; @capacitor/docgen installed as a devDependency is required.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docgen\n\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin to 8.2.1\nDESCRIPTION: Update the Android Gradle plugin from version 8.0.0 to 8.2.1 in the dependencies section of the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/6-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:8.0.0'\n+       classpath 'com.android.tools.build:gradle:8.2.1'\n    }\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Styles Using Base Docusaurus Selector\nDESCRIPTION: This snippet explains a workaround for overriding theme styles by using the base #__docusaurus selector to increase specificity. It's used due to current limitations in directly overriding theme styles.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/src/styles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#\\_\\_docusaurus\n```\n\n----------------------------------------\n\nTITLE: Defining `iosUNNotificationAttachmentOptionsThumbnailTimeKey` Property Type as `string`\nDESCRIPTION: Specifies that the `iosUNNotificationAttachmentOptionsThumbnailTimeKey` property within the LocalNotificationAttachmentOptions interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Installing Filesystem Capacitor Plugin\nDESCRIPTION: Commands to install the latest version 5 of the Capacitor Filesystem plugin and synchronize the native project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/filesystem@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Displaying Project and Target Structure in Xcode\nDESCRIPTION: Shows the typical project structure in Xcode, illustrating where to find the app name for renaming purposes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT\n  App\n-------\nTARGET\n  App\n```\n\n----------------------------------------\n\nTITLE: Applying Buffered Project Changes to Filesystem - TypeScript\nDESCRIPTION: This snippet commits any pending project changes (such as version updates) to the actual files on disk using the @trapezedev/project API. The 'commit' operation flushes the virtual filesystem buffer to the real filesystem for both iOS and Android projects if changes are present. The method must be awaited; any unsaved modifications prior to calling this will not be persisted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/automated-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.commit();\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Lock Logic in ScreenOrientation Class (Swift)\nDESCRIPTION: This public Swift function in the `ScreenOrientation` class locks the device orientation to the specified `orientationType`. It converts the type string to mask and integer values, sets the device orientation using `UIDevice.current.setValue`, attempts the rotation, and calls a completion handler with the orientation mask. Operations are dispatched to the main queue asynchronously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\npublic func lock(_ orientationType: String, completion: @escaping (UIInterfaceOrientationMask) -> Void) {\n  DispatchQueue.main.async {\n    let mask = self.fromOrientationTypeToMask(orientationType)\n    let orientation = self.fromOrientationTypeToInt(orientationType)\n    UIDevice.current.setValue(orientation, forKey: \"orientation\")\n    UINavigationController.attemptRotationToDeviceOrientation()\n    completion(mask)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AppDelegate for Capacitor 3 in Swift\nDESCRIPTION: Updates the AppDelegate.swift file to use ApplicationDelegateProxy instead of CAPBridge, removes USE_PUSH condition, and updates notification handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n         // Called when the app was launched with a url. Feel free to add additional processing here,\n         // but if you want the App API to support tracking app url opens, make sure to keep this call\n-        return CAPBridge.handleOpenUrl(url, options)\n+        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n     }\n\n     func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n         // Called when the app was launched with an activity, including Universal Links.\n         // Feel free to add additional processing here, but if you want the App API to support\n         // tracking app url opens, make sure to keep this call\n-        return CAPBridge.handleContinueActivity(userActivity, restorationHandler)\n+        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\n     }\n\n-    #if USE_PUSH\n\n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n+        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n     }\n\n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n+        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n     }\n\n-#endif\n\n     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n         super.touchesBegan(touches, with: event)\n\n         let statusBarRect = UIApplication.shared.statusBarFrame\n         guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\n\n         if statusBarRect.contains(touchPoint) {\n-            NotificationCenter.default.post(CAPBridge.statusBarTappedNotification)\n+            NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\n         }\n     }\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS Development\nDESCRIPTION: Command to install CocoaPods package manager required for iOS development with Capacitor\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/getting-started/dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Building Web Application\nDESCRIPTION: Commands for building web applications, including both generic npm build and specific framework (Ionic) build commands.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Removing iOS Utils Workaround from Podfile\nDESCRIPTION: Instructs users to remove a specific line from `ios/App/Podfile` that previously fetched a specific commit of `Google-Maps-iOS-Utils` as a workaround. This is no longer needed with updated dependencies and should be removed before running `pod update`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npod 'Google-Maps-iOS-Utils', :git => 'https://github.com/googlemaps/google-maps-ios-utils.git', :commit => '637954e5bcb2a879c11a6f2cead153a6bad5339f'\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Android App\nDESCRIPTION: Command to run the Android app on a device or emulator using Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Removing a Cordova Plugin and Synchronizing with Capacitor (Bash)\nDESCRIPTION: This code shows the standard approach to uninstalling a Cordova plugin and updating the native projects to reflect this removal. The npm uninstall command removes the plugin from dependencies, and npx cap sync updates native projects accordingly. It is necessary when switching to Capacitor-native plugins or after plugin removal.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: EventTarget Interface Definition - TypeScript\nDESCRIPTION: Defines the EventTarget interface with core methods for event handling including addEventListener, removeEventListener, and dispatchEvent. This interface is fundamental for DOM event management.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventTarget {\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;\n  dispatchEvent(event: Event): boolean;\n  removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Splash Screen Theme\nDESCRIPTION: XML configuration for implementing the Android 12 Splash Screen API in styles.xml.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/4-0.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"Theme.SplashScreen\">\n    <item name=\"android:background\">@drawable/splash</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Getting Date (Local) with Date.getDate() in JavaScript\nDESCRIPTION: The `getDate()` method returns the day of the month (1-31) for the specified date according to local time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngetDate(): number\n```\n\n----------------------------------------\n\nTITLE: File Viewer URL Opening Method\nDESCRIPTION: TypeScript interface definition for opening documents from remote URLs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/file-viewer.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nopenDocumentFromUrl(options: OpenFromUrlOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Change Handling in ScreenOrientationPlugin\nDESCRIPTION: Adds methods to handle Android configuration changes and notify plugin listeners when the screen orientation changes, using the Capacitor notifyListeners method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.res.Configuration;\n\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   this.onOrientationChanged();\n}\n\nprivate void onOrientationChanged() {\n   JSObject ret = new JSObject();\n   String type = implementation.getCurrentOrientationType();\n   ret.put(\"type\", type);\n   notifyListeners(\"screenOrientationChange\", ret);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App for Different Environments\nDESCRIPTION: Commands to run the Capacitor app for QA and default environments on iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/environment-specific-configurations.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=qa npx cap copy\nNODE_ENV=qa npx cap run ios\t#NODE_ENV=qa npx cap run android\n\nnpx cap copy\nnpx cap run ios\t#npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Retrieving Delivered Push Notifications in Capacitor\nDESCRIPTION: TypeScript method signature for getting notifications that are currently visible on the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetDeliveredNotifications() => Promise<PushNotificationDeliveredList>\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/dialog plugin and sync the project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/dialog\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Pods for CocoaPods Sync Error\nDESCRIPTION: Command to update iOS dependencies when encountering 'Sandbox not in sync with the Podfile.lock' error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Adding Push Registration Success Listener in Capacitor\nDESCRIPTION: TypeScript method signature for adding an event listener that triggers when push notification registration completes successfully.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registration', listenerFunc: (token: PushNotificationToken) => void) => PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Getting Locale Date String with Date.toLocaleDateString() in JavaScript\nDESCRIPTION: The `toLocaleDateString()` method returns a string representing the date portion of the Date object, formatted according to language-specific conventions of the host environment's current locale.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntoLocaleDateString(): string\n```\n\n----------------------------------------\n\nTITLE: Removing Polylines from Google Maps\nDESCRIPTION: Removes multiple polyline shapes from the map using their IDs. Returns a Promise that resolves when all polylines have been removed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nremovePolylines(ids: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch App Main Entry Point\nDESCRIPTION: Swift code for the Watch app's main entry point that initializes the WatchConnectivity session and displays the Capacitor Watch content view.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nCapWatchContentView()\n    .onAppear {\n        assert(WCSession.isSupported(), \"This sample requires Watch Connectivity support!\")\n        WCSession.default.delegate = WatchViewModel.shared\n        WCSession.default.activate()\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Keep Alive Flag - Android Java\nDESCRIPTION: Code to set the keepAlive property for a plugin call in Android, enabling multiple completions. This allows the call to persist for repeated resolve() invocations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncall.setKeepAlive(true);\n```\n\n----------------------------------------\n\nTITLE: Declaring the App Plugin API and Methods (Capacitor, TypeScript)\nDESCRIPTION: Provides TypeScript signatures for the Capacitor App plugin's core methods, including exitApp, getInfo, getState, getLaunchUrl, minimizeApp, addListener, and removeAllListeners. Each method handles app-level state, navigation, or deep linking. The inputs and outputs are detailed in the comments and signatures—most return Promises, and listeners return handles. Using these APIs, developers can programmatically interact with app state and lifecycle events. Dependencies: @capacitor/app and proper project setup. Applicable to both iOS and Android with platform-specific constraints as noted in comments.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexitApp() => never\\n\\ngetInfo() => Promise<AppInfo>\\n\\ngetState() => Promise<AppState>\\n\\ngetLaunchUrl() => Promise<AppLaunchUrl | undefined>\\n\\nminimizeApp() => Promise<void>\\n\\naddListener(eventName: 'appStateChange', listenerFunc: StateChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\\n\\naddListener(eventName: 'appUrlOpen', listenerFunc: URLOpenListener) => Promise<PluginListenerHandle> & PluginListenerHandle\\n\\naddListener(eventName: 'appRestoredResult', listenerFunc: RestoredListener) => Promise<PluginListenerHandle> & PluginListenerHandle\\n\\naddListener(eventName: 'backButton', listenerFunc: BackButtonListener) => Promise<PluginListenerHandle> & PluginListenerHandle\\n\\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in TypeScript\nDESCRIPTION: TypeScript definition for the removeAllListeners() method, which removes all native listeners for the Browser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Plugin Methods in Swift\nDESCRIPTION: This Swift code defines the main plugin class ScreenOrientationPlugin, which handles JavaScript calls for orientation-related features. Each method is exposed to Objective-C via the @objc decorator and resolves a plugin call, enabling integration with the Capacitor JavaScript bridge. Prerequisites include integrating Capacitor and ensuring the class is discoverable at runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport Foundation\\nimport Capacitor\\n\\n@objc(ScreenOrientationPlugin)\\npublic class ScreenOrientationPlugin: CAPPlugin {\\n\\n  @objc public func orientation(_ call: CAPPluginCall) {\\n    call.resolve()\\n  }\\n\\n  @objc public func lock(_ call: CAPPluginCall) {\\n    call.resolve()\\n  }\\n\\n  @objc public func unlock(_ call: CAPPluginCall) {\\n    call.resolve();\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Exporting Capacitor Config for Multiple Environments - TypeScript\nDESCRIPTION: Implements logic in capacitor.config.ts to export different Capacitor configuration objects depending on the NODE_ENV environment variable. Imports types, defines a base config, then returns a customized object with iOS and Android settings for 'qa' or the default environment. Accepts NODE_ENV as input, outputs the appropriate config object for runtime use.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nlet config: CapacitorConfig;\n\nconst baseConfig: CapacitorConfig = {\n  appId: 'io.ionic.starter',\n  appName: 'My App',\n  webDir: 'build',\n  bundledWebRuntime: false,\n};\n\nswitch (process.env.NODE_ENV) {\n  case 'qa':\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App QA',\n      },\n      android: {\n        flavor: 'qa',\n      },\n    };\n    break;\n  default:\n    config = {\n      ...baseConfig,\n      ios: {\n        scheme: 'App',\n      },\n      android: {\n        flavor: 'dev',\n      },\n    };\n    break;\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK versions in build.gradle\nDESCRIPTION: Updates the compileSdkVersion and targetSdkVersion to 33 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 32\n+    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33\n-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 32\n+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33\n```\n\n----------------------------------------\n\nTITLE: Accessibility API Method: removeAllListeners\nDESCRIPTION: TypeScript method signature for removing all native event listeners associated with the Accessibility plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/accessibility.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => void\n```\n\n----------------------------------------\n\nTITLE: Plugin Reference in package.json After Local Installation\nDESCRIPTION: Shows how the plugin appears as a file dependency in the app's package.json after linking it locally.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"echo\": \"file:../path/to/echo\",\n```\n\n----------------------------------------\n\nTITLE: Declaring Void Return Method in Objective-C for iOS\nDESCRIPTION: This snippet demonstrates how to declare a void return method in Objective-C for an iOS Capacitor plugin. The CAP_PLUGIN_METHOD macro is used with CAPPluginReturnNone to specify the return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Awesome Cordova Plugins TypeScript Wrappers\nDESCRIPTION: Command for installing TypeScript wrappers from the Awesome Cordova Plugins library to provide TypeScript support for Cordova plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/cordova.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @awesome-cordova-plugins/plugin-name\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Output for Capacitor 3 Plugins\nDESCRIPTION: Set the TypeScript output target to es2017 in the tsconfig.json file for developing web plugins in Capacitor 3. This configuration is recommended for optimal compatibility and performance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Community Admob Plugin\nDESCRIPTION: This code snippet shows how to install the Capacitor Community Admob plugin using npm and update Capacitor. It's the first step in adding advertisement functionality to a Capacitor app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/ads.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/admob\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Getting Hours (Local) with Date.getHours() in JavaScript\nDESCRIPTION: The `getHours()` method returns the hour (0-23) for the specified date, according to local time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngetHours(): number\n```\n\n----------------------------------------\n\nTITLE: Defining a Restored Result Listener Type Alias in Capacitor (TypeScript)\nDESCRIPTION: Defines the TypeScript type alias `RestoredListener`. This type represents a function used as a callback for the `appRestoredResult` event. It handles plugin results that were restored after the app was relaunched, receiving an `event` object of type `RestoredListenerEvent` containing details about the restored plugin call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype RestoredListener = (event: RestoredListenerEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Applying Variables in Android Build Gradle\nDESCRIPTION: This diff snippet shows how to apply the variables.gradle file in the Android build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n         classpath 'com.android.tools.build:gradle:4.1.1'\n         classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n }\n\n+apply from: \"variables.gradle\"\n\n allprojects {\n     repositories {\n         google()\n         jcenter()\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Browser Page Loaded Event Listener in TypeScript\nDESCRIPTION: TypeScript definition for adding a listener for the 'browserPageLoaded' event.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/browser.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle>\n```\n\n----------------------------------------\n\nTITLE: Installing InAppBrowser Capacitor Plugin\nDESCRIPTION: Commands to install the InAppBrowser plugin and synchronize the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/inappbrowser\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in Gradle\nDESCRIPTION: Update compileSdkVersion and targetSdkVersion to 30 in the android/build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n   compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 30\n    defaultConfig {\n        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 21\n       targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 30\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Capacitor Plugin Generator Interaction (Bash)\nDESCRIPTION: This snippet displays a sample interactive session with the `npx @capacitor/cli@2.4.7 plugin:generate` command. It shows the questions asked by the wizard (like plugin name, ID, class name) and example user inputs, culminating in the confirmation to create the `package.json` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/creating-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/cli@2.4.7 plugin:generate\n✏️  Creating new Capacitor plugin\n? Plugin NPM name (kebab-case): my-plugin\n? Plugin id (domain-style syntax. ex: com.example.plugin) com.ionicframework.myplugin\n? Plugin class name (ex: AwesomePlugin) MyPlugin\n? description:\n? git repository:\n? author:\n? license: MIT\n? package.json will be created, do you want to continue? (Y/n)\n```\n\n----------------------------------------\n\nTITLE: Getting Time Value with Date.getTime() in JavaScript\nDESCRIPTION: The `getTime()` method returns the numeric value corresponding to the time for the specified date according to universal time. This value is the number of milliseconds since January 1, 1970, 00:00:00 UTC.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngetTime(): number\n```\n\n----------------------------------------\n\nTITLE: Registering for Remote Notifications and Retrieving FCM Token - Swift\nDESCRIPTION: This Swift function override demonstrates how to handle device token registration and retrieve the Firebase Cloud Messaging (FCM) token on iOS. It uses Messaging.messaging().apnsToken for APNS registration and InstanceID.instanceID().instanceID completion handler to get the FCM token or error. This code is inserted into your AppDelegate.swift and requires corresponding Firebase Messaging and InstanceID modules.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        Messaging.messaging().apnsToken = deviceToken\n        InstanceID.instanceID().instanceID { (result, error) in\n            if let error = error {\n                NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n            } else if let result = result {\n                NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: result.token)\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin\nDESCRIPTION: Diff showing the update to the Google Services plugin version in the Android build.gradle file for Capacitor 6.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.0.0'\n-       classpath 'com.google.gms:google-services:4.3.15'\n+       classpath 'com.google.gms:google-services:4.4.0'\n\n```\n\n----------------------------------------\n\nTITLE: Safely Handling Optional Values in iOS Plugins\nDESCRIPTION: Swift code examples showing recommended patterns for handling optional values that result from weak references in Capacitor 3.0 iOS plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nif bridge?.isSimEnvironment {\n     // BAD: Will not compile. The boolean is optional (because `bridge` is optional)\n     // and must be unwrapped before it can be evaluated.\n}\nif bridge?.isSimEnvironment == true {\n     // NEUTRAL: An explicit comparison with an optional will work for a boolean but\n     // may not be suitable for all data types.\n}\nif let isSim = bridge?.isSimEnvironment, isSim {\n     // GOOD: Using optional binding to unwrap the optional before examining its value.\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Push Notification Listeners in TypeScript\nDESCRIPTION: This method removes all native listeners for the push notification plugin. It takes no parameters and returns void.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => void\n```\n\n----------------------------------------\n\nTITLE: Including PWA Elements via Script Tags\nDESCRIPTION: HTML snippet for including PWA Elements through script tags in the index.html file. This method does not work for offline scenarios.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/pwa-elements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js\"\n></script>\n<script\n  nomodule\n  src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Seconds (UTC) with Date.setUTCSeconds() in JavaScript\nDESCRIPTION: The `setUTCSeconds()` method sets the seconds for a specified date according to universal time (UTC). It requires the seconds value `sec` (0-59) and optionally accepts milliseconds `ms` (0-999). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nsetUTCSeconds(sec: number, ms?: number): number\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Gradle Plugin Version\nDESCRIPTION: This diff shows how to update the version of the `com.google.gms:google-services` Gradle plugin in the top-level `android/build.gradle` file to version 4.3.3, as recommended for Capacitor 2.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n     dependencies {\n         classpath 'com.android.tools.build:gradle:4.1.1'\n-        classpath 'com.google.gms:google-services:4.2.0'\n+        classpath 'com.google.gms:google-services:4.3.3'\n \n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n\n```\n\n----------------------------------------\n\nTITLE: Workaround for Webkit Autofill Bug with Ion-Input (JavaScript)\nDESCRIPTION: This vanilla JavaScript snippet addresses a known Webkit autofill bug with \\'ion-input\\' password fields by listening for the \\'change\\' event on the true input element nested within the custom element. Upon autofill, the value is assigned to a local variable (e.g., \\'this.password\\'). It requires that the password field has id=\\'pwd\\' and assumes a component-context for \\'this\\'. This ensures autofilled passwords update the application state correctly on problematic Webkit browsers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    document.getElementById('pwd').children[0].addEventListener('change', (e) => {\n      this.password = (e.target as any).value;\n    });\n```\n\n----------------------------------------\n\nTITLE: Including PWA Elements via Script Tags\nDESCRIPTION: HTML snippet for including PWA Elements using script tags in the index.html file. This method does not work for offline scenarios.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/pwa-elements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://unpkg.com/@ionic/pwa-elements@2/dist/ionicpwaelements/ionicpwaelements.esm.js\"\n></script>\n<script\n  nomodule\n  src=\"https://unpkg.com/@ionic/pwa-elements@2/dist/ionicpwaelements/ionicpwaelements.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Registering Capacitor Plugins in MainActivity - Java\nDESCRIPTION: This snippet demonstrates how to register a custom Capacitor plugin (EchoPlugin) in the MainActivity of an Android app. It imports the plugin and adds it to the list of plugins initialized in the onCreate method, using Capacitor's init mechanism. Input is the saved instance state; the process outputs registered plugins for use in Capacitor bridge. Ensure correct import paths and that the plugin class exists. Add further plugins within the add block as needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Other imports...\nimport com.example.myapp.EchoPlugin;\n\npublic class MainActivity extends BridgeActivity {\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    // Initializes the Bridge\n    this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n      // Additional plugins you've installed go here\n      // Ex: add(TotallyAwesomePlugin.class);\n      add(EchoPlugin.class);\n    }});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Orientation Type String to UIInterfaceOrientation Integer (Swift)\nDESCRIPTION: This private Swift function within the `ScreenOrientation` class converts a string representation of an orientation type into the raw integer value of the corresponding `UIInterfaceOrientation` enum. This integer value is required for setting the device's orientation using `UIDevice.current.setValue`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToInt(_ orientationType: String) -> Int {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientation.landscapeLeft.rawValue\n  case \"landscape-secondary\":\n    return UIInterfaceOrientation.landscapeRight.rawValue\n  case \"portrait-secondary\":\n    return UIInterfaceOrientation.portraitUpsideDown.rawValue\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientation.portrait.rawValue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Script Configuration for Trapeze\nDESCRIPTION: Demonstrates how to set up an NPM script to run the Trapeze configuration tool with a YAML config file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/automated-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"cap-config\": \"trapeze run config.yaml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Time String with Date.toTimeString() in JavaScript\nDESCRIPTION: The `toTimeString()` method returns the time portion of the Date object as a human-readable string (e.g., '14:30:00 GMT+0000 (Coordinated Universal Time)').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntoTimeString(): string\n```\n\n----------------------------------------\n\nTITLE: Rendering Capacitor Plugin Category Cards with DocCardList in JSX\nDESCRIPTION: This JSX/JavaScript snippet defines a visual list of documentation cards rendered under the Capacitor Plugins section. It uses the DocCardList wrapper, with each DocCard component representing a plugin category (official or community) and receiving a header, image, and link as props. The children of each DocCard provide a brief explanation. The DocCard and DocCardList components are required dependencies; no external data is fetched. The inputs are plugin metadata and descriptions, and the output is rendered documentation category cards on the documentation page.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList>\n  <DocCard header=\"Official plugins\" img=\"/img/v3/docs/capacitor-card.png\" href=\"/apis\">\n    <p>Official Plugins are maintained by the Capacitor Team</p>\n  </DocCard>\n  <DocCard header=\"Community plugins\" img=\"/img/v3/docs/community-card.png\" href=\"/plugins/community\">\n    <p>Community Plugins are maintained by the Capacitor Community</p>\n  </DocCard>\n</DocCardList>\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/share Plugin\nDESCRIPTION: Commands to install the latest version of the @capacitor/share plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/share.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/share@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Applying Common Gradle Variables in Android Project Build File\nDESCRIPTION: This diff shows how to apply the newly created `variables.gradle` file within the top-level `android/build.gradle` file. This makes the variables defined in `variables.gradle` available throughout the Android build process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n         classpath 'com.android.tools.build:gradle:4.1.1'\n         classpath 'com.google.gms:google-services:4.3.3'\n \n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n }\n \n+apply from: \"variables.gradle\"\n \n allprojects {\n     repositories {\n         google()\n         jcenter()\n\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer Interface Type Definition\nDESCRIPTION: Interface representing a raw buffer of binary data with byte length property and slice method for buffer manipulation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayBuffer {\n  readonly byteLength: number;\n  slice(begin: number, end?: number): ArrayBuffer;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Official Capacitor Plugins\nDESCRIPTION: Example showing the recommended way to import a Capacitor 3 plugin (Camera) directly from its package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera } from '@capacitor/camera';\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Share Plugin using npm\nDESCRIPTION: Installs the Capacitor Share plugin package using npm and then synchronizes the native project dependencies using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/share.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/share\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Illustrating Linked Plugin in package.json\nDESCRIPTION: Shows how a locally linked plugin appears in the `dependencies` section of an application's `package.json` file. The value uses the `file:` protocol to point to the local plugin directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"my-plugin\": \"file:my-plugin\",\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Android Manifest Permissions\nDESCRIPTION: Demonstrates the removal of redundant permissions from AndroidManifest.xml that are now included directly in plugin manifests, such as Network and Haptics permissions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n     <!-- Permissions -->\n\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n\n-    <!-- Network API -->\n-    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n-    <!-- Vibration API -->\n-    <uses-permission android:name=\"android.permission.VIBRATE\" />\n\n </manifest>\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Deployment Target in .podspec\nDESCRIPTION: Updates the iOS deployment target to 14.0 in the plugin's .podspec file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-  s.ios.deployment_target = '13.0'\n+  s.ios.deployment_target = '14.0'\n```\n\n----------------------------------------\n\nTITLE: Updating Watch UI in TypeScript\nDESCRIPTION: Updates the current watch UI with the provided watchUI string. This method replaces the existing UI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWatchUI(options: { watchUI: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Capacitor Plugins (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to remove an event listener from a Capacitor plugin. It demonstrates adding a listener and then removing it using the remove() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nconst myPluginEventListener = await MyPlugin.addListener(\n  'myPluginEvent',\n  (info: any) => {\n    console.log('myPluginEvent was fired');\n  },\n);\n\nmyPluginEventListener.remove();\n```\n\n----------------------------------------\n\nTITLE: Emitting Plugin Event in Android\nDESCRIPTION: Demonstrates how to emit a plugin event from Java code using notifyListeners().\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nJSObject ret = new JSObject();\nret.put(\"value\", \"some value\");\nnotifyListeners(\"myPluginEvent\", ret);\n```\n\n----------------------------------------\n\nTITLE: Plugin Data Access Example\nDESCRIPTION: Demonstrates how to access data passed to plugin methods using the PluginCall instance. Shows various data type access methods and validation checking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void storeContact(PluginCall call) {\n  String name = call.getString(\"yourName\", \"default name\");\n  JSObject address = call.getObject(\"address\", new JSObject());\n  boolean isAwesome = call.getBoolean(\"isAwesome\", false);\n\n  if (!call.getData().has(\"id\")) {\n    call.reject(\"Must provide an id\");\n    return;\n  }\n  // ...\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI Globally using npm\nDESCRIPTION: Installs the latest version of the Ionic Command Line Interface (CLI) globally using the Node Package Manager (npm). This command makes the `ionic` command available system-wide.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Background Runner Plugin with npm\nDESCRIPTION: Commands to install the Background Runner plugin and synchronize it with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/background-runner\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installation Button Markup in Markdown\nDESCRIPTION: HTML markup for a styled installation button that launches the VS Code extension installation when clicked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/0-getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"vscode:extension/ionic.ionic\" target=\"_self\"><button style={{color: '#FFF',cursor: 'pointer', fontWeight: 'bold', padding:16, paddingLeft:32, paddingRight:32, border:0, borderRadius:100, backgroundColor: '#000'}}>Install</button></a>\n```\n\n----------------------------------------\n\nTITLE: Opening Native Project with Capacitor CLI in Bash\nDESCRIPTION: This command uses the Capacitor CLI (`cap`) via `npx` to open the native project workspace for a specified platform. The required `<platform>` argument should be either `android` (opens in Android Studio) or `ios` (opens in Xcode).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/open.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open <platform>\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in Android strings.xml\nDESCRIPTION: Shows how to change the application's user-visible display name by modifying the string resource named `app_name` within the `android/app/src/main/res/values/strings.xml` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"app_name\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Getting Hours (UTC) with Date.getUTCHours() in JavaScript\nDESCRIPTION: The `getUTCHours()` method returns the hours (0-23) in the specified date according to universal time (UTC).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCHours(): number\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Echo Plugin in Java\nDESCRIPTION: Demonstrates a simple Capacitor plugin implementation in Java that echoes back received values. Shows core plugin structure with annotations and basic data handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage android.plugin.test;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\nimport com.getcapacitor.annotation.CapacitorPlugin;\n\n@CapacitorPlugin(name = \"Echo\")\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.resolve(ret);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Privacy Manifest for Preferences Plugin\nDESCRIPTION: Example PrivacyInfo.xcprivacy file content for declaring the use of NSPrivacyAccessedAPICategoryUserDefaults API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/preferences.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>CA92.1</string>\n        </array>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Screen Orientation Lock Implementation\nDESCRIPTION: Implementation of the lock method that forces a specific screen orientation and updates the supported orientations mask.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\npublic func lock(_ orientationType: String, completion: @escaping (UIInterfaceOrientationMask) -> Void) {\n  DispatchQueue.main.async {\n    let mask = self.fromOrientationTypeToMask(orientationType)\n    let orientation = self.fromOrientationTypeToInt(orientationType)\n    UIDevice.current.setValue(orientation, forKey: \"orientation\")\n    UINavigationController.attemptRotationToDeviceOrientation()\n    completion(mask)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Core and CLI Dependencies\nDESCRIPTION: This snippet shows how to update the Capacitor Core and CLI dependencies to version 2 using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@2 @capacitor/core@2\n```\n\n----------------------------------------\n\nTITLE: Size Interface Definition\nDESCRIPTION: Interface defining width and height dimensions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Size {\n  width: number;\n  height: number;\n}\n```\n\n----------------------------------------\n\nTITLE: File Path Conversion Example in Capacitor\nDESCRIPTION: Shows how to convert device file paths to Web View-compatible paths using convertFileSrc, including filesystem operations and DOM manipulation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst savedPhotoFile = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),\ndocument.getElementById(\"savedPhoto\").src = savedPhoto;\n```\n\n----------------------------------------\n\nTITLE: Copying Capacitor Web Files Using CLI\nDESCRIPTION: Bash command to copy Capacitor web files into your project. This is required after configuring bundledWebRuntime to true.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/web/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy web\n```\n\n----------------------------------------\n\nTITLE: Adding post_install Hook in Podfile\nDESCRIPTION: Adds a post_install hook to the Podfile that verifies deployment targets are correctly set after pod installation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version\nDESCRIPTION: Updates the Gradle wrapper distribution URL from version 8.0.2 to 8.2.1 in the gradle-wrapper.properties file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/6-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.2.1-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Defining `id` Property Type as `string` for LocalNotificationRequest\nDESCRIPTION: Specifies that the `id` property within the LocalNotificationRequest interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Updating Android Variables in variables.gradle\nDESCRIPTION: Updates Android SDK versions and dependencies for Capacitor 3 compatibility, including changes to compile and target SDK versions, androidx libraries, and testing dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n ext {\n     minSdkVersion = 21\n-    compileSdkVersion = 29\n-    targetSdkVersion = 29\n+    compileSdkVersion = 30\n+    targetSdkVersion = 30\n+    androidxActivityVersion = '1.2.0'\n-    androidxAppCompatVersion = '1.1.0'\n+    androidxAppCompatVersion = '1.2.0'\n+    androidxCoordinatorLayoutVersion = '1.1.0'\n-    androidxCoreVersion =  '1.2.0'\n-    androidxMaterialVersion =  '1.1.0-rc02'\n-    androidxBrowserVersion =  '1.2.0'\n-    androidxLocalbroadcastmanagerVersion =  '1.0.0'\n-    androidxExifInterfaceVersion = '1.2.0'\n-    firebaseMessagingVersion =  '20.1.2'\n-    playServicesLocationVersion =  '17.0.0'\n+    androidxCoreVersion = '1.3.2'\n+    androidxFragmentVersion = '1.3.0'\n-    junitVersion =  '4.12'\n-    androidxJunitVersion =  '1.1.1'\n-    androidxEspressoCoreVersion =  '3.2.0'\n+    junitVersion = '4.13.1'\n+    androidxJunitVersion = '1.1.2'\n+    androidxEspressoCoreVersion = '3.3.0'\n     cordovaAndroidVersion = '7.0.0'\n }\n```\n\n----------------------------------------\n\nTITLE: Passing Null and Array Values from JavaScript to Capacitor Plugin (TypeScript)\nDESCRIPTION: This code demonstrates how to send an object containing a null property and an array with a null element from JavaScript to a Capacitor plugin call in TypeScript. The key purpose is to illustrate how these values are serialized and the complications they may introduce when received natively in iOS code (Swift/Objective-C). This object is typically passed as the 'options' field on the call to a Capacitor native plugin, ensuring values conform to JSON format.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ 'foo': null, 'bar': [1, 2, null, 4]}\n```\n\n----------------------------------------\n\nTITLE: Adding DerivedData to .gitignore - diff\nDESCRIPTION: This git diff demonstrates how to add the DerivedData directory to the ios/.gitignore file. DerivedData contains build intermediates and caches for native iOS builds and should not be checked in. The snippet prevents accidental version control of potentially large, machine-specific build data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n App/Pods\\n App/App/public\\n App/Podfile.lock\\n+DerivedData\\n xcuserdata\\n\\n # Cordova plugins for Capacitor\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Capacitor Compatibility Recommendations Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table showing compatibility recommendations for different Capacitor versions with Node.js, Xcode, and Android Studio versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/support-policy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Capacitor | Minimum Node Version | Minimum Xcode Version | Minimum Android Studio Version |\n| :-------: | :------------------: | :-------------------: | :----------------------------: |\n|    v5     |          16          |         14.1          |            2022.2.1            |\n|    v4     |          12          |          13           |             2020.1             |\n|    v3     |          12          |          12           |             2020.1             |\n```\n\n----------------------------------------\n\nTITLE: File Path Reference in Markdown\nDESCRIPTION: Document header metadata containing title, description, contributors and slug information for the VS Code Capacitor extension documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/vs-code-ext/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Migrate from Cordova\ndescription: Visual Studio Code Extension for Capacitor\ncontributors:\n  - dtarnawsky\nslug: /vscode/cordova\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ionic Project with Capacitor (Bash)\nDESCRIPTION: This command initializes a new Ionic Framework project. By default, new Ionic projects created with this command include Capacitor integration out of the box.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/getting-started/with-ionic.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nionic start\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Screen Orientation in Info.plist\nDESCRIPTION: XML configuration for Info.plist that restricts iPhone orientation to portrait mode and iPad orientation to landscape modes only.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UISupportedInterfaceOrientations</key>\n  <array>\n    <string>UIInterfaceOrientationPortrait</string>\n  </array>\n  <key>UISupportedInterfaceOrientations~ipad</key>\n  <array>\n    <string>UIInterfaceOrientationLandscapeRight</string>\n    <string>UIInterfaceOrientationLandscapeLeft</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Executing the Capacitor Run Command (Bash)\nDESCRIPTION: This command executes the Capacitor `run` process using `npx`. It first performs a `sync` (as described in the linked `sync` command documentation), then builds the native project, and finally deploys it to a specified platform (`android` or `ios`). Optional flags like `--list` can show available target devices, and `--target <id>` can specify a particular device for deployment. Requires Node.js/npm and Capacitor CLI installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/cli/commands/run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of triggerJSEvent in Capacitor Android\nDESCRIPTION: Provides examples of how to use the triggerJSEvent method to fire custom events on the window and document objects. The data parameter must be a serialized JSON string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nbridge.triggerJSEvent(\"myCustomEvent\", \"window\");\nbridge.triggerJSEvent(\"myCustomEvent\", \"document\", \"{ 'dataKey': 'dataValue' }\");\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Screen Orientation\nDESCRIPTION: JSX code that conditionally renders different UI components based on whether the device is in portrait or landscape orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  orientation.includes('portrait') &&\n    {\n      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */\n    };\n}\n{\n  orientation.includes('landscape') &&\n    {\n      /* Let the user \"sign\" and unlock screen orientation through a confirmation button. */\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Packaged Plugin (Bash)\nDESCRIPTION: Shows the commands required to install the packaged plugin into a consuming Capacitor application using npm and then synchronize the native dependencies using the Capacitor CLI (`npx cap sync`). This snippet is intended for the plugin's README documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/packaging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor-community/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Configuring WatchConnectivity in iOS AppDelegate\nDESCRIPTION: Swift code to set up WatchConnectivity in the iOS app's AppDelegate file, initializing the connection between the app and watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nassert(WCSession.isSupported(), \"This sample requires Watch Connectivity support!\")\nWCSession.default.delegate = CapWatchSessionDelegate.shared\nWCSession.default.activate()\n```\n\n----------------------------------------\n\nTITLE: Capacitor Haptics 'vibrate' Method Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `Haptics.vibrate` method, which vibrates the device. It accepts an optional `VibrateOptions` parameter, primarily to set the vibration duration (defaulting to 300ms), and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/haptics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvibrate(options?: VibrateOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Modifying AppDelegate.swift for iOS Integration\nDESCRIPTION: Required modifications to the AppDelegate.swift file in iOS projects using the plugin. This diff shows importing the plugin module and adding a method to support the plugin's orientation functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/packaging.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport UIKit\n+ import CapacitorCommunityScreenOrientation\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -\\> UIInterfaceOrientationMask {\n+     return ScreenOrientationPlugin.supportedOrientations\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Clipboard Plugin using npm\nDESCRIPTION: Provides the necessary shell commands to install the `@capacitor/clipboard` package using npm and then synchronize the native project dependencies with Capacitor. Requires Node.js, npm, and a Capacitor project setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/clipboard.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/clipboard\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version in build.gradle\nDESCRIPTION: Updates the default Kotlin version to 1.8.20 and replaces the Kotlin stdlib dependency in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/5-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\nbuildscript {\n-    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.7.0'\n+    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.8.20'\n    repositories {\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\ndependencies {\n-    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n+    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n```\n\n----------------------------------------\n\nTITLE: clearWatch Method for Geolocation\nDESCRIPTION: API method signature for clearing a previously set location watcher. Takes an options object containing the ID of the watch to clear.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/geolocation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclearWatch(options: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding Pods Helper Requirement in iOS Podfile\nDESCRIPTION: Add a require statement at the top of the Podfile to include the Capacitor iOS pods helpers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n```\n\n----------------------------------------\n\nTITLE: Android Camera Permissions to Remove\nDESCRIPTION: XML permissions that can be removed from AndroidManifest.xml when using Camera plugin v6 without saveToGallery feature.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\"/>\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component to Handle Capacitor Deep Links\nDESCRIPTION: Defines a React functional component (`AppUrlListener`). It uses the `useEffect` hook to register a listener for the Capacitor `appUrlOpen` event when the component mounts. Inside the listener, it extracts the URL path (`slug`) from the event data and uses the `history.push()` method (obtained via `useHistory`) to navigate the React application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst AppUrlListener: React.FC<any> = () => {\n  let history = useHistory();\n  useEffect(() => {\n    CapApp.addListener('appUrlOpen', (data: any) => {\n      // Example url: https://beerswift.app/tabs/tab2\n      // slug = /tabs/tab2\n      const slug = data.url.split('.app').pop();\n      if (slug) {\n        history.push(slug);\n      }\n      // If no match, do nothing - let regular routing\n      // logic take over\n    });\n  }, []);\n\n  return null;\n};\n\nexport default AppUrlListener;\n```\n\n----------------------------------------\n\nTITLE: Removing Single Marker from Map\nDESCRIPTION: Removes a specific marker from the map using its ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nremoveMarker(id: string) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Publish Command using Bash\nDESCRIPTION: Shows the npm command used to publish the plugin package to the npm registry. This command first runs the build script and then uploads the package files, making the plugin available for others to install.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Defining RestoredListener Type Alias - TypeScript\nDESCRIPTION: Specifies a type alias for listeners handling RestoredListenerEvent objects with no return value. Enables components to handle restored plugin callbacks following app termination or state loss.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype RestoredListener = (event: RestoredListenerEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rules for Capacitor Plugin Compatibility\nDESCRIPTION: These ProGuard rules are used to prevent issues with Capacitor plugins when using ProGuard for code obfuscation and optimization. They should be added to the proguard-rules.pro file in the Android project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n-keep class com.mythirdpartyplugin.** { *; }\n\n-keep public class * extends com.getcapacitor.Plugin\n```\n\n----------------------------------------\n\nTITLE: Adding JSDoc Comments to Plugin Definitions for Documentation\nDESCRIPTION: Demonstrates adding JSDoc comment blocks to the `openMap` method and the properties (`latitude`, `longitude`) within the `OpenMapOptions` interface in `src/definitions.ts`. These comments, including descriptions and tags like `@since`, are used by documentation generation tools like `@capacitor/docgen`. The changes are highlighted using diff format.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n\n+  /**\n+   * Opens the map at a given location.\n+   *\n+   * @since 1.1.0\n+   */\n   openMap(options: OpenMapOptions): Promise<void>;\n }\n\n export interface OpenMapOptions {\n+  /**\n+   * The latitude at which to open the map.\n+   */\n   latitude: number;\n\n+  /**\n+   * The longitude at which to open the map.\n+   */\n   longitude: number;\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter for Deep Links - AndroidManifest XML\nDESCRIPTION: This <intent-filter> XML snippet is inserted into your app's AndroidManifest.xml, enabling the app to receive deep links for HTTPS URLs matching the specified host. Set android:autoVerify to 'true' for automatic verification. Parameters: android:scheme (https) and android:host (e.g., beerswift.app). Required: Place inside your main <activity> element.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Referencing App Manifest File in JSON\nDESCRIPTION: This snippet shows the filename of the App Manifest, which is a JSON file that provides metadata about the web application. It should be placed alongside the index.html file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/web/progressive-web-apps.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Data in a Capacitor Android Plugin Method in Java\nDESCRIPTION: Demonstrates retrieving various data types (String, JSObject, Boolean) from the `PluginCall` instance within a plugin method. It utilizes methods like `getString`, `getObject`, `getBoolean` with default values and shows how to check for the existence of a specific key ('id') using `call.getData().has()` before potentially rejecting the call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void storeContact(PluginCall call) {\n  String name = call.getString(\"yourName\", \"default name\");\n  JSObject address = call.getObject(\"address\", new JSObject());\n  boolean isAwesome = call.getBoolean(\"isAwesome\", false);\n\n  if (!call.getData().has(\"id\")) {\n    call.reject(\"Must provide an id\");\n    return;\n  }\n  // ...\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in Angular\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in an Angular application's main.ts file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/pwa-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n// Call the element loader after the platform has been bootstrapped\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for PermissionState representing various permission states as string literals.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Capacitor Configuration in TypeScript\nDESCRIPTION: This snippet shows an example `capacitor.config.ts` file. It imports the `CapacitorConfig` type from `@capacitor/cli` and defines a configuration object with essential properties: `appId` (unique application identifier), `appName` (display name), and `webDir` (directory containing the built web assets). The configuration object is then exported as the default.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/config.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.company.appname',\n  appName: 'My Capacitor App',\n  webDir: 'www',\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for LanguageTag in Capacitor\nDESCRIPTION: Defines the LanguageTag interface used in Capacitor to retrieve a well-formed IETF BCP 47 language tag representing the user's preferred language.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LanguageTag {\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation for Capacitor\nDESCRIPTION: Command to verify the installation and version of Node.js, which is required to be version 16 or higher for Capacitor development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n# v18.3.0\n```\n\n----------------------------------------\n\nTITLE: Getting Device Language Code - Capacitor Device - TypeScript\nDESCRIPTION: The getLanguageCode function signature in TypeScript returns a Promise resolving to a GetLanguageCodeResult object, which contains the device's current language as a two-character code. This method is useful for localization purposes and requires the @capacitor/device package. It takes no parameters and outputs the result via a resolved Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/device.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageCode() => Promise<GetLanguageCodeResult>\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI Globally using npm (Bash)\nDESCRIPTION: Installs the latest version of the Ionic Command Line Interface (CLI) globally using the Node Package Manager (npm). This CLI is essential for creating and managing Ionic projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\n```\n\n----------------------------------------\n\nTITLE: Defining `id` Property Type as `string` for LocalNotificationAction\nDESCRIPTION: Specifies that the `id` property within the LocalNotificationAction interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Enumerating Android Scanning Library Options (TypeScript)\nDESCRIPTION: The `CapacitorBarcodeScannerAndroidScanningLibrary` enum provides options to choose the underlying native scanning library on Android. Options include `ZXING` and `MLKIT` (ML Kit). This can be set within the `android` property of `CapacitorBarcodeScannerOptions`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/barcode-scanner.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nenum CapacitorBarcodeScannerAndroidScanningLibrary {\n    ZXING = 'zxing',\n    MLKIT = 'mlkit'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Dependencies for Capacitor Plugins\nDESCRIPTION: Shows how to add dependencies to a Capacitor plugin's podspec file. This example demonstrates adding the FirebaseFirestore library with version constraints.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n  s.dependency 'Capacitor'\n  s.dependency 'FirebaseFirestore', '~> 11.8'\n```\n\n----------------------------------------\n\nTITLE: Removing Maven Repository from Android Build\nDESCRIPTION: Diff showing the removal of the Maven repository entry from the android/app/build.gradle file, as Capacitor is now distributed via npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n repositories {\n-    maven {\n-        url \"https://dl.bintray.com/ionic-team/capacitor\"\n-    }\n     flatDir {\n         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Core and CLI Dependencies\nDESCRIPTION: These commands install the main Capacitor npm dependencies: the core JavaScript runtime and the command line interface (CLI) for an existing project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Defining Custom URL Scheme in Android strings.xml\nDESCRIPTION: Explains how to configure a custom URL scheme that the application can respond to. Modify the `custom_url_scheme` string resource in `android/app/src/main/res/values/strings.xml`. This allows the app to be launched via URLs like `com.capacitorjs.myapp://` (using the example value). It is recommended to set this to the app's Package ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"custom_url_scheme\">com.capacitorjs.myapp</string>\n```\n\n----------------------------------------\n\nTITLE: Migrating Weak Reference Access with Optional Chaining in iOS Plugins (Swift)\nDESCRIPTION: Shows how to update property accesses to use optional chaining (\"?\") due to weak references (i.e., optional bridge & webView) in Swift plugins for Capacitor 3. This prevents compile-time errors caused by unwrapped optionals and demonstrates compliant bridging and value unwrapping using if-let. No inputs or outputs; migrates code for null safety.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/plugins/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-bridge.presentVC(myViewController, animated: true, completion: nil)\n+bridge?.presentVC(myViewController, animated: true, completion: nil)\n```\n\nLANGUAGE: swift\nCODE:\n```\nif bridge?.isSimEnvironment {\n     // BAD: Will not compile. The boolean is optional (because `bridge` is optional)\n     // and must be unwrapped before it can be evaluated.\n}\nif bridge?.isSimEnvironment == true {\n     // NEUTRAL: An explicit comparison with an optional will work for a boolean but\n     // may not be suitable for all data types.\n}\nif let isSim = bridge?.isSimEnvironment, isSim {\n     // GOOD: Using optional binding to unwrap the optional before examining its value.\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Filesystem Operations Example in TypeScript\nDESCRIPTION: Demonstrates common filesystem operations including writing, reading, and deleting files in the Documents directory, as well as reading files using a full path URI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\n\nconst writeSecretFile = async () => {\n  await Filesystem.writeFile({\n    path: 'secrets/text.txt',\n    data: 'This is a test',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n};\n\nconst readSecretFile = async () => {\n  const contents = await Filesystem.readFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n    encoding: Encoding.UTF8,\n  });\n\n  console.log('secrets:', contents);\n};\n\nconst deleteSecretFile = async () => {\n  await Filesystem.deleteFile({\n    path: 'secrets/text.txt',\n    directory: Directory.Documents,\n  });\n};\n\nconst readFilePath = async () => {\n  // Here's an example of reading a file with a full file path. Use this to\n  // read binary data (base64 encoded) from plugins that return File URIs, such as\n  // the Camera.\n  const contents = await Filesystem.readFile({\n    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',\n  });\n\n  console.log('data:', contents);\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Capacitor Version Status Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that displays the status, release date, maintenance end date, and extended support end date for different versions of Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/support-policy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version |      Status      |   Released    | Maintenance Ends  | Ext. Support Ends |\n| :-----: | :--------------: | :-----------: | :---------------: | :---------------: |\n|   V5    |  End of Support  |  May 3, 2023  | October 15, 2024  |  April 15, 2025   |\n|   V4    |  End of Support  | July 27, 2022 | November 3, 2023  |    May 3, 2024    |\n|   V3    |  End of Support  | May 18, 2021  | January 27, 2023  |   July 27, 2023   |\n|   V2    |  End of Support  | April 3, 2020 | November 18, 2021 |   May 18, 2022    |\n|   V1    |  End of Support  | May 23, 2019  |  October 3, 2020  |   April 3, 2021   |\n```\n\n----------------------------------------\n\nTITLE: Declaring Permissions in Capacitor Plugin Using @NativePlugin Annotation - Java\nDESCRIPTION: This snippet demonstrates how to declare required Android permissions for a Capacitor plugin using the @NativePlugin annotation. Required permissions (e.g., ACCESS_NETWORK_STATE) are specified in the permissions array. This setup ensures that the plugin explicitly defines which permissions it needs, facilitating subsequent runtime permission checks. There are no inputs or outputs; it's a static annotation requirement. Ensure the Manifest.permission constants are accessible in the plugin scope.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@NativePlugin(\n  permissions={\n    Manifest.permission.ACCESS_NETWORK_STATE\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Toast Show Method Signature (TypeScript)\nDESCRIPTION: Specifies the TypeScript signature for the `Toast.show` method. It accepts an `options` object of type `ShowOptions` and returns a `Promise<void>`. This method is used to display a toast notification on the screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options: ShowOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Target Name in Podfile for iOS App\nDESCRIPTION: Shows how to rename the target in the Podfile when changing the iOS app name. The code demonstrates replacing the default 'App' target name with a custom name 'MyRenamedApp'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'MyRenamedApp' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper to 8.2.1\nDESCRIPTION: Update the Gradle wrapper distribution URL from 8.0.2 to 8.2.1 in the gradle-wrapper.properties file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/6-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.2.1-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Handling Arrays with Null Values in Swift\nDESCRIPTION: Demonstrates different approaches to handling arrays that may contain null values in Swift, including type casting and using a Capacitor extension to replace null values with optionals.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\") {\n    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually\n}\nif let values = call.getArray(\"bar\", Int?) {\n    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\").capacitor.replacingNullValues() as? [Int?] {\n    // GOOD: `values` is now cast to `Int?` with `nil` at index 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Visibility type alias, which represents the visibility options for notifications in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation with Capacitor API (TypeScript)\nDESCRIPTION: Defines the `lock()` method signature from the Capacitor Screen Orientation plugin API. This asynchronous function accepts an `options` object containing the desired `orientation` (of type `OrientationLockType`) to lock the screen to. It returns a Promise that resolves once the orientation lock is attempted.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlock(options: OrientationLockOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI and native-run via npm\nDESCRIPTION: This command uses npm (Node Package Manager) to globally install the Ionic CLI (`@ionic/cli`) and `native-run`. These tools are prerequisites for using the streamlined Live Reload process provided by the Ionic CLI with Capacitor projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/live-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli native-run\n```\n\n----------------------------------------\n\nTITLE: Using StatusBar API with Events in Capacitor\nDESCRIPTION: Example showing how to use the StatusBar API in Capacitor, including handling statusTap events, changing styles, toggling visibility, and configuring transparency on Android. Demonstrates key functionality such as setStyle, setOverlaysWebView, hide, and show methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/status-bar.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Events (iOS only)\nwindow.addEventListener('statusTap', function () {\n  console.log('statusbar tapped');\n});\n\n//API\nimport { Plugins, StatusBarStyle } from '@capacitor/core';\n\nconst { StatusBar } = Plugins;\n\nexport class StatusBarExample {\n  isStatusBarLight = true;\n\n  changeStatusBar() {\n    StatusBar.setStyle({\n      style: this.isStatusBarLight ? StatusBarStyle.Dark : StatusBarStyle.Light,\n    });\n    this.isStatusBarLight = !this.isStatusBarLight;\n\n    // Display content under transparent status bar (Android only)\n    StatusBar.setOverlaysWebView({\n      overlay: true,\n    });\n  }\n\n  hideStatusBar() {\n    StatusBar.hide();\n  }\n\n  showStatusBar() {\n    StatusBar.show();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Action Sheet Capacitor Plugin\nDESCRIPTION: Commands to install the Action Sheet plugin and synchronize the native projects with the plugin's native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/action-sheet\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Adding Download Progress Listener\nDESCRIPTION: Method to add an event listener for monitoring file download progress. Returns a plugin listener handle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'progress', listenerFunc: ProgressListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Using Facade Pattern in Local Notifications Plugin (Java)\nDESCRIPTION: Example of the Facade design pattern from the Capacitor Local Notifications plugin. This load() method creates a simple interface to several complex subsystems, hiding the implementation details of notification management.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/code-abstraction.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void load() {\n    super.load();\n    notificationStorage = new NotificationStorage(getContext());\n    manager = new LocalNotificationManager( … );\n    manager.createNotificationChannel();\n    notificationChannelManager = new NotificationChannelManager(getActivity());\n    staticBridge = this.bridge;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Back Button Listener Type Alias in Capacitor (TypeScript)\nDESCRIPTION: Defines the TypeScript type alias `BackButtonListener`. This type represents a function used as a callback for the `backButton` event on Android. It handles hardware back button presses, receiving an `event` object of type `BackButtonListenerEvent` which indicates if the browser history allows going back.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/app.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype BackButtonListener = (event: BackButtonListenerEvent) => void;\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Zoom Level with Capacitor Text Zoom (TypeScript)\nDESCRIPTION: TypeScript signature for the `get()` method of the Text Zoom API. This asynchronous method returns a Promise that resolves to a `GetResult` object containing the current Web View text zoom level as a decimal value (e.g., 1.2 represents 120%).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/text-zoom.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget() => Promise<GetResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel List Result - TypeScript\nDESCRIPTION: Describes the result returned from listing notification channels, containing an array of Channel objects. Used as a response from the plugin's channel listing API, where 'channels' is an array of previously created Channel entries. No dependencies required; input is implicit in the channel configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for iOS Development\nDESCRIPTION: Command to install the Xcode Command Line Tools, required for iOS development with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Importing Capacitor Plugin\nDESCRIPTION: Example of importing a Capacitor plugin directly from its package in the new recommended way.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera } from '@capacitor/camera';\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Autofill Save Password Plugin (Bash)\nDESCRIPTION: This bash command installs the \\\"capacitor-ios-autofill-save-password\\\" plugin via npm for iOS platforms. This plugin is required to programmatically invoke the save-credentials dialog in native iOS apps built with Capacitor. Ensure npm is set up and run this within your project folder on the command line.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/autofill-credentials.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install capacitor-ios-autofill-save-password\n```\n\n----------------------------------------\n\nTITLE: Checking Share Availability with canShare in TypeScript\nDESCRIPTION: Defines the `canShare` method signature available since version 1.1.0. This asynchronous function checks if the native sharing functionality is supported on the current platform and returns a Promise resolving to a `CanShareResult` object containing a boolean `value`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/share.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncanShare() => Promise<CanShareResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Levels for Android Notifications in TypeScript\nDESCRIPTION: Defines a TypeScript type alias `Importance` representing the interruption level for Android notification channels. It accepts numeric literal values from 1 to 5, corresponding to Android's `NotificationManager` importance constants (e.g., IMPORTANCE_MIN, IMPORTANCE_LOW, IMPORTANCE_DEFAULT, IMPORTANCE_HIGH, IMPORTANCE_MAX). Higher values indicate greater interruption potential. This type is used within the `Channel` interface to configure notification channel behavior on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n1 | 2 | 3 | 4 | 5\n```\n\n----------------------------------------\n\nTITLE: Removing iOS AppDelegate Code\nDESCRIPTION: Removing unnecessary touchesBegan method from iOS AppDelegate.swift file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/4-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n-  super.touchesBegan(touches, with: event)\n-\n-  let statusBarRect = UIApplication.shared.statusBarFrame\n-  guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\n-\n-  if statusBarRect.contains(touchPoint) {\n-      NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\n-  }\n-}\n```\n\n----------------------------------------\n\nTITLE: Invoking Capacitor CLI Commands - Bash\nDESCRIPTION: This snippet demonstrates the general usage pattern for running Capacitor CLI commands via the command line. It details the use of optional flags for version display and help output. No external dependencies are required beyond Node.js and the Capacitor CLI itself, and the snippet is intended for use within terminal environments. The primary input is the optional command and relevant flags; the output is either help/version information or execution of the specified command.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/cli/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap [-V] [-h] [<command>]\n```\n\n----------------------------------------\n\nTITLE: Requesting All Plugin Permissions Using requestAllPermissions in Capacitor Java (Diff Format)\nDESCRIPTION: This diff code demonstrates changing a plugin method to request all defined permissions at once using requestAllPermissions. It utilizes a callback for handling the result and is suitable for cases where multiple permissions are required simultaneously. Dependencies include Capacitor permission helper methods and callback registration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n @PluginMethod()\\n public void takePhoto(PluginCall call) {\\n   if (!hasRequiredPermissions()) {\\n+    requestAllPermissions(call, \"cameraPermsCallback\");\\n   } else {\\n     loadCamera(call);\\n   }\\n }\\n\\n @PermissionCallback\\n private void cameraPermsCallback(PluginCall call) {\\n   ...\\n }\n```\n\n----------------------------------------\n\nTITLE: Enabling User Current Location Layer - TypeScript\nDESCRIPTION: Enables or disables display of the user's current location on the map. Accepts a boolean 'enabled' flag and returns a void Promise. Requires location permissions to be granted and device support.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nenableCurrentLocation(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Constant for Data Directory in Capacitor Filesystem (JavaScript/TypeScript)\nDESCRIPTION: Specifies the Data directory for Capacitor Filesystem operations using the 'DATA' string literal. On iOS, this constant maps to the Documents directory. On Android, it represents the application's private files directory, where contents are deleted when the application is uninstalled.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/filesystem.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n'DATA'\n```\n\n----------------------------------------\n\nTITLE: Portal and LiveUpdate Interface Definitions\nDESCRIPTION: TypeScript interfaces for Capacitor Portals and Live Update configuration including app identification and update methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/config.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Portal {\n    name: string;\n    webDir: string;\n    liveUpdateConfig?: LiveUpdateConfig;\n}\n\nexport interface LiveUpdateConfig {\n    appId: string;\n    channel: string;\n    autoUpdateMethod: AutoUpdateMethod;\n    maxVersions?: number;\n    key?: string;\n}\n\nexport type AutoUpdateMethod = 'none' | 'background';\n```\n\n----------------------------------------\n\nTITLE: Declaring Void Return Method in iOS (Objective-C)\nDESCRIPTION: This Objective-C snippet shows how to declare a Capacitor plugin method (`method1`) in the plugin's `.m` file for iOS that returns no data. The `CAP_PLUGIN_METHOD` macro registers the method with Capacitor, specifying `CAPPluginReturnNone` to indicate that the corresponding promise should resolve without a value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/method-types.md#2025-04-23_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Configuration Types in TypeScript\nDESCRIPTION: This code snippet defines the CapacitorConfig interface, which includes various configuration options for Capacitor projects. It covers iOS-specific settings, server configurations, Cordova integration options, and plugin configurations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CapacitorConfig {\n  android?: {\n    // Android-specific options\n  };\n\n  ios?: {\n    scrollEnabled?: boolean;\n    cordovaLinkerFlags?: string[];\n    allowsLinkPreview?: boolean;\n    loggingBehavior?: 'none' | 'debug' | 'production';\n    includePlugins?: string[];\n    limitsNavigationsToAppBoundDomains?: boolean;\n    preferredContentMode?: 'recommended' | 'desktop' | 'mobile';\n    handleApplicationNotifications?: boolean;\n    webContentsDebuggingEnabled?: boolean;\n  };\n\n  server?: {\n    hostname?: string;\n    iosScheme?: string;\n    androidScheme?: string;\n    url?: string;\n    cleartext?: boolean;\n    allowNavigation?: string[];\n    errorPath?: string;\n  };\n\n  cordova?: {\n    accessOrigins?: string[];\n    preferences?: { [key: string]: string | undefined };\n    staticPlugins?: string[];\n  };\n\n  plugins?: PluginsConfig;\n\n  includePlugins?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Plugin Method in Java\nDESCRIPTION: This Java snippet provides the platform-specific implementation of the `openMap` method for Android, using the Capacitor Plugin API. It reads `latitude` and `longitude` as doubles from the PluginCall object, includes a placeholder for additional logic, and completes the method by resolving the call. This code should be added to `android/src/main/[nested folders]/EchoPlugin.java` and relies on Capacitor's Java plugin API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void openMap(PluginCall call) {\n  Double latitude = call.getDouble(\"latitude\");\n  Double longitude = call.getDouble(\"longitude\");\n\n  // more logic\n\n  call.resolve();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending PluginsConfig Interface for TypeScript Typing (TypeScript)\nDESCRIPTION: Demonstrates how to provide TypeScript typing for plugin configuration values by extending the PluginsConfig interface. It includes JSDoc comments for documentation and specifies types for 'style' and 'iconColor' properties.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    MyCoolPlugin?: {\n      /**\n       * Override the cool theme style if your app doesn't support light/dark theme changes.\n       *\n       * @since 1.0.0\n       * @example \"light\"\n       */\n      style?: 'dark' | 'light';\n\n      /**\n       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.\n       *\n       * @since 1.0.0\n       * @default #ffffff\n       * @example \"#FF9900\"\n       */\n      iconColor?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Plugin Method in Swift\nDESCRIPTION: This Swift snippet shows the Capacitor-compliant implementation of the `openMap` plugin method for iOS. It retrieves `latitude` and `longitude` from the `CAPPluginCall`, includes a placeholder for runtime logic, and signals completion by calling `call.resolve()`. Meant to be placed in `ios/Sources/EchoPlugin/EchoPlugin.swift`, it depends on Capacitor's iOS plugin framework and proper registration of exported methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@objc func openMap(_ call: CAPPluginCall) {\n  let latitude = call.getString(\"latitude\")\n  let longitude = call.getNumber(\"longitude\")\n\n  // more logic\n\n  call.resolve()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Capacitor Plugin in Objective-C\nDESCRIPTION: This Objective-C snippet registers the ScreenOrientation plugin and its methods with the Capacitor runtime. It uses the CAP_PLUGIN macro to define the methods exposed to JavaScript, enabling communication between the web layer and native iOS code. Dependencies include Foundation and Capacitor libraries, and this code should be placed in the plugin's .m implementation file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <Foundation/Foundation.h>\\n#import <Capacitor/Capacitor.h>\\n\\nCAP_PLUGIN(ScreenOrientationPlugin, \\\"ScreenOrientation\\\",\\n  CAP_PLUGIN_METHOD(orientation, CAPPluginReturnPromise);\\n  CAP_PLUGIN_METHOD(lock, CAPPluginReturnPromise);\\n  CAP_PLUGIN_METHOD(unlock, CAPPluginReturnPromise);\\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Headers Interface Methods\nDESCRIPTION: Interface methods for HTTP Headers manipulation, including append, delete, get, has, set, and forEach operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nappend(name: string, value: string): void\ndelete(name: string): void\nget(name: string): string | null\nhas(name: string): boolean\nset(name: string, value: string): void\nforEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void\n```\n\n----------------------------------------\n\nTITLE: Verifying Plugin Code with npm\nDESCRIPTION: Command to verify that the plugin code has been correctly ported and is ready for publication. This checks for errors and ensures the plugin meets packaging requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/packaging.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Scheduling Local Notifications - Capacitor Plugin API - TypeScript\nDESCRIPTION: This code snippet defines the schedule method from the Capacitor Local Notifications API, allowing scheduling of one or more notifications. It accepts a ScheduleOptions object with notification parameters and returns a Promise resolving to a ScheduleResult. This method requires the plugin to be installed and configured and is available from version 1.0.0. Inputs are provided via options, and the result confirms scheduled notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nschedule(options: ScheduleOptions) => Promise<ScheduleResult>\n```\n\n----------------------------------------\n\nTITLE: Creating Privacy Manifest File for iOS App Using Capacitor Preferences\nDESCRIPTION: This XML snippet demonstrates a sample PrivacyInfo.xcprivacy file for an iOS app using the @capacitor/preferences plugin. It declares the use of UserDefaults API with the reason code CA92.1.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/privacy-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyTracking</key>\n    <false/>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>CA92.1</string>\n        </array>\n      </dict>\n    </array>\n    <key>NSPrivacyTrackingDomains</key>\n    <array/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Defining the CapacitorHttp `get` Method Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `get` method of the CapacitorHttp API. It takes an `HttpOptions` object as input (though the method implicitly sets the HTTP method to GET) and returns a `Promise` that resolves with an `HttpResponse`. This method specifically makes HTTP GET requests using native libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget(options: HttpOptions) => Promise<HttpResponse>\n```\n\n----------------------------------------\n\nTITLE: Managing Plugin Calls for Single Completion in iOS\nDESCRIPTION: Functions available in iOS for saving, retrieving, and releasing plugin calls meant for single completion. These methods allow handling asynchronous operations that will resolve once.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc saveCall(_ call: CAPPluginCall)\nfunc savedCall(withID: String) -> CAPPluginCall?\nfunc releaseCall(_ call: CAPPluginCall)\nfunc releaseCall(withID: String)\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Screen Orientation Plugin\nDESCRIPTION: This shell command installs the cordova-plugin-screen-orientation plugin and updates Capacitor. This plugin is required for dynamic orientation control in Capacitor apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-screen-orientation\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity Plugin Registration\nDESCRIPTION: Java code showing the required changes for plugin registration order in MainActivity.java.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/4-0.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends BridgeActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        registerPlugin(PluginInMyApp.class);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clipboard Write Method Definition\nDESCRIPTION: TypeScript method signature for writing data to the clipboard. Takes ClipboardWrite options as parameter and returns a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/clipboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwrite(options: ClipboardWrite) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Echo Plugin in Objective-C\nDESCRIPTION: Creates the Objective-C bridge file necessary for registering the Echo plugin with Capacitor's runtime. Defines the plugin name and available methods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/ios/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(EchoPlugin, \"Echo\",\n    CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Old Capacitor 2 Storage Data in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the removeOld method, which removes keys with the _cap_ prefix that originated from the Capacitor 2 Storage plugin. Takes no arguments and returns a Promise when the cleanup is complete. Should be called after migration if you wish to delete the old data. Requires @capacitor/storage and is available since API version 1.1.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOld() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing onCreate Plugin Registration for Default Android Setup - diff (Java)\nDESCRIPTION: This diff removes the onCreate plugin manual loader in MainActivity.java, as Capacitor 3 handles plugin registration automatically for npm-installed plugins. Extra plugin registration code is now only needed for custom or local plugins, streamlining updates and plugin management. Requires Capacitor Android v3 or later.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\\n-    @Override\\n-    public void onCreate(Bundle savedInstanceState) {\\n-        super.onCreate(savedInstanceState);\\n-\\n-        // Initializes the Bridge\\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\\n-            // Additional plugins you've installed go here\\n-            add(Plugin1.class);\\n-            add(Plugin2.class);\\n-        }});\\n-    }\\n }\\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Portable Path from a Local URL in Swift\nDESCRIPTION: This snippet defines a helper method that reverses localURL by creating a web-view-compatible URL from a native iOS file URL. The function accepts an optional localURL parameter and returns an optional URL suitable for web view use. It's intended for scenarios where native files need to be accessed in the web layer of a Capacitor app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfunc portablePath(fromLocalURL localURL: URL?) -> URL?\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Listeners and Registration in TypeScript\nDESCRIPTION: Example showing how to set up push notification listeners and handle registration flow. Includes error handling, notification reception, and action handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PushNotifications } from '@capacitor/push-notifications';\n\nconst addListeners = async () => {\n  await PushNotifications.addListener('registration', token => {\n    console.info('Registration token: ', token.value);\n  });\n\n  await PushNotifications.addListener('registrationError', err => {\n    console.error('Registration error: ', err.error);\n  });\n\n  await PushNotifications.addListener('pushNotificationReceived', notification => {\n    console.log('Push notification received: ', notification);\n  });\n\n  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n    console.log('Push notification action performed', notification.actionId, notification.inputValue);\n  });\n}\n\nconst registerNotifications = async () => {\n  let permStatus = await PushNotifications.checkPermissions();\n\n  if (permStatus.receive === 'prompt') {\n    permStatus = await PushNotifications.requestPermissions();\n  }\n\n  if (permStatus.receive !== 'granted') {\n    throw new Error('User denied permissions!');\n  }\n\n  await PushNotifications.register();\n}\n\nconst getDeliveredNotifications = async () => {\n  const notificationList = await PushNotifications.getDeliveredNotifications();\n  console.log('delivered notifications', notificationList);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ScreenOrientationWeb Class Extending WebPlugin (TypeScript)\nDESCRIPTION: This snippet sets up the skeleton of the ScreenOrientationWeb class, extending Capacitor's WebPlugin. It imports the necessary types and structures the constructor for further enhancements. No additional dependencies beyond Capacitor and the plugin's typings are required. Instantiating this class provides the basis for web-side plugin logic in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-web.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebPlugin } from '@capacitor/core';\nimport type { ScreenOrientationPlugin } from './definitions';\n\nexport class ScreenOrientationWeb extends WebPlugin {\n  constructor() {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening URL in System Browser with Capacitor InAppBrowser (TypeScript)\nDESCRIPTION: Imports `InAppBrowser` and `DefaultSystemBrowserOptions`. Uses the `openInSystemBrowser` method to open the specified URL (\"https://www.google.com\") within the app using the system's optimized browser view (Custom Tabs on Android, SFSafariViewController on iOS). Default options are provided. Requires the `@capacitor/inappbrowser` plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InAppBrowser, DefaultSystemBrowserOptions } from '@capacitor/inappbrowser';\nawait InAppBrowser.openInSystemBrowser({\n    url: \"https://www.google.com\",\n    options: DefaultSystemBrowserOptions\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleEvery Type Alias - TypeScript\nDESCRIPTION: Defines a TypeScript union type alias for specifying notification repetition intervals, listing allowed string literals such as 'year', 'month', 'day', and so on. No dependencies. Used as a property in scheduling APIs, constraining values to known granularities for repeat behavior.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScheduleEvery = 'year' | 'month' | 'two-weeks' | 'week' | 'day' | 'hour' | 'minute' | 'second';\n```\n\n----------------------------------------\n\nTITLE: watchPosition Method for Geolocation\nDESCRIPTION: API method signature for setting up a location change watcher. Takes options and a callback function that receives position updates, and returns a callback ID that can be used to clear the watch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/geolocation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwatchPosition(options: GeolocationOptions, callback: GeolocationWatchCallback) => CallbackID\n```\n\n----------------------------------------\n\nTITLE: Adding a Native Platform Project using Capacitor CLI in Bash\nDESCRIPTION: This command utilizes `npx` to run the Capacitor CLI (`cap`) and executes the `add` command. It requires a platform argument (`android` or `ios`) to specify which native project to add to the current Capacitor application. For iOS, an optional `--packagemanager` flag can specify using Swift Package Manager (`SPM`) or `Cocoapods`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/add.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add <platform>\n```\n\n----------------------------------------\n\nTITLE: Defining the PermissionStatus Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `PermissionStatus` which represents the current permission status for camera and photos access. It contains properties `camera` and `photos`, both using the `CameraPermissionState` type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionStatus {\n  /** Permission state for camera access. */\n  camera: CameraPermissionState;\n  /** Permission state for photos access. */\n  photos: CameraPermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Screen Reader State Changes in TypeScript\nDESCRIPTION: Defines the `addListener` method signature for the `stateChange` event. It registers a listener function (`StateChangeListener`) that is called whenever the screen reader is turned on or off. The method returns a `PluginListenerHandle` which can be used to remove the listener later. This method is not supported on the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/screen-reader.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Scheme in Capacitor\nDESCRIPTION: TypeScript code for specifying which iOS scheme to use in the Capacitor configuration file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nios: {\n  scheme: 'App QA',\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CAPBridgeViewController in Capacitor - Swift\nDESCRIPTION: This code snippet defines a new ViewController, MyViewController, that subclasses CAPBridgeViewController, enabling custom native behavior in a Capacitor iOS project. It requires the Capacitor iOS runtime installed via CocoaPods or Swift Package Manager and that UIKit and Capacitor are imported. The class can be customized further, such as overriding view lifecycle methods or integrating third-party SDKs. Expected input is the launch of this controller within the iOS app lifecycle, and any additional logic is added inside the subclass. No functional code is present yet; this provides the foundation for further extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/viewcontroller.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\n\nclass MyViewController: CAPBridgeViewController {\n    // additional code\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Methods for Capacitor - Swift\nDESCRIPTION: This snippet defines the pluginMethods array, registering plugin methods for use by Capacitor. Each CAPPluginMethod specifies the method name and return type, indicating to Capacitor which interface methods are available and how results will be returned to JavaScript (i.e., via Promise). This code is required within the CAPBridgedPlugin subclass.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\npublic let pluginMethods: [CAPPluginMethod] = [\n    CAPPluginMethod(name: \"echo\", returnType: CAPPluginReturnPromise)\n]\n```\n\n----------------------------------------\n\nTITLE: Defining `lights` Property Type as `boolean` for NotificationChannel\nDESCRIPTION: Specifies that the `lights` property within the NotificationChannel interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Listening for Screen Reader State Changes in Capacitor (TypeScript)\nDESCRIPTION: API method signature for `addListener`. This function registers a callback (`StateChangeListener`) to be executed whenever the screen reader's state changes (turned on or off). It specifically listens for the 'stateChange' event. Returns a Promise resolving to a `PluginListenerHandle` which can be used to remove the listener later. This method is not supported on the web.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-reader.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS .gitignore for Capacitor Upgrade - diff\nDESCRIPTION: This snippet demonstrates the addition of the \"Podfile.lock\" entry to the ios/.gitignore file, which is recommended when upgrading to Capacitor 1.1.0. The change ensures that lock files generated by CocoaPods are ignored in source control, preventing potential dependency conflicts across different environments. No additional dependencies are required, but maintaining proper .gitignore hygiene is important to avoid version control issues with platform-specific lock files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/1-1.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n App/build\\n App/Pods\\n App/public\\n+App/Podfile.lock\\n xcuserdata\\n\\n # Cordova plugins for Capacitor\\n\n```\n\n----------------------------------------\n\nTITLE: Managing Plugin Calls for Single Completion in Android\nDESCRIPTION: Functions available in Android for saving, retrieving, and releasing plugin calls meant for single completion. These methods allow handling asynchronous operations that will resolve once.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid saveCall(PluginCall call)\nPluginCall getSavedCall(String callbackId)\nvoid releaseCall(PluginCall call)\nvoid releaseCall(String callbackId)\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Visibility type alias, representing the visibility level of notifications on the lock screen for Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/push-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Third-Party Cookies in Info.plist\nDESCRIPTION: This XML snippet shows the necessary configuration within the iOS `Info.plist` file to enable better support for third-party cookies on iOS 14 and later. The `WKAppBoundDomains` key contains an array of strings, each representing a domain for which third-party cookies should be allowed (up to 10 domains).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>WKAppBoundDomains</key>\n<array>\n  <string>www.mydomain.com</string>\n  <string>api.mydomain.com</string>\n  <string>www.myothercooldomain.com</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for Apple Silicon Macs\nDESCRIPTION: Commands for installing and running CocoaPods on Apple Silicon Macs using Rosetta.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/environment-setup.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo arch -x86_64 gem install ffi\n\nnpx cap copy\narch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Update Command in Bash\nDESCRIPTION: This command updates the native plugins and dependencies referenced in package.json. It can be run for all platforms or a specific platform (android or ios). An optional --deployment flag can be used for iOS to maintain the Podfile.lock and use the --deployment option with pod install.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Registering a Capacitor Plugin and Method in Objective-C\nDESCRIPTION: Shows the Objective-C code (`.m` file) required to register a Swift Capacitor plugin (`EchoPlugin`) and its methods (`echo`) with the Capacitor runtime. The `CAP_PLUGIN` macro registers the plugin class with its JavaScript name (\"Echo\"). The `CAP_PLUGIN_METHOD` macro registers the `echo` method, specifying `CAPPluginReturnPromise` to indicate it returns a JavaScript Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(EchoPlugin, \"Echo\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Capacitor Plugin in JavaScript\nDESCRIPTION: This TypeScript snippet demonstrates how to register the native plugin on the JavaScript side. It imports `registerPlugin` from `@capacitor/core` and uses it to create a JavaScript object (`Echo`) linked to the native plugin. The string 'Echo' passed to `registerPlugin` must match the `name` specified in the `@CapacitorPlugin` annotation in the Java code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/android/custom-code.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nconst Echo = registerPlugin('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Removing All Network Listeners with Capacitor - TypeScript\nDESCRIPTION: This code snippet defines the signature for the 'removeAllListeners' API in the Capacitor Network plugin. The function is asynchronous and returns a Promise that resolves when all registered event listeners for network status changes are removed for the current plugin context. Use this to clean up listeners and prevent memory leaks, especially in components that are unmounted or destroyed. The function requires no arguments and is available in @capacitor/network since v1.0.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/network.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing the Capacitor Dialog Plugin using npm\nDESCRIPTION: Installs the @capacitor/dialog plugin using npm and synchronizes the native project dependencies using the Capacitor CLI command `npx cap sync`. This makes the plugin available in the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/dialog\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Mapping Arrays with NSNull to Arrays of Optionals (Swift)\nDESCRIPTION: This snippet leverages a Capacitor-provided extension function replacingNullValues to transform an array potentially containing NSNull members (from JavaScript nulls) into a Swift array of optionals ([Int?]), automatically setting elements to nil where appropriate. This assists with safe iteration and type-checking. Requires use of the JSValue protocol and the 'capacitor' bridging extensions. Only available in Swift environments with the Capacitor SDK.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/data-types.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nif let values = call.getArray(\"bar\").capacitor.replacingNullValues() as? [Int?] {\n    // GOOD: `values` is now cast to `Int?` with `nil` at index 2\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Privacy Screen Protection in TypeScript\nDESCRIPTION: Function to disable privacy screen protection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/privacy-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndisable() => Promise<{ success: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Complete AppDelegate Example with Firebase Integration (Swift)\nDESCRIPTION: This provides a full example of the `AppDelegate.swift` file after incorporating the necessary Firebase import, initialization call (`FirebaseApp.configure()`), and the APNS registration callback methods. It demonstrates the standard structure and placement of the Firebase integration code within the application delegate for a Capacitor iOS app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Capacitor\nimport Firebase\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    FirebaseApp.configure()\n    return true\n  }\n\n  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Messaging.messaging().apnsToken = deviceToken\n    Messaging.messaging().token(completion: { (token, error) in\n      if let error = error {\n          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n      } else if let token = token {\n          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)\n      }\n    })\n  }\n\n  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Notification Channel ID in AndroidManifest (XML)\nDESCRIPTION: This XML snippet demonstrates setting a default notification channel ID in the `AndroidManifest.xml` file. If an incoming FCM message doesn't specify a channel, this value (referencing a string resource like `@string/default_notification_channel_id`) will be used. This is relevant for Android 8.0 (API 26) and higher.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\n    android:value=\"@string/default_notification_channel_id\" />\n```\n\n----------------------------------------\n\nTITLE: Committing Virtual Filesystem Changes to Disk with Trapeze (TypeScript)\nDESCRIPTION: Commits all buffered changes performed through the MobileProject API to the actual filesystem, making version and configuration updates persistent. Requires a previously loaded and modified MobileProject object. The main input is the current in-memory state; output is the persistence of those changes to disk, with side effects on project files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/automated-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.commit();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase in AppDelegate Application Lifecycle - Swift\nDESCRIPTION: This snippet runs the FirebaseApp.configure() method to initialize Firebase when your iOS application launches. Place this code in the application(_:didFinishLaunchingWithOptions:) override to activate Firebase features, depending on the FirebaseCore import and installed CocoaPods. This code should be executed exactly once per app launch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nFirebaseApp.configure()\n```\n\n----------------------------------------\n\nTITLE: Enabling CapacitorHttp Plugin in TypeScript Configuration\nDESCRIPTION: This TypeScript snippet demonstrates configuring the CapacitorHttp plugin within a `capacitor.config.ts` file. It imports the `CapacitorConfig` type from `@capacitor/cli` and defines a configuration object, setting `plugins.CapacitorHttp.enabled` to `true` to enable native HTTP request handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    CapacitorHttp: {\n      enabled: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing PWA Elements via npm\nDESCRIPTION: Command to install the @ionic/pwa-elements package using npm.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/web/pwa-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor iOS Platform via npm and cap CLI - bash\nDESCRIPTION: This snippet provides the commands to upgrade the Capacitor iOS SDK to the latest v3 version and synchronize the iOS project configuration. Requires npm and Capacitor CLI; the update ensures native code reflects new API contracts, and dependencies are up to date. No parameters required; run in the project root.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios@latest-3\\nnpx cap sync ios\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Capacitor Plugin\nDESCRIPTION: Commands to install the Toast Capacitor plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/toast@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Native Platform Dependencies\nDESCRIPTION: Installs the npm packages required for the Android and iOS native platforms (`@capacitor/android`, `@capacitor/ios`) as production dependencies. This step is necessary before creating the actual native project directories.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/android @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Updating OpenSSL and Ruby for GitHub Connection\nDESCRIPTION: Series of commands to update openssl and ruby when encountering GitHub connection issues with CocoaPods\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\nbrew upgrade openssl\nbrew install ruby\nbrew link --overwrite ruby\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Method for Android Platform in Java\nDESCRIPTION: Shows the native Android implementation of the `openMap` method within the `EchoPlugin.java` file. It uses the `@PluginMethod` annotation, retrieves `latitude` and `longitude` parameters (as Doubles) from the `PluginCall` object, includes a placeholder for native logic, and finally resolves the call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void openMap(PluginCall call) {\n  Double latitude = call.getDouble(\"latitude\");\n  Double longitude = call.getDouble(\"longitude\");\n\n  // more logic\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor App Plugin (bash)\nDESCRIPTION: Installs the @capacitor/app plugin using npm and synchronizes the project using the Capacitor CLI. Requires an existing Capacitor-enabled project and Node.js/npm installed. The commands ensure the plugin is available in your app's build for all supported platforms. No parameters are required; simply run in your project directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/app\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Permissions with DispatchGroup\nDESCRIPTION: This example shows how to request multiple types of permissions (contacts and camera) simultaneously using a DispatchGroup to synchronize the completion of the various permission requests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nlet store = CNContactStore()\n\n@objc override func requestPermissions(_ call: CAPPluginCall) {\n    // get the permissions to check or default to all of them\n    var permissions = call.getArray(\"types\", String.self) ?? []\n    if permissions.isEmpty {\n        permissions = [\"contacts\", \"camera\"]\n    }\n\n    let group = DispatchGroup()\n    if permissions.contains(\"contacts\") {\n        group.enter()\n        store.requestAccess(for: .contacts) { (_, _) in\n            group.leave()\n        }\n    }\n    if permissions.contains(\"camera\") {\n        group.enter()\n        AVCaptureDevice.requestAccess(for: .video) { _ in\n            group.leave()\n        }\n    }\n    group.notify(queue: DispatchQueue.main) {\n        self.checkPermissions(call)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Storage Permissions with Max SDK Version\nDESCRIPTION: XML snippet for `AndroidManifest.xml` demonstrating how to declare storage permissions (`READ_EXTERNAL_STORAGE`, `WRITE_EXTERNAL_STORAGE`) conditionally, limiting them to specific Android SDK versions where they are required. `READ_EXTERNAL_STORAGE` is needed up to SDK 32, and `WRITE_EXTERNAL_STORAGE` up to SDK 29.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"29\"/>\n```\n\n----------------------------------------\n\nTITLE: Listening to Keyboard Events in TypeScript\nDESCRIPTION: Demonstrates how to import the Keyboard module from @capacitor/keyboard and add listeners for various keyboard visibility events (`keyboardWillShow`, `keyboardDidShow`, `keyboardWillHide`, `keyboardDidHide`). The listener functions receive keyboard height information where applicable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/keyboard.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n----------------------------------------\n\nTITLE: Safely Unwrapping the Bridge Reference Using Guard in Swift\nDESCRIPTION: This Swift snippet uses a guard statement to check for a valid bridge reference before proceeding. This pattern provides a safe way to avoid runtime errors by exiting early if the bridge is nil. It is especially important when plugin methods depend on access to the bridge for further operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let bridge = self.bridge else { return }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Server URL for Live Reload (JSON)\nDESCRIPTION: Defines the `server` configuration within `capacitor.config.json`. The `url` property specifies the IP address and port of the local development server, enabling the native app's WebView to load content from it during Live Reload. `cleartext` allows HTTP traffic on Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/live-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"url\": \"http://192.168.1.68:8100\",\n  \"cleartext\": true\n},\n```\n\n----------------------------------------\n\nTITLE: TypeScript Camera Permission Type Definition\nDESCRIPTION: Type definition specifying the available camera permission types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/camera.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CameraPermissionType = 'camera' | 'photos'\n```\n\n----------------------------------------\n\nTITLE: AppDelegate Configuration for Screen Orientation Support\nDESCRIPTION: Adds support for controlling supported interface orientations at the application level by implementing a delegate method that returns allowed orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n    return ScreenOrientationPlugin.supportedOrientations\n  }\n```\n\n----------------------------------------\n\nTITLE: Dialog API Usage Examples in TypeScript\nDESCRIPTION: Example showing how to use alert, confirm and prompt dialogs using the Dialog API. Demonstrates handling user responses and implementing basic dialog functionality.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from '@capacitor/dialog';\n\nconst showAlert = async () => {\n  await Dialog.alert({\n    title: 'Stop',\n    message: 'this is an error',\n  });\n};\n\nconst showConfirm = async () => {\n  const { value } = await Dialog.confirm({\n    title: 'Confirm',\n    message: `Are you sure you'd like to press the red button?`,\n  });\n\n  console.log('Confirmed:', value);\n};\n\nconst showPrompt = async () => {\n  const { value, cancelled } = await Dialog.prompt({\n    title: 'Hello',\n    message: `What's your name?`,\n  });\n\n  console.log('Name:', value);\n  console.log('Cancelled:', cancelled);\n};\n```\n\n----------------------------------------\n\nTITLE: Capacitor Sync Command Output Example\nDESCRIPTION: Example output showing the sync process including copying web assets, native bridge, config files, and updating plugins. Demonstrates timing information for each step.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/sync.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n√ Copying web assets from www to android\\app\\src\\main\\assets\\public in 3.37s\n√ Copying native bridge in 5.80ms\n√ Copying capacitor.config.json in 2.59ms\n√ copy in 3.43s\n√ Updating Android plugins in 11.48ms\n  Found 1 Capacitor plugin for android:\n    capacitor-mapbox (0.0.1)\n√ update android in 105.91ms\n√ copy in 409.80μp\n√ update web in 6.80μp\nSync finished in 3.563s\n```\n\n----------------------------------------\n\nTITLE: Registering the Capacitor Plugin with Objective-C Macros - Objective-C\nDESCRIPTION: This Objective-C snippet registers the EchoPlugin Swift plugin with Capacitor, exposing its echo method to the JavaScript bridge. It uses the CAP_PLUGIN and CAP_PLUGIN_METHOD macros from Capacitor.h to link the Swift implementation to the Capacitor runtime. The plugin name 'Echo' must match identifiers used in JavaScript registration, and this file should be updated whenever plugin methods change.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/ios/custom-code.md#2025-04-23_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <Capacitor/Capacitor.h>\n\nCAP_PLUGIN(EchoPlugin, \"Echo\",\n    CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: FormData Interface Definition in TypeScript\nDESCRIPTION: Defines the FormData interface for handling form field key/value pairs in multipart/form-data format. Includes methods for manipulating form data like append, delete, get, set, and iteration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormData {\n  append(name: string, value: string | Blob, fileName?: string): void;\n  delete(name: string): void;\n  get(name: string): FormDataEntryValue | null;\n  getAll(name: string): FormDataEntryValue[];\n  has(name: string): boolean;\n  set(name: string, value: string | Blob, fileName?: string): void;\n  forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Method Signature in TypeScript Definitions\nDESCRIPTION: Shows how to add a new method `openMap` and its associated options interface `OpenMapOptions` to the plugin's main TypeScript interface (`EchoPlugin`) located in `src/definitions.ts`. This defines the public API for the plugin and uses a diff format to highlight the changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n export interface EchoPlugin {\n   echo(options: { value: string }): Promise<{ value: string }>;\n+  openMap(options: OpenMapOptions): Promise<void>;\n }\n\n+export interface OpenMapOptions {\n+  latitude: number;\n+  longitude: number;\n+}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Capacitor App using npm\nDESCRIPTION: This command uses the @capacitor/create-app package to scaffold a new Capacitor application in an empty directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @capacitor/app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Purchase Plugin for Capacitor\nDESCRIPTION: Commands to install the cordova-plugin-purchase package and update Capacitor to reflect the changes. This plugin enables In App Purchase functionality in Capacitor applications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/in-app-purchases.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-purchase\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Getting Capacitor Configuration in Android\nDESCRIPTION: Method to retrieve the Capacitor configuration object containing runtime settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/core-apis/android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic CapConfig getConfig()\n```\n\n----------------------------------------\n\nTITLE: Complete Android Activity Configuration with Deep Linking\nDESCRIPTION: Full XML configuration for an Android activity, including the main intent filter and the deep linking intent filter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/deep-links.md#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n    android:name=\"com.netkosoft.beerswift.MainActivity\"\n    android:label=\"@string/title_activity_main\"\n    android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n    android:launchMode=\"singleTask\">\n\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter android:autoVerify=\"true\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Creating Apple App Site Association File\nDESCRIPTION: JSON configuration for the apple-app-site-association file, used to establish the connection between the app and the website for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/autofill-credentials.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Unique Device Identifier using Capacitor Device Plugin\nDESCRIPTION: Provides the TypeScript signature for the `getId()` method. This asynchronous function returns a Promise that resolves to a `DeviceId` object containing a unique `identifier` string for the device. The nature of this identifier varies by platform (UUID for iOS vendor, Android ID for Android 8+, generated/stored UUID for web).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/device.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetId() => Promise<DeviceId>\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Splash Screen Plugin with NPM - Bash\nDESCRIPTION: Installs the Splash Screen plugin for Capacitor using npm and synchronizes the native project with the new plugin. Requires Node.js, npm, and a Capacitor project. No arguments needed; commands must be run from the root of the Capacitor app. Output indicates successful installation and sync.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/splash-screen.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/splash-screen\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining HttpResponse Interface Properties in Markdown\nDESCRIPTION: Documentation table defining the properties of the HttpResponse interface including url, status, data and headers. Each property is defined with its type and description.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/http.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop          | Type                                                | Description                                       |\n| ------------- | --------------------------------------------------- | ------------------------------------------------- |\n| **`url`**     | <code>string</code>                                 | The response URL recieved from the Http response. |\n| **`status`**  | <code>number</code>                                 | The status code received from the Http response.  |\n| **`data`**    | <code>any</code>                                    | Additional data received with the Http response.  |\n| **`headers`** | <code><a href=\"#httpheaders\">HttpHeaders</a></code> | The headers received from the Http response.      |\n```\n\n----------------------------------------\n\nTITLE: Defining AppRestoredResult Interface in TypeScript\nDESCRIPTION: This snippet defines the AppRestoredResult interface, which includes properties for plugin identification, method name, result data, success status, and error information. It's used to represent the result of a restored app state for Capacitor plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/app.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppRestoredResult {\n  pluginId: string;\n  methodName: string;\n  data: any;\n  success: boolean;\n  error?: { message: string; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Web Runtime in JSON\nDESCRIPTION: Sets the \\\"bundledWebRuntime\\\" property to true in the Capacitor configuration file to enable inclusion of the Capacitor runtime as a standalone script for web projects without a module bundler. This ensures that the runtime is shipped alongside your web assets. The configuration file should be updated before syncing assets for web deployment.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"bundledWebRuntime\\\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Reader Status with isEnabled() in TypeScript\nDESCRIPTION: API signature for the `isEnabled` method. This asynchronous function checks if a native screen reader (like VoiceOver or TalkBack) is currently active and returns a Promise resolving to an object containing a boolean `value`. This method is not supported on the web platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/screen-reader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled() => Promise<{ value: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Prompt Dialog API Method Signature - TypeScript\nDESCRIPTION: Presents the method signature for the prompt dialog, using PromptOptions as input and returning a Promise of PromptResult. Requires TypeScript/JavaScript environments that support promises. The returned object contains the text entered and a cancelled flag. Used to obtain user input through a modal dialog.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/dialog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprompt(options: PromptOptions) => Promise<PromptResult>\n```\n\n----------------------------------------\n\nTITLE: Initializing PWA Elements in Vue (TypeScript)\nDESCRIPTION: This code shows how to initialize PWA Elements in a Vue application. The `defineCustomElements` function is imported from `@ionic/pwa-elements/loader` and called with the `window` object in the main entry file (`main.ts`), typically before the `createApp()` function is invoked.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/pwa-elements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Above the createApp() line\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Presenting a Native Popover on iPad in Swift\nDESCRIPTION: Demonstrates presenting a view controller as a popover on iPad devices using the bridge's `viewController`. It involves setting up the popover presentation (using a placeholder `setCenteredPopover` method) before calling `present`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nself.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Registering the Plugin in MainActivity\nDESCRIPTION: Code snippet showing how to register the ScreenOrientationPlugin in the Android app's MainActivity class. This is required to bridge the plugin between Java and JavaScript.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin;\n\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;\n\npublic class MainActivity extends BridgeActivity {\n   @Override\n   public void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       registerPlugin(ScreenOrientationPlugin.class);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI\nDESCRIPTION: Command to install the latest version of the Ionic CLI globally.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\n```\n\n----------------------------------------\n\nTITLE: Defining WriteFileResult Interface in TypeScript\nDESCRIPTION: Defines the result interface returned after successfully writing a file using the Capacitor Filesystem API. It contains the `uri` (string) indicating the location where the file was written.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WriteFileResult {\n  /**\n   * The uri where the file was written into\n   * @since 1.0.0\n   */\n  uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebColor for Consistent RGBA Parsing in Android\nDESCRIPTION: Example of using the new WebColor utility to parse color strings with alpha channels as RGBA instead of Android's native ARGB format to ensure consistency across platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString colorStringWithAlpha = \"#FF000088\"; // Semi-transparent red\nint color = WebColor.parseColor(colorStringWithAlpha);\n```\n\n----------------------------------------\n\nTITLE: Defining the clearWatch API Method in TypeScript\nDESCRIPTION: Type definition for the `clearWatch` method. It accepts a `ClearWatchOptions` object containing the `id` (obtained from `watchPosition`) of the watch to stop. It returns a `Promise` that resolves when the specified location watch has been successfully cleared, stopping further updates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclearWatch(options: ClearWatchOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Device getId Method Type Definition\nDESCRIPTION: TypeScript definition for the getId() method that returns a unique device identifier\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/device.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetId() => Promise<DeviceId>\n```\n\n----------------------------------------\n\nTITLE: Background Runner Permission Request Implementation\nDESCRIPTION: TypeScript interface showing the requestPermissions method implementation for requesting permission to display local notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/background-runner.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPermissions(options: RequestPermissionOptions) => any\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Android Package\nDESCRIPTION: Installs the @capacitor/android package as a dependency for your project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Core and CLI Dependencies\nDESCRIPTION: These commands install the main Capacitor npm dependencies: the core JavaScript runtime and the command line interface (CLI).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @capacitor/core\nnpm i -D @capacitor/cli\n```\n\n----------------------------------------\n\nTITLE: Point Interface Definition\nDESCRIPTION: Interface defining a GeoJSON Point geometry object with type and coordinates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  type: 'Point';\n  coordinates: Position;\n}\n```\n\n----------------------------------------\n\nTITLE: deleteFile API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `deleteFile` method of the Capacitor Filesystem API. This asynchronous function deletes a file from disk based on the provided `DeleteFileOptions` and returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteFile(options: DeleteFileOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Screen Reader isEnabled Method Definition\nDESCRIPTION: Type definition for the isEnabled method that checks if a screen reader is active.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-reader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled() => Promise<{ value: boolean; }>\n```\n\n----------------------------------------\n\nTITLE: Updating Podfile after Renaming iOS App Target in Capacitor\nDESCRIPTION: This diff snippet demonstrates the required modification in the `ios/App/Podfile` after renaming the primary iOS application target in Xcode. It involves changing the target name within the `target` block (e.g., from 'App' to 'MyRenamedApp') to ensure CocoaPods correctly manages dependencies for the renamed target. This step is necessary after renaming the app target via Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-target 'App' do\n+target 'MyRenamedApp' do\n   capacitor_pods\n   # Add your Pods here\n end\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Motion Plugin via npm (Bash)\nDESCRIPTION: This command installs the `@capacitor/motion` plugin using npm, the Node Package Manager. Subsequently, `npx cap sync` updates the native iOS and Android projects to include the new plugin dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/motion\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Declaring Value Return Method in Objective-C for iOS\nDESCRIPTION: This snippet demonstrates how to declare a value return method in Objective-C for an iOS Capacitor plugin. The CAP_PLUGIN_METHOD macro is used with CAPPluginReturnPromise to specify the return type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Duplicating Podfile Target for QA - Ruby\nDESCRIPTION: Demonstrates how to duplicate the CocoaPods target configuration in the Podfile for supporting a new iOS scheme (QA environment). This enables the Podfile to manage dependencies separately for each target. Capacitor pods and additional pods should be included for each respective target.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n...snip...\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\nend\n\ntarget 'App QA' do\n  capacitor_pods\n  # Add your Pods here\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the getCookies API Method in TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature for the `getCookies` method of the CapacitorCookies API. It accepts an optional `options` parameter of type `GetCookieOptions` and returns a Promise that resolves to an `HttpCookieMap`, which likely contains the cookies associated with the specified URL.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetCookies(options?: GetCookieOptions) => Promise<HttpCookieMap>\n```\n\n----------------------------------------\n\nTITLE: Sharing Content with @capacitor/share in TypeScript\nDESCRIPTION: Examples of using the Share API to share various types of content, including text, URLs, and local files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/share.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Share } from '@capacitor/share';\n\nawait Share.share({\n  title: 'See cool stuff',\n  text: 'Really awesome thing you need to see right meow',\n  url: 'http://ionicframework.com/',\n  dialogTitle: 'Share with buddies',\n});\n\n// Share text only\nawait Share.share({\n  text: 'Really awesome thing you need to see right meow',\n});\n\n// Share url only\nawait Share.share({\n  url: 'http://ionicframework.com/',\n});\n\n// Share local file using url parameter\nconst photo = await Camera.getPhoto(options);\nawait Share.share({\n  url: photo.path,\n});\n\n// Share multiple files using files parameter\nconst { photos } = await Camera.pickImages(options);\nawait Share.share({\n  files: photos.map(photo => photo.path!),\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Podfile Configuration for Firebase in iOS\nDESCRIPTION: Full example of a Podfile with Firebase Messaging added as a dependency in a Capacitor iOS project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n\nplatform :ios, '13.0'\nuse_frameworks!\n\n# workaround to avoid Xcode caching of Pods that requires\n# Product -> Clean Build Folder after new Cordova plugins installed\n# Requires CocoaPods 1.6 or newer\ninstall! 'cocoapods', :disable_input_output_paths => true\n\ndef capacitor_pods\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\n  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'\nend\n\ntarget 'App' do\n  capacitor_pods\n  # Add your Pods here\n  pod 'Firebase/Messaging'\nend\n\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Assets with Capacitor CLI – Bash\nDESCRIPTION: This command uses the Capacitor CLI to synchronize the web platform, copying the runtime bundle ('capacitor.js') and other web assets to the appropriate directory. The command should be run in the project root. It is required after enabling 'bundledWebRuntime' to ensure the runtime and web assets are properly prepared for distribution.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/web/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync web\n```\n\n----------------------------------------\n\nTITLE: Initializing FirebaseApp in AppDelegate (Swift)\nDESCRIPTION: This code snippet calls `FirebaseApp.configure()` within the `application(_:didFinishLaunchingWithOptions:)` method of `AppDelegate.swift`. This initializes the Firebase SDK using the configuration from the `GoogleService-Info.plist` file when the app launches, which is essential for Firebase services to function.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nFirebaseApp.configure()\n```\n\n----------------------------------------\n\nTITLE: Defining CallbackID Alias for Geolocation in TypeScript\nDESCRIPTION: Creates a type alias for identifying callback instances using strings in geolocation watch functions. This allows the geolocation watcher to return and expect string values as IDs for canceling or referencing callbacks. No dependencies are required, but the convention standardizes referencing watcher callbacks by string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/geolocation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Running Environment-Specific Capacitor Builds - Bash\nDESCRIPTION: Runs Capacitor copy and run commands with NODE_ENV set to 'qa', enabling environment-specific configuration to take effect for builds and deployments. This approach leverages the dynamic config export logic in capacitor.config.ts. Modify NODE_ENV to run for different named environments.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/environment-specific-configurations.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=qa npx cap copy\nNODE_ENV=qa npx cap run ios \\t#NODE_ENV=qa npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Permissions from AndroidManifest.xml\nDESCRIPTION: This snippet demonstrates how to remove unnecessary permissions from the AndroidManifest.xml file. It shows the removal of ACCESS_NETWORK_STATE and VIBRATE permissions, which are now included in their respective plugin manifests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/3-0.md#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n     <!-- Permissions -->\n\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n\n-    <!-- Network API -->\n-    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n-    <!-- Vibration API -->\n-    <uses-permission android:name=\"android.permission.VIBRATE\" />\n\n </manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Cookies Plugin in JSON\nDESCRIPTION: This JSON snippet shows how to configure the Capacitor Cookies plugin within the `capacitor.config.json` file. Setting `enabled` to `true` within the `CapacitorCookies` object under `plugins` enables the patching of `document.cookie` to use native libraries instead of the default browser implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorCookies\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables\nDESCRIPTION: Updates to the variables.gradle file with new minimum requirements for Capacitor 6, including SDK versions and androidx dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/6-0.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 34\ntargetSdkVersion = 34\nandroidxActivityVersion = '1.8.0'\nandroidxAppCompatVersion = '1.6.1'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.12.0'\nandroidxFragmentVersion = '1.6.2'\ncoreSplashScreenVersion = '1.0.1'\nandroidxWebkitVersion = '1.9.0'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.5'\nandroidxEspressoCoreVersion = '3.5.1'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Defining Action Interface for Local Notifications in TypeScript\nDESCRIPTION: This snippet defines the Action interface, which represents an action that can be taken when a notification is displayed. It includes properties for configuring various aspects of notification actions, particularly for iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Action {\n  id: string;\n  title: string;\n  requiresAuthentication?: boolean;\n  foreground?: boolean;\n  destructive?: boolean;\n  input?: boolean;\n  inputButtonTitle?: string;\n  inputPlaceholder?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for GetLanguageCodeResult in Capacitor\nDESCRIPTION: Defines the GetLanguageCodeResult interface used in Capacitor to retrieve a two-character language code identifying the user's preferred language.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetLanguageCodeResult {\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Capacitor Plugin Hooks in package.json\nDESCRIPTION: This example shows how to add event hooks in a plugin's package.json to execute code before and after Capacitor commands. The example uses simple echo commands that display the command name and platform being used.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/plugin-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"capacitor:copy:before\": \"echo copy before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:copy:after\": \"echo copy after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:before\": \"echo update before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:update:after\": \"echo update after $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:before\": \"echo sync before $CAPACITOR_PLATFORM_NAME\",\n  \"capacitor:sync:after\": \"echo sync after $CAPACITOR_PLATFORM_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Geolocation Plugin Updates in Markdown\nDESCRIPTION: Lists changes to the Geolocation plugin including timeout behavior, Play Services version update, background state handling, and error throwing for disabled location services.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Geolocation\n\n- Timeout is now ignored for `getCurrentPosition()`.\n- `playServicesLocationVersion` has been updated to `20.0.0`.\n- The plugin now stops location updates when the app goes into background state.\n- The plugin now throws an error if system location services are disabled.\n```\n\n----------------------------------------\n\nTITLE: Defining Weekday Enum in TypeScript\nDESCRIPTION: TypeScript enum definition for Weekday, representing the days of the week with their corresponding numeric values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nenum Weekday {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDKs to Podfile - Ruby\nDESCRIPTION: This snippet demonstrates how to add Firebase Core and Messaging SDK dependencies to your Xcode project's Podfile using CocoaPods (Ruby). You must have CocoaPods installed and your Capacitor iOS project generated. Ensure these lines are included inside your App target to enable Firebase features for push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'App' do\ncapacitor_pods\n# Add your Pods here\npod 'FirebaseCore', '7.11.0' # Add this line\npod 'Firebase/Messaging', '7.11.0' # Add this line\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Mocks for Capacitor Storage Plugin in TypeScript\nDESCRIPTION: A TypeScript example of a manual mock for the Capacitor Storage plugin that creates stub methods for get, set, and clear operations, allowing them to be spied on in tests without making native calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/mocking-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Storage = {\n  async get(data: { key: string }): Promise<{ value: string | undefined }> {\n    return { value: undefined };\n  },\n\n  async set(data: { key: string; value: string }): Promise<void> {},\n  async clear(): Promise<void> {},\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI and Native-Run via npm - Bash\nDESCRIPTION: Installs the Ionic CLI and native-run globally using npm. This setup is a prerequisite for running commands that enable live reload functionality in hybrid apps. Run this command in your terminal before starting with the Ionic CLI live reload workflow.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/live-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli native-run\n```\n\n----------------------------------------\n\nTITLE: Implementing the ScreenOrientation Class for Android\nDESCRIPTION: The implementation class that handles getting the current screen orientation by converting Android rotation values to orientation type strings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin.plugins.ScreenOrientation;\n\nimport android.view.Surface;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class ScreenOrientation {\n   private AppCompatActivity activity;\n\n   public ScreenOrientation(AppCompatActivity activity) {\n       this.activity = activity;\n   }\n\n   public String getCurrentOrientationType() {\n       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n       return fromRotationToOrientationType(rotation);\n   }\n\n   private String fromRotationToOrientationType(int rotation) {\n       switch (rotation) {\n           case Surface.ROTATION_90:\n               return \"landscape-primary\";\n           case Surface.ROTATION_180:\n               return \"portrait-secondary\";\n           case Surface.ROTATION_270:\n               return \"landscape-secondary\";\n           default:\n               return \"portrait-primary\";\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Capacitor Plugin Project with CLI\nDESCRIPTION: Command to scaffold a new Capacitor plugin project using the @capacitor/create-plugin utility. This sets up the basic structure with the specified plugin name, package ID, class name, and other metadata.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/packaging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @capacitor/create-plugin \\\n  --name @capacitor-community/screen-orientation \\\n  --package-id io.ionic.plugins.screenorientation \\\n  --class-name ScreenOrientation \\\n  --repo \"https://ionic.io\" \\\n  --license \"MIT\" \\\n  --description \"Work with the screen orientation in a common way for iOS, Android, and web\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Plugin Functionality in Swift\nDESCRIPTION: Demonstrates a simple echo plugin that receives data from a Plugin Call and returns it back to the caller. Shows core components of Capacitor plugins including data handling and response.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/ios.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(MyPlugin)\npublic class MyPlugin: CAPPlugin {\n  @objc override public func load() {\n    // Called when the plugin is first constructed in the bridge\n  }\n\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.resolve([\n        \"value\": value\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Notification Related Interfaces\nDESCRIPTION: Collection of interfaces for handling notification operations including cancellation options, enabled status, and delivered notifications schema.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CancelOptions {\n  notifications: LocalNotificationDescriptor[];\n}\n\ninterface EnabledResult {\n  value: boolean;\n}\n\ninterface DeliveredNotifications {\n  notifications: DeliveredNotificationSchema[];\n}\n\ninterface DeliveredNotificationSchema {\n  id: number;\n  tag: string;\n  title: string;\n  body: string;\n  group: string;\n  groupSummary: boolean;\n  data: any;\n  extra: any;\n  attachments: Attachment[];\n  actionTypeId: string;\n  schedule: Schedule;\n  sound: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Screen Orientation with Capacitor API (TypeScript)\nDESCRIPTION: Defines the `orientation()` method signature from the Capacitor Screen Orientation plugin API. This asynchronous function takes no arguments and returns a Promise that resolves with a `ScreenOrientationResult` object, indicating the current orientation type of the device's screen (e.g., 'portrait-primary').\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\norientation() => Promise<ScreenOrientationResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Capacitor Plugin Method Types in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for a plugin with three different method types: void return, value return, and callback. It also includes type definitions for callback ID and custom data structures.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/method-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CallbackID = string;\n\nexport interface MyData {\n  data: string;\n}\n\nexport type MyPluginCallback = (message: MyData | null, err?: any) => void;\n\nexport interface MyPlugin {\n  method1(): Promise<void>;\n  method2(): Promise<MyData>;\n  method3(callback: MyPluginCallback): Promise<CallbackID>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Web Plugin Registration for Capacitor 3.0\nDESCRIPTION: TypeScript example showing how to migrate from the deprecated registerWebPlugin function to the new registerPlugin function with lazy loading support for web and electron platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\nimport type { CoolPlugin } from './definitions';\n\nconst MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {\n  web: () => import('./web').then((m) => new m.MyCoolPluginWeb()),\n  // electron: () => (\"./electron\").then(m => new m.MyCoolPluginElectron())\n});\n\nexport * from './definitions';\nexport { MyCoolPlugin };\n```\n\n----------------------------------------\n\nTITLE: Scheduling Local Notifications in Capacitor\nDESCRIPTION: This example demonstrates how to import and use the LocalNotifications plugin to schedule a notification that will trigger 5 seconds after being set.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\nconst { LocalNotifications } = Plugins;\n\nconst notifs = await LocalNotifications.schedule({\n  notifications: [\n    {\n      title: 'Title',\n      body: 'Body',\n      id: 1,\n      schedule: { at: new Date(Date.now() + 1000 * 5) },\n      sound: null,\n      attachments: null,\n      actionTypeId: '',\n      extra: null,\n    },\n  ],\n});\nconsole.log('scheduled notifications', notifs);\n```\n\n----------------------------------------\n\nTITLE: Creating Apple App Site Association File for iOS Deep Linking\nDESCRIPTION: This JSON snippet shows the structure of the apple-app-site-association file required for iOS Universal Links. It specifies the app ID and the paths that should be handled by the app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appID\": \"TEAMID.BUNDLEID\",\n        \"paths\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FFI on Apple Silicon Macs\nDESCRIPTION: These commands help resolve the FFI bus error on Apple Silicon Macs. They use Rosetta to install the FFI gem and run pod install using the x86_64 architecture, which works around compatibility issues on ARM-based Macs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/ios/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo arch -x86_64 gem install ffi\n$ arch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Functionality in Java\nDESCRIPTION: Demonstrates the structure for implementing the `openMap` native functionality on Android using Java. The `@PluginMethod` annotation marks the method callable from JavaScript. It retrieves `latitude` and `longitude` parameters from the `PluginCall` object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void openMap(PluginCall call) {\n  Double latitude = call.getDouble(\"latitude\");\n  Double longitude = call.getDouble(\"longitude\");\n\n  // more logic\n}\n```\n\n----------------------------------------\n\nTITLE: Converting File Paths with Capacitor.convertFileSrc in TypeScript\nDESCRIPTION: Shows how to use Capacitor.convertFileSrc to convert device file paths into Web View-friendly paths. This is necessary to handle protocol differences between device files and the Web View.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file:///path/to/device/photo.jpg\nconst rawPhotoUri = await Filesystem.writeFile({\n  path: \"myFile.jpg\",\n  data: base64Data,\n  directory: FilesystemDirectory.Data\n});\n\n// http://localhost/path/to/device/photo.jpg\nconst fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),\n```\n\n----------------------------------------\n\nTITLE: Adding Native Platforms (iOS and Android) with Capacitor using Bash\nDESCRIPTION: Adds the native iOS and Android platforms to the Capacitor project using the Capacitor CLI. This creates the `ios` and `android` folders containing the respective native project structures required for building the mobile apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Getting Seconds (Local) with Date.getSeconds() in JavaScript\nDESCRIPTION: The `getSeconds()` method returns the seconds (0-59) in the specified date according to local time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ngetSeconds(): number\n```\n\n----------------------------------------\n\nTITLE: Defining Permission State Type Alias - TypeScript\nDESCRIPTION: String literal type alias encoding all possible states for push notification permission, including 'prompt', 'granted', 'denied', and 'prompt-with-rationale'. Used by PermissionStatus interface to indicate permission status. No dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/push-notifications.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown for Capacitor Project Creation\nDESCRIPTION: This code snippet demonstrates how to embed a video in Markdown, specifically for showing the process of creating a new Capacitor project. It uses HTML video tags within JSX-style curly braces, indicating it's likely part of a React-based documentation system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/vs-code-ext/1-new-project.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<video style={{borderRadius:5}} width=\"100%\" controls>\n      <source src={require('@site/static/video/new-project.mp4').default} type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI Globally using Bash\nDESCRIPTION: Installs the latest version of the Ionic Command Line Interface (CLI) globally using npm. This command requires Node.js and npm to be installed on the system. It makes the `ionic` command available system-wide for creating and managing Ionic projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Dependencies with Capacitor\nDESCRIPTION: Command to update CocoaPods dependencies when encountering Podfile.lock sync issues in iOS development. This needs to be run from the project root directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Cordova Author Element Example (XML)\nDESCRIPTION: This XML snippet defines the 'author' element as found in Cordova's config.xml, specifying email and website details. In Capacitor projects, this information is generally migrated to package.json and is not read at runtime by Capacitor. Included here for reference.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<author email=\"email@test.com\" href=\"http://ionicframework.com/\">Ionic Framework Team</author>\n```\n\n----------------------------------------\n\nTITLE: Updating Android SDK Versions in build.gradle\nDESCRIPTION: Diff showing how to update compileSdkVersion and targetSdkVersion from 29 to 30 in the Android build.gradle file for Capacitor 3.0 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/plugins/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nandroid {\n-   compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 29\n+   compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 30\n    defaultConfig {\n        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 21\n-       targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 29\n+       targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 30\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Toast.show Method Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the `Toast.show` method. It accepts a single argument `options` of type `ShowOptions` (defined elsewhere in the API) and returns a `Promise<void>`. This method is used to display a toast notification on the device screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options: ShowOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: readdir API Method Signature in TypeScript\nDESCRIPTION: Defines the signature for the `readdir` method of the Capacitor Filesystem API. This asynchronous function reads the contents of a directory (non-recursively) based on the provided `ReaddirOptions` and returns a Promise resolving to a `ReaddirResult` containing a list of files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nreaddir(options: ReaddirOptions) => Promise<ReaddirResult>\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Call Data in Java\nDESCRIPTION: Shows how to access different types of data passed to a plugin method, including string, object, and boolean values. Demonstrates data validation and error handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void storeContact(PluginCall call) {\n  String name = call.getString(\"yourName\", \"default name\");\n  JSObject address = call.getObject(\"address\", new JSObject());\n  boolean isAwesome = call.getBoolean(\"isAwesome\", false);\n\n  if (!call.getData().has(\"id\")) {\n    call.reject(\"Must provide an id\");\n    return;\n  }\n  // ...\n\n  call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Capacitor Copy Command Output Example\nDESCRIPTION: Example output showing the copying process of web assets, native bridge, and configuration files to both Android and iOS platforms, including execution times.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/copy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n√ Copying web assets from www to android\\app\\src\\main\\assets\\public in 2.64s\n√ Copying web assets from www to ios/App/public in 450ms\n√ Copying native bridge in 7.32ms\n√ Copying capacitor.config.json in 3.22ms\n√ copy in 2.74s\n√ copy in 1.10ms\n```\n\n----------------------------------------\n\nTITLE: Displaying Capacitor Minimum Supported Platforms Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that outlines the minimum supported iOS and Android versions for different Capacitor versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/reference/support-policy.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Capacitor | Minimum iOS Version | Minimum Android Version |\n| :-------: | :-----------------: | :---------------------: |\n|    v5     |        13.0         |      5.1 (API 22)       |\n|    v4     |        13.0         |      5.1 (API 22)       |\n|    v3     |        12.0         |      5.0 (API 21)       |\n```\n\n----------------------------------------\n\nTITLE: Setting Time Value with Date.setTime() in JavaScript\nDESCRIPTION: The `setTime()` method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC. It accepts one parameter, `time`, which is the number of milliseconds. It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nsetTime(time: number): number\n```\n\n----------------------------------------\n\nTITLE: Safely Unwrapping the Capacitor Bridge in Swift\nDESCRIPTION: Illustrates using a guard statement to safely unwrap the optional bridge reference. This pattern ensures the bridge is available before proceeding and allows for an early exit if it's nil, which is recommended for methods requiring the bridge.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/ios.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nguard let bridge = self.bridge else { return }\n```\n\n----------------------------------------\n\nTITLE: Angular Deep Link Route Handler Implementation\nDESCRIPTION: Implementation of the constructor and initialization method for handling deep links in an Angular application. This code uses NgZone to ensure Angular's change detection works properly when the deep link is processed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/deep-links.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private router: Router, private zone: NgZone) {\n    this.initializeApp();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for a Custom Plugin\nDESCRIPTION: This TypeScript snippet illustrates how to add type safety to the plugin proxy object created by `registerPlugin`. It defines an interface `EchoPlugin` describing the expected methods and their signatures (e.g., `echo` takes an options object and returns a Promise). This interface is then used as a generic type argument for `registerPlugin`.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/android/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import { registerPlugin } from '@capacitor/core';\n\n+export interface EchoPlugin {\n+  echo(options: { value: string }): Promise<{ value: string }>;\n+}\n\n-const Echo = registerPlugin('Echo');\n+const Echo = registerPlugin<EchoPlugin>('Echo');\n\n export default Echo;\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Server Scheme for Web Content (JSON)\nDESCRIPTION: This JSON configuration allows changing the server scheme used by Capacitor apps on iOS via the 'iosScheme' property, typically set to 'ionic' to match Cordova's behavior and prevent issues like LocalStorage data loss. This change is written into capacitor.config.json under the 'server' object and only impacts iOS builds.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": {\n    \"iosScheme\": \"ionic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables\nDESCRIPTION: Update the Android project variables in variables.gradle to meet the new minimums required for Capacitor 4.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 32\ntargetSdkVersion = 32\nandroidxActivityVersion = '1.4.0'\nandroidxAppCompatVersion = '1.4.2'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.8.0'\nandroidxFragmentVersion = '1.4.1'\ncoreSplashScreenVersion = '1.0.0-rc01'\nandroidxWebkitVersion = '1.4.0'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.3'\nandroidxEspressoCoreVersion = '3.4.0'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Clearing All Data from Capacitor Preferences in TypeScript\nDESCRIPTION: API definition for the `clear` method. This asynchronous function removes all key-value pairs stored by the plugin within the configured group. It takes no arguments. Returns a Promise that resolves once the store is cleared.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/preferences.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclear() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Form Implementation with Autofill Support\nDESCRIPTION: HTML form template using ion-input elements with autocomplete attributes for email and password fields in JavaScript\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/autofill-credentials.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <ion-list>\n    <ion-item>\n      <ion-label>E-Mail Address</ion-label>\n      <ion-input type=\"email\" name=\"email\" autocomplete=\"email\" required email></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>Password</ion-label>\n      <ion-input id=\"pwd\" type=\"password\" name=\"password\" autocomplete=\"current-password\" required></ion-input>\n    </ion-item>\n  </ion-list>\n  <ion-button type=\"submit\">Submit</ion-button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Capacitor Configuration in TypeScript\nDESCRIPTION: An example of a Capacitor configuration file in TypeScript format. This config defines essential properties including the app ID, app name, and the web directory which contains the web assets to be used for the app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/config.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.company.appname',\n  appName: 'My Capacitor App',\n  webDir: 'www',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore Certificate\nDESCRIPTION: Command to generate a new Android keystore certificate with RSA algorithm and 2048 bit key size, valid for 10,000 days. This certificate is required for Android deep linking setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -genkey -v -keystore KEY-NAME.keystore -alias ALIAS -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio using Capacitor CLI (bash)\nDESCRIPTION: This command uses the Capacitor CLI to open the native Android project associated with the Capacitor application in Android Studio. This step is mentioned in the testing phase to run the app on an Android device or emulator.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Extending Plugin Interface in TypeScript\nDESCRIPTION: Adds a new method `openMap` to the existing `EchoPlugin` interface. This demonstrates how to extend the plugin's API by defining new function signatures in the `src/definitions.ts` file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  openMap(location: { latitude: number; longitude: number }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing load Method for Plugin Initialization in Capacitor Java\nDESCRIPTION: This example shows how to override the load method in a Capacitor plugin class, enabling developers to run custom initialization code when the plugin is loaded. Requires extending the base Plugin class. There are no required inputs or outputs for this method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\\npublic void load() {\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `id` Property Type as `string` for LocalNotificationAttachment\nDESCRIPTION: Specifies that the `id` property within the LocalNotificationAttachment interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Incorrect Plugin Usage Example in TypeScript\nDESCRIPTION: This snippet demonstrates a common mistake where a plugin is imported directly and used immediately, resulting in the web implementation being used instead of the native one.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/index.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browser } from '@capacitor/core';\n\nasync openBrowser() {\n  // On iOS, for example, this will open the URL in Safari instead of\n  // the SFSafariViewController (in-app browser)\n  await Browser.open({ url: \"https://ionicframework.com\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Minutes (UTC) with Date.getUTCMinutes() in JavaScript\nDESCRIPTION: The `getUTCMinutes()` method returns the minutes (0-59) in the specified date according to universal time (UTC).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCMinutes(): number\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor Plugin List Command (Bash)\nDESCRIPTION: This command uses `npx` to execute the Capacitor CLI (`cap`) with the `ls` subcommand. Its purpose is to list all installed Cordova and Capacitor plugins within the project. An optional platform argument (`android` or `ios`) can be supplied to show plugins specific to that platform. Requires Node.js, npm (for npx), and the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/cli/commands/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Framework CLIs\nDESCRIPTION: Generic command to start a local web server for Live Reload when using framework CLIs. The actual command may vary depending on the framework.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/live-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Updating Android Project Variables\nDESCRIPTION: Groovy configuration for Android project defining SDK versions and dependency versions for Capacitor 4.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/4-0.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 32\ntargetSdkVersion = 32\nandroidxActivityVersion = '1.4.0'\nandroidxAppCompatVersion = '1.4.2'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.8.0'\nandroidxFragmentVersion = '1.4.1'\ncoreSplashScreenVersion = '1.0.0-rc01'\nandroidxWebkitVersion = '1.4.0'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.3'\nandroidxEspressoCoreVersion = '3.4.0'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock and Unlock Methods in ScreenOrientationPlugin\nDESCRIPTION: This snippet shows how to implement the lock and unlock methods in the ScreenOrientationPlugin class, which call the corresponding methods in the ScreenOrientation implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void lock(PluginCall call) {\n   String orientationType = call.getString(\"orientation\");\n   if(orientationType == null) {\n       call.reject(\"Input option 'orientation' must be provided.\");\n       return;\n   }\n   implementation.lock(orientationType);\n   call.resolve();\n}\n\n@PluginMethod()\npublic void unlock(PluginCall call) {\n   implementation.unlock();\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Screen Orientation in Info.plist\nDESCRIPTION: XML configuration for setting supported screen orientations on iOS devices. This example limits iPhones to portrait mode and iPads to landscape orientations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>UISupportedInterfaceOrientations</key>\n  <array>\n    <string>UIInterfaceOrientationPortrait</string>\n  </array>\n  <key>UISupportedInterfaceOrientations~ipad</key>\n  <array>\n    <string>UIInterfaceOrientationLandscapeRight</string>\n    <string>UIInterfaceOrientationLandscapeLeft</string>\n  </array>\n```\n\n----------------------------------------\n\nTITLE: Initializing Screen Orientation and Cleanup in React (TypeScript)\nDESCRIPTION: This code demonstrates how to get the initial screen orientation when the component mounts and remove listeners when it unmounts using React's useEffect hook.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/using-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  ScreenOrientation.orientation().then(res => setOrientation(res.type));\n\n  return () => {\n    ScreenOrientation.removeAllListeners();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Updating Android Variables in Gradle\nDESCRIPTION: Updated minimum version requirements for Android project variables in variables.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/5-0.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion = 22\ncompileSdkVersion = 33\ntargetSdkVersion = 33\nandroidxActivityVersion = '1.7.0'\nandroidxAppCompatVersion = '1.6.1'\nandroidxCoordinatorLayoutVersion = '1.2.0'\nandroidxCoreVersion = '1.10.0'\nandroidxFragmentVersion = '1.5.6'\ncoreSplashScreenVersion = '1.0.0'\nandroidxWebkitVersion = '1.6.1'\njunitVersion = '4.13.2'\nandroidxJunitVersion = '1.1.5'\nandroidxEspressoCoreVersion = '3.5.1'\ncordovaAndroidVersion = '10.1.1'\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration Values in Android (Java)\nDESCRIPTION: Java code snippet for the Android native implementation of a Capacitor plugin, demonstrating how to retrieve a configuration value (e.g., 'style') as a String using the `getConfig().getString()` method provided by the Capacitor Android runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nString style = getConfig().getString(\"style\");\nif(style) {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for Config Changes\nDESCRIPTION: This diff snippet shows how to update the AndroidManifest.xml file to handle configuration changes and avoid app restarts.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/2-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n         <activity\n-            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n+            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode\"\n             android:name=\"com.example.app\"\n             android:label=\"@string/title_activity_main\"\n             android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n             android:launchMode=\"singleTask\">\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Capacitor Plugin in Swift\nDESCRIPTION: This snippet demonstrates how to create a custom Capacitor plugin in Swift. It defines a 'MyPlugin' class with an 'echo' method that can be called from the WebView.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/custom-code.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Capacitor\n\n@objc(MyPlugin)\npublic class MyPlugin: CAPPlugin {\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.success([\n        \"value\": value\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Callback in Android Java\nDESCRIPTION: Replace manual request codes with @ActivityCallback annotation for handling activity results in Capacitor 3.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void chooseImage(PluginCall call) {\n    Intent intent = new Intent(Intent.ACTION_PICK);\n    intent.setType(\"image/*\");\n    startActivityForResult(call, intent, \"chooseImageResult\");\n}\n\n@ActivityCallback\nprivate void chooseImageResult(PluginCall call, ActivityResult result) {\n    if (result.getResultCode() == Activity.RESULT_CANCELED) {\n        call.reject(\"Activity canceled\");\n    } else {\n        Intent data = result.getData();\n        // do something with the result data\n        call.resolve(\"Success!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Change Tracking in ScreenOrientation\nDESCRIPTION: Adds methods to the ScreenOrientation class to track and compare orientation changes, ensuring that listeners are only notified when the orientation actually changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Nullable private int configOrientation;\n\npublic boolean hasOrientationChanged(int orientation) {\n    if (orientation == configOrientation) {\n        return false;\n    } else {\n        this.configOrientation = orientation;\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused touchesBegan Method from AppDelegate.swift\nDESCRIPTION: Removes the unnecessary touchesBegan method from AppDelegate.swift that was used for status bar tap detection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n-  super.touchesBegan(touches, with: event)\n-\n-  let statusBarRect = UIApplication.shared.statusBarFrame\n-  guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\n-\n-  if statusBarRect.contains(touchPoint) {\n-      NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\n-  }\n-}\n```\n\n----------------------------------------\n\nTITLE: Converting Orientation Type to UIInterfaceOrientation Integer\nDESCRIPTION: Implements a conversion helper from orientation type strings to UIInterfaceOrientation raw values, needed for the orientation locking implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToInt(_ orientationType: String) -> Int {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientation.landscapeLeft.rawValue\n  case \"landscape-secondary\":\n    return UIInterfaceOrientation.landscapeRight.rawValue\n  case \"portrait-secondary\":\n    return UIInterfaceOrientation.portraitUpsideDown.rawValue\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientation.portrait.rawValue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android App Build Configuration\nDESCRIPTION: Diff showing changes required in the android/app/build.gradle file to use the common variables and update dependency versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n android {\n-    compileSdkVersion 28\n+    compileSdkVersion rootProject.ext.compileSdkVersion\n     defaultConfig {\n         applicationId \"com.example.app\"\n-        minSdkVersion 21\n-        targetSdkVersion 28\n+        minSdkVersion rootProject.ext.minSdkVersion\n+        targetSdkVersion rootProject.ext.targetSdkVersion\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n```\n\nLANGUAGE: diff\nCODE:\n```\n dependencies {\n     implementation fileTree(include: ['*.jar'], dir: 'libs')\n-    implementation 'androidx.appcompat:appcompat:1.0.0'\n+    implementation \"androidx.appcompat:appcompat:$androidxAppCompatVersion\"\n     implementation project(':capacitor-android')\n-    testImplementation 'junit:junit:4.12'\n-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'\n+    testImplementation \"junit:junit:$junitVersion\"\n+    androidTestImplementation \"androidx.test.ext:junit:$androidxJunitVersion\"\n+    androidTestImplementation \"androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion\"\n     implementation project(':capacitor-cordova-android-plugins')\n```\n\n----------------------------------------\n\nTITLE: Navigating into the Project Directory\nDESCRIPTION: Changes the current working directory in the terminal to the newly created Ionic project folder named 'capApp'. This step is necessary before running subsequent project-specific commands.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/push-notifications-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd capApp/\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor CLI Build Command\nDESCRIPTION: This command builds the native project to create a signed AAB, APK, or IPA file. It supports various options for specifying build parameters and can be used for both Android and iOS platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/cli/commands/build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap build [options] <platform>\n```\n\n----------------------------------------\n\nTITLE: Registering ScreenOrientationPlugin in MainActivity\nDESCRIPTION: This code snippet shows how to register the ScreenOrientationPlugin in the MainActivity class of the Android project. It overrides the onCreate method to register the plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.cap.plugin;\n\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;\n\npublic class MainActivity extends BridgeActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        registerPlugin(ScreenOrientationPlugin.class);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Permission Alias for Platform Compatibility in Capacitor Java\nDESCRIPTION: This snippet demonstrates the definition of a permission alias with an empty strings array in the @Permission annotation. This is used to indicate permissions that may only be required on other platforms, ensuring compatibility and simplifying cross-platform plugin development. No dependencies beyond Capacitor annotations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Permission(\\n    alias = \"notifications\",\\n    strings = {}\\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Notification Channel (Android) - Capacitor Plugin API TypeScript Signature\nDESCRIPTION: This function signature for 'deleteChannel' removes a previously created notification channel, only available on Android. Accepts an object with an 'id' string property. Returns a void Promise and requires the channel ID.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/local-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Status Interface in TypeScript\nDESCRIPTION: This code defines a PermissionStatus interface for managing plugin permissions. It imports PermissionState from Capacitor core and creates an interface with a 'location' property of type PermissionState.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PermissionState } from '@capacitor/core';\n\nexport interface PermissionStatus {\n  // TODO: change 'location' to the actual name of your alias!\n  location: PermissionState;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Screen Reader Listeners in Capacitor (TypeScript)\nDESCRIPTION: API method signature for `removeAllListeners`. This asynchronous function removes all event listeners previously attached to the Screen Reader plugin instance. It returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/screen-reader.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring build script in package.json for Capacitor app\nDESCRIPTION: This JSON snippet shows how to add a 'build' script to package.json for standardizing the frontend build command in a Capacitor project. It's a recommended setup to enable easy building of web code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/building-your-app.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"command-to-build (ex: webpack, tsc, babel, etc.)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PWA Elements via npm (Bash)\nDESCRIPTION: This command installs the `@ionic/pwa-elements` package using npm. This package is necessary to enable the web-based UI components for certain Capacitor plugins when running the application on the web.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/web/pwa-elements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Messaging to Notification Service Extension in Podfile\nDESCRIPTION: This snippet shows how to add the Firebase Messaging pod to the Notification Service Extension target in the Podfile. This is necessary to enable image support in push notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'pushextension' do\n  pod 'FirebaseMessaging'\nend\n```\n\n----------------------------------------\n\nTITLE: Detecting Current Platform in Capacitor Apps\nDESCRIPTION: Shows how to use getPlatform() to identify whether the app is running on web, iOS, or Android platforms, enabling platform-specific code paths.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  console.log('iOS!');\n} else if (Capacitor.getPlatform() === 'android') {\n  console.log('Android!');\n} else {\n  console.log('Web!');\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory into Project Folder (Bash)\nDESCRIPTION: Navigates the terminal's current working directory into the newly created project folder 'capApp/', allowing subsequent commands to be run within the project's context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd capApp/\n```\n\n----------------------------------------\n\nTITLE: Using App Launcher API in TypeScript\nDESCRIPTION: Example demonstrating how to use the App Launcher API to check if a URL can be opened and how to open a specific app with a URL scheme and parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app-launcher.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLauncher } from '@capacitor/app-launcher';\n\nconst checkCanOpenUrl = async () => {\n  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });\n\n  console.log('Can open url: ', value);\n};\n\nconst openPortfolioPage = async () => {\n  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining `title` Property Type as `string` for LocalNotificationAction\nDESCRIPTION: Specifies that the `title` property within the LocalNotificationAction interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable Features in iOS Capacitor Plugin\nDESCRIPTION: Demonstrates how to handle features that are unavailable in older iOS versions using the @available attribute and the unavailable() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@objc override func methodThatUsesNewIOSFramework(_ call: CAPPluginCall) {\n    if #available(iOS 14, *) {\n        // TODO implementation\n    } else {\n        call.unavailable(\"Not available in iOS 13 or earlier.\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenameOptions Type Alias in TypeScript\nDESCRIPTION: Type alias that uses CopyOptions interface for rename operations in the file system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype RenameOptions = CopyOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining finish Method in Capacitor's Background Task API\nDESCRIPTION: This code snippet shows the TypeScript definition for the finish method, which notifies the OS that a background task is complete. It requires passing the taskId that was returned from the beforeExit method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/background-task.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfinish(options: { taskId: CallbackID; }) => void\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor Update Command\nDESCRIPTION: Command to update native plugins and dependencies. Can be run for all platforms or specified for Android or iOS specifically. Includes optional --deployment flag for pod install optimization.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/cli/commands/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update [<platform>]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using getPlatform in TypeScript\nDESCRIPTION: Provides the type signature and a usage example for the `getPlatform` function. It returns a string indicating the current platform ('web', 'ios', or 'android'), allowing for platform-specific logic.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/web.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPlatform: () => string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReaddirOptions Interface in TypeScript\nDESCRIPTION: Specifies the options for the `readdir` (read directory) operation in the Capacitor Filesystem API. It requires the path of the directory to read and the base `Directory` enumeration value from which to read.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<a href=\"#directory\">Directory</a>\n```\n\n----------------------------------------\n\nTITLE: Android Intent Filter Configuration\nDESCRIPTION: XML configuration for the intent filter in AndroidManifest.xml to handle deep links\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/deep-links.md#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"https\" android:host=\"beerswift.app\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Unsafe Direct Property Access in Swift\nDESCRIPTION: Shows a problematic approach to checking for null values in a Capacitor plugin call, where direct access to the options dictionary fails to properly handle NSNull objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nif call.options[\"foo\"] != nil {\n    // BAD: the key returned a truthy `NSNull` object, so this block will run\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Web View Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface defining web view configuration options including URL settings, cleartext traffic permissions, and navigation allowances. Contains properties for controlling web view behavior and security settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nurl?: string;\n\ncleartext?: boolean;\n\nallowNavigation?: string[];\n```\n\n----------------------------------------\n\nTITLE: Orientation Type to Mask Conversion\nDESCRIPTION: Helper method that converts orientation type strings to corresponding UIInterfaceOrientationMask values for iOS orientation control.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToMask(_ orientationType: String) -> UIInterfaceOrientationMask {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientationMask.landscapeLeft\n  case \"landscape-secondary\":\n    return UIInterfaceOrientationMask.landscapeRight\n  case \"portrait-secondary\":\n    return UIInterfaceOrientationMask.portraitUpsideDown\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientationMask.portrait\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Configuration for Capacitor VS Code Extension\nDESCRIPTION: Definition of keyboard shortcuts for running, building, and debugging Capacitor applications on Mac and Windows platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/vs-code-ext/z-advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Mac Shortcut | Windows Shortcut | Action |\n| --- | --- | ----------- |\n| `⌥` + R | `ALT` + R | Run the app |\n| `⌥` + B | `ALT` + B | Build the app for web |\n| `⌥` + D | `ALT` + D | Debug the app for web |\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Unlock Logic in ScreenOrientation Class (Swift)\nDESCRIPTION: This public Swift function in the `ScreenOrientation` class unlocks the device orientation, allowing it to auto-rotate again. It sets the device orientation value to `UIInterfaceOrientation.unknown.rawValue`, attempts rotation (which triggers auto-orientation), and calls a completion handler. Operations are dispatched to the main queue asynchronously.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\npublic func unlock(completion: @escaping () -> Void) {\n  DispatchQueue.main.async {\n    let unknownOrientation = UIInterfaceOrientation.unknown.rawValue\n    UIDevice.current.setValue(unknownOrientation, forKey: \"orientation\")\n    UINavigationController.attemptRotationToDeviceOrientation()\n    completion()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing and opening Android project in Android Studio for Capacitor app\nDESCRIPTION: These bash commands copy the latest web code to the Android project and open it in Android Studio for final compilation. This is part of the native build process for Android in Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/building-your-app.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy android\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Adding Push Notification Received Listener in TypeScript\nDESCRIPTION: This method adds a listener for the 'pushNotificationReceived' event. It takes an event name and a callback function as parameters, and returns a PluginListenerHandle.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'pushNotificationReceived', listenerFunc: (notification: PushNotification) => void) => PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Video Element Implementation in Markdown/HTML\nDESCRIPTION: HTML video element implementation for displaying tutorial content, styled with border radius and configured to show project creation process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/vs-code-ext/1-new-project.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video style={{borderRadius:5}} width=\"100%\" controls>\n      <source src={require('@site/static/video/new-project.mp4').default} type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via Homebrew (Bash)\nDESCRIPTION: This command uses the Homebrew package manager to install CocoaPods. CocoaPods is essential for managing native dependencies in Capacitor iOS projects. This command requires Homebrew to be installed first.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Updating Cocoapods for iOS Project\nDESCRIPTION: This command updates the Cocoapods dependencies for the iOS project, including the newly added Firebase Messaging pod for the Notification Service Extension.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: Implementing requestPermissions for Unsupported Web Functionality\nDESCRIPTION: This code shows how to implement the requestPermissions method when the functionality is not supported on web. It throws an 'unimplemented' error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync requestPermissions(): Promise<PermissionStatus> {\n  // TODO: does the web support requesting permissions for my plugin?\n  throw this.unimplemented('Not implemented on web.');\n}\n```\n\n----------------------------------------\n\nTITLE: Converting OrientationType to UIInterfaceOrientationMask in Swift\nDESCRIPTION: This method maps a string representation of orientation type to its corresponding UIInterfaceOrientationMask value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nprivate func fromOrientationTypeToMask(_ orientationType: String) -> UIInterfaceOrientationMask {\n  switch orientationType {\n  case \"landscape-primary\":\n    return UIInterfaceOrientationMask.landscapeLeft\n  case \"landscape-secondary\":\n    return UIInterfaceOrientationMask.landscapeRight\n  case \"portrait-secondary\":\n    return UIInterfaceOrientationMask.portraitUpsideDown\n  default:\n    // Case: portrait-primary\n    return UIInterfaceOrientationMask.portrait\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Indoor Maps Display - TypeScript\nDESCRIPTION: Enables or disables the rendering of indoor map details. Takes a boolean 'enabled' parameter and returns a void Promise. Depends on the availability of indoor mapping in the Google Maps API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nenableIndoorMaps(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Cordova Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface for Cordova-specific configuration including access origins, preferences, and static plugins. Enables compatibility settings for Cordova integration within Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/config.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncordova?: {\n    accessOrigins?: string[];\n    preferences?: { [key: string]: string | undefined };\n    staticPlugins?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Watching Position Changes with Geolocation API\nDESCRIPTION: TypeScript method to set up a watch for location changes, receiving updates through a callback function. Includes a note about energy consumption considerations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/geolocation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwatchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Logic Using isPluginAvailable\nDESCRIPTION: Shows a practical example of using isPluginAvailable to check for Camera plugin availability and implement alternative logic when unavailable.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/web.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date (Local) with Date.setDate() in JavaScript\nDESCRIPTION: The `setDate()` method sets the day of the month for a specified date according to local time. It requires the day value `date` (1-31). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nsetDate(date: number): number\n```\n\n----------------------------------------\n\nTITLE: Registering custom Android plugins in Capacitor 3\nDESCRIPTION: Shows how to register custom Android plugins that are built specifically for your application in Capacitor 3, which still require manual registration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n\n+        registerPlugin(PluginInMyApp.class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Compiling Capacitor Plugin using npm\nDESCRIPTION: Provides the shell command `npm run build` used within the plugin directory to compile the plugin code. This command typically builds the web assets (TypeScript to JavaScript).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Position Type Alias in TypeScript\nDESCRIPTION: Defines the Position type alias as an array of numbers representing coordinates. It follows the GeoJSON specification and should contain between two and three elements for X, Y, and optionally Z coordinates.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Position = number[]\n```\n\n----------------------------------------\n\nTITLE: Setting Marker Drag End Listener in TypeScript for Google Maps\nDESCRIPTION: This function sets up a listener for the end of a marker drag event on a Google Map. It takes an optional callback function that receives marker click data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMarkerDragEndListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Handling Configuration Changes in ScreenOrientationPlugin\nDESCRIPTION: This snippet demonstrates how to handle configuration changes in the ScreenOrientationPlugin class, specifically for screen orientation changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   if(implementation.hasOrientationChanged(newConfig.orientation)) {\n       this.onOrientationChanged();\n   }\n}\n\nprivate void onOrientationChanged() {\n   JSObject ret = new JSObject();\n   String type = implementation.getCurrentOrientationType();\n   ret.put(\"type\", type);\n   notifyListeners(\"screenOrientationChange\", ret);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date (UTC) with Date.setUTCDate() in JavaScript\nDESCRIPTION: The `setUTCDate()` method sets the day of the month for a specified date according to universal time (UTC). It requires the day value `date` (1-31). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nsetUTCDate(date: number): number\n```\n\n----------------------------------------\n\nTITLE: Listening to Plugin Events in TypeScript\nDESCRIPTION: Demonstrates how to add event listeners to Capacitor plugins from TypeScript code. This allows web applications to respond to events emitted by native plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyPlugin } from 'my-plugin';\n\nMyPlugin.addListener('myPluginEvent', (info: any) => {\n  console.log('myPluginEvent was fired');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ListChannelsResult Interface in TypeScript\nDESCRIPTION: Interface for the result of listing notification channels, containing an array of Channel objects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListChannelsResult {\n  channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleEvery Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the ScheduleEvery type alias, which represents the available scheduling intervals for recurring notifications in Capacitor's Local Notifications API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScheduleEvery = 'year' | 'month' | 'two-weeks' | 'week' | 'day' | 'hour' | 'minute' | 'second';\n```\n\n----------------------------------------\n\nTITLE: Enabling Capacitor in Existing Ionic Project\nDESCRIPTION: Command to enable Capacitor integration in an existing Ionic project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/getting-started/with-ionic.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic integrations enable capacitor\n```\n\n----------------------------------------\n\nTITLE: Modern Plugin Import Syntax for Capacitor 3\nDESCRIPTION: Example showing the new recommended way to import Capacitor plugins directly from their packages rather than using the deprecated Plugins object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nimport { Plugins } from '@capacitor/core';\nconst { AnyPlugin } = Plugins;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nimport { AnyPlugin } from 'any-plugin';\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for Configuration Changes\nDESCRIPTION: Update the AndroidManifest.xml file to handle additional configuration changes without restarting the app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n         <activity\n-            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale\"\n+            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode\"\n             android:name=\"com.example.app\"\n             android:label=\"@string/title_activity_main\"\n             android:theme=\"@style/AppTheme.NoActionBarLaunch\"\n             android:launchMode=\"singleTask\">\n```\n\n----------------------------------------\n\nTITLE: Adding an Orientation Listener\nDESCRIPTION: API definition for adding a listener for device orientation change events. Returns a handle that can be used to remove the listener when it's no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/motion.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Plugin Call with Error Information\nDESCRIPTION: Demonstrates how to reject a plugin call to indicate failure, passing an error message, optional error code, and an Error instance to provide detailed error information to the client.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/ios-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ncall.reject(error.localizedDescription, nil, error)\n```\n\n----------------------------------------\n\nTITLE: Adding Back Button Event Listener in Capacitor App API\nDESCRIPTION: Adds a listener for the hardware back button event on Android. This disables the default back button behavior, allowing custom handling of the back button action.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'backButton', listenerFunc: BackButtonListener) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Defining CameraSource Enum in Markdown\nDESCRIPTION: Defines the CameraSource enum which specifies the source of the camera input. It includes options for Prompt, Camera, and Photos.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/camera.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#### CameraSource\n\n| Members      | Value                 |\n| ------------ | --------------------- |\n| **`Prompt`** | <code>\"PROMPT\"</code> |\n| **`Camera`** | <code>\"CAMERA\"</code> |\n| **`Photos`** | <code>\"PHOTOS\"</code> |\n```\n\n----------------------------------------\n\nTITLE: Required Resources Directory Structure\nDESCRIPTION: Shows the expected folder structure for source icon and splash screen files that cordova-res will use to generate platform-specific assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nresources/\n├── icon.png\n└── splash.png\n```\n\n----------------------------------------\n\nTITLE: Executing Capacitor CLI Commands in Project Directory\nDESCRIPTION: Demonstrates how to run Capacitor CLI commands using npx within a project directory, highlighting the difference from Cordova's global CLI approach.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/cordova/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap\n```\n\n----------------------------------------\n\nTITLE: Listening to Marker Info Window Click Events - TypeScript\nDESCRIPTION: Registers a callback to be executed when a marker info window is clicked. The listener is optional and receives MarkerClickCallbackData. Returns a void Promise asynchronously, requiring correct map and event types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnInfoWindowClickListener(callback?: MapListenerCallback<MarkerClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening Native Project in Platform IDE using Capacitor CLI\nDESCRIPTION: Command to open a Capacitor native project in the appropriate IDE. For iOS projects, it opens Xcode, and for Android projects, it opens Android Studio. Requires specifying the target platform as either 'android' or 'ios'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cli/open.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open <platform>\n```\n\n----------------------------------------\n\nTITLE: Haptics Notification Feedback Method Signature - TypeScript\nDESCRIPTION: Specifies the TypeScript function definition for triggering notification-related haptic feedback. Accepts optional NotificationOptions which can specify the type (success, warning, error), and returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/haptics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnotification(options?: NotificationOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining RenameOptions Type Alias in TypeScript\nDESCRIPTION: Creates a type alias RenameOptions that refers to the CopyOptions type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype RenameOptions = CopyOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining CallbackID Type Alias in TypeScript\nDESCRIPTION: Defines the CallbackID type alias as a string, likely used for identifying and managing callbacks in the Geolocation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype CallbackID = string\n```\n\n----------------------------------------\n\nTITLE: Storage Set Method TypeScript Definition\nDESCRIPTION: Type definition for the Storage.set() method which stores a key-value pair and returns a promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/storage.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nset(options: { key: string; value: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Watch Data in TypeScript\nDESCRIPTION: This method updates the watch's state data. It takes an object with a 'data' property containing key-value pairs of strings and returns a Promise<void>.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdateWatchData(options: { data: { [key: string]: string; }; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating Cordova Plugin and Syncing with Capacitor Native Projects in Bash\nDESCRIPTION: Updates an existing Cordova plugin to a specified version and syncs changes with native projects. Use in the project directory where the plugin is currently installed. Requires Node.js, npm, and Capacitor CLI. Inputs: target plugin and version (replace 'cordova-plugin-name@version' accordingly). Output is the updated plugin in node_modules and platform sync. Constraints: version should be compatible with both Cordova and Capacitor. Syncing modifies native platform files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/cordova.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name@version\\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressListener Type in TypeScript\nDESCRIPTION: Defines a function type for ProgressListener that takes a ProgressStatus parameter and returns void.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/filesystem.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProgressListener = (progress: ProgressStatus) => void;\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Change Handler in ScreenOrientationPlugin\nDESCRIPTION: Updates the handleOnConfigurationChanged method to only notify listeners when there's an actual orientation change, using the implementation's hasOrientationChanged method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   if(implementation.hasOrientationChanged(newConfig.orientation)) {\n       this.onOrientationChanged();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on iOS Device\nDESCRIPTION: This command runs a debug build of the Capacitor app on an iOS device. It's used for testing the application during development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services and Gradle Configuration\nDESCRIPTION: Changes required in build.gradle and gradle-wrapper.properties files for updating Google Services and Gradle versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/5-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n-       classpath 'com.google.gms:google-services:4.3.13'\n+       classpath 'com.google.gms:google-services:4.3.15'\n\n# build.gradle\n\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:7.2.1'\n+       classpath 'com.android.tools.build:gradle:8.0.0'\n\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Aliases for HTTP Operations\nDESCRIPTION: Collection of type aliases used for HTTP request/response handling, including BodyInit, RequestCache, RequestCredentials, and other related types.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype BodyInit = Blob | BufferSource | FormData | URLSearchParams | ReadableStream<Uint8Array> | string\ntype RequestCache = \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\"\ntype RequestCredentials = \"include\" | \"omit\" | \"same-origin\"\ntype RequestMode = \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\"\ntype RequestRedirect = \"error\" | \"follow\" | \"manual\"\ntype HttpResponseType = 'arraybuffer' | 'blob' | 'json' | 'text' | 'document'\n```\n\n----------------------------------------\n\nTITLE: Geolocation API Method Definitions\nDESCRIPTION: TypeScript interface definitions for the Geolocation plugin's core methods including getCurrentPosition, watchPosition, and clearWatch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/geolocation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>\n\nwatchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>\n\nclearWatch(options: ClearWatchOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Android Google Maps Configuration\nDESCRIPTION: Required XML configuration for Android manifest including API key and location permissions\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"YOUR_API_KEY_HERE\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Android SDK Version in Gradle\nDESCRIPTION: Sets the minimum Android SDK version to 26 in the `android/variables.gradle` file. This is a required configuration step for the InAppBrowser plugin on Android, as it needs SDK 26 or higher.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\next {\n    minSdkVersion = 26\n}\n```\n\n----------------------------------------\n\nTITLE: Locking and Unlocking Screen Orientation with @capacitor/screen-orientation\nDESCRIPTION: TypeScript code demonstrating how to dynamically lock and unlock screen orientation using the @capacitor/screen-orientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScreenOrientation } from '@capacitor/screen-orientation';\n...\nawait ScreenOrientation.lock({ orientation: 'portrait' });\nawait ScreenOrientation.lock({ orientation: 'landscape' });\n\n// To unlock orientation which will default back to the global setting:\nawait ScreenOrientation.unlock();\n```\n\n----------------------------------------\n\nTITLE: Adding Registration Error Event Listener in Capacitor\nDESCRIPTION: Add a listener for the 'registrationError' event, which is called when push notification registration encounters an error.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\naddListener(eventName: 'registrationError', listenerFunc: (error: RegistrationError) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URL Scheme in Android\nDESCRIPTION: XML configuration for AndroidManifest.xml to register intent filters for handling custom URL schemes in Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"@string/custom_url_scheme\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Cordova Dependencies Example\nDESCRIPTION: Example of typical Cordova plugin dependencies in package.json that will be automatically installed by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"@ionic-native/camera\": \"^5.3.0\",\n    \"@ionic-native/core\": \"^5.3.0\",\n    \"@ionic-native/file\": \"^5.3.0\",\n    \"cordova-android\": \"8.0.0\",\n    \"cordova-ios\": \"5.0.0\",\n    \"cordova-plugin-camera\": \"4.0.3\",\n    \"cordova-plugin-file\": \"6.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating handleOnConfigurationChanged in ScreenOrientationPlugin\nDESCRIPTION: This snippet updates the handleOnConfigurationChanged method in ScreenOrientationPlugin to only notify listeners when the orientation actually changes.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleOnConfigurationChanged(Configuration newConfig) {\n   super.handleOnConfigurationChanged(newConfig);\n   if(implementation.hasOrientationChanged(newConfig.orientation)) {\n       this.onOrientationChanged();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Notification Channel in Capacitor (TypeScript)\nDESCRIPTION: Method for deleting a notification channel identified by its ID. This functionality is only available for Android devices.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Weekday Enum in TypeScript\nDESCRIPTION: Defines the Weekday enum for representing days of the week with numerical values.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nenum Weekday {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Orientation Unlock Method in Swift\nDESCRIPTION: This method unlocks the screen orientation by setting it to an unknown state and attempting to auto-correct.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-ios.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\npublic func unlock(completion: @escaping () -> Void) {\n  DispatchQueue.main.async {\n    let unknownOrientation = UIInterfaceOrientation.unknown.rawValue\n    UIDevice.current.setValue(unknownOrientation, forKey: \"orientation\")\n    UINavigationController.attemptRotationToDeviceOrientation()\n    completion()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebColor.parseColor() in Android Java\nDESCRIPTION: Use WebColor.parseColor() instead of Color.parseColor() for consistent color parsing across platforms, especially for colors with alpha channels.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString colorStringWithAlpha = \"#FF000088\"; // Semi-transparent red\nint color = WebColor.parseColor(colorStringWithAlpha);\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Screen Orientation in React JSX\nDESCRIPTION: This JSX code conditionally renders different UI elements based on whether the screen orientation is portrait or landscape.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  orientation.includes('portrait') &&\n    {\n      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */\n    };\n}\n{\n  orientation.includes('landscape') &&\n    {\n      /* Let the user \"sign\" and unlock screen orientation through a confirmation button. */\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Full Year (Local) with Date.getFullYear() in JavaScript\nDESCRIPTION: The `getFullYear()` method returns the year (four digits for dates between year 1000 and 9999) of the specified date according to local time.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngetFullYear(): number\n```\n\n----------------------------------------\n\nTITLE: Map Click Event Listener in TypeScript\nDESCRIPTION: Establishes a listener for map click events using MapClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMapClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications in Angular Component\nDESCRIPTION: TypeScript implementation of push notification registration and event handling in an Angular component's ngOnInit method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomePage implements OnInit {\n  ngOnInit() {\n    console.log('Initializing HomePage');\n\n    // Request permission to use push notifications\n    // iOS will prompt user and return if they granted permission or not\n    // Android will just grant without prompting\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration',\n      (token: Token) => {\n        alert('Push registration success, token: ' + token.value);\n      }\n    );\n\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError',\n      (error: any) => {\n        alert('Error on registration: ' + JSON.stringify(error));\n      }\n    );\n\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      }\n    );\n\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Browser Plugin\nDESCRIPTION: Commands to install the latest version of the Capacitor Browser plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/browser@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Updating Java and Kotlin Configurations\nDESCRIPTION: Updates Java compatibility version to 17 and Kotlin version to 1.8.20, also updates Kotlin standard library dependency\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/5-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\ncompileOptions {\n-    sourceCompatibility JavaVersion.VERSION_11\n+    sourceCompatibility JavaVersion.VERSION_17\n-    targetCompatibility JavaVersion.VERSION_11\n+    targetCompatibility JavaVersion.VERSION_17\n}\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\nbuildscript {\n-    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.7.0'\n+    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.8.20'\n    repositories {\n```\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\ndependencies {\n-    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n+    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n```\n\n----------------------------------------\n\nTITLE: Setting Call to Persist for Multiple Completions in iOS\nDESCRIPTION: Code to mark a plugin call in iOS to allow for multiple completions. Setting the keepAlive property to true enables the call to persist and resolve multiple times.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ncall.keepAlive = true\n```\n\n----------------------------------------\n\nTITLE: Old vs New Plugin Import Patterns\nDESCRIPTION: Comparison between the deprecated Plugins object import pattern and the new direct import pattern for Capacitor 3 plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nimport { Plugins } from '@capacitor/core';\nconst { AnyPlugin } = Plugins;\n\n// NEW\nimport { AnyPlugin } from 'any-plugin';\n```\n\n----------------------------------------\n\nTITLE: Plugin Call Management Methods - Android Java\nDESCRIPTION: Core methods for managing plugin calls in Android Capacitor implementations. These methods handle saving, retrieving, and releasing plugin calls for asynchronous operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/saving-calls.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid saveCall(PluginCall call)\nPluginCall getSavedCall(String callbackId)\nvoid releaseCall(PluginCall call)\nvoid releaseCall(String callbackId)\n```\n\n----------------------------------------\n\nTITLE: Tracking Orientation Changes\nDESCRIPTION: Implementation method to track configuration changes and determine if they're related to orientation, avoiding duplicate notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Nullable private int configOrientation;\n\npublic boolean hasOrientationChanged(int orientation) {\n    if (orientation == configOrientation) {\n        return false;\n    } else {\n        this.configOrientation = orientation;\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Native Listeners in Capacitor\nDESCRIPTION: Removes all native event listeners for the App plugin, cleaning up any registered callbacks for events like 'appRestoredResult' and 'backButton'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/app.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Plugin Initialization in MainActivity\nDESCRIPTION: Remove manual plugin initialization from MainActivity.java as Capacitor 4 uses automatic plugin loading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-\n-        // Initializes the Bridge\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n-            // Additional plugins you've installed go here\n-            add(Plugin1.class);\n-            add(Plugin2.class);\n-        }});\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version for Android\nDESCRIPTION: Diff showing the update of the Gradle wrapper version in the gradle-wrapper.properties file for Capacitor 7.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-8.2.1-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.11.1-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic Native Plugins with Capacitor\nDESCRIPTION: Process for installing both the Ionic Native TypeScript wrapper and its corresponding Cordova plugin, followed by syncing the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/using-cordova-plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ionic-native/javascript-package-name\nnpm install cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Checking Exact Notification Settings in Capacitor (Android Only)\nDESCRIPTION: Checks application setting for using exact alarms on Android. Returns a Promise resolving to a SettingsPermissionStatus object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncheckExactNotificationSetting() => Promise<SettingsPermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Setting Map Click Listener in Google Maps\nDESCRIPTION: Method to set up a callback for map click events. Takes an optional callback function that receives MapClickCallbackData.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnMapClickListener(callback?: MapListenerCallback<MapClickCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions in AndroidManifest.xml\nDESCRIPTION: XML permissions required for the Camera plugin to access the device's external storage for reading and writing photo files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Weak References in iOS Swift\nDESCRIPTION: Update references to bridge and other objects to use optional chaining due to weak references in Capacitor 3.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nbridge?.presentVC(myViewController, animated: true, completion: nil)\n\nif let isSim = bridge?.isSimEnvironment, isSim {\n     // Using optional binding to unwrap the optional before examining its value.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin Version in build.gradle\nDESCRIPTION: Diff showing the required update to the Google Services plugin version in the build.gradle file for Capacitor 6 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.0.0'\n-       classpath 'com.google.gms:google-services:4.3.15'\n+       classpath 'com.google.gms:google-services:4.4.0'\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable API Errors\nDESCRIPTION: Shows how to implement proper error handling for unavailable APIs in web plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/creating-plugins/web-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync getLocation(): Promise<Location> {\n  if (typeof navigator === 'undefined' || !navigator.geolocation) {\n    throw this.unavailable('Geolocation API not available in this browser.');\n  }\n\n  // TODO: actual web implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Updating iOS .gitignore for Capacitor 5\nDESCRIPTION: Changes to make to your .gitignore file for iOS projects when upgrading to Capacitor 5, removing Podfile.lock and adding the output directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- App/Podfile.lock\n+ App/output\n```\n\n----------------------------------------\n\nTITLE: Handling Unlock Method in Plugin\nDESCRIPTION: Plugin method that calls the implementation's unlock method to allow the screen orientation to change automatically based on device orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod()\npublic void unlock(PluginCall call) {\n   implementation.unlock();\n   call.resolve();\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Echo Plugin\nDESCRIPTION: Demonstrates how to use the implemented Echo plugin in a TypeScript/JavaScript application to communicate with native code.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Updating iOS gitignore to ignore DerivedData\nDESCRIPTION: Updates the iOS .gitignore file to ignore the DerivedData directory, which is where the Capacitor CLI places native iOS builds.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n App/Pods\n App/App/public\n App/Podfile.lock\n+DerivedData\n xcuserdata\n\n # Cordova plugins for Capacitor\n```\n\n----------------------------------------\n\nTITLE: Changing Exact Notification Settings in Capacitor (Android Only)\nDESCRIPTION: Directs user to application settings to configure exact alarms on Android 12+. Returns a Promise resolving to a SettingsPermissionStatus object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nchangeExactNotificationSetting() => Promise<SettingsPermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Opening a URL with @capacitor/browser in TypeScript\nDESCRIPTION: Example of how to use the Browser.open() method to open a URL in an in-app browser.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browser } from '@capacitor/browser';\n\nconst openCapacitorSite = async () => {\n  await Browser.open({ url: 'http://capacitorjs.com/' });\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugins in MainActivity for Java\nDESCRIPTION: Shows how to register custom plugins in MainActivity.java for Capacitor 3 when automatic loading is not possible.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_9\n\nLANGUAGE: Diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n\n+        registerPlugin(PluginInMyApp.class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Java Package Name for Android Plugin\nDESCRIPTION: The Java package declaration needed for Android plugin files. This must match the package-id provided when generating the plugin project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/packaging.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.ionic.plugins.screenorientation\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin\nDESCRIPTION: Update the Google Services plugin version in the main Android build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n     dependencies {\n         classpath 'com.android.tools.build:gradle:4.1.1'\n-        classpath 'com.google.gms:google-services:4.2.0'\n+        classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n```\n\n----------------------------------------\n\nTITLE: Handling Watch Commands in Background with Background Runner\nDESCRIPTION: JavaScript example for receiving events from the watch while the iOS app is in the background using the Capacitor Background Runner plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"WatchConnectivity_didReceiveUserInfo\", (args) => {\n  console.log(args.message.jsCommand);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Mapping for Jasmine\nDESCRIPTION: JSON configuration for tsconfig.spec.json showing how to set up path mappings to use mock Capacitor plugins in Jasmine tests.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/mocking-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"]\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"paths\": {\n      \"@app/*\": [\"src/app/*\"],\n      \"@env/*\": [\"src/environments/*\"],\n      \"@test/*\": [\"test/*\"],\n      \"@capacitor/*\": [\"__mocks__/@capacitor/*\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionState Type Alias in TypeScript\nDESCRIPTION: Defines the PermissionState type alias for representing different states of notification permission.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype PermissionState = 'prompt' | 'prompt-with-rationale' | 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugins with Capacitor\nDESCRIPTION: Commands for installing a Cordova plugin in a Capacitor project. After installation via npm, the plugin must be synced to the native projects using the Capacitor CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/cordova.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cordova-plugin-name\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Framework CLIs\nDESCRIPTION: Generic command to start a local web server for use with framework CLIs, which is typically used for Live Reload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/live-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Setting URL Scheme in strings.xml\nDESCRIPTION: Shows how to configure a custom URL scheme in strings.xml that allows the app to respond to custom URLs on launch.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/android/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"custom_url_scheme\">com.capacitorjs.myapp</string>\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Code to Capacitor Project using CLI\nDESCRIPTION: This command copies the built web bundle to Android and iOS projects and updates native dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/basics/workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor iOS Pods Helper in Podfile\nDESCRIPTION: Adds the required relative path to Capacitor iOS pod helpers script at the beginning of the Podfile.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n```\n\n----------------------------------------\n\nTITLE: Using the Echo Plugin in TypeScript\nDESCRIPTION: Demonstrates how to use the Echo plugin in a TypeScript application to send and receive data.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/custom-code.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Echo from '../path/to/echo-plugin';\n\nconst { value } = await Echo.echo({ value: 'Hello World!' });\nconsole.log('Response from native:', value);\n```\n\n----------------------------------------\n\nTITLE: Setting TypeScript Output Target for Web Plugins\nDESCRIPTION: Configuration recommendation for TypeScript-based web plugins in Capacitor 3. Setting the output target to es2017 in tsconfig.json ensures compatibility with modern web standards.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nes2017\n```\n\n----------------------------------------\n\nTITLE: Unregistering from Push Notifications in Capacitor\nDESCRIPTION: Unregister the app from push notifications. This deletes the Firebase token on Android and unregisters from APNS on iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nunregister() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ionic Angular App\nDESCRIPTION: Command to create a new Ionic Angular app based on the blank starter template with Capacitor integration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nionic start capApp blank --type=angular\n```\n\n----------------------------------------\n\nTITLE: Importing Plugins Object in TypeScript\nDESCRIPTION: This snippet shows how to import the Plugins object from @capacitor/core. The Plugins object represents the registry of all Capacitor plugins.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\n```\n\n----------------------------------------\n\nTITLE: Setting Map Type (e.g., Satellite, Terrain) - TypeScript\nDESCRIPTION: Changes the map's display type using a MapType parameter (e.g., roadmap, satellite, hybrid). It's asynchronous with a void Promise. Requires that provided MapType is valid and supported by the map API.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nsetMapType(mapType: MapType) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Plugin Availability Check with Fallback\nDESCRIPTION: Complete example of checking plugin availability and implementing fallback behavior when a plugin isn't available.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/utilities.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n\nif (!isAvailable) {\n  // Have the user upload a file instead\n} else {\n  // Otherwise, make the call:\n  const image = await Camera.getPhoto({\n    resultType: CameraResultType.Uri,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface: GalleryPhotos\nDESCRIPTION: Interface defining the structure for gallery photos result containing an array of picked photos.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryPhotos {\n  photos: GalleryPhoto[];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Gradle Plugin Version\nDESCRIPTION: Updates the Android Gradle plugin from version 8.0.0 to 8.2.1 to support Capacitor 6 requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/6-0.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:8.0.0'\n+       classpath 'com.android.tools.build:gradle:8.2.1'\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility Elements in Google Maps\nDESCRIPTION: Enables or disables accessibility elements on the map based on the enabled parameter. Improves map accessibility for users with disabilities.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nenableAccessibilityElements(enabled: boolean) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface: GalleryPhoto\nDESCRIPTION: Interface defining the structure of a single gallery photo including path, webPath, exif data and format information.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/camera.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GalleryPhoto {\n  path: string;\n  webPath: string;\n  exif: any;\n  format: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode using Capacitor CLI\nDESCRIPTION: Command to open the iOS project in Xcode using Capacitor's CLI tool\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor React Hooks Package\nDESCRIPTION: Command to install the @capacitor-community/react-hooks package from npm, which provides React hooks for accessing Capacitor APIs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/react-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor-community/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor App on Android Device\nDESCRIPTION: This command runs a debug build of the Capacitor app on an Android device. It's used for testing the application during development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/basics/workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in Android Strings Resource\nDESCRIPTION: Shows how to change the app name by modifying the app_name value in the strings.xml resource file for Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/android/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"app_name\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: Copying Updated Capacitor Config and Opening Native IDEs\nDESCRIPTION: Commands to copy the updated Capacitor configuration to native projects and open the native IDEs for iOS and Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/live-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications Presentation Options in JSON\nDESCRIPTION: JSON configuration for specifying how push notifications are displayed when the app is in the foreground.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"PushNotifications\": {\n      \"presentationOptions\": [\"badge\", \"sound\", \"alert\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Orientation Plugin in Capacitor\nDESCRIPTION: Shell commands to install the @capacitor/screen-orientation plugin and sync the project to apply changes to native platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Removing All Native Listeners in Capacitor App API\nDESCRIPTION: Removes all native listeners for the App plugin. This is useful for cleanup when the listeners are no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in React\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a React application, typically in main.tsx, index.tsx, or index.js.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/pwa-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\n// Call the element loader before the render call\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Plugin from Registry in TypeScript\nDESCRIPTION: This code demonstrates how to get a specific plugin (in this case, Browser) from the Plugins registry object.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/index.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Browser } = Plugins;\n```\n\n----------------------------------------\n\nTITLE: Installing Device Capacitor Plugin with npm\nDESCRIPTION: Commands to install the @capacitor/device plugin and synchronize the native project files with the updated plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/device.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/device\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Declaring Value Return Method in iOS (Objective-C)\nDESCRIPTION: Demonstrates how to declare a Capacitor plugin method (`method2`) that returns data via a promise in the plugin's `.m` file for iOS. It uses the `CAP_PLUGIN_METHOD` macro with the `CAPPluginReturnPromise` return type specifier.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/creating-plugins/method-types.md#2025-04-23_snippet_4\n\nLANGUAGE: objectivec\nCODE:\n```\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);\n)\n```\n\n----------------------------------------\n\nTITLE: Action Sheet API Method Definition\nDESCRIPTION: TypeScript definition for the showActions method that displays an action sheet with customizable options and returns the user's selection.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/action-sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshowActions(options: ShowActionsOptions) => Promise<ShowActionsResult>\n```\n\n----------------------------------------\n\nTITLE: Opening a Browser with Options in TypeScript\nDESCRIPTION: TypeScript interface definition for the options that can be passed to the Browser.open() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/browser.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nopen(options: OpenOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Enabling iPad Orientation Lock via Full Screen Requirement (XML)\nDESCRIPTION: Configures the iOS `Info.plist` file to require full screen mode for the application on iPads by setting the `UIRequiresFullScreen` key to `true`. This setting is necessary to allow dynamic screen orientation locking on iPads, as multitasking mode otherwise prevents it.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/screen-orientation.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>UIRequiresFullScreen</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Push Notification Icon\nDESCRIPTION: XML configuration to specify the push notification icon in the AndroidManifest.xml file for Android.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.firebase.messaging.default_notification_icon\" android:resource=\"@mipmap/push_icon_name\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor iOS Package\nDESCRIPTION: Installs the @capacitor/ios package using npm. This is the first step in adding iOS support to a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/ios/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Channels in Capacitor (Android)\nDESCRIPTION: List the available notification channels. Only available on Android O or newer (SDK 26+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/push-notifications.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<ListChannelsResult>\n```\n\n----------------------------------------\n\nTITLE: File Viewer Media Preview Method\nDESCRIPTION: TypeScript interface definition for previewing media content from local paths (iOS only).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/file-viewer.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npreviewMediaContentFromLocalPath(options: PreviewMediaFromLocalPathOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin TypeScript Wrapper\nDESCRIPTION: Optional installation command for adding TypeScript support through the awesome-cordova-plugins wrapper package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/cordova.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @awesome-cordova-plugins/plugin-name\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugin Versions in Capacitor\nDESCRIPTION: Command to display all installed Capacitor and Cordova plugins along with their version numbers.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/using-cordova-plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugin Versions\nDESCRIPTION: Command for viewing all installed Capacitor and Cordova plugins along with their version numbers in a Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/cordova.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap ls\n```\n\n----------------------------------------\n\nTITLE: Triggering Selection Haptics in TypeScript\nDESCRIPTION: Functions to trigger haptic feedback for selection start, change, and end events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/haptics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectionStart() => Promise<void>\n\nselectionChanged() => Promise<void>\n\nselectionEnd() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining DeliveredNotifications Interface in TypeScript\nDESCRIPTION: Interface for delivered notifications, containing a list of PushNotificationSchema objects visible on the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DeliveredNotifications {\n  notifications: PushNotificationSchema[];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Capacitor Configuration in Android\nDESCRIPTION: Demonstrates how to get the Capacitor configuration object in Android. This method returns the CapConfig object known to the Capacitor runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/reference/core-apis/android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic CapConfig getConfig()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Capacitor Configuration in Android\nDESCRIPTION: Demonstrates how to get the Capacitor configuration object in Android. This method returns the CapConfig object known to the Capacitor runtime.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic CapConfig getConfig()\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Availability with isPluginAvailable\nDESCRIPTION: Shows the signature of isPluginAvailable function that checks if a plugin is available on the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/reference/core-apis/web.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nisPluginAvailable: (name: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing PWA Elements in React\nDESCRIPTION: Code snippet for importing and initializing PWA Elements in a React application's index file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/web/pwa-elements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Call the element loader after the app has been rendered the first time\ndefineCustomElements(window);\n```\n\n----------------------------------------\n\nTITLE: Adding Circles to Google Maps in TypeScript\nDESCRIPTION: Adds multiple circles to the Google Map instance and returns a promise with an array of circle IDs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/google-maps.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddCircles(circles: Circle[]) => Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Building Ionic App\nDESCRIPTION: Command to build the Ionic app, creating web assets needed by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nionic build\n```\n\n----------------------------------------\n\nTITLE: Building and Syncing Capacitor Project\nDESCRIPTION: Commands to rebuild the Ionic app and copy the changes to the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nnpx cap copy\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Permissions in Capacitor (TypeScript)\nDESCRIPTION: Method to check if the app has permission to display local notifications. Returns a PermissionStatus object that indicates the current permission state.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncheckPermissions() => Promise<PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Importing Official Camera Plugin in Capacitor 3\nDESCRIPTION: Example showing how to import the Camera plugin which is now maintained as a separate package rather than being included in the core package.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Camera } from '@capacitor/camera';\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Install Hook in iOS Podfile\nDESCRIPTION: Add a post_install hook to the Podfile to assert the deployment target for all pods.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI Globally\nDESCRIPTION: Command to install the latest version of the Ionic CLI globally on your system.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/push-notifications-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Runner in capacitor.config.json\nDESCRIPTION: This snippet shows how to configure the Background Runner plugin in the capacitor.config.json file. It sets up a background task with specific parameters such as label, source file, event trigger, repetition, interval, and auto-start.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/background-runner.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"BackgroundRunner\": {\n      \"label\": \"com.example.background.task\",\n      \"src\": \"runners/background.js\",\n      \"event\": \"myCustomEvent\",\n      \"repeat\": true,\n      \"interval\": 15,\n      \"autoStart\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Orientation Type to Android Activity Info Enum\nDESCRIPTION: Helper method to convert JavaScript orientation types to corresponding Android ActivityInfo orientation constants.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate int fromOrientationTypeToEnum(String orientationType) {\n   switch (orientationType) {\n       case \"landscape-primary\":\n           return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n       case \"landscape-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;\n       case \"portrait-secondary\":\n           return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;\n       default:\n           // Case: portrait-primary\n           return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Syncing Capacitor Push Notifications Plugin (Bash)\nDESCRIPTION: Installs the Capacitor Push Notifications plugin via npm and then runs `npx cap sync` to update the native projects (iOS/Android). The sync command updates native dependencies and copies web assets.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/guides/push-notifications-firebase.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/push-notifications\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Capacitor Server Configuration\nDESCRIPTION: TypeScript configuration for setting up the Capacitor server hostname and Android scheme settings.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/autofill-credentials.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CapacitorConfig = {\n...\n  server: {\n    hostname: 'my-app.com',\n    androidScheme: 'https',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Unlocking Screen Orientation in Capacitor\nDESCRIPTION: This code snippet demonstrates how to unlock the screen orientation using the ScreenOrientation plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/using-api.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonClick={() => ScreenOrientation.unlock()}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in Android Java\nDESCRIPTION: Example of accessing plugin configuration values in the native Android implementation using the getConfig() utility method provided by Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString style = getConfig().getString(\"style\");\nif(style) {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for iOS Development\nDESCRIPTION: Command to install Xcode Command Line Tools, which are required for iOS development with Capacitor.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Launching Intent Without Result in Android Plugin\nDESCRIPTION: Demonstrates how to present a native Android Activity without expecting a result back using Intents.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nIntent intent = new Intent(Intent.ACTION_VIEW);\ngetActivity().startActivity(intent);\n```\n\n----------------------------------------\n\nTITLE: Publishing Plugin to npm Registry\nDESCRIPTION: Command to build and publish the plugin to the npm registry, making it available for installation in Capacitor apps.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/development-workflow.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in Android\nDESCRIPTION: Example showing how to access plugin configuration values in the Android native implementation using the getConfig() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString style = getConfig().getString(\"style\");\nif(style) {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `input` Property Type as `boolean` for LocalNotificationAction\nDESCRIPTION: Specifies that the `input` property within the LocalNotificationAction interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Defining `name` Property Type as `string` for NotificationChannel\nDESCRIPTION: Specifies that the `name` property within the NotificationChannel interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor CLI for Migration\nDESCRIPTION: Command to install the latest Capacitor 4 CLI version and run the automated migration process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @capacitor/cli@latest-4\nnpx cap migrate\n```\n\n----------------------------------------\n\nTITLE: Adding android:exported Tag to AndroidManifest\nDESCRIPTION: Add the android:exported tag to the activity element in AndroidManifest.xml to ensure the app can be opened.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\nandroid:exported=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining Importance Type Alias in TypeScript\nDESCRIPTION: Type alias for importance levels of notifications, referencing Android Developer Docs.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Importance = 1 | 2 | 3 | 4 | 5;\n```\n\n----------------------------------------\n\nTITLE: Defining `description` Property Type as `string` for NotificationChannel\nDESCRIPTION: Specifies that the `description` property within the NotificationChannel interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Documenting Browser Plugin Update in Markdown\nDESCRIPTION: Notes the update of the androidxBrowserVersion variable to version 1.4.0 in the Browser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### Browser\n\n- `androidxBrowserVersion` variable has been updated to `1.4.0`.\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace to build.gradle for Capacitor 5\nDESCRIPTION: Adding the namespace property with package ID to the build.gradle file for Capacitor 5 compatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/5-0.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n# build.gradle\n\nandroid {\n+     namespace \"[YOUR_PACKAGE_ID]\"\n      compileSdkVersion rootProject.ext.compileSdkVersion\n```\n\n----------------------------------------\n\nTITLE: Defining `id` Property Type as `string` for NotificationChannel\nDESCRIPTION: Specifies that the `id` property within the NotificationChannel interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Screen Reader Remove Listeners Definition\nDESCRIPTION: Type definition for removing all event listeners from the screen reader.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-reader.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllListeners() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Opening Native IDEs\nDESCRIPTION: Commands to open the native IDE projects for iOS and Android platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/live-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Defining CallbackID Type Alias in TypeScript\nDESCRIPTION: Defines the CallbackID type as a string, used for identifying position watch callbacks\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype CallbackID = string\n```\n\n----------------------------------------\n\nTITLE: Minimizing the Application with Capacitor App Plugin - TypeScript\nDESCRIPTION: This snippet defines minimizeApp(), a method that attempts to minimize the app rather than close it. Only available on Android platforms. Dependencies: Capacitor App plugin, Android platform. Input: none. Output: Promise<void>. Not available on iOS or web.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/app.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nminimizeApp() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Capacitor Config with Bridge in Java\nDESCRIPTION: Shows how to use the bridge to obtain the current Capacitor runtime configuration. The method 'getConfig' returns a 'CapConfig' object, which includes settings and options for the app environment. Usage requires a valid Capacitor bridge context.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/android.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic CapConfig getConfig()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Screen Orientation\nDESCRIPTION: TypeScript function to get the current screen orientation, returning a Promise with ScreenOrientationResult.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\norientation() => Promise<ScreenOrientationResult>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Target for InAppBrowser\nDESCRIPTION: Gradle configuration to set the minimum Android SDK target to 26 for the InAppBrowser plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/inappbrowser.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\next {\n    minSdkVersion = 26\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias for Visibility, representing the visibility levels for Android notifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype Visibility = -1 | 0 | 1;\n```\n\n----------------------------------------\n\nTITLE: Verifying Xcode Command Line Tools Installation\nDESCRIPTION: Command to verify the installation of Xcode Command Line Tools by checking the installation path.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select -p\n# /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Including Capacitor Runtime in HTML\nDESCRIPTION: HTML script tags showing proper order for including Capacitor runtime before application code\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/web/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"capacitor.js\"></script>\n<script src=\"your/app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Platform Detection in Capacitor\nDESCRIPTION: Shows how to detect the current platform using getPlatform() utility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Capacitor.getPlatform() === 'ios') {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Dialog Plugin Update in Markdown\nDESCRIPTION: Notes that the 'title' parameter is now optional in the Dialog plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### Dialog\n\n- `title` is now optional.\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Cookies in JSON\nDESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.json file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"CapacitorCookies\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @capacitor/screen-orientation Plugin\nDESCRIPTION: Shell commands to install the @capacitor/screen-orientation plugin and sync Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @capacitor/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Action Sheet Plugin with NPM\nDESCRIPTION: Commands to install the Capacitor Action Sheet plugin and sync the project\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/action-sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/action-sheet\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Orientation Capacitor Plugin\nDESCRIPTION: Commands to install the @capacitor/screen-orientation plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-orientation\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods via Homebrew\nDESCRIPTION: Command to install CocoaPods iOS dependency manager using Homebrew.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/environment-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Android Splash Screen Style Configuration\nDESCRIPTION: XML style configuration for Android splash screen background resource in styles.xml.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/splash-screen.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"AppTheme.NoActionBar\">\n    <item name=\"android:background\">@drawable/NAME</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating Capacitor Core and CLI Dependencies\nDESCRIPTION: Commands to update Capacitor Core and CLI to version 2. This is the first step in the upgrade process.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/cli@2 @capacitor/core@2\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: This command opens the iOS Capacitor project (.xcworkspace) in Xcode. This gives developers full control over the native iOS code for customization or debugging.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/basics/workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\n```\n\n----------------------------------------\n\nTITLE: Getting the Preferred Zoom Level with Capacitor Text Zoom (TypeScript)\nDESCRIPTION: TypeScript signature for the `getPreferred()` method. This asynchronous method retrieves the user's preferred text zoom level, often set at the operating system level, and returns it as a decimal value within a `GetPreferredResult` object via a Promise.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/text-zoom.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreferred() => Promise<GetPreferredResult>\n```\n\n----------------------------------------\n\nTITLE: Adding iOS and Android Platforms\nDESCRIPTION: Commands to add iOS and Android platforms to the Capacitor project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/push-notifications-firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project\nDESCRIPTION: Command to initialize a new Capacitor project with app name and ID parameters.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap init [appName] [appId]\n```\n\n----------------------------------------\n\nTITLE: Triggering Haptic Impact in TypeScript\nDESCRIPTION: Function to trigger a haptic impact feedback with optional impact style.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/haptics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimpact(options?: ImpactOptions | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Toast API Show Method Definition\nDESCRIPTION: TypeScript definition of the show method which displays a toast notification with customizable options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshow(options: ShowOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating Android and iOS Native Projects\nDESCRIPTION: These commands create the Android and iOS native projects for the Capacitor application.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add android\nnpx cap add ios\n```\n\n----------------------------------------\n\nTITLE: Defining GeolocationPermissionType Type Alias in TypeScript\nDESCRIPTION: Defines the available geolocation permission types: location or coarseLocation\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/geolocation.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype GeolocationPermissionType = 'location' | 'coarseLocation'\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in iOS\nDESCRIPTION: Example showing how to access plugin configuration values in the iOS native implementation using the getConfigValue() method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/configuration-values.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nif let style = getConfigValue(\"style\") as? String {\n  // Set the style\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android Dependencies with Variable References\nDESCRIPTION: Updates the dependencies section in app-level build.gradle to use the variable references for consistent library versions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n dependencies {\n     implementation fileTree(include: ['*.jar'], dir: 'libs')\n-    implementation 'androidx.appcompat:appcompat:1.0.0'\n+    implementation \"androidx.appcompat:appcompat:$androidxAppCompatVersion\"\n     implementation project(':capacitor-android')\n-    testImplementation 'junit:junit:4.12'\n-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'\n+    testImplementation \"junit:junit:$junitVersion\"\n+    androidTestImplementation \"androidx.test.ext:junit:$androidxJunitVersion\"\n+    androidTestImplementation \"androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion\"\n     implementation project(':capacitor-cordova-android-plugins')\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Plugin Version in build.gradle\nDESCRIPTION: Updates the Gradle plugin version to 8.7.2 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n    dependencies {\n-       classpath 'com.android.tools.build:gradle:8.2.1'\n+       classpath 'com.android.tools.build:gradle:8.7.2'\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining `iosUNNotificationAttachmentOptionsThumbnailClippingRectKey` Property Type as `string`\nDESCRIPTION: Specifies that the `iosUNNotificationAttachmentOptionsThumbnailClippingRectKey` property within the LocalNotificationAttachmentOptions interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode Manually\nDESCRIPTION: Alternative command to manually open an iOS project's workspace file in Xcode.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/opening-native-projects.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/App/App.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Installing FFI for CocoaPods on Apple Silicon Macs\nDESCRIPTION: Command to install the FFI gem through Rosetta for Apple Silicon Macs when not using Homebrew for CocoaPods installation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/getting-started/environment-setup.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo arch -x86_64 gem install ffi\n```\n\n----------------------------------------\n\nTITLE: Migrating Data from Capacitor 2 Storage in TypeScript\nDESCRIPTION: The migrate method in TypeScript migrates data from the old Capacitor 2 Storage plugin to the new storage format. No input parameters are required. Returns a Promise that resolves to a MigrateResult object with lists of migrated and existing keys. Non-destructive; original data remains unless removeOld is called. Requires @capacitor/storage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/storage.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmigrate() => Promise<MigrateResult>\n```\n\n----------------------------------------\n\nTITLE: ReadableWritablePair Interface Definition\nDESCRIPTION: Interface for handling readable and writable stream pairs, enabling stream piping and transformation. Includes type definitions for both readable and writable streams with generic type parameters R and W.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadableWritablePair<R, W> {\n  readable: ReadableStream<R>;\n  writable: WritableStream<W>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unimplemented Method in Android Plugin\nDESCRIPTION: Shows how to mark a method as unimplemented for Android platform using the unimplemented() call.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatRequiresIOS(PluginCall call) {\n    call.unimplemented(\"Not implemented on Android.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Watch UI with TypeScript\nDESCRIPTION: TypeScript example showing how to define a UI for the watch using a string-based format and send it to the watch using the updateWatchUI method.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/watch.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync uploadMyWatchUI() {\n    const watchUI = \n        `Text(\"Capacitor WATCH\")\n         Button(\"Add One\", \"inc\")`;\n\n    await Watch.updateWatchUI({\"watchUI\": watchUI});\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Web App Prior to Adding Platforms (Bash)\nDESCRIPTION: This shell command builds the web project's assets into the www directory, which Capacitor uses as its default webDir. This prerequisite ensures the base web files are prepared and up-to-date before adding native platforms like iOS and Android. It assumes the npm build script is configured to output production-ready files.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting App Name in Android Strings XML\nDESCRIPTION: Shows how to change the app name by modifying the app_name value in the strings.xml file. Also includes an example of changing the activity name.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/android/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"app_name\">MyApp</string>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"title_activity_main\">MyApp</string>\n```\n\n----------------------------------------\n\nTITLE: App Launcher Type Definitions\nDESCRIPTION: TypeScript interfaces showing the plugin's API method signatures and type definitions.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/app-launcher.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncanOpenUrl(options: CanOpenURLOptions) => Promise<CanOpenURLResult>\n\nopenUrl(options: OpenURLOptions) => Promise<OpenURLResult>\n```\n\n----------------------------------------\n\nTITLE: AbortSignalEventMap Interface\nDESCRIPTION: TypeScript interface definition for AbortSignalEventMap which maps the 'abort' event type to the Event interface.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/http.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AbortSignalEventMap {\n  \"abort\": Event;\n}\n```\n\n----------------------------------------\n\nTITLE: Prompt Dialog Method Definition\nDESCRIPTION: TypeScript interface definition for the prompt dialog method that shows an input prompt and returns the entered value.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/dialog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprompt(options: PromptOptions) => Promise<PromptResult>\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Module in AppDelegate (Swift)\nDESCRIPTION: This line imports the necessary Firebase module at the top of the `AppDelegate.swift` file. This makes Firebase functionalities, required for initialization and push notification handling, available within the application delegate.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Firebase\n```\n\n----------------------------------------\n\nTITLE: Language Code Method Definition\nDESCRIPTION: TypeScript method definition for getting device language code\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/device.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetLanguageCode() => Promise<GetLanguageCodeResult>\n```\n\n----------------------------------------\n\nTITLE: Locking Screen Orientation for iOS View Controllers\nDESCRIPTION: Swift code to add to AppDelegate.swift for locking screen orientation on presented View Controllers in iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/screen-orientation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {\n  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing onCreate Method in MainActivity.java\nDESCRIPTION: Removes the manual plugin initialization in the onCreate method since Capacitor 4 now uses automatic plugin loading.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-\n-        // Initializes the Bridge\n-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n-            // Additional plugins you've installed go here\n-            add(Plugin1.class);\n-            add(Plugin2.class);\n-        }});\n-    }\n }\n```\n\n----------------------------------------\n\nTITLE: Defining `visibility` Property Type as Union of Numbers for NotificationChannel\nDESCRIPTION: Specifies that the `visibility` property within the NotificationChannel interface must be one of the numeric literal types: 0, 1, or -1.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n0 | 1 | -1\n```\n\n----------------------------------------\n\nTITLE: Defining PluginListenerHandle Interface in TypeScript\nDESCRIPTION: Interface for plugin listener handle, containing a remove method to unsubscribe from events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/push-notifications.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginListenerHandle {\n  remove: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio using Capacitor CLI\nDESCRIPTION: Command to open an Android project in Android Studio using Capacitor's CLI tool. Requires Android Studio 3 or above to be installed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/opening-native-projects.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Defining RmdirOptions Interface in TypeScript\nDESCRIPTION: Defines the options interface for removing a directory using the Capacitor Filesystem API. Requires the `path` of the directory to remove and the parent `directory`. Optionally accepts a `recursive` flag (boolean, default false) to also remove the contents of the directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/filesystem.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RmdirOptions {\n  /**\n   * The path of the directory to remove\n   * @since 1.0.0\n   */\n  path: string;\n  /**\n   * The Directory to remove the directory from\n   * @see Directory\n   * @since 1.0.0\n   */\n  directory: Directory;\n  /**\n   * Whether to recursively remove the contents of the directory\n   * @default false\n   * @since 1.0.0\n   */\n  recursive?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin\nDESCRIPTION: Diff showing the update of the Google Services plugin version in the android/build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/2-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n     dependencies {\n         classpath 'com.android.tools.build:gradle:4.1.1'\n-        classpath 'com.google.gms:google-services:4.2.0'\n+        classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n```\n\n----------------------------------------\n\nTITLE: Installing Screen Orientation Capacitor Plugin\nDESCRIPTION: Terminal commands to install the screen-orientation Capacitor plugin and synchronize the native projects.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/screen-orientation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/screen-orientation@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Defining `inputButtonTitle` Property Type as `string` for LocalNotificationAction\nDESCRIPTION: Specifies that the `inputButtonTitle` property within the LocalNotificationAction interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Deleting Notification Channel in Capacitor (Android Only)\nDESCRIPTION: Deletes a notification channel on Android devices. Requires an object with an id string parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/local-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(args: { id: string; }) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Updating FileProvider Paths for Android\nDESCRIPTION: Add cache path to file_paths.xml to avoid permission errors when editing gallery images.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <external-path name=\"my_images\" path=\".\" />\n+    <cache-path name=\"my_cache_images\" path=\".\" />\n </paths>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenInDefaultParameterModel Interface in TypeScript\nDESCRIPTION: Interface for specifying the URL to be opened in external browser, requiring http/https protocol.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/inappbrowser.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OpenInDefaultParameterModel {\n  url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Screen in JSON Format\nDESCRIPTION: Example configuration for Capacitor splash screen settings in capacitor.config.json, including duration, styling, and platform-specific options.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/splash-screen.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"SplashScreen\": {\n      \"launchShowDuration\": 3000,\n      \"launchAutoHide\": true,\n      \"launchFadeOutDuration\": 3000,\n      \"backgroundColor\": \"#ffffffff\",\n      \"androidSplashResourceName\": \"splash\",\n      \"androidScaleType\": \"CENTER_CROP\",\n      \"showSpinner\": true,\n      \"androidSpinnerStyle\": \"large\",\n      \"iosSpinnerStyle\": \"small\",\n      \"spinnerColor\": \"#999999\",\n      \"splashFullScreen\": true,\n      \"splashImmersive\": true,\n      \"layoutName\": \"launch_screen\",\n      \"useDialog\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for Package Visibility in Capacitor\nDESCRIPTION: XML configuration snippet to be added inside the <manifest> tag in `AndroidManifest.xml`. This is required on Android 11 and newer to declare specific app package names (e.g., 'com.getcapacitor.myapp') that the application intends to query or interact with using the AppLauncher plugin.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/app-launcher.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <package android:name=\"com.getcapacitor.myapp\" />\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Methods in Android Plugins\nDESCRIPTION: Shows how to indicate that a method is not implemented for Android using the unimplemented method. This pattern is useful when creating cross-platform plugins where some functionality is only available on specific platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@PluginMethod\npublic void methodThatRequiresIOS(PluginCall call) {\n    call.unimplemented(\"Not implemented on Android.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Change Detection in ScreenOrientation\nDESCRIPTION: This code adds methods to the ScreenOrientation class to track and detect orientation changes. It uses a nullable integer to store the previous configuration orientation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/plugins/tutorial/implementing-for-android.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Nullable private int configOrientation;\n\npublic boolean hasOrientationChanged(int orientation) {\n    if (orientation == configOrientation) {\n        return false;\n    } else {\n        this.configOrientation = orientation;\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version\nDESCRIPTION: Updates the Gradle wrapper distribution URL from 7.4.2 to 8.0.2\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/plugins/5-0.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPerformed Interface in TypeScript\nDESCRIPTION: Defines the ActionPerformed interface representing a user's interaction with a notification, including action identifier, input value, and original notification schema.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/local-notifications.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPerformed {\n  actionId: string;\n  inputValue: string;\n  notification: LocalNotificationSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Capacitor Browser in TypeScript\nDESCRIPTION: TypeScript definition for the close() method, which closes an open browser window on Web & iOS.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/browser.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclose() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Echo Plugin\nDESCRIPTION: TypeScript interface definition for the Echo plugin, providing type safety for plugin method calls.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/ios/custom-code.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\n\nexport interface EchoPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n}\n\nconst Echo = registerPlugin<EchoPlugin>('Echo');\n\nexport default Echo;\n```\n\n----------------------------------------\n\nTITLE: Declaring MapType Enum in TypeScript\nDESCRIPTION: Defines an enum for different map types available in the Google Maps plugin. It includes Normal, Hybrid, Satellite, Terrain, and None options, each with a description of its appearance.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/apis/google-maps.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nenum MapType {\n  Normal = 'Normal',\n  Hybrid = 'Hybrid',\n  Satellite = 'Satellite',\n  Terrain = 'Terrain',\n  None = 'None'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Platform Assets with cordova-res\nDESCRIPTION: Commands to generate and copy platform-specific assets for both iOS and Android platforms, skipping config modifications.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncordova-res ios --skip-config --copy\ncordova-res android --skip-config --copy\n```\n\n----------------------------------------\n\nTITLE: Updating Kotlin Version in build.gradle\nDESCRIPTION: Updates the default Kotlin version to 1.9.25 in the build.gradle file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/7-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nbuildscript {\n-    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.9.10'\n+    ext.kotlin_version = project.hasProperty(\"kotlin_version\") ? rootProject.ext.kotlin_version : '1.9.25'\n    repositories {\n```\n\n----------------------------------------\n\nTITLE: Changing registerPlugin Order in MainActivity\nDESCRIPTION: Updates the order of registerPlugin calls to occur before super.onCreate for custom plugins in Capacitor 4.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n public class MainActivity extends BridgeActivity {\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n+        registerPlugin(PluginInMyApp.class);\n         super.onCreate(savedInstanceState);\n-        registerPlugin(PluginInMyApp.class);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Orientation Change Event Listener\nDESCRIPTION: Code that adds an event listener to detect changes in screen orientation and update the UI accordingly.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/plugins/tutorial/using-api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nScreenOrientation.addListener('screenOrientationChange', res =>\n  setOrientation(res.type),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Polyline Click Listener in TypeScript\nDESCRIPTION: Sets a listener for when a polyline is clicked. Takes a callback function as an optional parameter.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/google-maps.md#2025-04-23_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nsetOnPolylineClickListener(callback?: MapListenerCallback<PolylineCallbackData> | undefined) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining LocalNotificationSchema Interface in Markdown Documentation - Markdown\nDESCRIPTION: This snippet describes the schema for configuring local notifications within a Capacitor project. It presents a table enumerating each property of LocalNotificationSchema, its type, description (including platform-specific behavior and value constraints), and the version in which it was introduced. The markdown format is used for clear in-line documentation within the Capacitor docs, enabling developers to quickly reference or understand each available option; actual code definitions in TypeScript/interfaces are not present, only a structural table. There are no external dependencies for this snippet, but the referenced types (e.g., Schedule, Attachment) are assumed to be defined elsewhere in the documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/apis/local-notifications.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n#### LocalNotificationSchema\n\n| Prop                   | Type                                          | Description| Since |\n| ---------------------- | --------------------------------------------- || ----- |\n| **`title`**            | <code>string</code>                           | The title of the notification| 1.0.0 |\n| **`body`**             | <code>string</code>                           | The body of the notification, shown below the title| 1.0.0 |\n| **`largeBody`**        | <code>string</code>                           | Sets a multiline text block for display in a big text notification style| 1.0.0 |\n| **`summaryText`**      | <code>string</code>                           | Used to set the summary text detail in inbox and big text notification styles. Only available for Android| 1.0.0 |\n| **`id`**               | <code>number</code>                           | The notification identifier. On Android it's a 32-bit int. So the value should be between -2147483648 and 2147483647 inclusive.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | 1.0.0 |\n| **`schedule`**         | <code><a href=\"#schedule\">Schedule</a></code> | <a href=\"#schedule\">Schedule</a> this notification for a later time| 1.0.0 |\n| **`sound`**            | <code>string</code>                           | Name of the audio file to play when this notification is displayed. Include the file extension with the filename. On iOS, the file should be in the app bundle. On Android, the file should be in res/raw folder. Recommended format is `.wav` because is supported by both iOS and Android. Only available for iOS and Android &lt; 26. For Android 26+ use channelId of a channel configured with the desired sound. If the sound file is not found, (i.e. empty string or wrong name) the default system notification sound will be used. If not provided, it will produce the default sound on Android and no sound on iOS. | 1.0.0 |\n| **`smallIcon`**        | <code>string</code>                           | Set a custom status bar icon. If set, this overrides the `smallIcon` option from Capacitor configuration. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                     | 1.0.0 |\n| **`largeIcon`**        | <code>string</code>                           | Set a large icon for notifications. Icons should be placed in your app's `res/drawable` folder. The value for this option should be the drawable resource ID, which is the filename without an extension. Only available for Android.                                                                                                                                                                                                                                                                                                                                                                                           | 1.0.0 |\n| **`iconColor`**        | <code>string</code>                           | Set the color of the notification icon. Only available for Android| 1.0.0 |\n| **`attachments`**      | <code>Attachment[]</code>                     | Set attachments for this notification| 1.0.0 |\n| **`actionTypeId`**     | <code>string</code>                           | Associate an action type with this notification| 1.0.0 |\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Screen Orientation (JSX)\nDESCRIPTION: This JSX snippet shows how to conditionally render different UI components based on the current screen orientation (portrait or landscape).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/tutorial/using-api.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  orientation.includes('portrait') &&\n    {\n      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */\n    };\n}\n{\n  orientation.includes('landscape') &&\n    {\n      /* Let the user \"sign\" and unlock screen orientation through a confirmation button. */\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Android Permissions in Capacitor Plugin - Java\nDESCRIPTION: This snippet demonstrates how to programmatically request multiple Android permissions from a Capacitor plugin using pluginRequestPermissions. It defines a static request code and requests CAMERA, WRITE_EXTERNAL_STORAGE, and READ_EXTERNAL_STORAGE permissions. Inputs include the permissions array and the request code. No direct outputs; responses are handled asynchronously via callback. Ensure Manifest.permission constants are accessible, and use matching request codes for result handling.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/plugins/android.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nstatic final int REQUEST_IMAGE_CAPTURE = 12345;\npluginRequestPermissions(new String[] {\n  Manifest.permission.CAMERA,\n  Manifest.permission.WRITE_EXTERNAL_STORAGE,\n  Manifest.permission.READ_EXTERNAL_STORAGE\n}, REQUEST_IMAGE_CAPTURE);\n```\n\n----------------------------------------\n\nTITLE: Updating Google Services Plugin Version\nDESCRIPTION: Updates the Google Services plugin version in the main build.gradle file to 4.3.3 for compatibility with Capacitor 2.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/2-0.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n     dependencies {\n         classpath 'com.android.tools.build:gradle:4.1.1'\n-        classpath 'com.google.gms:google-services:4.2.0'\n+        classpath 'com.google.gms:google-services:4.3.3'\n\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n     }\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Push Notifications Icon in AndroidManifest.xml\nDESCRIPTION: XML code to specify a custom icon for push notifications in Android by adding a meta-data entry to the AndroidManifest.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.google.firebase.messaging.default_notification_icon\" android:resource=\"@mipmap/push_icon_name\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up watchOS App Entry Point\nDESCRIPTION: Complete implementation of the watchOS app entry point with required imports and WatchConnectivity setup. This configures the main view and session delegate for the watch app.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/watch.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport WatchConnectivity\nimport iOS_capWatch_watch\n\n@main\nstruct watchddgg_Watch_AppApp: App {\n    var body: some Scene {\n        WindowGroup {\n            CapWatchContentView()\n                .onAppear {\n                    assert(WCSession.isSupported(), \"This sample requires Watch Connectivity support!\")\n                    WCSession.default.delegate = WatchViewModel.shared\n                    WCSession.default.activate()\n                }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI and Creating New Ionic Angular Project\nDESCRIPTION: Commands to install the Ionic CLI globally and create a new blank Ionic Angular project named 'capApp'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/guides/push-notifications-firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\nionic start capApp blank --type=angular\n```\n\n----------------------------------------\n\nTITLE: Viewing Keystore Certificate Details\nDESCRIPTION: Command to list the details of an existing keystore certificate, which displays information including the SHA256 fingerprint needed for Android deep linking configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/deep-links.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -list -v -keystore my-release-key.keystore\n```\n\n----------------------------------------\n\nTITLE: WritableStreamDefaultWriter Interface Definition\nDESCRIPTION: Interface for the writer object returned by WritableStream.getWriter(), providing methods and properties for writing to streams with lock management and state tracking.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/http.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WritableStreamDefaultWriter<W> {\n  closed: Promise<undefined>;\n  desiredSize: number;\n  ready: Promise<undefined>;\n  abort(reason?: any): Promise<void>;\n  close(): Promise<void>;\n  releaseLock(): void;\n  write(chunk: W): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressListener Type Alias in TypeScript\nDESCRIPTION: Type definition for a function that receives progress events for file operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/apis/filesystem.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProgressListener = (progress: ProgressStatus): void;\n```\n\n----------------------------------------\n\nTITLE: Using Camera API in Typescript\nDESCRIPTION: Example showing how to capture/select a photo using Capacitor's Camera API with options for quality, editing and result type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins, CameraResultType } from '@capacitor/core';\n\nconst { Camera } = Plugins;\n\nasync takePicture() {\n  const image = await Camera.getPhoto({\n    quality: 90,\n    allowEditing: true,\n    resultType: CameraResultType.Uri\n  });\n  // image.webPath will contain a path that can be set as an image src.\n  // You can access the original file using image.path, which can be\n  // passed to the Filesystem API to read the raw data of the image,\n  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n  var imageUrl = image.webPath;\n  // Can be set to the src of an image now\n  imageElement.src = imageUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Native IDEs for Capacitor Project\nDESCRIPTION: Commands to open the native IDEs (Xcode for iOS and Android Studio for Android) after configuring Live Reload.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/live-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios\nnpx cap open android\n```\n\n----------------------------------------\n\nTITLE: Presenting Native Screens with Intents without Results\nDESCRIPTION: Demonstrates how to launch an Android Intent to present a native activity without expecting any result back. This is useful for simple screen presentation scenarios.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/plugins/creating-plugins/android-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nIntent intent = new Intent(Intent.ACTION_VIEW);\ngetActivity().startActivity(intent);\n```\n\n----------------------------------------\n\nTITLE: Disabling Jetifier in Android Project\nDESCRIPTION: Remove the Jetifier configuration from the gradle.properties file if there are no plugins using old Android support libraries.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n# gradle.properties\n\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n- # Automatically convert third-party libraries to use AndroidX\n- android.enableJetifier=true\n```\n\n----------------------------------------\n\nTITLE: Switching to NSNotification Extensions in iOS AppDelegate\nDESCRIPTION: Update `ios/App/App/AppDelegate.swift` to use Capacitor's `NSNotification.Name` extensions (e.g., `.capacitorStatusBarTapped`, `.capacitorDidRegisterForRemoteNotifications`, `.capacitorDidFailToRegisterForRemoteNotifications`) instead of constructing `Notification.Name` from hard-coded `CAPNotifications` strings when posting notifications for status bar taps and push registration events.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/3-0.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n         super.touchesBegan(touches, with: event)\n \n         let statusBarRect = UIApplication.shared.statusBarFrame\n         guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }\n \n         if statusBarRect.contains(touchPoint) {\n-            NotificationCenter.default.post(CAPBridge.statusBarTappedNotification)\n+            NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)\n         }\n     }\n \n     func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidRegisterForRemoteNotificationsWithDeviceToken.name()), object: deviceToken)\n+        NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)\n     }\n \n     func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n-        NotificationCenter.default.post(name: Notification.Name(CAPNotifications.DidFailToRegisterForRemoteNotificationsWithError.name()), object: error)\n+        NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)\n     }\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Podfile Dependencies\nDESCRIPTION: Required updates to the iOS Podfile including deployment target, helper scripts, and post-install hooks.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/4-0.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'\n\nplatform :ios, '13.0'\n\npost_install do |installer|\n  assertDeploymentTarget(installer)\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Marker Clustering\nDESCRIPTION: Disables marker clustering functionality on the map.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/apis/google-maps.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndisableClustering() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Generating Platform Resources\nDESCRIPTION: Commands to generate and copy platform-specific icons and splash screens\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncordova-res ios --skip-config --copy\ncordova-res android --skip-config --copy\n```\n\n----------------------------------------\n\nTITLE: Logging to Native Console in Capacitor\nDESCRIPTION: Demonstrates how to use console.log in a Capacitor app, which will automatically forward the log message to the native platform's logging system (Xcode for iOS or Android Studio logs for Android).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/console.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"I really enjoy Avocado Toast, and I'm not ashamed to admit it\");\n```\n\n----------------------------------------\n\nTITLE: Enumerating FilesystemDirectory Values for Filesystem Plugin - TypeScript\nDESCRIPTION: Defines the FilesystemDirectory enum to specify logical directories for file storage across platforms, including Documents, Data, Cache, External, and ExternalStorage. Each member includes descriptions about platform-specific behaviors (e.g., iOS vs Android) and security/access notes. Essential for correctly specifying file locations in options interfaces. Used throughout plugin options and operations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenum FilesystemDirectory {\n  /** The Documents directory ... */\n  Documents = \"DOCUMENTS\",\n  /** The Data directory ... */\n  Data = \"DATA\",\n  /** The Cache directory ... */\n  Cache = \"CACHE\",\n  /** The external directory ... */\n  External = \"EXTERNAL\",\n  /** The external storage directory ... */\n  ExternalStorage = \"EXTERNAL_STORAGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Splash Screen Resource in XML\nDESCRIPTION: Demonstrates how to customize the Android splash screen resource name in the styles.xml file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/splash-screen.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"AppTheme.NoActionBar\">\n    <item name=\"android:background\">@drawable/NAME</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest for Navigation Configuration\nDESCRIPTION: Diff showing the addition of 'navigation' to the configChanges attribute in the AndroidManifest.xml file to prevent app restarts with bluetooth keyboards.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/7-0.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode\"\n+ android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode|navigation\"\n```\n\n----------------------------------------\n\nTITLE: Installing cordova-res CLI Tool\nDESCRIPTION: Global installation of the cordova-res package using npm to enable splash screen and icon generation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/splash-screens-and-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cordova-res\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Error Message on Apple Silicon\nDESCRIPTION: Example error output when encountering CocoaPods installation issues on Apple Silicon Mac devices due to FFI library incompatibility.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/getting-started/faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[error] Analyzing dependencies\n        /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi/library.rb:275: [BUG] Bus Error at 0x0000000000000000\n        ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Availability Check in Capacitor\nDESCRIPTION: Demonstrates how to import Capacitor and check if a specific plugin is available on the current platform.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Capacitor } from '@capacitor/core';\nconst isAvailable = Capacitor.isPluginAvailable('Camera');\n```\n\n----------------------------------------\n\nTITLE: Verifying CocoaPods Installation (Bash)\nDESCRIPTION: This command checks if CocoaPods has been installed correctly and displays its version number. It confirms the successful installation, typically performed via Homebrew. The expected output is the installed version, like '1.12.1'.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/getting-started/environment-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npod --version\n# 1.12.1\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vue Deep Link Handling\nDESCRIPTION: Imports necessary modules for deep linking in Vue. This includes the `App` plugin from `@capacitor/core`, `Vue` itself, and `VueRouter` for routing.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/deep-links.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugins } from '@capacitor/core';\nconst { App } = Plugins;\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version\nDESCRIPTION: Diff showing the required update to the Gradle wrapper version from 8.0.2 to 8.2.1 in the gradle-wrapper.properties file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/6-0.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n# gradle-wrapper.properties\n\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\n- distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0.2-all.zip\n+ distributionUrl=https\\://services.gradle.org/distributions/gradle-8.2.1-all.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Project and Installing Pods using Capacitor CLI (bash)\nDESCRIPTION: This command uses the Capacitor CLI to update the native iOS project. A key part of this update process is running `pod install` (or `pod update`) via CocoaPods to download and integrate the dependencies listed in the `Podfile`, including the newly added Firebase Messaging SDK.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/guides/push-notifications-firebase.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap update ios\n```\n\n----------------------------------------\n\nTITLE: NPM Script Configuration for Trapeze\nDESCRIPTION: Shows how to set up an NPM script to run the trapeze configuration tool with a YAML config file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/automated-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"cap-config\": \"trapeze run config.yaml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Delivered Push Notifications in Capacitor\nDESCRIPTION: TypeScript method signature for clearing all notifications from the notifications screen.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremoveAllDeliveredNotifications() => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Purchase Plugin in Capacitor Project (Shell)\nDESCRIPTION: This shell snippet demonstrates the installation of the cordova-plugin-purchase for adding In App Purchase capabilities to a Capacitor app. The first command adds the plugin as a dependency using npm, and the second command updates the Capacitor project to ensure native platforms are synced with the new plugin. Dependencies include npm, Node.js, Capacitor, and the referenced plugin. Ensure you run these commands from your project root after initial Capacitor setup.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/guides/in-app-purchases.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cordova-plugin-purchase\\nnpx cap update\n```\n\n----------------------------------------\n\nTITLE: Fixing GitHub Connection Issues in CocoaPods\nDESCRIPTION: Series of commands to update openssl and Ruby to resolve GitHub connection issues with CocoaPods. These commands use Homebrew to install and upgrade necessary dependencies.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\nbrew upgrade openssl\nbrew install ruby\nbrew link --overwrite ruby\n```\n\n----------------------------------------\n\nTITLE: Updating Android Scheme in Capacitor Configuration\nDESCRIPTION: Update the androidScheme in the Capacitor configuration to 'http' to maintain compatibility with existing data storage.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  server: {\n    androidScheme: \"http\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Capacitor CLI in Node.js\nDESCRIPTION: Install the latest version of the Capacitor CLI to the project using npm. This is required for migrating to Capacitor 5.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/main/updating/5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @capacitor/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Running Trapeze Configuration\nDESCRIPTION: Shows the command to execute the trapeze configuration tool using npm script.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/automated-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cap-config\n```\n\n----------------------------------------\n\nTITLE: Removing NSAppTransportSecurity from Info.plist\nDESCRIPTION: Removes the NSAppTransportSecurity entry from Info.plist, which is only needed for live reload and is no longer required if using Ionic CLI.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-<key>NSAppTransportSecurity</key>\n-<dict>\n-\t\t  <key>NSAllowsArbitraryLoads</key>\n-  \t\t<true/>\n-</dict>\n```\n\n----------------------------------------\n\nTITLE: Registering Web Plugins in TypeScript\nDESCRIPTION: Use the new registerPlugin function to lazily load web and electron plugins in Capacitor 3.0.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/plugins/3-0.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPlugin } from '@capacitor/core';\nimport type { CoolPlugin } from './definitions';\n\nconst MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {\n  web: () => import('./web').then(m => new m.MyCoolPluginWeb()),\n  // electron: () => (\"./electron\").then(m => new m.MyCoolPluginElectron())\n});\n\nexport * from './definitions';\nexport { MyCoolPlugin };\n```\n\n----------------------------------------\n\nTITLE: Configuring Android 12 Splash Screen API in styles.xml\nDESCRIPTION: Updates the theme parent attribute to use the new Android 12 Splash Screen API for a more modern splash screen experience.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/4-0.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"AppTheme.NoActionBarLaunch\" parent=\"Theme.SplashScreen\">\n    <item name=\"android:background\">@drawable/splash</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Running Capacitor with Default Environment Configuration\nDESCRIPTION: Standard commands for copying and running the Capacitor app with the default environment configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/guides/environment-specific-configurations.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap copy\nnpx cap run ios \t#npx cap run android\n```\n\n----------------------------------------\n\nTITLE: Web Implementation Error for ScreenOrientation in Bash\nDESCRIPTION: Shows the error message displayed when trying to use the ScreenOrientation plugin without a web implementation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/plugins/tutorial/using-api.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUncaught (in promise) ScreenOrientation does not have web implementation.\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Capacitor Plugin\nDESCRIPTION: Commands to install the Dialog Capacitor Plugin and sync the project.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v5/apis/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/dialog@latest-5\nnpx cap sync\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Output Target\nDESCRIPTION: Configuration setting in tsconfig.json to set the TypeScript output target to es2017 for web plugin development.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/updating/plugins/3-0.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"target\": \"es2017\"\n```\n\n----------------------------------------\n\nTITLE: Defining `iosHiddenPreviewsShowTitle` Property Type as `boolean`\nDESCRIPTION: Specifies that the `iosHiddenPreviewsShowTitle` property within the LocalNotificationActionType interface must be of type boolean.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nboolean\n```\n\n----------------------------------------\n\nTITLE: Defining `url` Property Type as `string` for LocalNotificationAttachment\nDESCRIPTION: Specifies that the `url` property within the LocalNotificationAttachment interface must be of type string.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Alert Modal Interface Definition\nDESCRIPTION: TypeScript interface definition for the alert modal function showing the required options parameter type.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/modals.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nalert(options: AlertOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Cordova Allow-Intent Elements Example (XML)\nDESCRIPTION: These XML elements define whitelisted intents in Cordova's config.xml for external navigation (e.g., links to tel: or geo: URIs). In Capacitor, such settings are mostly unused or replaced with platform-specific alternatives and security configurations.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/cordova/migrating-from-cordova-to-capacitor.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<allow-intent href=\"http://*/*\" />\n<allow-intent href=\"https://*/*\" />\n<allow-intent href=\"tel:*\" />\n<allow-intent href=\"sms:*\" />\n<allow-intent href=\"mailto:*\" />\n<allow-intent href=\"geo:*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Jetifier for AndroidX Migration\nDESCRIPTION: This command sequence installs jetifier, converts legacy Android support libraries to AndroidX equivalents, and synchronizes the changes with your Android project to fix \"package android.support.* does not exist\" errors.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/android/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jetifier\nnpx jetify\nnpx cap sync android\n```\n\n----------------------------------------\n\nTITLE: Defining StatOptions Interface for Filesystem Plugin - TypeScript\nDESCRIPTION: Declares StatOptions, outlining the parameters to request metadata about a file using Filesystem.stat(). User must provide the path to the file (string) and the FilesystemDirectory under which to resolve this path. Inputs are utilized to locate and analyze the targeted file or folder. Depends on the FilesystemDirectory enum.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/filesystem.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatOptions {\n  /** The path of the file to get data about */\n  path: string;\n  /** The FilesystemDirectory to get the file under */\n  directory: FilesystemDirectory;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Date Stringification in Capacitor Plugins (Swift)\nDESCRIPTION: This snippet overrides the load function in a custom Capacitor plugin to disable automatic conversion of Date objects to ISO 8601 strings by setting shouldStringifyDatesInCalls to false. This allows plugin authors to access raw Date types as received from WKWebView, rather than automatically serialized strings. Only relevant for plugin subclasses in Swift using Capacitor 3.0+; must be written within a plugin definition conforming to Capacitor's initialization requirements.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/reference/core-apis/data-types.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\noverride func load() {\n    shouldStringifyDatesInCalls = false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Common Variables for Dependencies in Android App Build File\nDESCRIPTION: This diff demonstrates updating the `dependencies` block in `android/app/build.gradle` to use the common variables for AndroidX and testing library versions. It also highlights the necessary change from single quotes to double quotes to enable Groovy variable interpolation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v3/main/updating/2-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n dependencies {\n     implementation fileTree(include: ['*.jar'], dir: 'libs')\n-    implementation 'androidx.appcompat:appcompat:1.0.0'\n+    implementation \"androidx.appcompat:appcompat:$androidxAppCompatVersion\"\n     implementation project(':capacitor-android')\n-    testImplementation 'junit:junit:4.12'\n-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'\n+    testImplementation \"junit:junit:$junitVersion\"\n+    androidTestImplementation \"androidx.test.ext:junit:$androidxJunitVersion\"\n+    androidTestImplementation \"androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion\"\n     implementation project(':capacitor-cordova-android-plugins')\n\n```\n\n----------------------------------------\n\nTITLE: Committing Project Changes\nDESCRIPTION: Shows how to commit changes to the filesystem after making modifications to the project configuration.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/guides/automated-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait project.commit();\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week (Local) with Date.getDay() in JavaScript\nDESCRIPTION: The `getDay()` method returns the day of the week (0-6) for the specified date according to local time, where 0 represents Sunday.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngetDay(): number\n```\n\n----------------------------------------\n\nTITLE: Setting Seconds (Local) with Date.setSeconds() in JavaScript\nDESCRIPTION: The `setSeconds()` method sets the seconds for a specified date according to local time. It requires the seconds value `sec` (0-59) and optionally accepts milliseconds `ms` (0-999). It returns the new timestamp.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nsetSeconds(sec: number, ms?: number): number\n```\n\n----------------------------------------\n\nTITLE: Updating iOS .gitignore for Capacitor 3\nDESCRIPTION: Updates the .gitignore file for iOS to exclude the new public folder location and DerivedData directory.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/3-0.md#2025-04-23_snippet_4\n\nLANGUAGE: Diff\nCODE:\n```\n App/build\n App/Pods\n-App/public\n+App/App/public\n App/Podfile.lock\n xcuserdata\n+DerivedData\n\n # Cordova plugins for Capacitor\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element for File Display\nDESCRIPTION: HTML markup showing the image element used to display the converted file.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/basics/utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"savedPhoto\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Android Notification Channels in Capacitor\nDESCRIPTION: TypeScript method signature for retrieving available notification channels on Android 8.0+ (SDK 26+).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/push-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlistChannels() => Promise<NotificationChannelList>\n```\n\n----------------------------------------\n\nTITLE: Removing Maven Repository from Android Build\nDESCRIPTION: Remove the Maven repository entry from the Android app's build.gradle file as it's no longer needed.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/docs/main/updating/2-0.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n repositories {\n-    maven {\n-        url \"https://dl.bintray.com/ionic-team/capacitor\"\n-    }\n     flatDir {\n         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Capacitor iOS Package\nDESCRIPTION: Command to install the latest version of @capacitor/ios version 2 using npm package manager.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/ios/updating.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @capacitor/ios@2\n```\n\n----------------------------------------\n\nTITLE: Documenting FileSystem Plugin Updates in Markdown\nDESCRIPTION: Describes changes to the FileSystem plugin including new return value for copy operation, enhanced ReaddirResult, and unified StatResult across platforms.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v6/main/updating/4-0.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### FileSystem\n\n- `copy` now returns path of the copied file.\n- `ReaddirResult` now returns an array of `FileInfo` objects, which contain metadata related to each file in addition to its URI.\n- `StatResult` has been unified to return the same on all platforms.\n```\n\n----------------------------------------\n\nTITLE: Creating Install Button in Markdown for VS Code Extension\nDESCRIPTION: This snippet demonstrates how to create a styled button in Markdown that links to the VS Code extension installation. It uses inline HTML and CSS to create a visually appealing button.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v4/main/vs-code-ext/0-getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"vscode:extension/ionic.ionic\" target=\"_self\"><button style={{color: '#FFF',cursor: 'pointer', fontWeight: 'bold', padding:16, paddingLeft:32, paddingRight:32, border:0, borderRadius:100, backgroundColor: '#000'}}>Install</button></a>\n```\n\n----------------------------------------\n\nTITLE: Getting Milliseconds (UTC) with Date.getUTCMilliseconds() in JavaScript\nDESCRIPTION: The `getUTCMilliseconds()` method returns the milliseconds (0-999) in the specified date according to universal time (UTC).\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/apis/local-notifications.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ngetUTCMilliseconds(): number\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Navigation in Markdown\nDESCRIPTION: Hierarchical documentation structure using markdown formatting to organize Capacitor v2 documentation into major sections including Getting Started, Basics, Cordova Migration, Concepts, platform-specific guides, and reference documentation.\nSOURCE: https://github.com/ionic-team/capacitor-docs/blob/main/versioned_docs/version-v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Guide Table of Contents (v2)\n\n- Getting Started\n  - [Introduction](index.md)\n  - [Required Dependencies](getting-started/dependencies.md)\n  - [Installation](getting-started/index.md)\n  - [Using with Ionic](getting-started/with-ionic.md)\n- Basics\n  - [Development Workflow](basics/workflow.md)\n  - [Opening Native IDE](basics/opening-native-projects.md)\n  - [Building your App](basics/building-your-app.md)\n  - [Running your App](basics/running-your-app.md)\n  - [Using Plugins](basics/using-plugins.md)\n  - [Native Project Configuration](basics/configuring-your-app.md)\n  - [Progressive Web Apps](basics/progressive-web-app.md)\n  - [Utilities](basics/utilities.md)\n- Cordova/PhoneGap\n  - [Overview](cordova/index.md)\n  - [Migration Strategy](cordova/migration-strategy.md)\n  - [Cordova to Capacitor Migration](cordova/migrating-from-cordova-to-capacitor.md)\n  - [Cordova/Ionic Native Plugins](cordova/using-cordova-plugins.md)\n  - [Known Incompatible Plugins](cordova/known-incompatible-plugins.md)\n- Concepts\n  - [Ads](guides/ads.md)\n  - [CI/CD](guides/ci-cd.md)\n  - [Deep Links](guides/deep-links.md)\n  - [Deploying and Updating](guides/deploying-updates.md)\n  - [In App Purchases](guides/in-app-purchases.md)\n  - [Live Reload](guides/live-reload.md)\n  - [Push Notifications - Firebase](guides/push-notifications-firebase.md)\n  - [React Hooks](guides/react-hooks.md)\n  - [Screen Orientation](guides/screen-orientation.md)\n  - [Security](guides/security.md)\n  - [Splash Screens and Icons](guides/splash-screens-and-icons.md)\n  - [Storage](guides/storage.md)\n  - [Community Guides](guides/community.md)\n- iOS\n  - [Getting Started](ios/index.md)\n  - [Configuration](ios/configuration.md)\n  - [Updating](ios/updating.md)\n  - [Custom Native Code](ios/custom-code.md)\n  - [Deploying to App Store](ios/deploying-to-app-store.md)\n  - [Troubleshooting](ios/troubleshooting.md)\n- Android\n  - [Getting Started](android/index.md)\n  - [Configuration](android/configuration.md)\n  - [Updating](android/updating.md)\n  - [Custom Native Code](android/custom-code.md)\n  - [Deploying to Google Play](android/deploying-to-google-play.md)\n  - [Troubleshooting](android/troubleshooting.md)\n- Web/PWA\n  - [Getting Started](web/index.md)\n  - [PWA Elements](web/pwa-elements.md)\n- Reference\n  - [Config](config/index.md)\n  - [CLI ->](cli/index.md)\n  - [Plugins ->](plugins/index.md)\n```"
  }
]