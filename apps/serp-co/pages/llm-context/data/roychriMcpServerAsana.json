[
  {
    "owner": "roychri",
    "repo": "mcp-server-asana",
    "content": "TITLE: Initializing Asana Client and Retrieving User Data\nDESCRIPTION: Sets up an Asana client with authentication token and retrieves information about the current user. This example shows how to authenticate and make a basic API call to get user details.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet usersApiInstance = new Asana.UsersApi();\nlet user_gid = \"me\"; // String | A string identifying a user. This can either be the string \\\"me\\\", an email, or the gid of a user.\nlet opts = {\n    \"opt_fields\": \"email,name,photo,photo.image_1024x1024,photo.image_128x128,photo.image_21x21,photo.image_27x27,photo.image_36x36,photo.image_60x60,workspaces,workspaces.name\" // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.\n};\n\nusersApiInstance.getUser(user_gid, opts).then((result) => {\n    console.log('API called successfully. Returned data: ' +  JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Task in Asana\nDESCRIPTION: Demonstrates how to create a new task in Asana with various attributes. This example shows how to set task properties like name, approval status, assignee, projects, and HTML notes.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet body = {\n    \"data\": {\n        \"name\": \"New Task\",\n        \"approval_status\": \"pending\",\n        \"assignee_status\": \"upcoming\",\n        \"completed\": false,\n        \"external\": {\n            \"gid\": \"1234\",\n            \"data\": \"A blob of information.\",\n        },\n        \"html_notes\": \"<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>\",\n        \"is_rendered_as_separator\": false,\n        \"liked\": true,\n        \"assignee\": \"me\",\n        \"projects\": [\"<YOUR_PROJECT_GID>\"],\n    },\n};\nlet opts = {};\n\n// POST - Create a task\ntasksApiInstance.createTask(body, opts).then((result) => {\n    console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Task in Asana\nDESCRIPTION: Shows how to update an existing task in Asana. This example demonstrates updating a task's name, but you can modify any task property by including it in the data object.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet task_gid = \"<YOUR_TASK_GID>\";\nlet body = {\n    \"data\": {\n        \"name\": \"Updated Task\",\n    },\n};\nlet opts = {};\n\n// PUT - Update a task\ntasksApiInstance.updateTask(body, task_gid, opts).then((result) => {\n    console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Tasks with Filtering\nDESCRIPTION: Demonstrates how to fetch multiple tasks with filtering options. This example shows how to get tasks from a specific project with optional parameters like limit, modified since date, and field selection.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n    \"limit\": 50, // Number | Results per page. The number of objects to return per page. The value must be between 1 and 100.\n    \"project\": \"<YOUR_PROJECT_GID>\", // String | The project to filter tasks on.\n    \"modified_since\": \"2012-02-22T02:06:58.158Z\", // Date | Only return tasks that have been modified since the given time.  *Note: A task is considered \"modified\" if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*\n    \"opt_fields\": \"actual_time_minutes,approval_status,assignee,assignee.name,assignee_section,assignee_section.name,assignee_status,completed,completed_at,completed_by,completed_by.name,created_at,created_by,custom_fields,custom_fields.asana_created_field,custom_fields.created_by,custom_fields.created_by.name,custom_fields.currency_code,custom_fields.custom_label,custom_fields.custom_label_position,custom_fields.date_value,custom_fields.date_value.date,custom_fields.date_value.date_time,custom_fields.description,custom_fields.display_value,custom_fields.enabled,custom_fields.enum_options,custom_fields.enum_options.color,custom_fields.enum_options.enabled,custom_fields.enum_options.name,custom_fields.enum_value,custom_fields.enum_value.color,custom_fields.enum_value.enabled,custom_fields.enum_value.name,custom_fields.format,custom_fields.has_notifications_enabled,custom_fields.is_formula_field,custom_fields.is_global_to_workspace,custom_fields.is_value_read_only,custom_fields.multi_enum_values,custom_fields.multi_enum_values.color,custom_fields.multi_enum_values.enabled,custom_fields.multi_enum_values.name,custom_fields.name,custom_fields.number_value,custom_fields.people_value,custom_fields.people_value.name,custom_fields.precision,custom_fields.resource_subtype,custom_fields.text_value,custom_fields.type,dependencies,dependents,due_at,due_on,external,external.data,followers,followers.name,hearted,hearts,hearts.user,hearts.user.name,html_notes,is_rendered_as_separator,liked,likes,likes.user,likes.user.name,memberships,memberships.project,memberships.project.name,memberships.section,memberships.section.name,modified_at,name,notes,num_hearts,num_likes,num_subtasks,offset,parent,parent.created_by,parent.name,parent.resource_subtype,path,permalink_url,projects,projects.name,resource_subtype,start_at,start_on,tags,tags.name,uri,workspace,workspace.name\" // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.\n};\n\n// GET - get multiple tasks\ntasksApiInstance.getTasks(opts).then((result) => {\n    console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Task from Asana API in JavaScript\nDESCRIPTION: This snippet demonstrates how to get a single task from the Asana API using the task's GID. It sets up the Asana client, authenticates with an access token, and makes a GET request to retrieve task details.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// GET - get a task\nclient.callApi(\n    path='/tasks/{task_gid}',\n    httpMethod='GET',\n    pathParams={\"task_gid\": \"<YOUR_TASK_GID>\"},\n    queryParams={},\n    headerParams={},\n    formParams={},\n    bodyParam=null,\n    authNames=['token'],\n    contentTypes=[],\n    accepts=['application/json; charset=UTF-8'],\n    returnType='Blob'\n).then((response_and_data) => {\n    let result = response_and_data.data;\n    let task = result.data;\n    console.log(task.name);\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Task in Asana API using JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new task in Asana using the API. It sets various task properties such as name, approval status, assignee, and project. The task is created using a POST request to the Asana API.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// POST - create a task\nclient.callApi(\n    path='/tasks',\n    httpMethod='POST',\n    pathParams={},\n    queryParams={},\n    headerParams={},\n    formParams={},\n    bodyParam={\n        data: {\n            \"name\": \"New Task\",\n            \"approval_status\": \"pending\",\n            \"assignee_status\": \"upcoming\",\n            \"completed\": false,\n            \"html_notes\": \"<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>\",\n            \"is_rendered_as_separator\": false,\n            \"liked\": true,\n            \"assignee\": \"me\",\n            \"projects\": [\"<YOUR_PROJECT_GID>\"],\n        }\n    },\n    authNames=['token'],\n    contentTypes=[],\n    accepts=['application/json; charset=UTF-8'],\n    returnType='Blob'\n).then((response_and_data) => {\n    let result = response_and_data.data;\n    let task = result.data;\n    console.log(task.name);\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Task in Asana API with JavaScript\nDESCRIPTION: This snippet shows how to update an existing task in Asana using the API. It demonstrates updating task properties such as name, notes, and due date using a PUT request to the Asana API.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// PUT - update a task\nclient.callApi(\n    path='/tasks/{task_gid}',\n    httpMethod='PUT',\n    pathParams={task_gid: \"<YOUR_TASK_GID>\"},\n    queryParams={},\n    headerParams={},\n    formParams={},\n    bodyParam={\n        \"data\": {\n            \"name\": \"Updated Task\",\n            \"html_notes\": \"<body>Updated task notes</body>\",\n            \"due_at\": \"2025-01-20T02:06:58.147Z\"\n        }\n    },\n    authNames=['token'],\n    contentTypes=[],\n    accepts=['application/json; charset=UTF-8'],\n    returnType='Blob'\n).then((response_and_data) => {\n    let result = response_and_data.data;\n    let task = result.data;\n    console.log(task.name);\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination to Gather All Tasks in Asana JavaScript SDK\nDESCRIPTION: This code demonstrates how to handle pagination when retrieving more than 1000 results from the Asana API. It uses the Tasks API to fetch all tasks from a project by accumulating results from multiple pages, with a limit of 100 items per page.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n    \"project\": \"<YOUR_PROJECT_GID>\",\n    \"limit\": 100,\n};\n\nasync function getAllTasks(opts) {\n    let tasks = await tasksApiInstance.getTasks(opts).then(async (response) => {\n        let result = [];\n        let page = response;\n        while(true) {\n            // Add items on page to list of results\n            result = result.concat(page.data);\n            // Fetch the next page\n            page = await page.nextPage();\n            // If the there is no data in the next page break from the loop\n            if (!page.data) {\n                break;\n            }\n        }\n        return result;\n    }, (error) => {\n        console.error(error.response.body);\n    });\n    // Do something with the tasks. EX: print out results\n    console.log('Tasks: ' + JSON.stringify(tasks, null, 2));\n}\n\ngetAllTasks(opts);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tasks with Detailed Fields using Asana API in JavaScript\nDESCRIPTION: This example demonstrates how to use the opt_fields parameter to request specific task properties in the response. The code is similar to the basic example but includes an extensive list of optional fields to retrieve detailed task information.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n    \"limit\": 1,\n    \"project\": \"<YOUR_PROJECT_GID>\",\n    \"opt_fields\": \"actual_time_minutes,approval_status,assignee,assignee.name,assignee_section,assignee_section.name,assignee_status,completed,completed_at,completed_by,completed_by.name,created_at,created_by,custom_fields,custom_fields.asana_created_field,custom_fields.created_by,custom_fields.created_by.name,custom_fields.currency_code,custom_fields.custom_label,custom_fields.custom_label_position,custom_fields.date_value,custom_fields.date_value.date,custom_fields.date_value.date_time,custom_fields.description,custom_fields.display_value,custom_fields.enabled,custom_fields.enum_options,custom_fields.enum_options.color,custom_fields.enum_options.enabled,custom_fields.enum_options.name,custom_fields.enum_value,custom_fields.enum_value.color,custom_fields.enum_value.enabled,custom_fields.enum_value.name,custom_fields.format,custom_fields.has_notifications_enabled,custom_fields.is_formula_field,custom_fields.is_global_to_workspace,custom_fields.is_value_read_only,custom_fields.multi_enum_values,custom_fields.multi_enum_values.color,custom_fields.multi_enum_values.enabled,custom_fields.multi_enum_values.name,custom_fields.name,custom_fields.number_value,custom_fields.people_value,custom_fields.people_value.name,custom_fields.precision,custom_fields.resource_subtype,custom_fields.text_value,custom_fields.type,dependencies,dependents,due_at,due_on,external,external.data,followers,followers.name,hearted,hearts,hearts.user,hearts.user.name,html_notes,is_rendered_as_separator,liked,likes,likes.user,likes.user.name,memberships,memberships.project,memberships.project.name,memberships.section,memberships.section.name,modified_at,name,notes,num_hearts,num_likes,num_subtasks,offset,parent,parent.created_by,parent.name,parent.resource_subtype,path,permalink_url,projects,projects.name,resource_subtype,start_at,start_on,tags,tags.name,uri,workspace,workspace.name\"\n};\n\n// GET - get multiple tasks\ntasksApiInstance.getTasks(opts).then((result) => {\n    console.log(JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tasks with Default Fields using Asana API in JavaScript\nDESCRIPTION: This example demonstrates how to use the Asana API to retrieve multiple tasks without specifying optional fields. The code initializes the Asana client, sets the access token, and makes a request to the getTasks endpoint with basic parameters like limit and project ID.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n    \"limit\": 2,\n    \"project\": \"<YOUR_PROJECT_GID>\"\n};\n\n// GET - get multiple tasks\ntasksApiInstance.getTasks(opts).then((result) => {\n    console.log(JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Tasks with Specific Fields from Asana API in JavaScript\nDESCRIPTION: This snippet shows how to retrieve multiple tasks from the Asana API with specified fields. It uses query parameters to filter tasks by project, limit the number of results, and select specific fields to return.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// GET - get multiple tasks -> with opt_fields\nclient.callApi(\n    path='/tasks',\n    httpMethod='GET',\n    pathParams={},\n    queryParams={\n        \"limit\": 50,\n        \"modified_since\": '2012-02-22T02:06:58.158Z', // OR new Date(\"2012-02-22T02:06:58.158Z\")\n        \"project\": '<YOUR_PROJECT_GID>',\n        \"opt_fields\": 'name,notes'\n    },\n    headerParams={},\n    formParams={},\n    bodyParam=null,\n    authNames=['token'],\n    contentTypes=[],\n    accepts=['application/json; charset=UTF-8'],\n    returnType='Blob'\n).then((response_and_data) => {\n    let result = response_and_data.data;\n    let tasks = result.data;\n    if (tasks.length > 0) {\n        console.log(`Task 1 Name: ${tasks[0].name}`);\n        console.log(`Task 1 Notes: ${tasks[0].notes}`);\n    }\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Task in Asana\nDESCRIPTION: Demonstrates how to delete a task in Asana. This example shows the API call to permanently remove a task identified by its GID.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet task_gid = \"<YOUR_TASK_GID>\";\n\n// DELETE - Delete a task\ntasksApiInstance.deleteTask(task_gid).then((result) => {\n    console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Task from Asana API using JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a task from Asana using the API. It uses a DELETE request to remove a specified task based on its GID. The response is logged to the console.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// DELETE - delete a task\nclient.callApi(\n    path='/tasks/{task_gid}',\n    httpMethod='DELETE',\n    pathParams={\"task_gid\": \"<YOUR_TASK_GID>\"},\n    queryParams={},\n    headerParams={},\n    formParams={},\n    bodyParam=null,\n    authNames=['token'],\n    contentTypes=[],\n    accepts=['application/json; charset=UTF-8'],\n    returnType='Blob'\n).then((response_and_data) => {\n    let result = response_and_data.data;\n    let result = result.data;\n    console.log(result);\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating Asana Client - SDK v3\nDESCRIPTION: Shows how to initialize the Asana client and create API instances using SDK v3. Creates a client instance with authentication token and demonstrates making a basic user API call.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/CONVENTIONS.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet usersApiInstance = new Asana.UsersApi(); // instance to access users\n\nusersApiInstance.getUser(\"me\").then(function(me) {\n  console.log(me);\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Paginated Tasks Page by Page in Asana JavaScript SDK\nDESCRIPTION: This example demonstrates processing paginated results page by page instead of accumulating all results. It uses a limit of 5 items per page and processes each page individually before moving to the next one, which is useful for processing large datasets without loading everything into memory.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n    'project': \"<YOUR_PROJECT_GID>\",\n    \"limit\": 5,\n};\n\nlet pageIndex = 1;\n\ntasksApiInstance.getTasks(opts).then(async (response) => {\n    let page = response;\n    while(true) {\n        // Do something with the page results\n        // EX: print the name of the tasks on that page\n        console.log(`Page ${pageIndex}: `);\n        page.data.forEach(task => {\n            console.log(`    ${task.name}`);\n        });\n        pageIndex += 1;\n\n        page = await page.nextPage();\n        // If the there is no data in the next page break from the loop\n        if (!page.data) {\n            break;\n        }\n    }\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Events with Sync Token in Asana JavaScript SDK\nDESCRIPTION: This code demonstrates how to retrieve events for tasks or projects using the Events API with a sync token. It handles initial sync token acquisition through error handling and sets up a polling mechanism to fetch new events every 5 seconds, updating the sync token with each successful response.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet eventsApiInstance = new Asana.EventsApi();\nlet resource = \"<YOUR_TASK_OR_PROJECT_GID>\"; // String | A resource ID to subscribe to. The resource can be a task or project.\nlet opts = {\n    \"sync\": \"\"\n};\nconst timeouts = 5000\n\n// Used to fetch for initial sync token\nconst setSyncToken = async () => {\n    await eventsApiInstance.getEvents(resource, opts).then((result) => {\n        console.log(JSON.stringify(result.data, null, 2));\n    }, (error) => {\n        let syncToken = error.response.body.sync;\n        opts['sync'] = syncToken;\n    });\n}\n\nconst getEvents = async () => {\n    console.log(\"Setting sync token\");\n    await setSyncToken();\n    // Fetch for new events every 5 seconds\n    console.log(`Fetching events every ${timeouts/1000} second(s)`);\n    while(true) {\n        await eventsApiInstance.getEvents(resource, opts).then((result) => {\n            // Print response\n            console.log(`Fetching events since sync: ${opts['sync']}`);\n            console.log(JSON.stringify(result.data, null, 2));\n\n            // Update the sync token with the new sync token provided in the response\n            opts['sync'] = result._response.sync;\n        }, (error) => {\n            if (error.status === 412) {\n                let syncToken = error.response.body.sync;\n                opts['sync'] = syncToken;\n                console.log(`412 error new sync token: ${syncToken}`);\n            } else{\n                console.error(error.response.text);\n            }\n        });\n        await new Promise(resolve => setTimeout(resolve, timeouts));\n    }\n}\n\ngetEvents();\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Data in Asana JavaScript SDK\nDESCRIPTION: This code snippet shows how to access specific data fields from an Asana API response. It retrieves a task and extracts the task's name and notes properties from the response object.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n.\n.\n.\ntasksApiInstance.getTask(task_gid, opts).then((task) => {\n    let taskName = task.data.name;\n    let taskNotes = task.data.notes;\n    console.log(`taskName: ${taskName}`);\n    console.log(`taskNotes: ${taskNotes}`);\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Status Code and Headers in Asana JavaScript SDK\nDESCRIPTION: This example demonstrates how to access not just the response data but also the HTTP status code and headers. It uses the WithHttpInfo suffix on the method name to get both response data and metadata in a combined object.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet task_gid = \"<YOUR_TASK_GID>\";\nlet opts = {};\n\ntasksApiInstance.getTaskWithHttpInfo(task_gid, opts).then((response_and_data) => {\n    let data = response_and_data.data;\n    let response = response_and_data.response;\n    let task = data.data;\n    let headers = response.headers;\n    console.log(task);\n    console.log(headers);\n}, (error) => {\n    console.error(error.response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Asana-Enable Header in Asana JavaScript SDK\nDESCRIPTION: This code demonstrates how to add an asana-enable header to enable specific features. The example shows enabling the new_goal_memberships feature by setting the appropriate header in the client's defaultHeaders.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// Add asana-enable header for the client\nclient.defaultHeaders['asana-enable'] = 'new_goal_memberships';\n```\n\n----------------------------------------\n\nTITLE: Adding Asana-Disable Header in Asana JavaScript SDK\nDESCRIPTION: This code demonstrates how to add an asana-disable header to disable specific features. The example shows disabling the new_goal_memberships feature by setting the appropriate header in the client's defaultHeaders.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// Add asana-disable header for the client\nclient.defaultHeaders['asana-disable'] = 'new_goal_memberships';\n```\n\n----------------------------------------\n\nTITLE: Pagination Implementation - SDK v3\nDESCRIPTION: Demonstrates pagination handling in SDK v3 including basic next page fetching and fetching multiple pages with a limit. Requires explicit limit setting and uses nextPage() method.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/CONVENTIONS.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetching the next page\ntasksApiInstance.getTasks({ limit: 50 }).then(firstPage => { // set an explicit limit\n  console.log(firstPage.data);\n  firstPage.nextPage().then(secondPage => {\n    console.log(secondPage.data);\n  });\n});\n\n// Fetching up to 200 tasks with a page size of 50\ntasksApiInstance\n  .getTasks({ limit: 50, project: \"1199684513975168\" })\n  .then(async (firstPage) => {\n    let results = firstPage.data;\n\n    // Get the next page\n    let nextPage = await firstPage.nextPage();\n    pageIndex = 2;\n\n    // Keep fetching until there are no more results or\n    // 200 results have been fetched\n    while (nextPage.data && pageIndex <= 4) {\n      results = results.concat(nextPage.data);\n      console.log(pageIndex, results.length);\n      // Get the next page\n      nextPage = await nextPage.nextPage();\n      pageIndex += 1;\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Pagination in Asana JavaScript SDK\nDESCRIPTION: This example shows how to disable the automatic pagination by setting RETURN_COLLECTION to false. This approach gives you direct access to the raw API response with pagination information, allowing for custom pagination implementation.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// Turn off pagination\nclient.RETURN_COLLECTION = false;\n\nlet tasksApiInstance = new Asana.TasksApi();\nlet opts = {\n    'project': \"<YOUR_PROJECT_GID>\",\n    'limit': 1\n};\ntasksApiInstance.getTasks(opts).then((result) => {\n    console.log('API called successfully. Returned data: ' + JSON.stringify(result, null, 2));\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Asana SDK with npm\nDESCRIPTION: Command to install the Asana SDK package using npm. This adds the Asana SDK as a dependency to your Node.js project.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install asana --save\n```\n\n----------------------------------------\n\nTITLE: Adding Headers - SDK v3\nDESCRIPTION: Demonstrates how to add custom headers to requests in SDK v3. Shows setting default headers for the client instance.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/CONVENTIONS.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Asana = require('asana');\n\nlet client = Asana.ApiClient.instance;\nlet token = client.authentications['token'];\ntoken.accessToken = '<YOUR_ACCESS_TOKEN>';\n\n// Add asana-enable header for the client\nclient.defaultHeaders['asana-enable'] = 'new_goal_memberships';\n```\n\n----------------------------------------\n\nTITLE: Detailed Response Format for getTasks with opt_fields in Asana API\nDESCRIPTION: This code snippet shows the enhanced response format when retrieving tasks with detailed optional fields. The response includes comprehensive task information such as assignee details, custom fields, due dates, followers, memberships, and more.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"gid\": \"129839839\",\n    \"actual_time_minutes\": null,\n    \"assignee\": {\n      \"gid\": \"120938293\",\n      \"name\": \"user@example.com\"\n    },\n    \"assignee_status\": \"upcoming\",\n    \"assignee_section\": {\n      \"gid\": \"1094838938\",\n      \"name\": \"Recently assigned\"\n    },\n    \"completed\": false,\n    \"completed_at\": null,\n    \"completed_by\": null,\n    \"created_at\": \"2023-01-01T20:31:21.717Z\",\n    \"created_by\": {\n      \"gid\": \"1201784467042440\",\n      \"resource_type\": \"user\"\n    },\n    \"custom_fields\": [\n      {\n        \"gid\": \"191859815\",\n        \"enabled\": true,\n        \"name\": \"Estimated time\",\n        \"description\": \"Asana-created. Estimate time to complete a task.\",\n        \"number_value\": null,\n        \"precision\": 0,\n        \"format\": \"duration\",\n        \"currency_code\": null,\n        \"custom_label\": null,\n        \"created_by\": null,\n        \"custom_label_position\": null,\n        \"display_value\": null,\n        \"resource_subtype\": \"number\",\n        \"is_formula_field\": false,\n        \"is_value_read_only\": false,\n        \"type\": \"number\"\n      }\n    ],\n    \"dependencies\": [],\n    \"dependents\": [],\n    \"due_at\": \"2025-01-20T02:06:58.000Z\",\n    \"due_on\": \"2025-01-19\",\n    \"followers\": [\n      {\n        \"gid\": \"120938293\",\n        \"name\": \"user@example.com\"\n      }\n    ],\n    \"hearted\": true,\n    \"hearts\": [\n      {\n        \"gid\": \"594849843\",\n        \"user\": {\n          \"gid\": \"120938293\",\n          \"name\": \"user@example.com\"\n        }\n      }\n    ],\n    \"html_notes\": \"<body>Example task notes</body>\",\n    \"is_rendered_as_separator\": false,\n    \"liked\": true,\n    \"likes\": [\n      {\n        \"gid\": \"58303939\",\n        \"user\": {\n          \"gid\": \"120938293\",\n          \"name\": \"user@example.com\"\n        }\n      }\n    ],\n    \"memberships\": [\n      {\n        \"project\": {\n          \"gid\": \"4567\",\n          \"name\": \"Example Project\"\n        },\n        \"section\": {\n          \"gid\": \"8900\",\n          \"name\": \"Untitled section\"\n        }\n      }\n    ],\n    \"modified_at\": \"2023-01-25T21:24:06.996Z\",\n    \"name\": \"Task 1\",\n    \"notes\": \"Example task notes\",\n    \"num_hearts\": 1,\n    \"num_likes\": 1,\n    \"num_subtasks\": 0,\n    \"parent\": null,\n    \"permalink_url\": \"https://app.asana.com/0/58303939/129839839\",\n    \"projects\": [\n      {\n        \"gid\": \"4567\",\n        \"name\": \"Example Project\"\n      }\n    ],\n    \"start_at\": null,\n    \"start_on\": null,\n    \"tags\": [],\n    \"resource_subtype\": \"default_task\",\n    \"workspace\": {\n      \"gid\": \"111111\",\n      \"name\": \"Example Workspace\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Default Response Format for getTasks in Asana API\nDESCRIPTION: This code snippet shows the default compact response format when retrieving tasks without specifying optional fields. The response contains only basic task information including the GID, name, resource type, and resource subtype.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"gid\": \"123\",\n    \"name\": \"Task 1\",\n    \"resource_type\": \"task\",\n    \"resource_subtype\": \"default_task\"\n  },\n  {\n    \"gid\": \"456\",\n    \"name\": \"Task 2\",\n    \"resource_type\": \"task\",\n    \"resource_subtype\": \"default_task\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Instantiating Asana Client - SDK v1\nDESCRIPTION: Shows the legacy method of initializing the Asana client using SDK v1 for comparison. Creates a client instance with access token and makes a basic user API call.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/CONVENTIONS.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst asana = require('asana');\nconst client = asana.Client.create().useAccessToken('<YOUR_ACCESS_TOKEN>');\nclient.users.me().then(function(me) {\n  console.log(me);\n});\n```\n\n----------------------------------------\n\nTITLE: Pagination Implementation - SDK v1\nDESCRIPTION: Shows the legacy pagination implementation in SDK v1 for comparison. Includes both basic next page fetching and using the fetch method to retrieve multiple pages.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/CONVENTIONS.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetching the next page\nclient.tasks.findAll({ limit: 50 }).then((firstPage) => {\n  console.log(firstPage.data);\n  firstPage.nextPage().then((secondPage) => {\n    console.log(secondPage.data);\n  });\n});\n\n// Fetching up to 200 tasks with a page size of 50\nclient.tasks\n  .findAll({ limit: 50, project: \"1199684513975168\" })\n  .then((collection) => {\n    collection.fetch(200).then((tasks) => {\n      console.log(tasks);\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Headers - SDK v1\nDESCRIPTION: Shows the legacy method of adding custom headers to requests in SDK v1 for comparison. Demonstrates setting default headers during client creation.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/CONVENTIONS.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst asana = require('asana');\nconst client = asana.Client.create().useAccessToken('<YOUR_ACCESS_TOKEN>');\n\nasana.Client.create({\"defaultHeaders\": {\"asana-enable\": \"new_goal_memberships\"}});\n```\n\n----------------------------------------\n\nTITLE: Tasks API Endpoints\nDESCRIPTION: Collection of REST API endpoints for managing tasks in Asana including CRUD operations, dependencies, followers, projects, tags and subtasks management.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_7\n\nLANGUAGE: REST\nCODE:\n```\nPOST /tasks/{task_gid}/addDependencies\nPOST /tasks/{task_gid}/addDependents\nPOST /tasks/{task_gid}/addFollowers\nPOST /tasks/{task_gid}/addProject\nPOST /tasks/{task_gid}/addTag\nPOST /tasks/{task_gid}/subtasks\nPOST /tasks\nDELETE /tasks/{task_gid}\nGET /tasks/{task_gid}/dependencies\n```\n\n----------------------------------------\n\nTITLE: Webhook API Endpoints\nDESCRIPTION: REST endpoints for managing webhooks including creation, deletion, updates and retrieval.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_10\n\nLANGUAGE: REST\nCODE:\n```\nPOST /webhooks\nDELETE /webhooks/{webhook_gid}\nGET /webhooks/{webhook_gid}\nGET /webhooks\nPUT /webhooks/{webhook_gid}\n```\n\n----------------------------------------\n\nTITLE: Workspace API Endpoints\nDESCRIPTION: REST endpoints for workspace operations including user management and workspace information retrieval.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_9\n\nLANGUAGE: REST\nCODE:\n```\nPOST /workspaces/{workspace_gid}/addUser\nGET /workspaces/{workspace_gid}\nGET /workspaces\nPOST /workspaces/{workspace_gid}/removeUser\n```\n\n----------------------------------------\n\nTITLE: Teams API Endpoints\nDESCRIPTION: REST endpoints for team management including creating teams, adding/removing users, and retrieving team information.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_8\n\nLANGUAGE: REST\nCODE:\n```\nPOST /teams/{team_gid}/addUser\nPOST /teams\nGET /teams/{team_gid}\nGET /users/{user_gid}/teams\nGET /workspaces/{workspace_gid}/teams\nPOST /teams/{team_gid}/removeUser\nPUT /teams/{team_gid}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for Asana Integration\nDESCRIPTION: JSON configuration for setting up the Asana MCP server in Claude Desktop. Includes server configuration and environment variables for authentication.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"asana\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@roychri/mcp-server-asana\"],\n      \"env\": {\n        \"ASANA_ACCESS_TOKEN\": \"your-asana-access-token\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Pagination Disabled API Call\nDESCRIPTION: This bash output shows the raw API response when pagination is disabled, including a single task in the data array and pagination metadata in the next_page object with offset, path, and URI for the next page.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nAPI called successfully. Returned data: {\n  \"data\": [\n    {\n      \"gid\": \"<TASK_GID>\",\n      \"name\": \"Task 1\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n  ],\n  \"next_page\": {\n    \"offset\": \"gjJl2xAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJib3JkZXJfcmHilbI6IltcIlZ5IixcIjlaWlhVMkkzUUdOoXcEIsMTIwNDYxNTc0NTypNDI3MF0iLCJpYXQiOjE2OTc4MjgsSkjjQsImV4cCI6MTY5NzgyOTM2NH0.5VuMfKvqexoEsKfoPFtayWBNWiKvfR7_hN6MJaaIkx8\",\n    \"path\": \"/tasks?project=123456&limit=1&offset=gjJl2xAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJib3JkZXJfcmHilbI6IltcIlZ5IixcIjlaWlhVMkkzUUdOoXcEIsMTIwNDYxNTc0NTypNDI3MF0iLCJpYXQiOjE2OTc4MjgsSkjjQsImV4cCI6MTY5NzgyOTM2NH0.5VuMfKvqexoEsKfoPFtayWBNWiKvfR7_hN6MJaaIkx8\",\n    \"uri\": \"https://app.asana.com/api/1.0/tasks?project=123456&limit=1&offset=gjJl2xAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJib3JkZXJfcmHilbI6IltcIlZ5IixcIjlaWlhVMkkzUUdOoXcEIsMTIwNDYxNTc0NTypNDI3MF0iLCJpYXQiOjE2OTc4MjgsSkjjQsImV4cCI6MTY5NzgyOTM2NH0.5VuMfKvqexoEsKfoPFtayWBNWiKvfR7_hN6MJaaIkx8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Paginated Task Results in Asana\nDESCRIPTION: This bash output shows the results of the paginated task retrieval. It displays a JSON array containing multiple task objects, each with a unique GID, name, resource_type and resource_subtype.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nTasks: [\n    {\n      \"gid\": \"123\",\n      \"name\": \"task 1\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"456\",\n      \"name\": \"task 2\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"789\",\n      \"name\": \"task 3\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"101112\",\n      \"name\": \"task 4\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"131415\",\n      \"name\": \"task 5\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"161718\",\n      \"name\": \"task 6\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"192021\",\n      \"name\": \"task 7\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"222324\",\n      \"name\": \"task 8\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"252627\",\n      \"name\": \"task 9\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"282930\",\n      \"name\": \"task 10\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n    {\n      \"gid\": \"313233\",\n      \"name\": \"task 11\",\n      \"resource_type\": \"task\",\n      \"resource_subtype\": \"default_task\"\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Page-by-Page Task Processing\nDESCRIPTION: This bash output shows the results of processing paginated tasks page by page. Each page contains 5 task names, demonstrating how tasks are grouped into pages based on the limit parameter.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nPage 1:\n    task 1\n    task 2\n    task 3\n    task 4\n    task 5\nPage 2:\n    task 6\n    task 7\n    task 8\n    task 9\n    task 10\nPage 3:\n    task 11\n    task 12\n    task 13\n    task 14\n    task 15\n```\n\n----------------------------------------\n\nTITLE: Running MCP Inspector Locally\nDESCRIPTION: Bash commands for running the MCP Inspector locally for testing and development. Includes options for specifying custom ports.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run inspector\n```\n\nLANGUAGE: bash\nCODE:\n```\nCLIENT_PORT=5009 SERVER_PORT=3009 npm run inspector\n```\n\n----------------------------------------\n\nTITLE: Displaying API Endpoint Documentation Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table structure for documenting API endpoints. It includes columns for Class, Method, HTTP request, and Description.\nSOURCE: https://github.com/roychri/mcp-server-asana/blob/main/Asana-v3.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation for API Endpoints\n\nAll URIs are relative to *https://app.asana.com/api/1.0*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*Asana.AllocationsApi* | [**createAllocation**](docs/AllocationsApi.md#createAllocation) | **POST** /allocations | Create an allocation\n*Asana.AllocationsApi* | [**deleteAllocation**](docs/AllocationsApi.md#deleteAllocation) | **DELETE** /allocations/{allocation_gid} | Delete an allocation\n*Asana.AllocationsApi* | [**getAllocation**](docs/AllocationsApi.md#getAllocation) | **GET** /allocations/{allocation_gid} | Get an allocation\n*Asana.AllocationsApi* | [**getAllocations**](docs/AllocationsApi.md#getAllocations) | **GET** /allocations | Get multiple allocations\n*Asana.AllocationsApi* | [**updateAllocation**](docs/AllocationsApi.md#updateAllocation) | **PUT** /allocations/{allocation_gid} | Update an allocation\n```"
  }
]