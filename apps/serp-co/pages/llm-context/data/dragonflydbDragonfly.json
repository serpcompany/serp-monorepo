[
  {
    "owner": "dragonflydb",
    "repo": "dragonfly",
    "content": "TITLE: Basic Redis CLI Commands with DragonflyDB\nDESCRIPTION: Example Redis CLI commands demonstrating basic key-value operations with DragonflyDB.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/quick-start/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli\n127.0.0.1:6379> set hello world\nOK\n127.0.0.1:6379> keys *\n1) \"hello\"\n127.0.0.1:6379> get hello\n\"world\"\n127.0.0.1:6379>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Blocking Operations in Fiber Context with C++\nDESCRIPTION: This snippet demonstrates how traditional blocking operations like write() and pthread_mutex_lock() can block an entire thread, preventing fiber preemption. It illustrates why fiber-friendly primitives are necessary in Dragonfly's architecture.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/df-share-nothing.md#2025-04-17_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n...\nwrite(fd, buf, 1000000);\n\n...\npthread_mutex_lock(...);\n\n```\n\n----------------------------------------\n\nTITLE: Building DragonflyDB\nDESCRIPTION: Commands to configure and build DragonflyDB from source.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Configure the build\n./helio/blaze.sh -release\n\n# Build\ncd build-opt && ninja dragonfly\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian/Ubuntu\nDESCRIPTION: Commands to install required system packages for building DragonflyDB on Debian-based systems.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ninja-build libunwind-dev libboost-context-dev libssl-dev \\\n     autoconf-archive libtool cmake g++ bison  zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Transaction Flow Sequence Diagram in Mermaid\nDESCRIPTION: Shows the message flow between a coordinator and data shards during a transaction. The diagram illustrates the scheduling hop followed by multiple execution hops, demonstrating how the coordinator communicates asynchronously with shards while maintaining transaction integrity.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/transaction.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {'theme':'base'}}%%\nsequenceDiagram\n    participant C as Coordinator\n    participant S1 as Data Shard 1\n    participant S2 as Data Shard 2\n\n    par hop1\n    C->>+S1: Schedule\n    and\n    C->>+S2: Schedule\n    S1--)C: Ack\n    S2--)C: Ack\n    end\n\n    par hop2\n    C->>S1: Exec1\n    and\n    C->>S2: Exec1\n    S1--)C: Ack\n    S2--)C: Ack\n    end\n    par hop N+1\n    C->>S1: Exec N+Fin\n    and\n    C->>S2: Exec N+Fin\n    S1--)-C: Ack\n    S2--)-C: Ack\n    end\n```\n\n----------------------------------------\n\nTITLE: Cloning DragonflyDB Repository\nDESCRIPTION: Command to clone the DragonflyDB repository with its submodules.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/dragonflydb/dragonfly && cd dragonfly\n```\n\n----------------------------------------\n\nTITLE: Conservative OnWriteHook in C++\nDESCRIPTION: Handles concurrent writes during snapshotting, maintaining point-in-time semantics by sending the old value before updating.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/rdbsave.md#2025-04-17_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n....\nif (entry.version <= cut.version) {\n  SendToSerializationSink(entry);\n}\n...\nentry = new_entry;\nentry.version = shard.epoch++;  // guaranteed to become > cut.version\n```\n\n----------------------------------------\n\nTITLE: Running DragonflyDB Server\nDESCRIPTION: Command to start the DragonflyDB server with logging enabled.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run\n./dragonfly --alsologtostderr\n```\n\n----------------------------------------\n\nTITLE: Starting Dragonfly with Common Configuration Options\nDESCRIPTION: A bash command example for starting Dragonfly with popular configuration options including password protection, cache mode, database settings, memory limits, and persistence configuration.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./dragonfly-x86_64 --logtostderr --requirepass=youshallnotpass --cache_mode=true -dbnum 1 --bind localhost --port 6379 --maxmemory=12gb --keys_output_limit=12288 --dbfilename dump.rdb\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Seeder for Balanced Operation Mix in Python\nDESCRIPTION: The dynamic Seeder issues a complex mix of commands, supporting key deletion and modification. It maintains a target number of keys and can generate balanced loads of various operations.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/dragonfly/seeder/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Configure how many keys we want\ns = Seeder(key_target=10_000)\n\n# Fill instance with keys until it's 10k +- 1%\n# Will create many new keys with data and reach equilibrium\nawait s.run(client, target_deviation=0.01)\nassert abs(client.dbsize() - 10_000) <= 100\n\n# Run 5k operations, balanced mix of create/delete/modify\nawait s.run(client, target_ops=5000)\n\n# Now we want only 500 keys, issue many deletes\ns.change_key_target(500)\nawait s.run(client, target_deviation=0.01)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora\nDESCRIPTION: Commands to install required system packages for building DragonflyDB on Fedora systems.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y automake boost-devel g++ git cmake libtool ninja-build \\\n     openssl-devel libunwind-devel autoconf-archive patch bison libstdc++-static\n```\n\n----------------------------------------\n\nTITLE: Working with Continuous Load Generation in Python\nDESCRIPTION: Demonstrates how to run a seeder in the background as a task while performing other operations. The seeder continues to generate a balanced mix of operations until explicitly stopped.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/dragonfly/seeder/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Fill instance with keys\ns = Seeder()\nawait seeder.run(client, target_deviation=0.01)\n\n# Start seeder without target\n# Because the instance reached its key target, the seeder\n# will issue a balanced mix of modifications/additions/deletions\nseeding_task = asyncio.create_task(s.run(client))\n\n# Do operations under fuzzy load\nsave(client)\n\nawait s.stop(client) # request stop, no immediate effect\nawait seeding_task # wait for actual stop and cleanup\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on openSUSE\nDESCRIPTION: Commands to install required system packages for building DragonflyDB on openSUSE systems.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install automake boost-devel gcc-c++ git cmake libtool ninja \\\n     openssl-devel libunwind-devel autoconf-archive patch bison \\\n     libboost_context-devel libboost_system-devel\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BLPOP Blocking Example 1 in Redis\nDESCRIPTION: This example shows a scenario where a client blocks with BLPOP on keys X and Y, followed by another client pushing to X and a third client checking existence of both keys.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/transaction.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nclient1: blpop X, Y  // blocks\nclient2: lpush X A\nclient3: exist X Y\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading and Launching Dragonfly DB with Docker Compose\nDESCRIPTION: This snippet shows how to download the official Dragonfly DB Docker Compose file, launch the instance, and verify its status. It also demonstrates how to follow the container logs.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/contrib/docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download Official Dragonfly DB Docker Compose File\nwget https://raw.githubusercontent.com/dragonflydb/dragonfly/main/contrib/docker/docker-compose.yml\n\n# Launch the Dragonfly DB Instance\ndocker-compose up -d\n\n# Confirm image is up\ndocker ps | grep dragonfly\n# ac94b5ba30a0   docker.dragonflydb.io/dragonflydb/dragonfly   \"entrypoint.sh dragoâ€¦\"   45 seconds ago   Up 31 seconds         0.0.0.0:6379->6379/tcp, :::6379->6379/tcp   docker_dragonfly_1\n\n# Log follow the dragonfly container\ndocker logs -f docker_dragonfly_1\n```\n\n----------------------------------------\n\nTITLE: Connecting to Dragonfly DB with Redis CLI\nDESCRIPTION: This snippet demonstrates how to connect to the Dragonfly DB instance using the Redis CLI. It shows basic Redis commands for setting and retrieving key-value pairs.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/contrib/docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli\n127.0.0.1:6379> set hello world\nOK\n127.0.0.1:6379> keys *\n1) \"hello\"\n127.0.0.1:6379> get hello\n\"world\"\n127.0.0.1:6379>\n```\n\n----------------------------------------\n\nTITLE: Using Static DebugPopulateSeeder in Python\nDESCRIPTION: The DebugPopulateSeeder is a wrapper around the DEBUG POPULATE command with some fuzziness for collection sizes. It's used for generating static data for snapshotting, memory consumption tests, and similar scenarios.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/dragonfly/seeder/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ns = DebugPopulateSeeder(key_target=10_000)\nawait s.run(client) # Creates around 10k keys\n```\n\n----------------------------------------\n\nTITLE: Basic Redis CLI Usage\nDESCRIPTION: Example commands showing basic Redis CLI interaction with DragonflyDB.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli\n127.0.0.1:6379> set hello world\nOK\n127.0.0.1:6379> keys *\n1) \"hello\"\n127.0.0.1:6379> get hello\n\"world\"\n127.0.0.1:6379>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BLPOP Blocking Example 3 in Redis\nDESCRIPTION: This example shows a more complex scenario with multiple clients pushing to different keys while a client is blocking with BLPOP on multiple keys, testing the left-to-right priority rule.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/transaction.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\nclient1: BLPOP X Y Z\nclient2: RPUSH Z C\nclient3: RPUSH X A\nclient4: RPUSH X B; RPUSH Y B\n```\n```\n\n----------------------------------------\n\nTITLE: Running Memtier Benchmark for Dragonfly\nDESCRIPTION: Command to run the memtier_benchmark tool for performance testing Dragonfly. It sets various parameters like ratio, threads, connections, and data size.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/README.ko-KR.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmemtier_benchmark --ratio ... -t <threads> -c 30 -n 200000 --distinct-client-seed -d 256 \\\n     --expiry-range=...\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace User with ACL Command in Dragonfly\nDESCRIPTION: Example command showing how to create a user associated with a specific namespace using the ACL SETUSER command. The command creates/sets user 'user1' with password 'user_pass' and assigns it to 'namespace1' with full permissions.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/namespaces.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nACL SETUSER user1 NAMESPACE:namespace1 ON >user_pass +@all ~*\n```\n\n----------------------------------------\n\nTITLE: Checking Consistency Between Instances in Python\nDESCRIPTION: Uses SeederBase.capture() to calculate state hashes based on all data inside instances. This allows verification that two Dragonfly instances contain the same data by comparing their hashes.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/dragonfly/seeder/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Fill master with ~10k keys\ns = DebugPopulateSeeder(key_target=10_000)\nawait seeder.run(master)\n\n# \"Replicate\" or other operations\nreplicate(master, replica)\n\n# Ensure master and replica have same state hashes\nmaster_hashes, replica_hashes = await asyncio.gather(\n    DebugPopulateSeeder.capture(master), # note it's a static method\n    DebugPopulateSeeder.capture(replica)\n)\nassert master_hashes == replica_hashes\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands to build the Docker image and run a container with mounted DragonFly source code for package building.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tools/packaging/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t ubuntu-package .\ndocker run --rm -ti -v /path/to/dragonfly-repo:/mydocker-path ubuntu-package bash\n```\n\n----------------------------------------\n\nTITLE: Benchmarking DenseSet with memtier_benchmark\nDESCRIPTION: Command to benchmark DenseSet performance by adding multiple small records to sets. Used to compare memory usage between Dragonfly/DenseSet, Redis, and Dragonfly/RedisDict implementations.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/dense_set.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmemtier_benchmark -p 6379 --command \"sadd __key__ __data__\"   -n 10000000 --threads=1 -c 1 --command-key-pattern=R   --data-size=10     --key-prefix=\"key:\"  --hide-histogram --random-data --key-maximum=1 --randomize --pipeline 20\n```\n\n----------------------------------------\n\nTITLE: Running Memtier Benchmark for Redis and Dragonfly Comparison\nDESCRIPTION: Command to run the memtier_benchmark tool for comparing Redis and Dragonfly performance. It sets up 20 connections, runs for 100 seconds, uses 4 threads, and sets a data size of 256 bytes.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmemtier_benchmark  -c 20 --test-time 100 -t 4 -d 256 --distinct-client-seed\n```\n\n----------------------------------------\n\nTITLE: Installing Dragonfly from Pre-packaged OCI Using Helm\nDESCRIPTION: Example command to install Dragonfly from a pre-packaged OCI (Open Container Initiative) registry using Helm. The command sets a version variable and uses it to install or upgrade a Dragonfly deployment.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/contrib/charts/dragonfly/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVERSION=v1.12.1\nhelm upgrade --install dragonfly oci://ghcr.io/dragonflydb/dragonfly/helm/dragonfly --version $VERSION\n```\n\n----------------------------------------\n\nTITLE: Running DragonflyDB Docker Container on Linux\nDESCRIPTION: Docker command to run DragonflyDB container on Linux systems with host network mode and unlimited memory lock.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/quick-start/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=host --ulimit memlock=-1 docker.dragonflydb.io/dragonflydb/dragonfly\n```\n\n----------------------------------------\n\nTITLE: Running Memtier Benchmark with Pipeline Mode\nDESCRIPTION: Command to run the memtier_benchmark tool in pipeline mode, which allows Dragonfly to reach high throughput for SET and GET operations. It uses 30 connections, 200000 requests, and a data size of 256 bytes.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmemtier_benchmark --ratio ... -t <threads> -c 30 -n 200000 --distinct-client-seed -d 256 \\\n     --expiry-range=... --pipeline=30\n```\n\n----------------------------------------\n\nTITLE: Running DragonflyDB Docker Container on macOS\nDESCRIPTION: Docker command to run DragonflyDB container on macOS systems with port mapping and unlimited memory lock.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/quick-start/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6379:6379 --ulimit memlock=-1 docker.dragonflydb.io/dragonflydb/dragonfly\n```\n\n----------------------------------------\n\nTITLE: Accessing DragonFly Service URL - NodePort Configuration\nDESCRIPTION: Commands to obtain the service URL when using NodePort service type in Kubernetes. Exports the node port and IP address to access the service.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/contrib/charts/dragonfly/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"dragonfly.fullname\" . }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho http://$NODE_IP:$NODE_PORT\n```\n\n----------------------------------------\n\nTITLE: Accessing DragonFly Service URL - LoadBalancer Configuration\nDESCRIPTION: Commands to obtain the service URL when using LoadBalancer service type in Kubernetes. Exports the LoadBalancer IP address to access the service.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/contrib/charts/dragonfly/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"dragonfly.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\necho http://$SERVICE_IP:{{ .Values.service.port }}\n```\n\n----------------------------------------\n\nTITLE: Python Requirements File with Package Versions\nDESCRIPTION: A requirements.txt file listing Python package dependencies for the Dragonfly project. The file includes Redis client libraries, async utilities, data parsing libraries, and scientific computing tools, each with specific version constraints.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tools/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\naioredis==2.0.1\nasync_timeout==4.0.2\npytoml==0.1.21\nPyYAML==6.0\nrailroad==0.5.0\nredis==4.4.4\nrequests>=2.32.0\naiocsv==1.2.3\naiofiles==22.1.0\nnumpy==2.1.3\n```\n\n----------------------------------------\n\nTITLE: Accessing DragonFly Service URL - ClusterIP Configuration\nDESCRIPTION: Commands to set up port forwarding when using ClusterIP service type in Kubernetes. Enables local access to the DragonFly service via redis-cli.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/contrib/charts/dragonfly/templates/NOTES.txt#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"dragonfly.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\nexport CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\necho \"You can use redis-cli to connect against localhost:6379\"\nkubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 6379:$CONTAINER_PORT\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Dragonfly\nDESCRIPTION: Example command to run Dragonfly with various configuration options including password, cache mode, database number, binding, port, memory limit, and output limit.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/README.ko-KR.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./dragonfly-x86_64 --logtostderr --requirepass=youshallnotpass --cache_mode=true -dbnum 1 --bind localhost --port 6379  --maxmemory=12gb --keys_output_limit=12288 --dbfilename dump.rdb\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Custom Arguments in Bash\nDESCRIPTION: Example of running pytest with specific arguments to debug connection tests. This command runs tests in the dragonfly/connection_test.py file with logging output to stdout and verbose module logging.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npytest dragonfly/connection_test.py -s  --df logtostdout --df vmodule=dragonfly_connection=2 -k test_subscribe\n```\n\n----------------------------------------\n\nTITLE: Running memtier_benchmark for Expiry Efficiency Test in Bash\nDESCRIPTION: This command runs memtier_benchmark to test the expiry efficiency of Dragonfly vs Redis. It simulates a write-heavy workload with a 30-second expiry time for keys, using 256-byte values to reduce the impact of metadata savings in Dragonfly.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/dashtable.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmemtier_benchmark --ratio 1:0 -n 600000 --threads=2 -c 20 --distinct-client-seed \\\n   --key-prefix=\"key:\"  --hide-histogram --expiry-range=30-30 --key-maximum=100000000 -d 256\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Python 3 in Bash\nDESCRIPTION: Command to run tests with Python 3 explicitly when multiple Python versions are installed on the host system.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pytest -xv dragonfly\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks for Dragonfly DB in Bash\nDESCRIPTION: Commands to install necessary tools and enable pre-commit hooks for ensuring proper code formatting in contributions.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd dragonfly   # project root\n\n# Make sure you have 'pre-commit', 'clang-format' and black is installed\npip install pre-commit clang-format\npip install pre-commit black\n\n# IMPORTANT! Enable our pre-commit message hooks\n# This will ensure your commits match our formatting requirements\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running Selective Pytest Tests in Bash\nDESCRIPTION: Command to run tests selectively by filtering with a substring using the -k flag.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest -xv dragonfly -k <substring>\n```\n\n----------------------------------------\n\nTITLE: Signing Off Commits for Dragonfly DB in Bash\nDESCRIPTION: Git command to create a signed-off commit, which is required for all community submissions to Dragonfly DB.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -s -m '...'\n```\n\n----------------------------------------\n\nTITLE: Building Debug Version of Dragonfly DB in Bash\nDESCRIPTION: Commands to build a development/debug version of Dragonfly DB using the Helio build system and Ninja.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./helio/blaze.sh   # without '-release' flag. Creates build-dbg subfolder\ncd build-dbg && ninja dragonfly\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Integration Tests in Bash\nDESCRIPTION: Generic command to run a Docker container with host network access for integration testing.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=host [test-name]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Command to install the required dependencies for running the FakeRedis tests.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/fakeredis/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Sets with pytest\nDESCRIPTION: Command pattern for running a specific subset of tests from the test directory.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/fakeredis/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest -v test/{test-name}\n```\n\n----------------------------------------\n\nTITLE: Running Selective Node-Redis Tests in Bash\nDESCRIPTION: Command to run specific node-redis tests using regex pattern matching with the Mocha test framework.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=host node-redis-test npm run test -w ./packages/client -- --redis-version=2.8 -g <regex>\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Dragonfly DB in Bash\nDESCRIPTION: Commands to build and run a specific unit test for Dragonfly DB using Ninja.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Build a specific test\ncd build-dbg && ninja [test_name]\n# e.g cd build-dbg && ninja generic_family_test\n\n# Run\n./[test_name]\n# e.g ./generic_family_test\n```\n\n----------------------------------------\n\nTITLE: Running ioredis Tests with Docker Script in Bash\nDESCRIPTION: Command to run the ioredis integration tests using the provided shell script that handles test execution in Docker.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./integration/run_ioredis_on_docker.sh\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with pytest\nDESCRIPTION: Command to run all the available FakeRedis tests against Dragonfly with verbose output.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/fakeredis/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest -v\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Chart Golden Files for Dragonfly DB in Bash\nDESCRIPTION: Command to run Golang tests and update golden files for the Dragonfly Helm chart.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd contrib/charts/dragonfly\ngo test -v ./... -update\n```\n\n----------------------------------------\n\nTITLE: Running Jedis Test Container in Bash\nDESCRIPTION: Command to run the Jedis Java client integration tests in a Docker container with host network access.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=host jedis-test\n```\n\n----------------------------------------\n\nTITLE: Running All Pytest Tests in Bash\nDESCRIPTION: Command to run all pytest tests with verbose output and fail-fast mode.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest -xv dragonfly\n```\n\n----------------------------------------\n\nTITLE: Building Debian Package Script Usage\nDESCRIPTION: Command to execute the Debian package generation script. Takes an optional parameter specifying the binary path, defaulting to 'repo path/build-opt'.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tools/packaging/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/dragonfly/tools/packaging/generate_debian_package.sh [/path/to/dragonfly-binary-file]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BLPOP Blocking Example 2 in Redis\nDESCRIPTION: This example illustrates how BLPOP behaves when one client is blocking on multiple keys and other clients push values to those keys in different operations.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/transaction.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nclient1: BLPOP X Y Z\nclient2: RPUSH X A\nclient3: RPUSH X B;  RPUSH Y B\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies in Bash\nDESCRIPTION: Command to install all required Python dependencies for the tests from the requirements.txt file.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r dragonfly/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Freezing Python Dependencies in Bash\nDESCRIPTION: Command to update the requirements.txt file with all currently installed Python packages and their versions.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip3 freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on FreeBSD\nDESCRIPTION: Commands to install required system packages for building DragonflyDB on FreeBSD systems.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/build-from-source.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npkg install -y git bash cmake ninja libunwind boost-libs autoconf automake libtool gmake bison\n```\n\n----------------------------------------\n\nTITLE: Building Node-Redis Test Container in Bash\nDESCRIPTION: Command to build the Docker container for node-redis integration tests.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t node-redis-test -f ./node-redis.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Request Flow Sequence Diagram in PlantUML\nDESCRIPTION: A UML sequence diagram depicting the flow of a SET command in Dragonfly's architecture. It shows how a client request passes from the user to a connection fiber, then to the appropriate shard based on key hashing, and back through the same path for the response.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/df-share-nothing.md#2025-04-17_snippet_1\n\nLANGUAGE: uml\nCODE:\n```\n@startuml\n\nactor       User       as A1\nboundary    connection  as B1\nentity      \"Shard K\"   as E1\nA1 ->  B1 : SET KEY VAL\nB1 -> E1 : SET KEY VAL / k = HASH(KEY) % N\nE1 -> B1 : OK\nB1 -> A1 : Response\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: List of Python packages and their version requirements needed for the dragonfly project. Includes key dependencies like pytest, redis, aiohttp, and various testing utilities.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/dragonfly/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasync-timeout==4.0.3\nattrs==22.1.0\nDeprecated==1.2.13\niniconfig==1.1.1\npackaging==23.1\npluggy==1.0.0\npy==1.11.0\npyparsing==3.0.9\npytest==7.1.2\nredis==5.2.1\ntomli==2.0.1\nwrapt==1.14.1\npytest-asyncio==0.20.1\npytest-repeat==0.9.3\npymemcache==4.0.0\nmeta_memcache==2\nprometheus_client==0.17.0\naiohttp==3.10.2\nnumpy\npytest-json-report==1.5.0\npsutil==5.9.5\nboto3==1.28.55\nredis-om==0.3.3\npytest-emoji==0.2.0\npytest-icdiff==0.8\npytest-timeout==2.2.0\nasyncio==3.4.3\nfakeredis[json]==2.26.2\nhiredis==2.4.0\n```\n\n----------------------------------------\n\nTITLE: Building Jedis Test Container in Bash\nDESCRIPTION: Command to build the Docker container for Jedis Java client integration tests.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t jedis-test -f ./jedis.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Initializing Snapshot Epoch in C++\nDESCRIPTION: Sets the initial epoch for the SnapshotShard, establishing a cut-off point for serialization.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/rdbsave.md#2025-04-17_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nSnapshotShard.epoch = shard.epoch++;\n```\n\n----------------------------------------\n\nTITLE: Building and Running ioredis Tests with Docker Script in Bash\nDESCRIPTION: Command to build the Docker image and run ioredis integration tests, ensuring the latest version is used.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./integration/run_ioredis_on_docker.sh --build\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry for Python Dependencies\nDESCRIPTION: Command to create a Python 3.10 virtual environment using Poetry in the test directory.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/fakeredis/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry env use python3.10\n```\n\n----------------------------------------\n\nTITLE: Serialization Fiber Loop in C++\nDESCRIPTION: Iterates over the main dictionary, serializing entries that haven't been modified since the snapshot began.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/rdbsave.md#2025-04-17_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n for (entry : table) {\n    if (entry.version <= cut.epoch) {\n      entry.version = cut.epoch + 1;\n      SendToSerializationSink(entry);\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Running Node-Redis Test Container in Bash\nDESCRIPTION: Command to run the node-redis integration tests in a Docker container with host network access.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=host node-redis-test\n```\n\n----------------------------------------\n\nTITLE: Docker Environment Setup for Package Building\nDESCRIPTION: Dockerfile configuration for creating a Ubuntu-based build environment with necessary dependencies for Debian package generation.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tools/packaging/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:20.04\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt update -y && apt-get install -y gcc dpkg-dev gpg vim wget git moreutils debhelper\n```\n\n----------------------------------------\n\nTITLE: Relaxed OnWriteHook in C++\nDESCRIPTION: Handles concurrent writes for relaxed point-in-time snapshotting, sending new or incremental changes without storing old values.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/docs/rdbsave.md#2025-04-17_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nif (entry.version <= cut.version) {\n  SendToSerializationSink(new_entry);  // do not have to send the old value\n} else {\n  // Keep sending the changes.\n  SendToSerializationSink(IncrementalDiff(entry, new_entry));\n}\n\nentry = new_entry;\nentry.version = shard.epoch++;\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for Integration Tests in Bash\nDESCRIPTION: Generic command to build a Docker container for integration testing with a specified test name and Dockerfile.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t [test-name] -f [test-dockerfile-name] .\n```\n\n----------------------------------------\n\nTITLE: Generating Lexer and Parser in CMake\nDESCRIPTION: Generates lexer and parser files using flex and bison tools, and sets the current generation directory variable.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/search/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ngen_flex(lexer)\ngen_bison(parser)\n\ncur_gen_dir(gen_dir)\n```\n\n----------------------------------------\n\nTITLE: Pytest Test Skipping Decorator for Unsupported Commands\nDESCRIPTION: Decorator that marks tests to be skipped when run against Dragonfly due to unsupported functionality.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/fakeredis/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.unsupported_server_types(\"dragonfly\")\n```\n\n----------------------------------------\n\nTITLE: Building ioredis Test Container in Bash\nDESCRIPTION: Command to build the Docker container for ioredis integration tests.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t ioredis-test -f ./ioredis.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Setting RE-flex Executable Path in CMake\nDESCRIPTION: Sets the path to the RE-flex executable for later use in flex generation commands.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(REFLEX \"${THIRD_PARTY_LIB_DIR}/reflex/bin/reflex\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dragonfly Transaction Library in CMake\nDESCRIPTION: Sets up the Dragonfly transaction library with its components, including journal, serialization, and transaction management modules.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/server/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dfly_transaction db_slice.cc blocking_controller.cc\n            command_registry.cc  cluster_support.cc\n            journal/cmd_serializer.cc journal/tx_executor.cc namespaces.cc\n            common.cc journal/journal.cc journal/types.cc journal/journal_slice.cc\n            server_state.cc table.cc  transaction.cc tx_base.cc\n            serializer_commons.cc journal/serializer.cc journal/executor.cc journal/streamer.cc\n            ${TX_LINUX_SRCS} acl/acl_log.cc slowlog.cc channel_store.cc)\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment in Bash\nDESCRIPTION: Command to activate a Python virtual environment for test isolation.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource <virtual env name>/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining cur_gen_dir Function for Generated Files Directory\nDESCRIPTION: Defines a CMake function that creates and returns a directory path for generated files based on the relative path from the project source to the current source directory.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(cur_gen_dir out_dir)\n  file(RELATIVE_PATH _rel_folder \"${PROJECT_SOURCE_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n  set(_tmp_dir ${ROOT_GEN_DIR}/${_rel_folder})\n  set(${out_dir} ${_tmp_dir} PARENT_SCOPE)\n  file(MAKE_DIRECTORY ${_tmp_dir})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dragonfly Test Suite in CMake\nDESCRIPTION: Configures the test suite for Dragonfly, including test library setup and individual test definitions for various components of the database.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/server/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dfly_test_lib test_utils.cc)\ncxx_link(dfly_test_lib dragonfly_lib facade_test gtest_main_ext)\n\ncxx_test(dragonfly_test dfly_test_lib LABELS DFLY)\ncxx_test(multi_test dfly_test_lib LABELS DFLY)\ncxx_test(generic_family_test dfly_test_lib LABELS DFLY)\ncxx_test(hset_family_test dfly_test_lib LABELS DFLY)\ncxx_test(list_family_test dfly_test_lib LABELS DFLY)\ncxx_test(server_family_test dfly_test_lib LABELS DFLY)\ncxx_test(set_family_test dfly_test_lib LABELS DFLY)\ncxx_test(stream_family_test dfly_test_lib LABELS DFLY)\ncxx_test(string_family_test dfly_test_lib LABELS DFLY)\ncxx_test(bitops_family_test dfly_test_lib LABELS DFLY)\ncxx_test(rdb_test dfly_test_lib DATA testdata/empty.rdb testdata/redis6_small.rdb\n         testdata/redis6_stream.rdb testdata/hll.rdb testdata/redis7_small.rdb\n         testdata/redis_json.rdb testdata/RDB_TYPE_STREAM_LISTPACKS_2.rdb\n         testdata/RDB_TYPE_STREAM_LISTPACKS_3.rdb testdata/ignore_expiry.rdb LABELS DFLY)\ncxx_test(zset_family_test dfly_test_lib LABELS DFLY)\ncxx_test(geo_family_test dfly_test_lib LABELS DFLY)\ncxx_test(blocking_controller_test dfly_test_lib LABELS DFLY)\ncxx_test(json_family_test dfly_test_lib LABELS DFLY)\ncxx_test(journal/journal_test dfly_test_lib LABELS DFLY)\ncxx_test(hll_family_test dfly_test_lib LABELS DFLY)\ncxx_test(bloom_family_test dfly_test_lib LABELS DFLY)\ncxx_test(cluster/cluster_config_test dfly_test_lib LABELS DFLY)\ncxx_test(cluster/cluster_family_test dfly_test_lib LABELS DFLY)\ncxx_test(acl/acl_family_test dfly_test_lib LABELS DFLY)\ncxx_test(engine_shard_set_test dfly_test_lib LABELS DFLY)\ncxx_test(search/search_family_test dfly_test_lib LABELS DFLY)\ncxx_test(search/aggregator_test dfly_test_lib LABELS DFLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dragonfly Main Library in CMake\nDESCRIPTION: Defines the main Dragonfly library with its various components, including family implementations, HTTP API, and platform-specific modules.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/server/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dragonfly_lib bloom_family.cc\n            config_registry.cc conn_context.cc debugcmd.cc dflycmd.cc engine_shard.cc\n            engine_shard_set.cc error.cc family_utils.cc\n            generic_family.cc hset_family.cc http_api.cc json_family.cc\n            list_family.cc main_service.cc memory_cmd.cc rdb_load.cc rdb_save.cc replica.cc\n            protocol_client.cc\n            snapshot.cc script_mgr.cc server_family.cc\n            detail/compressor.cc\n            detail/decompress.cc\n            detail/save_stages_controller.cc\n            detail/snapshot_storage.cc\n            set_family.cc stream_family.cc string_family.cc\n            zset_family.cc geo_family.cc version.cc bitops_family.cc container_utils.cc\n            multi_command_squasher.cc hll_family.cc\n            ${DF_SEARCH_SRCS}\n            ${DF_LINUX_SRCS}\n            cluster/cluster_config.cc cluster/cluster_family.cc cluster/incoming_slot_migration.cc\n            cluster/outgoing_slot_migration.cc cluster/cluster_defs.cc cluster/cluster_utility.cc\n            acl/user.cc acl/user_registry.cc acl/acl_family.cc\n            acl/validator.cc)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: Adds the 'search' and 'json' subdirectories to the CMake build configuration.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(search)\nadd_subdirectory(json)\n```\n\n----------------------------------------\n\nTITLE: Defining DragonFly Core Library in CMake\nDESCRIPTION: Defines the 'dfly_core' library with its source files and links it with various dependencies.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dfly_core allocation_tracker.cc bloom.cc compact_object.cc dense_set.cc\n    dragonfly_core.cc extent_tree.cc\n    interpreter.cc glob_matcher.cc mi_memory_resource.cc qlist.cc sds_utils.cc\n    segment_allocator.cc score_map.cc small_string.cc sorted_map.cc task_queue.cc\n    tx_queue.cc string_set.cc string_map.cc top_keys.cc detail/bitpacking.cc)\n\ncxx_link(dfly_core base absl::flat_hash_map absl::str_format redis_lib TRDP::lua lua_modules\n    fibers2 ${SEARCH_LIB} jsonpath OpenSSL::Crypto TRDP::dconv TRDP::lz4)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dragonfly Executable and Core Library in CMake\nDESCRIPTION: Defines the main Dragonfly executable and its core library components. It includes conditional compilation flags for x86_64 architecture and sets up source file properties.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/server/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dragonfly dfly_main.cc version_monitor.cc)\ncxx_link(dragonfly base dragonfly_lib)\n\nif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"x86_64\" AND CMAKE_BUILD_TYPE STREQUAL \"Release\")\n  set_source_files_properties(dfly_main.cc PROPERTIES COMPILE_FLAGS \"-march=core2\")\nendif()\n\nset_property(SOURCE dfly_main.cc APPEND PROPERTY COMPILE_DEFINITIONS\n             SOURCE_PATH_FROM_BUILD_ENV=${CMAKE_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Executable in CMake\nDESCRIPTION: Creates and links the ok_backend executable with the facade library.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/facade/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(ok_backend ok_main.cc)\ncxx_link(ok_backend dfly_facade)\n```\n\n----------------------------------------\n\nTITLE: Configuring RE2 Library in CMake\nDESCRIPTION: Searches for the RE2 library and sets up build configurations based on its availability. If found, it sets the RE2_LIB variable; otherwise, it logs a message and sets RE2_LIB to an empty string.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(LIB_RE2 NAMES re2)\nif(LIB_RE2)\n  set(RE2_LIB ${LIB_RE2})\nelse()\n  message(STATUS \"re2 not found. Building without RE2 support.\")\n  set(RE2_LIB \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Test Library in CMake\nDESCRIPTION: Creates a separate Redis test library that includes dictionary and hash functions, which is linked against the main Redis library.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(redis_test_lib dict.c siphash.c)\ncxx_link(redis_test_lib redis_lib)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Header-Only Library Imports in CMake\nDESCRIPTION: Sets up interface imported libraries for header-only third-party libraries (jsoncons, croncpp, hnswlib, and fast_float) with their include directories.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(TRDP::jsoncons INTERFACE IMPORTED)\nadd_dependencies(TRDP::jsoncons jsoncons_project)\nset_target_properties(TRDP::jsoncons PROPERTIES\n                      INTERFACE_INCLUDE_DIRECTORIES \"${JSONCONS_INCLUDE_DIR}\")\n\nadd_library(TRDP::croncpp INTERFACE IMPORTED)\nadd_dependencies(TRDP::croncpp croncpp_project)\nset_target_properties(TRDP::croncpp PROPERTIES\n                      INTERFACE_INCLUDE_DIRECTORIES \"${CRONCPP_INCLUDE_DIR}\")\n\nadd_library(TRDP::hnswlib INTERFACE IMPORTED)\nadd_dependencies(TRDP::hnswlib hnswlib_project)\nset_target_properties(TRDP::hnswlib PROPERTIES\n                      INTERFACE_INCLUDE_DIRECTORIES \"${HNSWLIB_INCLUDE_DIR}\")\n\nadd_library(TRDP::fast_float INTERFACE IMPORTED)\nadd_dependencies(TRDP::fast_float fast_float_project)\nset_target_properties(TRDP::fast_float PROPERTIES\n                      INTERFACE_INCLUDE_DIRECTORIES \"${FAST_FLOAT_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Bench Executable in CMake\nDESCRIPTION: Defines the 'dash_bench' executable and links it with the 'dfly_core' and 'redis_test_lib' libraries.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dash_bench dash_bench.cc)\ncxx_link(dash_bench dfly_core redis_test_lib)\n```\n\n----------------------------------------\n\nTITLE: Defining Lua Modules Static Library in CMake\nDESCRIPTION: Creates a static library named 'lua_modules' with source files from cjson, cmsgpack, struct, and bit modules. This library is used to bundle various Lua extensions for the Dragonfly project.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/lua/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(lua_modules STATIC\n    cjson/fpconv.c cjson/strbuf.c cjson/lua_cjson.c\n    cmsgpack/lua_cmsgpack.c\n    struct/lua_struct.c\n    bit/bit.c\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling JSONPath Library in CMake\nDESCRIPTION: Defines the JSONPath library, specifying its source files including the generated lexer and parser. It also links the library with necessary dependencies.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/json/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(jsonpath lexer_impl.cc driver.cc path.cc\n            ${gen_dir}/jsonpath_lexer.cc ${gen_dir}/jsonpath_grammar.cc json_object.cc\n            detail/jsoncons_dfs.cc detail/flat_dfs.cc)\ntarget_link_libraries(jsonpath base absl::strings TRDP::reflex TRDP::jsoncons TRDP::flatbuffers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Facade Library Build in CMake\nDESCRIPTION: Creates the dfly_facade library with connection handling, parsing, and service interface components.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/facade/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(dfly_facade conn_context.cc dragonfly_listener.cc dragonfly_connection.cc facade.cc\n            memcache_parser.cc reply_builder.cc op_status.cc service_interface.cc\n            reply_capture.cc cmd_arg_parser.cc tls_helpers.cc)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Lua Modules in CMake\nDESCRIPTION: Configures compiler options for the 'lua_modules' target to suppress specific warnings. This ensures a clean build process by ignoring less critical warnings that might arise from the third-party Lua module code.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/lua/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(lua_modules PRIVATE\n    -Wno-sign-compare -Wno-misleading-indentation -Wno-implicit-fallthrough -Wno-undefined-inline\n    -Wno-stringop-overflow)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Module Paths and Build Options in Dragonfly\nDESCRIPTION: Configures CMake module paths and defines build options for the Dragonfly project, including whether to build shared libraries and enabling SSL support with OpenSSL dependency.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# We must define all the required variables from the root cmakefile, otherwise\n# they just disappear.\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/helio/cmake\" ${CMAKE_MODULE_PATH})\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\noption(DF_USE_SSL \"Provide support for SSL connections\" ON)\n\nfind_package(OpenSSL)\n\nSET(SANITIZERS OFF)\n```\n\n----------------------------------------\n\nTITLE: Linking Facade Library Dependencies in CMake\nDESCRIPTION: Links required dependencies for the dfly_facade library including parser, HTTP server, and third-party components.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/facade/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncxx_link(dfly_facade dfly_parser_lib http_server_lib fibers2\n         ${TLS_LIB} TRDP::mimalloc TRDP::dconv)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Libraries and Targets in CMake\nDESCRIPTION: Sets up test libraries and targets for various components including parser and reply builder tests.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/facade/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(facade_test facade_test.cc)\ncxx_link(facade_test dfly_facade gtest_main_ext)\n\ncxx_test(memcache_parser_test dfly_facade LABELS DFLY)\ncxx_test(redis_parser_test facade_test LABELS DFLY)\ncxx_test(reply_builder_test facade_test LABELS DFLY)\ncxx_test(cmd_arg_parser_test facade_test LABELS DFLY)\n```\n\n----------------------------------------\n\nTITLE: Setting Make Command Based on Operating System in CMake\nDESCRIPTION: Sets the appropriate make command based on the operating system, using 'gmake' for FreeBSD systems and 'make' for other systems.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"FreeBSD\")\n  set(DFLY_TOOLS_MAKE \"gmake\")\nelse()\n  set(DFLY_TOOLS_MAKE \"make\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Redis Library Components in CMake\nDESCRIPTION: Adds the main Redis library target with all its components such as CRC implementations, data structures, and utility functions. It links against the appropriate memory allocator dependency based on the earlier configuration.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(redis_lib crc16.c crc64.c crcspeed.c debug.c  intset.c geo.c \n            geohash.c geohash_helper.c t_zset.c\n            listpack.c lzf_c.c lzf_d.c sds.c\n            quicklist.c rax.c redis_aux.c t_stream.c \n            util.c ziplist.c hyperloglog.c ${ZMALLOC_SRC})\n\ncxx_link(redis_lib  ${ZMALLOC_DEPS})\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Support in CMake\nDESCRIPTION: Conditional SSL configuration for the facade library when DF_USE_SSL is enabled.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/facade/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (DF_USE_SSL)\n  set(TLS_LIB tls_lib)\n  target_compile_definitions(dfly_facade PRIVATE DFLY_USE_SSL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Memory Allocator Option in CMake\nDESCRIPTION: Sets up a CMake option to determine whether to use mimalloc for the zmalloc implementation layer. Based on this option, it configures the source files and dependencies accordingly.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\noption(REDIS_ZMALLOC_MI \"Implement zmalloc layer using mimalloc allocator\" ON)\n\nif (REDIS_ZMALLOC_MI)\n  set(ZMALLOC_SRC \"zmalloc_mi.c\")\n  set(ZMALLOC_DEPS \"TRDP::mimalloc\")\nelse()\n  set(ZMALLOC_SRC \"zmalloc.c\")\n  set(ZMALLOC_DEPS \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler-Specific Options for Redis Library\nDESCRIPTION: Sets compiler-specific options for the Redis library, specifically disabling the 'maybe-uninitialized' warning for GCC, and adding a preprocessor definition when using the mimalloc allocator.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  target_compile_options(redis_lib PRIVATE -Wno-maybe-uninitialized)\nendif()\n\nif (REDIS_ZMALLOC_MI)\n  target_compile_definitions(redis_lib PUBLIC USE_ZMALLOC_MI)\nendif()\n\nadd_subdirectory(lua)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Query Parser in CMake\nDESCRIPTION: Links the query_parser library with its required dependencies including base, Abseil strings, reflex, uni-algo, hnswlib, and redis_lib.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/search/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(query_parser base absl::strings TRDP::reflex TRDP::uni-algo TRDP::hnswlib redis_lib)\n```\n\n----------------------------------------\n\nTITLE: Linking Lua Library to Lua Modules in CMake\nDESCRIPTION: Links the 'lua_modules' target with the Lua library. This ensures that the Lua modules have access to the core Lua functionality provided by the TRDP::lua target.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/lua/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(lua_modules TRDP::lua)\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parser Library in CMake\nDESCRIPTION: Creates the query_parser library by specifying its source files including generated lexer and parser files.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/search/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(query_parser base.cc ast_expr.cc query_driver.cc search.cc indices.cc\n            sort_indices.cc vector_utils.cc compressed_sorted_set.cc block_list.cc\n            synonyms.cc ${gen_dir}/parser.cc ${gen_dir}/lexer.cc)\n```\n\n----------------------------------------\n\nTITLE: Generating Lexer and Parser for JSONPath in CMake\nDESCRIPTION: Generates the lexer and parser files for JSONPath using flex and bison. These generated files will be used in the library compilation.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/json/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ngen_flex(jsonpath_lexer)\ngen_bison(jsonpath_grammar)\n\ncur_gen_dir(gen_dir)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific sed Command in CMake\nDESCRIPTION: Sets the appropriate sed replacement command based on the operating system, handling the differences between macOS/FreeBSD and other platforms.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE OR ${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n  set(SED_REPL sed \"-i\" '')\nelse()\n  set(SED_REPL sed \"-i\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Targets in CMake\nDESCRIPTION: Sets up various test targets with their dependencies and DFLY label for the Dragonfly project test suite.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/search/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncxx_test(compressed_sorted_set_test query_parser LABELS DFLY)\ncxx_test(block_list_test query_parser LABELS DFLY)\ncxx_test(rax_tree_test redis_test_lib LABELS DFLY)\ncxx_test(search_parser_test query_parser LABELS DFLY)\ncxx_test(search_test redis_test_lib query_parser LABELS DFLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 Library in CMake\nDESCRIPTION: Searches for the PCRE2 library and sets up build configurations based on its availability. If found, it sets the PCRE2_LIB variable; otherwise, it logs a message and sets PCRE2_LIB to an empty string.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(LIB_PCRE2 NAMES pcre2-8)\nif(LIB_PCRE2)\n  set(PCRE2_LIB ${LIB_PCRE2})\nelse()\n  message(STATUS \"pcre2-8 not found. Building without PCRE2 support.\")\n  set(PCRE2_LIB \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Library Build in CMake\nDESCRIPTION: Defines and links the dfly_parser_lib library containing Redis parser components.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/facade/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(dfly_parser_lib redis_parser.cc resp_expr.cc )\ncxx_link(dfly_parser_lib base strings_lib)\n```\n\n----------------------------------------\n\nTITLE: Setting Up JSONPath Tests in CMake\nDESCRIPTION: Configures two unit tests for the JSONPath library: jsonpath_test and json_test. Both tests are labeled 'DFLY' and json_test includes an additional dependency.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/json/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_test(jsonpath_test jsonpath LABELS DFLY)\ncxx_test(json_test jsonpath TRDP::jsoncons LABELS DFLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Information and Adding Subdirectories in CMake\nDESCRIPTION: Configures a version.cc file from a template and adds subdirectories for different components of the Dragonfly project (redis, core, facade, server).\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# the output file resides in the build directory.\nconfigure_file(server/version.cc.in \"${CMAKE_CURRENT_SOURCE_DIR}/server/version.cc\" @ONLY)\n\nadd_subdirectory(redis)\nadd_subdirectory(core)\nadd_subdirectory(facade)\nadd_subdirectory(server)\n```\n\n----------------------------------------\n\nTITLE: Defining gen_flex Function for RE-flex Scanner Generation\nDESCRIPTION: Creates a CMake function for generating C++ lexer files from RE-flex scanner definition files, setting up the necessary custom commands and dependencies with Unicode support.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(gen_flex name)\n  GET_FILENAME_COMPONENT(_in ${name}.lex ABSOLUTE)\n  cur_gen_dir(gen_dir)\n\n  ADD_CUSTOM_COMMAND(\n           OUTPUT ${gen_dir}/${name}.cc ${gen_dir}/${name}.h\n           COMMAND mkdir -p ${gen_dir}\n\n           COMMAND ${REFLEX} -o ${gen_dir}/${name}.cc  --unicode --header-file=${gen_dir}/${name}.h\n                             --bison-complete  --bison-locations  ${_in}\n           DEPENDS ${_in} reflex_project\n           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n           COMMENT \"Generating lexer from ${name}.lex\" VERBATIM)\n\n  set_source_files_properties(${gen_dir}/${name}.h ${gen_dir}/${name}.cc\n                              PROPERTIES GENERATED TRUE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Root Directory for Generated Files in CMake\nDESCRIPTION: Sets up the root directory for generated files, creates it if it doesn't exist, and adds it to the include directories.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(ROOT_GEN_DIR ${CMAKE_SOURCE_DIR}/genfiles)\nfile(MAKE_DIRECTORY ${ROOT_GEN_DIR})\ninclude_directories(${ROOT_GEN_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: Adding double-conversion Library with Patches in CMake\nDESCRIPTION: Adds the double-conversion library as a third-party dependency with specific patches to fix compatibility issues, using the platform-specific sed command.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  dconv\n  URL https://github.com/google/double-conversion/archive/refs/tags/v3.3.0.tar.gz\n  PATCH_COMMAND ${SED_REPL} \"/static const std::ctype/d\"\n                <SOURCE_DIR>/double-conversion/string-to-double.cc\n  COMMAND ${SED_REPL} \"/std::use_facet</d\" <SOURCE_DIR>/double-conversion/string-to-double.cc\n  COMMAND ${SED_REPL} \"s/cType.tolower/std::tolower/g\" <SOURCE_DIR>/double-conversion/string-to-double.cc\n  LIB libdouble-conversion.a\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributors List\nDESCRIPTION: A markdown formatted list of contributors to the Dragonfly project, with links to their GitHub profiles and notable contributions specified for some members.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTORS.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributors (alphabetical by surname)\n\n* **[Amir Alperin](https://github.com/iko1)**\n* **[Philipp Born](https://github.com/tamcore)**\n  * Helm Chart\n* **[Meng Chen](https://github.com/matchyc)**\n* **[Yuxuan Chen](https://github.com/YuxuanChen98)**\n* **[Pawel Kaplinski](https://github.com/pawelKapl)**\n* **[Redha Lhimeur](https://github.com/redhal)**\n* **[Braydn Moore](https://github.com/braydnm)**\n* **[Logan Raarup](https://github.com/logandk)**\n* **[Ryan Russell](https://github.com/ryanrussell)**\n  * Docs & Code Readability\n* **[Ali-Akber Saifee](https://github.com/alisaifee)**\n* **[Elle Y](https://github.com/inohime)**\n* **[ATM SALEH](https://github.com/ATM-SALEH)**\n* **[Shohei Shiraki](https://github.com/highpon)**\n* **[Leonardo Mello](https://github.com/lsvmello)**\n* **[Nico Coetzee](https://github.com/nicc777)**\n```\n\n----------------------------------------\n\nTITLE: Adding jsoncons Library in CMake\nDESCRIPTION: Adds the jsoncons library as a third-party dependency with specific GitTag and custom CMake flags to disable tests and enable polymorphic allocator support.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  jsoncons\n  GIT_REPOSITORY https://github.com/dragonflydb/jsoncons\n  GIT_TAG Dragonfly.178\n  GIT_SHALLOW 1\n  CMAKE_PASS_FLAGS \"-DJSONCONS_BUILD_TESTS=OFF -DJSONCONS_HAS_POLYMORPHIC_ALLOCATOR=ON\"\n  LIB \"none\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding fast_float Parsing Library in CMake\nDESCRIPTION: Adds the fast_float library (a header-only library for fast parsing of floating-point numbers) as a third-party dependency.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  fast_float\n  URL https://github.com/fastfloat/fast_float/archive/refs/tags/v5.2.0.tar.gz\n  LIB \"none\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding LZ4 Compression Library in CMake\nDESCRIPTION: Adds the LZ4 compression library as a third-party dependency, building only the release static library and installing it to the appropriate directory.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  lz4\n  URL https://github.com/lz4/lz4/archive/refs/tags/v1.10.0.tar.gz\n\n  BUILD_IN_SOURCE 1\n  CONFIGURE_COMMAND echo skip\n  BUILD_COMMAND ${DFLY_TOOLS_MAKE} lib-release\n  INSTALL_COMMAND ${DFLY_TOOLS_MAKE} install BUILD_SHARED=no PREFIX=${THIRD_PARTY_LIB_DIR}/lz4\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Structure and Dependencies in Dragonfly\nDESCRIPTION: Sets up the project's directory structure by including required files and adding relevant subdirectories for the build process, establishing include paths for header files in the project.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(third_party)\ninclude(internal)\n\ninclude_directories(src)\ninclude_directories(helio)\n\nadd_subdirectory(helio)\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Configuring DragonFly Core Tests in CMake\nDESCRIPTION: Sets up multiple test executables for the DragonFly core library, linking them with necessary dependencies and specifying test labels.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_test(dfly_core_test dfly_core TRDP::fast_float ${PCRE2_LIB} ${RE2_LIB} LABELS DFLY)\ncxx_test(compact_object_test dfly_core LABELS DFLY)\ncxx_test(extent_tree_test dfly_core LABELS DFLY)\ncxx_test(dash_test dfly_core file redis_test_lib DATA testdata/ids.txt.zst LABELS DFLY)\ncxx_test(interpreter_test dfly_core LABELS DFLY)\n\ncxx_test(string_set_test dfly_core LABELS DFLY)\ncxx_test(string_map_test dfly_core LABELS DFLY)\ncxx_test(sorted_map_test dfly_core redis_test_lib LABELS DFLY)\ncxx_test(bptree_set_test dfly_core LABELS DFLY)\ncxx_test(score_map_test dfly_core LABELS DFLY)\ncxx_test(flatbuffers_test dfly_core TRDP::flatbuffers LABELS DFLY)\ncxx_test(bloom_test dfly_core LABELS DFLY)\ncxx_test(allocation_tracker_test dfly_core absl::random_random LABELS DFLY)\ncxx_test(qlist_test dfly_core DATA testdata/list.txt.zst LABELS DFLY)\ncxx_test(zstd_test dfly_core TRDP::zstd LABELS DFLY)\ncxx_test(top_keys_test dfly_core LABELS DFLY)\n```\n\n----------------------------------------\n\nTITLE: Adding croncpp Library in CMake\nDESCRIPTION: Adds the croncpp library as a third-party dependency for handling cron expressions in C++, specifying it as a header-only library with 'LIB \"none\"'.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  croncpp\n  URL https://github.com/mariusbancila/croncpp/archive/refs/tags/v2023.03.30.tar.gz\n  LIB \"none\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RE-flex Scanner Generator in CMake\nDESCRIPTION: Adds the RE-flex scanner generator library as a third-party dependency, configuring it with appropriate compiler settings and disabling AVX2 instructions.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  reflex\n  URL https://github.com/Genivia/RE-flex/archive/refs/tags/v5.2.2.tar.gz\n  PATCH_COMMAND autoreconf -fi\n  CONFIGURE_COMMAND <SOURCE_DIR>/configure --disable-avx2 --prefix=${THIRD_PARTY_LIB_DIR}/reflex\n          CXX=${CMAKE_CXX_COMPILER} CC=${CMAKE_C_COMPILER}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding uni-algo Unicode Algorithm Library in CMake\nDESCRIPTION: Adds the uni-algo Unicode algorithm library as a third-party dependency, specifying C++17 as the required C++ standard.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  uni-algo\n  URL https://github.com/uni-algo/uni-algo/archive/refs/tags/v1.0.0.tar.gz\n\n  CMAKE_PASS_FLAGS \"-DCMAKE_CXX_STANDARD:STRING=17\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining gen_bison Function for Bison Parser Generation\nDESCRIPTION: Creates a CMake function for generating C++ parser files from Bison grammar files, setting up the necessary custom commands and dependencies.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(gen_bison name)\n  GET_FILENAME_COMPONENT(_in ${name}.y ABSOLUTE)\n  cur_gen_dir(gen_dir)\n  # add_library(${lib_name} ${gen_dir}/${name}.cc)\n  set(full_path_cc ${gen_dir}/${name}.cc ${gen_dir}/${name}.hh)\n\n  ADD_CUSTOM_COMMAND(\n           OUTPUT ${full_path_cc}\n           COMMAND mkdir -p ${gen_dir}\n           COMMAND bison --language=c++ -o ${gen_dir}/${name}.cc ${name}.y -Wconflicts-sr\n           DEPENDS ${_in}\n           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n           COMMENT \"Generating parser from ${name}.y\" VERBATIM)\n set_source_files_properties(${name}.cc ${name}_base.h PROPERTIES GENERATED TRUE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding hnswlib Hierarchical Navigable Small World Library in CMake\nDESCRIPTION: Adds hnswlib (a header-only library for approximate nearest neighbor search) as a third-party dependency by copying its header files to the include directory.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  hnswlib\n  URL https://github.com/nmslib/hnswlib/archive/refs/tags/v0.7.0.tar.gz\n\n  BUILD_COMMAND echo SKIP\n  INSTALL_COMMAND cp -R <SOURCE_DIR>/hnswlib ${THIRD_PARTY_LIB_DIR}/hnswlib/include/\n  LIB \"none\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Lua as a Third-Party Dependency in CMake\nDESCRIPTION: Adds Lua as a third-party dependency by cloning from a specific repository, building it, and installing the necessary files to the appropriate directories.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  lua\n  GIT_REPOSITORY https://github.com/dragonflydb/lua\n  GIT_TAG Dragonfly-5.4.6a\n  CONFIGURE_COMMAND echo\n  BUILD_IN_SOURCE 1\n  BUILD_COMMAND ${DFLY_TOOLS_MAKE} all\n  INSTALL_COMMAND cp <SOURCE_DIR>/liblua.a ${THIRD_PARTY_LIB_DIR}/lua/lib/\n  COMMAND cp <SOURCE_DIR>/lualib.h <SOURCE_DIR>/lua.h <SOURCE_DIR>/lauxlib.h\n          <SOURCE_DIR>/luaconf.h ${THIRD_PARTY_LIB_DIR}/lua/include\n)\n```\n\n----------------------------------------\n\nTITLE: Adding FlatBuffers Serialization Library in CMake\nDESCRIPTION: Adds the FlatBuffers serialization library as a third-party dependency, disabling tests, libcxx with clang, and flatc compiler building to simplify the build process.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_third_party(\n  flatbuffers\n  URL https://github.com/google/flatbuffers/archive/refs/tags/v23.5.26.tar.gz\n  CMAKE_PASS_FLAGS \"-DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_LIBCXX_WITH_CLANG=OFF\n                    -DFLATBUFFERS_BUILD_FLATC=OFF\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 and RE2 Compile Definitions in CMake\nDESCRIPTION: Sets compile definitions for PCRE2 and RE2 support if the respective libraries are found.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/core/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(LIB_PCRE2)\n  target_compile_definitions(dfly_core_test PRIVATE USE_PCRE2=1)\n  # target_compile_definitions(dfly_core PUBLIC USE_PCRE2=1)\nendif()\n\nif(LIB_RE2)\n  target_compile_definitions(dfly_core_test PRIVATE USE_RE2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Third-Party Library Directory in CMake\nDESCRIPTION: Outputs the path to the third-party library directory for debugging and information purposes.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nMessage(STATUS \"THIRD_PARTY_LIB_DIR ${THIRD_PARTY_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler-Specific Flags in Dragonfly CMake\nDESCRIPTION: Checks for and disables specific compiler warnings that may cause false positives, and adds thread safety flags for Clang compiler to enhance code quality and prevent threading issues.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Disabled because it has false positives with ref-counted intrusive pointers.\nCHECK_CXX_COMPILER_FLAG(\"-Wuse-after-free\" HAS_USE_AFTER_FREE_WARN)\nif (HAS_USE_AFTER_FREE_WARN)\n    set(CMAKE_CXX_FLAGS \"-Wno-use-after-free ${CMAKE_CXX_FLAGS}\")\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    set(CMAKE_CXX_FLAGS \"-Wthread-safety ${CMAKE_CXX_FLAGS}\")\n    add_compile_options(-Werror=thread-safety)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Version Information in CMake\nDESCRIPTION: Sets up Git version information retrieval, which is conditionally enabled via the ENABLE_GIT_VERSION option. When enabled, it retrieves the Git commit SHA, detects changes, and creates version information.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/CMakeLists.txt#2025-04-17_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\noption(ENABLE_GIT_VERSION \"Build with Git metadata\" OFF)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/\" )\n\nif(ENABLE_GIT_VERSION)\n    include(GetGitRevisionDescription)\n    get_git_head_revision(GIT_REFSPEC GIT_SHA1)\n    git_local_changes(GIT_CLEAN_DIRTY)\n    if(\"${GIT_CLEAN_DIRTY}\" STREQUAL \"DIRTY\")\n        set(GIT_CLEAN_DIRTY \"-dirty\")\n        else()\n        set(GIT_CLEAN_DIRTY \"\")\n    endif()\n    Message(STATUS \"GIT_SHA1 ${GIT_SHA1}\")\n    git_describe(GIT_VER --always)\n    Message(STATUS \"GIT_VER ${GIT_VER}\")\n    string(TIMESTAMP PRJ_BUILD_TIME \"%Y-%m-%d %H:%M:%S\" UTC)\nelse(ENABLE_GIT_VERSION)\n    set(GIT_VER \"dev\")\n    set(GIT_SHA1 \"0000000\")\n    set(GIT_CLEAN_DIRTY \"-dev\")\n    set(PRJ_BUILD_TIME \"bigbang\")\nendif(ENABLE_GIT_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Linux-Specific Components in CMake for Dragonfly\nDESCRIPTION: Configures Linux-specific source files, executables, and tests for the Dragonfly project. This includes tiering-related components and benchmark tools.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/server/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    SET(TX_LINUX_SRCS tiering/disk_storage.cc tiering/op_manager.cc tiering/small_bins.cc\n      tiering/external_alloc.cc)\n\n    add_executable(dfly_bench dfly_bench.cc)\n    cxx_link(dfly_bench dfly_parser_lib fibers2 absl::random_random redis_lib)\n    cxx_test(tiering/disk_storage_test dfly_test_lib LABELS DFLY)\n    cxx_test(tiering/op_manager_test dfly_test_lib LABELS DFLY)\n    cxx_test(tiering/small_bins_test dfly_test_lib LABELS DFLY)\n    cxx_test(tiering/external_alloc_test dfly_test_lib LABELS DFLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Detecting Sanitizer Support in Dragonfly CMake\nDESCRIPTION: Checks if the current compiler supports Address Sanitizer (ASAN) and Undefined Behavior Sanitizer (USAN) by attempting to compile a simple program with the respective sanitizer flags.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# We can not use here CHECK_CXX_COMPILER_FLAG because systems that do not support sanitizers\n# fail during linking time.\nset(CMAKE_REQUIRED_FLAGS \"-fsanitize=address\")\ncheck_cxx_source_compiles(\"int main() { return 0; }\" SUPPORT_ASAN)\n\nset(CMAKE_REQUIRED_FLAGS \"-fsanitize=undefined\")\ncheck_cxx_source_compiles(\"int main() { return 0; }\" SUPPORT_USAN)\nset(CMAKE_REQUIRED_FLAGS \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizer Options in Dragonfly CMake\nDESCRIPTION: Provides options to enable Address and Undefined Behavior Sanitizers with appropriate compiler flags when building in debug mode, ensuring they are only enabled if the compiler supports them.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_ASAN \"Enable -fsanitize=address\" OFF)\nif (SUPPORT_ASAN AND WITH_ASAN)\n  message(STATUS \"address sanitizer enabled\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address\")\n  set(SANITIZERS ON)\nendif()\n\noption(WITH_USAN \"Enable -fsanitize=undefined\" OFF)\nif (SUPPORT_USAN AND WITH_USAN)\n  message(STATUS \"ub sanitizer enabled\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined\")\n  set(SANITIZERS ON)\nendif()\n\nif(SANITIZERS)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -rtlib=compiler-rt\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Lua Modules with luaL_newlib and lua_setglobal\nDESCRIPTION: This snippet shows the modern approach to registering Lua modules since version 5.2. It demonstrates using luaL_newlib to register a module followed by lua_setglobal to make it available globally, replacing the deprecated luaL_register function.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/src/redis/lua/README.md#2025-04-17_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nluaL_newlib(...) -- Register module\nlua_setglobal(...) -- Make module globally available\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic CMake Configuration for Dragonfly Project\nDESCRIPTION: Initializes CMake with minimum version requirement and defines basic project properties such as contact information, compiler standards, and enabling of test capabilities.\nSOURCE: https://github.com/dragonflydb/dragonfly/blob/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15 FATAL_ERROR)\nset(PROJECT_CONTACT romange@gmail.com)\n\ninclude(CheckCXXCompilerFlag)\n\nenable_testing()\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n\n# Set targets in folders\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nproject(DRAGONFLY C CXX)\nset(CMAKE_CXX_STANDARD 17)\n```"
  }
]