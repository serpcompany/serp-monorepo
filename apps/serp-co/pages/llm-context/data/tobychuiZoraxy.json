[
  {
    "owner": "tobychui",
    "repo": "zoraxy",
    "content": "TITLE: Running Zoraxy with Docker Run\nDESCRIPTION: This command runs a Zoraxy container with specified port mappings, volume mounts, and environment variables. It sets up the container with restart policies, configures port forwarding, and mounts necessary directories for configuration and plugins. It utilizes environment variables like FASTGEOIP to configure the Zoraxy instance.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/docker/README.md#_snippet_0\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run -d \\\n  --name zoraxy \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -p 8000:8000 \\\n  -v /path/to/zoraxy/config/:/opt/zoraxy/config/ \\\n  -v /path/to/zoraxy/plugin/:/opt/zoraxy/plugin/ \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /etc/localtime:/etc/localtime \\\n  -e FASTGEOIP=\"true\" \\\n  zoraxydocker/zoraxy:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoraxy with Docker Compose\nDESCRIPTION: This Docker Compose configuration defines a Zoraxy service with image, container name, restart policy, port mappings, volume mounts, and environment variables. It specifies how Zoraxy should be deployed and managed as part of a Docker Compose application, ensuring proper resource allocation and dependency management.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/docker/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  zoraxy:\n    image: zoraxydocker/zoraxy:latest\n    container_name: zoraxy\n    restart: unless-stopped\n    ports:\n      - 80:80\n      - 443:443\n      - 8000:8000\n    volumes:\n      - /path/to/zoraxy/config/:/opt/zoraxy/config/\n      - /path/to/zoraxy/plugin/:/opt/zoraxy/plugin/\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /etc/localtime:/etc/localtime\n    environment:\n      FASTGEOIP: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Proxy in Go\nDESCRIPTION: This code snippet creates a simple WebSocket proxy using the WebsocketProxy library. It takes a backend URL as a flag, parses it, and then creates a new proxy that listens on port 80, forwarding all WebSocket connections to the specified backend. Error handling is included for parsing the URL and starting the server.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/src/mod/websocketproxy/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/koding/websocketproxy\"\n)\n\nvar (\n\tflagBackend = flag.String(\"backend\", \"\", \"Backend URL for proxying\")\n)\n\nfunc main() {\n\tu, err := url.Parse(*flagBackend)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\terr = http.ListenAndServe(\":80\", websocketproxy.NewProxy(u))\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Zoraxy from Source (Go)\nDESCRIPTION: These commands are used to clone the Zoraxy repository, navigate to the source directory, manage Go dependencies, build the executable, and then run Zoraxy with a specified port.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tobychui/zoraxy\ncd ./zoraxy/src/\ngo mod tidy\ngo build\n\nsudo ./zoraxy -port=:8000\n```\n\n----------------------------------------\n\nTITLE: Running the WebSocket Proxy\nDESCRIPTION: This command shows how to run the Go program, proxy.go, with a specific backend WebSocket URL. The -backend flag specifies the URL where the proxy forwards the WebSocket connections.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/src/mod/websocketproxy/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngo run proxy.go -backend ws://example.com:3000\n```\n\n----------------------------------------\n\nTITLE: Running Zoraxy on Linux (Standalone Mode)\nDESCRIPTION: This command runs the Zoraxy executable with root privileges, specifying the port for the management web interface.  It's the basic command to start Zoraxy in standalone mode on a Linux system.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./zoraxy -port=:8000\n```\n\n----------------------------------------\n\nTITLE: New DNS Challenge Provider by Name in Go\nDESCRIPTION: This Go function `NewDNSChallengeProviderByName` is a factory function for creating DNS providers. It takes the provider's name as input and returns a `challenge.Provider` interface and an error. This method relies on environment variables for configuration, which the `GetDNSProviderByJsonConfig` is designed to replace.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/tools/dns_challenge_update/code-gen/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// NewDNSChallengeProviderByName Factory for DNS providers.\nfunc NewDNSChallengeProviderByName(name string) (challenge.Provider, error)\n```\n\n----------------------------------------\n\nTITLE: Get DNS Provider by JSON Config in Go\nDESCRIPTION: This Go function `GetDNSProviderByJsonConfig` retrieves a DNS provider based on the provided name and JSON configuration string. It takes the provider's name and a JSON string containing the configuration as input and returns a `challenge.Provider` interface and an error.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/tools/dns_challenge_update/code-gen/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc GetDNSProviderByJsonConfig(name string, js string)(challenge.Provider, error)\n```\n\nLANGUAGE: go\nCODE:\n```\n//For example\nprovidersdef.GetDNSProviderByJsonConfig(\"gandi\", \"{\\\"Username\\\":\\\"far\\\",\\\"Password\\\":\\\"boo\\\"}\")\n```\n\n----------------------------------------\n\nTITLE: Zoraxy with ZeroTier Auth Token\nDESCRIPTION: This command starts Zoraxy with a specified ZeroTier authentication token and port. This is required when Zoraxy is used as a Global Area Network Controller and cannot automatically grab the auth token.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./zoraxy -ztauth=\"your_zerotier_authtoken\" -ztport=9993\n```\n\n----------------------------------------\n\nTITLE: Update acmedns module using update.sh\nDESCRIPTION: This command executes the `update.sh` script, which automatically pulls lego, updates the `acmedns` module with new JSON files, and creates a function for automatically creating a provider based on the given provider's name and config JSON. The updated files are then written to the `acmedns` folder.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/tools/dns_challenge_update/code-gen/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./update.sh\n```\n\n----------------------------------------\n\nTITLE: Running Zoraxy with External Authentication\nDESCRIPTION: This command disables the built-in authentication for the Zoraxy management interface. This mode is used when Zoraxy is behind another proxy that handles authentication.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./zoraxy -noauth=true\n```\n\n----------------------------------------\n\nTITLE: Replace Lego version in go.mod for Windows 7\nDESCRIPTION: This `replace` directive in the `go.mod` file forces the use of lego version 4.15.0 instead of the default 4.16.1. This is necessary for building Zoraxy with NT6.1 (Windows 7) support.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/tools/dns_challenge_update/code-gen/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/go-acme/lego/v4 v4.16.1 => github.com/go-acme/lego/v4 v4.15.0\n```\n\n----------------------------------------\n\nTITLE: Build for Windows 7 using extract.go\nDESCRIPTION: This command executes the `extract.go` script with the \"win7\" parameter. This ensures the lego version used is compatible with Windows 7 (NT6.1). The generated acmedns modules need to be manually moved to the acmedns folder.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/tools/dns_challenge_update/code-gen/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./extract.go -- \\\"win7\\\"\n```\n\n----------------------------------------\n\nTITLE: Installing WebsocketProxy in Go\nDESCRIPTION: This command demonstrates how to install the WebsocketProxy library using the go get command. This allows you to import and use the library in your Go projects to create WebSocket proxies.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/src/mod/websocketproxy/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/koding/websocketproxy\n```\n\n----------------------------------------\n\nTITLE: Enable Web SSH Loopback Connection\nDESCRIPTION: This command allows web SSH connections to loopback addresses (127.0.0.1, localhost). It should only be used for testing and development purposes due to security implications.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./zoraxy -sshlb=true\n```\n\n----------------------------------------\n\nTITLE: robots.txt: Disallow All Crawlers\nDESCRIPTION: This snippet configures the robots.txt file to disallow all user agents from crawling the entire site. This is done by setting the 'User-agent' to '*' which matches all bots, and 'Disallow' to '/' which blocks access to the root directory and all subdirectories.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/src/web/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice Template for GNU FDL\nDESCRIPTION: This snippet provides a template for the copyright and license notices that should be included in a document using the GNU Free Documentation License.  It includes placeholders for the year and author's name, and specifies the terms of the license.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/docs/GNU Free Documentation License.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c)  YEAR  YOUR NAME.\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\nA copy of the license is included in the section entitled \"GNU\nFree Documentation License\".\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice Template with Invariant/Cover Texts\nDESCRIPTION: This snippet provides an alternative template for the copyright and license notices, which should be included in a document using the GNU Free Documentation License. It specifies that the document contains Invariant Sections and/or Cover Texts, and includes placeholders for their titles.\nSOURCE: https://github.com/tobychui/zoraxy/blob/main/docs/GNU Free Documentation License.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nwith the Invariant Sections being LIST THEIR TITLES, with the\nFront-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n```"
  }
]