[
  {
    "owner": "gradle",
    "repo": "gradle",
    "content": "TITLE: Creating and Configuring Cross-Project Dependencies in Gradle\nDESCRIPTION: This snippet demonstrates how to establish cross-project dependencies in a Gradle multi-project build. It uses the project path syntax to reference another project in the build graph.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/base/distribution/kotlin/custom/custom.txt#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation project(':other')\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Documentation Build Commands\nDESCRIPTION: Collection of Gradle commands for building and serving documentation, including options for quick development builds and full documentation generation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew stageDocs\n./gradlew stageDocs -PquickDocs\n./gradlew serveDocs -PquickDocs\n./gradlew :docs:userguide\n```\n\n----------------------------------------\n\nTITLE: Proper Declarative Task Configuration in Gradle\nDESCRIPTION: This example shows the correct approach to configuring a Gradle task with properly declared inputs and outputs using the appropriate annotations, enabling Gradle to track task dependencies and perform incremental builds.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory/groovy/src/stuff/hello.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nclass GoodTask extends DefaultTask {\n    @InputFile\n    File inputFile\n    \n    @OutputFile\n    File outputFile\n    \n    @TaskAction\n    void doSomething() {\n        outputFile.text = inputFile.text.toUpperCase()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Plugin Configuration in Gradle\nDESCRIPTION: This example demonstrates the proper declarative approach for plugin configuration in Gradle, where task properties are configured during the configuration phase, allowing Gradle to correctly build the task dependency graph.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory/groovy/src/stuff/hello.txt#2025-04-19_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nclass GoodPlugin implements Plugin<Project> {\n    void apply(Project project) {\n        project.tasks.create('good', GoodTask) {\n            inputFile = project.file(\"${project.projectDir}/input.txt\")\n            outputFile = project.file(\"${project.buildDir}/output.txt\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Gradle Module Metadata JSON Structure\nDESCRIPTION: Complete example of a Gradle module metadata file showing the structure for a library with API and runtime variants. Demonstrates dependency declarations, file listings, attributes, and version constraints.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/docs/design/gradle-module-metadata-latest-specification.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"formatVersion\": \"1.0\",\n    \"component\": {\n        \"group\": \"my.group\",\n        \"module\": \"mylib\",\n        \"version\": \"1.2\"\n    },\n    \"createdBy\": {\n        \"gradle\": {\n            \"version\": \"4.3\",\n            \"buildId\": \"abc123\"\n        }\n    },\n    \"variants\": [\n        {\n            \"name\": \"api\",\n            \"attributes\": {\n                \"org.gradle.usage\": \"java-api\",\n                \"org.gradle.category\": \"library\",\n                \"org.gradle.libraryelements\": \"jar\"\n            },\n            \"files\": [\n                { \n                    \"name\": \"mylib-api.jar\", \n                    \"url\": \"mylib-api-1.2.jar\",\n                    \"size\": \"1453\",\n                    \"sha1\": \"abc12345\",\n                    \"md5\": \"abc12345\"\n                }\n            ],\n            \"dependencies\": [\n                { \n                    \"group\": \"some.group\", \n                    \"module\": \"other-lib\", \n                    \"version\": { \"requires\": \"3.4\" },\n                    \"excludes\": [\n                        { \"group\": \"*\", \"module\": \"excluded-lib\" }\n                    ],\n                    \"attributes\": {\n                       \"buildType\": \"debug\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"runtime\",\n            \"attributes\": {\n                \"org.gradle.usage\": \"java-runtime\",\n                \"org.gradle.category\": \"library\",\n                \"org.gradle.libraryelements\": \"jar\"\n            },\n            \"files\": [\n                { \n                    \"name\": \"mylib.jar\", \n                    \"url\": \"mylib-1.2.jar\",\n                    \"size\": \"4561\",\n                    \"sha1\": \"abc12345\",\n                    \"md5\": \"abc12345\"\n                }\n            ],\n            \"dependencies\": [\n                { \n                    \"group\": \"some.group\", \n                    \"module\": \"other-lib\", \n                    \"version\": { \"requires\": \"[3.0, 4.0)\", \"prefers\": \"3.4\", \"rejects\": [\"3.4.1\"] } \n                }\n            ],\n            \"dependencyConstraints\": [\n                { \n                    \"group\": \"some.group\", \n                    \"module\": \"other-lib-2\", \n                    \"version\": { \"requires\": \"1.0\" } \n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Project with JUnit5 and Kotlin Test Implementation\nDESCRIPTION: This Kotlin DSL script configures a Gradle project with JUnit 5 test dependencies. It demonstrates how to add the Kotlin and Java plugins, set up the Kotlin JVM target compatibility, and properly configure test dependencies for JUnit 5 and Kotlin test implementation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixedReuse/kotlin/source/keep.txt#2025-04-19_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    kotlin(\"jvm\")\n    `java-library`\n}\n\nkotlin {\n    jvmToolchain(11)\n}\n\ndependencies {\n    testImplementation(\"org.junit.jupiter:junit-jupiter\")\n    testImplementation(kotlin(\"test\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Conventions for New Properties in Gradle Plugins\nDESCRIPTION: Illustrates the preferred way to set conventions for new properties in Gradle plugins. This approach keeps the underlying object \"dumb\" and allows for reuse in multiple contexts.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface NewThing {\n    Property<String> getSomeProperty()\n}\n\n// in plugin\nnewThing = objects.newInstance(NewThing.class)\nnewThing.convention(\"some-value\")\n```\n\n----------------------------------------\n\nTITLE: Running Targeted Tests on a Gradle Subproject\nDESCRIPTION: Demonstrates how to run tests for a specific subproject in the Gradle codebase. This command allows contributors to verify their changes by running focused tests rather than the entire test suite.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :<subproject>:quickTest\n```\n\n----------------------------------------\n\nTITLE: Gradle Runtime Transformation Process Flowchart\nDESCRIPTION: A flowchart illustrating the Gradle runtime transformation process for plugins, TestKit, and buildscript classes. It shows how different components are transformed and instrumented during a Gradle build.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    distribution(Gradle distribution) --> invocation{{Gradle invocation}}\n   \n    invocation -.-> originalTestKit(TestKit classpath)\n    originalTestKit --> testKitTransform{{\"Intrumentation and upgrades\\n(Artifact transform)\"}}\n    testKitTransform --> instrumentedTestKit(TestKit classpath*)\n    instrumentedTestKit --> buildscriptClasspath(Buildscript runtime classpath)\n   \n    invocation --> originalPluginsClasspath(Plugins classpath)\n    originalPluginsClasspath --> pluginsClasspathTransform{{\"Intrumentation and upgrades\\n(Artifact transform)\"}}\n    pluginsClasspathTransform --> instrumentedPluginsClasspath(Plugins classpath*)\n    instrumentedPluginsClasspath --> buildscriptClasspath\n    \n    invocation --> originalBuildscriptSource(Buildscript source)\n    originalBuildscriptSource --> buildscriptCompilation{{\"Compilation and instrumentation\\n(Execution engine)\"}}\n    buildscriptCompilation --> buildscriptClasses(Buildscript classes*)\n    buildscriptClasses --> buildscriptClasspath\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Extension for Customization\nDESCRIPTION: This example shows how to provide a plugin extension to allow users to customize plugin behavior declaratively in their build script, following Gradle best practices for extensibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory/groovy/src/stuff/hello.txt#2025-04-19_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nclass MyPluginExtension {\n    String inputFileName = 'input.txt'\n    String outputFileName = 'output.txt'\n}\n\nclass BetterPlugin implements Plugin<Project> {\n    void apply(Project project) {\n        def extension = project.extensions.create('myPlugin', MyPluginExtension)\n        \n        project.tasks.create('better', GoodTask) {\n            // These are evaluated during configuration\n            inputFile = project.file { \"${project.projectDir}/${extension.inputFileName}\" }\n            outputFile = project.file { \"${project.buildDir}/${extension.outputFileName}\" }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Gradle Task in Groovy\nDESCRIPTION: Defines a simple Gradle task named 'hello' that prints 'Hello World!' to the console when executed. This task uses the doLast block to define the action that will be performed when the task runs.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/customModel/languageType/groovy/src/docs/userguide/chapter1.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntask hello {\n    doLast {\n        println 'Hello World!'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Dependency in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyHandler that adds a dependency to the 'api' configuration with a simple notation parameter.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'api' configuration.\n *\n * @param dependencyNotation notation for the dependency to be added.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\nfun DependencyHandler.`api`(dependencyNotation: Any): Dependency? =\n    add(\"api\", dependencyNotation)\n```\n\n----------------------------------------\n\nTITLE: Preferred Implementation of New Classes with Lazy Properties in Gradle\nDESCRIPTION: Demonstrates the recommended way to implement new classes with lazy properties in Gradle. This approach uses managed properties with implementation generated by Gradle at runtime.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface NewThing {\n    Property<String> getSomeProperty()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Module Metadata with Variants and Dependencies\nDESCRIPTION: Example JSON configuration showing a complete Gradle module metadata file with API and runtime variants. Includes file specifications with checksums, dependency declarations with version constraints, and dependency exclusions.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/docs/design/gradle-module-metadata-1.0-specification.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"formatVersion\": \"1.0\",\n    \"component\": {\n        \"group\": \"my.group\",\n        \"module\": \"mylib\",\n        \"version\": \"1.2\"\n    },\n    \"createdBy\": {\n        \"gradle\": {\n            \"version\": \"4.3\",\n            \"buildId\": \"abc123\"\n        }\n    },\n    \"variants\": [\n        {\n            \"name\": \"api\",\n            \"attributes\": {\n                \"org.gradle.usage\": \"java-api\",\n                \"org.gradle.category\": \"library\",\n                \"org.gradle.libraryelements\": \"jar\"\n            },\n            \"files\": [\n                { \n                    \"name\": \"mylib-api.jar\", \n                    \"url\": \"mylib-api-1.2.jar\",\n                    \"size\": \"1453\",\n                    \"sha1\": \"abc12345\",\n                    \"md5\": \"abc12345\"\n                }\n            ],\n            \"dependencies\": [\n                { \n                    \"group\": \"some.group\", \n                    \"module\": \"other-lib\", \n                    \"version\": { \"requires\": \"3.4\" },\n                    \"excludes\": [\n                        { \"group\": \"*\", \"module\": \"excluded-lib\" }\n                    ],\n                    \"attributes\": {\n                       \"buildType\": \"debug\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"runtime\",\n            \"attributes\": {\n                \"org.gradle.usage\": \"java-runtime\",\n                \"org.gradle.category\": \"library\",\n                \"org.gradle.libraryelements\": \"jar\"\n            },\n            \"files\": [\n                { \n                    \"name\": \"mylib.jar\", \n                    \"url\": \"mylib-1.2.jar\",\n                    \"size\": \"4561\",\n                    \"sha1\": \"abc12345\",\n                    \"md5\": \"abc12345\"\n                }\n            ],\n            \"dependencies\": [\n                { \n                    \"group\": \"some.group\", \n                    \"module\": \"other-lib\", \n                    \"version\": { \"requires\": \"[3.0, 4.0)\", \"prefers\": \"3.4\", \"rejects\": [\"3.4.1\"] } \n                }\n            ],\n            \"dependencyConstraints\": [\n                { \n                    \"group\": \"some.group\", \n                    \"module\": \"other-lib-2\", \n                    \"version\": { \"requires\": \"1.0\" } \n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Enterprise Plugin in settings.gradle.kts\nDESCRIPTION: This code demonstrates how to configure the Gradle Enterprise plugin in a settings.gradle.kts file. It includes setting the server URL, allowing insecure protocols, and configuring build cache settings.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/api/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"com.gradle.enterprise\") version \"3.7\"\n}\n\ngradleEnterprise {\n    server = \"https://ge.example.com\"\n    allowUntrustedServer = true\n    \n    buildScan {\n        termsOfUseUrl = \"https://ge.example.com/terms-of-service\"\n        termsOfUseAgree = \"yes\"\n        publishAlways()\n        \n        // Add custom values\n        value(\"Git Branch\", grgit.branch.current().name)\n        value(\"Git Commit\", grgit.head().abbreviatedId)\n        \n        // Upload build scans even for local builds\n        publishAlwaysIf(System.getenv(\"CI\") == null)\n    }\n    \n    buildCache {\n        local {\n            enabled = true\n        }\n        remote(HttpBuildCache) {\n            url = \"https://ge.example.com/cache/\"\n            enabled = true\n            push = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenApi Specification Generation in Gradle\nDESCRIPTION: This code demonstrates how to configure the OpenApi specification generation in a Gradle project. It includes setting up project dependencies, applying plugins, and configuring the schema generation task with various options.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.openapi.generator'\n}\n\ndependencies {\n    implementation \"io.swagger.parser.v3:swagger-parser:2.0.22\"\n    implementation \"io.swagger.core.v3:swagger-core:2.1.6\"\n}\n\nopenApiGenerate {\n    generatorName = \"java\"\n    inputSpec = \"$rootDir/src/openapi/spec.yaml\"\n    outputDir = \"$buildDir/generated\"\n    apiPackage = \"org.example.api\"\n    modelPackage = \"org.example.model\"\n    configOptions = [\n        dateLibrary: \"java8\",\n        generateApiTests: \"false\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable API Dependency with String Notation in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyHandler that adds a dependency to the 'api' configuration with a string notation and a configuration action.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'api' configuration.\n *\n * @param dependencyNotation notation for the dependency to be added.\n * @param dependencyConfiguration expression to use to configure the dependency.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\nfun DependencyHandler.`api`(\n    dependencyNotation: String,\n    dependencyConfiguration: Action<ExternalModuleDependency>\n): ExternalModuleDependency = addDependencyTo(\n    this, \"api\", dependencyNotation, dependencyConfiguration\n) as ExternalModuleDependency\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Snippet Tests\nDESCRIPTION: Commands to run tests for Kotlin and Groovy snippets, with options to filter by DSL.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docsTest --tests \"*.snippet-java-toolchain-task_*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docsTest --tests \"*.snippet-java-toolchain-task_kotlin_*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Build Cache in Gradle Settings\nDESCRIPTION: Sample code showing how to enable and configure the local build cache in a Gradle settings.gradle file. This includes setting the directory location and configuring cache removal policies.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/kotlin/src/headers/headers.txt#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nbuildCache {\n    local {\n        directory = new File(rootDir, 'build-cache')\n        removeUnusedEntriesAfterDays = 30\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options in Gradle with Groovy\nDESCRIPTION: Demonstrates the groovy implementation for setting TypeScript compiler options in a Gradle build. This shows the DSL for configuring TypeScript settings in the JsCompiler.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/base/distribution/groovy/custom/custom.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\njsCompilerOptions {\n    sourceMap = true\n    inlineSourceMap = false\n    inlineSources = true\n    sourceRoot = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Applying TypeScript Compiler Options in Gradle with Kotlin\nDESCRIPTION: Shows how to define and set TypeScript compiler options in a Gradle plugin using Kotlin. This snippet demonstrates how to use extension properties to configure TypeScript settings.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/base/distribution/groovy/custom/custom.txt#2025-04-19_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\njsCompilerOptions {\n    sourceMap(true)\n    inlineSourceMap(false)\n    inlineSources(true)\n    sourceRoot(\"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Upgraded JavaCompile Task Class with Lazy Property in Java\nDESCRIPTION: Example of the JavaCompile task class after upgrading to use lazy properties. It shows the sourceCompatibility property defined as a Property<String>.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nabstract class JavaCompile {\n    @Input\n    public Property<String> getSourceCompatibility();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote HTTP Build Cache in Gradle Settings\nDESCRIPTION: Example configuration for a remote HTTP build cache in Gradle settings file. Demonstrates how to set up credentials and connection parameters for an HTTP-based cache server.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/kotlin/src/headers/headers.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nbuildCache {\n    remote(HttpBuildCache) {\n        url = 'https://example.com:8123/cache/'\n        credentials {\n            username = 'build-cache-user'\n            password = 'some-password'\n        }\n        push = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Block Tags in Javadoc Comments in Java\nDESCRIPTION: Demonstrates the proper use and ordering of block tags in Javadoc comments, including @param, @return, @throws, and @see.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @param url an absolute URL giving the base location of the image\n * @param name the location of the image, relative to the url argument\n * @return the image at the specified URL\n * @see Image\n */\n```\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @param url an absolute URL giving the base location of the image, and \n *            it is continuing the description on this new line\n * @param name the location of the image, relative to the url argument\n */\n```\n\n----------------------------------------\n\nTITLE: Defining BuildCacheConfiguration for Gradle cache configuration\nDESCRIPTION: Class that defines the BuildCacheConfiguration for configuring the Gradle build cache. It allows registering and configuring both local and remote build cache backends with appropriate settings.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/tasks/kotlin/src/stuff/hello.txt#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class BuildCacheConfiguration {\n    private final boolean pullDisabled;\n    private final boolean pushDisabled;\n\n    // ...\n\n    public LocalBuildCache getLocal() {\n        return local;\n    }\n\n    public void local(Action<? super LocalBuildCache> configuration) {\n        configuration.execute(local);\n    }\n\n    public RemoteBuildCache getRemote() {\n        return remote;\n    }\n\n    public void remote(Action<? super RemoteBuildCache> configuration) {\n        configuration.execute(remote);\n        remote.setPush(!pushDisabled && remote.isPush());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Classloader Isolation for Worker Actions\nDESCRIPTION: Example showing how to configure classloader isolation for worker processes as an alternative to process isolation for debugging.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/Debugging.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ngetWorkerExecutor()\n    .classloaderIsolation(spec -> {\n        // ...\n    })\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Importing org.gradle.kotlin.dsl Package in Gradle Kotlin Scripts\nDESCRIPTION: The org.gradle.kotlin.dsl package is implicitly imported in .gradle.kts scripts, making its members readily available along with Gradle Java API default imports. This snippet demonstrates the conceptual import, though it's not explicitly required in the script.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/docs/kotlin/Module.md#2025-04-19_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.gradle.kotlin.dsl.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Remote Caches in Gradle\nDESCRIPTION: Advanced configuration showing how to set up multiple remote build caches in Gradle. This example demonstrates using both a primary and a secondary HTTP-based cache.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/kotlin/src/headers/headers.txt#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nbuildCache {\n    registerBuildCacheService('secondaryRemote', HttpBuildCache) {\n        url = '...'\n        // other config...\n    }\n    \n    remote(HttpBuildCache) {\n        url = '...'\n        // other config...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable API Dependency with ProviderConvertible Notation in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyHandler that adds a dependency to the 'api' configuration using a ProviderConvertible as notation with a configuration action.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'api' configuration.\n *\n * @param dependencyNotation notation for the dependency to be added.\n * @param dependencyConfiguration expression to use to configure the dependency.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\nfun DependencyHandler.`api`(\n    dependencyNotation: ProviderConvertible<*>,\n    dependencyConfiguration: Action<ExternalModuleDependency>\n): Unit = addConfiguredDependencyTo(\n    this, \"api\", dependencyNotation, dependencyConfiguration\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Gradle Module Metadata Publication in Gradle Settings\nDESCRIPTION: This code snippet demonstrates how to enable the publication of Gradle Module Metadata in the Gradle settings file (settings.gradle). This feature preview is required for Gradle versions prior to 6.0.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/docs/design/gradle-module-metadata-1.0-specification.md#2025-04-19_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nenableFeaturePreview(\"GRADLE_METADATA\")\n```\n\n----------------------------------------\n\nTITLE: Acceptable Implementation of New Classes with Special Logic in Gradle\nDESCRIPTION: Shows acceptable ways to implement new classes with lazy properties and special logic in Gradle. These approaches allow for integration with existing code while maintaining managed properties.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface NewThing {\n    Property<String> getSomeProperty()\n}\n\nabstract class DefaultNewThing implements NewThing {\n    // special logic to integrate with something existing\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\npublic abstract class NewThing {\n    public abstract Property<String> getSomeProperty()\n    // special logic to integrate with something existing\n}\n```\n\n----------------------------------------\n\nTITLE: Function Calls in Gradle\nDESCRIPTION: Various examples of function call syntax in Gradle, including simple calls, calls with named parameters, method chaining, and calls with different argument types.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/main/resources/org/gradle/internal/declarativedsl/parsing/grammar_test_input.txt#2025-04-19_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nf()\nf(x=y)\nf.g.h.i.j.k(test)\nf(1, x, \"s\", g())\nf(a = b, c = d)\n```\n\n----------------------------------------\n\nTITLE: Preferred Implementation of New Properties in Existing Classes in Gradle\nDESCRIPTION: Shows the recommended way to add new properties to existing classes in Gradle when the implementation type is internal. This approach uses managed lazy properties without direct implementation.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface ExistingThing {\n    String getOtherProperty()\n    void setOtherProperty(String s)\n\n    Property<String> getSomeProperty()\n}\n\nabstract class DefaultExistingThing implements ExistingThing {\n    private String otherProperty\n    public String getOtherProperty() ...\n    public void setOtherProperty(String s) ...\n\n    // NOTE: No direct implementation of getSomeProperty\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Language Sample Documentation\nDESCRIPTION: Example showing how to document code samples with multiple language variants (Groovy and Kotlin) using Asciidoctor formatting.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_3\n\nLANGUAGE: asciidoc\nCODE:\n```\n.Customizing what Gradle logs\n====\ninclude::sample[dir=\"snippets/initScripts/customLogger/kotlin\",files=\"customLogger.init.gradle.kts[]\"]\ninclude::sample[dir=\"snippets/initScripts/customLogger/groovy\",files=\"init.gradle[]\"]\n====\n\n[.multi-language-text.lang-kotlin]\n----\n$ gradle -I customLogger.init.gradle.kts build\ninclude::{snippetsPath}/initScripts/customLogger/tests/customLogger.out[]\n----\n[.multi-language-text.lang-groovy]\n----\n$ gradle -I init.gradle build\ninclude::{snippetsPath}/initScripts/customLogger/tests/customLogger.out[]\n----\n```\n\n----------------------------------------\n\nTITLE: Setting Default Properties in Gradle\nDESCRIPTION: This example shows how to set default values for properties that might not be defined externally. This ensures that the build doesn't fail if a property isn't provided.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory-subkey/groovy/src/stuff/hello.txt#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nif (!hasProperty('myprop')) {\n    ext.myprop = 'defaultValue'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable API Dependency Constraint in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyConstraintHandler that adds a configurable dependency constraint to the 'api' configuration using a Kotlin lambda.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency constraint to the 'api' configuration.\n *\n * @param constraintNotation the dependency constraint notation\n * @param block the block to use to configure the dependency constraint\n *\n * @return the added dependency constraint\n *\n * @see [DependencyConstraintHandler.add]\n */\nfun DependencyConstraintHandler.`api`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =\n    add(\"api\", constraintNotation, block)\n```\n\n----------------------------------------\n\nTITLE: Adding API Artifact in Gradle Kotlin DSL\nDESCRIPTION: Extension function for ArtifactHandler that adds an artifact to the 'api' configuration.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds an artifact to the 'api' configuration.\n *\n * @param artifactNotation the group of the module to be added as a dependency.\n * @return The artifact.\n *\n * @see [ArtifactHandler.add]\n */\nfun ArtifactHandler.`api`(artifactNotation: Any): PublishArtifact =\n    add(\"api\", artifactNotation)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment-Specific Properties in Gradle\nDESCRIPTION: This snippet demonstrates how to configure properties based on the execution environment. It uses different property values for different environments like development, testing, and production.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory-subkey/groovy/src/stuff/hello.txt#2025-04-19_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// gradle -Penv=prod\nif (project.hasProperty('env') && project.env == 'prod') {\n    apply from: 'gradle/prod.gradle'\n} else {\n    apply from: 'gradle/dev.gradle'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable API Dependency with Provider Notation in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyHandler that adds a dependency to the 'api' configuration using a Provider as notation with a configuration action.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'api' configuration.\n *\n * @param dependencyNotation notation for the dependency to be added.\n * @param dependencyConfiguration expression to use to configure the dependency.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\nfun DependencyHandler.`api`(\n    dependencyNotation: Provider<*>,\n    dependencyConfiguration: Action<ExternalModuleDependency>\n): Unit = addConfiguredDependencyTo(\n    this, \"api\", dependencyNotation, dependencyConfiguration\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Execution Arguments in Bash/Groovy\nDESCRIPTION: This snippet sets up the command-line arguments for executing a Java application. It includes conditional logic for setting system properties, classpath, and module path based on configuration variables.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nset -- \\\n<% if ( appNameSystemProperty ) {\n     %>        \"-D${appNameSystemProperty}=\\$APP_BASE_NAME\" \\\n<% } %>        -classpath \"\\$CLASSPATH\" \\\n<% if ( mainClassName.startsWith('--module ') ) {\n     %>        --module-path \"\\$MODULE_PATH\" \\\n<% } %>        ${mainClassName ?: entryPointArgs} \\\n        \"\\$@\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Options for Java Compiler Tasks\nDESCRIPTION: Code snippet demonstrating how to add debug JVM arguments to JavaCompile tasks for debugging compiler daemons. Sets up remote debugging connection on port 5006.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/Debugging.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.withType(JavaCompile) {\n    options.forkOptions.jvmArgs.add(\"-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=localhost:5006\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Samples Tests\nDESCRIPTION: Commands to run all samples tests or a specific sample test using Gradle.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docsTest --tests \"org.gradle.docs.samples.*.*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docsTest --tests \"org.gradle.docs.samples.DependencyManagementSnippetsTest.java-application*\"\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAPI Schema Extension in Java\nDESCRIPTION: This snippet shows how to create an OpenAPI schema extension in Java. It defines an abstract class that extends SchemaBuilderBase to handle custom schema generation for Java types, with methods for handling various types of properties and annotations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class OpenApiSchemaExtension extends SchemaBuilderBase {\n    \n    /**\n     * Generate a schema for the given Java type\n     * @param type The Java type to generate schema for\n     * @param annotations Annotations on the field or parameter\n     * @return The generated schema\n     */\n    public Schema<?> generateSchema(JavaType type, Annotation[] annotations) {\n        Schema<?> schema = createSchema(type);\n        processTypeAnnotations(schema, annotations);\n        return schema;\n    }\n    \n    protected void processTypeAnnotations(Schema<?> schema, Annotation[] annotations) {\n        for (Annotation annotation : annotations) {\n            if (annotation instanceof Description) {\n                schema.description(((Description) annotation).value());\n            } else if (annotation instanceof Required) {\n                schema.required(true);\n            }\n        }\n    }\n    \n    protected abstract Schema<?> createSchema(JavaType type);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables and Java detection in Windows batch script\nDESCRIPTION: This snippet sets up the application environment, detects Java installation, and prepares for execution. It handles cases where JAVA_HOME is set or not, and provides appropriate error messages.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/windowsStartScript.txt#2025-04-19_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  ${applicationName} startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\\\n\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%${appHomeRelativePath}\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and ${optsEnvironmentVar} to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=${defaultJvmOpts}\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n```\n\n----------------------------------------\n\nTITLE: Testing for Category Annotation in Java Test Classes\nDESCRIPTION: This helper method checks if a test class is annotated with a specific category annotation. It's used to identify tests with particular characteristics like being flaky or having special requirements.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate static boolean hasTestCategoryAnnotation(Class<?> testClass, Class<? extends Annotation> category) {\n    return testClass.getAnnotation(category) != null || hasSuperClassWithAnnotation(testClass, category);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Gradle Samples with Configuration Cache\nDESCRIPTION: Command to run samples and snippets tests with configuration cache enabled for compatibility testing.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docsTest --tests \"*.snippet-java-toolchain-task_*\" -PenableConfigurationCacheForDocsTests=true\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Java 8 Testing Environment\nDESCRIPTION: Dockerfile definition for creating a Java 8 based testing environment using Alpine Linux, including all necessary dependencies and configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM openjdk:8-jdk-alpine\n\nRUN apk add --no-cache bash\n\nENV GRADLE_HOME /opt/gradle\nENV GRADLE_VERSION 7.0.0\n\nRUN set -o errexit -o nounset \\\n    && echo \"Downloading Gradle\" \\\n    && wget --no-verbose --output-document=gradle.zip \"https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip\"\n\nRUN unzip gradle.zip \\\n    && rm gradle.zip \\\n    && mv \"gradle-${GRADLE_VERSION}\" \"${GRADLE_HOME}/\" \\\n    && ln -s \"${GRADLE_HOME}/bin/gradle\" /usr/bin/gradle\n\nWORKDIR /home/gradle/project\n\nENTRYPOINT [\"gradle\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Daemon Debug JVM Arguments\nDESCRIPTION: Properties file configuration to enable remote debugging for the Gradle daemon process on port 5005.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/Debugging.md#2025-04-19_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\norg.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=n,address=localhost:5005,suspend=y\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpClient for Azure Artifacts in Java\nDESCRIPTION: A class that implements Microsoft's HttpClient interface to handle Azure Artifacts authentication with Gradle's HTTP infrastructure. It wraps an existing HttpClient implementation and adds functionality for handling authentication credentials in Gradle builds.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/groovy/shared/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright 2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.gradle.internal.authentication.azureartifacts;\n\nimport com.microsoft.azuretools.azurecommons.helpers.NotNull;\nimport com.microsoft.azuretools.azurecommons.helpers.Nullable;\nimport com.microsoft.aad.adal4j.AuthenticationCallback;\nimport com.microsoft.aad.adal4j.AuthenticationResult;\nimport org.gradle.api.logging.Logger;\nimport org.gradle.api.logging.Logging;\nimport org.gradle.internal.impldep.org.apache.http.client.CredentialsProvider;\nimport org.gradle.internal.impldep.org.apache.http.client.methods.CloseableHttpResponse;\nimport org.gradle.internal.impldep.org.apache.http.client.methods.HttpUriRequest;\nimport org.gradle.internal.impldep.org.apache.http.impl.client.CloseableHttpClient;\nimport org.gradle.internal.impldep.org.apache.http.util.EntityUtils;\n\nimport javax.naming.ServiceUnavailableException;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class GradleAzureArtifactsHttpClient implements com.microsoft.azuretools.azurecommons.helpers.HttpClientProvider.HttpClient {\n\n    private static final Logger LOGGER = Logging.getLogger(GradleAzureArtifactsHttpClient.class);\n\n    private final CloseableHttpClient httpClient;\n    private final CredentialsProvider credentialsProvider;\n\n    public GradleAzureArtifactsHttpClient(CloseableHttpClient httpClient, CredentialsProvider credentialsProvider) {\n        this.httpClient = httpClient;\n        this.credentialsProvider = credentialsProvider;\n    }\n\n    @Override\n    public String executeRequest(@NotNull String url, @Nullable String data, @Nullable Map<String, String> headers) throws MalformedURLException, ServiceUnavailableException, ExecutionException, InterruptedException {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void executeRequestAsyncWithAuth(@NotNull ExecutorService service, @NotNull String url, String authority, String resource, UUID correlationId, @NotNull AuthenticationCallback<AuthenticationResult> callback) throws MalformedURLException {\n        service.execute(() -> {\n            try {\n                AtomicReference<String> accessToken = new AtomicReference<>();\n                GradleAzureArtifactsAuthenticationScheme.acquireAccessToken(new URL(url), credentialsProvider, accessToken);\n                LOGGER.debug(\"Acquired access token for Azure Artifacts\");\n                callback.onSuccess(new GradleAzureArtifactsAuthenticationResult(accessToken.get()));\n            } catch (Exception e) {\n                callback.onFailure(e);\n            }\n        });\n    }\n\n    @Override\n    public Future<?> executeRequestAsyncWithAuth(@NotNull ExecutorService service, @NotNull String url, String authority, String resource, UUID correlationId, @NotNull AuthenticationCallback<AuthenticationResult> callback, @NotNull Map<String, String> headers) throws MalformedURLException {\n        return null;\n    }\n\n    @Override\n    public String executeRequestWithAuth(@NotNull String url, @Nullable String data, @Nullable Map<String, String> headers, AuthenticationResult token) throws IOException {\n        HttpUriRequest httpRequest = AzureArtifactsHttpUtils.createRequest(url, data, headers, token);\n\n        try (CloseableHttpResponse response = httpClient.execute(httpRequest)) {\n            return EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolutionProvider Interface for Custom Suggestions in Gradle\nDESCRIPTION: To add a custom suggestion in the \"Try\" section of the console output, implement the ResolutionProvider interface in your exception class. This will automatically display the suggestion in the designated section.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/ErrorMessages.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. To add a custom suggestion in the \"Try\" section of the console output, your exception needs to implement the `ResolutionProvider` interface.\n2. That should be it. The suggestion will be displayed in the \"Try\" section.\n```\n\n----------------------------------------\n\nTITLE: Release Notes Structure Example in Markdown\nDESCRIPTION: Example showing the heading structure and formatting for Gradle release notes, demonstrating h2, h3 and h4 usage with collapsible sections and incubating feature markers.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## h2 New and Noteworthy\n\n### h3 Some feature (i)\n\nThis is some incubating feature.\n\n#### h4 Some detail\n\nThis detail about the feature is collapsed. The reader can expand it if they are interested.\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Test with Machine Executor\nDESCRIPTION: Configuration for running Gradle tests using a machine executor in CircleCI with specific resource class and environment variables.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmachine:\n  image: ubuntu-2004:202107-02 #Ubuntu 20.04, docker 20.10.7, docker-compose 1.29.2\n  docker_layer_caching: true\n  resource_class: large\nenvironment:\n  GRADLE_OPTS: \"-Xmx4g -XX:+HeapDumpOnOutOfMemoryError\"\n  CI_NAME: \"CircleCI\"\n```\n\n----------------------------------------\n\nTITLE: Setting Conventions for Existing Properties in Gradle\nDESCRIPTION: Shows an acceptable way to set conventions for existing properties in Gradle. This approach sets conventions in both the constructor and the plugin to maintain compatibility with existing builds.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface ExistingThing {\n    Property<String> getSomeProperty()\n}\n\nabstract class DefaultExistingThing implements ExistingThing {\n    DefaultExistingThing() {\n        getSomeProperty().convention(\"some-value\")\n    }\n}\n\n// in plugin\nexistingThing = objects.newInstance(DefaultExistingThing.class)\nexistingThing.convention(\"some-value\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Manual Interceptors in Java for Gradle\nDESCRIPTION: Demonstrates how to manually declare interceptors for Java and Groovy calls in Gradle. This class defines interceptors that will be processed to generate bytecode for instrumentation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@SpecificJvmCallInterceptors(\n generatedClassName = JVM_BYTECODE_GENERATED_CLASS_NAME_FOR_CONFIG_CACHE,\n type = INSTRUMENTATION\n)\n@SpecificGroovyCallInterceptors(\n generatedClassName = GROOVY_INTERCEPTORS_GENERATED_CLASS_NAME_FOR_CONFIG_CACHE,\n type = INSTRUMENTATION\n)\npublic class JavaCompileInterceptorsDeclaration {\n    @InterceptCalls\n    @InstanceMethod\n    public static void intercept_setSourceCompatibility(\n        @Receiver JavaCompile javaCompile,\n        String sourceCompatibility\n    ) {\n        javaCompile.getSourceCompatibility().set(sourceCompatibility);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Result for Azure Artifacts in Java\nDESCRIPTION: A simple implementation class that holds the access token for Azure Artifacts authentication. It extends AuthenticationResult to provide authenticated access to Azure Artifact repositories.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/groovy/shared/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright 2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.gradle.internal.authentication.azureartifacts;\n\nimport com.microsoft.aad.adal4j.AuthenticationResult;\n\npublic class GradleAzureArtifactsAuthenticationResult extends AuthenticationResult {\n\n    private final String accessToken;\n\n    public GradleAzureArtifactsAuthenticationResult(String accessToken) {\n        super(null, null, null, 0, null, null, false);\n        this.accessToken = accessToken;\n    }\n\n    @Override\n    public String getAccessToken() {\n        return accessToken;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Build Command\nDESCRIPTION: Commands for executing a Gradle build with specific parameters including setting the home directory, refreshing dependencies, showing stacktraces and defining resource class.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- run:\n    name: Run build\n    command: ./gradlew build -Porg.gradle.java.installations.auto-download=false -PsmokeTest=true -PgenApiDocInEA --refresh-dependencies -i --stacktrace\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Assignments in Gradle\nDESCRIPTION: Examples of basic variable assignments in Gradle build scripts, showing different data types including integers, strings, null values, and boolean values.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/main/resources/org/gradle/internal/declarativedsl/parsing/grammar_test_input.txt#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\na = 1\nb = this\nc = null\nx = true\na = f(7)\na = f.g.h(7)\n```\n\n----------------------------------------\n\nTITLE: Registering Schema Generators in OpenAPI Extension\nDESCRIPTION: This code shows how to register custom schema generators for handling different Java types in an OpenAPI schema generator. It demonstrates the registration process for various specialized generators like arrays, enums, and complex objects.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SchemaGeneratorRegistry {\n    private final Map<Class<?>, SchemaGenerator> generators = new HashMap<>();\n    \n    public void registerGenerator(Class<?> type, SchemaGenerator generator) {\n        generators.put(type, generator);\n    }\n    \n    public void registerDefaultGenerators() {\n        // Register generators for primitive types\n        registerGenerator(String.class, new StringSchemaGenerator());\n        registerGenerator(Integer.class, new IntegerSchemaGenerator());\n        registerGenerator(Boolean.class, new BooleanSchemaGenerator());\n        \n        // Register collection type generators\n        registerGenerator(List.class, new ArraySchemaGenerator());\n        registerGenerator(Set.class, new ArraySchemaGenerator());\n        \n        // Register enum generator\n        registerGenerator(Enum.class, new EnumSchemaGenerator());\n    }\n    \n    public SchemaGenerator getGenerator(Class<?> type) {\n        // Try to find an exact match\n        SchemaGenerator generator = generators.get(type);\n        if (generator != null) {\n            return generator;\n        }\n        \n        // Check for assignable types (interfaces, parent classes)\n        for (Map.Entry<Class<?>, SchemaGenerator> entry : generators.entrySet()) {\n            if (entry.getKey().isAssignableFrom(type)) {\n                return entry.getValue();\n            }\n        }\n        \n        // Default to complex object generator\n        return new ObjectSchemaGenerator();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Test Class Execution Group in Java\nDESCRIPTION: This method checks if a test class belongs to a specific execution group based on its package name. It helps in categorizing and potentially filtering tests based on their module or functionality group.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic static boolean isExecutedBy(Class<?> testClass, String executionGroup) {\n    for (String execGroup : getExecutionGroups(testClass)) {\n        if (execGroup.equals(executionGroup)) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Java Bytecode Interceptor for Gradle\nDESCRIPTION: Shows the generated Java bytecode interceptor class that implements the JvmBytecodeCallInterceptor interface. This class is responsible for intercepting specific method calls during bytecode instrumentation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class InterceptorDeclaration_JvmBytecodeCallInterceptor \n       extends MethodVisitorScope implements JvmBytecodeCallInterceptor {\n\n     // Skipped fields and constructor for brevity\n    @Override\n    public boolean visitMethodInsn(String className, int opcode, String owner, String name,\n            String descriptor, boolean isInterface, Supplier<MethodNode> readMethodNode) {\n        if (owner.equals(\"org/gradle/api/tasks/compile/JavaCompile\")) {\n            if (name.equals(\"setSourceCompatibility\") \n                    && descriptor.equals(\"(Ljava/lang/String;)V\") \n                    && opcode == Opcodes.INVOKESPECIAL) {\n                 // Skip some bytecode for brevity\n                _INVOKESTATIC(\"JavaCompileInterceptorsDeclaration\", \"intercept_setSourceCompatibility\", \"(Lorg/gradle/api/tasks/compile/JavaCompile;Ljava/lang/String;)V\");\n                return true;\n            }\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Gradle CI in Linux\nDESCRIPTION: A bash script that sets necessary environment variables for running Gradle in a Linux CI environment. It sets GRADLE_OPTS with appropriate memory settings and enables daemon to improve build performance.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/kotlin/shared/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GRADLE_OPTS=\"-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=3 -Xmx4096m -XX:MaxPermSize=1024m -XX:MaxMetaspaceSize=1024m -Dfile.encoding=UTF-8\"\n```\n\n----------------------------------------\n\nTITLE: Applying Instrumented Java Project Plugin in Kotlin\nDESCRIPTION: Kotlin DSL snippet for applying the gradebuild.instrumented-java-project plugin to set up annotation processing for interceptor generation in a Gradle build script.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"gradebuild.instrumented-java-project\")\n}\n```\n\n----------------------------------------\n\nTITLE: Subclass Relation Check in Java for Gradle Test Filtering\nDESCRIPTION: This utility method determines if one class is a subclass of another. It's used in the test filtering process to identify inheritance relationships between test classes.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate static boolean isSubClass(Class<?> subClass, Class<?> superClass) {\n    return !subClass.equals(superClass) && superClass.isAssignableFrom(subClass);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Build with Build Cache Debug Logging\nDESCRIPTION: Command line example showing how to run a Gradle build with debug-level logging for the build cache system to troubleshoot cache-related issues.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/kotlin/src/headers/headers.txt#2025-04-19_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew --build-cache build -Dorg.gradle.caching.debug=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Execution Listener in Gradle\nDESCRIPTION: This snippet sets up a task execution listener that logs the task name and project path when a task starts and finishes execution. It shows how to monitor and log task execution in Gradle builds.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsGroovy/groovy/source/keep.txt#2025-04-19_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\ngradle.addListener(new TaskExecutionListener() {\n    @Override\n    void beforeExecute(Task task) {\n        println \"$task.name starts for $task.project.path\"\n    }\n\n    @Override\n    void afterExecute(Task task, TaskState state) {\n        println \"$task.name ends for $task.project.path\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing LoadableBuildCache interface with HTTP capabilities\nDESCRIPTION: Implementation of the LoadableBuildCache interface that adds HTTP capabilities to the base BuildCache class. This class extends BuildCache to add HTTP-specific configurations like credentials and authentication.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/tasks/kotlin/src/stuff/hello.txt#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface LoadableBuildCache extends BuildCache {}\n```\n\n----------------------------------------\n\nTITLE: Referencing AbstractCrossVersionPerformanceTest Class in Groovy\nDESCRIPTION: This snippet shows the path to the AbstractCrossVersionPerformanceTest class, which is used for performance tests that compare the Gradle version under test with several baseline Gradle versions to detect performance regressions.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/internal-performance-testing/README.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nsrc/main/groovy/org/gradle/performance/AbstractCrossVersionPerformanceTest.groovy\n```\n\n----------------------------------------\n\nTITLE: Accessing API Configuration in Gradle Kotlin DSL\nDESCRIPTION: Extension property that provides type-safe access to the 'api' configuration from a NamedDomainObjectContainer of Configuration objects using the named method.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Provides the existing [api][org.gradle.api.artifacts.Configuration] element.\n */\nval org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`api`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>\n    get() = named<org.gradle.api.artifacts.Configuration>(\"api\")\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Categories for Exclusion in Java Test Filtering\nDESCRIPTION: This method examines a test class to determine if it should be excluded based on annotations that categorize it as flaky or having specific requirements. It supports filtering out tests with particular characteristics.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate static boolean isInCategory(Class<?> testClass) {\n    return hasTestCategoryAnnotation(testClass, FlakyCrossVersionTest.class)\n        || hasTestCategoryAnnotation(testClass, FlakyTest.class)\n        || hasTestCategoryAnnotation(testClass, RequiresInstalledToolChain.class)\n        || hasTestCategoryAnnotation(testClass, RequiresMissingSdk.class)\n        || hasTestCategoryAnnotation(testClass, LocalOnly.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eclipse Classpath for Gradle Project in XML\nDESCRIPTION: This XML snippet defines the classpath for an Eclipse project. It specifies source directories for main and test code, output paths, JRE container, and external library dependencies. The configuration is tailored for a project that likely uses Gradle.\nSOURCE: https://github.com/gradle/gradle/blob/master/subprojects/core/src/test/resources/org/gradle/api/tasks/ide/eclipse/expectedClasspathFile.txt#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<classpath>\n  <classpathentry kind=\"src\" path=\"src/main/java\"/>\n  <classpathentry kind=\"src\" path=\"src/main/resources\"/>\n  <classpathentry kind=\"output\" path=\"bin\"/>\n  <classpathentry kind=\"src\" path=\"src/test/java\" output=\"testbin\"/>\n  <classpathentry kind=\"src\" path=\"src/test/resources\" output=\"testbin\"/>\n  <classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"/>\n  <classpathentry kind=\"src\" path=\"/test\" combineaccessrules=\"false\"/>\n  <classpathentry kind=\"lib\" path=\"lib/a.jar\"/>\n  <classpathentry kind=\"lib\" path=\"lib/b.jar\"/>\n</classpath>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Path Normalization and Encoding\nDESCRIPTION: This example shows how Gradle normalizes URL paths by removing redundant elements and handling spaces. The example demonstrates URL encoding behavior with spaces in paths.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/shared/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnew URL(\"jar:file:/a/b/c/foo.jar!/a/b/../c\").path == \"/a/b/c/foo.jar!/a/c\"\nnew URL(\"jar:file:/a/b/c/foo with space.jar!/a/b/../c\").path == \"/a/b/c/foo with space.jar!/a/c\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Project's Extra Properties Extension in Kotlin DSL\nDESCRIPTION: Extension property that provides type-safe access to the 'extra' extension of a Project. This allows accessing the ExtraPropertiesExtension directly as a property.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Retrieves the [extra][org.gradle.api.plugins.ExtraPropertiesExtension] extension.\n */\nval org.gradle.api.Project.`extra`: org.gradle.api.plugins.ExtraPropertiesExtension get() =\n    (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName(\"extra\") as org.gradle.api.plugins.ExtraPropertiesExtension\n```\n\n----------------------------------------\n\nTITLE: Building Gradle DSL Reference\nDESCRIPTION: Command to build the Gradle DSL reference documentation in HTML format.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:dslHtml\n```\n\n----------------------------------------\n\nTITLE: Illustrating URLEncoder Space Character Handling\nDESCRIPTION: This snippet demonstrates how URLEncoder encodes spaces in URLs using the plus sign rather than %20, which differs from standard URI encoding behavior.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/shared/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nURLEncoder.encode(\"with space\", \"UTF-8\") == \"with+space\"\n```\n\n----------------------------------------\n\nTITLE: Proper Use of Nested Properties with Managed Types in Gradle\nDESCRIPTION: Demonstrates the correct way to define nested properties using managed types in Gradle. This approach allows Gradle to generate the implementation for the nested type.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ninterface NestedType {\n    Property<String> getSomeProperty()\n}\nclass Example {\n    @Nested\n    NestedType getNestedProperty()\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HttpBuildCache with new remote cache features\nDESCRIPTION: This class extends HttpBuildCache to implement additional functionality for remote caching via HTTP. It includes configuration options for remote URL, authentication parameters, and connection handling properties.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/tasks/kotlin/src/stuff/hello.txt#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class HttpBuildCache extends BuildCache implements LoadableBuildCache {\n    private URI url;\n    private String userName;\n    private String password;\n\n    /**\n     * Returns the URI to push to and pull from.\n     */\n    @Internal\n    public URI getUrl() {\n        return url;\n    }\n\n    /**\n     * Sets the URI to push to and pull from.\n     *\n     * @since 3.5\n     */\n    public void setUrl(URI url) {\n        this.url = url;\n    }\n\n    /**\n     * Sets the URI to push to and pull from.\n     *\n     * @since 3.5\n     */\n    public void setUrl(Object url) {\n        this.url = GUtil.toURI(url);\n    }\n\n    /**\n     * Returns the credentials used to access the remove build cache.\n     */\n    @Internal\n    public HttpBuildCacheCredentials getCredentials() {\n        return new HttpBuildCacheCredentials(getUserName(), getPassword());\n    }\n\n    /**\n     * Returns the username to use when accessing the remote build cache.\n     */\n    @Internal\n    @Nullable\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * Sets the username to use when accessing the remote build cache.\n     */\n    public void setUserName(@Nullable String userName) {\n        this.userName = userName;\n    }\n\n    /**\n     * Returns the password to use when accessing the remote build cache.\n     */\n    @Internal\n    @Nullable\n    public String getPassword() {\n        return password;\n    }\n\n    /**\n     * Sets the password to use when accessing the remote build cache.\n     */\n    public void setPassword(@Nullable String password) {\n        this.password = password;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acceptable Implementation of New Properties in Public Existing Classes in Gradle\nDESCRIPTION: Demonstrates an acceptable way to add new properties to existing public classes in Gradle. This approach manually manages the property to maintain compatibility with external extensions.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface ExistingThing {\n    String getOtherProperty()\n    void setOtherProperty(String s)\n\n    Property<String> getSomeProperty()\n}\n\nabstract class DefaultExistingThing implements ExistingThing {\n    private String otherProperty\n    private final Property<String> someProperty\n\n    DefaultNewThing(ObjectFactory objects) {\n       someProperty = objects.property(String.class)\n    }\n\n    public String getOtherProperty() ...\n    public void setOtherProperty(String s) ...\n\n    public Property<String> getSomeProperty() {\n        return someProperty\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Gradle Javadocs\nDESCRIPTION: Command to build all Gradle Javadocs.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:javadocAll\n```\n\n----------------------------------------\n\nTITLE: Accessing GRADLE_USER_HOME Environment Variable in Kotlin\nDESCRIPTION: This snippet demonstrates how to access the GRADLE_USER_HOME environment variable in Kotlin. It falls back to a default location if the environment variable is not set.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// The Gradle user home can be different from the Java user home.\n// Use `$GRADLE_USER_HOME/native/src` if the env var exists\n// and fallback to `$USER_HOME/.gradle/native/src` otherwise\nval userHome = System.getProperty(\"user.home\")\nval gradleUserHome = System.getenv(\"GRADLE_USER_HOME\") ?: \"$userHome/.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gradle Locally for Testing Changes\nDESCRIPTION: Demonstrates how to install a custom Gradle build to a specific directory for manual testing. This allows contributors to test their changes in a real-world scenario before submitting a pull request.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew install -Pgradle_installPath=/any/path\n```\n\n----------------------------------------\n\nTITLE: Building All Gradle Documentation\nDESCRIPTION: Convenience command to build all Gradle documentation components.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docs\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Property in Gradle Project\nDESCRIPTION: This snippet demonstrates setting a custom property in a Gradle project which can then be accessed during the build process. It shows how to define a simple string property.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory-subkey/groovy/src/stuff/hello.txt#2025-04-19_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nmyProp=myValue\n```\n\n----------------------------------------\n\nTITLE: Maven Project Object Model Configuration with Dependencies\nDESCRIPTION: Complete Maven POM configuration defining project metadata and dependencies. Includes project identification, licensing information, and multiple dependencies with different scopes (compile, runtime, test, provided) and exclusion patterns. The configuration demonstrates various dependency types including ZIP and WAR artifacts.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/software/maven/src/integTest/resources/org/gradle/integtests/publish/maven/pomGeneration/expectedNewPom.txt#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>gradle</groupId>\n  <artifactId>pom-generation</artifactId>\n  <version>1.0</version>\n  <inceptionYear>2008</inceptionYear>\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  <dependencies>\n    <dependency>\n      <groupId>group4</groupId>\n      <artifactId>providedRuntime</artifactId>\n      <version>1.0</version>\n      <type>zip</type>\n      <scope>provided</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>*</artifactId>\n          <groupId>*</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group4</groupId>\n      <artifactId>providedRuntime-util</artifactId>\n      <version>1.0</version>\n      <type>war</type>\n      <scope>provided</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>*</artifactId>\n          <groupId>*</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group6</groupId>\n      <artifactId>testRuntime</artifactId>\n      <version>1.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>group2</groupId>\n      <artifactId>providedCompile</artifactId>\n      <version>1.0</version>\n      <scope>provided</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>*</artifactId>\n          <groupId>*</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group1</groupId>\n      <artifactId>compile</artifactId>\n      <version>1.0</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>excludeArtifact</artifactId>\n          <groupId>excludeGroup</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group3</groupId>\n      <artifactId>runtime</artifactId>\n      <version>1.0</version>\n      <scope>runtime</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>excludeArtifact2</artifactId>\n          <groupId>excludeGroup2</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group5</groupId>\n      <artifactId>testCompile</artifactId>\n      <version>1.0</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Blocks with Syntax Highlighting in Java\nDESCRIPTION: This snippet demonstrates how to format a Kotlin code block within Java documentation using HTML tags for proper syntax highlighting.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n/**\n * <pre><code class=\"language-kotlin\">\n * project.ext.prop1 = \"foo\"\n * task doStuff {\n *     ext.prop2 = \"bar\"\n * }\n * subprojects { ext.${prop3} = false }\n * </code></pre>\n */\n```\n\n----------------------------------------\n\nTITLE: Building BuildCacheServiceRegistration for HTTP cache implementation\nDESCRIPTION: Code that creates a registration for an HTTP-based build cache service. This links the HttpBuildCache configuration with its corresponding service factory implementation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/tasks/kotlin/src/stuff/hello.txt#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nBuildCacheServiceRegistration<? extends BuildCache> createRemoteBuildCacheServiceRegistration() {\n    return new DefaultBuildCacheServiceRegistration<>(\n        HttpBuildCache.class,\n        new HttpBuildCacheServiceFactory(httpClientFactory)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project's Extra Properties Extension in Kotlin DSL\nDESCRIPTION: Extension function that provides a type-safe way to configure the 'extra' extension of a Project using an Action closure.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Configures the [extra][org.gradle.api.plugins.ExtraPropertiesExtension] extension.\n */\nfun org.gradle.api.Project.`extra`(configure: Action<org.gradle.api.plugins.ExtraPropertiesExtension>): Unit =\n    (this as org.gradle.api.plugins.ExtensionAware).extensions.configure(\"extra\", configure)\n```\n\n----------------------------------------\n\nTITLE: Plugin Classpath Transformation Flow\nDESCRIPTION: Flowchart showing the transformation pipeline for plugins classpath, demonstrating how external and project dependencies are processed differently. External dependencies go through instrumentation and upgrade while project dependencies are only instrumented.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    classpath(Plugins classpath)\n    instrumentAndUpgrade{{\"Instrument and upgrade\"}}\n    instrumentOnly{{\"Instrument only\"}}\n    instrumentedAndUpgradedClasspath(Plugins classpath*)\n    externalJar1(External jar1)\n    externalJar1_2(External jar1)\n    modifiedExternalJar1(External jar1*)\n    externalJar2(External jar2)\n    externalJar2_2(External jar2)\n    modifiedExternalJar2(External jar2*)\n    projectJar(Project jar)\n    projectJar_2(Project jar)\n    modifiedProjectJar(Project jar*)\n\n    subgraph Plugins classpath\n        classpath\n        externalJar1\n        externalJar2\n        projectJar\n    end\n\n    subgraph External dependencies pipeline\n        instrumentAndUpgrade\n        externalJar1_2\n        externalJar2_2\n    end\n\n    subgraph Project dependencies pipeline\n        instrumentOnly\n        projectJar_2\n    end\n\n    subgraph Plugins classpath*\n        instrumentedAndUpgradedClasspath\n        modifiedExternalJar1\n        modifiedExternalJar2\n        modifiedProjectJar\n    end\n\n    classpath --> instrumentAndUpgrade --> instrumentedAndUpgradedClasspath\n    classpath --> instrumentOnly --> instrumentedAndUpgradedClasspath\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Maven Project Structure\nDESCRIPTION: Defines the essential Maven project coordinates using XML configuration. Uses placeholder variables for groupId and version while setting a fixed artifactId. Includes required XML namespace declarations and schema locations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/software/maven/src/integTest/resources/org/gradle/integtests/publish/maven/pomGeneration/expectedQuickstartPom.txt#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>${groupId}</groupId>\n  <artifactId>quickstart</artifactId>\n  <version>${version}</version>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Imperative Plugin Configuration in Gradle (Anti-Pattern)\nDESCRIPTION: This example shows the problematic imperative approach to plugin configuration where task properties are being modified during execution phase rather than during configuration, leading to unreliable incremental builds.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory/groovy/src/stuff/hello.txt#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nclass BadPlugin implements Plugin<Project> {\n    void apply(Project project) {\n        def task = project.tasks.create('bad', BadTask)\n        project.afterEvaluate {\n            task.inputFile = project.file(\"${project.projectDir}/input.txt\")\n            task.outputFile = project.file(\"${project.buildDir}/output.txt\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Locally Installed Gradle Version\nDESCRIPTION: Shows how to use a locally installed custom Gradle build to verify changes. This command runs a specific Gradle task using the custom installation.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/any/path/bin/gradle taskName\n```\n\n----------------------------------------\n\nTITLE: External Dependencies Pipeline Detail\nDESCRIPTION: Detailed flowchart of the external dependencies transformation pipeline, showing the three main steps: analysis of type hierarchy, merging of analysis data, and instrumentation/upgrade of jars.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    jar(Original Jar)\n    collect{{\"Analyze artifact\\n(Artifact transform)\"}}\n    merge{{\"Merge analysis/hierarchies data\\n(Artifact transform)\"}}\n    instrument{{\"Instrument and upgrade\\n(Artifact transform)\"}}\n    typeHierarchy(Classpath with all super types)\n    artifactOutput(\"1. Artifact metadata: hash, name\\n2. Direct Super types\\n3. Class dependencies\")\n    originalClasspath(Original classpath)\n    originalClasspathInput(\"Original classpath as input:\\nto recalculate Resolve supertypes\\nstep on classpath change\")\n    metadata(\"1. Artifact metadata: hash, name\\n2. Dependencies instrumented type hierarchy\")\n    result(\"1. Transformed jar\\n2. hash of original jar\")\n    buildService1[[\"Build service 1:\\nused to provide type hierarchies of \\ndependencies\"]]\n    buildService2[[\"Build service 2:\\nused to get original Jar\\nvia hash from original classpath\"]]\n    jar --> collect --> artifactOutput --> merge --> metadata --> instrument --> result\n    collect --> typeHierarchy --> buildService1\n    originalClasspathInput --> merge\n    buildService1 --> merge\n    originalClasspath --> buildService2 --> instrument\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultBuildCacheServiceRegistration for service registration\nDESCRIPTION: Implementation of a registration mechanism for build cache services. This class handles the association between build cache configurations and their service factory implementations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/tasks/kotlin/src/stuff/hello.txt#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass DefaultBuildCacheServiceRegistration<T extends BuildCache> implements BuildCacheServiceRegistration<T> {\n    private final Class<T> configurationType;\n    private final BuildCacheServiceFactory<? super T> factory;\n\n    DefaultBuildCacheServiceRegistration(Class<T> configurationType, BuildCacheServiceFactory<? super T> factory) {\n        this.configurationType = configurationType;\n        this.factory = factory;\n    }\n\n    @Override\n    public Class<T> getConfigurationType() {\n        return configurationType;\n    }\n\n    @Override\n    public BuildCacheServiceFactory<? super T> getFactory() {\n        return factory;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Main SourceSet in Gradle Kotlin DSL\nDESCRIPTION: Extension property that provides type-safe access to the existing 'main' SourceSet from a SourceSetContainer using the named method to return a NamedDomainObjectProvider.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Provides the existing [main][org.gradle.api.tasks.SourceSet] element.\n */\nval org.gradle.api.tasks.SourceSetContainer.`main`: NamedDomainObjectProvider<org.gradle.api.tasks.SourceSet>\n    get() = named<org.gradle.api.tasks.SourceSet>(\"main\")\n```\n\n----------------------------------------\n\nTITLE: Restoring CircleCI Gradle Cache\nDESCRIPTION: Commands for restoring the Gradle cache in CircleCI to improve build performance by reusing previously downloaded dependencies.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- restore_cache:\n    keys:\n      - gradle-cache-{{ .Branch }}-{{ .Revision }}\n      - gradle-cache-{{ .Branch }}\n      - gradle-cache\n```\n\n----------------------------------------\n\nTITLE: Adding Artifacts to Compile Configuration\nDESCRIPTION: Extension functions for adding artifacts to the 'compile' configuration. Includes both simple and configurable versions.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nfun ArtifactHandler.`compile`(artifactNotation: Any): PublishArtifact =\n    add(\"compile\", artifactNotation)\n\nfun ArtifactHandler.`compile`(\n    artifactNotation: Any,\n    configureAction:  ConfigurablePublishArtifact.() -> Unit\n): PublishArtifact =\n    add(\"compile\", artifactNotation, configureAction)\n```\n\n----------------------------------------\n\nTITLE: Build Script Transformation Flow\nDESCRIPTION: Flowchart illustrating the build script transformation process, which occurs in a single execution unit alongside compilation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    sources(Buildscript sources)\n    compileAndInstrument{{\"Compile and instrument\\n(Execution engine)\"}}\n    classes(Buildscript classes*)\n    \n    sources --> compileAndInstrument --> classes\n```\n\n----------------------------------------\n\nTITLE: Configuring Eclipse Project for Gradle Build in XML\nDESCRIPTION: This XML snippet defines the Eclipse project configuration for a Gradle project. It specifies the project name and custom Gradle build commands.\nSOURCE: https://github.com/gradle/gradle/blob/master/subprojects/core/src/test/resources/org/gradle/api/tasks/ide/eclipse/expectedProjectFileWithCustomBuilder.txt#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<projectDescription>\n  <name>myProject</name>\n  <comment/>\n  <projects/>\n  <natures/>\n  <buildSpec>\n    <buildCommand>\n      <name>org.gradle.test.custom.custombuilder1</name>\n      <arguments/>\n    </buildCommand>\n    <buildCommand>\n      <name>org.gradle.test.custom.custombuilder2</name>\n      <arguments/>\n    </buildCommand>\n  </buildSpec>\n</projectDescription>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Username and Email for Gradle Contributions\nDESCRIPTION: Sets up the Git configuration with your name and email address, which is required for making contributions to the Gradle project. These git config commands ensure your commits are properly attributed.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit config user.name 'First Last'\ngit config user.email user@example.com\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper to New Version\nDESCRIPTION: Command to update the Gradle wrapper in a project to the latest version. This two-step approach ensures the wrapper is properly configured with the specified Gradle version.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/docs/release/notes.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew wrapper --gradle-version=@version@ && ./gradlew wrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for Gradle Test Environment\nDESCRIPTION: Commands for running Gradle tests in a Docker container, setting up the environment with specific parameters for cross-platform compatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v \"${PWD}\":/home/gradle/project -w /home/gradle/project gradle:7.0.0-jdk11 bash -c \"./gradlew test -PtestJavaVersion=11 --no-daemon\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Eclipse Project Settings with Custom Gradle Natures\nDESCRIPTION: XML configuration that sets up an Eclipse project with custom Gradle test natures. The file defines project metadata including name and nature declarations for Gradle-specific testing functionality.\nSOURCE: https://github.com/gradle/gradle/blob/master/subprojects/core/src/test/resources/org/gradle/api/tasks/ide/eclipse/expectedProjectFileWithCustomNature.txt#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<projectDescription>\n  <name>myProject</name>\n  <comment/>\n  <projects/>\n  <natures>\n    <nature>org.gradle.test.natures.CustomNature1</nature>\n    <nature>org.gradle.test.natures.CustomNature2</nature>\n  </natures>\n  <buildSpec/>\n</projectDescription>\n```\n\n----------------------------------------\n\nTITLE: Saving Gradle Cache in CircleCI\nDESCRIPTION: Commands for saving the Gradle cache to CircleCI for reuse in future builds, with paths specified for where the Gradle caches are stored.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- save_cache:\n    paths:\n      - ~/.gradle/caches\n      - ~/.gradle/wrapper\n    key: gradle-cache-{{ .Branch }}-{{ .Revision }}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Wrapper Version\nDESCRIPTION: This command updates the Gradle wrapper to the specified version. It demonstrates how to upgrade Gradle in a project.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/docs/release/notes-template.md#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n./gradlew wrapper --gradle-version=@version@ && ./gradlew wrapper\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Operation Descriptor Interface in Gradle Tooling API\nDESCRIPTION: Java interface definition for an internal operation descriptor in the Gradle tooling API. This interface extends InternalOperationDescriptor.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface Internal*Descriptor extends InternalOperationDescriptor\n```\n\n----------------------------------------\n\nTITLE: Interpolating Year Variable in Gradle\nDESCRIPTION: Shows how to reference a year variable using Gradle's string interpolation syntax with ${} notation. This is commonly used in build scripts and configuration files to inject dynamic values.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-incrementalBuildAdvanced/kotlin/src/templates/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nThis is the year ${year}\n```\n\n----------------------------------------\n\nTITLE: Accessing Compile Configuration in Gradle Kotlin DSL\nDESCRIPTION: Extension property that provides type-safe access to the 'compile' configuration from a NamedDomainObjectContainer of Configuration objects using the named method.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Provides the existing [compile][org.gradle.api.artifacts.Configuration] element.\n */\nval org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`compile`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>\n    get() = named<org.gradle.api.artifacts.Configuration>(\"compile\")\n```\n\n----------------------------------------\n\nTITLE: Checking Superclass Annotations in Java Test Filtering\nDESCRIPTION: This recursive method checks if any superclass of a given test class has a specific annotation. It's used to identify test classes that inherit certain categorization annotations from their parent classes.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nprivate static boolean hasSuperClassWithAnnotation(Class<?> testClass, Class<? extends Annotation> category) {\n    Class<?> superclass = testClass.getSuperclass();\n    if (superclass == null || superclass.equals(Object.class)) {\n        return false;\n    }\n    if (superclass.getAnnotation(category) != null) {\n        return true;\n    }\n    return hasSuperClassWithAnnotation(superclass, category);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BuildCacheServiceFactory for cache service registration\nDESCRIPTION: Interface for a factory that creates BuildCacheService implementations. This allows for different cache implementation strategies to be registered with the build system based on configuration.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/tasks/kotlin/src/stuff/hello.txt#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface BuildCacheServiceFactory<T extends BuildCache> {\n    BuildCacheService createBuildCacheService(T configuration, Describer describer);\n\n    /**\n     * Used to describe the build cache.\n     *\n     * @since 4.0\n     */\n    interface Describer {\n        /**\n         * Adds a configuration type and value to the description.\n         *\n         * @param type the type of the configuration\n         * @param value the value of the configuration\n         */\n        Describer config(String type, String value);\n\n        /**\n         * Adds a type and value to the description.\n         *\n         * @param type the type of the configuration\n         * @param value the value of the configuration\n         */\n        Describer type(String type, String value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in Gradle\nDESCRIPTION: Demonstrates string interpolation with a year variable in Gradle. The ${year} placeholder will be replaced with the actual year value at runtime.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/groovy/src/templates/README.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nThis is the year ${year}\n```\n\n----------------------------------------\n\nTITLE: Configuration Blocks in Gradle\nDESCRIPTION: Examples of Gradle configuration blocks, including a simple block with assignments and a parameterized block with a string argument. These blocks are used to configure different aspects of a Gradle build.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/main/resources/org/gradle/internal/declarativedsl/parsing/grammar_test_input.txt#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nblock {\n    a = 1\n    b = 2\n    c += 3\n}\nblock(\"param\") {\n    a = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle application with dynamic classpath and module path in Windows batch script\nDESCRIPTION: This snippet sets up the classpath and module path (if applicable), then executes the Gradle application with the appropriate Java command. It includes handling for system properties and command-line arguments.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/windowsStartScript.txt#2025-04-19_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n:execute\n@rem Setup the command line\n\nset CLASSPATH=$classpath\n<% if ( mainClassName.startsWith('--module ') ) { %>set MODULE_PATH=$modulePath<% } %>\n\n@rem Execute ${applicationName}\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %${optsEnvironmentVar}% <% if ( appNameSystemProperty ) { %>\"-D${appNameSystemProperty}=%APP_BASE_NAME%\"<% } %> -classpath \"%CLASSPATH%\" <% if ( mainClassName.startsWith('--module ') ) { %>--module-path \"%MODULE_PATH%\" <% } %>${mainClassName ?: entryPointArgs} %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable ${exitEnvironmentVar} if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%${exitEnvironmentVar}%\" exit %EXIT_CODE%\nExit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n```\n\n----------------------------------------\n\nTITLE: ADR Document: Java Serialization Guidelines\nDESCRIPTION: Markdown document detailing architectural decision to avoid Java serialization in favor of custom serialization implementations using binary formats internally and JSON for external tool communication. References Kryo framework as the primary serialization solution.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0002-avoid-using-java-serialization.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ADR-0002 - Avoid using Java serialization\n\n## Date\n\n2012-12-01\n\n## Context\n\nIn Gradle we often need to serialize in-memory objects for caching, or to transmit them across process barriers, etc.\nJava serialization is one way to implement this, however, despite its simplicity of implementation, it has several drawbacks:\n\n- **Performance:**\nJava's built-in serialization mechanism is often slower compared to other serialization solutions.\nThis is due to Java's use of reflection and the need to maintain a lot of metadata.\n\n- **Size of Serialized Data:**\nJava serialization tends to produce larger serialized objects because it includes class metadata and other overhead.\n\n- **Flexibility and Control:**\nJava serialization offers limited control over the serialization process, such as excluding certain fields, customizing naming conventions, and handling complex data structures more gracefully.\n\n- **Security:**\nJava serialization poses security risks, especially related to deserialization vulnerabilities.\n\n- **Version Compatibility:**\nWith Java serialization, even minor changes to a class (like adding a field) can break compatibility.\n\n- **Cross-Language Compatibility:**\nJava serialization is inherently Java-centric and does not support cross-language scenarios well.\n\n- **Type Safety:**\nJava serialization does not enforce type safety as strictly as some alternatives, potentially leading to runtime errors.\n\n## Decision\n\nWe do not use Java serialization.\nInstead, we use custom serialization where we explicitly describe how data objects should be serialized and deserialized.\n\nFor internal purposes, we use binary formats for their brevity.\nWe use the `Serializer` abstraction to separate the actual implementation of serialization from its uses.\n\nWhen sharing data with external tools, we use JSON.\n\n## Status\n\nACCEPTED\n\n## Consequences\n\n* The configuration cache serialization infrastructure should be used for all serialization.\n* Existing usages of Serializer outside of this infrastructure should be migrated to use it.\n* Existing usages of Java serialization should be migrated to use it.\n* It is ok for Serializer to be used as a replacement for Java serialization as a migration step.\n* The configuration cache uses the `Serializer`s based on the [Kryo framework](https://github.com/EsotericSoftware/kryo) for most serialization needs.\n```\n\n----------------------------------------\n\nTITLE: Checking for Slow Test Classification in Java\nDESCRIPTION: This method determines if a test class is marked as slow, which can be useful for filtering out time-consuming tests. It checks both direct annotations and annotations on superclasses.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nprivate static boolean isSlow(Class<?> testClass) {\n    return hasTestCategoryAnnotation(testClass, SlowTest.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker with CircleCI for Build Testing\nDESCRIPTION: Docker configuration for setting up a build testing environment with CircleCI, specifying container specifications including memory limits and environment variables.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/kotlin/services/person-service/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocker:\n  - image: cimg/openjdk:11.0\n    environment:\n      - GRADLE_OPTS: \"-Xmx1536m -XX:+HeapDumpOnOutOfMemoryError\"\n    resource_class: medium+\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Event Interface in Gradle Tooling API\nDESCRIPTION: Java interface definition for a progress event in the Gradle tooling API's events.problems package. This interface extends ProgressEvent.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic interface *Event extends ProgressEvent\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Convention in Gradle Kotlin DSL\nDESCRIPTION: Extension property that provides access to a custom convention. This is marked as deprecated since Gradle recommends using extensions instead of conventions.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Retrieves the [customConvention][org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.CustomConvention] convention.\n *\n * @deprecated The concept of conventions is deprecated. Use extensions instead.\n */\nval org.gradle.api.Project.`customConvention`: org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.CustomConvention get() =\n    ((this as? Project)?.convention ?: (this as org.gradle.api.internal.HasConvention).convention).getPluginByName<org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.CustomConvention>(\"customConvention\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Execution Groups Based on Package in Java\nDESCRIPTION: This method extracts execution group information from a test class's package name. It identifies which group a test belongs to based on its location in the package hierarchy, which helps with test organization and filtering.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic static Collection<String> getExecutionGroups(Class<?> testClass) {\n    Package aPackage = testClass.getPackage();\n    if (aPackage == null) {\n        return Collections.emptyList();\n    }\n    String packageName = aPackage.getName();\n    if (!packageName.startsWith(\"org.gradle\")) {\n        return Collections.emptyList();\n    }\n    if (packageName.startsWith(\"org.gradle.integtest.\")) {\n        return Collections.singleton(\"CORE_INTEGRATION\");\n    }\n    if (packageName.startsWith(\"org.gradle.integration.\")) {\n        return Collections.singleton(\"CORE_INTEGRATION\");\n    }\n    if (packageName.equals(\"org.gradle.integtests\") || packageName.startsWith(\"org.gradle.integtests.\")) {\n        return Collections.singleton(\"CORE_INTEGRATION\");\n    }\n    if (packageName.equals(\"org.gradle.plugin.use.resolve.internal\") || packageName.startsWith(\"org.gradle.plugin.use.resolve.internal.\")) {\n        if (aPackage.getName().contains(\"repository\")) {\n            return Collections.singleton(\"CORE_INTEGRATION\");\n        }\n        return Collections.singleton(\"CORE_UNIT\");\n    }\n    if (packageName.equals(\"org.gradle.api.tasks.wrapper\") || packageName.startsWith(\"org.gradle.api.tasks.wrapper.\")) {\n        return Collections.singleton(\"WRAPPER_UNIT\");\n    }\n    if (packageName.equals(\"org.gradle.wrapper\") || packageName.startsWith(\"org.gradle.wrapper.\")) {\n        return Arrays.asList(\"WRAPPER_UNIT\", \"WRAPPER_INTEGRATION\");\n    }\n    if (packageName.startsWith(\"org.gradle.internal.nativeintegration\")) {\n        return Collections.singleton(\"NATIVE_PLATFORM_UNIT\");\n    }\n    if (packageName.equals(\"org.gradle.launcher.daemon\") || packageName.startsWith(\"org.gradle.launcher.daemon.\")) {\n        return Collections.singleton(\"CORE_INTEGRATION\");\n    }\n    return Collections.singleton(\"CORE_UNIT\");\n}\n```\n\n----------------------------------------\n\nTITLE: Base Plugin Configuration Setup\nDESCRIPTION: Configuration setup in BasePlugin that creates consumable configurations for project artifacts.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/configuration-factory-methods.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.plugins.BasePlugin.configureConfigurations(Project project) {\n    // Creates consumable configuration\n    configurations.maybeCreateConsumableLocked(\"string\");\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing JVM Compatibility Issue in Gradle Cross Version Tests\nDESCRIPTION: Command to fix JVM compatibility issues when running cross version tests in Gradle. This sets the test Java version to 8.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-PtestJavaVersion=8\n```\n\n----------------------------------------\n\nTITLE: Auto-Testing Code Samples in Java Documentation\nDESCRIPTION: This snippet illustrates how to mark a Kotlin code block for automatic testing by adding the 'autoTested' class to the pre tag.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n/**\n * <pre class='kotlin autoTested'><code class=\"language-kotlin\">\n * project.ext.prop1 = \"foo\"\n * task doStuff {\n *     ext.prop2 = \"bar\"\n * }\n * subprojects { ext.${prop3} = false }\n * </code></pre>\n */\n```\n\n----------------------------------------\n\nTITLE: Imperative Task Configuration in Gradle (Anti-Pattern)\nDESCRIPTION: This example demonstrates the incorrect imperative approach to configuring a task in Gradle, where inputs and outputs are dynamically set during execution rather than being properly declared for task configuration.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory/groovy/src/stuff/hello.txt#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nclass BadTask extends DefaultTask {\n    File inputFile\n    File outputFile\n    @TaskAction\n    void doSomething() {\n        outputFile.text = inputFile.text.toUpperCase()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Single and Multiline Strings in Groovy\nDESCRIPTION: This snippet demonstrates how to declare single-line strings with escaped newlines and multiline strings using triple quotes in Groovy. It shows the difference in syntax and resulting output.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/stringParsingTestInput_multiLine.txt#2025-04-19_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\na = \"a\\nb\\nc\"\nb = \"\"\"a\nb\nc\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable API Artifact in Gradle Kotlin DSL\nDESCRIPTION: Extension function for ArtifactHandler that adds a configurable artifact to the 'api' configuration using a Kotlin lambda.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds an artifact to the 'api' configuration.\n *\n * @param artifactNotation the group of the module to be added as a dependency.\n * @param configureAction The action to execute to configure the artifact.\n * @return The artifact.\n *\n * @see [ArtifactHandler.add]\n */\nfun ArtifactHandler.`api`(\n    artifactNotation: Any,\n    configureAction:  ConfigurablePublishArtifact.() -> Unit\n): PublishArtifact =\n    add(\"api\", artifactNotation, configureAction)\n```\n\n----------------------------------------\n\nTITLE: Modifying CrossVersionPerformanceResults for Speed Testing\nDESCRIPTION: Modifications to CrossVersionPerformanceResults class to focus only on speed regression testing by commenting out memory testing code.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/performance/docs/performance-bisect.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    void assertCurrentVersionHasNotRegressed() {\n        def slower = checkBaselineVersion({ it.fasterThan(current) }, { it.getSpeedStatsAgainst(displayName, current) })\n        if (slower) {\n            throw new AssertionError(slower)\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding ProviderConvertible Dependencies to Compile Configuration\nDESCRIPTION: Deprecated extension function for adding a ProviderConvertible-based dependency to the 'compile' configuration with configuration action. Replaced by 'api' or 'implementation' configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun DependencyHandler.`compile`(\n    dependencyNotation: ProviderConvertible<*>,\n    dependencyConfiguration: Action<ExternalModuleDependency>\n): Unit = addConfiguredDependencyTo(\n    this, \"compile\", dependencyNotation, dependencyConfiguration\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Dependency in Gradle Kotlin DSL (Deprecated)\nDESCRIPTION: Deprecated extension function for DependencyHandler that adds a dependency to the 'compile' configuration. This configuration is deprecated in favor of 'api' or 'implementation'.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'compile' configuration.\n *\n * @param dependencyNotation notation for the dependency to be added.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\n@Deprecated(message = \"The compile configuration has been deprecated for dependency declaration. Please use the 'api' or 'implementation' configuration instead.\")\nfun DependencyHandler.`compile`(dependencyNotation: Any): Dependency? =\n    add(\"compile\", dependencyNotation)\n```\n\n----------------------------------------\n\nTITLE: Git Bisect Shell Commands\nDESCRIPTION: Shell commands for setting up the test environment and running git bisect to find performance regressions.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/performance/docs/performance-bisect.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/.gradle-bisect-override\nrsync -aRv subprojects/performance/src/integTest/groovy/org/gradle/performance/RealWorldNativePluginPerformanceTest.groovy \\\n           subprojects/performance/src/testFixtures/groovy/org/gradle/performance/fixture/{CrossVersionPerformanceResults,CrossVersionPerformanceTestRunner}.groovy \\\n           ~/.gradle-bisect-override\n\n./check_rev.sh RealWorldNativePluginPerformanceTest mediumNativeMonolithic\n\ngit bisect start HEAD REL_2.14 --  # HEAD=bad REL_2.14=good\ngit bisect run check_rev.sh RealWorldNativePluginPerformanceTest mediumNativeMonolithic\n```\n\n----------------------------------------\n\nTITLE: Accessing CodeNarc Configuration in Java\nDESCRIPTION: Method signature for retrieving the CodeNarc configuration. Returns a TextResource object containing the configuration details.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-text-resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.resources.TextResource getConfig()\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Progress Event in Gradle Build Events\nDESCRIPTION: Java class structure for implementing a new default progress event in the Gradle build events project. This class extends AbstractProgressEvent and implements Serializable and an internal event interface.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Default*Event extends AbstractProgressEvent<Internal*Descriptor> implements Serializable, Internal*Event\n```\n\n----------------------------------------\n\nTITLE: Formatting Javadoc Comments in Java\nDESCRIPTION: Demonstrates the basic formatting of Javadoc blocks, including summary, inline tags, paragraph breaks, and block tags. Shows proper indentation and line wrapping.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Returns an Image object that can then be painted on the screen.\n * <p>\n * The url argument must specify an absolute {@link URL}. \n * The name argument is a specifier that is relative to the url argument.\n * This method always returns immediately, whether or not the image exists. \n *\n * @param url an absolute URL giving the base location of the image\n * @param name the location of the image, relative to the url argument\n * @return the image at the specified URL\n * @see Image\n */\npublic Image getImage(URL url, String name) {\n   try {\n       return getImage(new URL(url, name));\n   } catch (MalformedURLException e) {\n       return null;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable Compile Dependency in Gradle Kotlin DSL (Deprecated)\nDESCRIPTION: Deprecated extension function for DependencyHandler that adds a configurable dependency to the 'compile' configuration. Users should migrate to 'api' or 'implementation' configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'compile' configuration.\n *\n * @param dependencyNotation notation for the dependency to be added.\n * @param dependencyConfiguration expression to use to configure the dependency.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\n@Deprecated(message = \"The compile configuration has been deprecated for dependency declaration. Please use the 'api' or 'implementation' configuration instead.\")\nfun DependencyHandler.`compile`(\n    dependencyNotation: String,\n    dependencyConfiguration: Action<ExternalModuleDependency>\n): ExternalModuleDependency = addDependencyTo(\n    this, \"compile\", dependencyNotation, dependencyConfiguration\n) as ExternalModuleDependency\n```\n\n----------------------------------------\n\nTITLE: Modifying Java Test Class for Performance Regression\nDESCRIPTION: Modified version of RealWorldNativePluginPerformanceTest to focus on specific test case and target version for regression testing. Includes changes to execution time parameters and test case selection.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/performance/docs/performance-bisect.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    @Ignore\n    @Unroll(\"Project '#testProject' measuring incremental build speed\")\n    def \"build real world native project\"() {\n...}\n\n    @Unroll('Project #buildSize native build #changeType')\n    def \"build with changes\"(String buildSize, String changeType, Amount<Duration> maxExecutionTimeRegression, String changedFile, Closure changeClosure) {\n...\n        runner.maxExecutionTimeRegression = maxExecutionTimeRegression\n        runner.targetVersions = ['2.14']\n        runner.useDaemon = true\n...\n        where:\n        buildSize | changeType              | maxExecutionTimeRegression | changedFile                       | changeClosure\n        \"medium\"  | 'header file change'    | millis(140)                | 'modules/project1/src/src50_h.h'  | this.&changeHeader\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching PMD RuleSet Configuration in Java\nDESCRIPTION: Method signature for obtaining the PMD rule set configuration. Returns a TextResource object with the rule set configuration content.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-text-resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.resources.TextResource getRuleSetConfig()\n```\n\n----------------------------------------\n\nTITLE: Implementing Architectural Decision Records Template in Markdown\nDESCRIPTION: A template for creating new Architectural Decision Records (ADRs) in the Gradle project. The template includes sections for title, date, context, decision, status, and consequences to document architectural decisions in a standardized format.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0001-use-architectural-decision-records.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ADR-000X - Title\n\n## Date\n\n20YY-MM-DD\n\n## Context\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n## Decision\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n## Status\n\n[PROPOSED, ACCEPTED, REJECTED, DEPRECATED, REPLACED]\n\n## Consequences\n\n* X\n* Y\n* Z\n```\n\n----------------------------------------\n\nTITLE: Adding Provider Dependencies to Compile Configuration\nDESCRIPTION: Deprecated extension function for adding a Provider-based dependency to the 'compile' configuration with configuration action. Replaced by 'api' or 'implementation' configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun DependencyHandler.`compile`(\n    dependencyNotation: Provider<*>,\n    dependencyConfiguration: Action<ExternalModuleDependency>\n): Unit = addConfiguredDependencyTo(\n    this, \"compile\", dependencyNotation, dependencyConfiguration\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Gradle Test Preconditions in Markdown\nDESCRIPTION: This code snippet illustrates various examples of using the @Requires annotation to define preconditions for Gradle tests. It shows how to specify conditions for Windows, JDK 8 or later, and combinations of conditions.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/precondition-tester/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- The test is running on Windows (`@Requires(UnitTestPreconditions.Windows)`)\n- The test is running on JDK 8 compatible JDKs (`@Requires(UnitTestPreconditions.Jdk8OrLater)`)\n- Arbitrary combinations of above (`@Requires([UnitTestPreconditions.Windows, UnitTestPreconditions.Jdk8OrLater])`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Groovydoc Overview Text in Java\nDESCRIPTION: Method signature for getting the overview text for Groovydoc. Returns a TextResource object containing the overview content.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-text-resource.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.resources.TextResource getOverviewText()\n```\n\n----------------------------------------\n\nTITLE: Defining Apache License 2.0 Header Template for Gradle Project Files\nDESCRIPTION: Standard Apache License 2.0 header template with regex patterns for copyright year ranges. The template includes placeholders for copyright years and attribution to either 'the original author or authors' or 'Gradle and contributors'.\nSOURCE: https://github.com/gradle/gradle/blob/master/build-logic-commons/code-quality-rules/src/main/resources/checkstyle/required-header.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/*\n * Copyright \\d\\d\\d\\d((\\s*-\\s*\\d\\d\\d\\d)|(,\\s*\\d\\d\\d\\d)+)? (the original author or authors|Gradle and contributors)\\.\n *\n * Licensed under the Apache License, Version 2\\.0 \\(the \"License\"\\);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Progress Event Interface in Gradle Tooling API\nDESCRIPTION: Java interface definition for an internal progress event in the Gradle tooling API. This interface extends InternalProgressEvent.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface Internal*Event extends InternalProgressEvent\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Javadoc Comments in Java\nDESCRIPTION: Shows how to create links to other classes, methods, and external URLs in Javadoc comments using the @link tag and HTML anchor tags.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/**\n * The url argument must specify an absolute {@link classname}. The name\n */\n```\n\nLANGUAGE: java\nCODE:\n```\n/**\n * This is a link to <a href=\"http://www.google.com\">Google</a>. The name\n */\n```\n\n----------------------------------------\n\nTITLE: Adding External Module Dependencies to Compile Configuration\nDESCRIPTION: Deprecated extension function for adding a detailed external module dependency to the 'compile' configuration with optional parameters. Replaced by 'api' or 'implementation' configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nfun DependencyHandler.`compile`(\n    group: String,\n    name: String,\n    version: String? = null,\n    configuration: String? = null,\n    classifier: String? = null,\n    ext: String? = null,\n    dependencyConfiguration: Action<ExternalModuleDependency>? = null\n): ExternalModuleDependency = addExternalModuleDependencyTo(\n    this, \"compile\", group, name, version, configuration, classifier, ext, dependencyConfiguration\n)\n```\n\n----------------------------------------\n\nTITLE: WAR Plugin Configuration Setup\nDESCRIPTION: Configuration setup for WAR plugin that creates resolvable dependency scopes for web applications.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/configuration-factory-methods.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.plugins.WarPlugin.configureConfigurations(...) {\n    // Sets up WAR-specific configurations\n    configurations.resolvableDependencyScopeLocked(\"string\");\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Code in Javadoc Comments in Java\nDESCRIPTION: Illustrates how to reference code elements like class names, method names, and variables in Javadoc comments using the @code tag.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Use the {@code Project} instance to configure the project.\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable Module Dependencies to Compile Configuration\nDESCRIPTION: Deprecated extension function for adding a configurable module dependency to the 'compile' configuration. Replaced by 'api' or 'implementation' configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T : ModuleDependency> DependencyHandler.`compile`(\n    dependency: T,\n    dependencyConfiguration: T.() -> Unit\n): T = add(\"compile\", dependency, dependencyConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Swift Binary Configuration Resolution\nDESCRIPTION: Constructor implementation for DefaultSwiftBinary that sets up resolvable dependency scopes for Swift compilation.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/configuration-factory-methods.txt#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.language.swift.internal.DefaultSwiftBinary.<init>(...) {\n    // Configures resolvable dependency scope\n    configurations.resolvableDependencyScopeLocked(\"string\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Isolation Debug Settings for Worker Actions\nDESCRIPTION: Example showing how to enable debugging for worker processes using process isolation configuration. Sets debug port to 5005.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/Debugging.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ngetWorkerExecutor()\n    .processIsolation(spec -> {\n        spec.getForkOptions().getDebugOptions().getEnabled().set(true);\n        spec.getForkOptions().getDebugOptions().getPort().set(5005);\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Descriptor Interface in Gradle Tooling API\nDESCRIPTION: Java interface definition for an operation descriptor in the Gradle tooling API's events.problems package. This interface extends OperationDescriptor.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic interface *Descriptor extends OperationDescriptor\n```\n\n----------------------------------------\n\nTITLE: Python String Variable Initialization Examples\nDESCRIPTION: Demonstrates six different ways to initialize string variables in Python using single and triple quotes. Shows empty strings, single space strings, and strings with multiple spaces using both quote styles.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/stringParsingTestInput_emptyOrBlank.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\na = \"\"\nb = \"\"\"\"\"\"\nc = \" \"\nd = \"\"\" \"\"\"\ne = \"   \"\nf = \"\"\"   \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Software Type Model Defaults\nDESCRIPTION: Extension function for adding model defaults for a specific software type in Gradle's model configuration.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun SharedModelDefaults.`softwareType`(configure: Action<org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.TestSoftwareType>): Unit =\n    add(\"softwareType\", org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.TestSoftwareType, configure)\n```\n\n----------------------------------------\n\nTITLE: Testing Groovy String Interpolation and Comparison in Gradle\nDESCRIPTION: This test class verifies Groovy string behavior, particularly focusing on how GStrings (interpolated strings) work compared to regular strings. It shows that GStrings with the same value compare equal with == but not with the equals() method.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/groovy/src/headers/headers.txt#2025-04-19_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\ndef \"strings\"() {\n    def name = \"fred\"\n    assert \"name=$name\" == \"name=fred\"\n    assert (\"name=$name\" as String) == \"name=fred\"\n    \n    def gstring = \"name=$name\"\n    def string = \"name=fred\"\n    assert gstring == string\n    assert !gstring.equals(string)\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gradle Runtime Process Relationships with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the relationships between different Gradle processes, including the CLI clients, Tooling API client, Gradle daemon, and worker processes. It shows how these components interact to execute a Gradle build.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/runtimes.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n        \n        gradle[\"Gradle CLI client\"]\n    \n        gradlew[\"Gradlew CLI client\"]\n    \n        subgraph IDE    \n            tapi[\"Tooling API client\"]\n        end\n        \n        daemon[\"Gradle daemon\"]\n        gradle --> daemon\n        gradlew --> daemon\n        tapi --> daemon\n        \n        worker[\"Worker process\"]\n        daemon --> worker\n\n        worker2[\"Worker process\"]\n        daemon --> worker2\n\n        worker3[\"Worker process\"]\n        daemon --> worker3\n```\n\n----------------------------------------\n\nTITLE: Defining Original JavaCompile Task Class in Java\nDESCRIPTION: Example of a JavaCompile task class before upgrading to lazy properties. It shows a traditional JavaBean-style property implementation for sourceCompatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nabstract class JavaCompile {\n    \n    private String sourceCompatibility = null;\n    \n    @Input\n    public String getSourceCompatibility() {\n        return sourceCompatibility;\n    }\n    \n    public void setSourceCompatibility(String sourceCompatibility) {\n        this.sourceCompatibility = sourceCompatibility;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Task Configuration Methods\nDESCRIPTION: Methods in AbstractCopyTask that use Groovy closures for configuring file copying behavior including filtering, exclusion, and file handling.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.AbstractCopyTask.eachFile(groovy.lang.Closure)\norg.gradle.api.tasks.AbstractCopyTask.exclude(groovy.lang.Closure)\norg.gradle.api.tasks.AbstractCopyTask.filter(groovy.lang.Closure)\norg.gradle.api.tasks.AbstractCopyTask.from(java.lang.Object, groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Basic Gradle Manifest Declaration\nDESCRIPTION: Standard Java manifest file declaration containing just the manifest version specification.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tutorial/manifest/common/src/config/javabasemanifest.txt#2025-04-19_snippet_0\n\nLANGUAGE: manifest\nCODE:\n```\nManifest-Version: 1.0\n```\n\n----------------------------------------\n\nTITLE: Checking Superclass Test Filtering in Java for Gradle\nDESCRIPTION: This method validates whether the current test class is a subclass of another test class that is already being executed. It prevents duplicate test execution when a test class hierarchy is present.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate boolean isSuperClass(Class<?> testClass) {\n    for (Class<?> currentClass : testClasses) {\n        if (isSubClass(currentClass, testClass)) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Event in Gradle Tooling API\nDESCRIPTION: Java class implementation for a default event in the Gradle tooling API's events.problems.internal package. This class implements the corresponding event interface.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class Default*Event implements *Event\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gradle Build State Hierarchy with Mermaid\nDESCRIPTION: This diagram illustrates the hierarchical relationship between different state elements in Gradle, from the build process at the top level down to individual projects. It shows how build sessions contain build trees, which contain builds, which contain projects.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/build-state-model.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  graph TD\n\n  process[\"build process\"]\n  \n  session[\"build session\"]\n  process --> session\n  \n  build_tree[\"build tree\"]\n  session --> build_tree\n  \n  build1[\"root build\"]\n  build_tree --> build1\n  \n  project1[\"root project\"]\n  build1 --> project1\n  \n  project2[\"project\"]\n  build1 --> project2\n  \n  build2[\"included build\"]\n  build_tree --> build2\n  \n  project3[\"root project\"]\n  build2 --> project3\n  \n  project4[\"project\"]\n  build2 --> project4\n\n```\n\n----------------------------------------\n\nTITLE: Original Plugin Usage of JavaCompile Task in Java\nDESCRIPTION: Example of how a plugin might use the JavaCompile task before bytecode interception, setting the sourceCompatibility directly.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void applyPlugin(Project project) {\n     project.tasks.named(\"compileJava\", JavaCompile.class, task -> {\n         task.setSourceCompatibility(\"1.8\");\n     });\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing SourceSet Related Classes\nDESCRIPTION: Methods in GroovySourceSet, ScalaSourceSet, and SourceSet interfaces that use Groovy closures as arguments. These methods may need to be reviewed for API stability.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.GroovySourceSet.groovy(groovy.lang.Closure)\norg.gradle.api.tasks.ScalaSourceSet.scala(groovy.lang.Closure)\norg.gradle.api.tasks.SourceSet.java(groovy.lang.Closure)\norg.gradle.api.tasks.SourceSet.resources(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Analyzing PmdExtension.getRuleSetFiles() Return Type\nDESCRIPTION: The getRuleSetFiles() method in PmdExtension returns a FileCollection that is not assignable to ConfigurableFileCollection.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-file-collection.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.plugins.quality.PmdExtension.getRuleSetFiles()\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build with Plugins and Dependencies in Groovy\nDESCRIPTION: This snippet sets up the Gradle build configuration, applying necessary plugins, defining repositories, and managing dependencies. It also configures specific build settings and creates custom tasks for the Gradle project.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory-subkey/kotlin/src/stuff/hello.txt#2025-04-19_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'groovy'\n    id 'java-gradle-plugin'\n    id 'maven-publish'\n    id 'ivy-publish'\n    id 'signing'\n    id 'jacoco'\n    id 'org.gradle.kotlin.kotlin-dsl' version '4.0.7'\n    id 'org.nosphere.apache.rat' version '0.8.0'\n    id 'org.gradle.test-retry' version '1.5.5'\n    id 'me.champeau.jmh' version '0.7.1'\n    id 'org.gradle.internal.impldep'\n    id 'gradlebuild.distribution.api-java'\n    id 'gradlebuild.distribution.api-groovy'\n    id 'gradlebuild.distribution.packaging'\n    id 'gradlebuild.distribution.security'\n    id 'gradlebuild.distribution.documentation'\n    id 'gradlebuild.distribution.testing'\n}\n\ngroup = 'org.gradle'\n\nrepositories {\n    maven {\n        name = 'Gradle libs'\n        url = \"${gradleRepositoryMirror().libs}\"\n    }\n    mavenCentral()\n    gradlePluginPortal()\n}\n\ndependencies {\n    implementation(gradleApi())\n    implementation(localGroovy())\n    implementation(project(':baseServices'))\n    implementation(project(':logging'))\n    implementation(project(':processServices'))\n    implementation(project(':coreApi'))\n    implementation(project(':modelCore'))\n    implementation(project(':core'))\n    implementation(project(':resources'))\n    implementation(project(':resourcesHttp'))\n    implementation(project(':snapshots'))\n    implementation(project(':fileCollections'))\n    implementation(project(':buildCache'))\n    implementation(project(':buildCachePackaging'))\n    implementation(project(':execution'))\n    implementation(project(':dependencyManagement'))\n    implementation(project(':plugins'))\n    implementation(project(':pluginUse'))\n    implementation(project(':buildOption'))\n    implementation(project(':platformBase'))\n    implementation(project(':platformNative'))\n    implementation(project(':diagnostics'))\n    implementation(project(':testingBase'))\n    implementation(project(':testing'))\n    implementation(project(':internalIntegTesting'))\n    implementation(project(':internalTesting'))\n    implementation(project(':normalization'))\n    implementation(project(':toolingApi'))\n    implementation(project(':persistentCache'))\n    implementation(project(':launcher'))\n    implementation(project(':version-control'))\n    implementation(project(':build-operations'))\n    implementation(project(':instrumentation'))\n    implementation(project(':composite-builds'))\n    implementation(project(':reporting'))\n    implementation(project(':coreFeatures'))\n    implementation(project(':build-events'))\n    implementation(project(':model-groovy'))\n    implementation(project(':persistent-cache'))\n    implementation(project(':worker-processes'))\n    implementation(project(':worker-services'))\n    implementation(project(':messaging'))\n    implementation(project(':native'))\n    implementation(project(':problems'))\n    implementation(project(':kotlin-dsl-plugins'))\n    implementation(project(':configuration-cache'))\n    implementation(project(':base-services-groovy'))\n    implementation(project(':base-annotations'))\n    implementation(project(':model-core'))\n    implementation(project(':base-services'))\n    implementation(project(':native'))\n    implementation(project(':messaging'))\n    implementation(project(':logging'))\n    implementation(project(':cli'))\n    implementation(project(':process-services'))\n    implementation(project(':resources'))\n    implementation(project(':persistent-cache'))\n    implementation(project(':core-api'))\n    implementation(project(':model-core'))\n    implementation(project(':core'))\n    implementation(project(':reporting'))\n    implementation(project(':platform-base'))\n    implementation(project(':platform-native'))\n    implementation(project(':language-java'))\n    implementation(project(':language-jvm'))\n    implementation(project(':language-groovy'))\n    implementation(project(':language-scala'))\n    implementation(project(':language-native'))\n    implementation(project(':tooling-api'))\n    implementation(project(':build-init'))\n    implementation(project(':build-comparison'))\n    implementation(project(':publish'))\n    implementation(project(':maven'))\n    implementation(project(':ivy'))\n    implementation(project(':signing'))\n    implementation(project(':ear'))\n    implementation(project(':code-quality'))\n    implementation(project(':antlr'))\n    implementation(project(':wrapper'))\n    implementation(project(':plugins'))\n    implementation(project(':osgi'))\n    implementation(project(':ide'))\n    implementation(project(':scala'))\n    implementation(project(':announce'))\n    implementation(project(':javascript'))\n    implementation(project(':diagnostics'))\n    implementation(project(':dependency-management'))\n    implementation(project(':jvm-services'))\n    implementation(project(':kotlin-dsl'))\n    implementation(project(':kotlin-dsl-provider-plugins'))\n    implementation(project(':kotlin-dsl-tooling-builders'))\n    implementation(project(':kotlin-dsl-tooling-models'))\n\n    testImplementation(project(':internalTesting'))\n    testImplementation(project(':internalIntegTesting'))\n    testImplementation(project(':kotlinDsl'))\n    testImplementation(project(':javaCompile'))\n    testImplementation(project(':jacoco'))\n    testImplementation(project(':diagnostics'))\n    testImplementation(project(':plugins'))\n    testImplementation(project(':codeQuality'))\n    testImplementation(project(':testKit'))\n    testImplementation(project(':platformNative'))\n    testImplementation(project(':platformJvm'))\n    testImplementation(project(':languageNative'))\n    testImplementation(project(':languageJvm'))\n    testImplementation(project(':languageJava'))\n    testImplementation(project(':languageGroovy'))\n    testImplementation(project(':pluginDevelopment'))\n    testImplementation(project(':testingJvm'))\n    testImplementation(project(':testingNative'))\n    testImplementation(project(':versionControl'))\n    testImplementation(project(':jacoco'))\n    testImplementation(project(':docs'))\n    testImplementation(project(':kotlinDsl'))\n    testImplementation(project(':kotlinDslIntegTests'))\n    testImplementation(project(':kotlinDslTestFixtures'))\n    testImplementation(project(':kotlinDslToolingModels'))\n    testImplementation(project(':kotlinDslProviderPlugins'))\n    testImplementation(project(':kotlinDslToolingBuilders'))\n    testImplementation(project(':kotlinDslProviders'))\n    testImplementation(project(':kotlinDslTestFixtures'))\n    testImplementation(project(':kotlinDslIntegTests'))\n    testImplementation(project(':kotlinDslProviderPlugins'))\n    testImplementation(project(':kotlinDslToolingBuilders'))\n    testImplementation(project(':kotlinDslToolingModels'))\n    testImplementation(project(':kotlinDslProviders'))\n    testImplementation(project(':kotlinDslTestFixtures'))\n    testImplementation(project(':kotlinDslIntegTests'))\n    testImplementation(project(':kotlinDslProviderPlugins'))\n    testImplementation(project(':kotlinDslToolingBuilders'))\n    testImplementation(project(':kotlinDslToolingModels'))\n    testImplementation(project(':kotlinDslProviders'))\n    testImplementation(project(':kotlinDslTestFixtures'))\n    testImplementation(project(':kotlinDslIntegTests'))\n    testImplementation(project(':kotlinDslProviderPlugins'))\n    testImplementation(project(':kotlinDslToolingBuilders'))\n    testImplementation(project(':kotlinDslToolingModels'))\n    testImplementation(project(':kotlinDslProviders'))\n}\n\ntasks.named('test') {\n    maxParallelForks = 4\n    forkEvery = 150\n}\n\ntasks.named('check') {\n    dependsOn(tasks.named('integTest'))\n}\n\ntasks.named('jar') {\n    manifest {\n        attributes('Implementation-Title': 'Gradle')\n        attributes('Implementation-Version': version)\n    }\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n            from components.java\n            pom {\n                name = 'Gradle'\n                description = 'Gradle is a build automation tool.'\n                url = 'https://gradle.org'\n                inceptionYear = '2008'\n                licenses {\n                    license {\n                        name = 'Apache License, Version 2.0'\n                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                scm {\n                    connection = 'scm:git:git://github.com/gradle/gradle.git'\n                    developerConnection = 'scm:git:ssh://git@github.com:gradle/gradle.git'\n                    url = 'https://github.com/gradle/gradle'\n                }\n            }\n        }\n    }\n}\n\nsigning {\n    sign publishing.publications.mavenJava\n}\n\ntasks.withType(Sign).configureEach {\n    onlyIf { gradle.taskGraph.hasTask(':publishMavenJavaPublicationToMavenRepository') }\n}\n\nrat {\n    excludes = [\n        'subprojects/docs/src/samples/**',\n        'subprojects/internal-andriod-performance-testing/src/templates/**',\n        'subprojects/internal-performance-testing/src/templates/**',\n        'subprojects/internal-testing/src/main/groovy/org/gradle/integtests/fixtures/executer/**',\n        'subprojects/internal-integ-testing/src/main/groovy/org/gradle/integtests/fixtures/**',\n        'subprojects/internal-performance-testing/src/main/groovy/org/gradle/performance/fixture/**',\n        'subprojects/internal-performance-testing/src/main/groovy/org/gradle/performance/results/**'\n    ]\n}\n\ntasks.register('integTest') {\n    group = 'verification'\n    description = 'Runs the integration tests.'\n    dependsOn(tasks.named('test'))\n}\n\ntasks.register('performanceTest') {\n    group = 'verification'\n    description = 'Runs the performance tests.'\n    dependsOn(tasks.named('test'))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gradle Platform Architecture with Mermaid\nDESCRIPTION: A Mermaid diagram showing the relationships between Gradle's platforms and architecture modules. Illustrates the hierarchical structure and dependencies between core, software, JVM, extensibility, and native platforms, along with cross-cutting modules.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/platforms.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n\n    subgraph core[\"core platform\"]\n\n        core_runtime[\"core-runtime module\"]\n        style core_runtime stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n        core_configuration[\"core-configuration module\"]\n        style core_configuration stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n        core_execution[\"core-execution module\"]\n        style core_execution stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n    end\n    style core fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n\n    documentation[\"documentation module\"]\n    style documentation stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n    ide[\"ide module\"]\n    style ide stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n    subgraph software[\"software platform\"]\n    end\n    style software fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    software --> core\n\n    subgraph jvm[\"jvm platform\"]\n    end\n    style jvm fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    jvm --> core\n    jvm --> software\n\n    subgraph extensibility[\"extensibility platform\"]\n    end\n    style extensibility fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    extensibility --> core\n    extensibility --> jvm\n\n    subgraph native[\"native platform\"]\n    end\n    style native fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    native --> core\n    native --> software\n\n    enterprise[\"enterprise module\"]\n    style enterprise stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n```\n\n----------------------------------------\n\nTITLE: Intercepted Plugin Usage of JavaCompile Task in Java\nDESCRIPTION: Example of how the plugin usage is transformed after bytecode interception, using an interceptor method to set the sourceCompatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void applyPlugin(Project project) {\n     project.tasks.named(\"compileJava\", JavaCompile.class, task -> {\n\t    JavaCompileInterceptorsDeclaration.intercept_setSourceCompatibility(task, \"1.8\");\n     });\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Java Annotation in Markdown\nDESCRIPTION: This snippet shows how to reference a Java annotation (@Requires) in Markdown, including a link to its source code on GitHub. It demonstrates the usage of preconditions in Gradle tests.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/precondition-tester/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[@Requires](https://github.com/gradle/gradle/blob/94ebe9eca6b9baf8c53a6033009298ec671de812/subprojects/internal-testing/src/main/groovy/org/gradle/util/Requires.java)\n```\n\n----------------------------------------\n\nTITLE: Examining SourceSet Method Return Types\nDESCRIPTION: Multiple methods in SourceSet return FileCollection types that are not assignable to ConfigurableFileCollection. This includes getAnnotationProcessorPath(), getCompileClasspath(), and getRuntimeClasspath().\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-file-collection.txt#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.SourceSet.getAnnotationProcessorPath()\norg.gradle.api.tasks.SourceSet.getCompileClasspath()\norg.gradle.api.tasks.SourceSet.getRuntimeClasspath()\n```\n\n----------------------------------------\n\nTITLE: String Interpolation and Multiline String Examples in Groovy\nDESCRIPTION: Shows various ways to work with strings in Groovy, including basic string assignment, string interpolation with ${}, triple quote syntax for multiline strings, and escaping special characters. Demonstrates both single-line and multiline string formatting with variable references.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/stringParsingTestInput_templates.txt#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\na = \"abc\"\nb = \"${a}\"\nc = \"\"\"${a}\"\"\"\nd = \"\"\" \"$a\" \"\"\"\ne = \"\"\" \"${a}\" \"\"\"\nf = \"\"\"\n  ${a.length}\n\"\"\"\ng = \"\"\"\\n\"\"\"\nh = \"\"\"\\${'$'}foo\"\"\"\ni = \"\"\"$ foo\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Operation Descriptor in Gradle Tooling API\nDESCRIPTION: Java class implementation for a default operation descriptor in the Gradle tooling API's events.problems.internal package. This class extends DefaultOperationDescriptor and implements the corresponding descriptor interface.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class Default*OperationDescriptor extends DefaultOperationDescriptor implements *Descriptor\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Gradle Architecture\nDESCRIPTION: Structured markdown documentation outlining the major components of Gradle's architecture including ADRs, platforms, runtimes, and build state model. Each section provides links to detailed documentation.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Gradle architecture documentation\n\nThis directory contains documentation that describes Gradle's architecture and how the various pieces fit together and work.\n\n## Architecture decision records (ADRs)\n\nThe Gradle team uses ADRs to record architectural decisions that the team has made.\n\nSee [Architecture decisions records](standards) for the list of ADRs.\nBe aware these are very technical descriptions of the decisions, and you might find the documentation below more useful as an introduction to the internals of Gradle.\n\n## Platform architecture\n\nGradle is arranged into several coarse-grained components called \"platforms\".\nEach platform provides support for some kind of automation, such as building JVM software or building Gradle plugins.\nMost platforms typically build on the features of other platforms.\n\nBy understanding the Gradle platforms and their relationships, you can get a feel for where in the Gradle source a particular feature might be implemented.\n\nSee [Gradle platform architecture](platforms.md) for a list of the platforms and more details.\n\n## Gradle runtimes\n\nGradle is also made up of several different processes that work together to \"run the build\", such as the Gradle daemon and the `gradlew` command.\n\nEach process, or \"runtime\", applies different constraints to the code that runs in that process.\nFor example, each process has different supported JVMs and a different set of services available for dependency injection.\nWhile a lot of Gradle source code runs only in the Gradle daemon, not all of it does and so, when working on some source code it is important to be aware of the runtimes in which it will run.\n\nSee [Gradle runtimes](runtimes.md) for a list of these runtimes and more details.\n\n## Build state model\n\nAs Gradle executes, it acts on various pieces of the build definition, such as each project in the build.\nGradle tracks the state of each piece and transitions each piece through its lifecycle as the build runs.\n\nA central part of the Gradle architecture is the \"build state model\", which holds the state for each piece and coordinates state transitions and other mutations. \nMost source code in Gradle is arranged by which part(s) of the build state model it acts on.\nThis affects the lifecycle of the code and the set of services available for dependency injection.\nWhen working on some source code it is important to be aware of the model it acts on.  \n\nSee [build state model](build-state-model.md) for more details.\n```\n\n----------------------------------------\n\nTITLE: Generated Groovy Call Interceptor for Gradle\nDESCRIPTION: Illustrates the generated Groovy call interceptor class that extends CallInterceptor. This class handles interception of dynamic Groovy method calls at runtime.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static class SetSourceCompatibilityCallInterceptor extends CallInterceptor {\n    public SetSourceCompatibilityCallInterceptor() {\n        super(InterceptScope.methodsNamed(\"setSourceCompatibility\"));\n    }\n\n    @Override\n    public Object intercept(Invocation invocation, String consumer) throws Throwable {\n        Object receiver = invocation.getReceiver();\n        if (receiver instanceof JavaCompile) {\n            File receiverTyped = (JavaCompile) receiver;\n            if (invocation.getArgsCount() == 1) {\n                return JavaCompileInterceptorsDeclaration.intercept_setSourceCompatibility(\n                        receiverTyped, \n                        (String) invocation.getArgument(0)\n                );\n            }\n        }\n        return invocation.callOriginal();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Class Dependencies\nDESCRIPTION: Major Java classes in Gradle's public API that depend on internal implementation classes. These relationships indicate potential API stability concerns since public classes are bound to internal implementations.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-not-extends-internal-types.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.DefaultTask extends org.gradle.api.internal.AbstractTask\norg.gradle.api.tasks.JavaExec extends org.gradle.api.internal.ConventionTask\norg.gradle.api.tasks.compile.JavaCompile extends org.gradle.api.internal.tasks.compile.HasCompileOptions\n```\n\n----------------------------------------\n\nTITLE: Examining JacocoViolationRulesContainer Method Return Types in Java\nDESCRIPTION: This snippet shows methods from the JacocoViolationRulesContainer class that have return types not assignable to Property or Provider types. These methods relate to getting rules and checking failure on violation.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.testing.jacoco.tasks.rules.JacocoViolationRulesContainer.getRules()\norg.gradle.testing.jacoco.tasks.rules.JacocoViolationRulesContainer.isFailOnViolation()\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build for Gradle Project in Groovy\nDESCRIPTION: This snippet sets up the Gradle build configuration for the Gradle project. It defines repositories, dependencies, and custom tasks for building and testing the Gradle codebase. The configuration includes setting up the build scan, applying plugins, and defining project-specific properties.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/launcher/src/main/resources/release-features.txt#2025-04-19_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'com.gradle.enterprise' version '3.13.3'\n}\n\napply from: 'gradle/build-scan.gradle'\napply from: 'gradle/shared-with-buildSrc/code-quality-configuration.gradle'\n\ndefaultTasks 'assemble'\n\ngradle.ext.isCiServer = System.getenv().containsKey('CI')\n\nwrapperVersion = '8.2'\ndistributionType = 'all'\n\nevaluationDependsOn(':distributions-full')\n\nsubprojects {\n    // We don't want to generate Javadoc for subprojects\n    tasks.withType(Javadoc).all { enabled = false }\n}\n\ntask configure {\n    doLast {\n        println \"Configured debug=\"\n    }\n}\n\nif (gradle.gradleVersion != rootProject.ext.gradleVersion) {\n    throw new GradleException(\"Gradle version mismatch: expected ${rootProject.ext.gradleVersion}, was ${gradle.gradleVersion}\")\n}\n\nwrapper {\n    distributionType = Wrapper.DistributionType.ALL\n}\n\ndependencies {\n    // Prevent Maven from grabbing all transitive dependencies\n    configurations.implementation.dependencies.all { dep ->\n        dep.transitive = false\n    }\n}\n\ntasks.register('verifyCommitHash') {\n    doLast {\n        def expectedCommitHash = System.getenv('EXPECTED_COMMIT_HASH')\n        if (expectedCommitHash) {\n            def actualCommitHash = 'git rev-parse HEAD'.execute().text.trim()\n            if (actualCommitHash != expectedCommitHash) {\n                throw new GradleException(\"Actual commit hash '$actualCommitHash' does not match expected commit hash '$expectedCommitHash'\")\n            }\n        }\n    }\n}\n\ntasks.register('verifyBuildReceipt') {\n    dependsOn ':distributions-full:binDistributionZip'\n    doLast {\n        def buildReceiptFile = file(\"subprojects/distributions-full/build/distributions/gradle-${version}-bin.zip\")\n        if (!buildReceiptFile.exists()) {\n            throw new GradleException(\"Build receipt file not found: $buildReceiptFile\")\n        }\n    }\n}\n\ntasks.register('verifyIsProductionBuildEnvironment') {\n    doLast {\n        if (!System.getenv('CI')) {\n            throw new GradleException(\"Not running in a CI environment\")\n        }\n    }\n}\n\ntasks.register('verifyTestFilesCleanup', Test) {\n    description = 'Verifies that test files are cleaned up after the build'\n    classpath = sourceSets.test.runtimeClasspath\n    testClassesDirs = sourceSets.test.output.classesDirs\n    ignoreFailures = true\n    reports.html.required = false\n}\n\ntasks.named('check') {\n    dependsOn verifyTestFilesCleanup\n}\n\ntasks.named('build') {\n    dependsOn verifyCommitHash\n    dependsOn verifyBuildReceipt\n    dependsOn verifyIsProductionBuildEnvironment\n}\n\ngradle.taskGraph.whenReady { graph ->\n    if (graph.hasTask(':release')) {\n        allprojects {\n            tasks.withType(Sign).configureEach {\n                onlyIf { true }\n            }\n        }\n    }\n}\n\nallprojects {\n    tasks.withType(Test).configureEach {\n        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1\n    }\n}\n\nsubprojects {\n    plugins.withType(JavaPlugin) {\n        sourceCompatibility = '1.8'\n        targetCompatibility = '1.8'\n    }\n}\n\nallprojects {\n    tasks.withType(AbstractArchiveTask).configureEach {\n        preserveFileTimestamps = false\n        reproducibleFileOrder = true\n    }\n}\n\ngradle.taskGraph.whenReady { taskGraph ->\n    if (taskGraph.hasTask(\":integTest\")) {\n        allprojects {\n            tasks.withType(Test).configureEach {\n                maxParallelForks = 1\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Script Dependencies\nDESCRIPTION: Kotlin DSL script classes and their dependencies on internal Gradle implementation details. Shows how Kotlin scripting support is built on internal delegate classes.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-not-extends-internal-types.txt#2025-04-19_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\norg.gradle.kotlin.dsl.KotlinBuildScript extends org.gradle.kotlin.dsl.support.delegates.ProjectDelegate\norg.gradle.kotlin.dsl.KotlinSettingsScriptTemplate extends org.gradle.kotlin.dsl.support.DefaultKotlinScript\norg.gradle.kotlin.dsl.DependencyHandlerScope extends org.gradle.kotlin.dsl.support.delegates.DependencyHandlerDelegate\n```\n\n----------------------------------------\n\nTITLE: Method Return Type Validation Messages\nDESCRIPTION: Validation messages indicating methods whose return types don't conform to expected Property interfaces like Property, MapProperty, ListProperty, SetProperty, or Provider.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMethod <org.gradle.api.reporting.model.ModelReport.isShowHidden()> does not have raw return type (boolean) assignable to any of [Property, MapProperty, ListProperty, SetProperty] in (ModelReport.java:0)\nMethod <org.gradle.api.tasks.AbstractCopyTask.getDuplicatesStrategy()> does not have raw return type (org.gradle.api.file.DuplicatesStrategy) assignable to any of [Property, MapProperty, ListProperty, SetProperty] in (AbstractCopyTask.java:0)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name in Gradle\nDESCRIPTION: Example of setting the root project name in a Gradle settings file using the rootProject.name property.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/main/resources/org/gradle/internal/declarativedsl/parsing/grammar_test_input.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.name = \"something\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Convention in Gradle Kotlin DSL\nDESCRIPTION: Extension function that provides a type-safe way to configure a custom convention using an Action closure. This is marked as deprecated as conventions are being phased out in favor of extensions.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Configures the [customConvention][org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.CustomConvention] convention.\n *\n * @deprecated The concept of conventions is deprecated. Use extensions instead.\n */\nfun org.gradle.api.Project.`customConvention`(configure: Action<org.gradle.kotlin.dsl.accessors.tasks.PrintAccessorsTest.CustomConvention>): Unit =\n    configure.execute(`customConvention`)\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright Header for Source Files in Java\nDESCRIPTION: This snippet provides the standard copyright header to be included at the top of all Gradle source files. It specifies the Apache License 2.0 terms and conditions.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright [YEAR OF FILE CREATION] Gradle and contributors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Extension using Kotlin DSL in Gradle\nDESCRIPTION: This code snippet demonstrates how to configure a plugin extension in Gradle using Kotlin DSL. It shows how to access an extension by type and apply configuration using lambda syntax.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/base/distribution/kotlin/custom/custom.txt#2025-04-19_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<SomePluginExtension> {\n    // configure the extension\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Symmetrical @Nullable Annotations in Gradle Classes\nDESCRIPTION: Documentation of classes and methods in the Gradle codebase where accessor methods are missing symmetrical @Nullable annotations. This inconsistency affects various components including StartParameter, tasks, IDE integration, and testing modules.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-symmetrical-accessors-nullability.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\norg.gradle.StartParameter.currentDir\norg.gradle.StartParameter.gradleUserHomeDir\norg.gradle.StartParameter.taskNames\norg.gradle.api.tasks.AbstractExecTask.args\norg.gradle.api.tasks.AbstractExecTask.executable\norg.gradle.api.tasks.Exec.args\norg.gradle.api.tasks.JavaExec.executable\norg.gradle.api.tasks.SourceSetOutput.resourcesDir\norg.gradle.api.tasks.bundling.War.classpath\norg.gradle.api.tasks.bundling.Zip.metadataCharset\norg.gradle.api.tasks.javadoc.Javadoc.destinationDir\norg.gradle.api.tasks.javadoc.Javadoc.maxMemory\norg.gradle.api.tasks.testing.testng.TestNGOptions.parallel\norg.gradle.caching.http.HttpBuildCache.url\norg.gradle.external.javadoc.MinimalJavadocOptions.destinationDirectory\norg.gradle.ide.visualstudio.tasks.GenerateFiltersFileTask.inputFile\norg.gradle.ide.visualstudio.tasks.GenerateProjectFileTask.inputFile\norg.gradle.ide.visualstudio.tasks.GenerateSolutionFileTask.inputFile\norg.gradle.ide.xcode.tasks.GenerateSchemeFileTask.inputFile\norg.gradle.ide.xcode.tasks.GenerateXcodeWorkspaceFileTask.inputFile\norg.gradle.plugins.ide.api.GeneratorTask.inputFile\norg.gradle.plugins.ide.eclipse.model.ResourceFilterMatcher.arguments\norg.gradle.plugins.ide.eclipse.model.ResourceFilterMatcher.id\norg.gradle.testing.jacoco.plugins.JacocoTaskExtension.destinationFile\n```\n\n----------------------------------------\n\nTITLE: Gradle Task Method Return Type Analysis\nDESCRIPTION: List of method signatures that have incompatible return types with Gradle's property system. These methods need to be updated to return appropriate Property or Provider types instead of raw types.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMethod <org.gradle.api.tasks.diagnostics.TaskReportTask.isDetail()> does not have raw return type (boolean) assignable to any of [Provider]\nMethod <org.gradle.api.tasks.javadoc.Groovydoc.getDestinationDir()> does not have raw return type (java.io.File) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\nMethod <org.gradle.api.tasks.javadoc.Groovydoc.getDocTitle()> does not have raw return type (java.lang.String) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies Pipeline Flow\nDESCRIPTION: Simple flowchart showing the single-step transformation process for project dependencies, which only involves instrumentation without API upgrades.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    jar(Original Jar)\n    instrument{{\"Instrument only\\n(Artifact transform)\"}}\n    result(\"1. Transformed jar\\n2. Original jar\")\n    \n    jar --> instrument --> result\n```\n\n----------------------------------------\n\nTITLE: Formatting Javadoc Paragraphs in Java\nDESCRIPTION: Shows how to properly format paragraphs in Javadoc comments, including the use of blank lines and the <p> tag for paragraph breaks.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * that draw the image will incrementally paint on the screen.\n *\n * @param  url  an absolute URL giving the base location of the image\n */\n```\n\nLANGUAGE: java\nCODE:\n```\n/**\n * argument is a specifier that is relative to the url argument.\n * <p>\n * This method always returns immediately, whether or not the\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Evaluation Listener in Gradle\nDESCRIPTION: This snippet sets up a project evaluation listener that logs the project name and path when evaluation is finished. It demonstrates how to hook into Gradle's project evaluation lifecycle.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsGroovy/groovy/source/keep.txt#2025-04-19_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\ngradle.addProjectEvaluationListener(new ProjectEvaluationListener() {\n    @Override\n    void beforeEvaluate(Project project) {\n    }\n\n    @Override\n    void afterEvaluate(Project project, ProjectState state) {\n        println \"Project $project.name evaluated. Path: $project.path\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Internal PGP Signatory Provider in Java\nDESCRIPTION: The PgpSignatoryProvider class extends BasePgpSignatoryProvider and implements ConfigurableSignatoryProvider, both of which are Gradle Internal APIs. This may lead to compatibility issues in future Gradle versions.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-not-extends-internal-types.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.plugins.signing.signatory.pgp.PgpSignatoryProvider extends org.gradle.security.internal.pgp.BasePgpSignatoryProvider, org.gradle.plugins.signing.signatory.internal.ConfigurableSignatoryProvider\n```\n\n----------------------------------------\n\nTITLE: Gradle Method Return Type Declarations\nDESCRIPTION: Collection of method signatures from Gradle codebase that have return types incompatible with Property, MapProperty, ListProperty, SetProperty, or Provider interfaces. These methods may need refactoring to support Gradle's property type system.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// JVM Application Tasks\norg.gradle.jvm.application.tasks.CreateStartScripts.getWindowsStartScriptGenerator() // returns ScriptGenerator\norg.gradle.jvm.tasks.Jar.getManifest() // returns Manifest\norg.gradle.jvm.tasks.Jar.getManifestContentCharset() // returns String\n\n// Native Platform Tasks\norg.gradle.language.assembler.tasks.Assemble.getAssemblerArgs() // returns List\norg.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask.getMacros() // returns Map\norg.gradle.nativeplatform.tasks.AbstractLinkTask.isDebuggable() // returns boolean\n\n// IDE Integration Tasks\norg.gradle.plugins.ide.eclipse.GenerateEclipseClasspath.getClasspath() // returns EclipseClasspath\norg.gradle.plugins.ide.idea.GenerateIdeaModule.getModule() // returns IdeaModule\n```\n\n----------------------------------------\n\nTITLE: Accessing Delete Task in Gradle Kotlin DSL\nDESCRIPTION: Extension property that provides type-safe access to the existing 'delete' task from a TaskContainer using the named method to return a TaskProvider.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Provides the existing [delete][org.gradle.api.tasks.Delete] task.\n */\nval TaskContainer.`delete`: TaskProvider<org.gradle.api.tasks.Delete>\n    get() = named<org.gradle.api.tasks.Delete>(\"delete\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Project Dependencies for WAR Packaging in XML\nDESCRIPTION: This XML snippet defines a Maven project structure for a WAR artifact. It includes multiple dependencies with different scopes (compile, runtime, provided, test) and specifies exclusions for certain dependencies. The project uses variable substitution for groupId and version.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/software/maven/src/integTest/resources/org/gradle/integtests/publish/maven/pomGeneration/expectedPom.txt#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>${groupId}</groupId>\n  <artifactId>mywar</artifactId>\n  <version>${version}</version>\n  <packaging>war</packaging>\n  <dependencies>\n    <dependency>\n      <groupId>group4</groupId>\n      <artifactId>providedRuntime</artifactId>\n      <version>1.0</version>\n      <type>zip</type>\n      <scope>provided</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>*</artifactId>\n          <groupId>*</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group4</groupId>\n      <artifactId>providedRuntime-util</artifactId>\n      <version>1.0</version>\n      <type>war</type>\n      <scope>provided</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>*</artifactId>\n          <groupId>*</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group6</groupId>\n      <artifactId>testRuntime</artifactId>\n      <version>1.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>group2</groupId>\n      <artifactId>providedCompile</artifactId>\n      <version>1.0</version>\n      <scope>provided</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>*</artifactId>\n          <groupId>*</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group1</groupId>\n      <artifactId>compile</artifactId>\n      <version>1.0</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>excludeArtifact</artifactId>\n          <groupId>excludeGroup</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>group3</groupId>\n      <artifactId>runtime</artifactId>\n      <version>1.0</version>\n      <scope>runtime</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>excludeArtifact2</artifactId>\n          <groupId>excludeGroup2</groupId>\n        </exclusion>\n      </exclusions>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>group5</groupId>\n      <artifactId>testCompile</artifactId>\n      <version>1.0</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Using Symbols in Javadoc Comments in Java\nDESCRIPTION: Demonstrates how to properly use HTML entities for special characters like <, >, and & in Javadoc comments.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * This &amp; that.\n */\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Initialization in Gradle\nDESCRIPTION: This snippet demonstrates how to set up project initialization in Gradle. It configures various project properties and adds a task to print project information. This is useful for customizing project setup and debugging build configurations.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsGroovy/groovy/source/keep.txt#2025-04-19_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nallprojects {\n    afterEvaluate { project ->\n        project.version = '1.0'\n        project.group = 'com.example'\n\n        project.tasks.create('printInfo') {\n            doLast {\n                println \"Project: $project.name\"\n                println \"Version: $project.version\"\n                println \"Group: $project.group\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Internal Exception Class in Java\nDESCRIPTION: The ProcessExecutionException class extends ExecException, which is a Gradle Internal API. This could potentially cause issues with exception handling and compatibility in future Gradle releases.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-not-extends-internal-types.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.process.ProcessExecutionException extends org.gradle.process.internal.ExecException\n```\n\n----------------------------------------\n\nTITLE: Non-compliant IDEA Plugin Method Signatures\nDESCRIPTION: Methods in IDEA plugin classes (GenerateIdeaModule, GenerateIdeaProject, GenerateIdeaWorkspace) that need to be updated to return Provider-based types.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// GenerateIdeaModule.java\nXmlTransformer getXmlTransformer()\n\n// GenerateIdeaProject.java\nIdeaProject getIdeaProject()\nFile getOutputFile()\nXmlTransformer getXmlTransformer()\n\n// GenerateIdeaWorkspace.java\nIdeaWorkspace getWorkspace()\nXmlTransformer getXmlTransformer()\n```\n\n----------------------------------------\n\nTITLE: Javadoc Formatting for Android Studio\nDESCRIPTION: This example shows how Android Studio displays Javadoc comments, highlighting the importance of a detailed summary fragment.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n/**\n * A // Displayed\n * <p>\n * B // Not displayed\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build for Gradle Project\nDESCRIPTION: This snippet sets up the Gradle build configuration for the Gradle project. It defines the project version, applies necessary plugins, and configures dependencies and repositories.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/files/misc/kotlin/src/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id 'java-library'\n    id 'groovy'\n    id 'java-test-fixtures'\n    id 'maven-publish'\n    id 'ivy-publish'\n    id 'signing'\n    id 'jacoco'\n    id 'org.gradle.crypto.checksum'\n    id 'org.gradle.build.bootstrap'\n    id 'org.gradle.build.setup-ide'\n    id 'org.gradle.build.build-announcements'\n    id 'org.gradle.build.update-versions'\n    id 'org.gradle.build.provider-api'\n    id 'org.gradle.build.versioning'\n    id 'org.gradle.build.concurrent-test-executor'\n    id 'org.gradle.build.binary-compatibility'\n}\n\ngroup = 'org.gradle'\nversion = gradleVersion\n\nrepositories {\n    maven {\n        name 'Gradle libs'\n        url 'https://repo.gradle.org/gradle/libs'\n    }\n    maven {\n        name 'Gradle libs releases'\n        url 'https://repo.gradle.org/gradle/libs-releases'\n    }\n    mavenCentral()\n}\n\ndependencies {\n    api \"org.codehaus.groovy:groovy:${libs.groovy}\"\n    api \"org.codehaus.groovy:groovy-json:${libs.groovy}\"\n    api \"org.codehaus.groovy:groovy-nio:${libs.groovy}\"\n    api \"org.codehaus.groovy:groovy-templates:${libs.groovy}\"\n    api \"org.codehaus.groovy:groovy-xml:${libs.groovy}\"\n    api \"org.codehaus.groovy:groovy-datetime:${libs.groovy}\"\n\n    api \"org.apache.ant:ant:${libs.ant}\"\n    api \"com.google.guava:guava:${libs.guava}\"\n    api \"commons-io:commons-io:${libs.commonsIo}\"\n    api \"commons-lang:commons-lang:${libs.commonsLang}\"\n    api \"com.google.code.findbugs:jsr305:${libs.jsr305}\"\n    api \"org.slf4j:slf4j-api:${libs.slf4j}\"\n\n    implementation \"com.google.code.gson:gson:${libs.gson}\"\n    implementation \"org.ow2.asm:asm:${libs.asm}\"\n    implementation \"org.ow2.asm:asm-commons:${libs.asm}\"\n\n    testImplementation \"junit:junit:${libs.junit}\"\n    testImplementation \"org.spockframework:spock-core:${libs.spock}\"\n    testImplementation \"cglib:cglib:${libs.cglib}\"\n    testImplementation \"org.objenesis:objenesis:${libs.objenesis}\"\n    testImplementation \"org.hamcrest:hamcrest-core:${libs.hamcrest}\"\n    testImplementation \"org.testng:testng:${libs.testng}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Multi-Cause Exception in Java\nDESCRIPTION: The WorkerExecutionException class extends DefaultMultiCauseException, which is a Gradle Internal API. This may lead to unexpected behavior or compatibility issues when handling exceptions in future Gradle versions.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-not-extends-internal-types.txt#2025-04-19_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.workers.WorkerExecutionException extends org.gradle.internal.exceptions.DefaultMultiCauseException\n```\n\n----------------------------------------\n\nTITLE: Non-compliant Jacoco Plugin Method Signatures\nDESCRIPTION: Methods in Jacoco plugin classes that need to be updated to return Provider types for report and rule containers.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// JacocoCoverageVerification.java\nJacocoViolationRulesContainer getViolationRules()\n\n// JacocoReport.java\nReportContainer getReports()\nJacocoReportsContainer getReports()\n```\n\n----------------------------------------\n\nTITLE: Adding API Dependency with Detailed Module Parameters in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyHandler that adds a dependency to the 'api' configuration with detailed module parameters and an optional configuration action.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'api' configuration.\n *\n * @param group the group of the module to be added as a dependency.\n * @param name the name of the module to be added as a dependency.\n * @param version the optional version of the module to be added as a dependency.\n * @param configuration the optional configuration of the module to be added as a dependency.\n * @param classifier the optional classifier of the module artifact to be added as a dependency.\n * @param ext the optional extension of the module artifact to be added as a dependency.\n * @param dependencyConfiguration expression to use to configure the dependency.\n * @return The dependency.\n *\n * @see [DependencyHandler.create]\n * @see [DependencyHandler.add]\n */\nfun DependencyHandler.`api`(\n    group: String,\n    name: String,\n    version: String? = null,\n    configuration: String? = null,\n    classifier: String? = null,\n    ext: String? = null,\n    dependencyConfiguration: Action<ExternalModuleDependency>? = null\n): ExternalModuleDependency = addExternalModuleDependencyTo(\n    this, \"api\", group, name, version, configuration, classifier, ext, dependencyConfiguration\n)\n```\n\n----------------------------------------\n\nTITLE: C++ Binary Configuration Resolution\nDESCRIPTION: Constructor implementation for DefaultCppBinary that configures resolvable dependency scopes for C++ compilation.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/configuration-factory-methods.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.language.cpp.internal.DefaultCppBinary.<init>(...) {\n    // Calls resolvableDependencyScopeLocked() for dependency resolution\n    configurations.resolvableDependencyScopeLocked(\"string\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Enterprise Plugin in settings.gradle\nDESCRIPTION: This snippet shows the Groovy DSL version for configuring the Gradle Enterprise plugin in settings.gradle. It sets up the server URL, build scan publishing options, and includes custom environment data.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/api/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'com.gradle.enterprise' version '3.7'\n}\n\ngradleEnterprise {\n    server = 'https://ge.example.com'\n    \n    buildScan {\n        termsOfUseUrl = 'https://ge.example.com/terms-of-service'\n        termsOfUseAgree = 'yes'\n        publishAlways()\n        \n        // Add custom environment data\n        value('OS', System.getProperty('os.name'))\n        value('JDK', System.getProperty('java.version'))\n        \n        // Add CI build information\n        background {\n            value('Git Status', grgit.status().isClean() ? 'Clean' : 'Dirty')\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Signature Analysis - Java Classes\nDESCRIPTION: Collection of Java method signatures that use internal Gradle APIs or non-standard types.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_17\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.buildinit.tasks.InitBuild.getProjectLayoutRegistry()\norg.gradle.external.javadoc.OptionLessJavadocOptionFileOption.write()\norg.gradle.jvm.tasks.Jar.manifest(groovy.lang.Closure)\norg.gradle.jvm.tasks.Jar.metaInf(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Task API Methods Using Groovy Closure\nDESCRIPTION: Methods from org.gradle.api.Task interface that accept Groovy Closure arguments, representing potential API compatibility issues.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.Task.configure(groovy.lang.Closure)\norg.gradle.api.Task.doFirst(groovy.lang.Closure)\norg.gradle.api.Task.doLast(groovy.lang.Closure)\norg.gradle.api.Task.onlyIf(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Inappropriate Use of Lazy Types for Non-calculated Values in Gradle\nDESCRIPTION: Examples of unnecessary use of lazy types for non-calculated values in Gradle. These show Property and Provider being used for values that are not calculated and cannot be changed.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nclass Example {\n    Property<String> getSomeProperty()\n\n    Example() {\n        getSomeProperty().set(\"value\")\n        getSomeProperty().disallowChanges()\n    }\n}\n\nclass Example2 {\n    Provider<String> getSomeProperty() {\n        return project.provider(() -> \"value\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Provider for Gradle\nDESCRIPTION: This code snippet defines a LoggerProvider implementation that creates SLF4J-based loggers. It includes a factory method to construct logger instances and provides context about configuration parameters.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/shared/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLoggerProvider loggerProvider = loggerName -> {\n    return new SLF4JLogger(loggerName, LogLevel.DEBUG);\n};\n```\n\n----------------------------------------\n\nTITLE: Text Resource Return Type Methods in Gradle APIs\nDESCRIPTION: Collection of method signatures from different Gradle API classes that return raw TextResource type. This includes methods from CheckstyleExtension, CodeNarcExtension, PmdExtension, CustomizableHtmlReport, and TemplateBasedScriptGenerator classes.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-text-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.plugins.quality.CheckstyleExtension.getConfig() -> org.gradle.api.resources.TextResource\norg.gradle.api.plugins.quality.CodeNarcExtension.getConfig() -> org.gradle.api.resources.TextResource\norg.gradle.api.plugins.quality.PmdExtension.getRuleSetConfig() -> org.gradle.api.resources.TextResource\norg.gradle.api.reporting.CustomizableHtmlReport.getStylesheet() -> org.gradle.api.resources.TextResource\norg.gradle.jvm.application.scripts.TemplateBasedScriptGenerator.getTemplate() -> org.gradle.api.resources.TextResource\n```\n\n----------------------------------------\n\nTITLE: Analyzing Method Signatures in AbstractCopyTask\nDESCRIPTION: Methods in AbstractCopyTask class that use Groovy closures or internal Gradle APIs as arguments or return types. This may impact API stability and compatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.AbstractCopyTask.from(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.tasks.AbstractCopyTask.getRootSpec()\norg.gradle.api.tasks.AbstractCopyTask.include(groovy.lang.Closure)\norg.gradle.api.tasks.AbstractCopyTask.into(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.tasks.AbstractCopyTask.rename(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable API Dependency with Kotlin Lambda in Gradle Kotlin DSL\nDESCRIPTION: Generic extension function for DependencyHandler that adds a ModuleDependency to the 'api' configuration and configures it using a Kotlin lambda.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency to the 'api' configuration.\n *\n * @param dependency dependency to be added.\n * @param dependencyConfiguration expression to use to configure the dependency.\n * @return The dependency.\n *\n * @see [DependencyHandler.add]\n */\nfun <T : ModuleDependency> DependencyHandler.`api`(\n    dependency: T,\n    dependencyConfiguration: T.() -> Unit\n): T = add(\"api\", dependency, dependencyConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Wrapper Task Method Return Types\nDESCRIPTION: Methods from Gradle's Wrapper task class that return non-Property types when Property types are expected. Includes getters for configuration values like distribution settings and file locations.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.wrapper.Wrapper.getArchiveBase() -> PathBase\norg.gradle.api.tasks.wrapper.Wrapper.getArchivePath() -> String\norg.gradle.api.tasks.wrapper.Wrapper.getBatchScript() -> File\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Level Mapping in Gradle\nDESCRIPTION: This code maps Gradle LogLevel values to SLF4J logging levels. It shows how to translate between different logging frameworks by establishing equivalent logging severity levels.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/shared/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate org.slf4j.event.Level toSLF4JLevel(LogLevel level) {\n    switch (level) {\n        case DEBUG:\n            return org.slf4j.event.Level.DEBUG;\n        case INFO:\n            return org.slf4j.event.Level.INFO;\n        case LIFECYCLE:\n            return org.slf4j.event.Level.INFO;\n        case WARN:\n            return org.slf4j.event.Level.WARN;\n        case QUIET:\n            return org.slf4j.event.Level.INFO;\n        case ERROR:\n            return org.slf4j.event.Level.ERROR;\n        default:\n            throw new IllegalArgumentException(String.format(\"Don't know how to map the log level %s to a SLF4J level.\", level));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Scripts Task Method Return Types\nDESCRIPTION: Methods from Gradle's CreateStartScripts task that return non-Property types when Property types are expected. Includes configuration for generating application start scripts.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.jvm.application.tasks.CreateStartScripts.getApplicationName() -> String\norg.gradle.jvm.application.tasks.CreateStartScripts.getDefaultJvmOpts() -> Iterable\norg.gradle.jvm.application.tasks.CreateStartScripts.getExecutableDir() -> String\n```\n\n----------------------------------------\n\nTITLE: Examining SourceTask Method Signatures\nDESCRIPTION: Methods in SourceTask class that use Groovy closures as arguments. These methods may need to be reviewed for API stability and potential Java-friendly alternatives.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.SourceTask.exclude(groovy.lang.Closure)\norg.gradle.api.tasks.SourceTask.include(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Inappropriate Use of Lazy Types for Nested Values in Gradle\nDESCRIPTION: Example of unnecessary use of lazy types for nested values in Gradle. This pattern makes it difficult for users to create instances and access properties of the nested type.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ninterface NestedType {\n    Property<String> getSomeProperty()\n}\nclass Example {\n    Property<NestedType> getNestedProperty()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SLF4J Logger Integration in Gradle\nDESCRIPTION: This code shows the implementation of a custom SLF4JLogger class that adapts between Gradle's logging system and SLF4J. It handles log level checks, message formatting, and exception handling.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/shared/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate final class SLF4JLogger implements Logger {\n    private final String name;\n    private final org.slf4j.Logger logger;\n    private final LogLevel logLevel;\n\n    private SLF4JLogger(String name, LogLevel logLevel) {\n        this.name = name;\n        this.logger = org.slf4j.LoggerFactory.getLogger(name);\n        this.logLevel = logLevel;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public boolean isEnabled(LogLevel level) {\n        org.slf4j.event.Level slf4jLevel = toSLF4JLevel(level);\n        return logger.isEnabledForLevel(slf4jLevel);\n    }\n\n    @Override\n    public void log(LogLevel level, String message) {\n        log(level, message, null);\n    }\n\n    @Override\n    public void log(LogLevel level, String message, @Nullable Throwable throwable) {\n        org.slf4j.event.Level slf4jLevel = toSLF4JLevel(level);\n        if (logger.isEnabledForLevel(slf4jLevel)) {\n            logger.makeLoggingEventBuilder(slf4jLevel)\n                .setCause(throwable)\n                .log(message);\n        }\n    }\n\n    @Override\n    public LogLevel getLevel() {\n        return logLevel;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-compliant Signing Plugin Method Signatures\nDESCRIPTION: Methods in Sign class that need to be updated to return Provider-based types including Property and various collection Properties.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Sign.java\nMap getGeneratorsByKey()\nSignatory getSignatory()\nSignatureType getSignatureType()\nDomainObjectSet getSignatures()\nMap getSignaturesByKey()\nSignature getSingleSignature()\nboolean isRequired()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Sync Task Method Signatures\nDESCRIPTION: Methods in Sync class that return internal Gradle API types. This usage of non-public APIs may need to be reviewed for long-term compatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.Sync.getRootSpec()\n```\n\n----------------------------------------\n\nTITLE: Adding API Dependency Constraint in Gradle Kotlin DSL\nDESCRIPTION: Extension function for DependencyConstraintHandler that adds a dependency constraint to the 'api' configuration.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Adds a dependency constraint to the 'api' configuration.\n *\n * @param constraintNotation the dependency constraint notation\n *\n * @return the added dependency constraint\n *\n * @see [DependencyConstraintHandler.add]\n */\nfun DependencyConstraintHandler.`api`(constraintNotation: Any): DependencyConstraint =\n    add(\"api\", constraintNotation)\n```\n\n----------------------------------------\n\nTITLE: InitBuild Task Method Return Types\nDESCRIPTION: Methods from Gradle's InitBuild task that return non-Property types when Property types are expected. Includes getters for build initialization configuration.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.buildinit.tasks.InitBuild.getDsl() -> String\norg.gradle.buildinit.tasks.InitBuild.getPackageName() -> String\norg.gradle.buildinit.tasks.InitBuild.getProjectLayoutRegistry() -> ProjectLayoutSetupRegistry\n```\n\n----------------------------------------\n\nTITLE: Asciidoc Chapter Title Format\nDESCRIPTION: Example of proper chapter title formatting in Asciidoc including the required license header and chapter ID for cross-referencing.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: asciidoc\nCODE:\n```\n[[toolchains]]\n= Toolchains for JVM projects\n```\n\n----------------------------------------\n\nTITLE: Analyzing CompileOptions Method Return Types\nDESCRIPTION: Several methods in CompileOptions return FileCollection types that are not assignable to ConfigurableFileCollection. This includes getAnnotationProcessorPath(), getBootstrapClasspath(), and getSourcepath().\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-file-collection.txt#2025-04-19_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.compile.CompileOptions.getAnnotationProcessorPath()\norg.gradle.api.tasks.compile.CompileOptions.getBootstrapClasspath()\norg.gradle.api.tasks.compile.CompileOptions.getSourcepath()\n```\n\n----------------------------------------\n\nTITLE: Examining TaskCollection and TaskContainer Methods\nDESCRIPTION: Methods in TaskCollection and TaskContainer interfaces that use Groovy closures as arguments. These methods may need Java-friendly alternatives for better API stability.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.TaskCollection.getByName(java.lang.String, groovy.lang.Closure)\norg.gradle.api.tasks.TaskCollection.matching(groovy.lang.Closure)\norg.gradle.api.tasks.TaskCollection.whenTaskAdded(groovy.lang.Closure)\norg.gradle.api.tasks.TaskContainer.create(java.lang.String, groovy.lang.Closure)\norg.gradle.api.tasks.TaskContainer.create(java.util.Map, groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Inappropriate Use of Lazy Types for Identity Information in Gradle\nDESCRIPTION: Example of unnecessary use of lazy types for immutable identity information in Gradle. This pattern is not recommended for properties that cannot be changed.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nclass Example {\n    Provider<String> getPath() {\n        return project.provider(() -> path)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Feature-to-Feature Dependencies in Gradle\nDESCRIPTION: Test class verifying that feature-to-feature dependencies are properly handled within the Gradle build system, including compatibility checks between features.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/kotlin/services/person-service/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass FeatureOnFeatureDependenciesTest extends AbstractFeaturePluginTest {\n\n    def \"feature can depend on other feature\"() {\n        given:\n        buildFile << \"\"\"\n            apply plugin: 'java-library'\n            apply plugin: 'java-feature-variant'\n            \n            java {\n                registerFeature('feat1') {\n                    usingSourceSet(sourceSets.main)\n                }\n                registerFeature('feat2') {\n                    usingSourceSet(sourceSets.main)\n                    capability('org:cap:1.0')\n                }\n            }\n            \n            dependencies {\n                feat1Implementation project()\n            }\n        \"\"\"\n\n        when:\n        run ':dependencies'\n\n        then:\n        noExceptionThrown()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining SigningExtension.getConfiguration() Return Type\nDESCRIPTION: The getConfiguration() method in SigningExtension returns a Configuration that is not assignable to ConfigurableFileCollection.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-file-collection.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.plugins.signing.SigningExtension.getConfiguration()\n```\n\n----------------------------------------\n\nTITLE: Method Signature Analysis - Kotlin Extensions\nDESCRIPTION: Collection of Kotlin extension methods and utilities that interact with Groovy closures and internal APIs.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\norg.gradle.kotlin.dsl.ConfigurationContainerScope.getByName(String, Closure)\norg.gradle.kotlin.dsl.ExtraPropertiesExtensionsKt.invoke()\norg.gradle.kotlin.dsl.GroovyInteroperabilityKt.closureOf()\norg.gradle.kotlin.dsl.GroovyInteroperabilityKt.delegateClosureOf()\n```\n\n----------------------------------------\n\nTITLE: Simplified Property Bytecode Upgrade in Gradle using Annotations\nDESCRIPTION: Demonstrates the use of @ReplacesEagerProperty annotation to simplify property bytecode upgrades in Gradle. This annotation automatically generates the necessary interceptor code.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nabstract class JavaCompile {\n    @Input\n    @ReplacesEagerProperty\n    public Property<String> getSourceCompatibility();\n}\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Task Method Return Types\nDESCRIPTION: Methods from Gradle's Visual Studio integration tasks that return non-Property types when Property types are expected. Includes file generation and project configuration getters.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-properties.txt#2025-04-19_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.ide.visualstudio.tasks.GenerateFiltersFileTask.getInputFile() -> File\norg.gradle.ide.visualstudio.tasks.GenerateProjectFileTask.getGradleArgs() -> String\norg.gradle.ide.visualstudio.tasks.GenerateSolutionFileTask.getSolution() -> VisualStudioSolution\n```\n\n----------------------------------------\n\nTITLE: Gradle Core Execution Overview in Markdown\nDESCRIPTION: Markdown documentation describing the core execution tools used in Gradle builds, including a reference to the Execution Engine component.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-execution/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Core Execution\n\nTools used to execute work in the context of a Gradle build.\n\n* The [Execution Engine](execution/README.md) is used to execute units of work.\n```\n\n----------------------------------------\n\nTITLE: Analyzing JavaExecSpec and JavaForkOptions Method Return Types\nDESCRIPTION: The getClasspath() method in JavaExecSpec and getBootstrapClasspath() in JavaForkOptions return FileCollection types that are not assignable to ConfigurableFileCollection.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-file-collection.txt#2025-04-19_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.process.JavaExecSpec.getClasspath()\norg.gradle.process.JavaForkOptions.getBootstrapClasspath()\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Java Class 'UsefulThing'\nDESCRIPTION: Declaration of a Java class named UsefulThing with no implementation or documentation.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/providers/fileAndDirectoryProperty/kotlin/src/config.txt#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nUsefulThing\n```\n\n----------------------------------------\n\nTITLE: Unacceptable Implementation of New Classes with Manual Property Management in Gradle\nDESCRIPTION: Illustrates an unacceptable way to implement new classes with lazy properties in Gradle. This approach manually manages properties, which can lead to usability issues in the Groovy DSL.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface NewThing {\n    Property<String> getSomeProperty()\n}\n\nabstract class DefaultNewThing implements NewThing {\n    private final Property<String> someProperty\n    DefaultNewThing(ObjectFactory objects) {\n       someProperty = objects.property(String.class)\n    }\n    public Property<String> getSomeProperty() {\n        return someProperty\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle API Method Return Type Validation\nDESCRIPTION: Collection of method signatures from Gradle API classes showing return type validation errors. Each line indicates a method whose return type does not conform to expected Property or Provider interfaces.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// ActionConfiguration.java\nObject[] getParams()\n\n// AntBuilder.java\nAntBuilder getAnt()\nAntMessagePriority getLifecycleLogLevel()\nMap getProperties()\nMap getReferences()\n\n// BuildableComponentSpec.java\nTask getBuildTask()\n\n// CheckableComponentSpec.java\nTask getCheckTask()\n\n// Project.java\nMap getAllTasks(boolean)\nSet getAllprojects()\nAntBuilder getAnt()\nArtifactHandler getArtifacts()\nFile getBuildDir()\n// ... additional Project.java methods\n```\n\n----------------------------------------\n\nTITLE: Jar Instrumentation Process\nDESCRIPTION: Detailed flowchart showing how individual jars are transformed using ASM ClassVisitor, including the role of interceptors and metadata in the transformation process.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-runtime/BYTECODE-INTERCEPTION-README.md#2025-04-19_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    jar(Jar)\n    modifiedJar(Jar*)\n    class1(\"Class1\")\n    class2(\"Class2\")\n    class3(\"Class3\")\n    modifiedClass1(\"Class1*\")\n    modifiedClass2(\"Class2*\")\n    modifiedClass3(\"Class3*\")\n    instrumentingClassTransform{{\"InstrumentingClassTransform\\n(ClassVisitor)\"}}\n    interceptors(Generated interceptors)\n    gradleAPIMetadata(\"Gradle API\\ntype metadata\")\n    externalPluginsMetadata(\"External plugins\\ntype metadata\")\n\n    subgraph Injected\n        interceptors\n        gradleAPIMetadata\n        externalPluginsMetadata\n    end\n    \n    jar --> class1 --> instrumentingClassTransform --> modifiedClass1 --> modifiedJar\n    jar --> class2 --> instrumentingClassTransform --> modifiedClass2 --> modifiedJar\n    jar --> class3 --> instrumentingClassTransform --> modifiedClass3 --> modifiedJar\n    Injected --> instrumentingClassTransform\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkstyle Configuration in Java\nDESCRIPTION: Method signature for getting the Checkstyle configuration. It returns a TextResource object, which likely contains the configuration content.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-text-resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.resources.TextResource getConfig()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Method Return Types in Gradle API\nDESCRIPTION: This snippet lists methods from Gradle API classes and interfaces where the return type does not match expected Property or Provider types. Each line represents a method that could potentially be updated to return a more appropriate type for lazy configuration support.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nMethod <org.gradle.api.artifacts.DependencyArtifact.getName()> does not have raw return type (java.lang.String) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\nMethod <org.gradle.api.artifacts.DependencyArtifact.getType()> does not have raw return type (java.lang.String) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\nMethod <org.gradle.api.artifacts.DependencyArtifact.getUrl()> does not have raw return type (java.lang.String) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\nMethod <org.gradle.api.artifacts.ExternalDependency.getVersionConstraint()> does not have raw return type (org.gradle.api.artifacts.VersionConstraint) assignable to any of [Provider]\nMethod <org.gradle.api.artifacts.ExternalDependency.isForce()> does not have raw return type (boolean) assignable to any of [Provider]\n// ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Method Return Type Validation in Gradle API\nDESCRIPTION: Static analysis output showing Gradle API methods whose return types are not compatible with the Property interfaces. This appears to be from a code analysis tool checking API consistency.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.api.credentials.PasswordCredentials.getUsername() -> String\norg.gradle.api.file.ConfigurableFileTree.getBuiltBy() -> Set\norg.gradle.api.file.ConfigurableFileTree.getDir() -> File\norg.gradle.api.file.CopySpec.getDuplicatesStrategy() -> DuplicatesStrategy\n// Additional methods omitted for brevity...\n```\n\n----------------------------------------\n\nTITLE: Writing Summary Fragments in Javadoc Comments in Java\nDESCRIPTION: Shows how to write an effective summary fragment, which is the first sentence of a Javadoc comment and appears in class and method indexes.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Returns an Image object that can then be painted on the screen.\n */\n```\n\n----------------------------------------\n\nTITLE: Project API Methods Using Groovy Closure\nDESCRIPTION: Methods from org.gradle.api.Project interface that accept Groovy Closure arguments, representing potential API compatibility issues.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.Project.allprojects(groovy.lang.Closure)\norg.gradle.api.Project.ant(groovy.lang.Closure)\norg.gradle.api.Project.artifacts(groovy.lang.Closure)\norg.gradle.api.Project.beforeEvaluate(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Code Quality Extension Method Issues\nDESCRIPTION: Methods from Checkstyle, CodeNarc, PMD and general code quality extensions that return primitive or basic types instead of Property interfaces.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.api.plugins.quality.CheckstyleExtension.getConfigProperties() // returns Map\norg.gradle.api.plugins.quality.CheckstyleExtension.getMaxErrors() // returns int\norg.gradle.api.plugins.quality.CheckstyleExtension.getMaxWarnings() // returns int\norg.gradle.api.plugins.quality.CheckstyleExtension.isShowViolations() // returns boolean\n```\n\n----------------------------------------\n\nTITLE: Ivy Publication Method Issues\nDESCRIPTION: Methods from Ivy publication related classes that return String and custom types instead of Property interfaces.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.api.publish.ivy.IvyArtifact.getClassifier() // returns String\norg.gradle.api.publish.ivy.IvyArtifact.getConf() // returns String\norg.gradle.api.publish.ivy.IvyPublication.getModule() // returns String\norg.gradle.api.publish.ivy.IvyPublication.getOrganisation() // returns String\n```\n\n----------------------------------------\n\nTITLE: Labeling Code Language in Java Documentation\nDESCRIPTION: This example shows how to label a Groovy code block within Java documentation using additional HTML tags for better readability.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n/**\n * <div class=\"code-block\">\n * <span class=\"label\">Groovy</span>\n * <pre><code class=\"language-groovy\">\n * defaultTasks('some-task')\n * reportsDir = file('reports')\n * </code></pre>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Script API Methods Using Groovy Closure\nDESCRIPTION: Methods from org.gradle.api.Script class that accept Groovy Closure arguments, representing potential API compatibility issues.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.Script.apply(groovy.lang.Closure)\norg.gradle.api.Script.buildscript(groovy.lang.Closure)\norg.gradle.api.Script.copy(groovy.lang.Closure)\norg.gradle.api.Script.copySpec(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Maven Publication Method Issues\nDESCRIPTION: Methods from Maven publication related classes that return String and custom types instead of Property interfaces.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.api.publish.maven.MavenArtifact.getClassifier() // returns String\norg.gradle.api.publish.maven.MavenPublication.getArtifactId() // returns String\norg.gradle.api.publish.maven.MavenPublication.getGroupId() // returns String\norg.gradle.api.publish.maven.MavenPublication.getVersion() // returns String\n```\n\n----------------------------------------\n\nTITLE: SourceSet Configuration Method Issues\nDESCRIPTION: Methods from SourceSet interface that return String configuration names instead of Provider interface.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.api.tasks.SourceSet.getAnnotationProcessorConfigurationName() // returns String\norg.gradle.api.tasks.SourceSet.getApiConfigurationName() // returns String\norg.gradle.api.tasks.SourceSet.getClassesTaskName() // returns String\norg.gradle.api.tasks.SourceSet.getCompileJavaTaskName() // returns String\n```\n\n----------------------------------------\n\nTITLE: Javadoc Formatting for IntelliJ IDEA\nDESCRIPTION: These examples demonstrate how IntelliJ IDEA renders Javadoc comments with different formatting options.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n/**\n * A\n *\n * B\n */\n```\n\nLANGUAGE: text\nCODE:\n```\n/**\n * A\n * <p>\n * B\n */\n```\n\nLANGUAGE: text\nCODE:\n```\nA\nB\n```\n\n----------------------------------------\n\nTITLE: Artifact and Configuration API Methods Using Groovy Types\nDESCRIPTION: Methods from Gradle's artifact and configuration APIs that use Groovy types, representing potential API compatibility issues.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.XmlProvider.asNode()\norg.gradle.api.artifacts.Configuration.copy(groovy.lang.Closure)\norg.gradle.api.artifacts.Configuration.copyRecursive(groovy.lang.Closure)\norg.gradle.api.artifacts.Configuration.resolutionStrategy(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Analyzing SourceSet Method Return Types\nDESCRIPTION: Methods in the SourceSet interface that need to be updated to return Provider<String> instead of raw String type\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.SourceSet.getCompileTaskName(String)\norg.gradle.api.tasks.SourceSet.getImplementationConfigurationName()\norg.gradle.api.tasks.SourceSet.getJarTaskName()\n// ... other SourceSet methods returning String\n```\n\n----------------------------------------\n\nTITLE: Analyzing GroovyCompileOptions Method Return Types\nDESCRIPTION: Methods in GroovyCompileOptions class that need to be updated to return Property types instead of raw types for Groovy compilation settings\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.compile.GroovyCompileOptions.getConfigurationScript()\norg.gradle.api.tasks.compile.GroovyCompileOptions.getEncoding()\norg.gradle.api.tasks.compile.GroovyCompileOptions.getFileExtensions()\n```\n\n----------------------------------------\n\nTITLE: Defining String with Escaped Characters\nDESCRIPTION: Demonstrates a string assignment with various escape characters including backslash, tab, and newline. The comment indicates that a subset of possible escape characters is being used intentionally.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/stringParsingTestInput_escapeChars.txt#2025-04-19_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\ns = \"_\\\\_\\t_\\n\"  // full set of escape chars intentionally not used: _\\\\_\\t_\\b_\\r_\\n_\\\"_\\$\n```\n\n----------------------------------------\n\nTITLE: Analyzing Gradle API Methods with Non-Standard Argument Types\nDESCRIPTION: This snippet lists various Gradle API methods that use groovy.lang.Closure or other non-standard types as arguments or return types. These methods are found across different Gradle API classes and interfaces.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.artifacts.ModuleDependency.artifact(groovy.lang.Closure)\norg.gradle.api.artifacts.ResolvableDependencies.afterResolve(groovy.lang.Closure)\norg.gradle.api.artifacts.ResolvableDependencies.beforeResolve(groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.ArtifactHandler.add(java.lang.String, java.lang.Object, groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.ComponentMetadataHandler.all(groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.ComponentMetadataHandler.withModule(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.DependencyHandler.add(java.lang.String, java.lang.Object, groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.DependencyHandler.create(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.RepositoryHandler.flatDir(groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.RepositoryHandler.ivy(groovy.lang.Closure)\norg.gradle.api.artifacts.dsl.RepositoryHandler.maven(groovy.lang.Closure)\norg.gradle.api.artifacts.repositories.ExclusiveContentRepository.forRepository(org.gradle.internal.Factory)\norg.gradle.api.artifacts.result.ResolutionResult.allComponents(groovy.lang.Closure)\norg.gradle.api.artifacts.result.ResolutionResult.allDependencies(groovy.lang.Closure)\norg.gradle.api.execution.TaskExecutionGraph.afterTask(groovy.lang.Closure)\norg.gradle.api.execution.TaskExecutionGraph.beforeTask(groovy.lang.Closure)\norg.gradle.api.execution.TaskExecutionGraph.whenReady(groovy.lang.Closure)\norg.gradle.api.file.ContentFilterable.filter(groovy.lang.Closure)\norg.gradle.api.file.CopyProcessingSpec.eachFile(groovy.lang.Closure)\norg.gradle.api.file.CopyProcessingSpec.rename(groovy.lang.Closure)\norg.gradle.api.file.CopySourceSpec.from(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.file.CopySpec.eachFile(groovy.lang.Closure)\norg.gradle.api.file.CopySpec.exclude(groovy.lang.Closure)\norg.gradle.api.file.CopySpec.filter(groovy.lang.Closure)\norg.gradle.api.file.CopySpec.from(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.file.CopySpec.include(groovy.lang.Closure)\norg.gradle.api.file.CopySpec.into(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.file.CopySpec.rename(groovy.lang.Closure)\norg.gradle.api.file.FileCollection.filter(groovy.lang.Closure)\norg.gradle.api.file.FileTree.matching(groovy.lang.Closure)\norg.gradle.api.file.FileTree.visit(groovy.lang.Closure)\norg.gradle.api.file.SourceDirectorySet.compiledBy(org.gradle.api.tasks.TaskProvider, java.util.function.Function)\norg.gradle.api.initialization.dsl.ScriptHandler.dependencies(groovy.lang.Closure)\norg.gradle.api.initialization.dsl.ScriptHandler.dependencyLocking(groovy.lang.Closure)\norg.gradle.api.initialization.dsl.ScriptHandler.repositories(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Gradle API Method Return Type Issues\nDESCRIPTION: Lists Java methods across Gradle API classes that need to be updated to return Property types instead of raw types. Each line identifies a method that returns a primitive or object type that should be wrapped in an appropriate Property interface.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_10\n\nLANGUAGE: log\nCODE:\n```\nMethod <org.gradle.api.tasks.testing.testng.TestNGOptions.getIncludeGroups()> does not have raw return type (java.util.Set) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\nMethod <org.gradle.api.tasks.testing.testng.TestNGOptions.getListeners()> does not have raw return type (java.util.Set) assignable to any of [Property, MapProperty, ListProperty, SetProperty]\n// ... additional method entries omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright Header for Documentation Files in Java\nDESCRIPTION: This snippet provides the standard copyright header to be included at the top of all Gradle documentation files. It specifies the Creative Commons Attribution-Noncommercial-ShareAlike 4.0 International License terms and conditions.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright [YEAR OF FILE CREATION] Gradle and contributors.\n *\n * Licensed under the Creative Commons Attribution-Noncommercial-ShareAlike 4.0 International License.\n * You may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://creativecommons.org/licenses/by-nc-sa/4.0/\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n----------------------------------------\n\nTITLE: Java Method Return Type Incompatibilities in Gradle Native Platform\nDESCRIPTION: List of Java methods from Gradle's native platform APIs that have return types not assignable to Provider or Property interfaces. This includes methods from NativeLibrarySpec, SharedLibraryBinarySpec, StaticLibraryBinarySpec, and various test-related interfaces.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_11\n\nLANGUAGE: java\nCODE:\n```\norg.gradle.nativeplatform.NativeLibrarySpec.getApi() // returns NativeLibraryRequirement\norg.gradle.nativeplatform.NativeLibrarySpec.getShared() // returns NativeLibraryRequirement\norg.gradle.nativeplatform.NativeLibrarySpec.getStatic() // returns NativeLibraryRequirement\n\norg.gradle.nativeplatform.SharedLibraryBinarySpec.getSharedLibraryFile() // returns File\norg.gradle.nativeplatform.SharedLibraryBinarySpec.getSharedLibraryLinkFile() // returns File\norg.gradle.nativeplatform.SharedLibraryBinarySpec.getTasks() // returns TasksCollection\n\norg.gradle.nativeplatform.StaticLibraryBinarySpec.getStaticLibraryFile() // returns File\norg.gradle.nativeplatform.StaticLibraryBinarySpec.getTasks() // returns TasksCollection\n```\n\n----------------------------------------\n\nTITLE: Defining String with Unicode Escape Sequences\nDESCRIPTION: Demonstrates a string assignment that uses Unicode escape sequences to represent special characters. The sequence \\u21E4 and \\u21E5 represent leftwards and rightwards arrows respectively.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/stringParsingTestInput_escapeChars.txt#2025-04-19_snippet_1\n\nLANGUAGE: unknown\nCODE:\n```\nq = \"\\u21E4\\u21E5\"\n```\n\n----------------------------------------\n\nTITLE: Gradle Lifecycle Methods Using Closures\nDESCRIPTION: Core Gradle lifecycle methods in the Gradle class that accept Groovy closures as callbacks for different build phases.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.invocation.Gradle.afterProject(groovy.lang.Closure)\norg.gradle.api.invocation.Gradle.beforeProject(groovy.lang.Closure)\norg.gradle.api.invocation.Gradle.beforeSettings(groovy.lang.Closure)\norg.gradle.api.invocation.Gradle.buildFinished(groovy.lang.Closure)\norg.gradle.api.invocation.Gradle.projectsEvaluated(groovy.lang.Closure)\norg.gradle.api.invocation.Gradle.projectsLoaded(groovy.lang.Closure)\norg.gradle.api.invocation.Gradle.settingsEvaluated(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Method Return Type Analysis for Eclipse Plugin Classes\nDESCRIPTION: Compilation report showing Java methods that return concrete types instead of Property interfaces. This affects various Eclipse model classes like AbstractLibrary, AccessRule, BuildCommand etc. The pattern indicates these methods may need to be updated to use Gradle's property types for better configuration caching support.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.plugins.ide.eclipse.model.AbstractLibrary.getJavadocPath() -> FileReference\norg.gradle.plugins.ide.eclipse.model.AbstractLibrary.getLibrary() -> FileReference\norg.gradle.plugins.ide.eclipse.model.AbstractLibrary.getModuleVersion() -> ModuleVersionIdentifier\norg.gradle.plugins.ide.eclipse.model.AbstractLibrary.getSourcePath() -> FileReference\norg.gradle.plugins.ide.eclipse.model.AccessRule.getKind() -> String\norg.gradle.plugins.ide.eclipse.model.AccessRule.getPattern() -> String\n```\n\n----------------------------------------\n\nTITLE: EclipseWtpComponent Method Return Types\nDESCRIPTION: Methods in EclipseWtpComponent class that need to be updated to return Property types instead of raw String, Set, List, Map and other types.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nclass EclipseWtpComponent {\n    String getClassesDeployPath();\n    String getContextPath();\n    String getDeployName();\n    XmlFileContentMerger getFile();\n    FileReferenceFactory getFileReferenceFactory();\n    Set getLibConfigurations();\n    String getLibDeployPath();\n    Set getMinusConfigurations();\n    Map getPathVariables();\n    Set getPlusConfigurations();\n    Project getProject();\n    List getProperties();\n    List getResources();\n    Set getRootConfigurations();\n    Set getSourceDirs();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Plugin for Converting Unmanaged Dependencies in Gradle\nDESCRIPTION: This snippet demonstrates how to apply the 'org.gradle.kotlin.dsl.unmanaged-to-managed-converter' plugin in a Gradle build script. The plugin enables automatic conversion of unmanaged dependencies to managed dependencies for Kotlin DSL.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsKotlin/kotlin/source/keep.txt#2025-04-19_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nplugins {\n    id(\"org.gradle.kotlin.dsl.unmanaged-to-managed-converter\")\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin and Reporting Configuration\nDESCRIPTION: Methods related to plugin configuration and report generation that accept Groovy closures for customization.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.plugins.PluginAware.apply(groovy.lang.Closure)\norg.gradle.api.plugins.PluginCollection.matching(groovy.lang.Closure)\norg.gradle.api.plugins.PluginCollection.whenPluginAdded(groovy.lang.Closure)\norg.gradle.api.reporting.Reporting.reports(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Annotated Methods in Gradle API\nDESCRIPTION: This snippet lists Java methods from various Gradle API classes that are annotated with @ToBeReplacedByLazyProperty. These methods are likely to be replaced by lazy properties in future versions of Gradle.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-properties-should-not-have-migration-annotation.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.java.archives.Manifest.getAttributes()\norg.gradle.api.java.archives.Manifest.getSections()\norg.gradle.api.reporting.ReportingExtension.getApiDocTitle()\norg.gradle.api.tasks.diagnostics.AbstractDependencyReportTask.setConfiguration(java.lang.String)\norg.gradle.api.tasks.wrapper.Wrapper.getAvailableDistributionTypes()\norg.gradle.buildinit.tasks.InitBuild.getAvailableBuildTypes()\norg.gradle.buildinit.tasks.InitBuild.getAvailableDSLs()\norg.gradle.buildinit.tasks.InitBuild.getAvailableTestFrameworks()\norg.gradle.jvm.application.tasks.CreateStartScripts.getRelativeClasspath()\n```\n\n----------------------------------------\n\nTITLE: BNFGen Generated Assignment Statements\nDESCRIPTION: Auto-generated test case assignments produced by BNFGen tool. Contains variable assignments with string literals, numeric values, expressions and method calls.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/random/assignments.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// This file has been generated by using the tool BNFGen (https://github.com/dmbaturin/bnfgen), version 3.0.0\n// In order to create content similar to what's in this file use the following command:\n//    bnfgen test_case_generation_grammar_BNFGEN.bnf --separator \"\"\n// This file has been filtered to only contain ASSIGNMENTS\n```\n\n----------------------------------------\n\nTITLE: EclipseWtpFacet and Facet Method Return Types\nDESCRIPTION: Methods in EclipseWtpFacet and Facet classes that need to be updated to return Property types instead of raw List and String types.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nclass EclipseWtpFacet {\n    List getFacets();\n    XmlFileContentMerger getFile();\n}\n\nclass Facet {\n    String getName();\n    FacetType getType();\n    String getVersion();\n}\n```\n\n----------------------------------------\n\nTITLE: Eclipse Model Classes Method Return Types\nDESCRIPTION: Methods in various Eclipse model classes (Library, Link, Output, Project, etc.) that need to be updated to return Property types instead of raw types.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nclass Library {\n    String getKind();\n}\n\nclass Link {\n    String getLocation();\n    String getLocationUri();\n    String getName();\n    String getType();\n}\n\nclass Output {\n    String getKind();\n    String getPath();\n}\n\nclass Project {\n    List getBuildCommands();\n    String getComment();\n    Set getLinkedResources();\n    String getName();\n    List getNatures();\n    Set getReferencedProjects();\n    Set getResourceFilters();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Configuration Cache for a Gradle Project\nDESCRIPTION: A Gradle configuration snippet showing how to disable the configuration cache for a specific project. This should be used when the project is small and the overhead of the configuration cache outweighs its benefits.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/kotlin/source/keep.txt#2025-04-19_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ngradle.startParameter.configurationCache.set(false)\n```\n\n----------------------------------------\n\nTITLE: Examining Copy Task Method Signatures\nDESCRIPTION: Methods in Copy class that return internal Gradle API types. This usage of non-public APIs may need to be reviewed for long-term compatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.Copy.getRootSpec()\n```\n\n----------------------------------------\n\nTITLE: IDEA Plugin Model Method Signatures\nDESCRIPTION: Collection of Java method signatures from Gradle's IDEA plugin model classes that need to be updated to return Property types instead of raw types. These methods span across multiple model classes like IdeaModule, IdeaProject, IdeaWorkspace, and related dependency classes.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// IdeaModule.java\nFile getTestOutputDir()\nSet<File> getTestResourceDirs()\nSet<File> getTestSourceDirs()\nboolean isDownloadJavadoc()\nboolean isDownloadSources()\nboolean isOffline()\n\n// IdeaProject.java\nString getDisplayName()\nXmlFileContentMerger getIpr()\nString getJdkName()\nIdeaLanguageLevel getLanguageLevel()\nList<IdeaModule> getModules()\nString getName()\nFile getOutputFile()\nPathFactory getPathFactory()\nProject getProject()\nSet<Library> getProjectLibraries()\nJavaVersion getTargetBytecodeVersion()\nString getVcs()\nSet<String> getWildcards()\n\n// Module.java\nPath getContentPath()\nSet<Dependency> getDependencies()\nSet<Path> getExcludeFolders()\nSet<Path> getGeneratedSourceFolders()\nString getJdkName()\nPath getOutputDir()\nSet<Path> getResourceFolders()\nSet<Path> getSourceFolders()\nPath getTestOutputDir()\nSet<Path> getTestResourceFolders()\nSet<Path> getTestSourceFolders()\nboolean isInheritOutputDirs()\n```\n\n----------------------------------------\n\nTITLE: Analyzing JacocoViolationRule Method Return Types in Java\nDESCRIPTION: This snippet shows multiple methods from the JacocoViolationRule class that have return types not assignable to Property or Provider types. These methods deal with includes, limits, and enabled status for JaCoCo violation rules.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.testing.jacoco.tasks.rules.JacocoViolationRule.getIncludes()\norg.gradle.testing.jacoco.tasks.rules.JacocoViolationRule.getLimits()\norg.gradle.testing.jacoco.tasks.rules.JacocoViolationRule.isEnabled()\n```\n\n----------------------------------------\n\nTITLE: Filtering Base Test Classes in Java for Gradle\nDESCRIPTION: This method determines if a test class should be excluded from running based on whether it's a base class. It examines if the class name ends with 'Test' but also contains 'Abstract', 'Base', or 'For' in its name, indicating it's likely a base class not meant to be executed directly.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/problemsFixed/groovy/source/keep.txt#2025-04-19_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static boolean isBaseClass(Class<?> testClass) {\n    String simpleName = testClass.getSimpleName();\n    if (!simpleName.endsWith(\"Test\")) {\n        return false;\n    }\n\n    return simpleName.contains(\"Abstract\") || simpleName.contains(\"Base\") || testClass.getName().contains(\".for.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing TaskOutputs and AntTarget Methods\nDESCRIPTION: Methods in TaskOutputs and AntTarget classes that use Groovy closures or Apache Ant types. These may need to be reviewed for API stability and potential Java-friendly alternatives.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.TaskOutputs.upToDateWhen(groovy.lang.Closure)\norg.gradle.api.tasks.ant.AntTarget.getTarget()\norg.gradle.api.tasks.ant.AntTarget.setTarget(org.apache.tools.ant.Target)\n```\n\n----------------------------------------\n\nTITLE: Analyzing UnexpectedBuildResultException and ConfigureUtil Method Return Types in Java\nDESCRIPTION: This snippet shows methods from UnexpectedBuildResultException and ConfigureUtil classes that have return types not assignable to Provider type. These methods deal with build results and missing configuration keys.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.testkit.runner.UnexpectedBuildResultException.getBuildResult()\norg.gradle.util.ConfigureUtil$IncompleteInputException.getMissingKeys()\n```\n\n----------------------------------------\n\nTITLE: Examining VersionControlRepository and VersionControlSpec Method Return Types in Java\nDESCRIPTION: This snippet shows methods from VersionControlRepository and VersionControlSpec interfaces that have return types not assignable to Property or Provider types. These methods relate to root directory, repository name, and unique identifiers.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.vcs.VersionControlRepository.getRootDir()\norg.gradle.vcs.VersionControlSpec.getRepoName()\norg.gradle.vcs.VersionControlSpec.getRootDir()\norg.gradle.vcs.VersionControlSpec.getUniqueId()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Build Performance Monitoring in build.gradle.kts\nDESCRIPTION: This code shows how to set up build performance monitoring in build.gradle.kts. It includes dependency configuration for the build-performance plugin and setup for capturing performance metrics during build execution.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/api/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"com.gradle.build-performance\") version \"1.4.2\"\n}\n\nbuildPerformance {\n    // Enable performance monitoring for all tasks\n    trackAllTasks = true\n    \n    // Configure performance thresholds\n    performanceThresholds {\n        warn {\n            execution {\n                threshold = Duration.ofSeconds(10)\n            }\n            configuration {\n                threshold = Duration.ofSeconds(5)\n            }\n        }\n        fail {\n            execution {\n                threshold = Duration.ofMinutes(2)\n            }\n        }\n    }\n    \n    // Create a custom performance report\n    reports {\n        html.required.set(true)\n        json.required.set(true)\n        outputDir.set(layout.buildDirectory.dir(\"reports/performance\"))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining AbstractArchiveTask and Jar Methods\nDESCRIPTION: Methods in AbstractArchiveTask and Jar classes that use Groovy closures as arguments. These methods may need Java-friendly alternatives for better API stability.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.bundling.AbstractArchiveTask.into(java.lang.Object, groovy.lang.Closure)\norg.gradle.api.tasks.bundling.Jar.manifest(groovy.lang.Closure)\n```\n\n----------------------------------------\n\nTITLE: Analyzing GitVersionControlSpec Method Return Type in Java\nDESCRIPTION: This snippet shows a method from the GitVersionControlSpec interface that has a return type not assignable to Property types. The method is related to getting the URL of a Git repository.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.vcs.git.GitVersionControlSpec.getUrl()\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-Project Feature Selection in Gradle\nDESCRIPTION: Test class examining how Gradle handles feature variant selection in multi-project builds, ensuring proper artifact resolution between projects.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/kotlin/services/person-service/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass MultiProjectWithFeatureVariantsTest extends AbstractFeaturePluginTest {\n\n    def \"can depend on feature variants in different configurations of the same component\"() {\n        given:\n        settingsFile << \"\"\"\n            include 'producer'\n            include 'consumer'\n        \"\"\"\n        buildFile << \"\"\"\n            allprojects {\n                apply plugin: 'java-library'\n            }\n            project(':producer') {\n                apply plugin: 'java-feature-variant'\n                \n                java {\n                    registerFeature('feat1') {\n                        usingSourceSet(sourceSets.main)\n                    }\n                    registerFeature('feat2') {\n                        usingSourceSet(sourceSets.main)\n                    }\n                }\n                \n                group = 'org.gradle.test'\n                version = '1.0'\n            }\n            project(':consumer') {\n                dependencies {\n                    implementation project(':producer')\n                    runtimeOnly(project(':producer')) {\n                        capabilities {\n                            requireCapability('org.gradle.test:producer-feat1')\n                        }\n                    }\n                    runtimeOnly(project(':producer')) {\n                        capabilities {\n                            requireCapability('org.gradle.test:producer-feat2')\n                        }\n                    }\n                }\n            }\n        \"\"\"\n\n        when:\n        succeeds ':consumer:dependencies'\n\n        then:\n        noExceptionThrown()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Public API Usage in Gradle Task Classes\nDESCRIPTION: Collection of method signatures from various Gradle task classes that use non-public API types like Groovy closures and internal Gradle classes. These methods may need to be refactored to use only public API types for better compatibility.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-methods-return-allowed-types.txt#2025-04-19_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.bundling.War.webInf(groovy.lang.Closure)\norg.gradle.api.tasks.diagnostics.AbstractConfigurationReportTask.reports(groovy.lang.Closure)\norg.gradle.api.tasks.testing.Test.testFramework(groovy.lang.Closure)\norg.gradle.api.tasks.testing.testng.TestNGOptions.setSuiteXmlBuilder(groovy.xml.MarkupBuilder)\n```\n\n----------------------------------------\n\nTITLE: Referencing Year Variable in Gradle Configuration\nDESCRIPTION: This snippet demonstrates how to reference a variable named 'year' in a Gradle configuration file. The variable is likely defined elsewhere in the project and will be replaced with the actual year value during build time.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/kotlin/src/templates/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nThis is the year ${year}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Examples in Gradle Plugin ResourceTree\nDESCRIPTION: This snippet demonstrates how to access resources within a ResourceTree using path notation. It shows various ways to reference resources with the forward slash separator, including absolute paths and paths relative to the root.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/groovy/shared/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nresource(\"path/to/resource\")\nresource(\"/path/to/resource\")\n```\n\n----------------------------------------\n\nTITLE: String Interpolation and Dollar Sign Usage in Groovy\nDESCRIPTION: This snippet shows various ways of using the dollar sign in Groovy strings, including string interpolation and literal dollar sign representation. It also demonstrates a limitation where string expressions are not supported in triple-quoted strings.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/stringParsingTestInput_multiLine.txt#2025-04-19_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nq = \"\"\"$1\"\"\"                  // dollar followed by something that's NOT a simple identifier\nd = \"\"\"${something}\"\"\"        // string expression not supported\nq = \"\"\"$id\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Documentation Build\nDESCRIPTION: Shows how to generate the Gradle documentation locally for preview. This command builds the complete documentation set including User Manual, DSL Reference, and other documentation materials.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :docs:docs\n```\n\n----------------------------------------\n\nTITLE: Javadoc Usage Examples in Java\nDESCRIPTION: This snippet shows examples of when Javadoc is required for public methods and when it can be omitted for private methods.\nSOURCE: https://github.com/gradle/gradle/blob/master/contributing/JavadocStyleGuide.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Public Method that requires Javadoc\n */\npublic Image getImage(URL url, String name) {\n    // Method implementation\n}\n\n// Private Method that doesn't require Javadoc\nprivate Image getImage(URL url) {\n    // Method implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Application and Method Chaining in Gradle\nDESCRIPTION: Examples of applying plugins with the id() function and specifying versions, along with method chaining where multiple methods are called in sequence on the results of previous calls.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/main/resources/org/gradle/internal/declarativedsl/parsing/grammar_test_input.txt#2025-04-19_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nid(\"plugin\").version(\"7\")\nf(1).g(2).h(3)\n```\n\n----------------------------------------\n\nTITLE: Interpolating Year Variable in Gradle Build Script\nDESCRIPTION: This code snippet demonstrates how to use string interpolation in a Gradle build script to include the value of a variable named 'year'. This technique is commonly used in Gradle scripts to dynamically insert values into strings.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-incrementalBuildAdvanced/groovy/src/templates/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nThis is the year ${year}\n```\n\n----------------------------------------\n\nTITLE: Commented Syntax Errors in Gradle\nDESCRIPTION: A collection of commented-out examples showing invalid Gradle syntax. These include invalid expressions, incorrect method chaining, and improper block usage, serving as reference for what not to do.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/main/resources/org/gradle/internal/declarativedsl/parsing/grammar_test_input.txt#2025-04-19_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\n// errors\n// 5\n// a = (1)\n// a = f(1).g(2)\n// a = \"foo\".bar(1)\n// a.b.c = 1\n// d = a.b.c\n// a.b {d = 1}\n// a.b.c {d = 1}\n// 1 { foo = \"bar\" }\n// f(block{})\n// f(1).x\n// x.f(1).y\n// f(1).x.f(2)\n// \"function\"(1)\n// 1(2)\n// true(3)\n// null(4)\n```\n\n----------------------------------------\n\nTITLE: Defining JAR Manifest Version\nDESCRIPTION: Specifies the manifest version number required for all manifest files following the JAR file specification. The value of 1.0 indicates compliance with the basic manifest format.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tutorial/manifest/common/src/config/basemanifest.txt#2025-04-19_snippet_0\n\nLANGUAGE: manifest\nCODE:\n```\nManifest-Version: 1.0\n```\n\n----------------------------------------\n\nTITLE: Example of Running Tests for Gradle Launcher Subproject\nDESCRIPTION: Shows a concrete example of running tests for the launcher subproject. This is useful for testing changes made to the Gradle launcher component.\nSOURCE: https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :launcher:quickTest\n```\n\n----------------------------------------\n\nTITLE: Managing Lifecycle of Non-managed Nested Types in Gradle\nDESCRIPTION: Shows how to handle nested types that require an implementation class in Gradle. This approach manages the lifecycle of the nested type manually.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ninterface NestedType {\n    Property<String> getSomeProperty()\n    void notManaged()\n}\nabstract class DefaultNestedType implements NestedType {\n    ...\n}\n\nclass Example {\n    private final NestedType nested\n    Example(ObjectFactory objects) {\n       this.nested = objects.newInstance(DefaultNestedType.class)\n    }\n\n    @Nested\n    NestedType getNestedProperty() {\n        return nested;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Java Command in Bash\nDESCRIPTION: This final command executes the Java application with all the processed arguments.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexec \"\\$JAVACMD\" \"\\$@\"\n```\n\n----------------------------------------\n\nTITLE: Unacceptable Property Value Retrieval in Gradle\nDESCRIPTION: Demonstrates unacceptable ways of retrieving property values in Gradle when conventions could be set elsewhere. These approaches can lead to unexpected behavior.\nSOURCE: https://github.com/gradle/gradle/blob/master/architecture/standards/0006-use-of-provider-apis-in-gradle.md#2025-04-19_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\npublic interface NewThing {\n    Property<String> getSomeProperty()\n}\n\n// Unacceptable\nString value\nif (!getSomeProperty().isPresent()) {\n   value = \"convention\"\n} else {\n   value = getSomeProperty().get()\n}\n\n// Also unacceptable\nString value = getSomeProperty().getOrElse(\"convention\")\n\n// This should be always:\nString value = getSomeProperty().get()\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle with Incompatible JVM Error Message\nDESCRIPTION: Example error message when executing Gradle versions that don't support the current JVM. This occurs when Gradle 4.6 and older are run on Java 11 and newer.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    execution failed for task :tooling-api:gradle3.5.1CrossVersionTest'.\n    > No tests found for given includes: [org.gradle.integtests.tooling.r81.LogLevelConfigCrossVersionSpec](--tests filter)`\n```\n\n----------------------------------------\n\nTITLE: Extending Java Class with Groovy\nDESCRIPTION: Example of a Groovy class named 'MyGroovyClass' that extends a Java class 'MyJavaClass'. The example demonstrates how IDEs should provide code completion for Java methods when properly configured.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/configurationCache/topLevel/common/data/data.txt#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nclass MyGroovyClass extends MyJavaClass {\n    void groovyMethod() {\n        // proper IDE configuration should provide code-completion for java methods\n        javaMethod()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Build with Local Cache Only\nDESCRIPTION: Command line example showing how to run a Gradle build using only the local cache, ignoring any configured remote caches. This is useful for testing or when network connectivity is limited.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/tasks/incrementalBuild-customTaskClass/kotlin/src/headers/headers.txt#2025-04-19_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew --build-cache build -Dorg.gradle.caching.remote.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Plain Text Content\nDESCRIPTION: Single line containing the text 'gradle', likely used as a directory marker or placeholder in a project structure.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/software/signing/src/testFixtures/resources/keys/gradle/password.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngradle\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Progress Event Descriptor in Gradle Build Events\nDESCRIPTION: Java class structure for implementing a new default progress event descriptor in the Gradle build events project. This class implements Serializable and an internal descriptor interface.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/ide/tooling-api/readme.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Default*Descriptor implements Serializable, Internal*Descriptor\n```\n\n----------------------------------------\n\nTITLE: Eclipse Project XML Configuration\nDESCRIPTION: XML structure defining basic Eclipse project settings including project name. This is a minimal configuration with empty elements for comments, projects, natures, and build specifications.\nSOURCE: https://github.com/gradle/gradle/blob/master/subprojects/core/src/test/resources/org/gradle/api/tasks/ide/eclipse/expectedEmptyProjectFile.txt#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<projectDescription>\n  <name>myProject</name>\n  <comment/>\n  <projects/>\n  <natures/>\n  <buildSpec/>\n</projectDescription>\n```\n\n----------------------------------------\n\nTITLE: Parsing and Escaping Command-Line Arguments in Bash\nDESCRIPTION: This snippet uses xargs to parse quoted arguments and sed to escape shell metacharacters. It then uses eval to set the processed arguments. This approach is used to handle complex command-line arguments in a POSIX-compliant way.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neval \"set -- \\$(\\n        printf '%s\\\\n' \"\\$DEFAULT_JVM_OPTS \\$JAVA_OPTS \\$${optsEnvironmentVar}\" |\\n        xargs -n1 |\\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\\\\\&~g; ' |\\n        tr '\\\\n' ' '\\n    )\" '\"\\$@\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Eclipse Web Project Module in XML\nDESCRIPTION: This XML snippet defines the structure and configuration of an Eclipse web project module. It specifies the deployment name, context root, resource paths, and dependent modules.\nSOURCE: https://github.com/gradle/gradle/blob/master/subprojects/core/src/test/resources/org/gradle/api/tasks/ide/eclipse/expectedWtpFile.txt#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\n  <wb-module deploy-name=\"name\">\n    <property name=\"context-root\" value=\"name\"/>\n    <wb-resource deploy-path=\"WEB-INF/lib\" source-path=\"conf1\"/>\n    <wb-resource deploy-path=\"WEB-INF/lib\" source-path=\"conf2/child\"/>\n    <property name=\"java-output-path\" value=\"bin\"/>\n    <dependent-module deploy-path=\"/WEB-INF/lib\" handle=\"module:/classpath/lib//lib/a.jar\">\n      <dependency-type>uses</dependency-type>\n    </dependent-module>\n    <dependent-module deploy-path=\"/WEB-INF/lib\" handle=\"module:/classpath/lib//lib/b.jar\">\n      <dependency-type>uses</dependency-type>\n    </dependent-module>\n    <dependent-module deploy-path=\"/WEB-INF/lib\" handle=\"module:/resource/test/test\">\n      <dependency-type>uses</dependency-type>\n    </dependent-module>\n  </wb-module>\n</project-modules>\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Property in Gradle\nDESCRIPTION: Shows how to access an extension property in Gradle, using the extension name followed by property access. This is a common pattern in Gradle build scripts.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/base/distribution/kotlin/custom/custom.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nsomeExtension.someProperty\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Properties in Gradle Build Script\nDESCRIPTION: This snippet shows how to access a custom property in a Gradle build script. It demonstrates the conditional checking of property existence before using it.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/signing/in-memory-subkey/groovy/src/stuff/hello.txt#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nif (project.hasProperty('myProp')) {\n    println \"myProp = ${project.myProp}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Constraints to Compile Configuration\nDESCRIPTION: Deprecated extension functions for adding dependency constraints to the 'compile' configuration. Includes both simple and configurable versions.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/kotlin-dsl/src/test/resources/org/gradle/kotlin/dsl/accessors/tasks/PrintAccessors-expected-output.txt#2025-04-19_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun DependencyConstraintHandler.`compile`(constraintNotation: Any): DependencyConstraint =\n    add(\"compile\", constraintNotation)\n\nfun DependencyConstraintHandler.`compile`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =\n    add(\"compile\", constraintNotation, block)\n```\n\n----------------------------------------\n\nTITLE: Testing Feature-to-Feature Compatibility in Gradle\nDESCRIPTION: Test class for verifying compatibility between feature variants in Gradle, ensuring that incompatible features are correctly identified.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/basic-dependencies/kotlin/services/person-service/src/main/resources/org/gradle/resource.txt#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass FeatureCompatibilityTest extends AbstractFeaturePluginTest {\n\n    def \"cannot select both feature variants from the same component\"() {\n        given:\n        settingsFile << \"\"\"\n            include 'producer'\n            include 'consumer'\n        \"\"\"\n        buildFile << \"\"\"\n            allprojects {\n                apply plugin: 'java-library'\n            }\n            project(':producer') {\n                apply plugin: 'java-feature-variant'\n                \n                java {\n                    registerFeature('feat1') {\n                        usingSourceSet(sourceSets.main)\n                    }\n                    registerFeature('feat2') {\n                        usingSourceSet(sourceSets.main)\n                    }\n                }\n            }\n            project(':consumer') {\n                dependencies {\n                    implementation project(':producer')\n                    implementation 'org.producer:feat1'\n                    implementation 'org.producer:feat2'\n                }\n            }\n        \"\"\"\n\n        when:\n        fails ':consumer:dependencies'\n\n        then:\n        failure.assertHasCause \"Module 'producer' has been resolved with multiple incompatible feature variants:\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated BNFGen Test Data\nDESCRIPTION: This code was generated using the BNFGen tool (version 3.0.0) to create random syntactic structures for testing purposes. The content was created by processing a grammar file as indicated in the file's header comment.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/random/everything.txt#2025-04-19_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\n// This file has been generated by using the tool BNFGen (https://github.com/dmbaturin/bnfgen), version 3.0.0\n// In order to create content similar to what's in this file use the following command:\n//    bnfgen test_case_generation_grammar_BNFGEN.bnf --separator \"\"\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Azure Artifacts HTTP Operations in Java\nDESCRIPTION: A utility class containing static methods for creating HTTP requests and managing authentication for Azure Artifacts. It provides functionality for setting authentication headers and creating HTTP requests.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/documentation/docs/src/snippets/multiproject/dependencies-java/groovy/shared/src/test/resources/org/gradle/test-resource.txt#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright 2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.gradle.internal.authentication.azureartifacts;\n\nimport com.microsoft.aad.adal4j.AuthenticationResult;\nimport org.gradle.internal.impldep.org.apache.http.client.methods.HttpGet;\nimport org.gradle.internal.impldep.org.apache.http.client.methods.HttpPost;\nimport org.gradle.internal.impldep.org.apache.http.client.methods.HttpRequestBase;\nimport org.gradle.internal.impldep.org.apache.http.client.methods.HttpUriRequest;\nimport org.gradle.internal.impldep.org.apache.http.entity.StringEntity;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Map;\n\npublic class AzureArtifactsHttpUtils {\n\n    private AzureArtifactsHttpUtils() {\n        throw new UnsupportedOperationException();\n    }\n\n    public static HttpUriRequest createRequest(String url, String data, Map<String, String> headers, AuthenticationResult token) throws UnsupportedEncodingException {\n        final HttpRequestBase httpRequest;\n        if (data == null) {\n            httpRequest = new HttpGet(url);\n        } else {\n            HttpPost httpPost = new HttpPost(url);\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            httpPost.setEntity(new StringEntity(data));\n            httpRequest = httpPost;\n        }\n\n        if (token != null) {\n            httpRequest.setHeader(\"Authorization\", \"Bearer \" + token.getAccessToken());\n        }\n\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                httpRequest.setHeader(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return httpRequest;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing CompileOptions Method Return Types\nDESCRIPTION: Methods in CompileOptions class that need to be updated to return Property types instead of raw types for various compiler settings\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/public-api-mutable-properties.txt#2025-04-19_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\norg.gradle.api.tasks.compile.CompileOptions.getAllCompilerArgs()\norg.gradle.api.tasks.compile.CompileOptions.getCompilerArgs()\norg.gradle.api.tasks.compile.CompileOptions.isDebug()\n// ... other CompileOptions methods\n```\n\n----------------------------------------\n\nTITLE: Method Return Type Incompatibility List\nDESCRIPTION: List of Gradle API methods that return FileCollection or FileTree types but are not assignable to ConfigurableFileCollection. This appears to be a static analysis or compatibility check output from a code quality tool.\nSOURCE: https://github.com/gradle/gradle/blob/master/testing/architecture-test/src/changes/archunit-store/provider-task-file-collection.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMethod <org.gradle.api.plugins.antlr.AntlrTask.getAntlrClasspath()> does not have raw return type (org.gradle.api.file.FileCollection) assignable to any of [ConfigurableFileCollection] in (AntlrTask.java:0)\nMethod <org.gradle.api.plugins.antlr.AntlrTask.getSource()> does not have raw return type (org.gradle.api.file.FileTree) assignable to any of [ConfigurableFileCollection] in (AntlrTask.java:0)\nMethod <org.gradle.api.plugins.quality.Checkstyle.getCheckstyleClasspath()> does not have raw return type (org.gradle.api.file.FileCollection) assignable to any of [ConfigurableFileCollection] in (Checkstyle.java:0)\n```\n\n----------------------------------------\n\nTITLE: Obfuscated Code with Unicode Characters and Unusual Syntax\nDESCRIPTION: This code snippet contains heavy obfuscation with Unicode characters, invalid syntax, and malformed identifiers that make it impossible to determine its actual purpose or functionality.\nSOURCE: https://github.com/gradle/gradle/blob/master/platforms/core-configuration/declarative-dsl-core/src/test/resources/org/gradle/internal/declarativedsl/parsing/random/everything.txt#2025-04-19_snippet_1\n\nLANGUAGE: unknown\nCODE:\n```\nD_J(__=\"\",true).`N\"oPFx`(X(`l{B;/`.M._\\u096Cp(\"\"),n_T=\"!YgN\"),_\\u09EA\\u096A._\\u07C7_(Z(\";\\u096BtmW)FP \").Jp_(EOK=N\\u06F1_,_lx(null,0x0)),ABY=_b.G(`!/{ \\M`,i\\u07C1f=p.Y._Vf(_m))))\n```"
  }
]