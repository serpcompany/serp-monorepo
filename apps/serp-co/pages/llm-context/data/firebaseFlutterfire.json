[
  {
    "owner": "firebase",
    "repo": "flutterfire",
    "content": "TITLE: Initializing Auth Emulator - Dart\nDESCRIPTION: This code snippet initializes the Firebase Authentication emulator, allowing you to test authentication functionality locally without deploying live services. It sets the emulator host to 'localhost' and port to 9099.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> main() async {\n    WidgetsFlutterBinding.ensureInitialized();\n    await Firebase.initializeApp();\n\n    // Ideal time to initialize\n    await FirebaseAuth.instance.useAuthEmulator('localhost', 9099);\n    //...\n    }\n```\n\n----------------------------------------\n\nTITLE: Signing in with Microsoft - Dart\nDESCRIPTION: This code snippet demonstrates how to sign in with Microsoft using Firebase Authentication in Flutter. It uses the `MicrosoftAuthProvider` and handles the different sign-in methods for web (popup) and other platforms (provider).  `kIsWeb` is used to determine the platform.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_auth/firebase_auth.dart';\n\nFuture<UserCredential> signInWithMicrosoft() async {\n  final microsoftProvider = MicrosoftAuthProvider();\n  if (kIsWeb) {\n    await FirebaseAuth.instance.signInWithPopup(microsoftProvider);\n  } else {\n    await FirebaseAuth.instance.signInWithProvider(microsoftProvider);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Password-Based Account with Firebase Auth in Dart\nDESCRIPTION: This code snippet demonstrates how to create a new user account with a password using Firebase Authentication in a Flutter application. It uses the `createUserWithEmailAndPassword()` method of the `FirebaseAuth` instance to create a new user.  The code includes error handling for common issues like weak passwords or email addresses already in use. The email address and password are taken as input and the `credential` variable is the output.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/password-auth.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  final credential = await FirebaseAuth.instance.createUserWithEmailAndPassword(\n    email: emailAddress,\n    password: password,\n  );\n} on FirebaseAuthException catch (e) {\n  if (e.code == 'weak-password') {\n    print('The password provided is too weak.');\n  } else if (e.code == 'email-already-in-use') {\n    print('The account already exists for that email.');\n  }\n} catch (e) {\n  print(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In a User with Email and Password in Dart\nDESCRIPTION: This code snippet demonstrates how to sign in an existing user with an email address and password using Firebase Authentication in a Flutter application. It uses the `signInWithEmailAndPassword()` method of the `FirebaseAuth` instance to sign in the user. The code includes error handling for common issues like user not found or wrong password. The email address and password are taken as input and the `credential` variable is the output.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/password-auth.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  final credential = await FirebaseAuth.instance.signInWithEmailAndPassword(\n    email: emailAddress,\n    password: password\n  );\n} on FirebaseAuthException catch (e) {\n  if (e.code == 'user-not-found') {\n    print('No user found for that email.');\n  } else if (e.code == 'wrong-password') {\n    print('Wrong password provided for that user.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete a File in Cloud Storage - Flutter\nDESCRIPTION: This code snippet demonstrates how to delete a file from Cloud Storage using a reference. First, a reference to the file to be deleted is created using `storageRef.child()`. Then, the `delete()` method is called on the reference to delete the file.  Deleting a file is a permanent action.  Consider enabling Object Versioning.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/delete-files.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a reference to the file to delete\nfinal desertRef = storageRef.child(\"images/desert.jpg\");\n\n// Delete the file\nawait desertRef.delete();\n```\n\n----------------------------------------\n\nTITLE: Handling Background Messages on Apple and Android - Dart\nDESCRIPTION: This code snippet demonstrates how to register an `onBackgroundMessage` handler to handle FCM messages when the application is in the background (on Apple platforms and Android). The handler must be a top-level function and annotated with `@pragma('vm:entry-point')` (Flutter 3.3.0+). It initializes Firebase before using other Firebase services, and logs the message ID. The handler runs in its own isolate, so updating UI or application state directly is not possible.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n@pragma('vm:entry-point')\nFuture<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {\n  // If you're going to use other Firebase services in the background, such as Firestore,\n  // make sure you call `initializeApp` before using other Firebase services.\n  await Firebase.initializeApp();\n\n  print(\"Handling a background message: ${message.messageId}\");\n}\n\nvoid main() {\n  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Firebase Messaging Service Worker HTML\nDESCRIPTION: This HTML code snippet registers the Firebase Messaging service worker. It checks if the 'serviceWorker' is in the navigator and then registers 'firebase-messaging-sw.js' with a specific scope. This registration happens within the `window.addEventListener('load')` to ensure the page has loaded before attempting to register the service worker. This registration is for the newer Flutter template.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"flutter_bootstrap.js\" async>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      navigator.serviceWorker.register('firebase-messaging-sw.js', {\n        scope: '/firebase-cloud-messaging-push-scope',\n      });\n    });\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Event Parameters\nDESCRIPTION: This snippet demonstrates how to set default event parameters using the `setDefaultEventParameters()` method. These parameters are associated with all future events logged. It's not supported on web. Parameters are cleared by setting a key's value to `null`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_events.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Not supported on web\nawait FirebaseAnalytics.instance\n  .setDefaultEventParameters({\n    version: '1.2.3'\n  });\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Value Events in Flutter\nDESCRIPTION: This snippet demonstrates reading data from Firebase Realtime Database by listening for value events.  It creates a `DatabaseReference` and attaches a listener to the `onValue` stream. The listener receives a `DatabaseEvent` each time the data at the reference changes, including changes to children. The `event.snapshot.value` provides the data at the specific location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference starCountRef =\n        FirebaseDatabase.instance.ref('posts/$postId/starCount');\nstarCountRef.onValue.listen((DatabaseEvent event) {\n    final data = event.snapshot.value;\n    updateStarCount(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete MFA Enrollment Example - Dart\nDESCRIPTION: This complete code example demonstrates how to enroll a second factor using Firebase Authentication in a Flutter application. It includes steps to get a multi-factor session, verify the phone number, retrieve the SMS code from the user, create a PhoneAuthCredential, and complete the enrollment process. The example includes error handling for FirebaseAuthExceptions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal session = await user.multiFactor.getSession();\n  final auth = FirebaseAuth.instance;\n  await auth.verifyPhoneNumber(\n    multiFactorSession: session,\n    phoneNumber: phoneController.text,\n    verificationCompleted: (_) {},\n    verificationFailed: (_) {},\n    codeSent: (String verificationId, int? resendToken) async {\n      // See `firebase_auth` example app for a method of retrieving user's sms code: \n      // https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/lib/auth.dart#L591\n      final smsCode = await getSmsCodeFromUser(context);\n\n      if (smsCode != null) {\n        // Create a PhoneAuthCredential with the code\n        final credential = PhoneAuthProvider.credential(\n          verificationId: verificationId,\n          smsCode: smsCode,\n        );\n\n        try {\n          await user.multiFactor.enroll(\n            PhoneMultiFactorGenerator.getAssertion(\n              credential,\n            ),\n          );\n        } on FirebaseAuthException catch (e) {\n          print(e.message);\n        }\n      }\n    },\n    codeAutoRetrievalTimeout: (_) {},\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating User Email Address - Dart\nDESCRIPTION: This snippet demonstrates how to update a user's email address using the `updateEmail()` method.  The user must have recently signed in for this operation to succeed.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nawait user?.updateEmail(\"janeq@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Logging a Predefined Analytics Event (select_content)\nDESCRIPTION: This snippet demonstrates how to log a predefined `select_content` event using Firebase Analytics in Flutter. It uses the `logSelectContent` method with `contentType` and `itemId` parameters.  The function is asynchronous and returns a Future.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_events.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAnalytics.instance.logSelectContent(\n    contentType: \"image\",\n    itemId: itemId,\n);\n```\n\n----------------------------------------\n\nTITLE: Set Custom Keys\nDESCRIPTION: This code demonstrates how to set custom key/value pairs to associate with crash reports using `FirebaseCrashlytics.instance.setCustomKey`. It shows examples of setting keys to strings, booleans, integers, longs, floats, and doubles.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Set a key to a string.\nFirebaseCrashlytics.instance.setCustomKey('str_key', 'hello');\n\n// Set a key to a boolean.\nFirebaseCrashlytics.instance.setCustomKey(\"bool_key\", true);\n\n// Set a key to an int.\nFirebaseCrashlytics.instance.setCustomKey(\"int_key\", 1);\n\n// Set a key to a long.\nFirebaseCrashlytics.instance.setCustomKey(\"int_key\", 1L);\n\n// Set a key to a float.\nFirebaseCrashlytics.instance.setCustomKey(\"float_key\", 1.0f);\n\n// Set a key to a double.\nFirebaseCrashlytics.instance.setCustomKey(\"double_key\", 1.0);\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Firebase Realtime Database in Flutter\nDESCRIPTION: This snippet demonstrates updating specific fields in Firebase Realtime Database using the `update()` method. It creates a reference and updates the `age` field, leaving other fields untouched. This method allows for partial updates without overwriting the entire object.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference ref = FirebaseDatabase.instance.ref(\"users/123\");\n\n// Only update the age, leave the name and address!\nawait ref.update({\n  \"age\": 19,\n});\n```\n\n----------------------------------------\n\nTITLE: Facebook Sign-In for native (iOS+ and Android) using flutter_facebook_auth plugin in Dart\nDESCRIPTION: This code shows how to authenticate a user with Facebook on native platforms (iOS and Android) using the `flutter_facebook_auth` plugin. It triggers the Facebook login flow, obtains an access token, creates a Facebook credential, and then signs the user in using Firebase Authentication.  It requires the `flutter_facebook_auth` package and configuring the Facebook Developer App and enabling the Facebook sign-in provider in the Firebase console.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_facebook_auth/flutter_facebook_auth.dart';\n\nFuture<UserCredential> signInWithFacebook() async {\n  // Trigger the sign-in flow\n  final LoginResult loginResult = await FacebookAuth.instance.login();\n\n  // Create a credential from the access token\n  final OAuthCredential facebookAuthCredential = FacebookAuthProvider.credential(loginResult.accessToken.token);\n\n  // Once signed in, return the UserCredential\n  return FirebaseAuth.instance.signInWithCredential(facebookAuthCredential);\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Data to a List with push() in Flutter\nDESCRIPTION: This snippet demonstrates how to append data to a list in a multiuser application using the `push()` method.  The `push()` method generates a unique key, based on timestamp to prevent write conflicts. It requires the `firebase_database` package and is commonly used in scenarios like adding new posts in a social app. The `.set()` method is then used to assign the data to the newly created key.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference postListRef = FirebaseDatabase.instance.ref(\"posts\");\nDatabaseReference newPostRef = postListRef.push();\nnewPostRef.set({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Code Sent & Signing In\nDESCRIPTION: This snippet shows how to handle the `codeSent` callback. It explains how to update the UI to prompt the user for the SMS code, create a `PhoneAuthCredential` with the verification ID and SMS code, and then sign in (or link) the user with the credential.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  codeSent: (String verificationId, int? resendToken) async {\n    // Update the UI - wait for the user to enter the SMS code\n    String smsCode = 'xxxx';\n\n    // Create a PhoneAuthCredential with the code\n    PhoneAuthCredential credential = PhoneAuthProvider.credential(verificationId: verificationId, smsCode: smsCode);\n\n    // Sign the user in (or link) with the credential\n    await auth.signInWithCredential(credential);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Provider Specific User Profile Information - Dart\nDESCRIPTION: This code snippet demonstrates how to retrieve provider-specific profile information (e.g., from Google, Apple) using the `providerData` property of the `User` object.  It iterates through the `providerData` list to access provider ID, UID, name, email, and photo URL.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nif (user != null) {\n    for (final providerProfile in user.providerData) {\n        // ID of the provider (google.com, apple.com, etc.)\n        final provider = providerProfile.providerId;\n\n        // UID specific to the provider\n        final uid = providerProfile.uid;\n\n        // Name, email address, and profile photo URL\n        final name = providerProfile.displayName;\n        final emailAddress = providerProfile.email;\n        final profilePhoto = providerProfile.photoURL;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Authentication State Changes in Firebase - Dart\nDESCRIPTION: This code snippet demonstrates how to listen to authentication state changes using the `authStateChanges()` stream in Firebase. The listener receives the current `User` object or `null` if no user is authenticated. This allows building UIs that react to authentication state.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth.instance\n    .authStateChanges()\n    .listen((User? user) {\n      if (user != null) {\n        print(user.uid);\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Signing in with custom token with Firebase Authentication in Dart\nDESCRIPTION: This code snippet demonstrates how to sign in a user with a custom token using the Firebase Authentication service in a Dart application. The `signInWithCustomToken` method is called on the `FirebaseAuth.instance` object with a token obtained from a custom authentication server. The code also includes error handling for `FirebaseAuthException` to manage specific error cases like invalid or mismatched custom tokens.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/custom-auth.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n        final userCredential =\n            await FirebaseAuth.instance.signInWithCustomToken(token);\n        print(\"Sign-in successful.\");\n    } on FirebaseAuthException catch (e) {\n        switch (e.code) {\n            case \"invalid-custom-token\":\n                print(\"The supplied token is not a Firebase custom auth token.\");\n                break;\n            case \"custom-token-mismatch\":\n                print(\"The supplied token is for a different Firebase project.\");\n                break;\n            default:\n                print(\"Unknown error.\");\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Upload String Data - Flutter\nDESCRIPTION: This snippet uploads a string as a Data URL to Cloud Storage using the `putString()` method. The `format` parameter is set to `PutStringFormat.dataUrl` to specify the encoding format of the string.  It also includes a try-catch block to handle potential `FirebaseException` errors.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nString dataUrl = 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==';\n\ntry {\n  await mountainsRef.putString(dataUrl, format: PutStringFormat.dataUrl);\n} on FirebaseException catch (e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unguessable Short Dynamic Link - Flutter\nDESCRIPTION: This snippet demonstrates how to create a short Dynamic Link with an unguessable suffix using the Firebase Dynamic Links SDK in Flutter. It initializes a `DynamicLinkParameters` object and then calls `FirebaseDynamicLinks.instance.buildShortLink()` with the `shortLinkType` parameter set to `ShortDynamicLinkType.unguessable`. This creates a short link with a longer, 17-character suffix for increased security.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/create.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal unguessableDynamicLink = await FirebaseDynamicLinks.instance.buildShortLink(\n    dynamicLinkParams,\n    shortLinkType: ShortDynamicLinkType.unguessable,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Reference - Flutter\nDESCRIPTION: This snippet demonstrates how to create a Cloud Storage reference in Flutter. It shows how to create references from the app's root, from an initial file path, from a Google Cloud Storage URI, and from an HTTPS URL. This is the prerequisite to interact with files in the storage.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/download-files.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create a storage reference from our app\nfinal storageRef = FirebaseStorage.instance.ref();\n\n// Create a reference with an initial file path and name\nfinal pathReference = storageRef.child(\"images/stars.jpg\");\n\n// Create a reference to a file from a Google Cloud Storage URI\nfinal gsReference =\n    FirebaseStorage.instance.refFromURL(\"gs://YOUR_BUCKET/images/stars.jpg\");\n\n// Create a reference from an HTTPS URL\n// Note that in the URL, characters are URL escaped!\nfinal httpsReference = FirebaseStorage.instance.refFromURL(\n    \"https://firebasestorage.googleapis.com/b/YOUR_BUCKET/o/images%20stars.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Full Upload Example with Progress and Error Handling - Flutter\nDESCRIPTION: This comprehensive example demonstrates a complete file upload process with progress monitoring and error handling. It initializes the file, creates metadata, uploads the file to Firebase Storage, and listens for state changes to track progress and handle different outcomes (running, paused, canceled, error, success).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nfinal appDocDir = await getApplicationDocumentsDirectory();\nfinal filePath = \"${appDocDir.absolute}/path/to/mountains.jpg\";\nfinal file = File(filePath);\n\n// Create the file metadata\nfinal metadata = SettableMetadata(contentType: \"image/jpeg\");\n\n// Create a reference to the Firebase Storage bucket\nfinal storageRef = FirebaseStorage.instance.ref();\n\n// Upload file and metadata to the path 'images/mountains.jpg'\nfinal uploadTask = storageRef\n    .child(\"images/path/to/mountains.jpg\")\n    .putFile(file, metadata);\n\n// Listen for state changes, errors, and completion of the upload.\nuploadTask.snapshotEvents.listen((TaskSnapshot taskSnapshot) {\n  switch (taskSnapshot.state) {\n    case TaskState.running:\n      final progress =\n          100.0 * (taskSnapshot.bytesTransferred / taskSnapshot.totalBytes);\n      print(\"Upload is $progress% complete.\");\n      break;\n    case TaskState.paused:\n      print(\"Upload is paused.\");\n      break;\n    case TaskState.canceled:\n      print(\"Upload was canceled\");\n      break;\n    case TaskState.error:\n      // Handle unsuccessful uploads\n      break;\n    case TaskState.success:\n      // Handle successful uploads on complete\n      // ...\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Signing out a user with Firebase Auth in Dart\nDESCRIPTION: This snippet demonstrates how to sign out a user from Firebase Authentication using the `signOut()` method. It requires the `FirebaseAuth` instance from the Firebase Auth package.  The code calls the `signOut()` method which returns a Future.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/email-link-auth.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAuth.instance.signOut();\n```\n\n----------------------------------------\n\nTITLE: Verify Phone Number with MFA Session - Dart\nDESCRIPTION: This snippet verifies the user's phone number using the Firebase Authentication's `verifyPhoneNumber` method, incorporating the multi-factor session obtained earlier. It requires the `multiFactorSession`, the user's `phoneNumber`, and callback functions for handling verification completion, failure, SMS code sending, and auto-retrieval timeout. The SMS verification code is sent to the user's phone number, triggering the `codeSent` callback.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAuth.instance.verifyPhoneNumber(\n    multiFactorSession: multiFactorSession,\n    phoneNumber: phoneNumber,\n    verificationCompleted: (_) {},\n    verificationFailed: (_) {},\n    codeSent: (String verificationId, int? resendToken) async {\n      // The SMS verification code has been sent to the provided phone number.\n      // ...\n    },\n    codeAutoRetrievalTimeout: (_) {},\n  );\n```\n\n----------------------------------------\n\nTITLE: Download File in Memory - Flutter\nDESCRIPTION: This snippet shows how to download a file into memory as a `UInt8List` using the `getData()` method in Flutter. It is essential to set a maximum byte size to prevent memory issues. The snippet includes error handling for Firebase exceptions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/download-files.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal islandRef = storageRef.child(\"images/island.jpg\");\n\ntry {\n  const oneMegabyte = 1024 * 1024;\n  final Uint8List? data = await islandRef.getData(oneMegabyte);\n  // Data for \"images/island.jpg\" is returned, use this as needed.\n} on FirebaseException catch (e) {\n  // Handle any errors.\n}\n```\n\n----------------------------------------\n\nTITLE: Download File to Local Storage - Flutter\nDESCRIPTION: This snippet demonstrates how to download a file to a local device using the `writeToFile()` method in Flutter. It retrieves the application documents directory, creates a file path, and starts the download task. The snippet also includes a listener for the download task's snapshot events to handle different states (running, paused, success, canceled, error). Dependencies: path_provider package\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/download-files.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal islandRef = storageRef.child(\"images/island.jpg\");\n\nfinal appDocDir = await getApplicationDocumentsDirectory();\nfinal filePath = \"${appDocDir.absolute}/images/island.jpg\";\nfinal file = File(filePath);\n\nfinal downloadTask = islandRef.writeToFile(file);\ndownloadTask.snapshotEvents.listen((taskSnapshot) {\n  switch (taskSnapshot.state) {\n    case TaskState.running:\n      // TODO: Handle this case.\n      break;\n    case TaskState.paused:\n      // TODO: Handle this case.\n      break;\n    case TaskState.success:\n      // TODO: Handle this case.\n      break;\n    case TaskState.canceled:\n      // TODO: Handle this case.\n      break;\n    case TaskState.error:\n      // TODO: Handle this case.\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticate Anonymously with Firebase - Dart\nDESCRIPTION: This code snippet demonstrates how to sign in a user anonymously using Firebase Authentication in a Flutter application. It uses the `signInAnonymously()` method and handles potential `FirebaseAuthException` errors such as when anonymous authentication is not enabled.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/anonymous-auth.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  final userCredential =\n      await FirebaseAuth.instance.signInAnonymously();\n  print(\"Signed in with temporary account.\");\n} on FirebaseAuthException catch (e) {\n  switch (e.code) {\n    case \"operation-not-allowed\":\n      print(\"Anonymous auth hasn't been enabled for this project.\");\n      break;\n    default:\n      print(\"Unknown error.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Authentication Provider - Dart\nDESCRIPTION: This code snippet shows how to link an OAuth provider (Apple in this example) to an existing user in Firebase Authentication in Flutter. It uses `linkWithPopup` or `linkWithProvider` depending on whether it's running on the web or another platform. First it signs in anonymously.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAuth.instance.signInAnonymously();\n\nfinal appleProvider = AppleAuthProvider();\n\nif (kIsWeb) {\n  await FirebaseAuth.instance.currentUser?.linkWithPopup(appleProvider);\n\n  // You can also use `linkWithRedirect`\n} else {\n  await FirebaseAuth.instance.currentUser?.linkWithProvider(appleProvider);\n}\n\n// You're anonymous user is now upgraded to be able to connect with Sign In With Apple\n```\n\n----------------------------------------\n\nTITLE: Log a Checkout Event - Dart\nDESCRIPTION: This code logs a 'begin_checkout' event to Firebase Analytics. The event includes details such as the value of the checkout, the currency used, the items being purchased, and any applied coupon.  This method sends the event data to Google Analytics for tracking.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_get-started.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAnalytics.instance\n  .logBeginCheckout(\n    value: 10.0,\n    currency: 'USD',\n    items: [\n      AnalyticsEventItem(\n        itemName: 'Socks',\n        itemId: 'xjw73ndnw',\n        price: '10.0'\n      ),\n    ],\n    coupon: '10PERCENTOFF'\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing Phone Number Verification (Native)\nDESCRIPTION: This snippet demonstrates the initialization of phone number verification on native platforms using `FirebaseAuth.instance.verifyPhoneNumber`. It outlines the required parameters such as `phoneNumber`, and the four callbacks: `verificationCompleted`, `verificationFailed`, `codeSent`, and `codeAutoRetrievalTimeout`, which handle different stages of the verification process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAuth.instance.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  verificationCompleted: (PhoneAuthCredential credential) {},\n  verificationFailed: (FirebaseAuthException e) {},\n  codeSent: (String verificationId, int? resendToken) {},\n  codeAutoRetrievalTimeout: (String verificationId) {},\n);\n```\n\n----------------------------------------\n\nTITLE: Logging an Analytics Event Using logEvent()\nDESCRIPTION: This snippet demonstrates how to log an analytics event using the `logEvent()` method. It specifies the event `name` and a `parameters` map containing event-specific data.  This is useful for specifying custom parameters.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_events.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAnalytics.instance.logEvent(\n    name: \"select_content\",\n    parameters: {\n        \"content_type\": \"image\",\n        \"item_id\": itemId,\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Sign Out User from Firebase - Dart\nDESCRIPTION: This snippet shows how to sign out a user from Firebase Authentication in Flutter. It uses the `signOut()` method of the `FirebaseAuth` instance.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/anonymous-auth.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAuth.instance.signOut();\n```\n\n----------------------------------------\n\nTITLE: Sending Email Sign-in Link - Dart\nDESCRIPTION: This code snippet shows how to send an email sign-in link to the user's email address using FirebaseAuth.instance.sendSignInLinkToEmail(). It includes error handling and success confirmation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/email-link-auth.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar emailAuth = 'someemail@domain.com';\nFirebaseAuth.instance.sendSignInLinkToEmail(\n        email: emailAuth, actionCodeSettings: acs)\n    .catchError((onError) => print('Error sending email verification $onError'))\n    .then((value) => print('Successfully sent email verification'));\n});\n```\n\n----------------------------------------\n\nTITLE: Manage Uploads (Pause, Resume, Cancel) - Flutter\nDESCRIPTION: This snippet demonstrates how to manage ongoing file uploads, including pausing, resuming, and canceling the upload. It uses the `pause()`, `resume()`, and `cancel()` methods on the `UploadTask` object, and prints the boolean result of each operation. This provides control over the upload process and allows for handling network interruptions or user cancellations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nfinal task = mountainsRef.putFile(largeFile);\n\n// Pause the upload.\nbool paused = await task.pause();\nprint('paused, $paused');\n\n// Resume the upload.\nbool resumed = await task.resume();\nprint('resumed, $resumed');\n\n// Cancel the upload.\nbool canceled = await task.cancel();\nprint('canceled, $canceled');\n```\n\n----------------------------------------\n\nTITLE: Paginate Cloud Storage List Results - Dart\nDESCRIPTION: This snippet demonstrates how to paginate through a large directory in Cloud Storage using the `list()` method. It uses a `pageToken` to fetch subsequent pages of results, which avoids buffering all results in memory.  The `maxResults` parameter controls the number of results returned per page.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/list-files.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nStream<ListResult> listAllPaginated(Reference storageRef) async* {\n  String? pageToken;\n  do {\n    final listResult = await storageRef.list(ListOptions(\n      maxResults: 100,\n      pageToken: pageToken,\n    ));\n    yield listResult;\n    pageToken = listResult.nextPageToken;\n  } while (pageToken != null);\n}\n```\n\n----------------------------------------\n\nTITLE: Atomic Server-Side Increment - Firebase Realtime Database (Dart)\nDESCRIPTION: This code demonstrates how to use atomic increments with Firebase Realtime Database in Dart. It updates multiple paths using `ServerValue.increment(1)` to ensure that the increment operation is atomic and avoids conflicts.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid addStar(uid, key) async {\n  Map<String, Object?> updates = {};\n  updates[\"posts/$key/stars/$uid\"] = true;\n  updates[\"posts/$key/starCount\"] = ServerValue.increment(1);\n  updates[\"user-posts/$key/stars/$uid\"] = true;\n  updates[\"user-posts/$key/starCount\"] = ServerValue.increment(1);\n  return FirebaseDatabase.instance.ref().update(updates);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Property in Firebase Analytics (Dart)\nDESCRIPTION: This code snippet demonstrates how to set a user property in Firebase Analytics using the `setUserProperty()` method in Flutter.  It assumes that a custom definition for 'favorite_food' has been created in the Firebase console. The value of the 'favorite_food' property is set to the `favoriteFood` variable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_user-properties.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAnalytics.instance\n  .setUserProperty({\n    name: 'favorite_food',\n    value: favoriteFood,\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Interactions Dart\nDESCRIPTION: This Dart code demonstrates how to handle user interactions with notifications (when the app is opened from a terminated or background state). It uses `FirebaseMessaging.instance.getInitialMessage()` to retrieve a message if the app was opened from a terminated state and `FirebaseMessaging.onMessageOpenedApp` to listen for messages when the app is opened from the background. The `_handleMessage` function defines the specific behavior to execute upon interacting with the notification.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass Application extends StatefulWidget {\n  @override\n  State<StatefulWidget> createState() => _Application();\n}\n\nclass _Application extends State<Application> {\n  // It is assumed that all messages contain a data field with the key 'type'\n  Future<void> setupInteractedMessage() async {\n    // Get any messages which caused the application to open from\n    // a terminated state.\n    RemoteMessage? initialMessage =\n        await FirebaseMessaging.instance.getInitialMessage();\n\n    // If the message also contains a data property with a \"type\" of \"chat\",\n    // navigate to a chat screen\n    if (initialMessage != null) {\n      _handleMessage(initialMessage);\n    }\n\n    // Also handle any interaction when the app is in the background via a\n    // Stream listener\n    FirebaseMessaging.onMessageOpenedApp.listen(_handleMessage);\n  }\n\n  void _handleMessage(RemoteMessage message) {\n    if (message.data['type'] == 'chat') {\n      Navigator.pushNamed(context, '/chat',\n        arguments: ChatArguments(message),\n      );\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Run code required to handle interacted messages in an async function\n    // as initState() must not be async\n    setupInteractedMessage();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\"...\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing in with Yahoo - Dart\nDESCRIPTION: This code snippet demonstrates how to sign in with Yahoo using Firebase Authentication in Flutter. It uses the `YahooAuthProvider` and handles the different sign-in methods for web (popup) and other platforms (provider).  `kIsWeb` is used to determine the platform. The `_auth` variable is assumed to be a `FirebaseAuth` instance.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_auth/firebase_auth.dart';\n\nFuture<UserCredential> signInWithYahoo() async {\n  final yahooProvider = YahooAuthProvider();\n  if (kIsWeb) {\n    await _auth.signInWithPopup(yahooProvider);\n  } else {\n    await _auth.signInWithProvider(yahooProvider);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Messaging Service Worker Initialization JavaScript\nDESCRIPTION: This JavaScript code initializes Firebase Messaging within a service worker context. It imports the necessary Firebase SDKs, initializes Firebase with the provided configuration, and sets up a handler for background messages. The service worker file `firebase-messaging-sw.js` must be placed in the `web` directory and registered in `index.html`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Please see this file for the latest firebase-js-sdk version:\n// https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core_web/lib/src/firebase_sdk_version.dart\nimportScripts(\"https://www.gstatic.com/firebasejs/10.7.0/firebase-app-compat.js\");\nimportScripts(\"https://www.gstatic.com/firebasejs/10.7.0/firebase-messaging-compat.js\");\n\nfirebase.initializeApp({\n  apiKey: \"...\",\n  authDomain: \"...\",\n  databaseURL: \"...\",\n  projectId: \"...\",\n  storageBucket: \"...\",\n  messagingSenderId: \"...\",\n  appId: \"...\",\n});\n\nconst messaging = firebase.messaging();\n\n// Optional:\nmessaging.onBackgroundMessage((message) => {\n  console.log(\"onBackgroundMessage\", message);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Storage Reference in Dart\nDESCRIPTION: This code snippet demonstrates how to obtain a reference to the root of a Cloud Storage bucket using the FirebaseStorage singleton instance. The Firebase Storage SDK must be initialized before using this code. The `FirebaseStorage.instance.ref()` method returns a `Reference` object that points to the root of the storage bucket.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/create-reference.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal storageRef = FirebaseStorage.instance.ref();\n```\n\n----------------------------------------\n\nTITLE: Limiting Results in Firebase Database with limitToLast() in Flutter\nDESCRIPTION: This code snippet demonstrates how to limit the number of results retrieved from the Firebase Realtime Database using the `limitToLast()` method in Flutter. It defines a query that retrieves the 100 most recent posts from the 'posts' node. This creates a query that can be attached to a listener to synchronize the data.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal recentPostsRef = FirebaseDatabase.instance.ref('posts').limitToLast(100);\n```\n\n----------------------------------------\n\nTITLE: Facebook Sign-In for Web in Dart\nDESCRIPTION: This snippet demonstrates how to authenticate a user with Facebook on the web using Firebase Authentication. It creates a `FacebookAuthProvider` and configures it with optional permissions and custom parameters.  Then, it uses `signInWithPopup` to trigger the authentication flow in a popup window. The code requires configuring the Facebook Developer App and enabling the Facebook sign-in provider in the Firebase console.  Ensure the OAuth redirect URI from the Firebase console is added as a valid OAuth Redirect URI in your Facebook App.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFacebookAuthProvider facebookProvider = FacebookAuthProvider();\n\nfacebookProvider.addScope('email');\nfacebookProvider.setCustomParameters({\n  'display': 'popup',\n});\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserCredential> signInWithFacebook() async {\n  // Create a new provider\n  FacebookAuthProvider facebookProvider = FacebookAuthProvider();\n\n  facebookProvider.addScope('email');\n  facebookProvider.setCustomParameters({\n    'display': 'popup',\n  });\n\n  // Once signed in, return the UserCredential\n  return await FirebaseAuth.instance.signInWithPopup(facebookProvider);\n\n  // Or use signInWithRedirect\n  // return await FirebaseAuth.instance.signInWithRedirect(facebookProvider);\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Auth Providers to a User Account in Dart\nDESCRIPTION: This code snippet demonstrates how to link an authentication provider to the currently signed-in user's account using `linkWithCredential()` in Dart with Firebase Authentication. It handles potential `FirebaseAuthException` errors such as `provider-already-linked`, `invalid-credential`, and `credential-already-in-use`.  A valid `Credential` object must be passed to the `linkWithCredential` function.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/account-linking.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final userCredential = await FirebaseAuth.instance.currentUser\n      ?.linkWithCredential(credential);\n} on FirebaseAuthException catch (e) {\n  switch (e.code) {\n    case \"provider-already-linked\":\n      print(\"The provider has already been linked to the user.\");\n      break;\n    case \"invalid-credential\":\n      print(\"The provider's credential is not valid.\");\n      break;\n    case \"credential-already-in-use\":\n      print(\"The account corresponding to the credential already exists, \"\n          \"or is already linked to a Firebase User.\");\n      break;\n    // See the API reference for the full list of error codes.\n    default:\n      print(\"Unknown error.\");\n  }\n  \n```\n\n----------------------------------------\n\nTITLE: Reading Data Once with once() in Flutter\nDESCRIPTION: This snippet demonstrates reading data from Firebase Realtime Database once using the `once()` method.  It retrieves a `DatabaseEvent` from the local cache immediately, without checking for updates on the server. The `DatabaseEventType.value` specifies to retrieve the data at the location. The `event.snapshot.value` then contains the retrieved data, if present.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal event = await ref.once(DatabaseEventType.value);\nfinal username = event.snapshot.value?.username ?? 'Anonymous';\n```\n\n----------------------------------------\n\nTITLE: Add File Metadata - Flutter\nDESCRIPTION: This code demonstrates how to add metadata to a file during upload.  It uses the `SettableMetadata` class to specify metadata properties such as `contentType`. The metadata is passed as an argument to the `putFile()` method.  A try-catch block is included for handling potential `FirebaseException` errors.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  await mountainsRef.putFile(file, SettableMetadata(\n    contentType: \"image/jpeg\",\n  ));\n} on firebase_core.FirebaseException catch (e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Password Reset Email - Dart\nDESCRIPTION: This snippet demonstrates how to localize the password reset email by setting the language code on the `FirebaseAuth` instance before sending the email.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAuth.instance.setLanguageCode(\"fr\");\n```\n\n----------------------------------------\n\nTITLE: Initializing signInWithPhoneNumber with reCAPTCHA - Dart\nDESCRIPTION: This snippet initializes the `signInWithPhoneNumber` method with a `RecaptchaVerifier` instance. The `RecaptchaVerifier` is configured to display an inline widget within a specified DOM element ('recaptcha'). The size and theme of the reCAPTCHA widget are customized using the `size` and `theme` parameters. The `auth` object is assumed to be an instance of `FirebaseAuth`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nConfirmationResult confirmationResult = await auth.signInWithPhoneNumber('+44 7123 123 456', RecaptchaVerifier(\n  container: 'recaptcha',\n  size: RecaptchaVerifierSize.compact,\n  theme: RecaptchaVerifierTheme.dark,\n));\n```\n\n----------------------------------------\n\nTITLE: Download to Local Storage - Flutter (Full Example)\nDESCRIPTION: A full example of downloading a file to local storage, showcasing error handling with snapshot events, is demonstrated with this snippet.  It encompasses the creation of file paths, the download task initiation, and state-based logic using a listener.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/download-files.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal islandRef = storageRef.child(\"images/island.jpg\");\n\nfinal appDocDir = await getApplicationDocumentsDirectory();\nfinal filePath = \"${appDocDir.absolute}/images/island.jpg\";\nfinal file = File(filePath);\n\nfinal downloadTask = islandRef.writeToFile(file);\ndownloadTask.snapshotEvents.listen((taskSnapshot) {\n  switch (taskSnapshot.state) {\n    case TaskState.running:\n      // TODO: Handle this case.\n      break;\n    case TaskState.paused:\n      // TODO: Handle this case.\n      break;\n    case TaskState.success:\n      // TODO: Handle this case.\n      break;\n    case TaskState.canceled:\n      // TODO: Handle this case.\n      break;\n    case TaskState.error:\n      // TODO: Handle this case.\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Verification Completion (Android)\nDESCRIPTION: This code snippet shows how to handle the `verificationCompleted` callback on Android. When the SMS code is automatically verified, a `PhoneAuthCredential` is provided, which can be used to sign in or link the user's phone number.  This only executes on Android devices that support automatic SMS code resolution.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  verificationCompleted: (PhoneAuthCredential credential) async {\n    // ANDROID ONLY!\n\n    // Sign the user in (or link) with the auto-generated credential\n    await auth.signInWithCredential(credential);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Set User Identifiers\nDESCRIPTION: This snippet demonstrates how to set a user identifier for crash reports using `FirebaseCrashlytics.instance.setUserIdentifier`. This allows you to identify users who experienced a crash.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseCrashlytics.instance.setUserIdentifier(\"12345\");\n```\n\n----------------------------------------\n\nTITLE: Sending App Check Token in HTTP Header - Dart\nDESCRIPTION: This code snippet demonstrates how to retrieve an App Check token using FirebaseAppCheck in Dart and include it in the header of an HTTP request to a backend server. The token is obtained asynchronously using `FirebaseAppCheck.instance.getToken()`. It then checks if a valid token is retrieved, and if so, it includes it in the `X-Firebase-AppCheck` header of the HTTP request. If the token retrieval fails, an error condition is handled. The `http` package is required.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/custom-resource.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid callApiExample() async {\n    final appCheckToken = await FirebaseAppCheck.instance.getToken();\n    if (appCheckToken != null) {\n        final response = await http.get(\n            Uri.parse(\"https://yourbackend.example.com/yourExampleEndpoint\"),\n            headers: {\"X-Firebase-AppCheck\": appCheckToken},\n        );\n    } else {\n        // Error: couldn't get an App Check token.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch and Activate Remote Config - Dart\nDESCRIPTION: This code snippet demonstrates fetching and activating Remote Config values in a single call. It fetches the latest parameter values from the Remote Config backend and makes them available to the app. This should be done at a time which ensures a smooth user experience.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/remote-config/_get-started.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nawait remoteConfig.fetchAndActivate();\n```\n\n----------------------------------------\n\nTITLE: Handle Interaction With Notifications (Dart)\nDESCRIPTION: This Dart code handles user interaction with notifications, specifically when the app is opened from a terminated state or brought to the foreground from the background. It uses `getInitialMessage()` to retrieve the initial message from a terminated state and `onMessageOpenedApp` to listen for messages when the app is opened from the background.  A hypothetical `_handleMessage` function then performs an action based on the message's data.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/first-message.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Application extends StatefulWidget {\n  @override\n  State<StatefulWidget> createState() => _Application();\n}\n\nclass _Application extends State<Application> {\n  // In this example, suppose that all messages contain a data field with the key 'type'.\n  Future<void> setupInteractedMessage() async {\n    // Get any messages which caused the application to open from\n    // a terminated state.\n    RemoteMessage? initialMessage =\n        await FirebaseMessaging.instance.getInitialMessage();\n\n    // If the message also contains a data property with a \"type\" of \"chat\",\n    // navigate to a chat screen\n    if (initialMessage != null) {\n      _handleMessage(initialMessage);\n    }\n\n    // Also handle any interaction when the app is in the background via a\n    // Stream listener\n    FirebaseMessaging.onMessageOpenedApp.listen(_handleMessage);\n  }\n\n  void _handleMessage(RemoteMessage message) {\n    if (message.data['type'] == 'chat') {\n      Navigator.pushNamed(context, '/chat',\n        arguments: ChatArguments(message),\n      );\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Run code required to handle interacted messages in an async function\n    // as initState() must not be async\n    setupInteractedMessage();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\"...\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Firebase Realtime Database in Flutter\nDESCRIPTION: This snippet demonstrates writing data to Firebase Realtime Database using the `set()` method. It creates a reference to a specific location (`users/123`) and sets the data as a `Map`. This overwrites any existing data at that location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference ref = FirebaseDatabase.instance.ref(\"users/123\");\n\nawait ref.set({\n  \"name\": \"John\",\n  \"age\": 18,\n  \"address\": {\n    \"line1\": \"100 Mountain View\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling FirebaseAuthException on Sign-in - Dart\nDESCRIPTION: This code snippet demonstrates how to catch FirebaseAuthException when attempting to sign in with email and password in Flutter. It catches the exception, prints the error code and message, and allows for custom error handling. Requires the firebase_auth package.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/errors.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  await FirebaseAuth.instance.signInWithEmailAndPassword(\n    email: \"barry.allen@example.com\",\n    password: \"SuperSecretPassword!\"\n  );\n} on FirebaseAuthException catch  (e) {\n  print('Failed with error code: ${e.code}');\n  print(e.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling account-exists-with-different-credential - Dart\nDESCRIPTION: This snippet handles the 'account-exists-with-different-credential' error in Firebase Authentication when a user attempts to sign in with a provider (e.g., Google) using an email that is already associated with a different provider (e.g., Facebook). It shows how to fetch existing sign-in methods and link the new credential to the existing account. This requires firebase_auth and potentially other auth provider packages (e.g., google_sign_in, flutter_facebook_auth).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/errors.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth auth = FirebaseAuth.instance;\n\n// Create a credential from a Google Sign-in Request\nvar googleAuthCredential = GoogleAuthProvider.credential(accessToken: 'xxxx');\n\ntry {\n  // Attempt to sign in the user in with Google\n  await auth.signInWithCredential(googleAuthCredential);\n} on FirebaseAuthException catch (e) {\n  if (e.code == 'account-exists-with-different-credential') {\n    // The account already exists with a different credential\n    String email = e.email;\n    AuthCredential pendingCredential = e.credential;\n\n    // Fetch a list of what sign-in methods exist for the conflicting user\n    List<String> userSignInMethods = await auth.fetchSignInMethodsForEmail(email);\n\n    // If the user has several sign-in methods,\n    // the first method in the list will be the \"recommended\" method to use.\n    if (userSignInMethods.first == 'password') {\n      // Prompt the user to enter their password\n      String password = '...';\n\n      // Sign the user in to their account with the password\n      UserCredential userCredential = await auth.signInWithEmailAndPassword(\n        email: email,\n        password: password,\n      );\n\n      // Link the pending credential with the existing account\n      await userCredential.user.linkWithCredential(pendingCredential);\n\n      // Success! Go back to your application flow\n      return goToApplication();\n    }\n\n    // Since other providers are now external, you must now sign the user in with another\n    // auth provider, such as Facebook.\n    if (userSignInMethods.first == 'facebook.com') {\n      // Create a new Facebook credential\n      String accessToken = await triggerFacebookAuthentication();\n      var facebookAuthCredential = FacebookAuthProvider.credential(accessToken);\n\n      // Sign the user in with the credential\n      UserCredential userCredential = await auth.signInWithCredential(facebookAuthCredential);\n\n      // Link the pending credential with the existing account\n      await userCredential.user.linkWithCredential(pendingCredential);\n\n      // Success! Go back to your application flow\n      return goToApplication();\n    }\n\n    // Handle other OAuth providers...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a Custom Analytics Event\nDESCRIPTION: This snippet demonstrates how to log a custom analytics event named `share_image` using Firebase Analytics. It includes custom parameters such as `image_name` and `full_text` within the `parameters` map.  The `logEvent` method is used to log the custom event.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_events.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAnalytics.instance.logEvent(\n    name: \"share_image\",\n    parameters: {\n        \"image_name\": name,\n        \"full_text\": text,\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Upload Raw Data (Uint8List) - Flutter\nDESCRIPTION: This snippet demonstrates uploading raw data in the form of a `Uint8List` to Cloud Storage using the `putData()` method. This method is useful when uploading a string or File is not practical. A try-catch block is used to handle potential `FirebaseException` errors.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  // Upload raw data.\n  await mountainsRef.putData(data);\n} on firebase_core.FirebaseException catch (e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing App Check with Debug Provider (Android)\nDESCRIPTION: This code snippet shows how to initialize Firebase App Check with the debug provider for Android in a Flutter application.  It requires the `firebase_core` and `firebase_app_check` plugins.  It initializes Firebase and activates App Check with `AndroidProvider.debug`, also including a placeholder `webRecaptchaSiteKey`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/debug-provider.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:firebase_core/firebase_core.dart';\n\n// Import the firebase_app_check plugin\nimport 'package:firebase_app_check/firebase_app_check.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  await FirebaseAppCheck.instance.activate(\n    webRecaptchaSiteKey: 'recaptcha-v3-site-key',\n    // Set androidProvider to `AndroidProvider.debug`\n    androidProvider: AndroidProvider.debug,\n  );\n  runApp(App());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Google Sign-In for Web in Dart\nDESCRIPTION: This code demonstrates how to authenticate a user with Google on the web using Firebase Authentication. It creates a `GoogleAuthProvider` and configures it with optional scopes and custom parameters. Then, it uses `signInWithPopup` to trigger the authentication flow in a popup window. The code requires enabling the Google sign-in provider in the Firebase console and configuring the OAuth redirect URI in the Google Cloud Console. Alternatively, `signInWithRedirect` can be used.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGoogleAuthProvider googleProvider = GoogleAuthProvider();\n\ngoogleProvider.addScope('https://www.googleapis.com/auth/contacts.readonly');\ngoogleProvider.setCustomParameters({\n  'login_hint': 'user@example.com'\n});\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserCredential> signInWithGoogle() async {\n  // Create a new provider\n  GoogleAuthProvider googleProvider = GoogleAuthProvider();\n\n  googleProvider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n  googleProvider.setCustomParameters({\n    'login_hint': 'user@example.com'\n  });\n\n  // Once signed in, return the UserCredential\n  return await FirebaseAuth.instance.signInWithPopup(googleProvider);\n\n  // Or use signInWithRedirect\n  // return await FirebaseAuth.instance.signInWithRedirect(googleProvider);\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Database Instance with Custom URL - Dart\nDESCRIPTION: This code initializes a Realtime Database instance using a custom database URL. The `instanceFor` method is used to specify both the Firebase app and the specific database URL, allowing connection to a non-default Realtime Database within the project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/start.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal firebaseApp = Firebase.app();\nfinal rtdb = FirebaseDatabase.instanceFor(app: firebaseApp, databaseURL: 'https://your-realtime-database-url.firebaseio.com/');\n```\n\n----------------------------------------\n\nTITLE: Setting User Password - Dart\nDESCRIPTION: This snippet shows how to set a user's password with the `updatePassword()` method.  Like updating email, the user must have recently signed in.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nawait user?.updatePassword(newPassword);\n```\n\n----------------------------------------\n\nTITLE: Verifying Phone Number for Multi-Factor Authentication - Dart\nDESCRIPTION: This code verifies the user's phone number using `FirebaseAuth.instance.verifyPhoneNumber`.  It requires the `multiFactorSession` and `multiFactorInfo` obtained from the resolver. Callbacks for verification completion, failure, code sent, and auto-retrieval timeout are also defined. It assumes FirebaseAuth is already initialized.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAuth.instance.verifyPhoneNumber(\n  multiFactorSession: session,\n  multiFactorInfo: hint,\n  verificationCompleted: (_) {},\n  verificationFailed: (_) {},\n  codeSent: (String verificationId, int? resendToken) async {\n    // ...\n  },\n  codeAutoRetrievalTimeout: (_) {},\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Links When App Is Open - Flutter (Dart)\nDESCRIPTION: This Dart code snippet shows how to handle Firebase Dynamic Links when the Flutter application is already open (in the foreground or background). It uses the `FirebaseDynamicLinks.instance.onLink` stream to listen for incoming Dynamic Links and navigates the user to the path specified in the Dynamic Link. An error handler is also included for handling any errors during the process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/receive.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseDynamicLinks.instance.onLink.listen((dynamicLinkData) {\n  Navigator.pushNamed(context, dynamicLinkData.link.path);\n}).onError((error) {\n  // Handle errors\n});\n```\n\n----------------------------------------\n\nTITLE: Toggle Star with Transaction - Firebase Realtime Database (Dart)\nDESCRIPTION: This code snippet demonstrates how to toggle a star on a post using a transaction in Firebase Realtime Database with Flutter. It reads the current post data, updates the `stars` map and `starCount`, and returns the updated data. The transaction ensures that concurrent updates are handled correctly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid toggleStar(String uid) async {\n  DatabaseReference postRef =\n      FirebaseDatabase.instance.ref(\"posts/foo-bar-123\");\n\n  TransactionResult result = await postRef.runTransaction((Object? post) {\n    // Ensure a post at the ref exists.\n    if (post == null) {\n      return Transaction.abort();\n    }\n\n    Map<String, dynamic> _post = Map<String, dynamic>.from(post as Map);\n    if (_post[\"stars\"] is Map && _post[\"stars\"][uid] != null) {\n      _post[\"starCount\"] = (_post[\"starCount\"] ?? 1) - 1;\n      _post[\"stars\"][uid] = null;\n    } else {\n      _post[\"starCount\"] = (_post[\"starCount\"] ?? 0) + 1;\n      if (!_post.containsKey(\"stars\")) {\n        _post[\"stars\"] = {};\n      }\n      _post[\"stars\"][uid] = true;\n    }\n\n    // Return the new data.\n    return Transaction.success(_post);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email Verification Link with ActionCodeSettings in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to send an email verification link with custom settings using Firebase Authentication. It configures the `ActionCodeSettings` object with a continue URL, iOS bundle ID, and Android package name to handle the verification process in a mobile app or web page.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/passing-state-in-email-actions.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal user = FirebaseAuth.instance.currentUser;\n\nfinal actionCodeSettings = ActionCodeSettings(\n  url: \"http://www.example.com/verify?email=${user?.email}\",\n  iOSBundleId: \"com.example.ios\",\n  androidPackageName: \"com.example.android\",\n);\n\nawait user?.sendEmailVerification(actionCodeSettings);\n```\n\n----------------------------------------\n\nTITLE: Writing a new post with fan-out in Flutter\nDESCRIPTION: This snippet demonstrates writing a new post and updating multiple locations in Firebase Realtime Database using `push()` to generate a unique key and `update()` for atomic updates.  It creates a new post entry and simultaneously updates the posts list and the user's post list. Using `push()` to generate a unique post key under the 'posts' node.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid writeNewPost(String uid, String username, String picture, String title,\n        String body) async {\n    // A post entry.\n    final postData = {\n        'author': username,\n        'uid': uid,\n        'body': body,\n        'title': title,\n        'starCount': 0,\n        'authorPic': picture,\n    };\n\n    // Get a key for a new Post.\n    final newPostKey =\n        FirebaseDatabase.instance.ref().child('posts').push().key;\n\n    // Write the new post's data simultaneously in the posts list and the\n    // user's post list.\n    final Map<String, Map> updates = {};\n    updates['/posts/$newPostKey'] = postData;\n    updates['/user-posts/$uid/$newPostKey'] = postData;\n\n    return FirebaseDatabase.instance.ref().update(updates);\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Data by Nested Child Value in Flutter\nDESCRIPTION: This snippet demonstrates sorting data by values nested within child nodes using `orderByChild()`.  It orders posts by the `views` value nested under the `metrics` key. Requires the `firebase_database` package.  This is useful for complex data structures where the sorting key is not a direct child of the node.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal mostViewedPosts =\n    FirebaseDatabase.instance.ref('posts').orderByChild('metrics/views');\n```\n\n----------------------------------------\n\nTITLE: Re-authenticating a User - Dart\nDESCRIPTION: This snippet shows how to re-authenticate a user when performing sensitive actions that require recent sign-in.  The `reauthenticateWithCredential()` method is called with the user's credentials.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\n// Prompt the user to re-provide their sign-in credentials.\n// Then, use the credentials to reauthenticate:\nawait user?.reauthenticateWithCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Navigating with References in Dart\nDESCRIPTION: This code demonstrates how to navigate the Cloud Storage hierarchy using the `parent` and `root` properties of a Firebase Storage reference. The `parent` property returns a reference to the parent node, while the `root` property returns a reference to the root of the storage bucket. Accessing the `parent` property of the root reference results in null.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/create-reference.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// parent allows us to move our reference to a parent node\n// imagesRef2 now points to 'images'\nfinal imagesRef2 = spaceRef.parent;\n\n// root allows us to move all the way back to the top of our bucket\n// rootRef now points to the root\nfinal rootRef = spaceRef.root;\n```\n\n----------------------------------------\n\nTITLE: Report Caught Exceptions\nDESCRIPTION: This snippet shows how to record non-fatal exceptions in catch blocks using `FirebaseCrashlytics.instance.recordError` and `FirebaseCrashlytics.instance.recordFlutterError`. It includes the error, stack trace, and an optional reason.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseCrashlytics.instance.recordError(\n  error,\n  stackTrace,\n  reason: 'a non-fatal error'\n);\n\n// Or you can use:\nawait FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Nodes in Firebase Realtime Database in Flutter\nDESCRIPTION: This snippet demonstrates updating multiple nodes in Firebase Realtime Database simultaneously using the `update()` method. It accepts a map of paths to values, allowing you to update different parts of the database in a single operation.  The `update()` method takes a map where the keys are paths and the values are the data to set at those paths.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference ref = FirebaseDatabase.instance.ref(\"users\");\n\nawait ref.update({\n  \"123/age\": 19,\n  \"123/address/line1\": \"1 Mountain View\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile Information - Dart\nDESCRIPTION: This snippet shows how to update a user's display name and profile photo URL using the `updateDisplayName()` and `updatePhotoURL()` methods of the `User` object. The `user` object must not be null.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait user?.updateDisplayName(\"Jane Q. User\");\nawait user?.updatePhotoURL(\"https://example.com/jane-q-user/profile.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Suppress Intermediate Events in Transaction - Firebase (Dart)\nDESCRIPTION: This snippet shows how to prevent intermediate states from being raised during a Firebase transaction. By setting `applyLocally` to `false`, events are only raised once the transaction has completed on the server.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nawait ref.runTransaction((Object? post) {\n  // ...\n}, applyLocally: false);\n```\n\n----------------------------------------\n\nTITLE: Completing Sign-in with Email Link - Dart\nDESCRIPTION: This code snippet demonstrates how to verify the email link and complete the sign-in process using FirebaseAuth.instance.signInWithEmailLink(). It extracts user information and includes error handling.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/email-link-auth.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Confirm the link is a sign-in with email link.\nif (FirebaseAuth.instance.isSignInWithEmailLink(emailLink)) {\n  try {\n    // The client SDK will parse the code from the link for you.\n    final userCredential = await FirebaseAuth.instance\n        .signInWithEmailLink(email: emailAuth, emailLink: emailLink);\n\n    // You can access the new user via userCredential.user.\n    final emailAddress = userCredential.user?.email;\n\n    print('Successfully signed in with email link!');\n  } catch (error) {\n    print('Error signing in with email link.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Metadata in Cloud Storage in Flutter\nDESCRIPTION: This code snippet shows how to specify custom metadata using the `customMetadata` parameter of the `SettableMetadata` constructor when updating file metadata in Cloud Storage using Flutter.  It sets location and activity custom properties.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/file-metadata.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Create reference to the file whose metadata we want to change\nfinal forestRef = storageRef.child(\"images/forest.jpg\");\n\n// Create file metadata to update\nfinal newCustomMetadata = SettableMetadata(\n  customMetadata: {\n    \"location\": \"Yosemite, CA, USA\",\n    \"activity\": \"Hiking\",\n  },\n);\n\n// Update metadata properties\nfinal metadata = await forestRef.updateMetadata(newCustomMetadata);\n\n// Updated metadata for 'images/forest.jpg' is returned\n```\n\n----------------------------------------\n\nTITLE: Reading Data Once with get() in Flutter\nDESCRIPTION: This snippet demonstrates reading data from Firebase Realtime Database once using the `get()` method. It retrieves a snapshot of the data at the specified location.  It checks if the snapshot exists before accessing its value. `get()` will attempt to retrieve the value from the server, falling back to the local cache if the server is unavailable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal ref = FirebaseDatabase.instance.ref();\nfinal snapshot = await ref.child('users/$userId').get();\nif (snapshot.exists) {\n    print(snapshot.value);\n} else {\n    print('No data available.');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Timestamp\nDESCRIPTION: Sets a server timestamp in the Firebase Realtime Database when the client disconnects. This is done using `ServerValue.timestamp` with the `onDisconnect` primitive, allowing reliable time tracking.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal userLastOnlineRef =\n    FirebaseDatabase.instance.ref(\"users/joe/lastOnline\");\nuserLastOnlineRef.onDisconnect().set(ServerValue.timestamp);\n```\n\n----------------------------------------\n\nTITLE: Apple Platform Sign-In (iOS+) in Dart\nDESCRIPTION: This code provides an alternative method for Apple sign-in on iOS+ platforms. It generates a nonce, creates a SHA-256 hash of the nonce, retrieves an ID token, and then uses these values to create an Apple credential. Finally, it signs in using Firebase Authentication. This approach requires generating a nonce, hashing it, and obtaining the ID token using platform-specific methods. Consider using `crypto` and `sign_in_with_apple` pub packages.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Implement a function that generates a nonce. See iOS documentation for how to create a nonce:\n// https://firebase.google.com/docs/auth/ios/apple#sign_in_with_apple_and_authenticate_with_firebase\nString rawNonce = createNonce();\n// Create a SHA-256 hash of the nonce. Consider using the `crypto` package from the pub.dev registry.\nString hashSHA256String = createHashSHA256String(rawNonce);\n// Use the hash of the nonce to get the idToken. Consider using the `sign_in_with_apple` plugin from the pub.dev registry.\nString idToken = await getIdToken();\n\nfinal fullName = AppleFullPersonName(\n  familyName: 'Name',\n  givenName: 'Your',\n);\n// Use the `rawNonce` and `idToken` to get the credential\nfinal credential = AppleAuthProvider.credentialWithIDToken(\n  idToken,\n  rawNonce,\n  fullName,\n);\n\nawait FirebaseAuth.instance.signInWithCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Signing In with Phone Number (Web)\nDESCRIPTION: This snippet demonstrates how to sign in with a phone number on web platforms using `signInWithPhoneNumber`. It highlights the reCAPTCHA requirement and the process of confirming the sign-in with the SMS code received after completing the reCAPTCHA.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth auth = FirebaseAuth.instance;\n\n// Wait for the user to complete the reCAPTCHA & for an SMS code to be sent.\nConfirmationResult confirmationResult = await auth.signInWithPhoneNumber('+44 7123 123 456');\n```\n\n----------------------------------------\n\nTITLE: Apple Sign-In in Dart\nDESCRIPTION: This code shows how to authenticate a user with Apple. It creates an `AppleAuthProvider` and uses either `signInWithPopup` for web or `signInWithProvider` for other platforms to trigger the sign-in flow. The code depends on `firebase_auth` package. Ensure that Sign In with Apple is properly configured for each platform and Apple is enabled as a sign-in provider in Firebase.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_auth/firebase_auth.dart';\n\nFuture<UserCredential> signInWithApple() async {\n  final appleProvider = AppleAuthProvider();\n  if (kIsWeb) {\n    await FirebaseAuth.instance.signInWithPopup(appleProvider);\n  } else {\n    await FirebaseAuth.instance.signInWithProvider(appleProvider);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Code Trace - Dart\nDESCRIPTION: This snippet demonstrates how to add a custom code trace using the Firebase Performance Monitoring API in a Flutter application. It initializes a new trace, starts it, executes the code to be traced, and then stops the trace. This measures the duration of the enclosed code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/_custom-code-traces.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTrace customTrace = FirebasePerformance.instance.newTrace('custom-trace');\nawait customTrace.start();\n\n// Code you want to trace\n\nawait customTrace.stop();\n```\n\n----------------------------------------\n\nTITLE: Enable Crashlytics collection programmatically in Flutter\nDESCRIPTION: This Dart snippet enables Crashlytics data collection for select users. It calls the `setCrashlyticsCollectionEnabled()` method on the `FirebaseCrashlytics.instance` object, passing `true` to enable collection.  The override value persists across app launches. Dependencies include the `firebase_crashlytics` package.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\n    FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Attributes - Dart\nDESCRIPTION: This snippet shows how to create, update, read, delete, and read all custom attributes associated with a custom code trace in Flutter.  It demonstrates the use of `putAttribute`, `getAttribute`, `removeAttribute`, and `getAttributes` methods.  It emphasizes the importance of avoiding the use of personally identifiable information in attributes.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/_custom-code-traces.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTrace trace = FirebasePerformance.instance.newTrace(\"test_trace\");\n\n// Update scenario.\ntrace.putAttribute(\"experiment\", \"A\");\n\n// Reading scenario.\nString? experimentValue = trace.getAttribute(\"experiment\");\n\n// Delete scenario.\ntrace.removeAttribute(\"experiment\");\n\n// Read attributes.\nMap<String, String> traceAttributes = trace.getAttributes();\n```\n\n----------------------------------------\n\nTITLE: Throwing Test Exception in Flutter\nDESCRIPTION: This snippet adds a button to a Flutter app. When pressed, the button throws a test exception, which Crashlytics can then report.  The code assumes you have set up Crashlytics and have an error handler at the top-level Zone that calls `FirebaseCrashlytics.instance.recordError(error, stack, fatal: true)`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_force-test-crash.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nTextButton(\n    onPressed: () => throw Exception(),\n    child: const Text(\"Throw Test Exception\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Enable BigQuery Export - Android - Dart\nDESCRIPTION: This code snippet demonstrates how to enable message delivery metrics export to BigQuery for Android using the FirebaseMessaging instance in a Flutter application. No additional dependencies are required beyond the Firebase Messaging Flutter package.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseMessaging.instance.setDeliveryMetricsExportToBigQuery(true);\n```\n\n----------------------------------------\n\nTITLE: Install FCM Plugin (Flutter)\nDESCRIPTION: This command installs the firebase_messaging plugin to your Flutter project.  This plugin provides the necessary APIs to interact with Firebase Cloud Messaging. It should be executed from the root directory of the Flutter project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/first-message.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add firebase_messaging\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Persistence - Dart\nDESCRIPTION: This code snippet shows how to disable authentication persistence on web platforms during initialization and then how to change it after initialization. It uses `FirebaseAuth.instanceFor()` to create an Auth instance with disabled persistence, and `setPersistence()` to change the persistence later.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n// Disable persistence on web platforms. Must be called on initialization:\nfinal auth = FirebaseAuth.instanceFor(app: Firebase.app(), persistence: Persistence.NONE);\n// To change it after initialization, use `setPersistence()`:\nawait auth.setPersistence(Persistence.LOCAL);\n```\n\n----------------------------------------\n\nTITLE: Listening to userChanges() - Dart\nDESCRIPTION: This code snippet demonstrates how to listen for user changes using the `userChanges()` method. It captures sign-in, sign-out, token changes, and updates to user profile information using methods like reload(), unlink(), etc.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth.instance\n  .userChanges()\n  .listen((User? user) {\n    if (user == null) {\n      print('User is currently signed out!');\n    } else {\n      print('User is signed in!');\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Using withConverter for type-safe Firestore access in Dart\nDESCRIPTION: This code demonstrates how to use the `withConverter` function to interact with Firestore collections and documents in a type-safe way. It shows how to define `fromFirestore` and `toFirestore` converters for a `Model` class, allowing you to read and write `Model` objects directly to and from Firestore, instead of using maps. This provides compile-time safety and improved code clarity.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore_web/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nfinal modelsRef = FirebaseFirestore\n        .instance\n        .collection('models')\n        .withConverter<Model>(\n          fromFirestore: (snapshot, _) => Model.fromJson(snapshot.data()!),\n          toFirestore: (model, _) => model.toJson(),\n        );\n\n    Future<void> main() async {\n      // Writes now take a Model as parameter instead of a Map\n      await modelsRef.add(Model());\n      final Model model = await modelsRef.doc('123').get().then((s) => s.data());\n    }\n```\n\n----------------------------------------\n\nTITLE: Localizing Verification Email - Dart\nDESCRIPTION: This snippet illustrates how to localize the verification email by setting the language code on the `FirebaseAuth` instance before sending the email using `setLanguageCode()`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAuth.instance.setLanguageCode(\"fr\");\nawait user?.sendEmailVerification();\n```\n\n----------------------------------------\n\nTITLE: Add Firebase core plugin\nDESCRIPTION: This command adds the `firebase_core` plugin to your Flutter project. This plugin is essential for initializing Firebase in your Flutter app.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub add firebase_core\n```\n\n----------------------------------------\n\nTITLE: Catch Errors Outside Flutter\nDESCRIPTION: This code snippet demonstrates how to catch errors that occur outside of the Flutter context by installing an error listener on the current `Isolate`.  It uses `Isolate.current.addErrorListener` to listen for errors and records them using `FirebaseCrashlytics.instance.recordError`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nIsolate.current.addErrorListener(RawReceivePort((pair) async {\n  final List<dynamic> errorAndStacktrace = pair;\n  await FirebaseCrashlytics.instance.recordError(\n    errorAndStacktrace.first,\n    errorAndStacktrace.last,\n    fatal: true,\n  );\n}).sendPort);\n```\n\n----------------------------------------\n\nTITLE: Report Caught Exceptions with Information\nDESCRIPTION: This snippet demonstrates how to log further information about non-fatal exceptions using the `information` property of the `recordError` method in Firebase Crashlytics.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseCrashlytics.instance.recordError(\n  error,\n  stackTrace,\n  reason: 'a non-fatal error',\n  information: ['further diagnostic information about the error', 'version 2.0'],\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Access Token - Dart\nDESCRIPTION: This code snippet demonstrates how to retrieve the access token associated with an OAuth provider after signing in with Firebase Authentication in Flutter. The `accessToken` is retrieved from the `UserCredential` object.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal appleProvider = AppleAuthProvider();\n\nfinal user = await FirebaseAuth.instance.signInWithProvider(appleProvider);\nfinal accessToken = user.credential?.accessToken;\n\n// You can send requests with the `accessToken`\n```\n\n----------------------------------------\n\nTITLE: List All Files in Cloud Storage - Dart\nDESCRIPTION: This snippet demonstrates how to list all files and prefixes under a given directory in Cloud Storage using `listAll()`. It fetches all results and stores them in memory, making it suitable for small directories. The code iterates through the prefixes and items in the list result.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/list-files.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nfinal storageRef = FirebaseStorage.instance.ref().child(\"files/uid\");\nfinal listResult = await storageRef.listAll();\nfor (var prefix in listResult.prefixes) {\n  // The prefixes under storageRef.\n  // You can call listAll() recursively on them.\n}\nfor (var item in listResult.items) {\n  // The items under storageRef.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Foreground Messages - Dart\nDESCRIPTION: This code snippet shows how to listen to the `onMessage` stream to handle FCM messages when the application is in the foreground. It prints the message data and notification content (if available) to the console. This allows developers to access the Flutter application's state and context directly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseMessaging.onMessage.listen((RemoteMessage message) {\n  print('Got a message whilst in the foreground!');\n  print('Message data: ${message.data}');\n\n  if (message.notification != null) {\n    print('Message also contained a notification: ${message.notification}');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Object After Sign-In - Dart\nDESCRIPTION: This snippet shows how to access the `User` object after a successful sign-in. The `UserCredential` object returned by the authentication methods has a `user` property containing the current user.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nfinal userCredential =\n    await FirebaseAuth.instance.signInWithCredential(credential);\n  final user = userCredential.user;\n  print(user?.uid);\n```\n\n----------------------------------------\n\nTITLE: Listen for FCM Token Refresh - Dart\nDESCRIPTION: This Dart code snippet shows how to listen for FCM token refresh events.  The `onTokenRefresh` stream emits a new token whenever it's updated.  This is useful for sending the updated token to your application server.  The callback is fired at app startup and whenever a new token is generated.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseMessaging.instance.onTokenRefresh\n    .listen((fcmToken) {\n      // TODO: If necessary send token to application server.\n\n      // Note: This callback is fired at each app startup and whenever a new\n      // token is generated.\n    })\n    .onError((err) {\n      // Error getting token.\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Storage SDK\nDESCRIPTION: This command adds the Firebase Storage SDK to your Flutter project. It uses the `flutter pub add` command, which is part of the Flutter package manager, to install the `firebase_storage` plugin. After running this command, you'll need to rebuild your Flutter application for the changes to take effect.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add firebase_storage\n```\n\n----------------------------------------\n\nTITLE: Sorting Data by Child Value in Flutter\nDESCRIPTION: This snippet demonstrates how to sort data by the value of a specified child key using `orderByChild()`.  It defines a query that sorts posts by their star count. Requires the `firebase_database` and `firebase_auth` packages.  The result can then be used with a child listener to synchronize the client with the sorted data.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal myUserId = FirebaseAuth.instance.currentUser?.uid;\nfinal topUserPostsRef = FirebaseDatabase.instance\n    .ref(\"user-posts/$myUserId\")\n    .orderByChild(\"starCount\");\n```\n\n----------------------------------------\n\nTITLE: Confirming Sign In on Web\nDESCRIPTION: This snippet shows how to confirm the sign-in on the web platform after the user has received the SMS code. It uses the `confirm` method on the `ConfirmationResult` object to complete the sign-in process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nUserCredential userCredential = await confirmationResult.confirm('123456');\n```\n\n----------------------------------------\n\nTITLE: Detecting Connection State\nDESCRIPTION: Detects the connection state of the Firebase Realtime Database client. The `/.info/connected` location is monitored for changes, and a boolean value indicates whether the client is online or offline.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal connectedRef = FirebaseDatabase.instance.ref(\".info/connected\");\nconnectedRef.onValue.listen((event) {\n  final connected = event.snapshot.value as bool? ?? false;\n  if (connected) {\n    debugPrint(\"Connected.\");\n  } else {\n    debugPrint(\"Not connected.\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-Factor Sign-In Example - Dart\nDESCRIPTION: This comprehensive example combines the steps of signing in with email and password, handling the `FirebaseAuthMultiFactorException`, and verifying the phone number to complete the multi-factor authentication process. It assumes the existence of `emailController`, `passwordController`, `setState`, `error`, `getSmsCodeFromUser`, and `PhoneMultiFactorGenerator` and utilizes `FirebaseAuth.instance` for phone verification.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  await _auth.signInWithEmailAndPassword(\n    email: emailController.text,\n    password: passwordController.text,\n  );\n} on FirebaseAuthMultiFactorException catch (e) {\n  setState(() {\n    error = '${e.message}';\n  });\n  final firstHint = e.resolver.hints.first;\n  if (firstHint is! PhoneMultiFactorInfo) {\n    return;\n  }\n  await FirebaseAuth.instance.verifyPhoneNumber(\n    multiFactorSession: e.resolver.session,\n    multiFactorInfo: firstHint,\n    verificationCompleted: (_) {},\n    verificationFailed: (_) {},\n    codeSent: (String verificationId, int? resendToken) async {\n      // See `firebase_auth` example app for a method of retrieving user's sms code: \n      // https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/lib/auth.dart#L591\n      final smsCode = await getSmsCodeFromUser(context);\n\n      if (smsCode != null) {\n        // Create a PhoneAuthCredential with the code\n        final credential = PhoneAuthProvider.credential(\n          verificationId: verificationId,\n          smsCode: smsCode,\n        );\n\n        try {\n          await e.resolver.resolveSignIn(\n            PhoneMultiFactorGenerator.getAssertion(\n              credential,\n            ),\n          );\n        } on FirebaseAuthException catch (e) {\n          print(e.message);\n        }\n      }\n    },\n    codeAutoRetrievalTimeout: (_) {},\n  );\n} catch (e) {\n  ...\n} \n```\n\n----------------------------------------\n\nTITLE: Handle asynchronous errors using Crashlytics in Flutter\nDESCRIPTION: This code snippet extends the previous example to also catch asynchronous errors that aren't handled by the Flutter framework. It uses `PlatformDispatcher.instance.onError` to catch these errors and reports them to Crashlytics as fatal errors. Requires Firebase and Crashlytics initialization.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_get-started.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n    WidgetsFlutterBinding.ensureInitialized();\n    await Firebase.initializeApp();\n    FlutterError.onError = (errorDetails) {\n      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\n    };\n    // Pass all uncaught asynchronous errors that aren't handled by the Flutter framework to Crashlytics\n    PlatformDispatcher.instance.onError = (error, stack) {\n      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n      return true;\n    };\n    runApp(MyApp());\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Long Dynamic Link - Flutter\nDESCRIPTION: This snippet demonstrates how to create a long Dynamic Link using the Firebase Dynamic Links SDK in Flutter. It initializes a `DynamicLinkParameters` object with the link, URI prefix, and Android/iOS parameters, then uses `FirebaseDynamicLinks.instance.buildLink()` to generate the long Dynamic Link. The resulting `dynamicLink` variable contains the complete long Dynamic Link URL.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/create.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal dynamicLinkParams = DynamicLinkParameters(\n  link: Uri.parse(\"https://www.example.com/\"),\n  uriPrefix: \"https://example.page.link\",\n  androidParameters: const AndroidParameters(packageName: \"com.example.app.android\"),\n  iosParameters: const IOSParameters(bundleId: \"com.example.app.ios\"),\n);\nfinal dynamicLink =\n    await FirebaseDynamicLinks.instance.buildLink(dynamicLinkParams);\n```\n\n----------------------------------------\n\nTITLE: Initializing App Check with Debug Provider (Apple)\nDESCRIPTION: This code snippet demonstrates how to initialize Firebase App Check with the debug provider for Apple platforms in a Flutter application. It imports the necessary Firebase libraries, initializes Firebase, and activates App Check with `AppleProvider.debug`. The `firebase_core` and `firebase_app_check` plugins are required.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/debug-provider.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:firebase_core/firebase_core.dart';\n\n// Import the firebase_app_check plugin\nimport 'package:firebase_app_check/firebase_app_check.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  await FirebaseAppCheck.instance.activate(\n    // Set appleProvider to `AppleProvider.debug`\n    appleProvider: AppleProvider.debug,\n  );\n  runApp(App());\n}\n```\n\n----------------------------------------\n\nTITLE: Get FCM Token with VAPID Key - Dart\nDESCRIPTION: This Dart code snippet retrieves the FCM token, specifically for web platforms.  It requires a VAPID (Voluntary Application Server Identification) key for authorizing send requests to supported web push services. Replace the example VAPID key with your actual VAPID public key.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal fcmToken = await FirebaseMessaging.instance.getToken(vapidKey: \"BKagOny0KF_2pCJQ3m....moL0ewzQ8rZu\");\n```\n\n----------------------------------------\n\nTITLE: Link Anonymous Account to a Permanent Account - Dart\nDESCRIPTION: This code demonstrates how to link an anonymous Firebase account to a permanent account using the `linkWithCredential()` method in Flutter. It handles potential `FirebaseAuthException` errors such as `provider-already-linked`, `invalid-credential`, and `credential-already-in-use`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/anonymous-auth.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  final userCredential = await FirebaseAuth.instance.currentUser\n      ?.linkWithCredential(credential);\n} on FirebaseAuthException catch (e) {\n  switch (e.code) {\n    case \"provider-already-linked\":\n      print(\"The provider has already been linked to the user.\");\n      break;\n    case \"invalid-credential\":\n      print(\"The provider's credential is not valid.\");\n      break;\n    case \"credential-already-in-use\":\n      print(\"The account corresponding to the credential already exists, \"\n          \"or is already linked to a Firebase User.\");\n      break;\n    // See the API reference for the full list of error codes.\n    default:\n      print(\"Unknown error.\");\n  }\n  \n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter for Dynamic Links in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add an intent filter to your AndroidManifest.xml file to catch deep links from your domain. This is essential for your app to receive Dynamic Link data after installation or updates from the Play Store when the user taps the 'Continue' button. Replace 'example.com' with your actual domain.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/receive.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\"/>\n    <category android:name=\"android.intent.category.DEFAULT\"/>\n    <category android:name=\"android.intent.category.BROWSABLE\"/>\n    <data\n        android:host=\"example.com\"\n        android:scheme=\"https\"/>\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistence\nDESCRIPTION: Enables disk persistence for the Firebase Realtime Database client. This allows the app to maintain state while offline, even after restarts. It uses the `setPersistenceEnabled` method.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseDatabase.instance.setPersistenceEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Get Credential Object for Authentication Provider - Dart\nDESCRIPTION: This code shows how to obtain a `Credential` object from various authentication providers such as Google and Email/Password for linking accounts in Firebase Authentication. Replace `idToken`, `emailAddress`, and `password` with the actual values obtained from the respective sign-in flows.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/anonymous-auth.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Google Sign-in\nfinal credential = GoogleAuthProvider.credential(idToken: idToken);\n\n// Email and password sign-in\nfinal credential =\n    EmailAuthProvider.credential(email: emailAddress, password: password);\n\n// Etc.\n```\n\n----------------------------------------\n\nTITLE: Re-authenticating with Email Link - Dart\nDESCRIPTION: This code snippet demonstrates how to re-authenticate an email link user before running a sensitive operation using reauthenticateWithCredential().\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/email-link-auth.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authCredential = EmailAuthProvider\n    .credentialWithLink(email: emailAuth, emailLink: emailLink.toString());\ntry {\n    await FirebaseAuth.instance.currentUser\n        ?.reauthenticateWithCredential(authCredential);\n} catch (error) {\n    print(\"Error reauthenticating credential.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Default Database Instance - Dart\nDESCRIPTION: This code snippet initializes the default Firebase Realtime Database instance. It creates a `FirebaseDatabase` object that can be used to read and write data to your Firebase project's default database.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/start.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseDatabase database = FirebaseDatabase.instance;\n```\n\n----------------------------------------\n\nTITLE: Getting File Metadata from Cloud Storage in Flutter\nDESCRIPTION: This code snippet demonstrates how to retrieve file metadata from a Cloud Storage reference in a Flutter application. It creates a reference to a file and then uses the `getMetadata()` method to retrieve the metadata properties. The retrieved metadata contains information such as name, size, and contentType.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/file-metadata.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create reference to the file whose metadata we want to retrieve\nfinal forestRef = storageRef.child(\"images/forest.jpg\");\n\n// Get metadata properties\nfinal metadata = await forestRef.getMetadata();\n\n// Metadata now contains the metadata for 'images/forest.jpg'\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Storage in Dart\nDESCRIPTION: This line imports the Firebase Storage library into your Dart code. By importing this library, you gain access to the classes and functions needed to interact with Cloud Storage from your Flutter application, such as uploading, downloading, and managing files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/start.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_storage/firebase_storage.dart';\n```\n\n----------------------------------------\n\nTITLE: Getting a Non-Default Storage Bucket\nDESCRIPTION: This snippet shows how to create a `FirebaseStorage` instance that references a specific Cloud Storage bucket, other than the default one.  The `instanceFor` method takes a `bucket` parameter, which specifies the Google Cloud Storage (GCS) URI of the desired bucket. This allows you to work with multiple buckets within a single app.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/start.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Get a non-default Storage bucket\nfinal storage = FirebaseStorage.instanceFor(bucket: \"gs://my-custom-bucket\");\n```\n\n----------------------------------------\n\nTITLE: Get Remote Config Instance & Set Config Settings - Dart\nDESCRIPTION: This snippet obtains a singleton instance of FirebaseRemoteConfig and sets configuration settings for fetch timeout and minimum fetch interval. These settings control how often the app fetches updated configurations from the Firebase backend.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/remote-config/_get-started.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nfinal remoteConfig = FirebaseRemoteConfig.instance;\nawait remoteConfig.setConfigSettings(RemoteConfigSettings(\n    fetchTimeout: const Duration(minutes: 1),\n    minimumFetchInterval: const Duration(hours: 1),\n));\n```\n\n----------------------------------------\n\nTITLE: Re-enable FCM Auto-Initialization - Dart\nDESCRIPTION: This Dart code snippet demonstrates how to re-enable Firebase Cloud Messaging (FCM) auto-initialization at runtime for a specific app instance. The `setAutoInitEnabled(true)` method allows the library to automatically generate a token and upload configuration data to Firebase.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseMessaging.instance.setAutoInitEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Android FCM Payload JSON\nDESCRIPTION: This JSON code defines the structure of an FCM payload for Android. It utilizes `title_loc_key` and `body_loc_key` to specify the localized title and body of the notification, referencing the strings defined in the `strings.xml` files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"android\": {\n     \"notification\": {\n       \"title_loc_key\": \"notification_title\",\n       \"body_loc_key\": \"notification_message\"\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Dynamic Link - Flutter\nDESCRIPTION: This snippet illustrates how to create a short Dynamic Link using the Firebase Dynamic Links SDK in Flutter.  Similar to the long link, it initializes a `DynamicLinkParameters` object. Instead of `buildLink()`, it utilizes `FirebaseDynamicLinks.instance.buildShortLink()` to generate the short Dynamic Link. This operation involves a network call. The resulting `dynamicLink` variable holds the short Dynamic Link URL.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/create.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal dynamicLinkParams = DynamicLinkParameters(\n  link: Uri.parse(\"https://www.example.com/\"),\n  uriPrefix: \"https://example.page.link\",\n  androidParameters: const AndroidParameters(packageName: \"com.example.app.android\"),\n  iosParameters: const IOSParameters(bundleId: \"com.example.app.ios\"),\n);\nfinal dynamicLink =\n    await FirebaseDynamicLinks.instance.buildShortLink(dynamicLinkParams);\n```\n\n----------------------------------------\n\nTITLE: Handling FirebaseAuthMultiFactorException - Dart\nDESCRIPTION: This code snippet demonstrates how to handle the `FirebaseAuthMultiFactorException` when a user is enrolled in multi-factor authentication. It catches the exception, extracts the resolver, and prepares for the second factor challenge. The `_auth` variable is assumed to be an instance of `FirebaseAuth`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  await _auth.signInWithEmailAndPassword(\n      email: emailController.text,\n      password: passwordController.text,\n  );\n  // User is not enrolled with a second factor and is successfully\n  // signed in.\n  // ...\n} on FirebaseAuthMultiFactorException catch (e) {\n  // The user is a multi-factor user. Second factor challenge is required\n  final resolver = e.resolver\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Firebase Analytics Instance - Dart\nDESCRIPTION: This code creates a new Firebase Analytics instance. The `FirebaseAnalytics.instance` property provides a singleton instance of the Firebase Analytics class.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_get-started.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAnalytics analytics = FirebaseAnalytics.instance;\n```\n\n----------------------------------------\n\nTITLE: Install Firebase Database Plugin - Flutter\nDESCRIPTION: This command adds the firebase_database plugin to your Flutter project. This plugin allows your Flutter application to interact with the Firebase Realtime Database.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add firebase_database\n```\n\n----------------------------------------\n\nTITLE: Downloading a TensorFlow Lite Model - Dart\nDESCRIPTION: This Dart code snippet demonstrates how to download a TensorFlow Lite model from Firebase ML to a Flutter app using the Firebase ML Model Downloader plugin. It retrieves the model based on the provided name and download type, specifying download conditions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/ml/use-custom-models.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseModelDownloader.instance\n    .getModel(\n        \"yourModelName\",\n        FirebaseModelDownloadType.localModel,\n        FirebaseModelDownloadConditions(\n          iosAllowsCellularAccess: true,\n          iosAllowsBackgroundDownloading: false,\n          androidChargingRequired: false,\n          androidWifiRequired: false,\n          androidDeviceIdleRequired: false,\n        )\n    )\n    .then((customModel) {\n      // Download complete. Depending on your app, you could enable the ML\n      // feature, or switch from the local model to the remote model, etc.\n\n      // The CustomModel object contains the local path of the model file,\n      // which you can use to instantiate a TensorFlow Lite interpreter.\n      final localModelPath = customModel.file;\n\n      // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Suppressing In-App Message Displays (Dart)\nDESCRIPTION: This snippet demonstrates how to temporarily disable Firebase In-App Messaging from displaying messages using the setMessagesSuppressed() method. This can be useful to avoid interrupting critical user flows, such as payment processing. Passing true suppresses messages, while false reenables them.  This setting is reset on app restart.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_modify-message-behavior.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseInAppMessaging.instance.setMessagesSuppressed(true);\n```\n\n----------------------------------------\n\nTITLE: Signing in with GitHub - Dart\nDESCRIPTION: This code snippet demonstrates how to sign in with GitHub using Firebase Authentication in Flutter. It uses the `GithubAuthProvider` to create a provider and signs in with that provider.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserCredential> signInWithGitHub() async {\n    // Create a new provider\n    GithubAuthProvider githubProvider = GithubAuthProvider();\n\n    return await FirebaseAuth.instance.signInWithProvider(githubProvider);\n  }\n```\n\n----------------------------------------\n\nTITLE: Add Custom Log Messages\nDESCRIPTION: This snippet shows how to add custom log messages to crash reports using `FirebaseCrashlytics.instance.log`. These logs provide context for events leading up to a crash.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseCrashlytics.instance.log(\"Higgs-Boson detected! Bailing out\");\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials for Auth Providers in Dart\nDESCRIPTION: This code snippet demonstrates how to get `Credential` objects for different authentication providers, such as Google and email/password, using Firebase Authentication in Dart.  It requires having obtained the necessary tokens or information (e.g., idToken, email, password) from the respective provider's sign-in flow. The resulting `credential` object is then used to link the provider to the current user.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/account-linking.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Google Sign-in\nfinal credential = GoogleAuthProvider.credential(idToken: idToken);\n\n// Email and password sign-in\nfinal credential =\n    EmailAuthProvider.credential(email: emailAddress, password: password);\n\n// Etc.\n```\n\n----------------------------------------\n\nTITLE: Handling Verification Failure\nDESCRIPTION: This snippet demonstrates how to handle the `verificationFailed` callback. A `FirebaseAuthException` is sent to this handler if Firebase returns an error, such as an incorrect phone number or if the SMS quota is exceeded. The code provides an example of handling the 'invalid-phone-number' error code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  verificationFailed: (FirebaseAuthException e) {\n    if (e.code == 'invalid-phone-number') {\n      print('The provided phone number is not valid.');\n    }\n\n    // Handle other errors\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Links in Terminated State - Flutter (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to handle Firebase Dynamic Links when the app is in a terminated state. It initializes Firebase, retrieves the initial link using `FirebaseDynamicLinks.instance.getInitialLink()`, and navigates to the specified deep link if one exists. It also sets up an event listener `FirebaseDynamicLinks.instance.onLink` to handle subsequent links received while the app is running.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/receive.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp(options: DefaultFirebaseConfig.platformOptions);\n\n  // Check if you received the link via `getInitialLink` first\n  final PendingDynamicLinkData? initialLink = await FirebaseDynamicLinks.instance.getInitialLink();\n\n  if (initialLink != null) {\n    final Uri deepLink = initialLink.link;\n    // Example of using the dynamic link to push the user to a different screen\n    Navigator.pushNamed(context, deepLink.path);\n  }\n\n  FirebaseDynamicLinks.instance.onLink.listen(\n        (pendingDynamicLinkData) {\n          // Set up the `onLink` event listener next as it may be received here\n          if (pendingDynamicLinkData != null) {\n            final Uri deepLink = pendingDynamicLinkData.link;\n            // Example of using the dynamic link to push the user to a different screen\n            Navigator.pushNamed(context, deepLink.path);\n          }\n        },\n      );\n\n  runApp(MyApp(initialLink));\n}\n```\n\n----------------------------------------\n\nTITLE: Install Firebase App Check Flutter plugin\nDESCRIPTION: This command adds the firebase_app_check plugin to your Flutter project. It is a necessary dependency for using App Check in Flutter.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/default-providers.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add firebase_app_check\n```\n\n----------------------------------------\n\nTITLE: Handle Firebase Storage Exception - Dart\nDESCRIPTION: This code snippet demonstrates how to catch a `FirebaseException` when listing files in a Cloud Storage bucket using the Firebase Storage SDK for Flutter. The `try-catch` block is used to handle potential errors during the listing operation. Inside the `catch` block, the error code and message are printed to the console for debugging purposes.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/handle-errors.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nfinal storageRef = FirebaseStorage.instance.ref().child(\"files/uid\");\ntry {\n  final listResult = await storageRef.listAll();\n} on FirebaseException catch (e) {\n  // Caught an exception from Firebase.\n  print(\"Failed with error '${e.code}': ${e.message}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Report Fatal Flutter Errors\nDESCRIPTION: This code snippet demonstrates how to override `FlutterError.onError` to catch and report fatal and non-fatal errors within the Flutter framework to Firebase Crashlytics. It initializes Firebase and then assigns a function to `FlutterError.onError` that records the error using `FirebaseCrashlytics.instance.recordFlutterFatalError` or `FirebaseCrashlytics.instance.recordFlutterError` depending on a flag.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Firebase.initializeApp();\n  bool weWantFatalErrorRecording = true;\n  FlutterError.onError = (errorDetails) {\n    if(weWantFatalErrorRecording){\n      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\n    } else {\n      FirebaseCrashlytics.instance.recordFlutterError(errorDetails);\n    }\n  };\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Install Firebase Messaging Plugin - Flutter\nDESCRIPTION: This command installs the firebase_messaging plugin to your Flutter project. It is essential for enabling Firebase Cloud Messaging functionality in your Flutter app. Execute this command from the root directory of your Flutter project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add firebase_messaging\n```\n\n----------------------------------------\n\nTITLE: Querying Data Offline\nDESCRIPTION: Demonstrates querying data from the Firebase Realtime Database. The data returned from the query is stored for offline use. When offline, the database loads data from the local cache if available.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal scoresRef = FirebaseDatabase.instance.ref(\"scores\");\nscoresRef.orderByValue().limitToLast(4).onChildAdded.listen((event) {\n  debugPrint(\"The ${event.snapshot.key} dinosaur's score is ${event.snapshot.value}.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Rebuild Flutter Application\nDESCRIPTION: This command rebuilds the Flutter application.  It's necessary to run after installing the firebase_messaging plugin to ensure that the plugin is correctly integrated into the app.  The command compiles the Dart code and links the native dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/first-message.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Initializing DatabaseReference in Flutter\nDESCRIPTION: This snippet initializes a `DatabaseReference` which allows you to interact with the Firebase Realtime Database. It's the starting point for reading and writing data. It requires the `firebase_database` package to be imported.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference ref = FirebaseDatabase.instance.ref();\n```\n\n----------------------------------------\n\nTITLE: Google Play Games Sign-In for Android in Dart\nDESCRIPTION: This code demonstrates how to authenticate a user with Google Play Games on Android. It uses the `PlayGamesAuthProvider` to create a credential with a server auth code obtained from the Play Games Services.  It then signs the user in using Firebase Authentication. Requires configuring Play Games Services and enabling the Play Games sign-in provider in the Firebase console.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _signInWithPlayGames() async {\n  // Get server auth code from 3rd party provider\n  // See PR description for details on how you might get the server auth code:\n  // https://github.com/firebase/flutterfire/pull/12201#issue-2100392487\n  final serverAuthCode = '...';\n  final playGamesCredential = PlayGamesAuthProvider.credential(\n                                          serverAuthCode: serverAuthCode);\n\n  await FirebaseAuth.instance\n    .signInWithCredential(playGamesCredential);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The BoM ensures compatibility across all FlutterFire plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.3.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Reference Properties in Dart\nDESCRIPTION: This code snippet demonstrates how to access the properties of a Firebase Storage reference, such as `fullPath`, `name`, and `bucket`. These properties provide information about the location and name of the file that the reference points to. `fullPath` returns the complete path of the file, `name` returns the file name, and `bucket` returns the name of the storage bucket.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/create-reference.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Reference's path is: \"images/space.jpg\"\n// This is analogous to a file path on disk\nspaceRef.fullPath;\n\n// Reference's name is the last segment of the full path: \"space.jpg\"\n// This is analogous to the file name\nspaceRef.name;\n\n// Reference's bucket is the name of the storage bucket that the files are stored in\nspaceRef.bucket;\n```\n\n----------------------------------------\n\nTITLE: Get Multi-Factor Session - Dart\nDESCRIPTION: This snippet retrieves a multi-factor session for the current user. The multi-factor session is required for subsequent multi-factor authentication operations.  It depends on the Firebase Authentication instance (`FirebaseAuth`).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal multiFactorSession = await user.multiFactor.getSession();\n```\n\n----------------------------------------\n\nTITLE: Activate FlutterFire CLI\nDESCRIPTION: This command installs the FlutterFire CLI globally, making it accessible from any directory. It requires Dart and Flutter to be installed and configured.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart pub global activate flutterfire_cli\n```\n\n----------------------------------------\n\nTITLE: Disable FCM and Analytics Auto-Initialization - Android\nDESCRIPTION: This XML snippet disables both Firebase Cloud Messaging (FCM) and Analytics auto-initialization on Android.  You must disable both by adding these metadata values to your `AndroidManifest.xml` file.  This is useful for controlling when the library generates a token and uploads data to Firebase.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"firebase_messaging_auto_init_enabled\"\n    android:value=\"false\" />\n<meta-data\n    android:name=\"firebase_analytics_collection_enabled\"\n    android:value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Configure Flutter app for Firebase\nDESCRIPTION: This command initiates the FlutterFire configuration workflow, prompting the user to select platforms and Firebase project. It generates a `firebase_options.dart` file with Firebase configuration details.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Enroll Multi-Factor Authentication - Dart\nDESCRIPTION: This snippet completes the multi-factor authentication enrollment process for the user. It takes the PhoneAuthCredential to get an assertion, and enrolls using that. It depends on the `PhoneMultiFactorGenerator` and the `user` object from Firebase Authentication. The result of this operation is adding another authentication factor for the user.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait user.multiFactor.enroll(\n    PhoneMultiFactorGenerator.getAssertion(\n      credential,\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Unlinking Auth Providers from a User Account in Dart\nDESCRIPTION: This code snippet demonstrates how to unlink an authentication provider from a user's account using the `unlink()` method in Dart with Firebase Authentication. It catches `FirebaseAuthException` errors, specifically the `no-such-provider` error, which indicates that the user is not linked to the specified provider or the provider does not exist. The `providerId` is required to specify which provider to unlink.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/account-linking.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  await FirebaseAuth.instance.currentUser?.unlink(providerId);\n} on FirebaseAuthException catch (e) {\n  switch (e.code) {\n    case \"no-such-provider\":\n      print(\"The user isn't linked to the provider or the provider \"\n          \"doesn't exist.\");\n      break;\n    default:\n      print(\"Unknown error.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Flutter error handling to use Crashlytics\nDESCRIPTION: This code snippet configures the Flutter error handling to send uncaught fatal errors to Firebase Crashlytics. It overrides `FlutterError.onError` to record fatal errors using `FirebaseCrashlytics.instance.recordFlutterFatalError`. It requires the Firebase and Crashlytics packages to be initialized.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_get-started.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Firebase.initializeApp();\n\n  // Pass all uncaught \"fatal\" errors from the framework to Crashlytics\n  FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterFatalError;\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Storage Instance\nDESCRIPTION: This snippet demonstrates how to create an instance of `FirebaseStorage`, which serves as the entry point for interacting with your Cloud Storage bucket. The `FirebaseStorage.instance` property provides access to the default Cloud Storage bucket associated with your Firebase project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/start.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal storage = FirebaseStorage.instance;\n```\n\n----------------------------------------\n\nTITLE: Initializing DatabaseReference in Flutter\nDESCRIPTION: This snippet initializes a `DatabaseReference` to interact with the Firebase Realtime Database.  It creates an instance of `FirebaseDatabase` and retrieves a reference to the root of the database. No dependencies beyond the `firebase_database` package are required.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference ref = FirebaseDatabase.instance.ref();\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Remote Config & Analytics - Flutter\nDESCRIPTION: These commands use the Flutter package manager to add the Firebase Remote Config and Firebase Analytics packages to your Flutter project. Firebase Analytics is a required dependency for conditional targeting within Remote Config.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/remote-config/_get-started.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nflutter pub add firebase_remote_config\n```\n\nLANGUAGE: Bash\nCODE:\n```\nflutter pub add firebase_analytics\n```\n\n----------------------------------------\n\nTITLE: Upload Task with Snapshot Listener Example - Dart\nDESCRIPTION: This Dart code demonstrates how to upload data to Firebase Storage and listen for snapshot events to track the upload progress and handle potential errors. It showcases the new Tasks API, mirroring the Web SDK API, by subscribing to stream updates and delegating future tasks for managing uploads. The example includes error handling with FirebaseException.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/CHANGELOG.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUploadTask task = FirebaseStorage.instance.ref('/notes.text').putString('My notes!');\n\n// Optional\ntask.snapshotEvents.listen((TaskSnapshot snapshot) {\n  print('Snapshot state: ${snapshot.state}'); // paused, running, complete\n  print('Progress: ${snapshot.totalBytes / snapshot.bytesTransferred}');\n}, onError: (Object e) {\n  print(e); // FirebaseException\n});\n\n// Optional\ntask\n  .then((TaskSnapshot snapshot) {\n    print('Upload complete!');\n  })\n  .catchError((Object e) {\n    print(e); // FirebaseException\n  });\n```\n\n----------------------------------------\n\nTITLE: Monitoring Connection State and Updating Presence in Firebase - Dart\nDESCRIPTION: This Dart code snippet demonstrates how to monitor the connection state to Firebase Realtime Database and update a user's presence information. It establishes references to the user's connections, last online time, and the Firebase connection status. Upon connection, it pushes a new connection entry, sets up disconnect operations to remove the connection entry and update the last online timestamp, and then sets the connection entry to true. It requires the firebase_database package and assumes a predefined user path.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\n// Since I can connect from multiple devices, we store each connection\n// instance separately any time that connectionsRef's value is null (i.e.\n// has no children) I am offline.\nfinal myConnectionsRef =\n    FirebaseDatabase.instance.ref(\"users/joe/connections\");\n\n// Stores the timestamp of my last disconnect (the last time I was seen online)\nfinal lastOnlineRef =\n    FirebaseDatabase.instance.ref(\"/users/joe/lastOnline\");\n\nfinal connectedRef = FirebaseDatabase.instance.ref(\".info/connected\");\nconnectedRef.onValue.listen((event) {\n  final connected = event.snapshot.value as bool? ?? false;\n  if (connected) {\n    final con = myConnectionsRef.push();\n\n    // When this device disconnects, remove it.\n    con.onDisconnect().remove();\n\n    // When I disconnect, update the last time I was seen online.\n    lastOnlineRef.onDisconnect().set(ServerValue.timestamp);\n\n    // Add this device to my connections list.\n    // This value could contain info about the device or a timestamp too.\n    con.set(true);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Multi-Factor Sign-In - Dart\nDESCRIPTION: This snippet demonstrates how to resolve the multi-factor sign-in after the user has entered the SMS code. It creates a `PhoneAuthCredential` from the code and verification ID and then calls `resolver.resolveSignIn` to complete the authentication. It requires the `getSmsCodeFromUser` function to obtain the SMS code from the user.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal smsCode = await getSmsCodeFromUser(context);\nif (smsCode != null) {\n  // Create a PhoneAuthCredential with the code\n  final credential = PhoneAuthProvider.credential(\n    verificationId: verificationId,\n    smsCode: smsCode,\n  );\n\n  try {\n    await e.resolver.resolveSignIn(\n      PhoneMultiFactorGenerator.getAssertion(\n        credential\n      ),\n    );\n  } on FirebaseAuthException catch (e) {\n    print(e.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version via CLI\nDESCRIPTION: This code snippet shows how to install a specific version of FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The `flutterfire install` command is used, followed by the desired version number. This allows developers to pin their project to a known-good set of FlutterFire plugin versions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch\nDESCRIPTION: This snippet creates a new branch locally with a specified naming convention for releases.  It then pushes the new branch to the origin repository.  `[RELEASE BRANCH NAME]` needs to be replaced with the actual branch name following the specified naming convention.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin [RELEASE BRANCH NAME]\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Authentication Plugin - Dart\nDESCRIPTION: This line imports the firebase_auth plugin into your Dart code, making the Firebase Authentication classes and functions available.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:firebase_auth/firebase_auth.dart';\n```\n\n----------------------------------------\n\nTITLE: Signing in with GitHub (Popup) - Dart\nDESCRIPTION: This code snippet demonstrates signing in with GitHub using a popup window for web in Flutter, using Firebase Authentication.  It uses `GithubAuthProvider` and `signInWithPopup`\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserCredential> signInWithGitHub() async {\n    // Create a new provider\n    GithubAuthProvider githubProvider = GithubAuthProvider();\n\n    // Once signed in, return the UserCredential\n    return await FirebaseAuth.instance.signInWithPopup(githubProvider);\n\n    // Or use signInWithRedirect\n    // return await FirebaseAuth.instance.signInWithRedirect(githubProvider);\n  }\n```\n\n----------------------------------------\n\nTITLE: Signing in with Apple Game Center - Dart\nDESCRIPTION: This code snippet demonstrates how to sign in with Apple Game Center using Firebase Authentication in Flutter.  It uses the `GameCenterAuthProvider` to create a credential and then signs in with that credential.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _signInWithGameCenter() async {\n  final credential = GameCenterAuthProvider.credential();\n  await FirebaseAuth.instance\n      .signInWithCredential(credential);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metrics to a Trace - Dart\nDESCRIPTION: This snippet illustrates how to add a custom metric to a custom code trace in Flutter. It initializes a trace, starts it, increments a metric within the traced code, and then stops the trace. This allows tracking of performance-related events like cache hits or retries.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/_custom-code-traces.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTrace customTrace = FirebasePerformance.instance.newTrace(\"custom-trace\");\nawait customTrace.start();\n\n// Code you want to trace\n\ncustomTrace.incrementMetric(\"metric-name\", 1);\n\n// More code\n\nawait customTrace.stop();\n```\n\n----------------------------------------\n\nTITLE: Updating File Metadata in Cloud Storage in Flutter\nDESCRIPTION: This code snippet shows how to update file metadata in Cloud Storage using Flutter. It creates a reference to the file to be updated and a `SettableMetadata` object with the new metadata values. The `updateMetadata()` method is then used to update the file's metadata with the specified values.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/file-metadata.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Create reference to the file whose metadata we want to change\nfinal forestRef = storageRef.child(\"images/forest.jpg\");\n\n// Create file metadata to update\nfinal newMetadata = SettableMetadata(\n  cacheControl: \"public,max-age=300\",\n  contentType: \"image/jpeg\",\n);\n\n// Update metadata properties\nfinal metadata = await forestRef.updateMetadata(newMetadata);\n\n// Updated metadata for 'images/forest.jpg' is returned\n```\n\n----------------------------------------\n\nTITLE: Android Localized Strings XML\nDESCRIPTION: This XML code defines localized strings for Android notifications in the `strings.xml` file. The default language strings are defined in `resources/values/strings.xml`, and translations are placed in `resources/values-<language>/strings.xml` (e.g., `resources/values-fr/strings.xml` for French). The `name` attribute of each string is used as the `title_loc_key` and `body_loc_key` in the FCM payload.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<string name=\"notification_title\">Hello world</string>\n<string name=\"notification_message\">This is a message</string>\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase In-App Messaging dependency - Bash\nDESCRIPTION: This command adds the firebase_in_app_messaging package as a dependency to your Flutter project. This package provides the necessary classes and methods to interact with Firebase In-App Messaging.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add firebase_in_app_messaging\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BOM using CLI\nDESCRIPTION: This command installs the FlutterFire Bill of Materials (BoM) version 1.0.0 using the FlutterFire CLI. The FlutterFire CLI must be installed and configured beforehand. This command ensures that compatible versions of FlutterFire plugins are used in the project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Transaction Result - Firebase Realtime Database (Dart)\nDESCRIPTION: This snippet shows how to access the result of a Firebase Realtime Database transaction. The `TransactionResult` object contains information about whether the transaction was committed and the new snapshot of the data.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseReference ref = FirebaseDatabase.instance.ref(\"posts/123\");\n\nTransactionResult result = await ref.runTransaction((Object? post) {\n  // ...\n});\n\nprint('Committed? ${result.committed}'); // true / false\nprint('Snapshot? ${result.snapshot}'); // DataSnapshot\n```\n\n----------------------------------------\n\nTITLE: Chaining References in Dart\nDESCRIPTION: This code snippet illustrates how to chain the `child()`, `parent`, and `root` methods to navigate and create new Firebase Storage references. Chaining provides a concise way to define references to different locations within the storage hierarchy. Accessing `root.parent` results in `null`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/create-reference.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// References can be chained together multiple times\n// earthRef points to 'images/earth.jpg'\nfinal earthRef = spaceRef.parent?.child(\"earth.jpg\");\n\n// nullRef is null, since the parent of root is null\nfinal nullRef = spaceRef.root.parent;\n```\n\n----------------------------------------\n\nTITLE: Listening for Value Events in Flutter\nDESCRIPTION: This snippet shows how to listen for value events on a list reference in Firebase Realtime Database. It fetches the entire list of data as a single snapshot. Iteration through the snapshot's children is required to access individual children.  This approach is useful when fetching all children in a single operation instead of listening for individual child added events. It requires `firebase_database` package.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nmyTopPostsQuery.onValue.listen((event) {\n  for (final child in event.snapshot.children) {\n    // Handle the post.\n  }\n}, onError: (error) {\n  // Error.\n});\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version via CLI\nDESCRIPTION: This code snippet shows how to install a specific version of FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The `flutterfire install` command is used, followed by the desired version number. This allows developers to pin their project to a known-good set of FlutterFire plugin versions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.1.0\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Flattened Data Structure\nDESCRIPTION: This JSON snippet illustrates a flattened data structure for chat conversations, separating chat metadata, members, and messages into distinct paths. This allows for efficient downloading of specific data subsets as needed, improving performance.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/structure-data.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Chats contains only meta info about each conversation\n  // stored under the chats's unique ID\n  \"chats\": {\n    \"one\": {\n      \"title\": \"Historical Tech Pioneers\",\n      \"lastMessage\": \"ghopper: Relay malfunction found. Cause: moth.\",\n      \"timestamp\": 1459361875666\n    },\n    \"two\": { ... },\n    \"three\": { ... }\n  },\n\n  // Conversation members are easily accessible\n  // and stored by chat conversation ID\n  \"members\": {\n    // we'll talk about indices like this below\n    \"one\": {\n      \"ghopper\": true,\n      \"alovelace\": true,\n      \"eclarke\": true\n    },\n    \"two\": { ... },\n    \"three\": { ... }\n  },\n\n  // Messages are separate from data we may want to iterate quickly\n  // but still easily paginated and queried, and organized by chat\n  // conversation ID\n  \"messages\": {\n    \"one\": {\n      \"m1\": {\n        \"name\": \"eclarke\",\n        \"message\": \"The relay seems to be malfunctioning.\",\n        \"timestamp\": 1459361875337\n      },\n      \"m2\": { ... },\n      \"m3\": { ... }\n    },\n    \"two\": { ... },\n    \"three\": { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Version from pubspec.yaml\nDESCRIPTION: Extracts the plugin version from the `pubspec.yaml` file by reading it line by line, searching for the 'version:' key, and extracting the version string. This ensures the CMake build process has access to the plugin's version for build configurations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Read version from pubspec.yaml\nfile(STRINGS \"../pubspec.yaml\" pubspec_content)\nforeach(line ${pubspec_content})\n  string(FIND ${line} \"version: \" has_version)\n  \n  if(\"${has_version}\" STREQUAL \"0\")\n    string(FIND ${line} \": \" version_start_pos)\n    math(EXPR version_start_pos \"${version_start_pos} + 2\")\n    string(LENGTH ${line} version_end_pos)\n    math(EXPR len \"${version_end_pos} - ${version_start_pos}\")\n    string(SUBSTRING ${line} ${version_start_pos} ${len} PLUGIN_VERSION)\n    break()\n  endif()\nendforeach(line)\n```\n\n----------------------------------------\n\nTITLE: Linking Email Link to Existing Account - Dart\nDESCRIPTION: This code snippet shows how to link the email link authentication method to an existing user account using linkWithCredential().\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/email-link-auth.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal authCredential = EmailAuthProvider\n    .credentialWithLink(email: emailAuth, emailLink: emailLink.toString());\ntry {\n    await FirebaseAuth.instance.currentUser\n        ?.linkWithCredential(authCredential);\n} catch (error) {\n    print(\"Error linking emailLink credential.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Import Firebase Analytics - Dart\nDESCRIPTION: This line imports the Firebase Analytics package into your Dart code, allowing you to access the Firebase Analytics API.  This is a prerequisite for using any of the Firebase Analytics features.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_get-started.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:firebase_analytics/firebase_analytics.dart';\n```\n\n----------------------------------------\n\nTITLE: Signing out from Firebase Authentication in Dart\nDESCRIPTION: This code snippet shows how to sign out a user from Firebase Authentication in a Dart application. The `signOut` method is called on the `FirebaseAuth.instance` object. There are no input parameters. Upon successful execution, the currently signed-in user will be signed out.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/custom-auth.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseAuth.instance.signOut();\n```\n\n----------------------------------------\n\nTITLE: Get Download URL - Flutter\nDESCRIPTION: This snippet shows how to get the download URL for a file using the `getDownloadURL()` method in Flutter. The returned URL can be used for sharing or for integrating with existing download infrastructure.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/download-files.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal imageUrl =\n    await storageRef.child(\"users/me/profile.png\").getDownloadURL();\n```\n\n----------------------------------------\n\nTITLE: Handling reCAPTCHA Events - Dart\nDESCRIPTION: This snippet demonstrates how to listen to reCAPTCHA events such as successful completion, errors, and expiration.  Callbacks are defined for `onSuccess`, `onError` (expecting a `FirebaseAuthException` error), and `onExpired` events. These callbacks will be executed when the corresponding reCAPTCHA event occurs. Assumes Firebase Authentication is properly configured.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nRecaptchaVerifier(\n  onSuccess: () => print('reCAPTCHA Completed!'),\n  onError: (FirebaseAuthException error) => print(error),\n  onExpired: () => print('reCAPTCHA Expired!'),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire Version using CLI\nDESCRIPTION: This command installs a specific version of FlutterFire using the FlutterFire CLI. The version number specified in the command is used to fetch and install the appropriate FlutterFire components and dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.9.0\n```\n\n----------------------------------------\n\nTITLE: Get FCM Registration Token (Dart)\nDESCRIPTION: This Dart code retrieves the FCM registration token for the current app instance.  It requests notification permissions from the user if they haven't been granted. The function returns a Future that resolves to the token or rejects with an error.  The token is required for sending targeted notifications to the device.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/first-message.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal fcmToken = await FirebaseMessaging.instance.getToken();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Domains to iOS Info.plist\nDESCRIPTION: This XML snippet demonstrates how to add custom domains for Firebase Dynamic Links to your iOS project's Info.plist file. This is necessary if you are using custom domains for your Dynamic Links.  Each string within the array represents a custom domain associated with your Firebase project. The FirebaseDynamicLinksCustomDomains key allows the Dynamic Links SDK to recognize and handle links from these domains correctly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/receive.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>FirebaseDynamicLinksCustomDomains</key>\n<array>\n    <string>https://custom.domain.io/path1</string>\n    <string>https://custom.domain.io/path2</string>\n</array>\n\n...other settings\n\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Setting Android compileSdkVersion\nDESCRIPTION: This code snippet shows how to update the Android compileSdkVersion to version 31 in the project's configuration.  This ensures compatibility with newer Android features and APIs. This change is usually made within the `build.gradle` file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_in_app_messaging/firebase_in_app_messaging/CHANGELOG.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ncompileSdkVersion 31\n```\n\n----------------------------------------\n\nTITLE: Add Performance Monitoring plugin in Flutter\nDESCRIPTION: This command adds the Firebase Performance Monitoring plugin to your Flutter project. It is executed from the root directory of the Flutter project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/get-started.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add firebase_performance\n```\n\n----------------------------------------\n\nTITLE: Add Crashlytics upload symbols run script - Apple\nDESCRIPTION: These scripts process your dSYM files and upload the files to Firebase Crashlytics.  The FIREBASE_APP_ID variable needs to be replaced with the actual Firebase Apple App ID. These scripts are added to the 'Run Script' build phase in Xcode.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_deobfuscated.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$PODS_ROOT/FirebaseCrashlytics/upload-symbols --build-phase --validate -ai <var>FIREBASE_APP_ID</var> -- $DWARF_DSYM_FOLDER_PATH/App.framework.dSYM\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$PODS_ROOT/FirebaseCrashlytics/upload-symbols --build-phase -ai <var>FIREBASE_APP_ID</var> -- $DWARF_DSYM_FOLDER_PATH/App.framework.dSYM\n```\n\n----------------------------------------\n\nTITLE: Registering Firebase Messaging Service Worker (Old Template) HTML\nDESCRIPTION: This HTML code snippet registers the Firebase Messaging service worker. It checks if 'serviceWorker' is in the navigator and registers 'firebase-messaging-sw.js' with the specified scope. It also includes logic for handling service worker updates and fallbacks to a plain script tag if the service worker fails to load within a reasonable time or if service workers are not supported.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<body>\n  <script>\n      var serviceWorkerVersion = null;\n      var scriptLoaded = false;\n      function loadMainDartJs() {\n        if (scriptLoaded) {\n          return;\n        }\n        scriptLoaded = true;\n        var scriptTag = document.createElement('script');\n        scriptTag.src = 'main.dart.js';\n        scriptTag.type = 'application/javascript';\n        document.body.append(scriptTag);\n      }\n\n      if ('serviceWorker' in navigator) {\n        // Service workers are supported. Use them.\n        window.addEventListener('load', function () {\n          // Register Firebase Messaging service worker.\n          navigator.serviceWorker.register('firebase-messaging-sw.js', {\n            scope: '/firebase-cloud-messaging-push-scope',\n          });\n\n          // Wait for registration to finish before dropping the <script> tag.\n          // Otherwise, the browser will load the script multiple times,\n          // potentially different versions.\n          var serviceWorkerUrl =\n            'flutter_service_worker.js?v=' + serviceWorkerVersion;\n\n          navigator.serviceWorker.register(serviceWorkerUrl).then((reg) => {\n            function waitForActivation(serviceWorker) {\n              serviceWorker.addEventListener('statechange', () => {\n                if (serviceWorker.state == 'activated') {\n                  console.log('Installed new service worker.');\n                  loadMainDartJs();\n                }\n              });\n            }\n            if (!reg.active && (reg.installing || reg.waiting)) {\n              // No active web worker and we have installed or are installing\n              // one for the first time. Simply wait for it to activate.\n              waitForActivation(reg.installing ?? reg.waiting);\n            } else if (!reg.active.scriptURL.endsWith(serviceWorkerVersion)) {\n              // When the app updates the serviceWorkerVersion changes, so we\n              // need to ask the service worker to update.\n              console.log('New service worker available.');\n              reg.update();\n              waitForActivation(reg.installing);\n            } else {\n              // Existing service worker is still good.\n              console.log('Loading app from service worker.');\n              loadMainDartJs();\n            }\n          });\n\n          // If service worker doesn't succeed in a reasonable amount of time,\n          // fallback to plaint <script> tag.\n          setTimeout(() => {\n            if (!scriptLoaded) {\n              console.warn(\n                'Failed to load app from service worker. Falling back to plain <script> tag.'\n              );\n              loadMainDartJs();\n            }\n          }, 4000);\n        });\n      } else {\n        // Service workers not supported. Just drop the <script> tag.\n        loadMainDartJs();\n      }\n  </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version 2.4.0 via CLI\nDESCRIPTION: This code snippet shows how to install FlutterFire BoM version 2.4.0 using the FlutterFire CLI.  The `flutterfire install 2.4.0` command ensures that the project's dependencies are updated to be compatible with the specified BoM version. Proper installation and configuration of the FlutterFire CLI are required before execution.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Setting Link Libraries and MSVC Runtime Mode\nDESCRIPTION: This snippet sets the MSVC runtime mode and links the plugin library with required dependencies, including Firebase libraries (`firebase_core_plugin`, `firebase_auth`, `firebase_firestore`) and system libraries (`advapi32`, `ws2_32`, etc.). This ensures that the plugin has access to the necessary Firebase and system functionalities.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(MSVC_RUNTIME_MODE MD)\nset(firebase_libs firebase_core_plugin firebase_auth firebase_firestore)\nset(ADDITIONAL_LIBS advapi32 ws2_32 crypt32 rpcrt4 ole32 shell32 Bcrypt.lib DbgHelp.lib)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE \"${firebase_libs}\" \"${ADDITIONAL_LIBS}\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Plugin Version from pubspec.yaml\nDESCRIPTION: This snippet reads the `pubspec.yaml` file and extracts the plugin version string. It searches for the `version:` key and parses the value. The extracted version is stored in the `PLUGIN_VERSION` variable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfile(STRINGS \"../pubspec.yaml\" pubspec_content)\nforeach(line ${pubspec_content})\n  string(FIND ${line} \"version: \" has_version)\n  \n  if(\"${has_version}\" STREQUAL \"0\")\n    string(FIND ${line} \": \" version_start_pos)\n    math(EXPR version_start_pos \"${version_start_pos} + 2\")\n    string(LENGTH ${line} version_end_pos)\n    math(EXPR len \"${version_end_pos} - ${version_start_pos}\")\n    string(SUBSTRING ${line} ${version_start_pos} ${len} PLUGIN_VERSION)\n    break()\n  endif()\nendforeach(line)\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Data Collection (Android)\nDESCRIPTION: This snippet shows the meta-data tag required to disable automatic initialization for Firebase In-App Messaging in the AndroidManifest.xml file. Setting the `firebase_inapp_messaging_auto_data_collection_enabled` flag to `false` prevents the SDK from automatically collecting and sending data.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_modify-message-behavior.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n        android:name=\"firebase_inapp_messaging_auto_data_collection_enabled\"\n        android:value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Upload Flutter debug symbols for Android using Firebase CLI\nDESCRIPTION: This command uploads Flutter debug symbols for Android, which is necessary for displaying readable stack traces for obfuscated code builds.  It requires the Firebase CLI and a Firebase Android App ID. The path to the symbols directory must be provided.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_get-started.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfirebase crashlytics:symbols:upload --app=<var class=\"readonly\">FIREBASE_APP_ID</var> <var class=\"readonly\">PATH/TO</var>/symbols\n```\n\n----------------------------------------\n\nTITLE: Listen for Real-time Updates - Dart\nDESCRIPTION: This snippet sets up a listener for real-time updates from the Remote Config backend. When a new version is published, the listener automatically fetches and activates the new config, updating the app's behavior dynamically. This is only available for Android and iOS (not Web).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/remote-config/_get-started.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nremoteConfig.onConfigUpdated.listen((event) async {\n  await remoteConfig.activate();\n\n  // Use the new config values here.\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting User Account - Dart\nDESCRIPTION: This snippet shows how to delete a user account using the `delete()` method. The user must have signed in recently.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nawait user?.delete();\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: Links the Firebase C++ SDK libraries and additional system libraries to the plugin target. These libraries provide essential functionalities required by the plugin. The PUBLIC keyword makes these linked libraries visible to downstream targets as well.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(FIREBASE_LIBS firebase_app)\nset(ADDITIONAL_LIBS advapi32 ws2_32 crypt32 rpcrt4 ole32 icu)\n\ntarget_link_libraries(${PLUGIN_NAME} PUBLIC \"${FIREBASE_LIBS}\" \"${ADDITIONAL_LIBS}\")\n```\n\n----------------------------------------\n\nTITLE: Create & Start Custom Network Trace - Flutter\nDESCRIPTION: This code snippet demonstrates how to create and start a custom network request trace using the Firebase Performance Monitoring HttpMetric API in a Flutter application. The trace monitors the performance of a specific HTTP request, capturing metrics such as response time and payload size. It requires the `firebase_performance` and `http` packages.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/_custom-network-traces.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal metric = FirebasePerformance.instance\n    .newHttpMetric(\"https://www.google.com\", HttpMethod.Get);\n\nawait metric.start();\nfinal response = await http.get(Uri.parse(\"https://www.google.com/\"));\nawait metric.stop();\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Linking Flutter\nDESCRIPTION: Sets additional include directories for the plugin and links it against the Flutter framework libraries. This ensures that the plugin has access to the Flutter API and can be integrated into a Flutter application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PUBLIC flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter app on Web with specific port\nDESCRIPTION: This command is used to run the Flutter application on the web with a specified port (5000). It's crucial for Google authentication to work correctly, as localhost:5000 is whitelisted.  The command uses the web-server device and sets the web-port to 5000.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run -d web-server --web-port 5000\n```\n\n----------------------------------------\n\nTITLE: App-level Gradle plugin application for Crashlytics - Android\nDESCRIPTION: This snippet shows the required plugin applications added to the app-level `build.gradle` file. These plugins are essential for integrating Crashlytics into the Android build process. Apply the plugins at the bottom of the file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_deobfuscated.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\n// ... other imports\n\n  android {\n    // ... your android config\n  }\n\n  dependencies {\n    // ... your dependencies\n  }\n\n  // This section must appear at the bottom of the file\n  apply plugin: 'com.google.gms.google-services'\n  <strong>apply plugin: 'com.google.firebase.crashlytics'</strong>\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM with CLI\nDESCRIPTION: This command installs a specific FlutterFire Bill of Materials (BoM) version using the FlutterFire CLI. Replace `2.1.0` with the desired BoM version to ensure compatibility across Firebase plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.1.0\n```\n\n----------------------------------------\n\nTITLE: Updating Versions File with Melos\nDESCRIPTION: This snippet runs the melos bom command which updates `VERSIONS.md` and `scripts/versions.json` files.  The `[optional-version]` parameter lets you specify the version to use, but it is optional.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmelos bom [optional-version]\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase SDK Version\nDESCRIPTION: Defines the desired version of the Firebase SDK to use. This is a crucial configuration setting as it determines the version of the Firebase libraries linked into the plugin. Later, this version is used to download the SDK if it's not already present.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FIREBASE_SDK_VERSION \"12.7.0\")\n```\n\n----------------------------------------\n\nTITLE: Load Firebase JS SDK from Local File - JavaScript (web)\nDESCRIPTION: This JavaScript snippet shows how to load the Firebase JavaScript SDK from local JavaScript files in a Flutter web app. It uses dynamic imports to load `my-analytics.js` and `my-firestore.js`, which are assumed to be located in the same directory as the `web/index.html` file.  It is added inside the `window.addEventListener` callback. This is an alternative to loading the SDK from a CDN and offers more control and potentially better performance if files are served locally.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"web/my-analytics.js\" & \"web/my-firestore.js\" file loaded as a script into your \"web/index.html\" file: \nwindow.addEventListener('load', async function (ev) {\n  window.firebase_analytics = await import(\"./my-analytics.js\");\n  window.firebase_firestore = await import(\"./my-firestore.js\");\n  \n  _flutter.loader.loadEntrypoint().then(function (engineInitializer) {\n    // rest of the code\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Firebase App\nDESCRIPTION: This code snippet demonstrates how to initialize a `FirebaseStorage` instance using a custom `FirebaseApp` instance. This is useful when you need to authenticate multiple users with different Firebase Apps within the same application, such as in apps that support multiple logged-in accounts.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/start.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Use a non-default App\nfinal storage = FirebaseStorage.instanceFor(app: customApp);\n```\n\n----------------------------------------\n\nTITLE: Request Notification Permissions and Get APNS Token - Dart\nDESCRIPTION: This Dart code snippet demonstrates how to request notification permissions from the user and retrieve the APNs (Apple Push Notification service) token on Apple platforms.  It's crucial to request permissions before attempting to retrieve the FCM token. The APNs token is required on iOS before making FCM plugin API requests.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// You may set the permission requests to \"provisional\" which allows the user to choose what type\n// of notifications they would like to receive once the user receives a notification.\nfinal notificationSettings = await FirebaseMessaging.instance.requestPermission(provisional: true);\n\n// For apple platforms, ensure the APNS token is available before making any FCM plugin API calls\nfinal apnsToken = await FirebaseMessaging.instance.getAPNSToken();\nif (apnsToken != null) {\n // APNS token is available, make FCM plugin API requests...\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Cloud Firestore Plugin\nDESCRIPTION: This command runs end-to-end (e2e) tests for the cloud_firestore plugin using Melos. It directly communicates with Firebase services and tests the full functionality of the plugin.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmelos run test:e2e:cloud_firestore\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multi-Factor Session and Hint - Dart\nDESCRIPTION: This snippet retrieves the multi-factor session and hint from the resolver obtained from the `FirebaseAuthMultiFactorException`. The session is used for verifying the phone number, and the hint provides information about the enrolled secondary factor.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal session = e.resolver.session;\n\nfinal hint = e.resolver.hints[selectedHint];\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for building the project.  The Flutter tooling requires CMake 3.14 or later to function correctly. Using a newer version might cause compatibility issues.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Canceling onDisconnect Event\nDESCRIPTION: Demonstrates how to cancel an `onDisconnect` event that was previously set. This prevents the write operation from occurring when the client disconnects.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal onDisconnectRef = presenceRef.onDisconnect();\nonDisconnectRef.set(\"I disconnected\");\n// ...\n// some time later when we change our minds\n// ...\nonDisconnectRef.cancel();\n```\n\n----------------------------------------\n\nTITLE: Create PhoneAuthProvider Credential - Dart\nDESCRIPTION: This snippet creates a `PhoneAuthCredential` using the verification ID and the SMS code provided by the user. It depends on the `PhoneAuthProvider` class from Firebase Authentication. It is used to create a credential object which is required for completing the enrollment process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/multi-factor.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal credential = PhoneAuthProvider.credential(\n    verificationId: verificationId,\n    smsCode: smsCode,\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command is used to install a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The version number (e.g., 3.5.1) specifies the exact BoM version to be installed, ensuring consistency and compatibility across FlutterFire projects.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.5.1\n```\n\n----------------------------------------\n\nTITLE: Disable Firebase JS SDK Auto-Injection - HTML\nDESCRIPTION: This HTML snippet shows how to disable Firebase JavaScript SDK auto-injection by adding a property inside a `<script>` tag within the `web/index.html` file of your Flutter project.  It takes an array of plugin names to ignore.  This prevents the SDK from being automatically included during web builds. This is useful when you want to manually manage the Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Add this property inside a <script> tag within your \"web/index.html\" file in your Flutter project -->\n<!-- Put in the names of all the plugins you wish to ignore: -->\nwindow.flutterfire_ignore_scripts = ['analytics', 'firestore'];\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration JSON Example\nDESCRIPTION: This JSON snippet demonstrates a basic CORS configuration for a Firebase Storage bucket. It allows GET requests from any origin ('*') for up to 3600 seconds (1 hour). This configuration is necessary for web applications to access files stored in Firebase Storage due to browser security restrictions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage_web/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"origin\": [\"*\"],\n    \"method\": [\"GET\"],\n    \"maxAgeSeconds\": 3600\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling a Deep Link - Flutter (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to handle a deep link once it has been retrieved. It extracts the URI from the PendingDynamicLinkData and navigates the user to a different screen based on the link's path using `Navigator.pushNamed`.  This code is typically placed within a conditional statement, ensuring that it only executes if a valid deep link has been received.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/receive.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nif (initialLink != null) {\n  final Uri deepLink = initialLink.link;\n  // Example of using the dynamic link to push the user to a different screen\n  Navigator.pushNamed(context, deepLink.path);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic in Flutter using FCM\nDESCRIPTION: This snippet demonstrates how to subscribe a Flutter application instance to a specific topic using the Firebase Messaging plugin. The `subscribeToTopic` method is called on the `FirebaseMessaging.instance` object, passing the desired topic name as a string. This method returns a `Future` that resolves when the subscription is successful.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/topic-messaging.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait FirebaseMessaging.instance.subscribeToTopic(\"topic\");\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are required for compiling code that interacts with the Flutter engine. The `list(APPEND ...)` command is used to add the header files to the list, and then `list(TRANSFORM ...)` prepends the ephemeral directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Authentication Plugin - Flutter\nDESCRIPTION: This command installs the firebase_auth plugin into your Flutter project, allowing you to use Firebase Authentication features.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nflutter pub add firebase_auth\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase SDK as Subdirectory\nDESCRIPTION: Adds the Firebase C++ SDK as a subdirectory to the project. This is necessary for including the Firebase SDK's headers and libraries. The EXCLUDE_FROM_ALL prevents this directory from being built directly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(${FIREBASE_CPP_SDK_DIR} bin/ EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Uploading Flutter Debug Symbols with Firebase CLI\nDESCRIPTION: This code snippet demonstrates how to upload Flutter debug symbols to Firebase Crashlytics using the Firebase CLI. It requires the Firebase CLI (v.11.9.0+) to be installed and configured. The FIREBASE_APP_ID parameter is your Firebase Android App ID, and PATH/TO/symbols is the directory containing the debug symbols generated with the `--split-debug-info` flag during the Flutter build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_deobfuscated.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfirebase crashlytics:symbols:upload --app=<var class=\"readonly\">FIREBASE_APP_ID</var> <var class=\"readonly\">PATH/TO</var>/symbols\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet includes the Flutter build rules by adding the `flutter` subdirectory.  It also includes the generated plugins CMake file, which manages plugin compilation and inclusion in the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Symbol Visibility\nDESCRIPTION: Configures target properties to control symbol visibility. By default, symbols are hidden to prevent conflicts between plugins. Symbols meant for external use need to be explicitly exported.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Symbols are hidden by default to reduce the chance of accidental conflicts\n# between plugins. This should not be removed; any symbols that should be\n# exported should be explicitly exported with the FLUTTER_PLUGIN_EXPORT macro.\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PUBLIC FLUTTER_PLUGIN_IMPL)\n```\n\n----------------------------------------\n\nTITLE: Initialize Firebase App Check in Flutter\nDESCRIPTION: This code snippet demonstrates how to initialize Firebase App Check in a Flutter application. It sets up the necessary providers for web (ReCaptchaV3), Android (Debug provider), and iOS/macOS (App Attest). Ensure this is called after `Firebase.initializeApp()`\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/default-providers.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:firebase_core/firebase_core.dart';\n\n// Import the firebase_app_check plugin\nimport 'package:firebase_app_check/firebase_app_check.dart';\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  await FirebaseAppCheck.instance.activate(\n    // You can also use a `ReCaptchaEnterpriseProvider` provider instance as an\n    // argument for `webProvider`\n    webProvider: ReCaptchaV3Provider('recaptcha-v3-site-key'),\n    // Default provider for Android is the Play Integrity provider. You can use the \"AndroidProvider\" enum to choose\n    // your preferred provider. Choose from:\n    // 1. Debug provider\n    // 2. Safety Net provider\n    // 3. Play Integrity provider\n    androidProvider: AndroidProvider.debug,\n    // Default provider for iOS/macOS is the Device Check provider. You can use the \"AppleProvider\" enum to choose\n        // your preferred provider. Choose from:\n        // 1. Debug provider\n        // 2. Device Check provider\n        // 3. App Attest provider\n        // 4. App Attest provider with fallback to Device Check provider (App Attest provider is only available on iOS 14.0+, macOS 14.0+)\n    appleProvider: AppleProvider.appAttest,\n  );\n  runApp(App());\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to idTokenChanges() - Dart\nDESCRIPTION: This code snippet demonstrates how to listen for ID token changes using the `idTokenChanges()` method.  It triggers when a user signs in, signs out, or their token changes, updating the console output accordingly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth.instance\n  .idTokenChanges()\n  .listen((User? user) {\n    if (user == null) {\n      print('User is currently signed out!');\n    } else {\n      print('User is signed in!');\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This line includes the generated plugin build rules from `flutter/generated_plugins.cmake`. This file is responsible for building and adding plugins to the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Run Flutter app\nDESCRIPTION: This command rebuilds and runs the Flutter application after making changes to the code or configuration.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions\nDESCRIPTION: Sets compile definitions for the plugin. This configuration snippet enables the firebase-cpp-sdk's platform logging API.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Enable firebase-cpp-sdk's platform logging api.\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE -DINTERNAL_EXPERIMENTAL=1)\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Events in Flutter\nDESCRIPTION: This snippet demonstrates how to listen for child events (added, changed, removed) on a Firebase Realtime Database reference.  It attaches listeners to specific events to monitor changes to child nodes. The listener functions are triggered when specified events occur, allowing to react to data modification in real time. It requires `firebase_database` package.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/lists-of-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal commentsRef = FirebaseDatabase.instance.ref(\"post-comments/$postId\");\ncommentsRef.onChildAdded.listen((event) {\n  // A new comment has been added, so add it to the displayed list.\n});\ncommentsRef.onChildChanged.listen((event) {\n  // A comment has changed; use the key to determine if we are displaying this\n  // comment and if so displayed the changed comment.\n});\ncommentsRef.onChildRemoved.listen((event) {\n  // A comment has been removed; use the key to determine if we are displaying\n  // this comment and if so remove it.\n});\n```\n\n----------------------------------------\n\nTITLE: Use Extension Helper - iOS - Objective-C\nDESCRIPTION: This code snippet shows how to use the Firebase Messaging extension helper in the NotificationService.m file on iOS to modify the notification content. It imports the necessary headers and calls populateNotificationContent within the didReceiveNotificationRequest method. It also has commented out code for firebase authentication if that is used.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_15\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"NotificationService.h\"\n#import \"FirebaseMessaging.h\"\n#import \"FirebaseAuth.h\" // Add this line if you are using FirebaseAuth phone authentication\n#import <UIKit/UIKit.h> // Add this line if you are using FirebaseAuth phone authentication\n\n@interface NotificationService ()\n\n@property (nonatomic, strong) void (^contentHandler)(UNNotificationContent *contentToDeliver);\n@property (nonatomic, strong) UNMutableNotificationContent *bestAttemptContent;\n\n@end\n\n@implementation NotificationService\n\n/* Uncomment this if you are using Firebase Auth\n- (BOOL)application:(UIApplication *)app\n            openURL:(NSURL *)url\n            options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options {\n  if ([[FIRAuth auth] canHandleURL:url]) {\n    return YES;\n  }\n  return NO;\n}\n\n- (void)scene:(UIScene *)scene openURLContexts:(NSSet<UIOpenURLContext *> *)URLContexts {\n  for (UIOpenURLContext *urlContext in URLContexts) {\n    [FIRAuth.auth canHandleURL:urlContext.URL];\n  }\n}\n*/\n\n- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {\n    self.contentHandler = contentHandler;\n    self.bestAttemptContent = [request.content mutableCopy];\n\n    // Modify the notification content here...\n    [[FIRMessaging extensionHelper] populateNotificationContent:self.bestAttemptContent withContentHandler:contentHandler];\n}\n\n- (void)serviceExtensionTimeWillExpire {\n    // Called just before the extension will be terminated by the system.\n    // Use this as an opportunity to deliver your \"best attempt\" at modified content, otherwise the original push payload will be used.\n    self.contentHandler(self.bestAttemptContent);\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Root Directory Variable\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the absolute path of the `cpp_client_wrapper` directory, located within the `ephemeral` directory. This directory contains the C++ wrapper code that interacts with the Flutter engine.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This command applies a standard set of build settings to the executable target.  It's likely defined in a separate CMake module and provides common configurations for building Flutter Windows applications.  It may include compiler flags, linker options, and other general settings.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding a Completion Callback in Flutter\nDESCRIPTION: This snippet shows how to add a completion callback to a `set()` operation in Firebase Realtime Database using Futures.  It demonstrates how to handle success and error scenarios after the data is written to the database. It returns a Future which allows attaching `then` and `catchError` blocks to handle the success or failure of the write operation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseDatabase.instance\n    .ref('users/$userId/email')\n    .set(emailAddress)\n    .then((_) {\n        // Data saved successfully!\n    })\n    .catchError((error) {\n        // The write failed...\n    });\n```\n\n----------------------------------------\n\nTITLE: Requesting Permissions for FCM - Dart\nDESCRIPTION: This code snippet demonstrates how to request user permission to receive FCM messages on iOS, macOS, Web, and Android 13+. It uses the `firebase_messaging` package to request permissions for alerts, badges, sound, etc. The `authorizationStatus` property of the returned `NotificationSettings` object can be used to determine the user's decision.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseMessaging messaging = FirebaseMessaging.instance;\n\nNotificationSettings settings = await messaging.requestPermission(\n  alert: true,\n  announcement: false,\n  badge: true,\n  carPlay: false,\n  criticalAlert: false,\n  provisional: false,\n  sound: true,\n);\n\nprint('User granted permission: ${settings.authorizationStatus}');\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This snippet applies a standard set of build settings that are configured in the application-level CMakeLists.txt. This provides a consistent build environment across the Flutter project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${PLUGIN_NAME})\n```\n\n----------------------------------------\n\nTITLE: Keeping Data in Sync\nDESCRIPTION: Keeps a specific location in the Firebase Realtime Database synchronized locally, ensuring the data is available offline even without active listeners. This uses the `keepSynced` method.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal scoresRef = FirebaseDatabase.instance.ref(\"scores\");\nscoresRef.keepSynced(true);\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation prefix. This file contains locale-specific data used by Flutter.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Create Custom Command for Flutter Assemble\nDESCRIPTION: Defines a custom command to run the Flutter tool backend script and generate the Flutter library and related files. It depends on the Flutter tool environment variables and runs the tool_backend.bat script. This command will run every time due to the _phony_ output file, ensuring the Flutter tool is executed during each build.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines the build configuration options (Debug, Profile, Release). It checks if the generator is multi-config and sets the CMAKE_CONFIGURATION_TYPES accordingly. If not multi-config, it sets CMAKE_BUILD_TYPE.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Firestore withConverter Function - Dart\nDESCRIPTION: This code snippet shows how to use the `withConverter` function with Firebase Firestore in Dart.  It allows interacting with collections/documents in a type-safe way. It requires the FirebaseFirestore plugin and demonstrates creating, reading from, and writing to a collection with type safety.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/CHANGELOG.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal modelsRef = FirebaseFirestore\n    .instance\n    .collection('models')\n    .withConverter<Model>(\n      fromFirestore: (snapshot, _) => Model.fromJson(snapshot.data()!),\n      toFirestore: (model, _) => model.toJson(),\n    );\n\nFuture<void> main() async {\n  // Writes now take a Model as parameter instead of a Map\n  await modelsRef.add(Model());\n  final Model model = await modelsRef.doc('123').get().then((s) => s.data());\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Repository Configuration - Adding Maven Endpoint\nDESCRIPTION: This snippet demonstrates how to add the Google Maven repository to the `build.gradle` file in an Android project. This is a required configuration step for Firebase SDK version 11.0.1 and later when using FlutterFire. The configuration ensures that the necessary Firebase dependencies can be resolved during the build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/CHANGELOG.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n        jcenter()\n        maven {                              // NEW\n            url \"https://maven.google.com\"   // NEW\n        }                                    // NEW\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` variable. These header files are required for compiling code that uses the Flutter library.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Data on Disconnect\nDESCRIPTION: Writes data to the Firebase Realtime Database when the client disconnects, whether cleanly or due to an error. Uses the `onDisconnect` primitive for this functionality.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal presenceRef = FirebaseDatabase.instance.ref(\"disconnectmessage\");\n// Write a string when this client loses connection\npresenceRef.onDisconnect().set(\"I disconnected!\");\n```\n\n----------------------------------------\n\nTITLE: Setting Install to Default Build\nDESCRIPTION: This snippet makes the install step the default, which is required to run the application. It also sets the CMAKE_INSTALL_PREFIX to the build bundle directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: iOS Localized Strings\nDESCRIPTION: This code shows how to specify localized strings for iOS notifications within the `Localizable.strings` file. The default language messages reside in `Base.lproj/Localizable.strings`, while translated messages are in the `language.lproj` directory (e.g., `fr.lproj/Localizable.strings` for French).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_9\n\nLANGUAGE: Plain Text\nCODE:\n```\n\"NOTIFICATION_TITLE\" = \"Hello World\";\n\"NOTIFICATION_MESSAGE\" = \"This is a message\";\n```\n\n----------------------------------------\n\nTITLE: Prepending Wrapper Root to Plugin Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` variable to each element in the `CPP_WRAPPER_SOURCES_PLUGIN` list. This ensures that the source files are found in the correct location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Making Install Step Default\nDESCRIPTION: This snippet sets the \"install\" step as the default build step in Visual Studio, as it's required to run the application. This ensures that all necessary files are copied to the correct locations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Import Firebase core and configuration\nDESCRIPTION: These import statements add the Firebase core plugin and the configuration file to your `lib/main.dart` file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n```\n\n----------------------------------------\n\nTITLE: Granting Firebase Access to Imported Buckets\nDESCRIPTION: This command uses the `gsutil` tool to grant Firebase access to an existing Cloud Storage bucket. It modifies the Access Control List (ACL) recursively (`-r`) to add the Firebase Storage service account (`service-PROJECT_NUMBER@gcp-sa-firebasestorage.iam.gserviceaccount.com`) as a user (`-u`) with the necessary permissions.  Replace `PROJECT_NUMBER` and `YOUR-CLOUD-STORAGE-BUCKET` with your actual project number and bucket name, respectively.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/start.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngsutil -m acl ch -r -u service-PROJECT_NUMBER@gcp-sa-firebasestorage.iam.gserviceaccount.com gs://YOUR-CLOUD-STORAGE-BUCKET\n```\n\n----------------------------------------\n\nTITLE: Abort Transaction - Firebase Realtime Database (Dart)\nDESCRIPTION: This snippet shows how to abort a Firebase Realtime Database transaction using `Transaction.abort()`.  If the condition `user !== null` is met, the transaction is aborted and `result.committed` will be `false`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/read-and-write.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nTransactionResult result = await ref.runTransaction((Object? user) {\n  if (user !== null) {\n    return Transaction.abort();\n  }\n\n  // ...\n});\n\nprint(result.committed); // false\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the absolute path of the Flutter Windows dynamic library (`flutter_windows.dll`) located in the `ephemeral` directory. This library contains the core Flutter engine code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Signing in with Twitter - Dart\nDESCRIPTION: This code snippet demonstrates how to sign in with Twitter using Firebase Authentication in Flutter. It utilizes the `TwitterAuthProvider` and adjusts the sign-in method based on the platform (web via popup, other platforms via provider).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_auth/firebase_auth.dart';\n\nFuture<void> _signInWithTwitter() async {\n  TwitterAuthProvider twitterProvider = TwitterAuthProvider();\n\n  if (kIsWeb) {\n    await FirebaseAuth.instance.signInWithPopup(twitterProvider);\n  } else {\n    await FirebaseAuth.instance.signInWithProvider(twitterProvider);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name and Languages\nDESCRIPTION: This snippet defines the project name as \"cloud_firestore\" and specifies that the project uses C++ (CXX). The project name is used for identification within the CMake build system.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_NAME \"cloud_firestore\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL.  This is then published to the parent scope for use in install steps.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase ML Model Downloader Plugin - Bash\nDESCRIPTION: This command adds the firebase_ml_model_downloader plugin to the Flutter project. This plugin is required to download and manage TensorFlow Lite models hosted on Firebase ML.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/ml/use-custom-models.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nflutter pub add firebase_ml_model_downloader\n```\n\n----------------------------------------\n\nTITLE: Configure Firebase project in Flutter\nDESCRIPTION: This command configures the Firebase project in your Flutter app, ensuring the Firebase configuration is up-to-date. For Android, it also adds the required Performance Monitoring Gradle plugin.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/get-started.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter`. An interface library doesn't contain any code itself, but it specifies include directories and link libraries that are required by other targets that depend on it. The directories and link libraries are specified in subsequent calls to `target_include_directories` and `target_link_libraries`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Web App Check\nDESCRIPTION: This snippet demonstrates how to enable debug mode for Firebase App Check in a web application. By setting `self.FIREBASE_APPCHECK_DEBUG_TOKEN` to `true` in the `web/index.html` file, the app will generate a debug token that can be used for local development. Ensure this setting is not used in production environments.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/debug-provider.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script>\n    self.FIREBASE_APPCHECK_DEBUG_TOKEN = true;\n  </script>\n\n  ...\n\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring and running tests\nDESCRIPTION: Configures and runs unit tests for the plugin. It only enables test builds when building the example. It includes the Google Test framework and creates an executable for running the tests. It also copies Flutter DLL and performs post-build actions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n\n# Add the Google Test dependency.\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\n# The plugin's C API is not very useful for unit testing, so build the sources\n# directly into the test binary rather than using the DLL.\nadd_executable(${TEST_RUNNER}\n  test/firebase_auth_plugin_test.cpp\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n# flutter_wrapper_plugin has link dependencies on the Flutter DLL.\nadd_custom_command(TARGET ${TEST_RUNNER} POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n  \"${FLUTTER_LIBRARY}\" $<TARGET_FILE_DIR:${TEST_RUNNER}>\n)\n\n# Enable automatic test discovery.\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Append and Transform C++ Wrapper Sources (App)\nDESCRIPTION: Appends application-specific C++ wrapper sources to a list and prepends the wrapper root directory path.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the features and commands used in the CMakeLists.txt file. It's a basic but essential part to ensuring cmake compatibility.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin version header file\nDESCRIPTION: Configures a header file containing the plugin version information. The `configure_file` command copies the `plugin_version.h.in` file to the build directory, replacing any variables with their values. The generated header is then included by adding its directory to the include paths.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(plugin_version.h.in ${CMAKE_BINARY_DIR}/generated/firebase_auth/plugin_version.h)\ninclude_directories(${CMAKE_BINARY_DIR}/generated/)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines settings for the Profile build mode, copying flags from the Release build mode to ensure consistent behavior.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Rebuild Flutter Application - Flutter\nDESCRIPTION: This command rebuilds your Flutter application after installing the Firebase Messaging plugin. Rebuilding ensures that the newly added plugin is properly integrated into your project. Execute this command after running `flutter pub add firebase_messaging`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: CMake set compile definitions\nDESCRIPTION: This snippet adds preprocessor definitions to the executable target for versioning purposes.  It defines FLUTTER_VERSION and its components (MAJOR, MINOR, PATCH, BUILD).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Login to Firebase via CLI\nDESCRIPTION: This command logs into Firebase using your Google account. It opens a browser window for authentication and authorization.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a FlutterFire Plugin\nDESCRIPTION: This command runs unit tests for a specific FlutterFire plugin. It is executed from the plugin's root directory and tests the Dart code without interacting with external Firebase services.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/firebase_auth/firebase_auth_platform_interface\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories\nDESCRIPTION: Sets the include directories for the plugin target. This is essential for finding header files of the Firebase C++ SDK and the plugin's own headers during compilation.  The INTERFACE keyword specifies that the include directories are needed by anything linking against the created library.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${FIREBASE_CPP_SDK_DIR}/include\")\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire Version using CLI\nDESCRIPTION: This command installs a specific version of FlutterFire using the FlutterFire CLI. The version number specified in the command is used to fetch and install the appropriate FlutterFire components and dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.8.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Config Object - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to define the Firebase configuration object. It includes essential parameters like apiKey, authDomain, databaseURL, projectId, storageBucket, messagingSenderId, appId, and measurementId. This configuration is required to initialize Firebase in web applications and connect to the corresponding Firebase project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_performance/firebase_performance/example/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst firebaseConfig = {\n    apiKey: \"API_KEY\",\n    authDomain: \"PROJECT_ID.firebaseapp.com\",\n    databaseURL: \"https://PROJECT_ID.firebaseio.com\",\n    projectId: \"PROJECT_ID\",\n    storageBucket: \"PROJECT_ID.appspot.com\",\n    messagingSenderId: \"SENDER_ID\",\n    appId: \"APP_ID\",\n    measurementId: \"G-MEASUREMENT_ID\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Link with Advanced Parameters - Flutter\nDESCRIPTION: This snippet shows how to create a Dynamic Link with advanced parameters for Android, iOS, Google Analytics, and social meta tags using the Firebase Dynamic Links SDK in Flutter. It initializes a `DynamicLinkParameters` object with specific values for each parameter, allowing for deep customization of the Dynamic Link's behavior and presentation. This snippet then generates the link using `buildShortLink`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/create.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal dynamicLinkParams = DynamicLinkParameters(\n  link: Uri.parse(\"https://www.example.com/\"),\n  uriPrefix: \"https://example.page.link\",\n  androidParameters: const AndroidParameters(\n    packageName: \"com.example.app.android\",\n    minimumVersion: 30,\n  ),\n  iosParameters: const IOSParameters(\n    bundleId: \"com.example.app.ios\",\n    appStoreId: \"123456789\",\n    minimumVersion: \"1.0.1\",\n  ),\n  googleAnalyticsParameters: const GoogleAnalyticsParameters(\n    source: \"twitter\",\n    medium: \"social\",\n    campaign: \"example-promo\",\n  ),\n  socialMetaTagParameters: SocialMetaTagParameters(\n    title: \"Example of a Dynamic Link\",\n    imageUrl: Uri.parse(\"https://example.com/image.png\"),\n  ),\n);\nfinal dynamicLink =\n    await FirebaseDynamicLinks.instance.buildShortLink(dynamicLinkParams);\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components\nDESCRIPTION: This snippet installs the runtime components of the application, including the executable, ICU data file, and Flutter library. It also installs plugin bundled libraries if they exist.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM with CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The version number must be provided as an argument to the `flutterfire install` command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 1.1.0\n```\n\n----------------------------------------\n\nTITLE: Install Firebase Analytics Plugin - Flutter\nDESCRIPTION: This command uses the Flutter package manager to install the Firebase Analytics plugin in your Flutter project. It adds the `firebase_analytics` package to your project's dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_get-started.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nflutter pub add firebase_analytics\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory, which contains the application build rules, to the current project. See `runner/CMakeLists.txt` for application-specific configurations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version via CLI\nDESCRIPTION: This code snippet shows how to install a specific version of FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The `flutterfire install` command is used, followed by the desired version number. This allows developers to pin their project to a known-good set of FlutterFire plugin versions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.9.3\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Name\nDESCRIPTION: This snippet defines the plugin name as \"cloud_firestore_plugin\".  This value is critical as it's used to generate builds, and should not be modified.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUGIN_NAME \"cloud_firestore_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings Function\nDESCRIPTION: This CMake function, `APPLY_STANDARD_SETTINGS`, applies standard compiler settings to a specified target. It sets the C++ standard to C++17, adds compiler options for warnings and exception handling, and defines debug-specific macros.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Enabling Firebase Platform Logging\nDESCRIPTION: This snippet enables the firebase-cpp-sdk's platform logging API by defining the `INTERNAL_EXPERIMENTAL` preprocessor definition. This facilitates debugging and internal logging within the Firebase SDK.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE -DINTERNAL_EXPERIMENTAL=1)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire Version using CLI\nDESCRIPTION: This command installs a specific version of FlutterFire using the FlutterFire CLI. The version number specified in the command is used to fetch and install the appropriate FlutterFire components and dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.7.0\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and include directories\nDESCRIPTION: This snippet links the necessary libraries and sets include directories for the application. It links to the flutter and flutter_wrapper_app libraries, which provide the Flutter framework functionality. It also links to dwmapi.lib for Desktop Window Manager API functions. It adds the source directory to the include path to allow for custom headers.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in CMake\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are executed before the executable is built.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specified FlutterFire BoM version using the FlutterFire CLI. Replacing '3.4.0' with the desired version ensures your project uses a consistent set of Firebase SDKs and FlutterFire plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.4.0\n```\n\n----------------------------------------\n\nTITLE: Adding Executable\nDESCRIPTION: This command adds the executable target with the name defined by BINARY_NAME (likely set in a parent CMakeLists.txt file). It includes source files like `flutter_window.cpp`, `main.cpp`, `utils.cpp`, `win32_window.cpp`, the generated plugin registrant, a resource file, and a manifest file. These files are compiled and linked to create the final executable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM with CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The version number must be provided as an argument to the `flutterfire install` command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 1.0.1\n```\n\n----------------------------------------\n\nTITLE: Configure Firebase project using FlutterFire CLI\nDESCRIPTION: This command configures the Firebase project for the Flutter app, ensuring the app's Firebase configuration is up-to-date. For Android, it adds the required Crashlytics Gradle plugin to the app.  It assumes the FlutterFire CLI is installed and configured.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_get-started.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory, which is used to store generated configuration files and build artifacts. This directory is located relative to the CMake source directory and is used by the Flutter build process. The variable `EPHEMERAL_DIR` is set to the path.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Test Executable\nDESCRIPTION: This snippet defines the test executable, including the test source file and plugin sources directly into the test binary.  It also applies standard settings and links with necessary libraries like `flutter_wrapper_plugin`, `gtest_main`, and `gmock`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${TEST_RUNNER}\n  test/cloud_firestore_plugin_test.cpp\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Configuration with gsutil\nDESCRIPTION: This shell command utilizes the `gsutil` tool to set the CORS configuration for a specific Firebase Storage bucket.  It applies the settings defined in the `cors.json` file to the bucket named `gs://my-example-bucket.appspot.com`. `gsutil` is a command-line tool for interacting with Google Cloud Storage.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage_web/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nfirebase_storage/example$ gsutil cors set cors.json gs://my-example-bucket.appspot.com\nSetting CORS on gs://my-example-bucket.appspot.com/...\n```\n\n----------------------------------------\n\nTITLE: CMake apply standard settings\nDESCRIPTION: This snippet applies a set of standard build settings to the executable target. The details of these settings are not provided in the snippet.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Initialize Firebase in Flutter app\nDESCRIPTION: This code initializes Firebase using the `DefaultFirebaseOptions` object. It must be placed within an `async` function.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait Firebase.initializeApp(\n  options: DefaultFirebaseOptions.currentPlatform,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the location of generated files and configurations within the Flutter project. This directory typically contains build artifacts and configurations created by the Flutter tool. It's used to reference generated config files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (flutter_windows.dll) and ICU data file (icudtl.dat) and project build directory making them available in the parent scope. This path is used to link the Flutter library with the application. The `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, and `PROJECT_BUILD_DIR` variables are set to the appropriate paths.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Add Firebase Messaging Pod - iOS - Ruby\nDESCRIPTION: This code snippet shows how to add Firebase/Auth and Firebase/Messaging pods to the Podfile for the ImageNotification target. The Podfile needs to be configured correctly to enable Firebase messaging features within the notification service extension.  It assumes that FirebaseAuth is used, if not, the line `pod 'Firebase/Auth'` should be removed.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\ntarget 'ImageNotification' do\n      use_frameworks!\n      pod 'Firebase/Auth' # Add this line if you are using FirebaseAuth phone authentication\n      pod 'Firebase/Messaging'\n    end\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Name\nDESCRIPTION: Defines the name of the plugin. This is a key setting because the resulting library's name will be based on this value. It is explicitly mentioned that this value should not be changed because of its usage in build generation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"firebase_core_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Finding Installation ID - iOS Log\nDESCRIPTION: This log output shows where to find your app's installation ID (FID) in the iOS console, when running the app with the `-FIRDebugEnabled` flag. The installation ID is needed to send test messages to a specific device.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[Firebase/InAppMessaging][I-IAM180017] Starting InAppMessaging runtime with Firebase Installation ID YOUR_INSTALLATION_ID\n```\n\n----------------------------------------\n\nTITLE: Setting target link libraries and include directories\nDESCRIPTION: Specifies the include directories and library dependencies for the plugin.  It links the plugin to `firebase_core_plugin`, `firebase_auth`, and `flutter_wrapper_plugin`. Also set the include directories to include the firebase_auth interface.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(MSVC_RUNTIME_MODE MD)\nset(firebase_libs firebase_core_plugin firebase_auth)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE \"${firebase_libs}\")\n\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PUBLIC flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: This command adds a dependency on the `flutter_assemble` target. This ensures that the Flutter-specific build steps (like assembling the Flutter engine and assets) are executed before the executable target is built. It's crucial for integrating the Flutter part of the application with the Windows runner.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Dynamic Link - Flutter (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to retrieve a specific Dynamic Link using `FirebaseDynamicLinks.instance.getDynamicLink`. It parses the provided link string into a Uri and then fetches the `PendingDynamicLinkData` associated with it. Replace the example link with the actual Dynamic Link you wish to retrieve. This method allows developers to verify if a specific Dynamic Link was used to open the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/receive.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nString link = 'https://{{'<var>'}}dynamic-link-domain{{'</var>'}}/ke2Qa';\n\nfinal PendingDynamicLinkData? initialLink = await FirebaseDynamicLinks.instance.getDynamicLink(Uri.parse(link));\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version 2.5.0 via CLI\nDESCRIPTION: This code snippet demonstrates how to install a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire Command Line Interface (CLI).  It uses the `flutterfire install` command with the version number as an argument. This command updates the project's dependencies to use the specified BoM version.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.5.0\n```\n\n----------------------------------------\n\nTITLE: Google Sign-In for native (iOS+ and Android) using google_sign_in plugin in Dart\nDESCRIPTION: This code snippet demonstrates how to use the `google_sign_in` plugin to authenticate a user with Google on native platforms (iOS and Android). It triggers the sign-in flow, obtains authentication details, creates a Google credential, and then signs the user in using Firebase Authentication.  It requires the `google_sign_in` package and enabling the Google sign-in provider in the Firebase console.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_sign_in/google_sign_in.dart';\n\nFuture<UserCredential> signInWithGoogle() async {\n  // Trigger the authentication flow\n  final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();\n\n  // Obtain the auth details from the request\n  final GoogleSignInAuthentication? googleAuth = await googleUser?.authentication;\n\n  // Create a new credential\n  final credential = GoogleAuthProvider.credential(\n    accessToken: googleAuth?.accessToken,\n    idToken: googleAuth?.idToken,\n  );\n\n  // Once signed in, return the UserCredential\n  return await FirebaseAuth.instance.signInWithCredential(credential);\n}\n```\n\n----------------------------------------\n\nTITLE: Append and Transform Flutter Library Headers\nDESCRIPTION: Appends Flutter library headers to a list and prepends the ephemeral directory path to each header file. This sets up the include paths for the Flutter library.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: Includes a CMake configuration file named `generated_config.cmake` from the ephemeral directory. This file likely contains configurations generated by the Flutter tool, which are used to configure the build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI.  The version number specifies the BoM to install. The command is executed in a terminal environment.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.9.0\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Data Indexing for Scalability\nDESCRIPTION: This JSON demonstrates how to create an index to track user memberships in groups. This denormalization allows for efficient retrieval of group data and user memberships, even with large datasets, by storing redundant information.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/structure-data.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// An index to track Ada's memberships\n{\n  \"users\": {\n    \"alovelace\": {\n      \"name\": \"Ada Lovelace\",\n      // Index Ada's groups in her profile\n      \"groups\": {\n         // the value here doesn't matter, just that the key exists\n         \"techpioneers\": true,\n         \"womentechmakers\": true\n      }\n    },\n    ...\n  },\n  \"groups\": {\n    \"techpioneers\": {\n      \"name\": \"Historical Tech Pioneers\",\n      \"members\": {\n        \"alovelace\": true,\n        \"ghopper\": true,\n        \"eclarke\": true\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin_version.h\nDESCRIPTION: Configures a header file that contains the plugin version.  The input file `plugin_version.h.in` is processed, replacing variables with their actual values, and then the generated header file is placed in the `CMAKE_BINARY_DIR/generated/firebase_core/` directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(plugin_version.h.in ${CMAKE_BINARY_DIR}/generated/firebase_core/plugin_version.h)\ninclude_directories(${CMAKE_BINARY_DIR}/generated/)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that runs the Flutter tool to assemble the Flutter library and C++ wrapper code. It uses tool_backend.bat to generate necessary files. It's set to run every time because there isn't a proper dependency list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Estimating Server Time Offset\nDESCRIPTION: Estimates the client's clock skew relative to the Firebase Realtime Database servers.  This is done by attaching a listener to the `/.info/serverTimeOffset` location and calculating the estimated server time.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal offsetRef = FirebaseDatabase.instance.ref(\".info/serverTimeOffset\");\noffsetRef.onValue.listen((event) {\n  final offset = event.snapshot.value as num? ?? 0.0;\n  final estimatedServerTimeMs =\n      DateTime.now().millisecondsSinceEpoch + offset;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable that will be created for the application.  Changing this variable will change the on-disk name of the compiled application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin`. This library includes the core and plugin-specific C++ wrapper source files. It applies standard settings, sets the position-independent code flag, sets the CXX visibility preset to hidden, links against the `flutter` interface library, adds the wrapper include directory to the include path, and depends on flutter_assemble.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file contains configuration settings provided by the Flutter tool.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Core)\nDESCRIPTION: Appends a list of core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` variable. These source files provide a common interface between the Flutter engine and the application. The `list(APPEND ...)` command is used to add the source files to the list, and then `list(TRANSFORM ...)` prepends the wrapper root directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: Sets target properties for the plugin library. This includes setting C++ visibility to hidden by default and defining compile definitions. Symbols are hidden by default to prevent conflicts between plugins, and symbols to be exported should be explicitly done with the FLUTTER_PLUGIN_EXPORT macro.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Symbols are hidden by default to reduce the chance of accidental conflicts\n# between plugins. This should not be removed; any symbols that should be\n# exported should be explicitly exported with the FLUTTER_PLUGIN_EXPORT macro.\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PUBLIC FLUTTER_PLUGIN_IMPL)\n# Enable firebase-cpp-sdk's platform logging api.\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE -DINTERNAL_EXPERIMENTAL=1)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command to Copy Flutter Library\nDESCRIPTION: This snippet adds a custom command to copy the Flutter library to the test executable's directory after the build. This is required because `flutter_wrapper_plugin` has link dependencies on the Flutter DLL.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(TARGET ${TEST_RUNNER} POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n  \"${FLUTTER_LIBRARY}\" $<TARGET_FILE_DIR:${TEST_RUNNER}>\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Wrapper Root to App Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` variable to each element in the `CPP_WRAPPER_SOURCES_APP` list. This ensures that the source files are found in the correct location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Add Firebase Crashlytics and Analytics Flutter plugins\nDESCRIPTION: This command adds the Firebase Crashlytics and Firebase Analytics Flutter plugins to the project.  Firebase Analytics is recommended for breadcrumb logs.  It requires the Flutter SDK and assumes the user is in the root directory of their Flutter project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_get-started.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub add firebase_crashlytics && flutter pub add firebase_analytics\n```\n\n----------------------------------------\n\nTITLE: Load Firebase JS SDK Manually - JavaScript (web)\nDESCRIPTION: This JavaScript snippet demonstrates how to manually load the Firebase JavaScript SDK in a Flutter web app by adding it explicitly to your `web/index.html` file inside the `window.addEventListener` callback. It uses dynamic imports to load the `firebase-firestore.js` and `firebase-analytics.js` modules from the Google static content (gstatic) domain.  This approach provides more control over the SDK loading process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.addEventListener('load', async function (ev) {\n  window.firebase_firestore = await import(\"https://www.gstatic.com/firebasejs/{{web_sdk_version}}/firebase-firestore.js\");\n  window.firebase_analytics = await import(\"https://www.gstatic.com/firebasejs/{{web_sdk_version}}/firebase-analytics.js\");\n  \n  _flutter.loader.loadEntrypoint().then(function (engineInitializer) {\n    // rest of the code\n```\n\n----------------------------------------\n\nTITLE: Monitor Upload Progress - Flutter\nDESCRIPTION: This code snippet shows how to monitor the progress of a file upload. It listens to the `snapshotEvents` stream of the `UploadTask` object. The listener function is called whenever the task's state changes, allowing you to track the progress, handle pauses, successes, cancellations, and errors. A switch statement is used to handle different `TaskState` values.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nmountainsRef.putFile(file).snapshotEvents.listen((taskSnapshot) {\n  switch (taskSnapshot.state) {\n    case TaskState.running:\n      // ...\n      break;\n    case TaskState.paused:\n      // ...\n      break;\n    case TaskState.success:\n      // ...\n      break;\n    case TaskState.canceled:\n      // ...\n      break;\n    case TaskState.error:\n      // ...\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Nested Data\nDESCRIPTION: This JSON example demonstrates a poorly nested data architecture for chat conversations. It shows how iterating through the 'chats' node to get conversation titles requires downloading a large amount of data, including all messages, which can be inefficient.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/structure-data.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // This is a poorly nested data architecture, because iterating the children\n  // of the \"chats\" node to get a list of conversation titles requires\n  // potentially downloading hundreds of megabytes of messages\n  \"chats\": {\n    \"one\": {\n      \"title\": \"Historical Tech Pioneers\",\n      \"messages\": {\n        \"m1\": { \"sender\": \"ghopper\", \"message\": \"Relay malfunction found. Cause: moth.\" },\n        \"m2\": { ... },\n        // a very long list of messages\n      }\n    },\n    \"two\": { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Append and Transform C++ Wrapper Sources (Core)\nDESCRIPTION: Creates a list of core C++ wrapper source files and prepends the wrapper root directory path to each element.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Option\nDESCRIPTION: This snippet defines the build configuration options, differentiating between single and multi-configuration generators. It sets the `CMAKE_BUILD_TYPE` to Debug if not already defined and defines possible build types.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Imported Location Properties For Debug and Release\nDESCRIPTION: This snippet iterates through a list of Firebase libraries and sets the `IMPORTED_LOCATION_DEBUG` and `IMPORTED_LOCATION_RELEASE` properties. It finds the debug location, replaces 'Debug' with 'Release' in the path to get the release location, and then applies these properties to the respective targets. This configures CMake to link against the correct library variant depending on the build configuration.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(FIREBASE_RELEASE_PATH_LIBS firebase_app firebase_auth firebase_storage firebase_firestore)\nforeach(firebase_lib IN ITEMS ${FIREBASE_RELEASE_PATH_LIBS})\n    get_target_property(firebase_lib_path ${firebase_lib} IMPORTED_LOCATION)\n    string(REPLACE \"Debug\" \"Release\" firebase_lib_release_path ${firebase_lib_path})\n    set_target_properties(${firebase_lib} PROPERTIES\n      IMPORTED_LOCATION_DEBUG \"${firebase_lib_path}\"\n      IMPORTED_LOCATION_RELEASE \"${firebase_lib_release_path}\"\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Create Custom Target for Flutter Assemble\nDESCRIPTION: Creates a custom target named 'flutter_assemble' that depends on the generated Flutter library and C++ wrapper source files. This target ensures that the Flutter library is built before any other targets that depend on it.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet includes the Flutter library and tool build rules by adding the Flutter managed directory as a subdirectory to the current project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Initializing Storage Reference - Flutter\nDESCRIPTION: This code initializes a Firebase Storage reference. It creates a reference to the root of the storage bucket and then creates child references to specific files, demonstrating how to build file paths within the storage system. The `assert` statements verify that the references point to different files despite having the same name.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Create a storage reference from our app\nfinal storageRef = FirebaseStorage.instance.ref();\n\n// Create a reference to \"mountains.jpg\"\nfinal mountainsRef = storageRef.child(\"mountains.jpg\");\n\n// Create a reference to 'images/mountains.jpg'\nfinal mountainImagesRef = storageRef.child(\"images/mountains.jpg\");\n\n// While the file names are the same, the references point to different files\nassert(mountainsRef.name == mountainImagesRef.name);\nassert(mountainsRef.fullPath != mountainImagesRef.fullPath);\n```\n\n----------------------------------------\n\nTITLE: Initialize Firebase with demo project ID\nDESCRIPTION: This code initializes Firebase using a demo project ID, allowing the app to connect to the Firebase Emulator Suite. This is useful for local development and testing.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait Firebase.initializeApp(\n  demoProjectId: \"demo-project-id\",\n);\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and variables that are used throughout the CMake build process. The generated config file is at `${EPHEMERAL_DIR}/generated_config.cmake`\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This function, `APPLY_STANDARD_SETTINGS`, applies standard compilation settings to a given target. It sets C++ standard version, compile options (warnings as errors, exception handling), and definitions (disabling exceptions and defining debug mode for Debug builds).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the location of the C++ client wrapper directory. This directory contains source files that provide a C++ interface to the Flutter engine. The variable `WRAPPER_ROOT` is set to the path. This allows for easy referencing of files and directories within the wrapper's file structure.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting target properties for symbol visibility\nDESCRIPTION: Sets target properties to hide symbols by default, reducing the chance of accidental conflicts between plugins.  Any symbols that should be exported should be explicitly exported with the FLUTTER_PLUGIN_EXPORT macro. Also defines preprocessor directives for the plugin implementation and enables firebase-cpp-sdk logging.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PUBLIC FLUTTER_PLUGIN_IMPL)\n# Enable firebase-cpp-sdk's platform logging api.\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE -DINTERNAL_EXPERIMENTAL=1)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet installs any bundled plugin libraries to the library directory within the install prefix.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Versioning Packages with Melos\nDESCRIPTION: This snippet uses Melos to automatically version packages and update changelogs. It's a crucial step in the release process, ensuring consistent versioning across the FlutterFire ecosystem. `melos version` updates package versions according to commit messages.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmelos version\n```\n\n----------------------------------------\n\nTITLE: Catch Asynchronous Errors\nDESCRIPTION: This snippet shows how to catch asynchronous errors that are not caught by the Flutter framework using `PlatformDispatcher.instance.onError`. It initializes Firebase, sets up the `FlutterError.onError` handler, and then defines an error handler for `PlatformDispatcher.instance.onError` that records errors using `FirebaseCrashlytics.instance.recordError`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n    WidgetsFlutterBinding.ensureInitialized();\n    await Firebase.initializeApp();\n    FlutterError.onError = (errorDetails) {\n      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);\n    };\n    // Pass all uncaught asynchronous errors that aren't handled by the Flutter framework to Crashlytics\n    PlatformDispatcher.instance.onError = (error, stack) {\n      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n      return true;\n    };\n    runApp(MyApp());\n\n}\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the specified C++ wrapper source files. It applies standard settings, sets position-independent code, sets C++ visibility preset to hidden, links to the Flutter interface library, sets include directories, and adds a dependency on the Flutter assemble target.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Handle Remote Notifications - iOS - Objective-C\nDESCRIPTION: This code snippet shows how to handle remote notifications in the AppDelegate.m file on iOS, enabling the export of delivery metrics to BigQuery. It overrides the didReceiveRemoteNotification method to call the Firebase Messaging extension helper. Dependencies include Firebase/Firebase.h.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_12\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"AppDelegate.h\"\n#import \"GeneratedPluginRegistrant.h\"\n#import <Firebase/Firebase.h>\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [GeneratedPluginRegistrant registerWithRegistry:self];\n  // Override point for customization after application launch.\n  return [super application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n- (void)application:(UIApplication *)application\n    didReceiveRemoteNotification:(NSDictionary *)userInfo\n          fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  [[FIRMessaging extensionHelper] exportDeliveryMetricsToBigQueryWithMessageInfo:userInfo];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: CMake disable Windows macros\nDESCRIPTION: This snippet disables the NOMINMAX Windows macro to prevent conflicts with standard C++ library functions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionCodeSettings for Email Link - Dart\nDESCRIPTION: This code snippet demonstrates how to construct the ActionCodeSettings object for configuring the email link. It sets the URL for redirection, specifies the iOS and Android bundle/package names, and indicates that the sign-in operation should be completed in the app.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/email-link-auth.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar acs = ActionCodeSettings(\n    // URL you want to redirect back to. The domain (www.example.com) for this\n    // URL must be whitelisted in the Firebase Console.\n    url: 'https://www.example.com/finishSignUp?cartId=1234',\n    // This must be true\n    handleCodeInApp: true,\n    iOSBundleId: 'com.example.ios',\n    androidPackageName: 'com.example.android',\n    // installIfNotAvailable\n    androidInstallApp: true,\n    // minimumVersion\n    androidMinimumVersion: '12');\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: This snippet disables the NOMINMAX Windows macro, preventing conflicts with the C++ standard library's min and max functions. This is a common practice when developing C++ applications for Windows.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name. It also sets the language to CXX.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings (Function)\nDESCRIPTION: This snippet defines a function called APPLY_STANDARD_SETTINGS to apply standard compilation settings to a target. This includes setting the C++ standard to 17, adding compiler options for warnings, and disabling exceptions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Bundled Libraries\nDESCRIPTION: Defines a list of absolute paths to libraries that should be bundled with the plugin. This is used to include prebuilt libraries or libraries created by an external build process, making them available at runtime.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(firebase_core_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings\nDESCRIPTION: This snippet applies a set of standard build settings to the application. The apply_standard_settings function is assumed to be defined elsewhere and handles common build configurations. This is a custom function, and its implementation is not shown.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Version Header\nDESCRIPTION: Configures the `plugin_version.h` header file using a template file (`plugin_version.h.in`). It substitutes variables in the template with actual values during the build process. The resulting header file is placed in the generated directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(plugin_version.h.in ${CMAKE_BINARY_DIR}/generated/firebase_storage/plugin_version.h)\ninclude_directories(${CMAKE_BINARY_DIR}/generated/)\n```\n\n----------------------------------------\n\nTITLE: Reading Version from pubspec.yaml\nDESCRIPTION: Reads the plugin version from the `pubspec.yaml` file using string manipulation. It searches for the `version:` entry, parses the version string, and sets the `PLUGIN_VERSION` variable. The version number is extracted for use in the plugin's build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Read version from pubspec.yaml\nfile(STRINGS \"../pubspec.yaml\" pubspec_content)\nforeach(line ${pubspec_content})\n  string(FIND ${line} \"version: \" has_version)\n  \n  if(\"${has_version}\" STREQUAL \"0\")\n    string(FIND ${line} \": \" version_start_pos)\n    math(EXPR version_start_pos \"${version_start_pos} + 2\")\n    string(LENGTH ${line} version_end_pos)\n    math(EXPR len \"${version_end_pos} - ${version_start_pos}\")\n    string(SUBSTRING ${line} ${version_start_pos} ${len} PLUGIN_VERSION)\n    break()\n  endif()\nendforeach(line)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin' and specifies the source files, include directories, and link libraries. Applies standard settings, sets position independent code and visibility properties, and adds a dependency on the flutter assembly target.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory within the install prefix.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Bumping Android gradle plugin & google-services versions\nDESCRIPTION: This snippet refers to updating the `com.android.tools.build` (Android Gradle Plugin - AGP) and `com.google.gms:google-services` versions in the project's `build.gradle` file.  This ensures compatibility with the latest Firebase services and build tools. The actual code modification is not shown here, but the intention is to update these version numbers.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_in_app_messaging/firebase_in_app_messaging/CHANGELOG.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ncom.android.tools.build:gradle:<version>\ncom.google.gms:google-services:<version>\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command to run the Flutter tool backend. This command generates the Flutter library, header files, and C++ wrapper sources. A phony output file is used to force the command to run every time.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Upload File from Device - Flutter\nDESCRIPTION: This snippet demonstrates how to upload a file from the device's local storage to Cloud Storage. It uses the `path_provider` package to get the application's documents directory, constructs the file path, and then uses the `putFile()` method to upload the file. A try-catch block handles potential `FirebaseException` errors.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nDirectory appDocDir = await getApplicationDocumentsDirectory();\nString filePath = '${appDocDir.absolute}/file-to-upload.png';\nFile file = File(filePath);\n\ntry {\n  await mountainsRef.putFile(file);\n} on firebase_core.FirebaseException catch (e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Library Path and Other Variables\nDESCRIPTION: This snippet sets the path to the Flutter engine's dynamic library and ICU data file as well as project build and AOT Library paths. These variables are set in the PARENT_SCOPE which makes them available to parent directories in the CMake project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, sets the project name, and explicitly opts in to modern CMake behaviors.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(firebase_core_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"firebase_core_example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target triggers the custom command to build these dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_plugin` that includes the core and plugin wrapper sources. It applies standard settings, sets properties for position-independent code and hidden C++ visibility, and links against the `flutter` interface library.  It sets the include directory and adds a dependency to `flutter_assemble`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory, which is the directory where support files are copied next to the executable. It uses TARGET_FILE_DIR to get the directory of the built binary.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Add Firebase plugin to Flutter project\nDESCRIPTION: This command adds a specific Firebase plugin to your Flutter project. Replace `<var>PLUGIN_NAME</var>` with the actual plugin name (e.g., `firebase_auth`).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/setup/_setup_main.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub add <var>PLUGIN_NAME</var>\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app`. This library includes the core and application-specific C++ wrapper source files. It applies standard settings, links against the `flutter` interface library, adds the wrapper include directory to the include path, and depends on flutter_assemble.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Triggering Events Programmatically with Firebase In-App Messaging (Dart)\nDESCRIPTION: This snippet shows how to trigger Firebase In-App Messaging events programmatically using the Dart SDK. This allows developers to manually trigger in-app messages based on custom application logic, outside of Google Analytics events. The eventName parameter is a string that matches an event ID defined in the Firebase In-App Messaging campaign composer.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_modify-message-behavior.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseInAppMessaging.instance.triggerEvent(\"eventName\");\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Includes\nDESCRIPTION: These commands link necessary libraries and set include directories for the executable target. The `target_link_libraries` command links libraries such as `flutter`, `flutter_wrapper_app`, and `dwmapi.lib`. The `target_include_directories` command adds the source directory to the include path, allowing the compiler to find header files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_app` that includes the core and application wrapper sources. It applies standard settings and links against the `flutter` interface library. It also sets the include directory and adds a dependency to `flutter_assemble`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Handling Code Auto Retrieval Timeout\nDESCRIPTION: This snippet demonstrates how to handle the `codeAutoRetrievalTimeout` callback on Android devices that support automatic SMS code resolution. The callback is triggered if the device doesn't automatically resolve the SMS message within a certain timeframe. The snippet also shows how to customize the timeout duration.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/phone-auth.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  timeout: const Duration(seconds: 60),\n  codeAutoRetrievalTimeout: (String verificationId) {\n    // Auto-resolution timed out...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper Plugin Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_plugin`. This library contains the C++ wrapper code required for plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Version Header File\nDESCRIPTION: This snippet configures a header file named `plugin_version.h` using a template file `plugin_version.h.in`. It takes variables from the CMake context (such as the extracted `PLUGIN_VERSION`) and uses them to generate the header file in the build directory. This header file is included in the plugin's source code to access the version information.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(plugin_version.h.in ${CMAKE_BINARY_DIR}/generated/cloud_firestore/plugin_version.h)\ninclude_directories(${CMAKE_BINARY_DIR}/generated/)\n```\n\n----------------------------------------\n\nTITLE: Defining the application executable\nDESCRIPTION: This snippet defines the executable target for the application, including the source files to be compiled. The BINARY_NAME variable, defined in the top-level CMakeLists.txt, is used as the name of the executable. It lists the source files required for the application including generated plugin registrant and resource files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting UNUserNotificationCenterDelegate in AppDelegate.m (iOS)\nDESCRIPTION: This snippet demonstrates how to set the `UNUserNotificationCenterDelegate` in the iOS project's `AppDelegate.m` file when method swizzling is disabled.  This is needed to ensure the plugin receives notifications when other plugins also specify a delegate. Requires iOS version 10.0 or greater.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_messaging/firebase_messaging/CHANGELOG.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif (@available(iOS 10.0, *)) {\n  [UNUserNotificationCenter currentNotificationCenter].delegate = (id<UNUserNotificationCenterDelegate>) self;\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example of Reference Manipulation in Dart\nDESCRIPTION: A comprehensive code showcasing creating references, manipulating paths and filenames, and navigating the Firebase Storage hierarchy. Demonstrates using variables within paths. Dependencies: Firebase Storage SDK, a valid Firebase Storage bucket.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/create-reference.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Points to the root reference\nfinal storageRef = FirebaseStorage.instance.ref();\n\n// Points to \"images\"\nReference? imagesRef = storageRef.child(\"images\");\n\n// Points to \"images/space.jpg\"\n// Note that you can use variables to create child values\nfinal fileName = \"space.jpg\";\nfinal spaceRef = imagesRef.child(fileName);\n\n// File path is \"images/space.jpg\"\nfinal path = spaceRef.fullPath;\n\n// File name is \"space.jpg\"\nfinal name = spaceRef.name;\n\n// Points to \"images\"\nimagesRef = spaceRef.parent;\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Core)\nDESCRIPTION: Appends a list of C++ source files to the `CPP_WRAPPER_SOURCES_CORE` variable. These source files contain the core C++ wrapper code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Directory to Headers\nDESCRIPTION: Prepends the `EPHEMERAL_DIR` variable to each element in the `FLUTTER_LIBRARY_HEADERS` list. This ensures that the header files are found in the correct location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Formatting Code\nDESCRIPTION: This command formats the code using Melos. It ensures code consistency and adheres to the project's style guide.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmelos format-ci\n```\n\n----------------------------------------\n\nTITLE: Appending Core Wrapper Sources\nDESCRIPTION: This snippet appends core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` list. These sources implement core functionality for interacting with the Flutter engine. Then the `WRAPPER_ROOT` path is prepended to each source file in the list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Flutter project - Bash\nDESCRIPTION: This command rebuilds the Flutter project after adding the Firebase In-App Messaging dependency. This ensures that the new dependency is properly integrated into the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Revoking Apple Auth Token with Authorization Code - Dart\nDESCRIPTION: This code snippet demonstrates how to revoke an Apple auth token using the `revokeTokenWithAuthorizationCode()` API in Flutter after a successful sign-in. It retrieves the authorization code and then uses it to revoke the token.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_auth/firebase_auth.dart';\n\nFuture<UserCredential> signInWithApple() async {\n  final appleProvider = AppleAuthProvider();\n\n  UserCredential userCredential = await FirebaseAuth.instance.signInWithPopup(appleProvider);\n  // Keep the authorization code returned from Apple platforms\n  String? authCode = userCredential.additionalUserInfo?.authorizationCode;\n  // Revoke Apple auth token\n  await FirebaseAuth.instance.revokeTokenWithAuthorizationCode(authCode!);\n}\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Plugin)\nDESCRIPTION: Appends a list of C++ wrapper source files specific to plugins to the `CPP_WRAPPER_SOURCES_PLUGIN` variable. These source files handle the registration of plugins with the Flutter engine. The `list(APPEND ...)` command is used to add the source files to the list, and then `list(TRANSFORM ...)` prepends the wrapper root directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Set Low Minimum Fetch Interval (Development) - Dart\nDESCRIPTION: This configures a low minimum fetch interval for development purposes, allowing rapid iteration. Caution: This setting is not intended for production, as it can lead to exceeding service-side quota limits if used with a large number of users.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/remote-config/_get-started.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nfinal remoteConfig = FirebaseRemoteConfig.instance;\nawait remoteConfig.setConfigSettings(RemoteConfigSettings(\n    fetchTimeout: const Duration(minutes: 1),\n    minimumFetchInterval: const Duration(minutes: 5),\n));\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the specified C++ wrapper source files. It applies standard settings, links to the Flutter interface library, sets include directories, and adds a dependency on the Flutter assemble target.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet determines the build configuration (Debug, Profile, Release) based on whether CMake is in multi-configuration mode or not. If not in multi-configuration mode, it sets the `CMAKE_BUILD_TYPE` variable and defines available build types.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable that will be created for the application. Changing this variable will change the on-disk name of the final application binary.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform Fallback\nDESCRIPTION: Sets a fallback value for the `FLUTTER_TARGET_PLATFORM` variable if it is not already defined. This is used to ensure that the build process has a default target platform in case the Flutter tool does not provide one. The default target platform is set to \"windows-x64\".\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Downloading Firebase SDK\nDESCRIPTION: This block conditionally downloads the Firebase C++ SDK if the specified version is not already present or if the existing version doesn't match. It constructs the download URL, downloads the SDK as a zip file, and extracts its contents to a specified directory. Error handling ensures that a failed download will stop the build.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(existing_version VERSION_EQUAL FIREBASE_SDK_VERSION)\n    message(STATUS \"Found Firebase SDK version ${existing_version}\")\n    set(FIREBASE_CPP_SDK_DIR $ENV{FIREBASE_CPP_SDK_DIR})\nelse()\n    set(firebase_sdk_url \"https://dl.google.com/firebase/sdk/cpp/firebase_cpp_sdk_windows_${FIREBASE_SDK_VERSION}.zip\")\n    set(firebase_sdk_filename \"${CMAKE_BINARY_DIR}/firebase_cpp_sdk_windows_${FIREBASE_SDK_VERSION}.zip\")\n    set(extracted_path \"${CMAKE_BINARY_DIR}/extracted\")\n    if(NOT EXISTS ${firebase_sdk_filename})\n        file(DOWNLOAD ${firebase_sdk_url} ${firebase_sdk_filename}\n             SHOW_PROGRESS\n             STATUS download_status\n             LOG download_log)\n        list(GET download_status 0 status_code)\n        if(NOT status_code EQUAL 0)\n            message(FATAL_ERROR \"Download failed: ${download_log}\")\n        endif()\n    else()\n        message(STATUS \"Using cached Firebase SDK zip file\")\n    endif()\n\n    if(NOT EXISTS ${extracted_path})\n        file(MAKE_DIRECTORY ${extracted_path})\n        file(ARCHIVE_EXTRACT INPUT ${firebase_sdk_filename}\n             DESTINATION ${extracted_path})\n    else()\n        message(STATUS \"Using cached extracted Firebase SDK\")\n    endif()\n    set(FIREBASE_CPP_SDK_DIR \"${extracted_path}/firebase_cpp_sdk_windows\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Asset Directory\nDESCRIPTION: This snippet removes and re-copies the entire assets directory on each build to avoid stale files from previous installations. The assets are located inside flutter_assets directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including code snippets with includecode\nDESCRIPTION: This snippet demonstrates how to include a code snippet from a standalone Dart file using the custom Jinja tag `includecode`. The `github_path` and `region_tag` attributes specify the file and the code region to include. The `adjust_indentation` attribute specifies whether to adjust the indentation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/README.md#_snippet_2\n\nLANGUAGE: Jinja\nCODE:\n```\n{% includecode\n   github_path=\"organization/repository/path/to/file\"\n   region_tag=\"tag_name\" %}\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application. It relies on the flutter/generated_plugins.cmake file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines the installation directories for the application. It sets the build bundle directory, makes the install step default, and defines the installation prefix, data directory, and library directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Mock Interface for Pigeon Tests\nDESCRIPTION: This code snippet demonstrates how to mock the interface created by Pigeon for testing purposes. It utilizes the TestNAMEHostApi.setup() method with a MockNAMEApp() instance to simulate the native platform behavior.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTestNAMEHostApi.setup(MockNAMEApp());\n```\n\n----------------------------------------\n\nTITLE: iOS FCM Payload JSON\nDESCRIPTION: This JSON code defines the structure of an FCM payload for iOS.  It utilizes `title-loc-key` and `loc-key` within the APNs payload to specify the localized title and body of the notification, referencing the strings defined in the `Localizable.strings` files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"apns\": {\n     \"payload\": {\n       \"alert\": {\n         \"title-loc-key\": \"NOTIFICATION_TITLE\",\n         \"loc-key\": \"NOTIFICATION_MESSAGE\"\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Target Dependencies and Includes\nDESCRIPTION: Sets include directories and library dependencies for the plugin library. It specifies dependencies on other Firebase libraries (`firebase_core_plugin`, `firebase_storage`) and adds include directories for the plugin's header files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Source include directories and library dependencies. Add any plugin-specific\n# dependencies here.\nset(MSVC_RUNTIME_MODE MD)\nset(firebase_libs firebase_core_plugin firebase_storage)\n#set(ADDITIONAL_LIBS advapi32 ws2_32 crypt32 rpcrt4 ole32)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE \"${firebase_libs}\" \"${ADDITIONAL_LIBS}\")\n\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version 2.4.1 via CLI\nDESCRIPTION: This code snippet demonstrates how to install FlutterFire BoM version 2.4.1 using the FlutterFire CLI tool. The command `flutterfire install 2.4.1` updates the project configuration to use the specific BoM version. Ensure that FlutterFire CLI is installed and configured correctly before running this command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.4.1\n```\n\n----------------------------------------\n\nTITLE: Set Default Parameter Values - Dart\nDESCRIPTION: This code sets default parameter values in the Remote Config object. These default values are used before the app connects to the Remote Config backend or if no values are set in the backend.  Important: Do not store confidential information in Remote Config parameter keys or values.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/remote-config/_get-started.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nawait remoteConfig.setDefaults(const {\n    \"example_param_1\": 42,\n    \"example_param_2\": 3.14159,\n    \"example_param_3\": true,\n    \"example_param_4\": \"Hello, world!\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Library\nDESCRIPTION: Defines the plugin library using the `add_library` command. It specifies the name of the library (PLUGIN_NAME), its type (STATIC), and the source files to be included in the library. Also includes generated plugin_version.h\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the plugin library target. Its name must not be changed (see comment\n# on PLUGIN_NAME above).\nadd_library(${PLUGIN_NAME} STATIC\n  \"include/firebase_core/firebase_core_plugin_c_api.h\"\n  \"firebase_core_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n  ${CMAKE_BINARY_DIR}/generated/firebase_core/plugin_version.h\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project name, and sets the name of the executable. It also configures modern CMake behaviors and defines build configuration options (Debug, Profile, Release).\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(cloud_firestore_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"cloud_firestore_example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding plugin library\nDESCRIPTION: Defines the plugin library target. It specifies the source files that should be compiled and linked to create the library. The library is created as a static library. Also includes generated header files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PLUGIN_NAME} STATIC\n  \"include/firebase_auth/firebase_auth_plugin_c_api.h\"\n  \"firebase_auth_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n  ${CMAKE_BINARY_DIR}/generated/firebase_auth/plugin_version.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Source Files\nDESCRIPTION: Appends the list of source files to be compiled for the plugin. These include C++ source and header files, as well as generated message files. The files listed contribute directly to the functionality of the plugin.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Any new source files that you add to the plugin should be added here.\nlist(APPEND PLUGIN_SOURCES\n  \"firebase_storage_plugin.cpp\"\n  \"firebase_storage_plugin.h\"\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting FirebaseAppDelegateProxyEnabled in Info.plist (iOS)\nDESCRIPTION: This snippet shows how to disable Firebase AppDelegate proxying by setting the `FirebaseAppDelegateProxyEnabled` key to `false` in the iOS project's `Info.plist` file. This is necessary when using `firebase_messaging` with other notification plugins to prevent conflicts.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_messaging/firebase_messaging/CHANGELOG.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>FirebaseAppDelegateProxyEnabled</key>\n  <false/>\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: This snippet sets the installation directories for data and libraries within the install prefix. It defines where the data files (assets, ICU data) and libraries will be installed.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Checking Existing Firebase SDK Version\nDESCRIPTION: This snippet attempts to read the Firebase SDK version from an existing installation (if available, based on environment variable FIREBASE_CPP_SDK_DIR). It parses the version numbers using regex from `firebase/version.h` and stores them for comparison. If not found, a later step downloads the required SDK.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXISTS $ENV{FIREBASE_CPP_SDK_DIR}/include/firebase/version.h)\n    file(READ \"$ENV{FIREBASE_CPP_SDK_DIR}/include/firebase/version.h\" existing_version)\n\n    string(REGEX MATCH \"FIREBASE_VERSION_MAJOR ([0-9]*)\" _ ${existing_version})\n    set(existing_version_major ${CMAKE_MATCH_1})\n\n    string(REGEX MATCH \"FIREBASE_VERSION_MINOR ([0-9]*)\" _ ${existing_version})\n    set(existing_version_minor ${CMAKE_MATCH_1})\n\n    string(REGEX MATCH \"FIREBASE_VERSION_REVISION ([0-9]*)\" _ ${existing_version})\n    set(existing_version_revision ${CMAKE_MATCH_1})\n\n    set(existing_version \"${existing_version_major}.${existing_version_minor}.${existing_version_revision}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a target. It sets the C++ standard to C++17, enables warnings, treats warnings as errors, and disables exceptions. It also defines a debug-specific preprocessor macro.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for the project, ensuring compatibility with Unicode character sets.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated configuration file from the ephemeral directory. This file is created by the Flutter tool and contains settings specific to the current build. It uses the `include` command to process the contents of `generated_config.cmake`. The path to the file is constructed using the `EPHEMERAL_DIR` variable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags and Commits\nDESCRIPTION: This snippet pushes the auto commits and tags to the remote repository after graduating the packages.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ngit push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets\nDESCRIPTION: This snippet removes the assets directory from the installation directory and then reinstalls it with the latest files.  This ensures that there are no stale files from previous builds.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app' and specifies the source files, include directories, and link libraries. Applies standard settings and adds a dependency on flutter assembly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for all projects. This ensures proper handling of international characters.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Data Files\nDESCRIPTION: These `install` commands specify how the executable, ICU data file, and Flutter library are installed to the designated directories.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Library\nDESCRIPTION: This snippet defines the plugin library as a static library. It specifies the source files to be included in the library, including the plugin's C API, implementation files, and the generated version header. The library is named based on the `PLUGIN_NAME` variable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PLUGIN_NAME} STATIC\n  \"include/cloud_firestore/cloud_firestore_plugin_c_api.h\"\n  \"cloud_firestore_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n  ${CMAKE_BINARY_DIR}/generated/cloud_firestore/plugin_version.h\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to authStateChanges() - Dart\nDESCRIPTION: This code snippet demonstrates how to listen for authentication state changes using `authStateChanges()` method. It prints whether the user is signed in or signed out to the console based on the authentication state.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/start.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth.instance\n  .authStateChanges()\n  .listen((User? user) {\n    if (user == null) {\n      print('User is currently signed out!');\n    } else {\n      print('User is signed in!');\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Symbol Visibility\nDESCRIPTION: This snippet configures target properties to hide symbols by default.  This helps prevent accidental conflicts between plugins. Symbols that need to be exported must be explicitly exported using the `FLUTTER_PLUGIN_EXPORT` macro.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PUBLIC FLUTTER_PLUGIN_IMPL)\n```\n\n----------------------------------------\n\nTITLE: Accepting Num Value Increment - Firebase Realtime Database\nDESCRIPTION: The `ServerValue.increment()` method now accepts a `num` type value, allowing for both integer and double increments in the Firebase Realtime Database. This resolves issue #9101 by broadening support for numerical data types.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_database/firebase_database/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: This command disables the `NOMINMAX` Windows macro, which prevents collisions with standard C++ functions like `min` and `max`. This is a common practice in C++ projects that target Windows to avoid naming conflicts.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User in Dart\nDESCRIPTION: This code snippet demonstrates how to sign out the currently signed-in user using Firebase Authentication in a Flutter application. It uses the `signOut()` method of the `FirebaseAuth` instance to sign out the user. No input or output parameters are taken.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/password-auth.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nawait FirebaseAuth.instance.signOut();\n```\n\n----------------------------------------\n\nTITLE: Adding GoogleTest Dependency\nDESCRIPTION: This snippet adds the GoogleTest dependency to the project using FetchContent.  It declares the dependency, prevents overriding parent project settings, and disables installation of GoogleTest.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\nFetchContent_MakeAvailable(googletest)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: Applies a set of standard build settings to the executable target. This part can be removed for applications that require different build settings.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: This snippet creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target triggers the execution of the custom command defined in the previous snippet. This target ensures that flutter build artifacts are assembled before other parts of the build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Reading version from pubspec.yaml\nDESCRIPTION: Reads the plugin version from the `pubspec.yaml` file. It searches for the `version:` key and extracts the corresponding value. The version is then stored in the `PLUGIN_VERSION` variable, which will then be used in configuration files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfile(STRINGS \"../pubspec.yaml\" pubspec_content)\nforeach(line ${pubspec_content})\n  string(FIND ${line} \"version: \" has_version)\n  \n  if(\"${has_version}\" STREQUAL \"0\")\n    string(FIND ${line} \": \" version_start_pos)\n    math(EXPR version_start_pos \"${version_start_pos} + 2\")\n    string(LENGTH ${line} version_end_pos)\n    math(EXPR len \"${version_end_pos} - ${version_start_pos}\")\n    string(SUBSTRING ${line} ${version_start_pos} ${len} PLUGIN_VERSION)\n    break()\n  endif()\nendforeach(line)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions for Version\nDESCRIPTION: These commands add preprocessor definitions for the build version. They define constants like `FLUTTER_VERSION`, `FLUTTER_VERSION_MAJOR`, etc., which can be used within the C++ code to access the application's version information at runtime.  The PRIVATE keyword ensures these definitions are only visible within the target.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Library\nDESCRIPTION: Defines the plugin library as a static library. It specifies the source files, include directories, and the generated plugin version header file. The library name must not be changed, as stated earlier in the file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the plugin library target. Its name must not be changed (see comment\n# on PLUGIN_NAME above).\nadd_library(${PLUGIN_NAME} STATIC\n  \"include/firebase_storage/firebase_storage_plugin_c_api.h\"\n  \"firebase_storage_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n  ${CMAKE_BINARY_DIR}/generated/firebase_storage/plugin_version.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM with CLI\nDESCRIPTION: This command installs a specific FlutterFire Bill of Materials (BoM) version using the FlutterFire CLI. Replace `2.3.0` with the desired BoM version to ensure compatibility across Firebase plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.3.0\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Defines the executable target and specifies the source files to be included in the build. BINARY_NAME is defined in the top-level CMakeLists.txt. Any new source files should be added to this list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting File Metadata Property in Cloud Storage in Flutter\nDESCRIPTION: This code snippet demonstrates how to delete a writable metadata property by setting the corresponding value to `null` when updating file metadata in Cloud Storage using Flutter. It specifically shows deleting the cacheControl property.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/file-metadata.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Delete the cacheControl property\nfinal newMetadata = SettableMetadata(cacheControl: null);\nfinal metadata = await forestRef.updateMetadata(newMetadata);\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the absolute path of the `ephemeral` directory, located in the project's source directory. This directory likely contains generated files and configurations used during the build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: Defines the project name, which is used as a base for other configurations and targets. In this case, the project name is set to \"firebase_core\".\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Project-level configuration.\nset(PROJECT_NAME \"firebase_core\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet defines the `WRAPPER_ROOT` variable, which specifies the location of the C++ client wrapper source code. This wrapper provides an interface between the Flutter engine and the application code. It is located at `${EPHEMERAL_DIR}/cpp_client_wrapper`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Get Download URL - Flutter\nDESCRIPTION: This snippet shows how to retrieve the download URL of a file stored in Cloud Storage. It calls the `getDownloadURL()` method on the `Reference` object, which returns a URL that can be used to access the file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/upload-files.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait mountainsRef.getDownloadURL();\n```\n\n----------------------------------------\n\nTITLE: Page metadata header\nDESCRIPTION: This snippet demonstrates the non-standard metadata declarations used by the internal publishing system at the beginning of every standalone page. These declarations are not editable by contributors, but they are present on every standalone page.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nProject: /docs/_project.yaml\nBook: /docs/_book.yaml\n```\n\n----------------------------------------\n\nTITLE: JSON User Profile Example\nDESCRIPTION: This JSON structure represents a typical user profile with name and contacts.  It shows how data is stored under user IDs in the 'users' node of the Firebase Realtime Database.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/structure-data.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"users\": {\n    \"alovelace\": {\n      \"name\": \"Ada Lovelace\",\n      \"contacts\": { \"ghopper\": true },\n    },\n    \"ghopper\": { ... },\n    \"eclarke\": { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Database Instance for Secondary App - Dart\nDESCRIPTION: This code snippet initializes a Firebase Realtime Database instance associated with a secondary Firebase App. It uses the `instanceFor` method, providing the `FirebaseApp` instance to connect to the specified application's database.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/start.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseApp secondaryApp = Firebase.app('SecondaryApp');\nFirebaseDatabase database = FirebaseDatabase.instanceFor(app: secondaryApp);\n```\n\n----------------------------------------\n\nTITLE: Listing plugin source files\nDESCRIPTION: Creates a list of source files that are part of the plugin. These files will be compiled and linked into the plugin library. Add new files to this list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND PLUGIN_SOURCES\n  \"firebase_auth_plugin.cpp\"\n  \"firebase_auth_plugin.h\"\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: CMake add dependencies\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that Flutter-related tasks are executed as part of the build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library to the data directory for Profile and Release builds. This library contains precompiled Dart code for improved performance.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the build.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Project-level Gradle dependencies for Crashlytics - Android\nDESCRIPTION: This snippet shows the required dependencies added to the project-level `build.gradle` file. These dependencies are essential for the Crashlytics Gradle plugin to function correctly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_deobfuscated.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    // ... other dependencies\n\n    classpath 'com.google.gms:google-services:4.3.5'\n    <strong>classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'</strong>\n  }\n```\n\n----------------------------------------\n\nTITLE: Appending Plugin Sources\nDESCRIPTION: Lists all source files contributing to the plugin. All source files need to be declared here to be compiled and linked into the final plugin library.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Any new source files that you add to the plugin should be added here.\nlist(APPEND PLUGIN_SOURCES\n  \"firebase_core_plugin.cpp\"\n  \"firebase_core_plugin.h\"\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Project Configuration\nDESCRIPTION: Configures the project by setting the project name, enabling C++ language support, and setting the plugin name. The plugin name must not be changed because it is used during build generation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Project-level configuration.\nset(PROJECT_NAME \"flutterfire_storage\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"firebase_storage_plugin\")\n```\n\n----------------------------------------\n\nTITLE: CMake link libraries and include directories\nDESCRIPTION: This snippet links the executable target with required libraries (flutter, flutter_wrapper_app, dwmapi.lib) and specifies the source directory as an include directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter' and specifies the include directories and link libraries. This allows other targets to link against the Flutter library.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Project\nDESCRIPTION: Sets the minimum required CMake version and defines the project name and language. This initializes the CMake project for the Flutter runner.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Removing Data on Disconnect\nDESCRIPTION: Removes data from the Firebase Realtime Database when the client disconnects, using the `onDisconnect` primitive. Wrapped in a try-catch block for error handling.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n    await presenceRef.onDisconnect().remove();\n} catch (error) {\n    debugPrint(\"Could not establish onDisconnect event: $error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: Applies pre-defined standard build settings to the plugin library. This simplifies configuration and ensures consistency across plugins. It can be removed if custom settings are required.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply a standard set of build settings that are configured in the\n# application-level CMakeLists.txt. This can be removed for plugins that want\n# full control over build settings.\napply_standard_settings(${PLUGIN_NAME})\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Signed-In User - Dart\nDESCRIPTION: This snippet demonstrates how to access the current signed-in user using the `currentUser` property of the `FirebaseAuth` instance. It's important to check if `currentUser` is not null before accessing its properties.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nif (FirebaseAuth.instance.currentUser != null) {\n  print(FirebaseAuth.instance.currentUser?.uid);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library to the data directory for Profile and Release builds.  This provides performance optimizations by pre-compiling the Dart code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: This command defines the project named 'runner' and specifies that it uses C++ (CXX) as one of its languages. This is essential for setting up the CMake project structure and enabling C++ compilation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Fallback Target Platform\nDESCRIPTION: Defines a fallback value for the 'FLUTTER_TARGET_PLATFORM' variable if it's not already defined. This is used to specify the target platform for the build, defaulting to 'windows-x64'.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using includecode to include dart snippet\nDESCRIPTION: This snippet shows how to use the `includecode` tag to include a dart snippet based on `github_path` and `region_tag`. The indentation is automatically adjusted.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/README.md#_snippet_4\n\nLANGUAGE: Jinja\nCODE:\n```\n{% includecode\n   github_path=\"firebase/snippets-flutter/packages/firebase_snippets_app/lib/snippets/firestore.dart\"\n   region_tag=\"add_data_add_a_document\"\n   adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Publishing to Pub.dev with Melos\nDESCRIPTION: This snippet executes the melos publish command without the dry-run option, publishing the packages to Pub.dev.  This is the final step in the release process, making the new versions available to users.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmelos publish --no-dry-run\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: Adds a dependency on the flutter_assemble target, ensuring that Flutter's assemble task is executed before building the executable. This step must not be removed as it is critical to build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Project Dependencies with Melos\nDESCRIPTION: This command bootstraps the project's dependencies using Melos. It locally links all dependencies within the project, eliminating the need for manual dependency overrides. It must be run at the root of the cloned repository.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos bootstrap\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries to the library directory within the installation prefix, if any are defined. This ensures that the plugins are available at runtime.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: Applies a standard set of build settings, presumably defined in a separate CMake file. This provides a consistent build environment across different plugins within the Flutterfire project. This can be removed if more control is required.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply a standard set of build settings that are configured in the\n# application-level CMakeLists.txt. This can be removed for plugins that want\n# full control over build settings.\napply_standard_settings(${PLUGIN_NAME})\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes the CMake configuration file generated by the Flutter tool. This file contains settings specific to the Flutter build.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Disable FCM Auto-Initialization - iOS\nDESCRIPTION: This XML snippet shows how to disable Firebase Cloud Messaging (FCM) auto-initialization on iOS by adding a metadata value to your `Info.plist` file. This is useful for preventing the library from automatically generating a token and uploading data to Firebase at build time.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/client.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\nFirebaseMessagingAutoInitEnabled = NO\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a target. It sets the C++ standard, enables warnings, and disables exceptions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running Web E2E Tests for Cloud Firestore Plugin\nDESCRIPTION: This command runs end-to-end (e2e) tests for the cloud_firestore plugin in a web environment using Melos. It requires ChromeDriver to be running.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmelos run test:e2e:web:cloud_firestore\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM with CLI\nDESCRIPTION: This command installs a specific FlutterFire Bill of Materials (BoM) version using the FlutterFire CLI. Replace `2.2.0` with the desired BoM version to ensure compatibility across Firebase plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.2.0\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and defining the project name. It specifies that the project uses CXX (C++) as a language.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Append and Transform C++ Wrapper Sources (Plugin)\nDESCRIPTION: Appends plugin-specific C++ wrapper sources to a list and prepends the wrapper root directory path.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet removes and re-copies the assets directory on each build to avoid stale files. It ensures that the latest assets are always included in the installation.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Append and Transform C++ Wrapper Sources (App)\nDESCRIPTION: Creates a list of app C++ wrapper source files and prepends the wrapper root directory path to each element.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support in the project. It uses the `add_definitions` command to define `UNICODE` and `_UNICODE`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application. It uses the `flutter/generated_plugins.cmake` file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI.  The version number specifies the BoM to install. The command is executed in a terminal environment.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.9.1\n```\n\n----------------------------------------\n\nTITLE: Activating Melos Package Globally\nDESCRIPTION: This command globally activates the Melos package, which is used for managing the FlutterFire project's dependencies. It is a prerequisite for setting up the development environment.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate melos\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake features used in the script are supported by the CMake version installed on the system.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the directory containing generated files. This is used as the base path for other file paths.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper source files. This target is used to trigger the assembly of the Flutter build artifacts. This depends on the outputs from `add_custom_command`.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining bundled libraries\nDESCRIPTION: Defines a list of absolute paths to libraries that should be bundled with the plugin. This list could contain prebuilt libraries, or libraries created by an external build triggered from this build file. The list is currently empty.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(firebase_auth_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Wrapper Root to Core Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` variable to each element in the `CPP_WRAPPER_SOURCES_CORE` list. This ensures that the source files are found in the correct location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required CMake version for the build. This ensures compatibility with the CMake features used in the build script. It is set to version 3.14 to prevent compile failures for some plugin users, as requested in the comment.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Running Example Application\nDESCRIPTION: This command navigates to the example directory of a FlutterFire plugin and runs the Flutter application. It is used to test and showcase the functionality of the plugin.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/firebase_auth/firebase_auth/example\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Opting into Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. This ensures compatibility and avoids deprecated features.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Set Wrapper Root Directory\nDESCRIPTION: Sets the 'WRAPPER_ROOT' variable to the path of the C++ client wrapper directory. This directory contains the C++ code that interacts with the Flutter engine.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Add Firebase Dynamic Links Plugin - Flutter\nDESCRIPTION: This command adds the firebase_dynamic_links plugin to your Flutter project.  It is a necessary step to use Firebase Dynamic Links within your Flutter application. Run this from the root directory of your Flutter project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/dynamic-links/create.md#_snippet_0\n\nLANGUAGE: Flutter\nCODE:\n```\nflutter pub add firebase_dynamic_links\n```\n\n----------------------------------------\n\nTITLE: Fetching all Tags and Commits\nDESCRIPTION: This snippet fetches all tags and commits from the remote repository. This is important to ensure local repository is up to date for tasks such as graduating packages.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter as Subdirectory\nDESCRIPTION: This snippet adds the Flutter directory as a subdirectory to the CMake project. This allows the CMake project to build and include Flutter-related targets.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting plugin name\nDESCRIPTION: Defines the name of the plugin. This value is critical for generating builds. It must not be changed, because it is used when generating builds using the plugin.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUGIN_NAME \"firebase_auth_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Run Flutter project after configuration\nDESCRIPTION: This command rebuilds the Flutter project after Firebase configuration, applying the new settings and plugins. It ensures the application reflects the changes made during the configuration process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_get-started.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper source files. This target ensures that the Flutter library and wrapper code are assembled before other targets that depend on them.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to Remote Repository\nDESCRIPTION: This snippet pushes all local tags to the remote repository.  This is important to make the version tags available for future reference and dependency management.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: CMake project initialization\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project named 'runner' with support for CXX.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Sending Email Verification to a User - Dart\nDESCRIPTION: This code snippet demonstrates how to send an email verification to a user using the `sendEmailVerification()` method. You can customize the email template in the Firebase console.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nawait user?.sendEmailVerification();\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project. This includes the necessary build rules for Flutter's framework.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Dry Run Publishing with Melos\nDESCRIPTION: This snippet executes a dry run of the `melos publish` command. This allows you to confirm that the packages are publishable to pub.dev without actually publishing them.  It validates package metadata and dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmelos publish\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Include Directories\nDESCRIPTION: Adds dependency libraries and include directories to the executable target. Includes standard flutter libraries and defines the project source directory. `dwmapi.lib` is linked for desktop window management functionalities.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and configures its include directories and link libraries. The interface library is used to propagate build settings to dependent targets.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14. This is crucial for compatibility, and increasing the version may cause compilation issues for some plugin users.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet creates a list of header files required for the Flutter library. It then prepends the `EPHEMERAL_DIR` to each header file path. These headers are essential for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name. It also declares the project language as CXX.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(tests LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Paths\nDESCRIPTION: Defines and publishes variables for the Flutter library and related files.  'FLUTTER_LIBRARY' points to the flutter_windows.dll. 'FLUTTER_ICU_DATA_FILE' specifies icudtl.dat. 'PROJECT_BUILD_DIR' indicates where the build artifacts will be placed and 'AOT_LIBRARY' specifies the path to the AOT compiled app.so.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions for version\nDESCRIPTION: This snippet adds preprocessor definitions to the build, making the Flutter version information available in the code. It defines macros for the full version string, major version, minor version, patch version, and build number. These are used during compilation and are accessed as constants within the application's code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the directory where the built application bundle will be placed.  It is set to the same directory as the executable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Directory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory to the CMake project. The runner directory typically contains the application's main source code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. It's used for compatibility.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter assembly dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter assets are built before the application is linked. This is essential to bundle the Flutter Dart code and assets into the application package.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Rebuild Flutter Application\nDESCRIPTION: This command rebuilds your Flutter application after installing the Firebase Analytics plugin. This step is necessary for the changes to take effect.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/analytics/_get-started.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Sending Password Reset Email - Dart\nDESCRIPTION: This code snippet demonstrates sending a password reset email to a user using the `sendPasswordResetEmail()` method. The email address of the user is required.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nFirebaseAuth.instance\n    .sendPasswordResetEmail(email: \"user@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version\nDESCRIPTION: This command installs a specific FlutterFire BoM version using the FlutterFire CLI. The version number should be specified as an argument to the install command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.6.0\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version\nDESCRIPTION: This command installs a specific FlutterFire BoM version using the FlutterFire CLI. The version number should be specified as an argument to the install command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.7.0\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulator\nDESCRIPTION: This command navigates to the scripts directory and executes a Melos script to start the Firebase Emulator. It is used to emulate Firebase services for testing purposes.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd .github/workflows/scripts\nmelos run firebase:emulator\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase In-App Messaging - Dart\nDESCRIPTION: This import statement brings the Firebase In-App Messaging plugin into your Dart code, allowing you to use its functionalities. It's essential for accessing the features required to handle in-app messages.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_in_app_messaging/firebase_in_app_messaging.dart';\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: This section configures the installation process, including setting the install prefix, installing the binary, data files, and AOT library. It also handles the copying of assets and plugins into the install directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the build system has the necessary features and capabilities to correctly process the CMakeLists.txt file. It sets the minimum CMake version to 3.14.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Append and Transform C++ Wrapper Sources (Plugin)\nDESCRIPTION: Creates a list of plugin C++ wrapper source files and prepends the wrapper root directory path to each element.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing addlicense\nDESCRIPTION: This command installs the addlicense tool, which is used to add the license header to files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/google/addlicense@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings\nDESCRIPTION: This snippet defines settings for the Profile build mode by copying the release linker and compiler flags to the profile configuration.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the build system has the necessary features and functionality.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Target Platform\nDESCRIPTION: Sets the `FLUTTER_TARGET_PLATFORM` variable, defaulting to \"windows-x64\" if not already defined.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets the minimum required CMake version and declares the project with CXX language support. It's a foundational step for any CMake-based project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the directory containing the C++ client wrapper code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Running Web E2E Tests for Firebase Performance Plugin\nDESCRIPTION: This command runs end-to-end (e2e) tests for the firebase_performance plugin in a web environment using Melos. It requires ChromeDriver to be running.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmelos run test:e2e:web:firebase_performance\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Sources\nDESCRIPTION: This snippet defines a list of source files that are part of the cloud_firestore plugin. These files include C++ implementation files, header files, and generated message files.  New source files should be added to this list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND PLUGIN_SOURCES\n  \"cloud_firestore_plugin.cpp\"\n  \"cloud_firestore_plugin.h\"\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n  \"firestore_codec.cpp\"\n  \"firestore_codec.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Firebase Performance Plugin\nDESCRIPTION: This command runs end-to-end (e2e) tests for the firebase_performance plugin using Melos. It directly communicates with Firebase services and tests the full functionality of the plugin.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmelos run test:e2e:firebase_performance\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform\nDESCRIPTION: Sets the `FLUTTER_TARGET_PLATFORM` variable to `windows-x64` if it is not already defined. This ensures that the build process is configured for the Windows x64 platform.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Other Plugins\nDESCRIPTION: This command runs end-to-end (e2e) tests for the remaining FlutterFire plugins using Melos. It directly communicates with Firebase services and tests the full functionality of the plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmelos run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the 'EPHEMERAL_DIR' variable, which represents the path to the ephemeral directory where generated configuration files and build artifacts are located. This directory typically contains files generated by the Flutter tool during the build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Target\nDESCRIPTION: This snippet installs the runtime target (the executable itself) to the install prefix.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Test Discovery\nDESCRIPTION: This snippet enables automatic test discovery using GoogleTest, which automatically finds and runs tests within the defined test executable.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Flutter Project - Bash\nDESCRIPTION: This command rebuilds the Flutter project after adding the firebase_ml_model_downloader plugin. This ensures that the plugin is properly integrated into the project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/ml/use-custom-models.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This code defines build configuration options for Debug, Profile, and Release modes. It checks if the generator is multi-config and sets the appropriate build types and flags. This section ensures the correct build type is selected and flags are applied for each mode.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Data Collection for Opt-In Users (Dart)\nDESCRIPTION: This snippet shows how to manually enable Firebase In-App Messaging for users who have opted-in to data collection.  Automatic initialization must be disabled first in Info.plist (iOS) or AndroidManifest.xml (Android). After initialization via setAutomaticDataCollectionEnabled(true), the setting persists through app restarts unless explicitly changed.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_modify-message-behavior.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseInAppMessaging.instance.setAutomaticDataCollectionEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Including Content from another file\nDESCRIPTION: This snippet shows how to include content from another file using double angle brackets. The path is based on the internal directory structure, not the GitHub layout.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<<path/to/file>>\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM version\nDESCRIPTION: This command installs a specific FlutterFire BoM version using the FlutterFire CLI. The version number should be specified as an argument to the install command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.8.0\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper App Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_app`. This library contains the C++ wrapper code required for the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions in CMake\nDESCRIPTION: This snippet adds preprocessor definitions to the executable target, making the Flutter version information available during compilation. It defines FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, FLUTTER_VERSION_MINOR, FLUTTER_VERSION_PATCH, and FLUTTER_VERSION_BUILD.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Append and Transform Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory path to each element. This prepares the header list for inclusion in build targets.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire Version using CLI\nDESCRIPTION: This command installs a specific version of FlutterFire using the FlutterFire CLI. The version number specified in the command is used to fetch and install the appropriate FlutterFire components and dependencies.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.6.0\n```\n\n----------------------------------------\n\nTITLE: Running Analyze Check\nDESCRIPTION: This command runs the analyzer check using Melos. It is used to identify potential issues in the code before committing.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmelos analyze-ci\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specified FlutterFire BoM version using the FlutterFire CLI. Replacing '3.5.0' with the desired version ensures your project uses a consistent set of Firebase SDKs and FlutterFire plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.5.0\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings in CMake\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target. The specific settings are not defined within this snippet but are likely defined in a separate CMake function or macro.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Disable automatic Crashlytics collection in Android\nDESCRIPTION: This XML snippet disables automatic crash collection for Crashlytics in an Android application. It adds a meta-data tag within the application block of the AndroidManifest.xml file. The `android:name` attribute specifies the Crashlytics collection flag, and `android:value` is set to \"false\" to disable automatic collection.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_customize-crash-reports.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n    <meta-data\n        android:name=\"firebase_crashlytics_collection_enabled\"\n        android:value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Graduating Packages using Melos\nDESCRIPTION: This snippet uses Melos to graduate packages from 'dev' or 'beta' to a stable version. You can either graduate all packages or specify certain packages via the scope flag.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --graduate\n```\n\nLANGUAGE: bash\nCODE:\n```\nmelos version --graduate --scope=\"*firestore*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Parent Scope\nDESCRIPTION: Sets the `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` variables in the parent scope. This makes these variables available to other CMake scripts that include this file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running Web E2E Tests for Other Plugins\nDESCRIPTION: This command runs end-to-end (e2e) tests for the remaining FlutterFire plugins in a web environment using Melos. It requires ChromeDriver to be running.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmelos run test:e2e:web\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Git\nDESCRIPTION: This snippet retrieves the most recent updates from the remote 'origin' repository and fetches all available tags. This ensures the local branch is synchronized with the remote before any release operations are performed.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit pull origin main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull --tags\n```\n\n----------------------------------------\n\nTITLE: Defining project name and language\nDESCRIPTION: Sets the project name and specifies that the project uses C++ (CXX) as the primary language. This ensures that CMake configures the build system to handle C++ source files.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_NAME \"firebase_auth\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library on non-Debug builds only. It is installed for Profile and Release configurations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Starting ChromeDriver for Web Tests\nDESCRIPTION: This command starts the ChromeDriver server on port 4444. It's a prerequisite for running web-based end-to-end tests.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nchromedriver --port=4444\n```\n\n----------------------------------------\n\nTITLE: Adding License Header to Files\nDESCRIPTION: This command adds the license header to all necessary files using the addlicense tool and Melos.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmelos run add-license-header\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`. This library provides a common interface for code that uses the Flutter library.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for the project. This ensures that the application can handle Unicode characters correctly.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Dart Code Snippet with START and END tags\nDESCRIPTION: This snippet shows a Dart code example with `START` and `END` tags that are used to identify the specific lines of code to be included in the documentation using the `includecode` Jinja tag.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nvoid addData_addADocument() {\n    // [START add_data_add_a_document]\n    db.collection(\"cities\").doc(\"new-city-id\").set({\"name\": \"Chicago\"});\n    // [END add_data_add_a_document]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required version and specifying the languages used (CXX for C++).  It also sets the project name.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing and Setting Test Runner\nDESCRIPTION: This snippet conditionally enables testing if the `include_${PROJECT_NAME}_tests` variable is set (typically when building the example project). It defines the test runner executable name and enables the testing framework.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend to assemble the Flutter library and related files.  The command uses `tool_backend.bat` script to execute the build with the environment variables defined in `FLUTTER_TOOL_ENVIRONMENT`. The phony output ensures it runs every time.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet ensures the assets directory is fully re-copied on each build by removing the existing directory and re-installing it. It also installs the AOT library for non-Debug builds.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command sets the minimum required version of CMake to 3.14. This ensures that the CMake build system has the necessary features and capabilities to correctly process the build configuration.  CMake will refuse to process the project if the version is older than specified.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM with CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The version number must be provided as an argument to the `flutterfire install` command.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Bundled Libraries\nDESCRIPTION: Sets the list of absolute paths to libraries that should be bundled with the plugin. This list can contain prebuilt libraries or libraries created by an external build process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# List of absolute paths to libraries that should be bundled with the plugin.\n# This list could contain prebuilt libraries, or libraries created by an\n# external build triggered from this build file.\nset(firebase_storage_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake. It sets the CMP0063 policy to NEW.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This snippet defines the executable target for the Flutter application. It specifies the source files to be compiled into the executable and uses the BINARY_NAME variable defined elsewhere. The WIN32 flag indicates that this is a Windows application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: These snippets define the installation directories for data and library files within the build bundle.  They are used to copy support files and libraries into the correct location.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Child References in Dart\nDESCRIPTION: This code snippet shows how to create child references from an existing Firebase Storage reference. The `child()` method is used to create references to specific locations within the storage hierarchy. The method can accept a single path segment or a full path.  Dependencies: Firebase Storage SDK, a valid storage reference.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/storage/create-reference.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Create a child reference\n// imagesRef now points to \"images\"\nfinal imagesRef = storageRef.child(\"images\");\n\n// Child references can also take paths\n// spaceRef now points to \"images/space.jpg\n// imagesRef still points to \"images\"\nfinal spaceRef = storageRef.child(\"images/space.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Rebuild Flutter application\nDESCRIPTION: This command rebuilds your Flutter application after adding the Firebase App Check plugin. This step is required to ensure that the plugin is properly linked and available for use in your project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/app-check/default-providers.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory, which contains the application build files. See runner/CMakeLists.txt for more details on the application build.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros collision\nDESCRIPTION: This snippet disables the Windows NOMINMAX macro to prevent conflicts with C++ standard library functions like min and max. This is a common practice in C++ Windows development to avoid namespace collisions.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library provides a way to link against the Flutter engine without including any actual code. The `target_include_directories` command adds the ephemeral directory to the include path, and `target_link_libraries` links against the Flutter library. Finally, adds flutter_assemble as a dependency.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Rebuild Flutter App - Flutter\nDESCRIPTION: This command rebuilds your Flutter application after adding the Firebase Database plugin. This step ensures that the new plugin is properly integrated into your project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: CMake add executable\nDESCRIPTION: This snippet defines the executable target for the Flutter application. It specifies the source files to be included in the build and marks it as a WIN32 application. BINARY_NAME should be defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet links the necessary libraries to the executable target. It includes the flutter, flutter_wrapper_app, and dwmapi.lib libraries. It also sets the include directories for the project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings\nDESCRIPTION: Applies a standard set of build settings that are configured in the application-level CMakeLists.txt. This can be removed for plugins that want full control over build settings. The macro apply_standard_settings should be defined elsewhere.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${PLUGIN_NAME})\n```\n\n----------------------------------------\n\nTITLE: Enable BigQuery Export - Web - TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable message delivery metrics export to BigQuery for the web using the Firebase Messaging v9 SDK. It imports the necessary functions and calls experimentalSetDeliveryMetricsExportedToBigQueryEnabled. Dependencies include firebase/messaging/sw.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/cloud-messaging/receive.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled,\n  getMessaging,\n} from 'firebase/messaging/sw';\n...\n\nconst messaging = getMessaging(app);\nexperimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, true);\n```\n\n----------------------------------------\n\nTITLE: Modifying Android Package Name\nDESCRIPTION: This snippet describes a change to the Android package name.  This involved updating the `package` attribute in the `AndroidManifest.xml` file. This ensures a consistent and correct package structure for the application, allowing the application to be properly installed and function as intended.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_in_app_messaging/firebase_in_app_messaging/CHANGELOG.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<manifest package=\"io.flutter.plugins.firebase.inappmessaging\">\n```\n\n----------------------------------------\n\nTITLE: Add input files for Crashlytics dSYM processing - Apple\nDESCRIPTION: These paths are added to the 'Input Files' section of the 'Run Script' build phase in Xcode.  They provide Xcode with the locations of the necessary files for the run script to process dSYMs and associate them with the Firebase app. User Script Sandboxing requires explicit input file declarations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/crashlytics/_deobfuscated.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}\n```\n\nLANGUAGE: Shell\nCODE:\n```\n${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${PRODUCT_NAME}\n```\n\nLANGUAGE: Shell\nCODE:\n```\n${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Info.plist\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$(TARGET_BUILD_DIR)/$(UNLOCALIZED_RESOURCES_FOLDER_PATH)/GoogleService-Info.plist\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$(TARGET_BUILD_DIR)/$(EXECUTABLE_PATH)\n```\n\n----------------------------------------\n\nTITLE: Rebuild Flutter project\nDESCRIPTION: This command rebuilds your Flutter project after configuring Firebase and adding the Performance Monitoring plugin. This step ensures that all changes are applied and the app is ready to run with Performance Monitoring enabled.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/get-started.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter engine's dynamic library. This library contains the core Flutter runtime and rendering engine. It's set in the `EPHEMERAL_DIR`\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. Setting this version ensures compatibility and access to necessary features. This example sets the minimum version to 3.14.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_core/firebase_core/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories and Link Libraries for Flutter\nDESCRIPTION: This snippet sets the target include directories and links the plugin library with Flutter-related libraries (`flutter`, `flutter_wrapper_plugin`).  This ensures that the plugin can access Flutter's APIs and functionalities.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI.  The version number specifies the BoM to install. The command is executed in a terminal environment.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 2.9.2\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet sets the Flutter managed directory and adds it as a subdirectory to the CMake build. This integrates the Flutter build system into the CMake project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Importing User Accounts Using Firebase CLI - Bash\nDESCRIPTION: This command imports user accounts from a JSON file into your Firebase project using the Firebase CLI. It specifies the hashing algorithm and parameters for password hashing.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/manage-users.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nfirebase auth:import users.json --hash-algo=scrypt --rounds=8 --mem-cost=14\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: This snippet creates a custom command that executes the Flutter tool backend to assemble the Flutter engine and related artifacts.  It uses a phony output file to force the command to run every time. The command invokes the flutter tool backend batch script with specified configurations.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory within the installation prefix. This library contains the core Flutter runtime code.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (App)\nDESCRIPTION: Appends a list of C++ source files to the `CPP_WRAPPER_SOURCES_APP` variable. These source files contain the C++ wrapper code for the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines specific compiler and linker flags for the Profile build mode, mirroring the Release build mode settings. This helps optimize performance during profiling.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Import Firebase Database Package - Dart\nDESCRIPTION: This import statement allows you to use the Firebase Realtime Database package within your Dart code. It provides access to classes and methods for interacting with the database.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/start.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_database/firebase_database.dart';\n```\n\n----------------------------------------\n\nTITLE: Reauthenticating with Provider - Dart\nDESCRIPTION: This code snippet demonstrates how to reauthenticate a user with an OAuth provider (Apple in this example) in Firebase Authentication in Flutter. It uses `reauthenticateWithPopup` or `reauthenticateWithProvider` depending on the platform to get fresh credentials.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/auth/federated-auth.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal appleProvider = AppleAuthProvider();\n\nif (kIsWeb) {\n  await FirebaseAuth.instance.currentUser?.reauthenticateWithPopup(appleProvider);\n\n  // Or you can reauthenticate with a redirection\n  // await FirebaseAuth.instance.currentUser?.reauthenticateWithRedirect(appleProvider);\n} else {\n  await FirebaseAuth.instance.currentUser?.reauthenticateWithProvider(appleProvider);\n}\n\n// You can now perform sensitive operations\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (App)\nDESCRIPTION: Appends a list of C++ wrapper source files specific to the application to the `CPP_WRAPPER_SOURCES_APP` variable. These source files handle the initialization and management of the Flutter engine and view controller. The `list(APPEND ...)` command is used to add the source files to the list, and then `list(TRANSFORM ...)` prepends the wrapper root directory.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines settings for the Profile build mode, copying the linker and compiler flags from the Release build mode. This ensures that the Profile build uses similar optimizations and settings as the Release build.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Appending Plugin Wrapper Sources\nDESCRIPTION: This snippet appends plugin-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_PLUGIN` list. These sources provide functionality for registering and managing Flutter plugins.  Then the `WRAPPER_ROOT` path is prepended to each source file in the list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Finding Installation ID - Android Log\nDESCRIPTION: This log output shows where to find your app's installation ID (FID) in the Android console. The installation ID is needed to send test messages to a specific device.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nI/FIAM.Headless: Starting InAppMessaging runtime with Installation ID YOUR_INSTALLATION_ID\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The BoM ensures compatibility across all FlutterFire plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable file that will be created for the application. Changing the `BINARY_NAME` variable will modify the on-disk name of the application.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"tests\")\n```\n\n----------------------------------------\n\nTITLE: Appending Application Wrapper Sources\nDESCRIPTION: This snippet appends application-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_APP` list. These sources implement the main application logic and integration with the Flutter engine.  Then the `WRAPPER_ROOT` path is prepended to each source file in the list.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Generating MethodChannel API Layer with Pigeon\nDESCRIPTION: This command regenerates the MethodChannel API layer using Pigeon. It is used after modifying the messages in the pigeons/messages.dart file to update the API code between Dart and the native platforms.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmelos run generate:pigeon\n```\n\n----------------------------------------\n\nTITLE: Append and Transform C++ Wrapper Sources (Core)\nDESCRIPTION: Appends core C++ wrapper sources to a list and prepends the wrapper root directory path. These are the core implementation files used by both the plugin and app wrappers.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the install prefix. The ICU data file provides internationalization support.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Bundled Libraries\nDESCRIPTION: This snippet defines a list of absolute paths to libraries that should be bundled with the plugin.  This is used to include prebuilt libraries or libraries created by external builds.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(cloud_firestore_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner subdirectory, which contains the application build rules, to the CMake project.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Test Device Log - Android\nDESCRIPTION: This log message confirms that the device has been set as a test device for Firebase In-App Messaging. It appears when the app is running on a device configured as a test device.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nI/FIAM.Headless: Setting this device as a test device\n```\n\n----------------------------------------\n\nTITLE: Bumping gradle wrapper version\nDESCRIPTION: This entry refers to updating the Gradle wrapper to version 5.6.4.  The Gradle wrapper is a script that allows projects to use a specific Gradle version without requiring the user to have it installed globally. The update is done through the `gradle-wrapper.properties` file.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_in_app_messaging/firebase_in_app_messaging/CHANGELOG.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndistributionUrl=https://services.gradle.org/distributions/gradle-5.6.4-all.zip\n```\n\n----------------------------------------\n\nTITLE: Turning Off Synchronization\nDESCRIPTION: Turns off synchronization for a specific location that was previously kept in sync. This stops the Firebase Realtime Database client from automatically downloading and keeping the data in sync. It also uses the `keepSynced` method.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/database/offline-capabilities.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nscoresRef.keepSynced(false);\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase iOS SDK version\nDESCRIPTION: This describes updating the Firebase iOS SDK version. This usually involves updating the podfile with the desired Firebase SDK version. It also involves the `firebase_core` dependency, ensuring the correct version is defined in the pubspec.yaml\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_in_app_messaging/firebase_in_app_messaging/CHANGELOG.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npod 'Firebase/InAppMessaging', '~> 6.33.0'\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: Disables Windows macros that may conflict with C++ standard library functions. Specifically, it disables NOMINMAX.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: This snippet sets the installation prefix to the build bundle directory if it's initialized to the default value.  This ensures the application can be run in place.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Unicode for Projects\nDESCRIPTION: This snippet adds definitions to use Unicode for all projects.  It defines both UNICODE and _UNICODE.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_storage/firebase_storage/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Disable Performance Monitoring with Remote Config - Dart\nDESCRIPTION: This snippet demonstrates how to disable or enable Firebase Performance Monitoring at runtime using Firebase Remote Config in a Flutter application. It fetches the value of the `perf_disable` parameter from Remote Config and uses it to control Performance Monitoring. An app restart is needed to activate changes.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/perf-mon/_disable-sdk.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Activate previously-fetched values, falling back on the defaults if\n// nothing is available yet.\nawait FirebaseRemoteConfig.instance\n    .setDefaults(YOUR_REMOTE_CONFIG_DEFAULTS);\nawait FirebaseRemoteConfig.instance.activate();\n\n// Enable or disable Performance Monitoring based on the value of\n// \"perf_disable\".\nfinal perfMonDisabled =\n    FirebaseRemoteConfig.instance.getBool(\"perf_disable\");\nFirebasePerformance.instance\n    .setPerformanceCollectionEnabled(!perfMonDisabled);\n\n// Fetch values for next time. (Don't await the result!)\nFirebaseRemoteConfig.instance.fetch();\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix, marking it as a Runtime component. This ensures that the executable is copied to the correct location during the install step.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/tests/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Plugin)\nDESCRIPTION: Appends a list of C++ source files to the `CPP_WRAPPER_SOURCES_PLUGIN` variable. These source files contain the C++ wrapper code for plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/cloud_firestore/cloud_firestore/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Flutter Version\nDESCRIPTION: Adds preprocessor definitions for the Flutter version to be used within the application. These definitions allow the application to access version information at compile time. The Flutter version parts are defined externally.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Test Device Log - iOS\nDESCRIPTION: This log message confirms that the device is recognizing test messages. It indicates that the current instance is configured as a testing instance.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/docs/in-app-messaging/_get-started.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[Firebase/InAppMessaging][I-IAM180017] Seeing test message in fetch response. Turn the current instance into a testing instance.\n```\n\n----------------------------------------\n\nTITLE: Installing FlutterFire BoM via CLI\nDESCRIPTION: This command installs a specific version of the FlutterFire Bill of Materials (BoM) using the FlutterFire CLI. The BoM ensures compatibility across all FlutterFire plugins.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/VERSIONS.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflutterfire install 3.2.1\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for the application. It configures where the application, data, and libraries will be installed during the installation process.\nSOURCE: https://github.com/firebase/flutterfire/blob/main/packages/firebase_auth/firebase_auth/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```"
  }
]