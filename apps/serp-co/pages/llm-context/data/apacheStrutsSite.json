[
  {
    "owner": "apache",
    "repo": "struts-site",
    "content": "TITLE: Creating Struts 2 Form in JSP\nDESCRIPTION: JSP page with a Struts 2 form for user registration. Form fields are tied to properties of a personBean object using Struts 2 textfield tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/processing-forms.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>Register</title>\n  </head>\n  <body>\n    <h3>Register for a prize by completing this form.</h3>\n\n    <s:form action=\"register\">\n      <s:textfield name=\"personBean.firstName\" label=\"First name\" />\n      <s:textfield name=\"personBean.lastName\" label=\"Last name\" />\n      <s:textfield name=\"personBean.email\"  label =\"Email\"/>  \n      <s:textfield name=\"personBean.age\"  label=\"Age\"  />\n      <s:submit/>\n    </s:form>\t\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Action Class for Form Processing\nDESCRIPTION: Java class extending ActionSupport to handle form submission. Includes a personBean attribute of type Person and uses the @StrutsParameter annotation for parameter mapping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/processing-forms.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts.register.action;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts.register.model.Person;\n\npublic class Register extends ActionSupport {\n    \n    private static final long serialVersionUID = 1L;\n    \n    private Person personBean;\n\n\n    public String execute() throws Exception {\n        //call Service class to store personBean's state in database\n        \n        return SUCCESS;\n    }\n\n    @StrutsParameter(depth = 1)\n    public Person getPersonBean() {\n        return personBean;\n    }\n    \n    public void setPersonBean(Person person) {\n        personBean = person;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Interceptors in Struts XML\nDESCRIPTION: Example of how to configure individual interceptors for a login action in a Struts XML configuration file. The configuration demonstrates adding timer and logger interceptors to a login action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"default\" extends=\"struts-default\">\n    <interceptors>\n        <interceptor name=\"timer\" class=\"..\"/>\n        <interceptor name=\"logger\" class=\"..\"/>\n    </interceptors>\n\n    <action name=\"login\" class=\"tutorial.Login\">\n        <interceptor-ref name=\"timer\"/>\n        <interceptor-ref name=\"logger\"/>\n        <result name=\"input\">login.jsp</result>\n        <result name=\"success\" type=\"redirectAction\">/secure/home</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Short-Circuit Validators in XML for Apache Struts\nDESCRIPTION: This XML snippet demonstrates how to configure short-circuit validators for email fields and expression validators. It includes required and email validators for two email fields, and two expression validators with different short-circuit settings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE validators PUBLIC\n        \"-//Apache Struts//XWork Validator 1.0.3//EN\"\n \t   \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\">\n<validators>\n  <!-- Field Validators for email field -->\n  <field name=\"email\">\n      <field-validator type=\"required\" short-circuit=\"true\">\n          <message>You must enter a value for email.</message>\n      </field-validator>\n      <field-validator type=\"email\" short-circuit=\"true\">\n          <message>Not a valid e-mail.</message>\n      </field-validator>\n  </field>\n  <!-- Field Validators for email2 field -->\n  <field name=\"email2\">\n     <field-validator type=\"required\">\n          <message>You must enter a value for email2.</message>\n      </field-validator>\n     <field-validator type=\"email\">\n          <message>Not a valid e-mail2.</message>\n      </field-validator>\n  </field>\n  <!-- Plain Validator 1 -->\n  <validator type=\"expression\">\n      <param name=\"expression\">email.equals(email2)</param>\n      <message>Email not the same as email2</message>\n  </validator>\n  <!-- Plain Validator 2 -->\n  <validator type=\"expression\" short-circuit=\"true\">\n      <param name=\"expression\">email.startsWith('mark')</param>\n      <message>Email does not start with mark</message>\n  </validator>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Interceptor in Java for Apache Struts\nDESCRIPTION: This Java code example shows how to implement a simple interceptor that extends AbstractInterceptor. It demonstrates setting a date on an action before invoking the next interceptor or action in the chain.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/writing-interceptors.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.AbstractInterceptor;\n\npublic class SimpleInterceptor extends AbstractInterceptor {\n\n    public String intercept(ActionInvocation invocation) throws Exception {\n       MyAction action = (MyAction)invocation.getAction();\n       action.setDate(new Date());\n       return invocation.invoke();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MessageStore Model Class in Struts 2\nDESCRIPTION: This Java class serves as the model component in the MVC pattern, storing a simple welcome message. It includes a constructor that initializes the message and a getter method that follows JavaBean conventions to expose the message to the view.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/hello-world-using-struts2.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts.helloworld.model;\n\npublic class MessageStore {\n    private String message;\n    \n    public MessageStore() {\n        message = \"Hello Struts User\";\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Actions in struts.xml\nDESCRIPTION: This XML configuration file maps URLs to Action classes and their methods, and defines which views to render based on action results. It includes the hello action that maps to the HelloWorldAction class and renders the HelloWorld.jsp view when the action returns SUCCESS.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/hello-world-using-struts2.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE struts PUBLIC\n\t\t\"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n\t\t\"http://struts.apache.org/dtds/struts-2.5.dtd\">\n<struts>\n    <constant name=\"struts.devMode\" value=\"true\" />\n\n    <package name=\"basicstruts2\" extends=\"struts-default\">\n        <action name=\"index\">\n            <result>/index.jsp</result>\n        </action>\n\t\t\n        <action name=\"hello\" class=\"org.apache.struts.helloworld.action.HelloWorldAction\" method=\"execute\">\n            <result name=\"success\">/HelloWorld.jsp</result>\n        </action>\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Security Settings in XML\nDESCRIPTION: This XML configuration disables ValueStack fallback to context and excludes certain OGNL node types for enhanced security in Struts 2 applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ognl.valueStackFallbackToContext\" value=\"false\"/>\n<constant name=\"struts.ognl.excludedNodeTypes\" value=\"\n            ognl.ASTThisVarRef,\n            ognl.ASTVarRef\n\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering Default Validators in Struts 2 XML\nDESCRIPTION: This XML snippet shows how to register the default validators included in the Struts 2 framework. It demonstrates the syntax used to declare custom validators in the validators.xml file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n{% highlight xml %}\n{% remote_file_content https://raw.githubusercontent.com/apache/struts/master/core/src/main/resources/com/opensymphony/xwork2/validator/validators/default.xml %}\n{% endhighlight %}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP Interceptor in Struts XML Configuration\nDESCRIPTION: XML configuration example showing how to enable the CSP interceptor for a Struts action. The example demonstrates setting the enforcing mode to true and specifying a reporting URI for CSP violations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/csp-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action  name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"csp.enforcingMode\">true</param>\n        <param name=\"csp.reportUri\">/csp-report.action</param>\n    </interceptor-ref>\n    <result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Action Mapping\nDESCRIPTION: XML configuration that maps the register action to the Register class and specifies thankyou.jsp as the success view. Handles automatic form field mapping to personBean attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/processing-forms.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"register\" class=\"org.apache.struts.register.action.Register\" method=\"execute\">\n    <result name=\"success\">/thankyou.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Action Class in Java\nDESCRIPTION: Example Java action class that handles file uploads. The class provides setter methods annotated with @StrutsParameter to receive the uploaded file, its content type, and original filename.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    package com.example;\n\n    import java.io.File;\n    import com.opensymphony.xwork2.ActionSupport;\n\n    public UploadAction extends ActionSupport {\n       private File file;\n       private String contentType;\n       private String filename;\n\n       @StrutsParameter\n       public void setUpload(File file) {\n          this.file = file;\n       }\n\n       @StrutsParameter\n       public void setUploadContentType(String contentType) {\n          this.contentType = contentType;\n       }\n\n       @StrutsParameter\n       public void setUploadFileName(String filename) {\n          this.filename = filename;\n       }\n\n       public String execute() {\n          //...\n          return SUCCESS;\n       }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Using ValidationParameter within CustomValidator in Java\nDESCRIPTION: This example demonstrates how to embed a ValidationParameter annotation within a CustomValidator annotation. The ValidationParameter requires both a name and value parameter to define customization options for the validator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation-parameter-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @CustomValidator(\n   type =\"customValidatorName\",\n   fieldName = \"myField\",\n   parameters = { @ValidationParameter( name = \"paramName\", value = \"paramValue\" ) }\n )\n```\n\n----------------------------------------\n\nTITLE: Field Validator XML Example\nDESCRIPTION: Example of field validators for email validation using field-validator syntax.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"email_address\"> \n    <field-validator type=\"required\"> \n        <message>You cannot leave the email address field empty.</message> \n    </field-validator> \n    <field-validator type=\"email\"> \n        <message>The email address you entered is not valid.</message> \n    </field-validator> \n</field> \n```\n\n----------------------------------------\n\nTITLE: Creating Interceptor Stacks in Struts XML\nDESCRIPTION: Example showing how to bundle interceptors into a reusable stack named 'myStack'. This demonstrates how to create a custom interceptor stack containing timer and logger interceptors, then applying it to a login action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"default\" extends=\"struts-default\">\n    <interceptors>\n        <interceptor name=\"timer\" class=\"..\"/>\n        <interceptor name=\"logger\" class=\"..\"/>\n        <interceptor-stack name=\"myStack\">\n            <interceptor-ref name=\"timer\"/>\n            <interceptor-ref name=\"logger\"/>\n        </interceptor-stack>\n    </interceptors>\n\n    <action name=\"login\" class=\"tutuorial.Login\">\n        <interceptor-ref name=\"myStack\"/>\n        <result name=\"input\">login.jsp</result>\n        <result name=\"success\" type=\"redirectAction\">/secure/home</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Mapping Struts 2 Action and Result in XML\nDESCRIPTION: Demonstrates how to map a URL to an Action class and its execute method, and how to specify the result view based on the action's return value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/coding-actions.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"hello\" class=\"org.apache.struts.helloworld.action.HelloWorldAction\" method=\"execute\">\n    <result name=\"success\">/HelloWorld.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Settings in Struts 2\nDESCRIPTION: Configuration properties for file uploads in Struts 2. These settings control the multipart parser, save directory, maximum sizes, and other constraints for file uploads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nstruts.multipart.parser=jakarta\nstruts.multipart.saveDir= # Filesystem location to save parsed request data\nstruts.multipart.maxSize=2097152 # Max combined size of files per request\nstruts.multipart.maxFiles=256 # Max number of files per request\nstruts.multipart.maxFileSize= # Max size per file per request\nstruts.multipart.maxStringLength=4096 # Max length of a string parameter (a normal field) in a multipart request (since Struts 6.1.2.1)\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeConversion Annotation in a Struts Action Class (Java)\nDESCRIPTION: Example demonstrating various uses of the TypeConversion annotation in a Struts Action class. It shows application-wide conversions, basic type conversions, collection conversions, map conversions, and applying conversion rules to specific property types.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @Conversion()\n public class ConversionAction implements Action {\n\n   private String convertInt;\n\n   private String convertDouble;\n   private List users = null;\n\n   private HashMap keyValues = null;\n\n   @TypeConversion(type = ConversionType.APPLICATION)\n   @StrutsParameter\n   public void setConvertInt( String convertInt ) {\n       this.convertInt = convertInt;\n   }\n\n   @TypeConversion(converterClass = XWorkBasicConverter.class)\n   @StrutsParameter\n   public void setConvertDouble( String convertDouble ) {\n       this.convertDouble = convertDouble;\n   }\n\n   @TypeConversion(rule = ConversionRule.COLLECTION, converterClass = String.class)\n   @StrutsParameter\n   public void setUsers( List users ) {\n       this.users = users;\n   }\n\n   @TypeConversion(rule = ConversionRule.MAP, converterClass = BigInteger.class)\n   @StrutsParameter\n   public void setKeyValues( HashMap keyValues ) {\n       this.keyValues = keyValues;\n   }\n\n   @TypeConversion(type = ConversionType.APPLICATION, property = \"java.util.Date\", converterClass = XWorkBasicConverter.class)\n   public String execute() throws Exception {\n       return SUCCESS;\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Logon Action with Annotations in Java\nDESCRIPTION: Shows how to configure a Logon action using annotations in Java when using the Convention Plugin. It specifies the action name and result types using @Action and @Results annotations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage tutorial\n\n@Action(\"Logon\") // actually that is not necessary as it is added by convention\n@Results(\n\t@Result(type=\"redirectAction\", location=\"Menu\"),\n\t@Result(name=\"input\", location=\"/Logon.jsp\")\n)\npublic class Logon {\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Web.xml\nDESCRIPTION: Web application deployment descriptor that sets up the Struts 2 filter and mapping for handling requests.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app id=\"WebApp_ID\" version=\"2.4\"\n\txmlns=\"http://java.sun.com/xml/ns/j2ee\" \n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n\t<display-name>Basic Struts2</display-name>\n\t<filter>\n\t\t<filter-name>struts2</filter-name>\n\t\t<filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n\t</filter>\n\n\t<filter-mapping>\n\t\t<filter-name>struts2</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n\n\t<welcome-file-list>\n\t\t<welcome-file>index</welcome-file>\n\t</welcome-file-list>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadedFilesAware Interface in Struts 2 Action\nDESCRIPTION: Java code showing how to implement the UploadedFilesAware interface in a Struts 2 action to handle file uploads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class UploadAction extends ActionSupport implements UploadedFilesAware {\n  \n    private UploadedFile uploadedFile;\n    private String contentType;\n    private String fileName;\n    private String originalName;\n\n    @Override\n    public void withUploadedFiles(List<UploadedFile> uploadedFiles) {\n        if (!uploadedFiles.isEmpty()) {\n          this.uploadedFile = uploadedFiles.get(0);\n          this.fileName = uploadedFile.getName();\n          this.contentType = uploadedFile.getContentType();\n          this.originalName = uploadedFile.getOriginalName();\n        }\n    }\n\n    public String execute() {\n        // do something with the file\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello Form with Struts Tags in XML\nDESCRIPTION: Demonstrates how to create a form that submits to a Struts Action using Struts tags in XML. It includes a text field for the user's name and a submit button.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<s:form action=\"Hello\">\n    <s:textfield label=\"Please enter your name\" name=\"name\"/>\n    <s:submit/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Setting File Upload Interceptor Parameters in Struts XML\nDESCRIPTION: Example showing how to configure the fileUpload interceptor with parameters. This example restricts the allowed file types to specific image formats.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload-interceptor.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-ref name=\"fileUpload\">\n  <param name=\"allowedTypes\">\n     image/png,image/gif,image/jpeg\n  </param>\n</interceptor-ref>\n```\n\n----------------------------------------\n\nTITLE: Basic Struts2 Filter Configuration in web.xml\nDESCRIPTION: Simple example showing how to configure the StrutsPrepareAndExecuteFilter in web.xml with basic filter mapping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n\n    <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n    <!-- ... -->\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Setting Up JSON Action in Java with Fields and Methods\nDESCRIPTION: Demonstrates how to create a Struts action class for JSON serialization. It includes various field types and getter methods to showcase different serialization scenarios.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.opensymphony.xwork2.Action;\n\npublic class JSONExample {\n    private String field1 = \"str\";\n    private int[] ints = {10, 20};\n    private Map map = new HashMap();\n    private String customName = \"custom\";\n\n    //'transient' fields are not serialized\n    private transient String field2;\n\n    //fields without getter method are not serialized\n    private String field3;\n\n    public String execute() {\n        map.put(\"John\", \"Galt\");\n        return Action.SUCCESS;\n    }\n\n    public String getField1() {\n        return field1;\n    }\n\n    public void setField1(String field1) {\n        this.field1 = field1;\n    }\n\n    public int[] getInts() {\n        return ints;\n    }\n\n    public void setInts(int[] ints) {\n        this.ints = ints;\n    }\n\n    public Map getMap() {\n        return map;\n    }\n\n    public void setMap(Map map) {\n        this.map = map;\n    }\n\n    @JSON(name=\"newName\")\n    public String getCustomName() {\n        return this.customName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelDriven Interface in a Struts 2 Action\nDESCRIPTION: This example shows how to implement the ModelDriven interface in a Struts 2 action. The action class returns a Gangster model object from the getModel() method, which Struts will populate with request parameters and place on top of the value stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/model-driven.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ModelDrivenAction implements ModelDriven { \n    public String execute() throws Exception {\n        return SUCCESS;\n    }\n\n    public Object getModel() {\n        return new Gangster();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Interceptors in Struts 2 XML\nDESCRIPTION: This XML configuration snippet shows how to include validation and workflow interceptors in a custom interceptor stack. It demonstrates setting up exclusion methods for these interceptors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-stack name=\"defaultStack\">\n   ...\n   <interceptor-ref name=\"validation\">\n      <param name=\"excludeMethods\">input,back,cancel,browse</param>\n   </interceptor-ref>\n   <interceptor-ref name=\"workflow\">\n      <param name=\"excludeMethods\">input,back,cancel,browse</param>\n   </interceptor-ref>\n</interceptor-stack>\n```\n\n----------------------------------------\n\nTITLE: Annotating Action Parameters with @StrutsParameter in Java\nDESCRIPTION: This Java code demonstrates how to safely expose action parameters using the @StrutsParameter annotation. This is required since Struts 6.4 when using struts.parameters.requireAnnotations=true, and is the default behavior from Struts 7.0.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate String name;\n\n@StrutsParameter\npublic void setName(String name) {\n    this.name = name;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JSP Page with Field Error Display and Validation Form in Struts\nDESCRIPTION: This HTML snippet creates a form with multiple input fields that demonstrate different types of field validators in Struts. It includes sections to display validation errors globally and for specific fields using the s:fielderror tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-field-validators.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h3>All Field Errors Will Appear Here</h3>\n<s:fielderror/>\n<hr/>\n\n<h3>Field Error due to 'Required String Validator Field' Will Appear Here</h3>\n<s:fielderror>\n    <s:param value=\"%{'requiredStringValidatorField'}\"/>\n</s:fielderror>\n<hr/>\n\n<h3>Field Error due to 'String Length Validator Field' Will Appear Here</h3>\n<s:fielderror>\n    <s:param>stringLengthValidatorField</s:param>\n</s:fielderror>\n<hr/>\n\n<s:form action=\"submitFieldValidatorsExamples\" namespace=\"/validation\" method=\"POST\" theme=\"xhtml\">\n    <s:textfield label=\"Required Validator Field\" name=\"requiredValidatorField\"/>\n    <s:textfield label=\"Required String Validator Field\" name=\"requiredStringValidatorField\"/>\n    <s:textfield label=\"Integer Validator Field\" name=\"integerValidatorField\"/>\n    <s:textfield label=\"Date Validator Field\" name=\"dateValidatorField\"/>\n    <s:textfield label=\"Email Validator Field\" name=\"emailValidatorField\"/>\n    <s:textfield label=\"URL Validator Field\" name=\"urlValidatorField\"/>\n    <s:textfield label=\"String Length Validator Field\" name=\"stringLengthValidatorField\"/>\n    <s:textfield label=\"Regex Validator Field\" name=\"regexValidatorField\"/>\n    <s:textfield label=\"Field Expression Validator Field\" name=\"fieldExpressionValidatorField\"/>\n    <s:submit label=\"Submit\" cssClass=\"btn btn-primary\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Protecting JSP Files with Security Constraints in web.xml\nDESCRIPTION: This XML snippet shows how to prevent direct access to JSP files by adding security constraints in web.xml. It creates a security role that no users are assigned to, effectively blocking direct JSP access.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Restricts access to pure JSP files - access available only via Struts action -->\n<security-constraint>\n    <display-name>No direct JSP access</display-name>\n    <web-resource-collection>\n        <web-resource-name>No-JSP</web-resource-name>\n        <url-pattern>*.jsp</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n        <role-name>no-users</role-name>\n    </auth-constraint>\n</security-constraint>\n\n<security-role>\n    <description>Don't assign users to this role</description>\n    <role-name>no-users</role-name>\n</security-role>\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptor Parameters - Method 2\nDESCRIPTION: Demonstrates how to override interceptor parameters using dot notation to reference specific interceptors within a stack. This method is more concise as it doesn't require copying the entire stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myAction\" class=\"myActionClass\">\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"validation.excludeMethods\">myValidationExcludeMethod</param>\n        <param name=\"workflow.excludeMethods\">myWorkflowExcludeMethod</param>\n    </interceptor-ref>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Pages in Struts 2 XML Configuration\nDESCRIPTION: This XML configuration defines a custom error page and global exception mapping in Struts 2 to avoid exposing users to XSS attacks through automatically generated error pages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<global-results>\n  <result name=\"error\">/error_page.jsp</result>\n</global-results>\n \n<global-exception-mappings>\n  <exception-mapping exception=\"java.lang.Exception\" result=\"error\"/>\n</global-exception-mappings>\n```\n\n----------------------------------------\n\nTITLE: Displaying Integer Value using Struts 2 Property Tag in JSP\nDESCRIPTION: This JSP code demonstrates how to use the Struts 2 property tag to display an integer value. It automatically converts the integer to a string for display.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_8\n\nLANGUAGE: jsp\nCODE:\n```\n<p>I've said hello <s:property value=\"helloCount\" /> times!</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mapping for File Upload in Struts 2 XML\nDESCRIPTION: Example of how to configure an action mapping in Struts 2 XML for handling file uploads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"doUpload\" class=\"com.example.UploadAction\">\n    <result name=\"success\">good_result.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Applying a Local Interceptor Stack to an Action in Apache Struts XML\nDESCRIPTION: This XML snippet shows how to apply a local interceptor stack to a specific action in Apache Struts. It defines an action named 'VelocityCounter' and applies the 'defaultComponentStack' interceptor stack to it.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptor-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"VelocityCounter\" class=\"org.apache.struts2.example.counter.SimpleCounter\">\n    <result name=\"success\">...</result>\n    <interceptor-ref name=\"defaultComponentStack\"/>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Action Result in Struts XML\nDESCRIPTION: Demonstrates how to configure a basic success result using the dispatcher result type to render a JSP page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-types.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"dispatcher\">/WEB-INF/index.jsp</result>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plain Result in Java Action Class\nDESCRIPTION: Demonstrates how to create PlainResult responses in an Action class. Shows both plain text and HTML content type examples. The PlainResult interface allows direct writing to the response without requiring struts.xml configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/plain-result.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class UserAction {\n\n    private String id;\n\n    public PlainResult execute() {\n        return response -> response.write(\"User Id: \" + id);\n    }\n\n    public PlainResult html() {\n        return response -> response.write(\"<b>test</b>\").withContentTypeTextHtml();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Async Action in Java for Struts\nDESCRIPTION: A basic implementation of an asynchronous action in Struts using a Callable interface. The action returns a Callable that performs a long-running operation (simulated by Thread.sleep) and returns a success result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/async/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncAction {\n\n    public Callable<String> execute() throws InterruptedException {\n        return new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                waitForEvent();\n                return \"success\";\n            }\n        };\n    }\n\n    private void waitForEvent() throws InterruptedException {\n        Thread.sleep(40000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Validators in XML for Struts\nDESCRIPTION: An XML configuration that defines validation rules for each field in the form. It includes various validator types such as required, requiredstring, int, date, email, url, stringlength, regex, and fieldexpression with specific parameters and error messages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-field-validators.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <field name=\"requiredValidatorField\">\n        <field-validator type=\"required\">\n            <message><![CDATA[ required ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"requiredStringValidatorField\">\n        <field-validator type=\"requiredstring\">\n            <param name=\"trim\">true</param>\n            <message><![CDATA[ required and must be string ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"integerValidatorField\">\n        <field-validator type=\"int\">\n            <param name=\"min\">1</param>\n            <param name=\"max\">10</param>\n            <message><![CDATA[ must be integer min 1 max 10 if supplied ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"dateValidatorField\">\n        <field-validator type=\"date\">\n            <param name=\"min\">01/01/1990</param>\n            <param name=\"max\">01/01/2000</param>\n            <message><![CDATA[ must be a min 01-01-1990 max 01-01-2000 if supplied ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"emailValidatorField\">\n        <field-validator type=\"email\">\n            <message><![CDATA[ must be a valid email if supplied ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"urlValidatorField\">\n        <field-validator type=\"url\">\n            <message><![CDATA[ must be a valid url if supplied ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"stringLengthValidatorField\">\n        <field-validator type=\"stringlength\">\n            <param name=\"maxLength\">4</param>\n            <param name=\"minLength\">2</param>\n            <param name=\"trim\">true</param>\n            <message><![CDATA[ must be a String of a specific greater than 1 less than 5 if specified ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"regexValidatorField\">\n        <field-validator type=\"regex\">\n            <param name=\"regex\"><![CDATA[ [^<>]+ ]]></param>\n            <message><![CDATA[ regexValidatorField must match a regexp (.*.txt) if specified ]]></message>\n        </field-validator>\n    </field>\n    <field name=\"fieldExpressionValidatorField\">\n        <field-validator type=\"fieldexpression\">\n            <param name=\"expression\">(fieldExpressionValidatorField == requiredValidatorField)</param>\n            <message><![CDATA[ must be the same as the Required Validator Field if specified ]]></message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Type Converter in Java\nDESCRIPTION: Example of creating a custom type converter by extending StrutsTypeConverter class. The converter must implement methods to convert from String to Object and Object to String.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyConverter extends StrutsTypeConverter {\n    public Object convertFromString(Map context, String[] values, Class toClass) {\n       .....\n    }\n\n    public String convertToString(Map context, Object o) {\n       .....\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ParentPackage Annotation Implementation in Struts 2\nDESCRIPTION: Demonstrates using @ParentPackage annotation to define custom parent Struts package for action classes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts2.convention.annotation.Action;\nimport org.apache.struts2.convention.annotation.ParentPackage;\n\n@ParentPackage(\"customXWorkPackage\")\npublic class HelloWorld extends ActionSupport {\n  public String execute() {\n    return SUCCESS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Development Mode in Struts XML Configuration\nDESCRIPTION: This XML snippet shows how to explicitly disable development mode in a Struts 2 application. Development mode should always be disabled in production environments to prevent exposing sensitive information.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<constant name =\"struts.devMode\" value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Annotations in Struts 2 Action Class\nDESCRIPTION: Demonstrates how to use Result annotations to define global and local results for action methods. Shows usage of @Results for class-level results and @Action with embedded results for method-level definitions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts2.convention.annotation.Action;\nimport org.apache.struts2.convention.annotation.Actions;\nimport org.apache.struts2.convention.annotation.Result;\nimport org.apache.struts2.convention.annotation.Results;\n\n@Results({\n  @Result(name=\"failure\", location=\"fail.jsp\")\n})\npublic class HelloWorld extends ActionSupport {\n  @Action(value=\"/different/url\",\n    results={@Result(name=\"success\", location=\"http://struts.apache.org\", type=\"redirect\")}\n  )\n  public String execute() {\n    return SUCCESS;\n  }\n\n  @Action(\"/another/url\")\n\n  public String doSomething() {\n    return SUCCESS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Text Input Field with Struts Textfield Tag in JSP\nDESCRIPTION: This example demonstrates how to use the Struts textfield tag to render a text input control for the 'user' property. The label for the field is retrieved from a ResourceBundle using the 'key' attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/textfield-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:textfield key=\"user\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Handling in Java Action Class\nDESCRIPTION: This Java code snippet demonstrates how to implement the UploadedFilesAware interface in an Action class to handle file uploads. It shows how to access the uploaded file's properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class UploadAction extends ActionSupport implements UploadedFilesAware {\n   private UploadedFile uploadedFile;\n   private String contentType;\n   private String fileName;\n   private String originalName;\n\n   @Override\n   public void withUploadedFiles(List<UploadedFile> uploadedFiles) {\n      if (!uploadedFiles.isEmpty()) {\n         this.uploadedFile = uploadedFiles.get(0);\n         this.fileName = uploadedFile.getName();\n         this.contentType = uploadedFile.getContentType();\n         this.originalName = uploadedFile.getOriginalName();\n      }\n   }\n\n   public String execute() {\n      //do something with the file\n      return SUCCESS;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Namespace Annotation in Struts\nDESCRIPTION: The @Namespace annotation is used at the class level to explicitly define an Action's namespace. It requires a single string parameter that specifies the namespace to use for the annotated action class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/namespace-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@Namespace\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Logic Bean with CDI for Struts 2\nDESCRIPTION: A session-scoped CDI bean that implements the game logic for the NumberGuess application. It tracks the current state of the game, handles guesses, and uses CDI injection for random number generation and configuration parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2.example.cdi;\n\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.SessionScoped;\nimport javax.enterprise.inject.Instance;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport java.io.Serializable;\n\n@Named\n@SessionScoped\npublic class Game implements Serializable {\n\n    public static final String CORRECT = \"Correct !!!\";\n    public static final String WRONG = \"Sorry, wrong number !!!\";\n\n    private int number;\n    private int guess;\n    private int smallest;\n\n    @MaxNumber\n    @Inject\n    private int maxNumber;\n\n    private int biggest;\n    private int remainingGuesses;\n\n    @Random\n    @Inject\n    Instance<Integer> randomNumber;\n\n    public Game() {\n    }\n\n    public int getNumber() {\n        return number;\n    }\n\n    public int getGuess() {\n        return guess;\n    }\n\n    public void setGuess( int guess ) {\n        this.guess = guess;\n    }\n\n    public int getSmallest() {\n        return smallest;\n    }\n\n    public int getBiggest() {\n        return biggest;\n    }\n\n    public int getRemainingGuesses() {\n        return remainingGuesses;\n    }\n\n    public String check() throws InterruptedException {\n        if (guess > number) {\n            biggest = guess - 1;\n        }\n        if (guess < number) {\n            smallest = guess + 1;\n        }\n        if (guess == number) {\n            return CORRECT;\n        }\n        remainingGuesses--;\n        return WRONG;\n    }\n\n    @PostConstruct\n    public void reset() {\n        this.smallest = 0;\n        this.guess = 0;\n        this.remainingGuesses = 10;\n        this.biggest = maxNumber;\n        this.number = randomNumber.get();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Class for Struts 2 ModelDriven Action\nDESCRIPTION: This example shows a Gangster model class that will be used with the ModelDriven pattern. It implements Serializable and contains properties with getters and setters that will be bound to request parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/model-driven.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Gangster implements Serializable {\n    private String name;\n    private int age;\n    private String description;\n    private boolean bustedBefore;\n\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public boolean isBustedBefore() {\n        return bustedBefore;\n    }\n    public void setBustedBefore(boolean bustedBefore) {\n        this.bustedBefore = bustedBefore;\n    }\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts2 Validators in XML\nDESCRIPTION: This XML configuration defines validators for the Struts2 action. It includes a required string validator for the name field and an integer range validator for the age field.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/basic-validation.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n    Add the following DOCTYPE declaration as first line of your XXX-validation.xml file:\n    <!DOCTYPE validators PUBLIC \"-//Apache Struts//XWork Validator 1.0.2//EN\" \"http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd\">\n-->\n<validators>\n    <field name=\"name\">\n        <field-validator type=\"requiredstring\">\n            <message>You must enter a name</message>\n        </field-validator>\n    </field>\n    <field name=\"age\">\n        <field-validator type=\"int\">\n            <param name=\"min\">13</param>\n            <param name=\"max\">19</param>\n            <message>Only people ages 13 to 19 may take this quiz</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Result Element Without Defaults in Struts Configuration\nDESCRIPTION: XML configuration for a result element specifying both name and type attributes explicitly.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"dispatcher\">\n    <param name=\"location\">/ThankYou.jsp</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Defining Convention Plugin Beans in XML\nDESCRIPTION: XML configuration defining the default beans used by the Struts Convention Plugin. These beans handle action configuration, action naming, result mapping, interceptor mapping, and conventions service.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"org.apache.struts2.convention.ActionConfigBuilder\" name=\"convention\" \n  class=\"org.apache.struts2.convention.PackageBasedActionConfigBuilder\"/>\n<bean type=\"org.apache.struts2.convention.ActionNameBuilder\" name=\"convention\" \n  class=\"org.apache.struts2.convention.SEOActionNameBuilder\"/>\n<bean type=\"org.apache.struts2.convention.ResultMapBuilder\" name=\"convention\" \n  class=\"org.apache.struts2.convention.DefaultResultMapBuilder\"/>\n<bean type=\"org.apache.struts2.convention.InterceptorMapBuilder\" name=\"convention\" \n  class=\"org.apache.struts2.convention.DefaultInterceptorMapBuilder\"/>\n<bean type=\"org.apache.struts2.convention.ConventionsService\" name=\"convention\" \n  class=\"org.apache.struts2.convention.ConventionsServiceImpl\"/>\n\n<constant name=\"struts.convention.actionConfigBuilder\" value=\"convention\"/>\n<constant name=\"struts.convention.actionNameBuilder\" value=\"convention\"/>\n<constant name=\"struts.convention.resultMapBuilder\" value=\"convention\"/>\n<constant name=\"struts.convention.interceptorMapBuilder\" value=\"convention\"/>\n<constant name=\"struts.convention.conventionsService\" value=\"convention\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Simple Package in Struts XML\nDESCRIPTION: This snippet demonstrates how to configure a package in struts.xml. It includes action definitions, interceptor references, and result configurations for an employee management system.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/package-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n  <package name=\"employee\" extends=\"struts-default\" namespace=\"/employee\">\n    <default-interceptor-ref name=\"crudStack\"/>\n\n    <action name=\"list\" method=\"list\"\n      class=\"org.apache.struts2.showcase.action.EmployeeAction\" >\n        <result>/empmanager/listEmployees.jsp</result>\n        <interceptor-ref name=\"basicStack\"/>\n    </action>\n    <action name=\"edit-*\" class=\"org.apache.struts2.showcase.action.EmployeeAction\">\n      <param name=\"empId\">{1}</param>\n      <result>/empmanager/editEmployee.jsp</result>\n        <interceptor-ref name=\"crudStack\">\n          <param name=\"validation.excludeMethods\">execute</param>\n        </interceptor-ref>\n      </action>\n      <action name=\"save\" method=\"save\"\n          class=\"org.apache.struts2.showcase.action.EmployeeAction\" >\n        <result name=\"input\">/empmanager/editEmployee.jsp</result>\n        <result type=\"redirect\">edit-${currentEmployee.empId}.action</result>\n      </action>\n      <action name=\"delete\" method=\"delete\"\n        class=\"org.apache.struts2.showcase.action.EmployeeAction\" >\n        <result name=\"error\">/empmanager/editEmployee.jsp</result>\n        <result type=\"redirect\">edit-${currentEmployee.empId}.action</result>\n      </action>\n  </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Wildcard Result Configuration in Struts\nDESCRIPTION: XML configuration showing the special '*' result that acts as a fallback when no matching result name is found.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"Hello\">\n    <result>/hello/Result.jsp</result>\n    <result name=\"error\">/hello/Error.jsp</result>\n    <result name=\"input\">/hello/Input.jsp</result>\n    <result name=\"*\">/hello/Other.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Filter Interceptor in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure the Parameter Filter Interceptor in a Struts action. It shows the interceptor declaration and its usage within an action, including how to specify blocked parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/parameter-filter-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n    ... \n    <interceptor name=\"parameterFilter\" class=\"com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor\"/>\n    ... \n</interceptors>\n\n<action ....> \n     ... \n     <interceptor-ref name=\"parameterFilter\"> \n          <param name=\"blocked\">person,person.address.createDate,personDao</param> \n     </interceptor-ref> \n     ... \n</action>\n```\n\n----------------------------------------\n\nTITLE: Displaying Exception Information in JSP with Struts 2 Tags\nDESCRIPTION: This HTML and Struts 2 tag snippet shows how to display exception information in a JSP page. It uses s:property tags to access the exception and exceptionStack values made available by the exception interceptor.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/exception-handling.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h4>The application has malfunctioned.</h4>\n\n<p>Please contact technical support with the following information:</p> \n\n<h4>Exception Name: <s:property value=\"exception\" /> </h4>\n\n<h4>Exception Details: <s:property value=\"exceptionStack\" /></h4>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum String Length for Multipart Fields in Struts XML\nDESCRIPTION: Sets the maximum size for normal string fields in multipart requests to prevent memory exhaustion attacks. The default is 4096 bytes, but can be increased through this configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.multipart.maxStringLength\" value=\"10000\"/>\n\n    <action name=\"doUpload\" class=\"com.example.UploadAction\">\n          ...\n    </action>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Unknown Handler Stack in Struts XML\nDESCRIPTION: Configuration for creating a stack of multiple Unknown Handlers that will be called in sequence until one handles the request. Demonstrates how to define multiple handlers and arrange them in a specific order.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/unknown-handlers.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"com.opensymphony.xwork2.UnknownHandler\" name=\"handler1\" class=\"com.opensymphony.xwork2.config.providers.SomeUnknownHandler\"/>\n<bean type=\"com.opensymphony.xwork2.UnknownHandler\" name=\"handler2\" class=\"com.opensymphony.xwork2.config.providers.SomeUnknownHandler\"/>\n\n<unknown-handler-stack>\n   <unknown-handler-ref name=\"handler1\" />\n   <unknown-handler-ref name=\"handler2\" />\n</unknown-handler-stack>\n```\n\n----------------------------------------\n\nTITLE: Result Element Using Some Defaults in Struts Configuration\nDESCRIPTION: XML configuration for a result element using the default name (success) and type (dispatcher).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<result>\n    <param name=\"location\">/ThankYou.jsp</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Simple JSP for Actionless Hello World Example\nDESCRIPTION: Basic JSP file that demonstrates the Convention plugin's ability to render results without actions. This file would be placed in WEB-INF/content/hello-world.jsp.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<html>\n<body>\n  Hello world!\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Validation in Struts 2 XML\nDESCRIPTION: XML configuration that implements both required string and email validators for an email field. This validates that the user has entered an email address and that it follows a valid email format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation-using-xml.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<validator type=\"requiredstring\">\n    <param name=\"fieldname\">personBean.email</param>\n    <message>Email address is required.</message>\n</validator>\n<validator type=\"email\">\n    <param name=\"fieldname\">personBean.email</param>\n    <message>Email address not valid.</message>\n</validator>\n```\n\n----------------------------------------\n\nTITLE: Complete Struts Interceptor Stack Configuration with Per-Method Validation\nDESCRIPTION: Complete XML configuration example showing how to update the default Struts interceptor stack to enable per-method validation while excluding specific methods from the validation process.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validations-annotation.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <package name=\"default\" extends=\"struts-default\">\n    <interceptors>\n      <interceptor-stack name=\"content\">\n        <interceptor-ref name=\"exception\"/>\n                <interceptor-ref name=\"alias\"/>\n                <interceptor-ref name=\"servletConfig\"/>\n                <interceptor-ref name=\"prepare\"/>\n                <interceptor-ref name=\"i18n\"/>\n                <interceptor-ref name=\"chain\"/>\n                <interceptor-ref name=\"debugging\"/>\n                <interceptor-ref name=\"profiling\"/>\n                <interceptor-ref name=\"scopedModelDriven\"/>\n                <interceptor-ref name=\"modelDriven\"/>\n                <interceptor-ref name=\"actionFileUpload\"/>\n                <interceptor-ref name=\"checkbox\"/>\n                <interceptor-ref name=\"staticParams\"/>\n                <interceptor-ref name=\"params\">\n                  <param name=\"excludeParams\">dojo\\..*</param>\n                </interceptor-ref>\n                <interceptor-ref name=\"conversionError\"/>\n                <interceptor-ref name=\"validation\">\n  \t            <param name=\"validateAnnotatedMethodOnly\">true</param>                \n                    <param name=\"excludeMethods\">input,back,cancel,browse</param>\n                </interceptor-ref>\n                <interceptor-ref name=\"workflow\">\n                    <param name=\"excludeMethods\">input,back,cancel,browse</param>\n                </interceptor-ref>\n      </interceptor-stack>\n    </interceptors>\n    <default-interceptor-ref name=\"default\"/>\n  </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Checkbox Tag in HTML Forms\nDESCRIPTION: The Struts 2 checkbox tag creates an HTML input checkbox that can be checked or unchecked based on a boolean method return value. The key attribute specifies which method to call to determine the checkbox state.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<s:checkbox key=\"personBean.over21\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Index JSP with Struts 2 URL Action Link\nDESCRIPTION: This JSP serves as the application's entry point, displaying a welcome message and a link to trigger the hello action. It uses the Struts 2 URL tag to generate the proper URL that will invoke the HelloWorldAction when clicked.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/hello-world-using-struts2.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<!DOCTYPE html>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <title>Basic Struts 2 Application - Welcome</title>\n    </head>\n    <body>\n        <h1>Welcome To Struts 2!</h1>\n        <p><a href=\"<s:url action='hello'/>\">Hello World</a></p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Result in Struts XML\nDESCRIPTION: XML configuration to handle validation failure by redirecting back to the registration form when input validation fails.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"input\">/register.jsp</result>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple File Upload Action Using Lists in Java\nDESCRIPTION: Struts 2 Action class that handles multiple file uploads using Lists. The class defines List fields for file content, filenames, and content types, with corresponding getter and setter methods.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class MultipleFileUploadUsingListAction extends ActionSupport {\n    private List<File> uploads = new ArrayList<File>();\n    private List<String> uploadFileNames = new ArrayList<String>();\n    private List<String> uploadContentTypes = new ArrayList<String>();\n\n    public List<File> getUpload() {\n        return this.uploads;\n    }\n\n    @StrutsParameter\n    public void setUpload(List<File> uploads) {\n        this.uploads = uploads;\n    }\n\n    public List<String> getUploadFileName() {\n        return this.uploadFileNames;\n    }\n\n    @StrutsParameter\n    public void setUploadFileName(List<String> uploadFileNames) {\n        this.uploadFileNames = uploadFileNames;\n    }\n\n    public List<String> getUploadContentType() {\n        return this.uploadContentTypes;\n    }\n\n    @StrutsParameter\n    public void setUploadContentType(List<String> contentTypes) {\n        this.uploadContentTypes = contentTypes;\n    }\n\n    public String upload() throws Exception {\n        System.out.println(\"\\n\\n upload1\");\n        System.out.println(\"files:\");\n        for (File u : uploads) {\n            System.out.println(\"*** \" + u + \"\\t\" + u.length());\n        }\n        System.out.println(\"filenames:\");\n        for (String n : uploadFileNames) {\n            System.out.println(\"*** \" + n);\n        }\n        System.out.println(\"content types:\");\n        for (String c : uploadContentTypes) {\n            System.out.println(\"*** \" + c);\n        }\n        System.out.println(\"\\n\\n\");\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Result Element Using More Defaults in Struts Configuration\nDESCRIPTION: Simplified XML configuration for a result element where the body content is interpreted as the location parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<result>/ThankYou.jsp</result>\n```\n\n----------------------------------------\n\nTITLE: Implementing Required String Validator in Struts 2 XML Validation\nDESCRIPTION: XML configuration for implementing a required string validator in Struts 2. This validator ensures that a user must enter a value for the firstName field in the form.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation-using-xml.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE validators PUBLIC \"-//Apache Struts//XWork Validator 1.0.3//EN\" \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\">\n\n<validators>\n    <validator type=\"requiredstring\">\n        <param name=\"fieldname\">personBean.firstName</param>\n        <message>First name is required.</message>\n    </validator>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Multiple Results Configuration in Struts\nDESCRIPTION: XML configuration showing multiple results for different outcome scenarios (default success, error, and input).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"Hello\">\n    <result>/hello/Result.jsp</result>\n    <result name=\"error\">/hello/Error.jsp</result>\n    <result name=\"input\">/hello/Input.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating HelloWorld JSP View in Struts 2\nDESCRIPTION: This JSP serves as the view component in the MVC pattern. It uses Struts 2 tags (with the s: prefix) to display the message stored in the MessageStore object. The property tag accesses the message by calling the getMessageStore() and getMessage() methods.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/hello-world-using-struts2.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<!DOCTYPE html>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h2><s:property value=\"messageStore.message\" /></h2>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Internationalizing UI Tags with Key Attribute in Struts 2\nDESCRIPTION: Demonstrates how to use the key attribute in UI tags like textfield to automatically retrieve localized labels from resource bundles.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<s:textfield key=\"some.key\" name=\"textfieldName\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Interceptor for Per-Method Validation in XML\nDESCRIPTION: XML configuration for enabling per-method validation in Struts by setting validateAnnotatedMethodOnly parameter to true and excluding specific methods from validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validations-annotation.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-ref name=\"validation\">\n  <param name=\"validateAnnotatedMethodOnly\">true</param>                \n  <param name=\"excludeMethods\">input,back,cancel,browse</param>\n</interceptor-ref>\n```\n\n----------------------------------------\n\nTITLE: Using @Action Annotation in Struts 2\nDESCRIPTION: Example of using the @Action annotation to map a specific URL pattern to an action method. This annotation allows explicit mapping of 'register-input.action' to the input() method of RegisterAction class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/annotations.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Action(\"register-input\")\npublic String input() throws Exception {\n    logger.info(\"In input method of class Register\");\n\n    return INPUT;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Local Exception Mappings in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure both global and local exception mappings in the struts.xml file. It includes global results, global exception mappings, and a specific action with its own exception mapping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/exception-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <package name=\"default\">\n        ...\n        <global-results>\n            <result name=\"login\" type=\"redirect\">/Login.action</result>\n            <result name=\"Exception\">/Exception.jsp</result>\n        </global-results>\n\n        <global-exception-mappings>\n            <exception-mapping exception=\"java.sql.SQLException\" result=\"SQLException\"/>\n            <exception-mapping exception=\"java.lang.Exception\" result=\"Exception\"/>\n        </global-exception-mappings>\n        ...\n        <action name=\"DataAccess\" class=\"com.company.DataAccess\">\n            <exception-mapping exception=\"com.company.SecurityException\" result=\"login\"/>\n            <result name=\"SQLException\" type=\"chain\">SQLExceptionAction</result>\n            <result>/DataAccess.jsp</result>\n        </action>\n        ...\n    </package>\n</xwork>\n```\n\n----------------------------------------\n\nTITLE: Defining AnnotationValidationInterceptor in Struts 2 XML\nDESCRIPTION: This XML snippet shows how to define the AnnotationValidationInterceptor, which allows turning off validation for specific methods using the @SkipValidation annotation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor name=\"validation\" class=\"org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Validation Action Class in Java\nDESCRIPTION: This Java class defines an action with various form fields and validation annotations. It demonstrates the use of different validators like RequiredFieldValidator, EmailValidator, IntRangeFieldValidator, etc.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AjaxFormSubmitAction extends ActionSupport {\n    private String requiredValidatorField = null;\n    private String requiredStringValidatorField = null;\n    private Integer integerValidatorField = null;\n    private Date dateValidatorField = null;\n    private String emailValidatorField = null;\n    private String urlValidatorField = null;\n    private String stringLengthValidatorField = null;\n    private String regexValidatorField = null;\n    private String fieldExpressionValidatorField = null;\n    @Override\n    public void validate() {\n        if (hasFieldErrors()) {\n            addActionError(\"Errors present!\");\n        }\n    }\n    public Date getDateValidatorField() {\n        return dateValidatorField;\n    }\n    @DateRangeFieldValidator(\n        min=\"01/01/1990\", \n        max=\"01/01/2000\", \n        message=\"must be a min 01-01-1990 max 01-01-2000 if supplied\")\n    public void setDateValidatorField(Date dateValidatorField) {\n        this.dateValidatorField = dateValidatorField;\n    }\n    public String getEmailValidatorField() {\n        return emailValidatorField;\n    }\n    @EmailValidator(message=\"must be a valid email if supplied\")\n    public void setEmailValidatorField(String emailValidatorField) {\n        this.emailValidatorField = emailValidatorField;\n    }\n    public Integer getIntegerValidatorField() {\n        return integerValidatorField;\n    }\n    @IntRangeFieldValidator(min=\"1\", max=\"10\", message=\"must be integer min 1 max 10 if supplied\")\n    public void setIntegerValidatorField(Integer integerValidatorField) {\n        this.integerValidatorField = integerValidatorField;\n    }\n    public String getRegexValidatorField() {\n        return regexValidatorField;\n    }\n    @RegexFieldValidator(\n        regex=\"[^<>]+\", \n        message=\"regexValidatorField must match a regexp (.*\\\\.txt) if specified\")\n    public void setRegexValidatorField(String regexValidatorField) {\n        this.regexValidatorField = regexValidatorField;\n    }\n    public String getRequiredStringValidatorField() {\n        return requiredStringValidatorField;\n    }\n    @RequiredStringValidator(trim=true, message=\"required and must be string\")\n    public void setRequiredStringValidatorField(String requiredStringValidatorField) {\n        this.requiredStringValidatorField = requiredStringValidatorField;\n    }\n    public String getRequiredValidatorField() {\n        return requiredValidatorField;\n    }\n    @RequiredFieldValidator(message=\"required\")\n    public void setRequiredValidatorField(String requiredValidatorField) {\n        this.requiredValidatorField = requiredValidatorField;\n    }\n    public String getStringLengthValidatorField() {\n        return stringLengthValidatorField;\n    }\n    @StringLengthFieldValidator(\n        minLength=\"2\", \n        maxLength=\"4\", \n        trim=true, \n        message=\"must be a String of a specific greater than 1 less than 5 if specified\")\n    public void setStringLengthValidatorField(String stringLengthValidatorField) {\n        this.stringLengthValidatorField = stringLengthValidatorField;\n    }\n    public String getFieldExpressionValidatorField() {\n        return fieldExpressionValidatorField;\n    }\n    @FieldExpressionValidator(\n        expression = \"(fieldExpressionValidatorField == requiredValidatorField)\", \n        message = \"must be the same as the Required Validator Field if specified\")\n    public void setFieldExpressionValidatorField(\n            String fieldExpressionValidatorField) {\n        this.fieldExpressionValidatorField = fieldExpressionValidatorField;\n    }\n    public String getUrlValidatorField() {\n        return urlValidatorField;\n    }\n    @UrlValidator(message=\"must be a valid url if supplied\")\n    public void setUrlValidatorField(String urlValidatorField) {\n        this.urlValidatorField = urlValidatorField;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variables using Struts Set Tag in JSP\nDESCRIPTION: Examples showing two ways to use the Struts set tag: assigning a value from an expression and using body content. The first example sets a variable from a person's name property, while the second sets a variable with a direct string value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/set-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:set var=\"personName\" value=\"person.name\"/>\nHello, <s:property value=\"#personName\"/>\n\n<s:set var=\"janesName\">Jane Doe</s:set>\n<s:property value=\"#janesName\"/>\n```\n\n----------------------------------------\n\nTITLE: Global Results Configuration in Struts\nDESCRIPTION: XML configuration for defining global results that can be shared across multiple actions within a package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<global-results>\n    <result name=\"error\">/Error.jsp</result>\n    <result name=\"invalid.token\">/Error.jsp</result>\n    <result name=\"login\" type=\"redirectAction\">Logon!input</result>\n</global-results>\n```\n\n----------------------------------------\n\nTITLE: Parameterized Field Validator XML\nDESCRIPTION: XML configuration for a required string validator with parameterized message.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"username\">\n    <field-validator type=\"requiredstring\">\n        <message key=\"errors.required\">\n            <param name=\"0\">getText('username.field.name')</param>\n        </message>\n    </field-validator>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Disabling File Upload Support in Struts XML\nDESCRIPTION: Completely disables the file upload mechanism in Struts. When enabled, Struts will ignore Content-Type headers and treat each request as an ordinary HTTP request without multipart handling.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.multipart.enabled\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Interceptor Interface in Java for Apache Struts\nDESCRIPTION: This snippet shows the Interceptor interface that must be implemented by all interceptors in Apache Struts. It includes methods for initialization, destruction, and the main intercept logic.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/writing-interceptors.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface Interceptor extends Serializable {\n\n    void destroy();\n\n    void init();\n\n    String intercept(ActionInvocation invocation) throws Exception;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Select Tag with Object-Backed List in JSP\nDESCRIPTION: Demonstrates how to use the Struts 2 select tag with an object-backed list for state selection. It uses 'listKey' and 'listValue' attributes to specify which object properties to use for option values and display text.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"personBean.residency\" list=\"states\" listKey=\"stateAbbr\" listValue=\"stateName\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Validation in Struts XML\nDESCRIPTION: Examples of URL validation configuration using both Plain Validator and Field Validator syntax. The validator checks if fields like 'myHomePage' contain valid URLs. Supports custom regex patterns through urlRegexExpression or urlRegex parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/url-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"url\">\n        <param name=\"fieldName\">myHomePage</param>\n        <message>Invalid homepage url</message>\n    </validator>\n\n    <!-- Field Validator Syntax -->\n    <field name=\"myHomepage\">\n        <field-validator type=\"url\">\n            <message>Invalid homepage url</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Result Configuration Using EL Expression\nDESCRIPTION: XML configuration showing how to use an EL expression to access an Action property for determining the result value at runtime.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"fragment\" class=\"FragmentAction\">\n    <result name=\"next\" type=\"redirectAction\">${nextAction}</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bean Validation in Struts Action Class\nDESCRIPTION: This Java class demonstrates the usage of Bean Validation annotations in a Struts Action. It includes various validation constraints on fields, custom messages, and cross-field validations using @FieldMatch and @ScriptAssert annotations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/bean-validation/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts.beanvalidation.constraints.FieldMatch;\nimport org.apache.struts2.convention.annotation.Action;\nimport org.apache.struts2.convention.annotation.Namespace;\nimport org.apache.struts2.convention.annotation.ParentPackage;\nimport org.apache.struts2.convention.annotation.Result;\nimport org.apache.struts2.interceptor.validation.SkipValidation;\nimport org.hibernate.validator.constraints.Email;\nimport org.hibernate.validator.constraints.NotBlank;\nimport org.hibernate.validator.constraints.ScriptAssert;\nimport org.hibernate.validator.constraints.URL;\n\nimport javax.validation.constraints.*;\nimport java.util.Date;\n\n\n@Namespace(\"/bean-validation\")\n@ParentPackage(\"my-bean-validation\")\n@Action(results = {\n        @Result(name = \"input\", location = \"bean-validation.jsp\"),\n        @Result(name = \"success\", location = \"/WEB-INF/validation/successFieldValidatorsExample.jsp\")\n})\n@FieldMatch(first = \"fieldExpressionValidatorField\", second = \"requiredValidatorField\", message = \"requiredValidatorField and fieldExpressionValidatorField are not matching\")\n@ScriptAssert(lang = \"javascript\", script = \"_this.dateValidatorField != null && _this.dateValidatorField.before(new java.util.Date())\", message = \"Date need to before now\")\npublic class BeanValidationExampleAction extends ActionSupport {\n    @NotNull\n    private String requiredValidatorField = null;\n\n    @NotBlank\n    private String requiredStringValidatorField = null;\n\n    @NotNull(message = \"your.text.key.here\")\n    @Min(1)\n    @Max(10)\n    private Integer integerValidatorField = null;\n\n    @NotNull\n    private Date dateValidatorField = null;\n\n    @NotNull\n    @Size(min = 4, max = 64)\n    @Email\n\n    private String emailValidatorField = null;\n\n    @NotNull\n    @Size(min = 4, max = 64)\n    @URL\n    private String urlValidatorField = null;\n\n    @NotNull\n    @Size(min = 2, max = 4)\n    private String stringLengthValidatorField = null;\n\n    @Pattern(regexp = \"[^<>]+\")\n    private String regexValidatorField = null;\n\n    private String fieldExpressionValidatorField = null;\n\n\n    public Date getDateValidatorField() {\n\n        return dateValidatorField;\n    }\n\n    public void setDateValidatorField(Date dateValidatorField) {\n        this.dateValidatorField = dateValidatorField;\n    }\n\n    public String getEmailValidatorField() {\n        return emailValidatorField;\n    }\n\n    public void setEmailValidatorField(String emailValidatorField) {\n        this.emailValidatorField = emailValidatorField;\n    }\n\n    public Integer getIntegerValidatorField() {\n        return integerValidatorField;\n    }\n\n    public void setIntegerValidatorField(Integer integerValidatorField) {\n        this.integerValidatorField = integerValidatorField;\n    }\n\n    public String getRegexValidatorField() {\n        return regexValidatorField;\n    }\n\n    public void setRegexValidatorField(String regexValidatorField) {\n        this.regexValidatorField = regexValidatorField;\n    }\n\n    public String getRequiredStringValidatorField() {\n        return requiredStringValidatorField;\n    }\n\n    public void setRequiredStringValidatorField(String requiredStringValidatorField) {\n        this.requiredStringValidatorField = requiredStringValidatorField;\n    }\n\n    public String getRequiredValidatorField() {\n        return requiredValidatorField;\n    }\n\n    public void setRequiredValidatorField(String requiredValidatorField) {\n        this.requiredValidatorField = requiredValidatorField;\n    }\n\n    public String getStringLengthValidatorField() {\n        return stringLengthValidatorField;\n    }\n\n    public void setStringLengthValidatorField(String stringLengthValidatorField) {\n        this.stringLengthValidatorField = stringLengthValidatorField;\n    }\n\n    public String getFieldExpressionValidatorField() {\n        return fieldExpressionValidatorField;\n    }\n\n    public void setFieldExpressionValidatorField(\n            String fieldExpressionValidatorField) {\n        this.fieldExpressionValidatorField = fieldExpressionValidatorField;\n    }\n\n    public String getUrlValidatorField() {\n        return urlValidatorField;\n    }\n\n    public void setUrlValidatorField(String urlValidatorField) {\n        this.urlValidatorField = urlValidatorField;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Allowed File Types in Struts Upload Action\nDESCRIPTION: Limits the types of files that can be uploaded by specifying allowed MIME types as interceptor parameters. This creates field errors when files of non-allowed types are uploaded.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"doUpload\" class=\"com.example.UploadAction\">\n    <interceptor-ref name=\"basicStack\"/>\n    <interceptor-ref name=\"actionFileUpload\">\n        <param name=\"allowedTypes\">image/jpeg,image/gif</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"validation\"/>\n    <interceptor-ref name=\"workflow\"/>\n\n    <result name=\"success\">good_result.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating JUnit Tests for Struts Actions\nDESCRIPTION: Java test class extending StrutsTestCase to test Struts actions. This example demonstrates different ways to test actions, including testing action mappings, executing actions via ActionProxy, testing action output, and accessing values from the value stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/junit/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2;\n\nimport org.apache.struts2.dispatcher.mapper.ActionMapping;\n\nimport java.util.HashMap;\nimport java.io.UnsupportedEncodingException;\n\nimport com.opensymphony.xwork2.ActionProxy;\nimport com.opensymphony.xwork2.Action;\n\nimport javax.servlet.ServletException;\n\npublic class StrutsTestCaseTest extends StrutsTestCase {\n    public void testGetActionMapping() {\n        ActionMapping mapping = getActionMapping(\"/test/testAction.action\");\n        assertNotNull(mapping);\n        assertEquals(\"/test\", mapping.getNamespace());\n        assertEquals(\"testAction\", mapping.getName());\n    }\n\n    public void testGetActionProxy() throws Exception {\n        //set parameters before calling getActionProxy\n        request.setParameter(\"name\", \"FD\");\n        \n        ActionProxy proxy = getActionProxy(\"/test/testAction.action\");\n        assertNotNull(proxy);\n\n        TestAction action = (TestAction) proxy.getAction();\n        assertNotNull(action);\n\n        String result = proxy.execute();\n        assertEquals(Action.SUCCESS, result);\n        assertEquals(\"FD\", action.getName());\n    }\n\n    public void testExecuteAction() throws ServletException, UnsupportedEncodingException {\n        String output = executeAction(\"/test/testAction.action\");\n        assertEquals(\"Hello\", output);\n    }\n\n    public void testGetValueFromStack() throws ServletException, UnsupportedEncodingException {\n        request.setParameter(\"name\", \"FD\");\n        executeAction(\"/test/testAction.action\");\n        String name = (String) findValueAfterExecute(\"name\");\n        assertEquals(\"FD\", name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Field Validator XML Example\nDESCRIPTION: Examples of non-field validators using expression and required types.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<validator type=\"expression\"> \n    <param name=\"expression\">foo gt bar</param> \n    <message>foo must be great than bar.</message> \n</validator> \n\n<validator type=\"required\"> \n    <param name=\"fieldName\">bar</param> \n    <message>You must enter a value for bar.</message> \n</validator> \n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form with Struts 2 Tags\nDESCRIPTION: Example of creating an HTML form for file uploads using Struts 2 tag libraries. The form includes the required 'multipart/form-data' encoding type which is necessary for file uploads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<s:form action=\"doUpload\" method=\"post\" enctype=\"multipart/form-data\">\n    <s:file name=\"upload\" label=\"File\"/>\n    <s:submit/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Action Class in Java\nDESCRIPTION: Example of a Struts 2 Action class that handles file uploads. This class includes the necessary setter methods for the file content, content type, and filename that the FileUploadInterceptor will call when processing a file upload.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport java.io.File;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class UploadAction extends ActionSupport {\n    private File file;\n    private String contentType;\n    private String filename;\n\n    @StrutsParameter\n    public void setUpload(File file) {\n        this.file = file;\n    }\n\n    @StrutsParameter\n    public void setUploadContentType(String contentType) {\n        this.contentType = contentType;\n    }\n\n    @StrutsParameter\n    public void setUploadFileName(String filename) {\n        this.filename = filename;\n    }\n\n    public String execute() {\n        //...\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: XML configuration snippet showing how to add the Struts2 JSON plugin dependency to a Maven project.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n   ...\n   <dependency>\n       <groupId>org.apache.struts</groupId>\n       <artifactId>struts2-json-plugin</artifactId>\n       <version>STRUTS_VERSION</version>\n   </dependency>\n   ...\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Implementing EmailValidator Annotation in Java\nDESCRIPTION: Example of how to use the EmailValidator annotation to validate email address fields. The annotation is applied at method level and includes parameters for custom messages, i18n key, and short-circuit behavior.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/email-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@EmailValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptor Execution Order\nDESCRIPTION: Demonstrates how to define the execution order of interceptors in a stack. The order is crucial as some interceptors may interrupt the processing chain.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-stack name=\"xaStack\">\n    <interceptor-ref name=\"thisWillRunFirstInterceptor\"/>\n    <interceptor-ref name=\"thisWillRunNextInterceptor\"/>\n    <interceptor-ref name=\"followedByThisInterceptor\"/>\n    <interceptor-ref name=\"thisWillRunLastInterceptor\"/>\n</interceptor-stack>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Namespaces with XML\nDESCRIPTION: Example of Struts 2 namespace configuration showing three packages: a default namespace package, a root namespace package, and a custom namespace package (/barspace). This demonstrates how to organize actions across different namespaces to avoid conflicts.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/namespace-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"default\">\n    <action name=\"foo\" class=\"mypackage.simpleAction\">\n        <result name=\"success\" type=\"dispatcher\">greeting.jsp</result>\n    </action>\n\n    <action name=\"bar\" class=\"mypackage.simpleAction\">\n        <result name=\"success\" type=\"dispatcher\">bar1.jsp</result>\n    </action>\n</package>\n\n<package name=\"mypackage1\" namespace=\"/\">\n    <action name=\"moo\" class=\"mypackage.simpleAction\">\n        <result name=\"success\" type=\"dispatcher\">moo.jsp</result>\n    </action>\n</package>\n\n<package name=\"mypackage2\" namespace=\"/barspace\">\n    <action name=\"bar\" class=\"mypackage.simpleAction\">\n        <result name=\"success\" type=\"dispatcher\">bar2.jsp</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in Struts 2 Action Class\nDESCRIPTION: Demonstrates validation of form fields including required fields and age restriction checks. Uses addFieldError method to register validation errors that will be displayed on the form.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void validate(){\n    if (personBean.getFirstName().length() == 0) {\n        addFieldError(\"personBean.firstName\", \"First name is required.\");\n    }\n\n    if (personBean.getEmail().length() == 0) {\n        addFieldError(\"personBean.email\", \"Email is required.\");\n    }\n\n    if (personBean.getAge() < 18) {\n        addFieldError(\"personBean.age\", \"Age is required and must be 18 or older\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Validators with @Validations Annotation in Java\nDESCRIPTION: Example of using the @Validations annotation to apply multiple validators to a method, including required fields, emails, URLs, string length, range checks, and expressions validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validations-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @Validations(\n           requiredFields =\n                   {@RequiredFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"customfield\", message = \"You must enter a value for field.\")},\n           requiredStrings =\n                   {@RequiredStringValidator(type = ValidatorType.SIMPLE, fieldName = \"stringisrequired\", message = \"You must enter a value for string.\")},\n           emails =\n                   { @EmailValidator(type = ValidatorType.SIMPLE, fieldName = \"emailaddress\", message = \"You must enter a value for email.\")},\n           urls =\n                   { @UrlValidator(type = ValidatorType.SIMPLE, fieldName = \"hreflocation\", message = \"You must enter a value for email.\")},\n           stringLengthFields =\n                   {@StringLengthFieldValidator(type = ValidatorType.SIMPLE, trim = true, minLength=\"10\" , maxLength = \"12\", fieldName = \"needstringlength\", message = \"You must enter a stringlength.\")},\n           intRangeFields =\n                   { @IntRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"intfield\", min = \"6\", max = \"10\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")},\n           longRangeFields =\n                   { @LongRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"intfield\", min = \"6\", max = \"10\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")},\n           shortRangeFields =\n                   { @ShortRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"shortfield\", min = \"1\", max = \"128\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")},\n           dateRangeFields =\n                   {@DateRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"datefield\", min = \"-1\", max = \"99\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")},\n           expressions = {\n               @ExpressionValidator(expression = \"foo > 1\", message = \"Foo must be greater than Bar 1. Foo = ${foo}, Bar = ${bar}.\"),\n               @ExpressionValidator(expression = \"foo > 2\", message = \"Foo must be greater than Bar 2. Foo = ${foo}, Bar = ${bar}.\"),\n               @ExpressionValidator(expression = \"foo > 3\", message = \"Foo must be greater than Bar 3. Foo = ${foo}, Bar = ${bar}.\"),\n               @ExpressionValidator(expression = \"foo > 4\", message = \"Foo must be greater than Bar 4. Foo = ${foo}, Bar = ${bar}.\"),\n               @ExpressionValidator(expression = \"foo > 5\", message = \"Foo must be greater than Bar 5. Foo = ${foo}, Bar = ${bar}.\")\n   }\n   )\n   public String execute() throws Exception {\n       return SUCCESS;\n   }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular Expression Validation in Struts 2 XML\nDESCRIPTION: XML configuration for validating a phone number field using regex validation. This ensures the phone number follows the format 999-999-9999 by applying a regular expression pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation-using-xml.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<validator type=\"requiredstring\">\n    <param name=\"fieldname\">personBean.phoneNumber</param>\n    <message>Phone number is required.</message>\n</validator>\n<validator type=\"regex\">\n    <param name=\"fieldname\">personBean.phoneNumber</param>\n    <param name=\"regex\"><![CDATA[\\d{3}-\\d{3}-\\d{4}]]></param>\n    <message>Phone number must be entered as 999-999-9999.</message>\n</validator>\n```\n\n----------------------------------------\n\nTITLE: Creating Thank You Page in Struts 2 JSP\nDESCRIPTION: JSP view template that displays a thank you message after successful registration. Uses Struts tags to display the registered person's information and provides navigation back to home page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/processing-forms.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>Registration Successful</title>\n  </head>\n  <body>\n    <h3>Thank you for registering for a prize.</h3>\n\n    <p>Your registration information: <s:property value=\"personBean\" /> </p>\n\n    <p><a href=\"<s:url action='index' />\" >Return to home page</a>.</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring StringLength Validator in Apache Struts XML\nDESCRIPTION: Examples showing three ways to configure the StringLength validator: using Plain Validator Syntax, Field Validator Syntax, and Field Validator Syntax with expressions. The validator checks that string fields meet specified minimum and maximum length requirements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/stringlength-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"stringlength\">\n        <param name=\"fieldName\">myPurchaseCode</param>\n        <param name=\"minLength\">10</param>\n        <param name=\"maxLength\">10</param>\n        <param name=\"trim\">true</param>\n        <message>Your purchase code needs to be 10 characters long</message>\n    </validator>\n \n    <!-- Field Validator Syntax -->\n    <field name=\"myPurchaseCode\">\n        <field-validator type=\"stringlength\">\n             <param name=\"minLength\">10</param>\n             <param name=\"maxLength\">10</param>\n             <param name=\"trim\">true</param>\n             <message>Your purchase code needs to be 10 characters long</message>\n        </field-validator>\n    </field>\n \n    <!-- Field Validator Syntax with expression -->\n    <field name=\"myPurchaseCode\">\n        <field-validator type=\"stringlength\">\n             <param name=\"minLengthExpression\">${minLengthValue}</param> <!-- will be evaluated as: Integer getMinLengthValue() -->\n             <param name=\"maxLengthExpression\">${maxLengthValue}</param> <!-- will be evaluated as: Integer getMaxLengthValue() -->\n             <param name=\"trimExpression\">${trimValue}</param> <!-- will be evaluated as: boolean getTrimValue() -->\n             <message>Your purchase code needs to be 10 characters long</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Mapping Interceptors in XML for Apache Struts Configuration\nDESCRIPTION: This XML snippet demonstrates how to declare and map interceptors in the Struts configuration file. It shows the structure for defining multiple interceptors within a package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/writing-interceptors.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n   ...\n\n   <package name=\"struts-default\">\n      <interceptors>\n         <interceptor name=\"alias\" class=\"com.opensymphony.xwork2.interceptor.AliasInterceptor\"/>\n         <interceptor name=\"autowiring\" class=\"com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor\"/>\n         ...\n      </interceptors>\n   </package>\n\n   ...\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Result Type in XML Configuration\nDESCRIPTION: Configuration example showing how to set a default result type for a package using the result-types element.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<result-types>\n   <result-type name=\"dispatcher\" default=\"true\" class=\"org.apache.struts2.dispatcher.ServletDispatcherResult\" />\n</result-types>\n```\n\n----------------------------------------\n\nTITLE: Implementing VisitorFieldValidator Annotation in Java\nDESCRIPTION: Example of using the VisitorFieldValidator annotation to validate object properties. This allows validation to be forwarded to object properties of an action using the objects' own validator files, supporting the ModelDriven development pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/visitor-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@VisitorFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, context = \"action alias\", appendPrefix = true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts2 Action Results in XML\nDESCRIPTION: This XML snippet demonstrates how to configure results for a Struts2 action in struts.xml. It includes results for success, error, and input scenarios, which is crucial for proper validation handling.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/basic-validation.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"HelloWorld\" class=\"tutorial.HelloWorld\">\n<result name=\"success\">/tutorial/createconfirm.jsp</result>\n<result name=\"error\">/tutorial/error.jsp</result>\n<result name=\"input\">/tutorial/create.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Anchor with Struts 'a' Tag in JSP\nDESCRIPTION: This snippet demonstrates how to use the Struts 'a' tag in combination with the 'url' tag to create an HTML anchor with additional parameters. It shows the best practice of creating a URL with parameters and then referencing it in the 'a' tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/a-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url var=\"testUrlId\" namespace=\"/subscriber\" action=\"customField\" method=\"delete\">\n    <s:param name=\"customFieldDefinition.id\" value=\"${id}\"/>\n</s:url>\n\n<s:a errorText=\"Sorry your request had an error.\" preInvokeJS=\"confirm('Are you sure you want to delete this item?')\" href=\"%{testUrlId}\">\n    <img src=\"<s:url value=\"/images/delete.gif\"/>\" border=\"none\"/>\n</s:a>\n\n<img xsrc=\"<s:url value=\"/images/delete.gif\"/>\" border=\"none\"/>\n\n<s:a><img xsrc=\"<s:url value=\"/images/delete.gif\"/>\" border=\"none\"/></s:a>\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Writer in Struts XML Configuration\nDESCRIPTION: Shows how to define a custom JSONWriter implementation in struts.xml. This allows for customization of the JSON serialization process by specifying a custom bean for the JSONWriter interface.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <bean type=\"org.apache.struts2.json.JSONWriter\" name=\"myJSONWriter\" class=\"com.mycompany.MyJSONWriter\"\n          scope=\"prototype\"/>\n    <constant name=\"struts.json.writer\" value=\"myJSONWriter\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Multiple Packages in Struts XML\nDESCRIPTION: This snippet shows how to configure a package that inherits from multiple parent packages. It extends both 'struts-default' and 'json-default', allowing the use of both standard Struts and JSON-specific features.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/package-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n  <package name=\"employee\" extends=\"struts-default, json-default\" namespace=\"/employee\">\n\n    <action name=\"list\" method=\"list\" class=\"org.apache.struts2.showcase.action.EmployeeAction\" >\n        <result>/empmanager/listEmployees.jsp</result>\n        <result type=\"json\">\n            <param name=\"root\">employees</param>\n        </result>\n    </action>\n\n  </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Parameter Filter Interceptor in Struts XML\nDESCRIPTION: This example shows how to configure the annotationParameterFilter interceptor in a Struts action definition. The interceptor must be placed before the parameters interceptor in the stack to properly filter parameters based on annotations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/annotation-parameter-filter-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"exampleAction\" class=\"com.examples.ExampleAction\">\n    <interceptor-ref name=\"annotationParameterFilter\"/>\n    <interceptor-ref name=\"defaultStack\"/>\n    <result name=\"success\">example.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Interceptor Examples in Struts XML\nDESCRIPTION: Collection of XML configuration examples showing different ways to configure the Cookie Interceptor. Examples include filtering by specific cookie names and values, using wildcards, and multiple interceptor configurations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/cookie-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <!--\n   This example will inject cookies named either 'cookie1' or 'cookie2' whose\n   value could be either 'cookie1value' or 'cookie2value' into Struts' action.\n -->\n <action ... >\n    <interceptor-ref name=\"cookie\">\n        <param name=\"cookiesName\">cookie1, cookie2</param>\n        <param name=\"cookiesValue\">cookie1value, cookie2value</param>\n    </interceptor-ref>\n    ....\n </action>\n\n <!--\n      This example will inject cookies named either 'cookie1' or 'cookie2'\n     regardless of their value into Struts' action.\n -->\n <action ... >\n   <interceptor-ref name=\"cookie\">\n      <param name=\"cookiesName\">cookie1, cookie2</param>\n      <param name=\"cookiesValue\">*</param>\n   <interceptor-ref>\n   ...\n </action>\n\n <!--\n      This example will inject cookies named either 'cookie1' with value\n      'cookie1value' or 'cookie2' with value 'cookie2value' into Struts'\n      action.\n -->\n <action ... >\n   <interceptor-ref name=\"cookie\">\n      <param name=\"cookiesName\">cookie1</param>\n      <param name=\"cookiesValue\">cookie1value</param>\n   </interceptor-ref>\n   <interceptor-ref name=\"cookie\">\n      <param name=\"cookiesName\"<cookie2</param>\n     <param name=\"cookiesValue\">cookie2value</param>\n   </interceptor-ref>\n   ....\n </action>\n\n <!--\n    This example will inject any cookies regardless of its value into\n    Struts' action.\n  -->\n <action ... >\n   <interceptor-ref name=\"cookie\">\n      <param name=\"cookiesName\">*</param>\n      <param name=\"cookiesValue\">*</param>\n   </interceptor-ref>\n    ...\n </action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Interceptor in Struts XML\nDESCRIPTION: Examples of configuring the Validation Interceptor in Struts XML configuration, showing basic usage, method exclusion, and annotated method validation. Demonstrates integration with params and workflow interceptors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"params\"/>\n     <interceptor-ref name=\"validation\"/>\n     <interceptor-ref name=\"workflow\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n \n <-- in the following case myMethod of the action class will not\n        get validated -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"params\"/>\n     <interceptor-ref name=\"validation\">\n         <param name=\"excludeMethods\">myMethod</param>\n     </interceptor-ref>\n     <interceptor-ref name=\"workflow\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n \n <-- in the following case only annotated methods of the action class will\n        be validated -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"params\"/>\n     <interceptor-ref name=\"validation\">\n         <param name=\"validateAnnotatedMethodOnly\">true</param>\n     </interceptor-ref>\n     <interceptor-ref name=\"workflow\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Structure Example\nDESCRIPTION: Example of a JSON structure that demonstrates supported data types and nested objects that can be handled by the plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"doubleValue\": 10.10,\n   \"nestedBean\": {\n      \"name\": \"Mr Bean\"\n   },\n   \"list\": [\"A\", 10, 20.20, {\n      \"firstName\": \"El Zorro\"\n   }],\n   \"array\": [10, 20] \n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Exception Details in JSP\nDESCRIPTION: This JSP snippet shows how to display exception details on an error page. It uses Struts tags to access the exception message and stack trace from the ValueStack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/exception-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<h2>An unexpected error has occurred</h2>\n<p>\n    Please report this error to your system administrator\n    or appropriate technical support personnel.\n    Thank you for your cooperation.\n</p>\n<hr/>\n<h3>Error Message</h3>\n<s:actionerror/>\n<p>\n    <s:property value=\"%{exception.message}\"/>\n</p>\n<hr/>\n<h3>Technical Details</h3>\n<p>\n    <s:property value=\"%{exceptionStack}\"/>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Workflow Interceptor in Struts XML\nDESCRIPTION: Examples showing different configurations of the workflow interceptor in Struts XML. Demonstrates basic usage, method exclusion, custom result name, and method inclusion patterns.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/default-workflow-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"params\"/>\n    <interceptor-ref name=\"validation\"/>\n    <interceptor-ref name=\"workflow\"/>\n    <result name=\"success\">good_result.ftl</result>\n</action>\n\n<-- In this case myMethod as well as mySecondMethod of the action class\n       will not pass through the workflow process -->\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"params\"/>\n    <interceptor-ref name=\"validation\"/>\n    <interceptor-ref name=\"workflow\">\n        <param name=\"excludeMethods\">myMethod,mySecondMethod</param>\n    </interceptor-ref name=\"workflow\">\n    <result name=\"success\">good_result.ftl</result>\n</action>\n\n<-- In this case, the result named \"error\" will be used when\n       an action / field error is found -->\n<-- The Interceptor will only be applied for myWorkflowMethod method of action\n       classes, since this is the only included method while any others are excluded -->\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"params\"/>\n    <interceptor-ref name=\"validation\"/>\n    <interceptor-ref name=\"workflow\">\n       <param name=\"inputResultName\">error</param>\n        <param name=\"excludeMethods\">*</param>\n        <param name=\"includeMethods\">myWorkflowMethod</param>\n    </interceptor-ref>\n    <result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using Result Parameters in Struts 2 Actions\nDESCRIPTION: Shows how to pass parameters to results using the params attribute in Result annotations. Demonstrates setting HTTP headers as an example.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts2.convention.annotation.Action;\nimport org.apache.struts2.convention.annotation.Actions;\nimport org.apache.struts2.convention.annotation.Result;\nimport org.apache.struts2.convention.annotation.Results;\n\npublic class HelloWorld extends ActionSupport {\n  @Action(value=\"/different/url\",\n    results={@Result(name=\"success\", type=\"httpheader\", params={\"status\", \"500\", \"errorMessage\", \"Internal Error\"})}\n  )\n  public String execute() {\n    return SUCCESS;\n  }\n\n  @Action(\"/another/url\")\n  public String doSomething() {\n    return SUCCESS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OVal Validation Annotations in Action Class\nDESCRIPTION: Example of applying OVal validation annotations (@NotNull, @NotEmpty, @Length) to an Action class field for validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleField extends ActionSupport{\n    @NotNull()\n    @NotEmpty\n    @Length(max = 3)\n    private String name;\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ContentTypeHandler Override in Struts Properties\nDESCRIPTION: Sets a constant in struts.properties to override the default XML content type handler with a custom implementation. This allows for customizing how XML content is processed in RESTful requests and responses.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.rest.handlerOverride.xml\" value=\"myXml\"/>\n```\n\n----------------------------------------\n\nTITLE: Action-Level Type Conversion Properties\nDESCRIPTION: Configuration for action-specific type converters in conversion.properties file. Maps property names to converter class names.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# syntax: <propertyName> = <converterClassName>\npoint = com.acme.PointConverter \nperson.phoneNumber = com.acme.PhoneNumberConverter\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring ObjectFactory in Struts XML\nDESCRIPTION: Defines a constant in the Struts XML configuration to use Spring as the object factory.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n  <constant name=\"struts.objectFactory\" value=\"spring\" />\n  ... \n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring PrefixBasedActionMapper in Struts XML\nDESCRIPTION: Shows how to set up PrefixBasedActionMapper to use different action mappers based on URL prefixes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/restful-action-mapper.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.mapper.class\" value=\"org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper\" />\n<constant name=\"struts.mapper.prefixMapping\" value=\"/rest:restful2,:struts\" />\n```\n\n----------------------------------------\n\nTITLE: HelloWorld Action Class Implementation in Java\nDESCRIPTION: Java action class that demonstrates the code-behind approach with the Convention plugin. This class will be automatically mapped to the /hello-world URL based on naming conventions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class HelloWorld extends ActionSupport {\n  private String message;\n\n  public String getMessage() {\n    return message;\n  }\n\n  public String execute() {\n    message = \"Hello World!\";\n    return SUCCESS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form with Struts 2 JSP Tags\nDESCRIPTION: Demonstrates how to create a file upload form using Struts 2 JSP tags, including the necessary enctype attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<s:form action=\"doUpload\" method=\"post\" enctype=\"multipart/form-data\">\n    <s:file name=\"upload\" label=\"File\"/>\n    <s:submit/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Struts Action Class\nDESCRIPTION: Java implementation of a simple Struts action class that extends ActionSupport. This action has a 'name' property with getter and setter methods, where the setter is annotated with @StrutsParameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/junit/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class TestAction extends ActionSupport {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    @StrutsParameter\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Form with Struts Tags for Client Validation\nDESCRIPTION: A Struts form example that enables client-side validation with the validate attribute set to true. The form includes input fields for name, age, and favorite color using Struts tags with the default xhtml theme.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-validation-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<html>\n    <head>\n        <title>Struts2 Showcase - Validation - Basic</title>\n        <s:head/>\n    </head>\n\n    <body>\n\n        <div class=\"page-header\">\n            <h1>Basic validation Example</h1>\n        </div>\n\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n\n\n                    <s:form method=\"post\" validate=\"true\">\n                        <s:textfield label=\"Name\" name=\"name\"/>\n                        <s:textfield label=\"Age\" name=\"age\"/>\n                        <s:textfield label=\"Favorite color\" name=\"answer\"/>\n                        <s:submit cssClass=\"btn btn-primary\"/>\n                    </s:form>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Action in XML\nDESCRIPTION: This snippet shows how to map an Action result code in the struts.xml configuration file. It is used to associate the proper result with an Action's return value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/big-picture.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nstruts.xml\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin-defined Extension Point in Java\nDESCRIPTION: Shows how to create a plugin-defined extension point by extending AbstractBeanSelectionProvider. This class registers new extension points using the alias() method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class VelocityBeanSelectionProvider extends AbstractBeanSelectionProvider {\n\n    @Override\n    public void register(ContainerBuilder builder, LocatableProperties props) throws ConfigurationException {\n        alias(VelocityManager.class, VelocityConstants.STRUTS_VELOCITY_MANAGER_CLASSNAME, builder, props);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a RESTful Controller in Struts 2\nDESCRIPTION: Sample REST controller for 'orders' resource that implements ModelDriven interface. It shows implementation of HTTP GET (show) and PUT (update) methods, with proper handling of ETags and last-modified headers for caching.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2.rest.example;\n\npublic class OrdersController implements ModelDriven<Order> {\n\n    private OrderManager orderManager;\n    private String id;\n    private Order model;\n\n    // Handles /orders/{id} GET requests\n    public HttpHeaders show() {\n        model = orderManager.findOrder(id);\n        return new DefaultHttpHeaders(\"show\")\n            .withETag(model.getUniqueStamp())\n            .lastModified(model.getLastModified());\n    }\n\n    // Handles /orders/{id} PUT requests\n    public String update() {\n        orderManager.updateOrder(model);\n        return \"update\";\n    }\n\n    // getters and setters\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Struts 2 TestNG Test Case\nDESCRIPTION: This Java code snippet demonstrates how to create a TestNG test case for Struts 2 by extending the StrutsTestCase class. This base class handles starting and stopping the Struts 2 framework automatically for each test.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/testng/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyTest extends StrutsTestCase {\n // testing code\n}\n```\n\n----------------------------------------\n\nTITLE: HelloWorld Action with Multiple Result Codes in Java\nDESCRIPTION: Enhanced Java action class that returns different result codes based on a condition. This demonstrates how Convention plugin can map different result codes to different templates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class HelloWorld extends ActionSupport {\n  private String message;\n\n  public String getMessage() {\n    return message;\n  }\n\n  public String execute() {\n    if (System.currentTimeMillis() % 2 == 0) {\n      message = \"It's 0\";\n      return \"zero\";\n    }\n\n    message = \"It's 1\";\n    return SUCCESS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CookieProvider Interceptor in Struts XML\nDESCRIPTION: Example configuration showing how to reference the cookieProvider interceptor in a Struts action configuration. The interceptor must be added after the defaultStack to enable cookie handling functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/cookie-provider-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action ... >\n   <interceptor-ref name=\"defaultStack\"/>\n   <interceptor-ref name=\"cookieProvider\"/>\n   ...\n </action>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON-RPC Action in Java for Struts\nDESCRIPTION: Shows how to create a Struts action that supports JSON-RPC. It includes the use of @SMDMethod annotation to mark methods for remote invocation and demonstrates parameter handling.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage smd;\n\nimport com.googlecode.jsonplugin.annotations.SMDMethod;\nimport com.opensymphony.xwork2.Action;\n\npublic class SMDAction {\n    public String smd() {\n        return Action.SUCCESS;\n    }\n    \n    @SMDMethod\n    public Bean doSomething(Bean bean, int quantity) {\n        bean.setPrice(quantity * 10);\n        return bean;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AJAX Validation Action in Struts XML\nDESCRIPTION: This XML configuration maps the AJAX validation action, specifies the interceptor stack for JSON validation, and defines the results for input and success cases.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\" \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n\n<struts>\n    <package>\n         <action name=\"ajaxFormSubmit\" class=\"org.apache.struts2.showcase.validation.AjaxFormSubmitAction\">\n             <interceptor-ref name=\"jsonValidationWorkflowStack\"/>\n             <result name=\"input\">/WEB-INF/validation/ajaxFormSubmit.jsp</result>\n             <result type=\"jsonActionRedirect\">ajaxFormSubmitSuccess</result>\n         </action>\n    </package>\n```\n\n----------------------------------------\n\nTITLE: Configuring SiteMesh Plugin in XML\nDESCRIPTION: XML configuration for the SiteMesh plugin in Struts. Defines two beans with static initialization for FreemarkerPageFilter and VelocityPageFilter to inject Struts settings and framework objects into these filters at startup.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!--\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n-->\n<!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.5.dtd\">\n    \n<struts>\n    <bean class=\"org.apache.struts2.sitemesh.FreemarkerPageFilter\" static=\"true\" optional=\"true\"/>\n    <bean class=\"org.apache.struts2.sitemesh.VelocityPageFilter\" static=\"true\" optional=\"true\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Input Form for Struts2 Validation\nDESCRIPTION: This HTML snippet creates a basic input form for a Struts2 validation example. It includes text fields for name, age, and favorite color, utilizing Struts2 form tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/basic-validation.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n\t<title>Struts2 Showcase - Validation - Basic</title>\n\t<s:head/>\n</head>\n\n<body>\n\n<div class=\"page-header\">\n\t<h1>Basic validation Example</h1>\n</div>\n\n<div class=\"container-fluid\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\n\t\t\t<p>\n\t\t\t\t<b>What is your favorite color?</b>\n\n\t\t\t<p/>\n\n\t\t\t<s:form method=\"post\">\n\t\t\t\t<s:textfield label=\"Name\" name=\"name\"/>\n\t\t\t\t<s:textfield label=\"Age\" name=\"age\"/>\n\t\t\t\t<s:textfield label=\"Favorite color\" name=\"answer\"/>\n\t\t\t\t<s:submit cssClass=\"btn btn-primary\"/>\n\t\t\t</s:form>\n\t\t</div>\n\t</div>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Person Model Class in Java\nDESCRIPTION: Java class representing a person with first name, last name, email, and age properties. Includes getter and setter methods for each property and a toString method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/processing-forms.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n    private String firstName;\n    private String lastName;\n    private String email;\n    private int age;\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String toString() {\n        return \"First Name: \" + getFirstName() + \" Last Name:  \" + getLastName() + \n        \" Email:      \" + getEmail() + \" Age:      \" + getAge() ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Convention Plugin Dependency in Maven\nDESCRIPTION: Maven dependency configuration required to include the Struts 2 Convention plugin in your project. This plugin enables the use of annotations and conventions instead of XML configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/annotations.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.struts</groupId>\n    <artifactId>struts2-convention-plugin</artifactId>\n    <version>X.X.X.X</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomValidator Annotation in Java\nDESCRIPTION: Example shows basic usage of CustomValidator annotation to define a custom validator with a field name. The annotation applies custom validation logic identified by 'customValidatorName' to the field 'myField'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/custom-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@CustomValidator(type =\"customValidatorName\", fieldName = \"myField\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Driven Interceptor in Struts XML\nDESCRIPTION: This XML configuration example demonstrates how to set up an action with the modelDriven interceptor and the basicStack in Apache Struts. It shows the proper order of interceptors and includes a success result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/model-driven-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"modelDriven\"/>\n    <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Custom ActionMapper Configuration in Struts XML\nDESCRIPTION: XML configuration for registering a custom ActionMapper implementation in struts.xml. This defines a bean of type ActionMapper and sets it as the default mapper to use.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"org.apache.struts2.dispatcher.mapper.ActionMapper\" name=\"mymapper\" class=\"com.mycompany.myapp.MyActionMapper\" />\n\n<constant name=\"struts.mapper.class\" value=\"mymapper\" />\n```\n\n----------------------------------------\n\nTITLE: Using JSON-RPC with Dojo in JSP\nDESCRIPTION: Provides an example of how to use JSON-RPC in a JSP file with Dojo. It demonstrates creating a service object, calling a remote method, and handling the asynchronous response.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_14\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url id=\"smdUrl\" namespace=\"/nodecorate\" action=\"SMDAction\" />\n<script type=\"text/javascript\">\n    //load dojo RPC\n    dojo.require(\"dojo.rpc.*\");\n    \n    //create service object(proxy) using SMD (generated by the json result)\n    var service = new dojo.rpc.JsonService(\"${smdUrl}\");\n    \n    //function called when remote method returns\n    var callback = function(bean) {\n        alert(\"Price for \" + bean.type + \" is \" + bean.price);\n    };\n    \n    //parameter\n    var bean = {type: \"Mocca\"};\n    \n    //execute remote method\n    var defered = service.doSomething(bean, 5);\n\n    //attach callback to defered object\n    defered.addCallback(callback);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ActionInvocation in Struts\nDESCRIPTION: Example demonstrating how to create a custom ActionInvocation by implementing various createActionInvocation methods in a custom ActionProxyFactory. This allows for customized execution of Action classes during request processing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-proxy-and-actionproxy-factory.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n ActionProxyFactory.getFactory(new MyActionProxyFactory() {\n    ...\n    public ActionInvocation createActionInvocation(ActionProxy actionProxy)\n                            throws Exception {\n          createActionInvocation(actionProxy, new LinkedHashMap());\n    }\n    public ActionInvocation createActionInvocation(ActionProxy actionProxy,\n                            Map extraContext) throws Exception {\n          createActionInvocation(actionProxy, extraContext, true);\n    }\n    public ActionInvocation createActionInvocation(ActionProxy actionProxy,\n                            Map extraContext, boolean pushAction)\n                            throws Exception {\n          // Do implementation of ActionInvocation here\n          .....\n    }\n    ...\n });\n\n```\n\n----------------------------------------\n\nTITLE: Creating a JasperAction Class in Struts 2\nDESCRIPTION: Implements a Struts 2 Action that creates sample Person objects, compiles a JasperReports template, and makes the data available for the report generation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.acme.test.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport net.sf.jasperreports.engine.JasperCompileManager;\n\nimport com.acme.test.Person;\nimport com.opensymphony.xwork.ActionSupport;\n\npublic class JasperAction extends ActionSupport {\n\n    /** List to use as our JasperReports dataSource. */\n    private List<Person> myList;\n\n    public String execute() throws Exception {\n\n        // Create some imaginary persons.\n        Person p1 = new Person(new Long(1), \"Patrick\", \"Lightbuddie\");\n        Person p2 = new Person(new Long(2), \"Jason\", \"Carrora\");\n        Person p3 = new Person(new Long(3), \"Alexandru\", \"Papesco\");\n        Person p4 = new Person(new Long(4), \"Jay\", \"Boss\");\n\n        // Store people in our dataSource list (normally they would come from a database).\n        myList = new ArrayList<Person>();\n        myList.add(p1);\n        myList.add(p2);\n        myList.add(p3);\n        myList.add(p4);\n\n        // Normally we would provide a pre-compiled .jrxml file\n        // or check to make sure we don't compile on every request.\n        try {\n            JasperCompileManager.compileReportToFile(\n                    \"S2_WEBAPP/jasper/our_jasper_template.jrxml\",\n                    \"S2_WEBAPP/jasper/our_compiled_template.jasper\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ERROR;\n        }\n\n        return SUCCESS;\n    }\n\n    public List<Person> getMyList() {\n        return myList;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Actions in struts.xml\nDESCRIPTION: This XML snippet shows how to configure Struts actions in the struts.xml file, including action mappings and result types for a login workflow.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/nutshell.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <package name=\"default\" extends=\"struts-default\">\n        <action name=\"Logon\" class=\"mailreader2.Logon\">\n            <result name=\"input\">/pages/Logon.jsp</result>\n            <result name=\"cancel\" type=\"redirectAction\">Welcome</result>\n            <result type=\"redirectAction\">MainMenu</result>\n            <result name=\"expired\" type=\"chain\">ChangePassword</result>\n        </action>\n\n        <action name=\"Logoff\" class=\"mailreader2.Logoff\">\n            <result type=\"redirectAction\">Welcome</result>\n        </action>\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Enabling Action Prefix Support in Struts XML\nDESCRIPTION: XML configuration for enabling action prefix support in struts.xml file. This is required since Struts 2.3.15.3 as action prefix support is disabled by default for security reasons.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.mapper.action.prefix.enabled\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing errorNotifyTopics and indicator with Struts 2 Dojo Submit in XML\nDESCRIPTION: This snippet illustrates the use of errorNotifyTopics and the indicator attribute with the Struts 2 Dojo Submit component. It subscribes to an '/error' topic that is triggered when an error occurs during the AJAX request, and displays an indicator image during the request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<script type=\"text/javascript\">\ndojo.event.topic.subscribe(\"/error\", function(error, request, widget){\n    alert('inside a topic event. on error');\n    //error : error object (error.message has the error message)\n    //request: XMLHttpRequest object\n    //widget: widget that published the topic\n});\n</script>\n\n<img id=\"ind1\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" style=\"display:none\"/>\n<sx:submit errorNotifyTopics=\"/error\" indicator=\"ind1\" href=\"%{#ajaxTest}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple File Upload Action Using Arrays in Java\nDESCRIPTION: Struts 2 Action class that handles multiple file uploads using arrays. This class defines array fields for file content, filenames, and content types, with corresponding getter and setter methods.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MultipleFileUploadUsingArrayAction extends ActionSupport {\n    private File[] uploads;\n    private String[] uploadFileNames;\n    private String[] uploadContentTypes;\n\n    public String upload() throws Exception {\n        System.out.println(\"\\n\\n upload2\");\n        System.out.println(\"files:\");\n        for (File u : uploads) {\n            System.out.println(\"*** \" + u + \"\\t\" + u.length());\n        }\n        System.out.println(\"filenames:\");\n        for (String n : uploadFileNames) {\n            System.out.println(\"*** \" + n);\n        }\n        System.out.println(\"content types:\");\n        for (String c : uploadContentTypes) {\n            System.out.println(\"*** \" + c);\n        }\n        System.out.println(\"\\n\\n\");\n        return SUCCESS;\n    }\n\n    public File[] getUpload() {\n        return this.uploads;\n    }\n\n    @StrutsParameter\n    public void setUpload(File[] upload) {\n        this.uploads = upload;\n    }\n\n    public String[] getUploadFileName() {\n        return this.uploadFileNames;\n    }\n\n    @StrutsParameter\n    public void setUploadFileName(String[] uploadFileName) {\n        this.uploadFileNames = uploadFileName;\n    }\n\n    public String[] getUploadContentType() {\n        return this.uploadContentTypes;\n    }\n\n    @StrutsParameter\n    public void setUploadContentType(String[] uploadContentType) {\n        this.uploadContentTypes = uploadContentType;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Control Header Template in FTL\nDESCRIPTION: Overrides the controlheader-core.ftl template to include elements for showing validation errors that can be populated via AJAX. It adds a data attribute to identify the field name for error reporting and handles various label positioning options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_6\n\nLANGUAGE: ftl\nCODE:\n```\n<#--\n    Always include elements to show errors. They may be filled later via AJAX.\n-->\n<#assign hasFieldErrors = parameters.name?? && fieldErrors?? && fieldErrors[parameters.name]??/>\n<#if (parameters.errorposition!\"top\") == 'top'>\n<tr errorFor=\"${parameters.id}\">\n    <td class=\"tdErrorMessage\" colspan=\"2\" data-error-for-fieldname=\"${parameters.name}\"><#rt/>\n        <#if hasFieldErrors>\n            <#list fieldErrors[parameters.name] as error>\n                <div class=\"errorMessage\">${error?html}</div><#t/>\n            </#list>\n        </#if>\n    </td><#lt/>\n</tr>\n</#if>\n<#if !parameters.labelposition?? && (parameters.form.labelposition)??>>\n<#assign labelpos = parameters.form.labelposition/>\n<#elseif parameters.labelposition??>\n<#assign labelpos = parameters.labelposition/>\n</#if>\n<#--\n    if the label position is top,\n    then give the label it's own row in the table\n-->\n<tr>\n<#if (labelpos!\"\") == 'top'>\n    <td class=\"tdLabelTop\" colspan=\"2\"><#rt/>\n<#else>\n    <td class=\"tdLabel\"><#rt/>\n</#if>\n<#if parameters.label??>\n    <label <#t/>\n<#if parameters.id??>\n        for=\"${parameters.id?html}\" <#t/>\n</#if>\n<#if hasFieldErrors>\n        class=\"errorLabel\"<#t/>\n<#else>\n        class=\"label\"<#t/>\n</#if>\n    ><#t/>\n<#if parameters.required!false && parameters.requiredPosition!\"right\" != 'right'>\n        <span class=\"required\">*</span><#t/>\n</#if>\n${parameters.label?html}<#t/>\n<#if parameters.required!false && parameters.requiredPosition!\"right\" == 'right'>\n <span class=\"required\">*</span><#t/>\n</#if>\n${parameters.labelseparator!\":\"?html}<#t/>\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/tooltip.ftl\" />\n</label><#t/>\n</#if>\n    </td><#lt/>\n<#-- add the extra row -->\n<#if (labelpos!\"\") == 'top'>\n</tr>\n<tr>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Configuring Convention Plugin for REST Controllers\nDESCRIPTION: Configures the Convention Plugin to automatically find controller classes with the suffix 'Controller', map all matching classes, and set the parent package to 'rest-default' for REST functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.action.suffix\" value=\"Controller\"/>\n<constant name=\"struts.convention.action.mapAllMatches\" value=\"true\"/>\n<constant name=\"struts.convention.default.parent.package\" value=\"rest-default\"/>\n<constant name=\"struts.convention.package.locators\" value=\"example\"/>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Struts 2 Form Tags\nDESCRIPTION: Example of the HTML output generated by Struts 2 form tags including table layout and form elements\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"hello\" name=\"hello\" action=\"/using-tags/hello.action;jsessionid=6233ot11na1mtshbr292hu1w\" method=\"post\">\n  <table class=\"wwFormTable\">\n    <tr>\n      <td class=\"tdLabel\"><label for=\"hello_userName\" class=\"label\">Your name:</label></td>\n      <td class=\"tdInput\"><input type=\"text\" name=\"userName\" value=\"\" id=\"hello_userName\"/></td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n        <div class=\"formButton\">\n          <input type=\"submit\" value=\"Submit\" id=\"hello_0\"/>\n        </div>\n      </td>\n    </tr>\n  </table>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Side Validation in Struts Form Tag\nDESCRIPTION: Basic example showing how to enable client-side validation on a Struts form by adding the validate=\"true\" attribute to the form tag. If a name isn't provided, the action mapping name will be used as the form name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-side-validation.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form name=\"test\" action=\"javascriptValidation\" validate=\"true\">\n  ...\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Logging in Struts Action\nDESCRIPTION: Example showing how to implement basic logging in a Struts Action class using the XWork logging framework. Demonstrates logger initialization and usage within an action method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/logging.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.opensymphony.xwork2.util.logging.Logger;\nimport com.opensymphony.xwork2.util.logging.LoggerFactory;\n\npublic class MyAction {\n\n    private static final Logger LOG = LoggerFactory.getLogger(MyAction.class);\n\n    private String userName;\n\n    public String execute() {\n        LOG.debug(\"MyAction executed with UserName [#0]\", userName);\n        return \"success\";\n    }\n\n    // getter / setter\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Execute and Wait Interceptor in Struts XML\nDESCRIPTION: This snippet demonstrates how to configure an action with the Execute and Wait Interceptor in the Struts XML configuration file. It includes the interceptor reference and defines result pages for wait and success states.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/execute-and-wait-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"completeStack\"/>\n    <interceptor-ref name=\"execAndWait\"/>\n    <result name=\"wait\">longRunningAction-wait.jsp</result>\n    <result name=\"success\">longRunningAction-success.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logon Action in XML\nDESCRIPTION: Demonstrates how to configure a Logon action using XML in Apache Struts. It specifies the action name, class, and result types for different outcomes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"Logon\" class=\"tutorial.Logon\">\n  <result type=\"redirectAction\">Menu</result>\n  <result name=\"input\">/Logon.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Implementing @After annotation in a Struts Action class\nDESCRIPTION: Example showing how to use the @After annotation in a Struts Action class. The annotated method 'isValid()' will be called after the main 'execute()' method and its result have been executed. The return value of the @After method is ignored.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/after-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n public class SampleAction extends ActionSupport {\n\n  @After\n  public void isValid() throws ValidationException {\n    // validate model object, throw exception if failed\n  }\n\n  public String execute() {\n     // perform action\n     return SUCCESS;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Form Input Handling to Struts 2 Action\nDESCRIPTION: Shows how to add getter and setter methods to a Struts 2 Action class to handle form input, using the @StrutsParameter annotation for the setter method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/coding-actions.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate String userName;\n\npublic String getUserName() {\n    return userName;\n}\n\n@StrutsParameter\npublic void setUserName(String userName) {\n    this.userName = userName;\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Configuration for Managing ActionSupport Classes\nDESCRIPTION: This XML configuration shows how to have Spring manage both the EditService and EditAction beans. The ActionSupport class is configured with prototype scope to ensure a new instance is created for each request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n            http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n            \n    <bean id=\"editService\" class=\"org.apache.struts.edit.service.EditServiceInMemory\" />\n\n    <bean id=\"editAction\" class=\"org.apache.struts.edit.action.EditAction\" scope=\"prototype\">\n        <property name=\"editService\" ref=\"editService\" />\n    </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Action in Struts XML\nDESCRIPTION: Demonstrates how to configure a Struts action for JSON output using XML configuration. This includes setting up the package to extend json-default and specifying the result type as json.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"\n    \"http://struts.apache.org/dtds/struts-2.0.dtd\">\n\n<struts>\n\n  <package name=\"example\"  extends=\"json-default\">\n     <action name=\"JSONExample\" class=\"example.JSONExample\">\n        <result type=\"json\"/>\n     </action>\n  </package>\n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules for SimpleAction in Struts 2 XML\nDESCRIPTION: This XML configuration demonstrates how to define validation rules for the SimpleAction class. It includes examples of field validators and a non-field expression validator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE validators PUBLIC \"-//Apache Struts//XWork Validator 1.0.3//EN\"\n\t\t\"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\">\n<validators>\n  <field name=\"bar\">\n      <field-validator type=\"required\">\n          <message>You must enter a value for bar.</message>\n      </field-validator>\n      <field-validator type=\"int\">\n          <param name=\"min\">6</param>\n          <param name=\"max\">10</param>\n          <message>bar must be between ${min} and ${max}, current value is ${bar}.</message>\n      </field-validator>\n  </field>\n  <field name=\"bar2\">\n      <field-validator type=\"regex\">\n          <param name=\"expression\">[0-9],[0-9]</param>\n          <message>The value of bar2 must be in the format \"x, y\", where x and y are between 0 and 9</message>\n     </field-validator>\n  </field>\n  <field name=\"date\">\n      <field-validator type=\"date\">\n          <param name=\"min\">12/22/2002</param>\n          <param name=\"max\">12/25/2002</param>\n          <message>The date must be between 12-22-2002 and 12-25-2002.</message>\n      </field-validator>\n  </field>\n  <field name=\"foo\">\n      <field-validator type=\"int\">\n          <param name=\"min\">0</param>\n          <param name=\"max\">100</param>\n          <message key=\"foo.range\">Could not find foo.range!</message>\n      </field-validator>\n  </field>\n  <validator type=\"expression\">\n      <param name=\"expression\">foo lt bar </param>\n      <message>Foo must be greater than Bar. Foo = ${foo}, Bar = ${bar}.</message>\n  </validator>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Implementing Timed Redirect to Home Page in JavaScript\nDESCRIPTION: This JavaScript snippet defines a function to redirect the user to the Struts home page and sets a timeout to execute this function after 10 seconds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/404.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction redirectToHome() {\n    window.location = \"http://struts.apache.org/\"\n}\nsetTimeout(redirectToHome, 10000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Prepare Method in Struts 2 EditAction\nDESCRIPTION: Example implementation of the prepare method in an EditAction class that implements the Preparable interface. The method retrieves car model data and person information that will be used to populate form fields, ensuring this data is available both during initial form display and after validation failures.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/preperable-interface.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncarModelsAvailable = carModelsService.getCarModels();\n\nsetPersonBean(editService.getPerson());\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpressionValidator Annotation in Java\nDESCRIPTION: Example of using the ExpressionValidator annotation to validate a boolean OGNL expression. The annotation includes message, i18n key, shortCircuit flag, and the expression to evaluate.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/expression-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ExpressionValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, expression = \"an OGNL expression\" )\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Flow Control with Struts If Tag in JSP\nDESCRIPTION: Demonstrates the usage of Struts if, elseif, and else tags for conditional flow control in JSP pages. Shows how to perform basic conditional checks using test expressions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/if-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:if test=\"%{false}\">\n    <div>Will Not Be Executed</div>\n</s:if>\n<s:elseif test=\"%{true}\">\n    <div>Will Be Executed</div>\n</s:elseif>\n<s:else>\n    <div>Will Not Be Executed</div>\n</s:else>\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Error Template in FTL\nDESCRIPTION: Overrides the actionerror.ftl template to ensure the error message container is always present in the DOM, even when empty. This allows for dynamically adding error messages via JavaScript after an AJAX validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_4\n\nLANGUAGE: ftl\nCODE:\n```\n<#--\n    Make sure element is always present. To be filled later via JS.\n-->\n<ul<#rt/>\n<#if parameters.id??>\n id=\"${parameters.id?html}\"<#rt/>\n</#if>            \n<#if parameters.cssClass??>\n class=\"${parameters.cssClass?html}\"<#rt/>\n<#else>\n class=\"errorMessage\"<#rt/>\n</#if>\n<#if parameters.cssStyle??>\n style=\"${parameters.cssStyle?html}\"<#rt/>\n</#if>\n>\n<#if (actionErrors?? && actionErrors?size > 0)>\n    <#list actionErrors as error>\n        <#if error??>\n            <li><span><#if parameters.escape>${error!?html}<#else>${error!}</#if></span><#rt/></li><#rt/>\n        </#if>\n    </#list>\n</#if>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using the Struts textarea tag in JSP\nDESCRIPTION: Demonstrates how to create a multiline text input field with the Struts textarea tag. This example creates a textarea with a label 'Comments', binds it to the 'comments' property, and specifies its dimensions as 30 columns by 8 rows.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/textarea-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:textarea label=\"Comments\" name=\"comments\" cols=\"30\" rows=\"8\"/>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interaction with DateTimePicker in Struts 2\nDESCRIPTION: Demonstrates how to get and set DateTimePicker values using JavaScript. Shows methods for string and Date object handling through the Dojo widget API.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-datetimepicker-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <sx:datetimepicker id=\"picker\" label=\"Order Date\" />\n <script type=\"text/javascript\">\n   function setValue() {\n      var picker = dojo.widget.byId(\"picker\");\n      \n      //string value\n      picker.setValue('2007-01-01');\n      \n      //Date value\n      picker.setValue(new Date());\n   }\n   \n   function showValue() {\n      var picker = dojo.widget.byId(\"picker\");\n      \n      //string value\n      var stringValue = picker.getValue();\n      alert(stringValue);\n      \n      //date value\n      var dateValue = picker.getDate();\n      alert(dateValue);\n   }\n </script>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Bean Validation Plugin Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the Bean Validation Plugin dependency to a project's Maven POM file. It specifies the groupId, artifactId, and version for the Struts 2 Bean Validation Plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/bean-validation/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.struts</groupId>\n    <artifactId>struts2-bean-validation-plugin</artifactId>\n    <version>X.X.X</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Session Counter Implementation in Struts 2\nDESCRIPTION: Method to track and increment a counter stored in the HTTP session, demonstrating session object manipulation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/http-session.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void increaseHelloCount() {\n    Integer helloCount = (Integer) userSession.get(HELLO_COUNT);\n\n    if (helloCount == null ) {\n        helloCount = 1;\n    } else {\n        helloCount++;\n    }\n\n    userSession.put(HELLO_COUNT, helloCount);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Action with Custom Method in XML\nDESCRIPTION: Demonstrates how to configure an action with a custom method in XML. This example specifies the 'delete' method for the CrudAction class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"delete\" class=\"example.CrudAction\" method=\"delete\">\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Action Class with Validators in Java\nDESCRIPTION: A Struts action class that demonstrates different validation annotations including required fields, date range, email, integer range, regex, string length, field expression, and URL validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AjaxFormSubmitAction extends ActionSupport {\n    private String requiredValidatorField = null;\n    private String requiredStringValidatorField = null;\n    private Integer integerValidatorField = null;\n    private Date dateValidatorField = null;\n    private String emailValidatorField = null;\n    private String urlValidatorField = null;\n    private String stringLengthValidatorField = null;\n    private String regexValidatorField = null;\n    private String fieldExpressionValidatorField = null;\n    @Override\n    public void validate() {\n        if (hasFieldErrors()) {\n            addActionError(\"Errors present!\");\n        }\n    }\n    public Date getDateValidatorField() {\n        return dateValidatorField;\n    }\n    @DateRangeFieldValidator(\n        min=\"01/01/1990\", \n        max=\"01/01/2000\", \n        message=\"must be a min 01-01-1990 max 01-01-2000 if supplied\")\n    public void setDateValidatorField(Date dateValidatorField) {\n        this.dateValidatorField = dateValidatorField;\n    }\n    public String getEmailValidatorField() {\n        return emailValidatorField;\n    }\n    @EmailValidator(message=\"must be a valid email if supplied\")\n    public void setEmailValidatorField(String emailValidatorField) {\n        this.emailValidatorField = emailValidatorField;\n    }\n    public Integer getIntegerValidatorField() {\n        return integerValidatorField;\n    }\n    @IntRangeFieldValidator(min=\"1\", max=\"10\", message=\"must be integer min 1 max 10 if supplied\")\n    public void setIntegerValidatorField(Integer integerValidatorField) {\n        this.integerValidatorField = integerValidatorField;\n    }\n    public String getRegexValidatorField() {\n        return regexValidatorField;\n    }\n    @RegexFieldValidator(\n        regex=\"[^<>]+\", \n        message=\"regexValidatorField must match a regexp (.*\\\\.txt) if specified\")\n    public void setRegexValidatorField(String regexValidatorField) {\n        this.regexValidatorField = regexValidatorField;\n    }\n    public String getRequiredStringValidatorField() {\n        return requiredStringValidatorField;\n    }\n    @RequiredStringValidator(trim=true, message=\"required and must be string\")\n    public void setRequiredStringValidatorField(String requiredStringValidatorField) {\n        this.requiredStringValidatorField = requiredStringValidatorField;\n    }\n    public String getRequiredValidatorField() {\n        return requiredValidatorField;\n    }\n    @RequiredFieldValidator(message=\"required\")\n    public void setRequiredValidatorField(String requiredValidatorField) {\n        this.requiredValidatorField = requiredValidatorField;\n    }\n    public String getStringLengthValidatorField() {\n        return stringLengthValidatorField;\n    }\n    @StringLengthFieldValidator(\n        minLength=\"2\", \n        maxLength=\"4\", \n        trim=true, \n        message=\"must be a String of a specific greater than 1 less than 5 if specified\")\n    public void setStringLengthValidatorField(String stringLengthValidatorField) {\n        this.stringLengthValidatorField = stringLengthValidatorField;\n    }\n    public String getFieldExpressionValidatorField() {\n        return fieldExpressionValidatorField;\n    }\n    @FieldExpressionValidator(\n        expression = \"(fieldExpressionValidatorField == requiredValidatorField)\", \n        message = \"must be the same as the Required Validator Field if specified\")\n    public void setFieldExpressionValidatorField(\n            String fieldExpressionValidatorField) {\n        this.fieldExpressionValidatorField = fieldExpressionValidatorField;\n    }\n    public String getUrlValidatorField() {\n        return urlValidatorField;\n    }\n    @UrlValidator(message=\"must be a valid url if supplied\")\n    public void setUrlValidatorField(String urlValidatorField) {\n        this.urlValidatorField = urlValidatorField;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST with Convention Plugin in struts.xml\nDESCRIPTION: XML configuration required in struts.xml when using REST with the Convention plugin. Sets the action suffix to 'Controller', enables mapping of all matches, and sets the default parent package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.action.suffix\" value=\"Controller\"/>\n<constant name=\"struts.convention.action.mapAllMatches\" value=\"true\"/>\n<constant name=\"struts.convention.default.parent.package\" value=\"rest-default\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Static Content Path in Struts\nDESCRIPTION: Configuration to modify the default path for serving static content.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/static-content.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ui.staticContentPath\" value=\"/my-static-content\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Bookmark Action in Struts 2 Portlet\nDESCRIPTION: This Java class implements the action for editing bookmarks in a Struts 2 portlet. It handles pre-populating form fields and updating the bookmark in PortletPreferences.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class EditBookmarkAction extends DefaultActionSupport implements PortletPreferencesAware, Preparable, ParameterAware {\n\n   private String oldName;\n   private String name;\n   private String url;\n\t\n   private PortletPreferences portletPreferences;\n   private Map<String, String[]> parameters;\n\t\n   public String getOldName() {\n      return oldName;\n   }\n\n   @StrutsParameter\n   public void setOldName(String oldName) {\n      this.oldName = oldName;\n   }\n\t\n   public String getUrl() {\n      return url;\n   }\n\n   @StrutsParameter\n   public void setUrl(String url) {\n      this.url = url;\n   }\n\n   @StrutsParameter\n   public void setName(String name) {\n      this.name = name;\n   }\n\t\n   public void setPortletPreferences(PortletPreferences portletPreferences) {\n      this.portletPreferences = portletPreferences;\n   }\n\t\n   public void setParameters(Map<String, String[]> parameters) {\n      this.parameters = parameters;\n   }\n\t\n   public void prepare() throws Exception {\n      // Since the prepare interceptor is run before the parameter interceptor, \n      // we have to get the parameter \"manually\".\n      this.oldName = parameters.get(\"oldName\")[0];\n      this.url = portletPreferences.getValue(oldName, null);\n   }\n\t\n   public String execute() throws Exception {\n      // The modification is handled as remove/add\n      portletPreferences.reset(oldName);\n      portletPreferences.setValue(name, url);\n      portletPreferences.store();\n      return SUCCESS;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Struts Action Class with Form Properties\nDESCRIPTION: A Java Action class that extends ActionSupport with getter and setter methods for the form fields. The class uses @StrutsParameter annotations to identify parameters that should be populated from the request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-validation-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class QuizAction extends ActionSupport {\n\n    private String name;\n    private int age;\n    private String answer;\n\n    public String getName() {\n        return name;\n    }\n\n    @StrutsParameter\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    @StrutsParameter\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getAnswer() {\n        return answer;\n    }\n\n    @StrutsParameter\n    public void setAnswer(String answer) {\n        this.answer = answer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Form Validation with JavaScript\nDESCRIPTION: JavaScript code for handling AJAX form validation. It includes functions for submitting the form, removing validation errors, handling validation results, and registering the form submit event handler.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n /**\n  * Validates form per AJAX. To be called as onSubmit handler.\n  *\n  * @param event onSubmit event\n  */\nfunction ajaxFormValidation(event) {\n    event.preventDefault();\n    _removeValidationErrors();\n    var _form = $(event.target);\n    var _formData = _form.serialize(true);\n    // prepare visual feedback\n    // you may want to use other elements here\n    var originalButton = _form.find('.btn-primary');\n    // note: jQuery returns an array-like object\n    if (originalButton && originalButton.length && originalButton.length > 0) {\n        originalButton.hide();\n        var feedbackElement = $('<div class=\"ajaxVisualFeedback\"></div>').insertAfter(originalButton);\n        var restoreFunction = function() {\n            originalButton.show();\n            feedbackElement.remove();\n        }\n    }\n    var options = {\n        data: 'struts.enableJSONValidation=true&struts.validateOnly=false&' + _formData,\n        async: true,\n        processData: false,\n        type: 'POST',\n        success: function (response, statusText, xhr) {\n            if (response.location) {\n                // no validation errors\n                // action has been executed and sent a redirect URL wrapped as JSON\n                // cannot use a normal http-redirect (status-code 3xx) as this would be followed by browsers and would not be available here\n                // follow JSON-redirect\n                window.location.href = response.location;\n            } else {\n                if (restoreFunction) {\n                    restoreFunction();\n                }\n                _handleValidationResult(_form, response);\n            }\n        },\n        error: function(xhr, textStatus, errorThrown) {\n            if (restoreFunction) {\n                restoreFunction();\n            }\n            // struts sends status code 400 when validation errors are present\n            if (xhr.status === 400) {\n                _handleValidationResult(_form, JSON.parse(xhr.responseText))\n            } else {\n                // a real error occurred -> show user an error message\n                _handleValidationResult(_form, {errors: ['Network or server error!']})\n            }\n\t\t}\n    }\n    // send request, after delay to make sure everybody notices the visual feedback :)\n    window.setTimeout(function() {\n        var url = _form[0].action;\n        jQuery.ajax(url, options);\n    }, 1000);\n}\n/**\n * Removes validation errors from HTML DOM.\n */\nfunction _removeValidationErrors() {\n    // action errors\n    // you might want to use a custom ID here\n    $('ul.errorMessage li').remove();\n    // field errors\n    $('div.errorMessage').remove();\n}\n/**\n * Incorporates validation errors in HTML DOM.\n *\n * @param form Form containing errors.\n * @param errors Errors from server.\n */\nfunction _handleValidationResult(form, errors) {\n    // action errors\n    if (errors.errors) {\n        // you might want to use a custom ID here\n        var errorContainer = $('ul.errorMessage');\n        $.each(errors.errors, function(index, errorMsg) {\n            var li = $('<li><span></span></li>');\n            li.text(errorMsg); // use text() for security reasons\n            errorContainer.append(li);\n        });\n    }\n    // field errors\n    if (errors.fieldErrors) {\n        $.each(errors.fieldErrors, function(fieldName, errorMsg) {\n            var td = $('td[data-error-for-fieldname=\"' + fieldName + '\"]');\n            if (td) {\n                var div = $('<div class=\"errorMessage\"></div>');\n                div.text(errorMsg); // use text() for security reasons\n                td.append(div);\n            }\n        });\n    }\n}\n// register onSubmit handler\n$(window).bind('load', function() {\n    $('form').bind('submit', ajaxFormValidation);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SMI via struts.xml in Struts 2.5\nDESCRIPTION: Example of configuring Strict Method Invocation (SMI) using struts.xml in Struts 2.5. It shows how to set global allowed methods and action-specific allowed methods.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<package ...>\n  ...\n  <global-allowed-methods>execute,input,back,cancel,browse</global-allowed-methods>\n  ...\n \n  <action name=\"Bar\">\n    <allowed-methods>foo,bar</allowed-methods>\n  </action>\n \n  ...\n</package>\n```\n\n----------------------------------------\n\nTITLE: Dojo Div Component Parameters Table in HTML\nDESCRIPTION: An HTML table that documents all available parameters for the Dojo Div component. It includes information about each parameter's name, whether it's required, default value, evaluation behavior, data type, and a description of its purpose. The table includes parameters for controlling AJAX behavior, styling, error handling, and event topics.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-div-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>\t\t<table width=\"100%\">\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\"><h4>Dynamic Attributes Allowed:</h4> false</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\">&nbsp;</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Name</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Required</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Default</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Evaluated</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Type</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Description</h4></th>\n\n\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">accesskey</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html accesskey attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">afterNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published after the request(if the request succeeds)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">autoStart</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">true</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Boolean</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Start timer automatically</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">beforeNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published before the request</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">closable</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Show a close button when the div is inside a 'tabbedpanel'</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error style definitions for element to use</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css style to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">delay</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Integer</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">How long to wait before fetching the content (in milliseconds)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">disabled</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html disabled attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published after the request(if the request fails)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorPosition</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Define error position of form element (top|bottom)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorText</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The text to display to the user if the is an error fetching the content</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">executeScripts</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Boolean</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Javascript code in the fetched content will be executed</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">formFilter</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Function name used to filter the fields of the form.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">formId</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Form id whose fields will be serialized and passed as parameters</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">handler</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Javascript function name that will make the request</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">highlightColor</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">none</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Color used to perform a highlight effect on this element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">highlightDuration</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">2000</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Integer</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Duration of highlight effect in milliseconds. Only valid if 'highlightColor' attribute is set</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">href</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The URL to call to obtain the content. Note: If used with ajax context, the value must be set as an url tag value.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">id</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The id to use for the element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">indicator</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n```\n\n----------------------------------------\n\nTITLE: Basic Spring Configuration for Dependency Injection\nDESCRIPTION: This XML configuration defines the EditService bean that Spring will instantiate and inject into ActionSupport classes. The bean has a singleton scope by default.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n            http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"editService\" class=\"org.apache.struts.edit.service.EditServiceInMemory\" />\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Freemarker Template for Action Errors\nDESCRIPTION: A custom Freemarker template (actionerror.ftl) that ensures error message containers are always present in the DOM, even when no errors exist, to support AJAX-based error rendering.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<#--\n    Make sure element is always present. To be filled later via JS.\n-->\n<ul<#rt/>\n<#if parameters.id??>\n id=\"${parameters.id?html}\"<#rt/>\n</#if>            \n<#if parameters.cssClass??>\n class=\"${parameters.cssClass?html}\"<#rt/>\n<#else>\n class=\"errorMessage\"<#rt/>\n</#if>\n<#if parameters.cssStyle??>\n style=\"${parameters.cssStyle?html}\"<#rt/>\n</#if>\n>\n<#if (actionErrors?? && actionErrors?size > 0)>\n    <#list actionErrors as error>\n        <#if error??>\n            <li><span><#if parameters.escape>${error!?html}<#else>${error!}</#if></span><#rt/></li><#rt/>\n        </#if>\n    </#list>\n</#if>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles Interceptor in Struts XML\nDESCRIPTION: This XML snippet shows how to configure the Roles Interceptor for an action in Struts. It demonstrates setting up allowed roles for a specific action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/roles-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- only allows the admin and member roles -->\n  <action name=\"someAction\" class=\"com.examples.SomeAction\">\n      <interceptor-ref name=\"completeStack\"/>\n      <interceptor-ref name=\"roles\">\n        <param name=\"allowedRoles\">admin,member</param>\n      </interceptor-ref>\n      <result name=\"success\">good_result.ftl</result>\n  </action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSONWriter with Flexjson in Java\nDESCRIPTION: Provides an example of a custom JSONWriter implementation using Flexjson library. This class replaces the default Struts JSON serializer with Flexjson, allowing for more flexible JSON output customization.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport flexjson.JSONSerializer;\nimport flexjson.transformer.DateTransformer;\nimport org.apache.struts2.json.JSONException;\nimport org.apache.struts2.json.JSONWriter;\n\npublic class FlexJSONWriter implements JSONWriter {\n    private String dateFormatter;\n\n    public String write(Object object) throws JSONException {\n        return this.write(object, null, null, false);\n    }\n\n    public String write(Object object, Collection<Pattern> excludeProperties, Collection<Pattern> includeProperties,\n                        boolean excludeNullProperties) throws JSONException {\n\n        JSONSerializer serializer = new JSONSerializer();\n        if (excludeProperties != null) {\n            for (Pattern p : excludeProperties) {\n                serializer = serializer.exclude(p.pattern());\n            }\n        }\n        if (includeProperties != null) {\n            for (Pattern p : includeProperties) {\n                serializer = serializer.include(p.pattern());\n            }\n        }\n        if (excludeNullProperties) {\n            serializer = serializer.transform(new ExcludeTransformer(), void.class);\n        }\n        if (dateFormatter != null) {\n            serializer = serializer.transform(new DateTransformer(dateFormatter), Date.class);\n        }\n        return serializer.serialize(object);\n    }\n    //...\n```\n\n----------------------------------------\n\nTITLE: Hidden Tag with Dynamic Value in JSP\nDESCRIPTION: Shows how to use OGNL expressions to set the value attribute dynamically. This example gets the value from the 'bar' property of the action using the '%{bar}' expression.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/hidden-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:hidden name=\"foo\" value=\"%{bar}\" />\n```\n\nLANGUAGE: jsp\nCODE:\n```\n<input type=\"hidden\" name=\"foo\" value=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form with Struts JSP Tags\nDESCRIPTION: Example JSP form that enables file uploads using Struts tags. The form must specify the multipart/form-data encoding type to support file uploads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n   <s:form action=\"doUpload\" method=\"post\" enctype=\"multipart/form-data\">\n       <s:file name=\"upload\" label=\"File\"/>\n       <s:submit/>\n   </s:form>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Model Driven Interceptor in Struts XML\nDESCRIPTION: Examples of how to configure the Scoped Model Driven Interceptor in Struts XML. It shows basic usage and an example with all available parameters set.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/scoped-model-driven-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <-- Basic usage -->\n <interceptor name=\"scopedModelDriven\" class=\"com.opensymphony.interceptor.ScopedModelDrivenInterceptor\" />\n \n <-- Using all available parameters -->\n <interceptor name=\"gangsterForm\" class=\"com.opensymphony.interceptor.ScopedModelDrivenInterceptor\">\n      <param name=\"scope\">session</param>\n      <param name=\"name\">gangsterForm</param>\n      <param name=\"className\">com.opensymphony.example.GangsterForm</param>\n  </interceptor>\n```\n\n----------------------------------------\n\nTITLE: Passing Objects Between Actions Using Scope Interceptor\nDESCRIPTION: Shows how to pass complex objects between two different actions using the scope interceptor with a custom key. This configuration allows ActionA to share a 'person' object with ActionB through the session.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/scope-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"scopea\" class=\"com.mevipro.test.action.ScopeActionA\">\n    <result name=\"success\" type=\"dispatcher\">/jsp/test.jsp</result>\n    <interceptor-ref name=\"basicStack\"/>\n    <interceptor-ref name=\"scope\">\n        <param name=\"key\">funky</param>\n        <param name=\"session\">person</param>\n        <param name=\"autoCreateSession\">true</param>\n    </interceptor-ref>\n</action>\n<action name=\"scopeb\" class=\"com.mevipro.test.action.ScopeActionB\">\n    <result name=\"success\" type=\"dispatcher\">/jsp/test.jsp</result>\n    <interceptor-ref name=\"scope\">\n        <param name=\"key\">funky</param>\n        <param name=\"session\">person</param>\n        <param name=\"autoCreateSession\">true</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"basicStack\"/>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring OVal Validation Interceptor in Struts XML\nDESCRIPTION: Example of extending the oval-default package and applying the ovalValidationStack interceptor to an action in Struts configuration file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n   <package namespace=\"/myactions\" name=\"myactions\" extends=\"oval-default\">\n        <action name=\"simpleFieldsXMLChild\" class=\"org.apache.struts2.interceptor.SimpleFieldsXMLChild\">\n            <interceptor-ref name=\"ovalValidationStack\"/>\n            <result type=\"void\"></result>\n        </action>\n   </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring SMI via Java Annotation on Action Class\nDESCRIPTION: Java code example showing how to configure Strict Method Invocation (SMI) using the @AllowedMethods annotation on an action class in Struts 2.5.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@AllowedMethods(\"end\")\npublic class ClassLevelAllowedMethodsAction {\n    public String execute() { \n        return ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generator Bean with CDI Producers for Struts 2\nDESCRIPTION: An application-scoped CDI bean that produces random numbers and configuration values for the NumberGuess game. It uses CDI producer methods with qualifier annotations to provide these values to other beans.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2.example.cdi;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.inject.Produces;\nimport java.io.Serializable;\n\n@ApplicationScoped\npublic class Generator implements Serializable {\n   \n   private java.util.Random random = new java.util.Random( System.currentTimeMillis() );\n   \n   private int maxNumber = 100;\n   \n   java.util.Random getRandom() {\n      return random;\n   }\n   \n   @Produces @Random int next() { \n      return getRandom().nextInt(maxNumber); \n   }\n   \n   @Produces @MaxNumber int getMaxNumber() {\n      return maxNumber;\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Action Chaining with Selective Property Copying\nDESCRIPTION: Example showing how to chain actions while controlling which properties are copied between them. Only the 'prop1' property will be copied from the first action to the second using the includes parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/chaining-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"basicStack\"/>\n\t<result name=\"success\" type=\"chain\">otherAction</result>\n</action>\n\n<action name=\"otherAction\" class=\"com.examples.OtherAction\">\n    <interceptor-ref name=\"chainStack\">\n\t\t<param name=\"chain.includes\">prop1</param>\n\t</interceptor-ref>\n\t<result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Registering Interceptors and Creating Stacks in Apache Struts XML\nDESCRIPTION: This XML snippet demonstrates how to register individual interceptors and create an interceptor stack in Apache Struts. It shows the registration of a 'security' interceptor and the creation of a 'secureStack' that includes the security interceptor and the default stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptor-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n  <interceptor name=\"security\" class=\"com.company.security.SecurityInterceptor\"/>\n  <interceptor-stack name=\"secureStack\">\n    <interceptor-ref name=\"security\"/>\n    <interceptor-ref name=\"defaultStack\"/>\n  </interceptor-stack>\n</interceptors>\n```\n\n----------------------------------------\n\nTITLE: Implementing DispatcherListener in Java for Apache Struts\nDESCRIPTION: This code snippet demonstrates how to implement a DispatcherListener to execute custom code when a Dispatcher is initialized or destroyed. It shows how to add a DispatcherListener to the Dispatcher and define methods for initialization and destruction events.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/dispatcher-listener.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  static {\n     Dispatcher.addDispatcherListener(new DispatcherListener() {\n         public void dispatcherInitialized(Dispatcher du) {\n            // do something to Dispatcher after it is initialized eg.\n            du.setConfigurationManager(....);\n         }\n\n         public void dispatcherDestroyed(Dispatcher du) {\n            // do some cleanup after Dispatcher is destroyed.\n         }\n     });\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This snippet demonstrates how to create a table of contents in Markdown using a special syntax. It includes a placeholder that will be replaced with the actual table of contents, excluding the main header.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/creating-and-signing-a-distribution.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Select Tag in JSP\nDESCRIPTION: Demonstrates how to use the Struts 2 select tag to create a dropdown list for selecting a favorite sport. The tag uses the 'key' attribute for label and value determination, and the 'list' attribute to specify the options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"personBean.sport\" list=\"sports\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Div Tag with Topic Control and Form Submission in Struts 2\nDESCRIPTION: Complex implementation of the Div tag that uses topics to control the timer, highlights content in red after reload, and submits a form. This demonstrates advanced features including listenTopics, highlightColor, and formId attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-div-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<form id=\"form\">\n   <label for=\"textInput\">Text to be submited when div reloads</label>\n   <input type=textbox id=\"textInput\" name=\"data\">\n </form>\n <sx:div \n      href=\"%{#url}\" \n      updateFreq=\"3000\"\n      listenTopics=\"/refresh\"\n      startTimerListenTopics=\"/startTimer\"\n      stopTimerListenTopics=\"/stopTimer\"\n      highlightColor=\"red\"\n      formId=\"form\">\n  Initial Content\n </sx:div>\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 iterator Tag with Complex Objects in HTML\nDESCRIPTION: This snippet shows how to use the Struts 2 iterator tag with a collection of complex objects (State objects), accessing specific properties of each object in the collection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/control-tags.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"margin-left:15px\">\n    <s:iterator value=\"states\" >\t\n        <tr><td><s:property value=\"stateAbbr\" /></td> <td><s:property value=\"stateName\" /></tr>\n    </s:iterator>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Testing Failed Validation in Struts Action\nDESCRIPTION: JUnit test method that verifies the Action's validation fails when required form parameters are missing. Specifically tests the case of missing firstName field.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/unit-testing.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testExecuteValidationFailsMissingFirstName() throws Exception {\n    //request.setParameter(\"personBean.firstName\", \"Bruce\");\n    request.setParameter(\"personBean.lastName\", \"Phillips\");\n    request.setParameter(\"personBean.email\", \"bphillips@ku.edu\");\n    request.setParameter(\"personBean.age\", \"19\");\n    \n    ActionProxy actionProxy = getActionProxy(\"/register.action\");\n    Register action = (Register) actionProxy.getAction() ;\n    \n    assertNotNull(\"The action is null but should not be.\", action);\n    \n    String result = actionProxy.execute();\n    \n    assertEquals(\"The execute method did not return \" + ActionSupport.INPUT + \" but should have.\", ActionSupport.INPUT, result);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict DMI in Struts 2.3 XML\nDESCRIPTION: Example struts.xml configuration for Strict DMI in Struts 2.3. It demonstrates how to enable Dynamic Method Invocation and set up allowed methods for specific actions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n    \"http://struts.apache.org/dtds/struts-2.3.dtd\">\n<struts>\n\n    <constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\"/>\n\n    <package name=\"default\" extends=\"struts-default\" strict-method-invocation=\"true\">\n\n    <action name=\"index\" class=\"org.apache.struts2.examples.actions.Index\">\n        <result name=\"success\" type=\"redirectAction\">hello</result>\n    </action>\n\n    <action name=\"hello\" class=\"org.apache.struts2.examples.actions.HelloAction\">\n        <result name=\"success\">/WEB-INF/content/hello.jsp</result>\n        <result name=\"redisplay\" type=\"redirectAction\">hello</result>\n        <allowed-methods>add</allowed-methods>\n    </action>\n\n  </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Theme in Struts XML\nDESCRIPTION: The default theme can be set in struts.xml using the struts.ui.theme property. If not specified, it defaults to 'xhtml' theme.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/selecting-themes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.ui.theme\" value=\"xhtml\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Interceptor in Struts XML\nDESCRIPTION: Examples showing how to configure the Token Interceptor in Struts actions. Includes a basic configuration and an example with method exclusion using excludeMethods parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/token-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"token\"/>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n\n <!-- In this case, myMethod of the action class will not\n        get checked for invalidity of token -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"token\">\n        <param name=\"excludeMethods\">myMethod</param>\n     </interceptor-ref>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Basic Action Chaining Example with Chain Result Type\nDESCRIPTION: Demonstrates how to chain two actions using the chain result type and basicStack interceptor stack. The first action chains to the second, which includes the chain interceptor to copy properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/chaining-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"basicStack\"/>\n\t<result name=\"success\" type=\"chain\">otherAction</result>\n</action>\n\n<action name=\"otherAction\" class=\"com.examples.OtherAction\">\n    <interceptor-ref name=\"chain\"/>\n\t<interceptor-ref name=\"basicStack\"/>\n\t<result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n Interceptor in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure the I18n Interceptor in a Struts action. It shows setting the locale storage to 'cookie' and including it in the interceptor stack for an action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/i18n-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor name=\"i18nCookie\" class=\"org.apache.struts2.interceptor.I18nInterceptor\"/>\n\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"i18nCookie\">\n        <param name=\"localeStorage\">cookie</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"basicStack\"/>\n    <result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Plugin Interface in Java\nDESCRIPTION: Creates an interface IMyPlugIn that defines a saySomething() method. This interface will be implemented by the plugin and used by the application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/extending-an-application-with-custom-plugins.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\npublic interface IMyPlugIn {\n   String saySomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Package Structure for Resource Bundles in Struts 2\nDESCRIPTION: Shows the directory structure used when searching for resource bundles in a Struts 2 application. This illustrates how package.properties files are located in the package hierarchy.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncom/\n    acme/\n         package.properties\n         actions/\n                 package.properties\n                 FooAction.java\n                 FooAction.properties\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Action with CDI Injection\nDESCRIPTION: A Struts 2 action class that demonstrates CDI integration using @Inject annotation to inject a Game bean. The class includes methods for executing the action and processing user guesses in a NumberGuess game.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2.example.cdi;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport javax.inject.Inject;\n\npublic class NumberGuess extends ActionSupport {\n\n    @Inject\n    Game game;\n\n    public Game getGame() {\n        return game;\n    }\n\n    @Override\n    public String execute() throws Exception {\n        return SUCCESS;\n    }\n\n    public String guess() throws Exception {\n        final String errorMessage = game.check();\n        addActionError(errorMessage);\n\n        if (Game.CORRECT.equals(errorMessage)) {\n            game.reset();\n        } else if (game.getRemainingGuesses() == 0) {\n            addActionError(\"The correct guess was \" + game.getGuess() + \". Game is reset.\");\n            game.reset();\n        }\n\n\n        return SUCCESS;\n    }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Result Name in Struts XML\nDESCRIPTION: Shows how to configure a result without specifying the name attribute, which defaults to 'success'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-types.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<result>/WEB-INF/index.jsp</result>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Metadata Interceptor in Struts XML\nDESCRIPTION: This snippet demonstrates how to configure the Fetch Metadata Interceptor in a Struts action definition. It shows how to set exempted paths for cross-site traffic using the 'fetchMetadata.exemptedPaths' parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/fetch-metadata-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action  name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"defaultStack\">\n            <param name=\"fetchMetadata.exemptedPaths\">/path1,/path2,/path3</param>\n    </interceptor-ref>\n    <result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Multiple File Uploads Using Lists\nDESCRIPTION: HTML form using Struts 2 tags for uploading multiple files with the same input name. This approach is used with an Action class that handles multiple files using Lists instead of arrays.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<s:form action=\"doMultipleUploadUsingList\" method=\"POST\" enctype=\"multipart/form-data\">\n    <s:file label=\"File (1)\" name=\"upload\"/>\n    <s:file label=\"File (2)\" name=\"upload\"/>\n    <s:file label=\"FIle (3)\" name=\"upload\"/>\n    <s:submit cssClass=\"btn btn-primary\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter Method for Dependency Injection\nDESCRIPTION: This code demonstrates the setter method required in the EditAction class for Spring to inject the EditService dependency. The method follows standard Java bean naming conventions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void setEditService(EditService editService) {\n    this.editService = editService;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Multiple Async Tasks in Struts\nDESCRIPTION: Implementation of chained asynchronous operations. This example demonstrates how to serialize multiple async tasks by returning a new Callable from the first Callable's call method, creating a sequence of operations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/async/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncAction {\n\n    public Callable<String> execute() throws InterruptedException {\n        return new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                waitForEvent1();\n                return new Callable<String>() {\n\n                    @Override\n                    public String call() throws Exception {\n                        waitForEvent2();\n                        return \"success\";\n                    }\n                };\n            }\n        };\n    }\n\n    private void waitForEvent1() throws InterruptedException {\n        Thread.sleep(40000);\n    }\n\n    private void waitForEvent2() throws InterruptedException {\n        Thread.sleep(40000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Skip Navigation\nDESCRIPTION: HTML/Markdown hybrid snippet for skip navigation to previous year's announcements\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2024.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<p class=\"pull-right\">\n  Skip to: <a href=\"announce-2023\">Announcements - 2023</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Struts Dojo Tree Component Tag Attributes\nDESCRIPTION: A comprehensive HTML table listing all attributes available for the Tree component. This includes attribute names, whether they're required, default values, evaluation status, types, and descriptions for each parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>\t\t<table width=\"100%\">\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\"><h4>Dynamic Attributes Allowed:</h4> false</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\">&nbsp;</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Name</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Required</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Default</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Evaluated</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Type</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Description</h4></th>\n\n\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">accesskey</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html accesskey attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">blankIconSrc</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Blank icon image source.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">childCollectionProperty</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The childCollectionProperty property.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">collapsedNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma separated lis of topics to be published when a node is collapsed. An object with a 'node' property will be passed as parameter to the topics.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error style definitions for element to use</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css style to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">disabled</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html disabled attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published after the request(if the request fails).Only valid if 'href' is set</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorPosition</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Define error position of form element (top|bottom)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">expandIconSrcMinus</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Expand icon (-) image source.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">expandIconSrcPlus</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Expand Icon (+) image source.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">expandedNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma separated lis of topics to be published when a node is expanded. An object with a 'node' property will be passed as parameter to the topics.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">gridIconSrcC</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Image source for under child item child icons.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">gridIconSrcL</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"> Image source for last child grid.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">gridIconSrcP</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Image source for under parent item child icons.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">gridIconSrcV</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Image source for vertical line.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">gridIconSrcX</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Image source for grid for sole root item.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">gridIconSrcY</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Image source for grid for last root item.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">href</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Url used to load the list of children nodes for an specific node, whose id will be passed as a parameter named 'nodeId' (empty for root)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">iconHeight</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">18px</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Icon height</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">iconWidth</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">19px</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Icon width</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">id</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The id to use for the element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">javascriptTooltip</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n```\n\n----------------------------------------\n\nTITLE: Nested Iterators with Group and User Data (JSP)\nDESCRIPTION: This snippet demonstrates nested iterators, iterating over groups and their users, using the status attribute to handle formatting.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"groupDao.groups\" status=\"groupStatus\">\n    <tr class=\"<s:if test=\"#groupStatus.odd == true \">odd</s:if><s:else>even</s:else>\">\n        <td><s:property value=\"name\" /></td>\n        <td><s:property value=\"description\" /></td>\n        <td>\n            <s:iterator value=\"users\" status=\"userStatus\">\n                <s:property value=\"fullName\" /><s:if test=\"!#userStatus.last\">,</s:if>\n            </s:iterator>\n        </td>\n    </tr>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Action in Struts 2\nDESCRIPTION: XML configuration example for setting up a default action in Struts 2. This action will handle any unmatched requests in the package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"Hello\" extends=\"action-default\">\n\n    <default-action-ref name=\"UnderConstruction\"/>\n\n    <action name=\"UnderConstruction\">\n        <result>/UnderConstruction.jsp</result>\n    </action>\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Autocompleter with Name Prefix in Struts\nDESCRIPTION: Shows the JSON format for autocompleter data where the property name starts with the field name. The autocompleter will match property names that begin with its field name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"states\" : [\n        [\"Alabama\",\"AL\"],\n        [\"Alaska\",\"AK\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker with Topic Publishing in Struts 2\nDESCRIPTION: Example showing how to configure a DateTimePicker to publish events when its value changes. Uses the valueNotifyTopics attribute and Dojo's topic subscription mechanism to set up event listeners.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-datetimepicker-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n <sx:datetimepicker id=\"picker\" label=\"Order Date\" valueNotifyTopics=\"/value\"/>\n \n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/value\", function(textEntered, date, widget){\n     alert('value changed');\n     //textEntered: String enetered in the textbox\n     //date: JavaScript Date object with the value selected\n     //widet: widget that published the topic \n });\n </script>  \n\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-RPC Action in Struts XML\nDESCRIPTION: Demonstrates the XML configuration for a JSON-RPC enabled action in Struts. It shows how to enable SMD (Simple Method Definition) for both the interceptor and the result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"RPC\" namespace=\"/nodecorate\" extends=\"json-default\">\n    <action name=\"SMDAction\" class=\"smd.SMDAction\" method=\"smd\">\n        <interceptor-ref name=\"json\">\n            <param name=\"enableSMD\">true</param>\n        </interceptor-ref>\n        <result type=\"json\">\n             <param name=\"enableSMD\">true</param>\n        </result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bean Validation Plugin in Struts XML\nDESCRIPTION: This XML configuration demonstrates how to set up the Bean Validation Plugin in the struts.xml file. It includes constants for provider class, XML configuration, and message encoding, as well as extending the struts-bean-validation package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/bean-validation/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.beanValidation.providerClass\" value=\"org.hibernate.validator.HibernateValidator\"/>\n    <constant name=\"struts.beanValidation.ignoreXMLConfiguration\" value=\"false\"/>\n    <constant name=\"struts.beanValidation.convertMessageToUtf\" value=\"false\"/>\n    <constant name=\"struts.beanValidation.convertMessageFromEncoding\" value=\"ISO-8859-1\"/>\n\n    <package name=\"my-bean-validation\" extends=\"struts-bean-validation\">\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts Action Class for Visitor Validation\nDESCRIPTION: Java action class that handles the form submission and validation. Extends AbstractValidationActionSupport and includes getter/setter methods for the User object with StrutsParameter annotation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-visitor-field-validator.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class VisitorValidatorsExampleAction extends AbstractValidationActionSupport {\n\n    private User user;\n\n    @StrutsParameter(depth = 1)\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPS Cache Control Interceptor for IE in Java\nDESCRIPTION: This Java interceptor sets the HTTP Header to work around IE SSL issues when streaming content. It extends AroundInterceptor and sets the CACHE-CONTROL header to PRIVATE before the action invocation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/https-and-ie-issues.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.tuxbot.ww.interceptor;\n\nimport com.opensymphony.xwork.interceptor.AroundInterceptor;\nimport com.opensymphony.xwork.ActionInvocation;\nimport com.opensymphony.webwork.ServletActionContext;\n\nimport javax.servlet.http.HttpServletResponse;\n/**\n * This interceptor sets the the HTTP Header to work around IE SSL weirdness  *\n * @author Eric Molitor <a href=\"mailto:eric@tuxbot.com\">eric@tuxbot.com</a>\n * @version 1.0\n */\npublic class HTTPRequestCachePrivateInterceptor extends AroundInterceptor {\n\n    protected void after(ActionInvocation actionInvocation, String string) throws Exception {\n        // Nothing\n    }\n\n    protected void before(ActionInvocation actionInvocation) throws Exception {\n        HttpServletResponse res = (HttpServletResponse) actionInvocation.getInvocationContext().get(ServletActionContext.HTTP_RESPONSE);\n        res.setHeader(\"CACHE-CONTROL\", \"PRIVATE\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Referencing Action in Namespace for Client Validation\nDESCRIPTION: Example showing the proper way to reference an action in a specific namespace when using client-side validation. This approach provides both the namespace and action attributes separately.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-side-validation.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form namespace=\"/user\" action=\"submitProfile\" validate=\"true\">\n  ...\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Jetty-specific Struts 2 Configuration\nDESCRIPTION: Required XML configuration settings for running Struts 2 Convention Plugin on embedded Jetty.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.exclude.parentClassLoader\" value=\"false\" />\n<constant name=\"struts.convention.action.fileProtocols\" value=\"jar,code-source\" />\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Data from JSP for AJAX\nDESCRIPTION: This JSP file demonstrates how to create a JSON response for AJAX requests. It retrieves a book ID from the request parameters, fetches the corresponding book object, and outputs it as a JSON string. This approach can be used for direct AJAX responses without additional plugins.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ page import=\"java.util.Iterator,\n    java.util.List,\n    com.esolaria.dojoex.Book,\n    com.esolaria.dojoex.BookManager\" %>\n<%\n    String bookIdStr = request.getParameter(\"bookId\");\n    int bookId = (bookIdStr == null || \"\".equals(bookIdStr.trim())) \n        ? 0 : Integer.parseInt(bookIdStr);\n    Book book = BookManager.getBook(bookId);\n    if (book != null) {\n        out.println(book.toJSONString());\n        System.out.println(\"itis: \" + book.toJSONString());\n    }\n%>\n```\n\n----------------------------------------\n\nTITLE: Using I18n Tag to Specify Resource Bundle in Struts 2\nDESCRIPTION: Shows how to use the i18n tag to push a specific resource bundle onto the value stack, making it available to inner tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<s:i18n name=\"some.package.bundle\">\n  <s:text name=\"some.key\" />\n</s:i18n>\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Property in JSP using Struts Tags\nDESCRIPTION: Demonstrates how to access an Action property directly using the <s:property> tag, as the Action is pushed onto the value stack which is the OGNL root.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"postalCode\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Push Tag Usage in JSP\nDESCRIPTION: Demonstrates basic usage of push tag to access user properties by pushing a user object onto the stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/push-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:push value=\"user\">\n    <s:propery value=\"firstName\" />\n    <s:propery value=\"lastName\" />\n</s:push>\n```\n\n----------------------------------------\n\nTITLE: Static Tree Structure in Struts XML\nDESCRIPTION: Demonstrates how to create a static tree structure using nested treenode tags with IDs and labels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<s:tree id=\"...\" label=\"...\">\n    <s:treenode id=\"...\" label=\"...\" />\n    <s:treenode id=\"...\" label=\"...\">\n        <s:treenode id=\"...\" label=\"...\" />\n        <s:treenode id=\"...\" label=\"...\" />\n    </s:treenode>\n    <s:treenode id=\"...\" label=\"...\" />\n </s:tree>\n```\n\n----------------------------------------\n\nTITLE: Configuring SMI via Java Annotation on Package Level\nDESCRIPTION: Java code example demonstrating how to configure Strict Method Invocation (SMI) using the @AllowedMethods annotation at the package level in Struts 2.5.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@org.apache.struts2.convention.annotation.AllowedMethods({\"home\", \"start\"})\npackage org.apache.struts2.convention.actions.allowedmethods;\n```\n\n----------------------------------------\n\nTITLE: Action Tag with Method Selection in JSP\nDESCRIPTION: This example demonstrates how to invoke a specific method of an action using the bang (!) operator in the action name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/action-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n  <s:action name=\"actionTagAction!specialMethod\" executeResult=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring ContextLoaderListener in Web XML\nDESCRIPTION: Adds the Spring ContextLoaderListener to the web application's configuration for Spring integration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n```\n\n----------------------------------------\n\nTITLE: Subset Tag with Custom Decider in JSP\nDESCRIPTION: This example demonstrates using a custom Decider implementation to filter elements of the collection based on custom logic (filtering even numbers).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/subset-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n<s:subset source=\"myList\" decider=\"myDecider\">\n       <s:iterator>\n            <s:property />\n       </s:iterator>\n</s:subset>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Result Encoding in Struts XML\nDESCRIPTION: Demonstrates how to set the encoding for a JSON result in Struts configuration XML. This allows specifying a custom encoding like UTF-8 for the JSON output.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<result type=\"json\">\n  <param name=\"encoding\">UTF-8</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Customizing Control Footer Template in FTL\nDESCRIPTION: Overrides the controlfooter.ftl template to handle field errors at the bottom position. This template closes the form control elements and appends any field-specific error messages when the errorposition is set to 'bottom'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_5\n\nLANGUAGE: ftl\nCODE:\n```\n${parameters.after!}<#t/>\n    </td><#lt/>\n</tr>\n<#if (parameters.errorposition!\"top\") == 'bottom'>\n<#assign hasFieldErrors = parameters.name?? && fieldErrors?? && fieldErrors[parameters.name]??/>\n<#if hasFieldErrors>\n<tr errorFor=\"${parameters.id}\">\n    <td class=\"tdErrorMessage\" colspan=\"2\"><#rt/>\n        <#if hasFieldErrors>\n            <#list fieldErrors[parameters.name] as error>\n                <div class=\"errorMessage\">${error?html}</div><#t/>\n            </#list>\n        </#if>\n    </td><#lt/>\n</tr>\n</#if>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Basic FreeMarker Template Structure\nDESCRIPTION: Simple FreeMarker template showing basic HTML structure with variable interpolation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title>Hello</title>\n</head>\n<body>\n\nHello, ${name}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Settings in Struts 2 XML\nDESCRIPTION: XML configuration for setting file upload limits and other parameters in Struts 2.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.multipart.maxSize\" value=\"1000000\"/>\n    <constant name=\"struts.multipart.maxFileSize\" value=\"750000\"/>\n\n    <action name=\"doUpload\" class=\"com.example.UploadAction\">\n        <interceptor-ref name=\"basicStack\"/>\n        <interceptor-ref name=\"actionFileUpload\">\n            <param name=\"maximumSize\">500000</param>\n        </interceptor-ref>\n        <interceptor-ref name=\"validation\"/>\n        <interceptor-ref name=\"workflow\"/>\n\n        <result name=\"success\">good_result.jsp</result>\n    </action>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Visitor Validator in Apache Struts XML\nDESCRIPTION: Example showing how to configure the visitor validator in Apache Struts using both plain validator syntax and field validator syntax. The validator forwards validation to object properties of an action using the object's own validation files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/visitor-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"visitor\">\n        <param name=\"fieldName\">user</param>\n        <param name=\"context\">myContext</param>\n        <param name=\"appendPrefix\">true</param>\n    </validator>\n \n    <!-- Field Validator Syntax -->\n    <field name=\"user\">\n       <field-validator type=\"visitor\">\n          <param name=\"context\">myContext</param>\n          <param name=\"appendPrefix\">true</param>\n       </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Implementing HelloWorldAction Controller Class in Struts 2\nDESCRIPTION: This Action class acts as the controller in the MVC pattern. It extends ActionSupport and implements the execute method which creates a MessageStore object and returns SUCCESS. The class includes a getter for the MessageStore object to make it available to the view.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/hello-world-using-struts2.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts.helloworld.action;\n\nimport org.apache.struts.helloworld.model.MessageStore;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class HelloWorldAction extends ActionSupport {\n    private MessageStore messageStore;\n\n    public String execute() {\n        messageStore = new MessageStore() ;\n        \n        return SUCCESS;\n    }\n\n    public MessageStore getMessageStore() {\n        return messageStore;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Action Mapping for Autocompleter in Struts\nDESCRIPTION: Shows the Struts XML configuration needed to set up a JSON action that provides data for an autocompleter. The action uses the json-default package and returns the options map as the root object.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n...\n   <package name=\"autocompleter\" namespace=\"/autocompleter\" extends=\"json-default\">\n       <action name=\"getStates\" class=\"AutocompleterExample\">\n           <result type=\"json\">\n               <param name=\"root\">options</param></result>\n       </action>\n   </package>\n...\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag with Freemarker (Basic Example)\nDESCRIPTION: Basic example of using the Struts component tag in Freemarker to render a custom component without parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/component-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: freemarker\nCODE:\n```\n<@s.component template=\"/my/custom/component.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Granting All Permissions in SunOne 7.0 for Struts\nDESCRIPTION: This configuration grants all security permissions to the application, which allows Struts to function without restrictions. While this approach is simpler, it provides less security by giving unrestricted access.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/sunone-7-0.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ngrant {\n\tpermission java.security.AllPermission;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Class for Non-Field Validation in Struts\nDESCRIPTION: Java action class that extends AbstractValidationActionSupport with properties that will be validated. The class includes getters and setters for three text fields with @StrutsParameter annotations for proper parameter mapping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-non-field-validators.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class NonFieldValidatorsExampleAction extends AbstractValidationActionSupport {\n\n    private String someText;\n    private String someTextRetype;\n    private String someTextRetypeAgain;\n\n    public String getSomeText() {\n        return someText;\n    }\n\n    @StrutsParameter\n    public void setSomeText(String someText) {\n        this.someText = someText;\n    }\n\n    public String getSomeTextRetype() {\n        return someTextRetype;\n    }\n\n    @StrutsParameter\n    public void setSomeTextRetype(String someTextRetype) {\n        this.someTextRetype = someTextRetype;\n    }\n\n    public String getSomeTextRetypeAgain() {\n        return someTextRetypeAgain;\n    }\n\n    @StrutsParameter\n    public void setSomeTextRetypeAgain(String someTextRetypeAgain) {\n        this.someTextRetypeAgain = someTextRetypeAgain;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Result Action in Struts 2\nDESCRIPTION: This class implements an ActionSupport that returns a text stream response for AJAX calls. It demonstrates how to create and return an InputStream that can be used with the Struts 2 stream result type.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage actions;\n\nimport java.io.InputStream;\nimport java.io.StringBufferInputStream;\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class TextResult extends ActionSupport  {\n    private InputStream inputStream;\n    public InputStream getInputStream() {\n        return inputStream;\n    }\n\n    public String execute() throws Exception {\n        inputStream = new ByteArrayInputStream(\"Hello World! This is a text string response from a Struts 2 Action.\".getBytes(\"UTF-8\"));\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Configuration with Weld CDI Implementation\nDESCRIPTION: Extended Maven configuration that includes not only the Struts 2 CDI plugin and API, but also the Weld implementation dependencies. This setup is needed when using CDI in environments that don't provide a CDI implementation, such as Tomcat.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    ...\n    <dependency>\n        <groupId>org.apache.struts</groupId>\n        <artifactId>struts2-cdi-plugin</artifactId>\n        <version>${struts2.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>javax.enterprise</groupId>\n        <artifactId>cdi-api</artifactId>\n        <version>1.0-SP1</version>\n        <scope>provided</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.jboss.weld</groupId>\n        <artifactId>weld-core</artifactId>\n        <version>1.0.1-Final</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jboss.weld</groupId>\n        <artifactId>weld-se</artifactId>\n        <version>1.0.1-Final</version>\n    </dependency>\n    ...\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Collections using OGNL\nDESCRIPTION: Shows how to use 'in' and 'not in' operations to check for element existence in collections within Struts if-else tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n<s:if test=\"'foo' in {'foo','bar'}\">\n   muhahaha\n</s:if>\n<s:else>\n   boo\n</s:else>\n\n<s:if test=\"'foo' not in {'foo','bar'}\">\n   muhahaha\n</s:if>\n<s:else>\n   boo\n</s:else>\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Class with Collection Support\nDESCRIPTION: Action class demonstrating list and map handling with StrutsParameter annotations for type conversion depth control.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class MyBeanAction implements Action {\n    private List beanList = new ArrayList();\n    private Map beanMap = new HashMap();\n\n    @StrutsParameter(depth = 2)\n    public List getBeanList() {\n        return beanList;\n    }\n\n    public void setBeanList(List beanList) {\n        this.beanList = beanList;\n    }\n\n    @StrutsParameter(depth = 2)\n    public Map getBeanMap() {\n        return beanMap;\n    }\n\n    public void setBeanMap(Map beanMap) {\n        this.beanMap = beanMap;\n    }\n\n    public String execute() throws Exception {\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JasperReports Output Format Configuration\nDESCRIPTION: Parameter configuration specifying the output format for the generated report.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<param name=\"format\">PDF</param>\n```\n\n----------------------------------------\n\nTITLE: Type Cast Implementation Example\nDESCRIPTION: Code showing how to determine and add type casting to OGNL expressions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-expression-compilation.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nClass type = OgnlRuntime.getCompiler().getInterfaceClass(provider.getBean(beanName).getClass());\n\nExpressionCompiler.addCastString(context, \"((\" + type.getName() + \")\");\n```\n\n----------------------------------------\n\nTITLE: Property Exclusion Configuration\nDESCRIPTION: XML configuration showing how to exclude specific properties from JSON serialization using regular expressions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<result type=\"json\">\n  <param name=\"excludeProperties\">\n    login.password,\n    studentList.*.sin\n  </param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Updating target elements with Ajax response content\nDESCRIPTION: This example shows three different ways to update a target div element with content returned from an Ajax request. It demonstrates using the bind tag, submit tag, and anchor tag approaches.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n<s:div id=\"div\" />\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind targets=\"div\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit targets=\"div\" value=\"Make Request\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a targets=\"div\" value=\"Make Request\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Result in Apache Struts XML\nDESCRIPTION: This example demonstrates how to configure chain results in Apache Struts to connect multiple actions. It shows a basic chain from 'createAccount' to 'login', and then from 'login' to a 'dashboard' action in a different namespace (/secure).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/chain-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"public\" extends=\"struts-default\">\n    <!-- Chain creatAccount to login, using the default parameter -->\n    <action name=\"createAccount\" class=\"...\">\n        <result type=\"chain\">login</result>\n    </action>\n \n    <action name=\"login\" class=\"...\">\n        <!-- Chain to another namespace -->\n        <result type=\"chain\">\n            <param name=\"actionName\">dashboard</param>\n            <param name=\"namespace\">/secure</param>\n        </result>\n    </action>\n</package>\n \n<package name=\"secure\" extends=\"struts-default\" namespace=\"/secure\">\n    <action name=\"dashboard\" class=\"...\">\n        <result>dashboard.jsp</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Doubleselect Tag Usage Examples in JSP\nDESCRIPTION: Provides two examples of using the doubleselect tag in JSP. The first example uses a simple list for options, while the second uses a map. Both demonstrate conditional doubleList population based on the selected top-level option.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/doubleselect-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n <s:doubleselect label=\"doubleselect test1\" name=\"menu\" list=\"{'fruit','other'}\" doubleName=\"dishes\" doubleList=\"top == 'fruit' ? {'apple', 'orange'} : {'monkey', 'chicken'}\" />\n <s:doubleselect label=\"doubleselect test2\" name=\"menu\" list=\"#{'fruit':'Nice Fruits', 'other':'Other Dishes'}\" doubleName=\"dishes\" doubleList=\"top == 'fruit' ? {'apple', 'orange'} : {'monkey', 'chicken'}\" />\n```\n\n----------------------------------------\n\nTITLE: Namespace Annotation Usage in Struts 2\nDESCRIPTION: Demonstrates using @Namespace annotation to customize action URLs. Shows both class-level namespace definition and package-level namespace configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts2.convention.annotation.Action;\nimport org.apache.struts2.convention.annotation.Namespace;\n\n@Namespace(\"/custom\")\npublic class HelloWorld extends ActionSupport {\n  @Action(\"/different/url\")\n  public String execute() {\n    return SUCCESS;\n  }\n\n  @Action(\"url\")\n  public String doSomething() {\n    return SUCCESS;\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@org.apache.struts2.convention.annotation.Namespace(\"/custom\")\npackage com.example.actions;\n```\n\n----------------------------------------\n\nTITLE: Markdown ToC Configuration\nDESCRIPTION: Table of contents configuration using Jekyll-style markdown with a no_toc class and toc replacement directive\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2024.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Announcements 2024\n{:.no_toc}\n\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Simple UpDownSelect Implementation in JSP\nDESCRIPTION: This example demonstrates a basic implementation of the updownselect tag with a list of countries. It includes a header option and enables the empty option.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/updownselect-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:updownselect\n    list=\"#{'england':'England', 'america':'America', 'germany':'Germany'}\"\n    name=\"prioritisedFavouriteCountries\"\n    headerKey=\"-1\"\n    headerValue=\"--- Please Order Them Accordingly ---\"\n    emptyOption=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing topics after Ajax requests\nDESCRIPTION: This example demonstrates how to publish a Dojo topic after an Ajax request completes. It includes a JavaScript function that subscribes to the topic and receives the data returned from the request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_11\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\ndojo.event.topic.subscribe(\"/after\", function(data, request, widget){\n   alert('inside a topic event. after request');\n   //data : text returned from request\n   //request: XMLHttpRequest object\n   //widget: widget that published the topic\n});\n</script>\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind afterNotifyTopics=\"/after\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit afterNotifyTopics=\"/after\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a afterNotifyTopics=\"/after\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Collection Type Conversion Properties Configuration\nDESCRIPTION: Properties file configuration for type conversion, specifying key property, element type and creation behavior for collections.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nKeyProperty_beanList=id\nElement_beanList=MyBean\nCreateIfNull_beanList=true\n```\n\n----------------------------------------\n\nTITLE: Implementing StringLengthFieldValidator Annotation in Java\nDESCRIPTION: This code snippet demonstrates how to use the StringLengthFieldValidator annotation in Java. It shows the annotation with various parameters set, including message, key, shortCircuit, trim, minLength, and maxLength.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/string-length-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@StringLengthFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, trim = true, minLength = \"5\",  maxLength = \"12\")\n```\n\n----------------------------------------\n\nTITLE: Submitting Form with Autocompleter in Struts\nDESCRIPTION: Example of connecting a form to an Autocompleter. When the Autocompleter loads options, it will automatically submit the specified form identified by formId.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_71\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form id=\"form\">\n  <input type=\"textbox\" name=\"data\">\n</s:form>\n\n<sx:autocompleter formId=\"form\" href=\"%{#url}\"  />\n```\n\n----------------------------------------\n\nTITLE: Using param Tag with Named Parameters in JSP\nDESCRIPTION: Example showing how to use the param tag to add named parameters to a ui:component tag. This demonstrates passing key-value pairs as parameters to the parent component.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/param-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<ui:component>\n <ui:param name=\"key\"     value=\"[0]\"/>\n <ui:param name=\"value\"   value=\"[1]\"/>\n <ui:param name=\"context\" value=\"[2]\"/>\n</ui:component>\n```\n\n----------------------------------------\n\nTITLE: Creating MaxNumber Qualifier Annotation for CDI\nDESCRIPTION: A CDI qualifier annotation named MaxNumber used to identify a specific injection point for the maximum number value in the game. This annotation helps CDI determine which bean should be injected when multiple candidates exist.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2.example.cdi;\n\nimport javax.inject.Qualifier;\nimport java.lang.annotation.Documented;\nimport static java.lang.annotation.ElementType.*;\nimport java.lang.annotation.Retention;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport java.lang.annotation.Target;\n\n@Target( { TYPE, METHOD, PARAMETER, FIELD })\n@Retention(RUNTIME)\n@Documented\n@Qualifier\npublic @interface MaxNumber {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Interceptors in Struts 6.1.0+\nDESCRIPTION: Shows how to disable specific interceptors using the disabled parameter introduced in Struts 6.1.0. This allows for selective bypassing of interceptors without removing them from the stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myAction\" class=\"myActionClass\">\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"validation.disabled\">true</param>\n    </interceptor-ref>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Annotation in Java Collections\nDESCRIPTION: Demonstrates how to use the Element annotation to specify type conversion for Map and List collections. The example shows usage with a User class where the key property is the userName attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/element-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// The key property for User objects within the users collection is the <code>userName</code> attribute.\n@Element( value = com.acme.User.class )\nprivate Map userMap;\n\n@Element( value = com.acme.User.class )\npublic List userList;\n```\n\n----------------------------------------\n\nTITLE: Customizing ActionProxyFactory in Struts\nDESCRIPTION: Example of how to set a custom ActionProxyFactory implementation in Struts. This allows for custom behavior when obtaining Action classes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-proxy-and-actionproxy-factory.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n ActionProxyFactory.setFactory(new MyActionProxyFactory() {\n\n    // Do something interesting...\n\n });\n\n```\n\n----------------------------------------\n\nTITLE: URL Exclusion Pattern Configuration\nDESCRIPTION: Struts2 configuration to exclude specific URL patterns from being processed by the Struts filter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.action.excludePattern\" value=\".*unfiltered.*,.*\\.nofilter\"/>\n    ...\n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants with Value Substitution in Struts XML\nDESCRIPTION: Demonstrates how to define constants in struts.xml file using value substitution. It shows how to reference system properties and environment variables, as well as provide default values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/constant-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"os\" value=\"Current OS = ${os.name}\"/>\n\n    <constant name=\"struts.devMode\" value=\"${env.STRUTS_DEV_MODE:false}\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Auto-refreshing Div Tag with Loading Indicator in Struts 2\nDESCRIPTION: Implementation of a Div tag that reloads its content every 2 seconds and displays a loading indicator during content refresh. This example demonstrates the updateFreq and indicator attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-div-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<img id=\"indicator\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" style=\"display:none\"/>\n <sx:div href=\"%{#url}\" updateFreq=\"2000\" indicator=\"indicator\">\n   Initial Content\n </sx:div>\n```\n\n----------------------------------------\n\nTITLE: Applying Annotation Workflow Interceptor to an Action in Struts XML\nDESCRIPTION: XML configuration showing how to apply the AnnotationWorkflowInterceptor to a specific action. This enables the execution of annotated methods in the specified sequence.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/annotation-workflow-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"AnnotatedAction\" class=\"com.examples.AnnotatedAction\">\n   <interceptor-ref name=\"annotationWorkflow\"/>\n   <result name=\"success\" type=\"freemarker\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using Named Variables in Namespace with Java Action Class\nDESCRIPTION: Demonstrates how to define namespace patterns with named variables in a Java action class using annotations. The {userID} parameter from the URL will be bound to the action's userID field.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Namespace{\"/users/{userID}\");\npublic class DetailsAction exends ActionSupport {\n  private Long userID;\n\n  @StrutsParameter\n  public void setUserID(Long userID) {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Complex UpDownSelect Implementation in JSP\nDESCRIPTION: This example showcases a more advanced usage of the updownselect tag. It includes options for moving items up and down, selecting all items, and custom labels for these actions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/updownselect-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:updownselect\n    list=\"defaultFavouriteCartoonCharacters\"\n    name=\"prioritisedFavouriteCartoonCharacters\"\n    headerKey=\"-1\"\n    headerValue=\"--- Please Order ---\"\n    emptyOption=\"true\"\n    allowMoveUp=\"true\"\n    allowMoveDown=\"true\"\n    allowSelectAll=\"true\"\n    moveUpLabel=\"Move Up\"\n    moveDownLabel=\"Move Down\"\n    selectAllLabel=\"Select All\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Plugin in Struts 2 XML\nDESCRIPTION: Defines the struts-plugin.xml configuration file that registers the custom plugin with Struts 2. This file should be placed at the root of the plugin JAR.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/extending-an-application-with-custom-plugins.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n    \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n\n<struts>\n    <bean type=\"example.IMyInterface\" class=\"example.impl.MyPlugin\" name=\"myPlugin\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of ValueStack Access Functions\nDESCRIPTION: Implementation of the utility functions that provide access to Struts ValueStack from JSP EL expressions. These static methods extract data from the ActionContext and ValueStack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/access-to-valuestack-from-jsps.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.nmote.wwel;\n\nimport com.opensymphony.xwork.ActionContext;\n\n/**\n * Utility functions for accessing value stack and action context\n * from JSP 2.0 EL taglibs.\n */\npublic class Functions {\n\n\tpublic static Object findOnValueStack(String expr) {\n\t\tActionContext a = ActionContext.getContext();\n\t\tObject value = a.getValueStack().findValue(expr);\n\t\treturn value;\n\t}\n\n\tpublic static Object getTopOfValueStack() {\n\t\tActionContext a = ActionContext.getContext();\n\t\tObject value = a.getValueStack().peek();\n\t\treturn value;\n\t}\n\n\tpublic static Object getActionName() {\n\t\tActionContext a = ActionContext.getContext();\n\t\tObject value = a.getName();\n\t\treturn value;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Timers for Ajax Div in Struts\nDESCRIPTION: Setting up automatic refresh of an ajax div using updateFreq and delay attributes to specify refresh frequency and initial delay in milliseconds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<saf:div theme=\"ajax\" id=\"weather\" href=\"http://www.weather.com/weather?zip=97239\"\n        loadingText=\"Loading weather information...\"\n        errorText=\"Unable to contact weather server\">\n        delay=\"2000\"\n        updateFreq=\"60000\"\n    Placeholder...\n</saf:div>\n```\n\n----------------------------------------\n\nTITLE: Inline JavaScript with Struts Script Tag\nDESCRIPTION: Example demonstrating how to include inline JavaScript code within the Struts script tag using jQuery document ready function.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/script-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:script>\n    $(function () {\n        ...\n    });\n</s:script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fieldexpression Validator in Struts XML\nDESCRIPTION: Example XML configuration for the fieldexpression validator in Struts, showing both Plain-Validator and Field-Validator syntax. The validator uses OGNL expressions to perform comparisons between fields, such as comparing credit limits in this example.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/fieldexpression-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Plain Validator Syntax -->\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"fieldexpression\">\n       <param name=\"fieldName\">myField</param>\n       <param name=\"expression\"><![CDATA[#myCreditLimit > #myGirfriendCreditLimit]]></param>\n       <message>My credit limit should be MORE than my girlfriend</message>\n    <validator>\n     \n    <!-- Field Validator Syntax -->\n    <field name=\"myField\">\n        <field-validator type=\"fieldexpression\">\n            <param name=\"expression\"><![CDATA[#myCreditLimit > #myGirfriendCreditLimit]]></param>\n            <message>My credit limit should be MORE than my girlfriend</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Basic Scope Interceptor Configuration in Struts XML\nDESCRIPTION: Demonstrates how to configure the scope interceptor to manage session-scoped variables like 'filter' and 'orderBy' across requests. This example shows a basic setup with automatic session creation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/scope-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <!-- As the filter and orderBy parameters are common for all my browse-type actions,\n      you can move control to the scope interceptor. In the session parameter you can list\n      action properties that are going to be automatically managed over session. You can\n      do the same for application-scoped variables-->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"basicStack\"/>\n     <interceptor-ref name=\"hibernate\"/>\n     <interceptor-ref name=\"scope\">\n         <param name=\"session\">filter,orderBy</param>\n         <param name=\"autoCreateSession\">true</param>\n     </interceptor-ref>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Internationalization of OVal Validation Messages\nDESCRIPTION: Example of OVal validation error message internationalization using property files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nnotnull.field=${field.name} cannot be null\n\nfield.too.long=${field.name} value is too long, allowed length is ${max}\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Extensions for REST in Struts 2\nDESCRIPTION: Sets up the action extensions that Struts will recognize, which includes XML, JSON, action, and others. This is necessary because the REST plugin removes the default 'action' extension.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <constant name=\"struts.action.extension\" value=\"xhtml,,xml,json,action\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Parameters Exclusion List in XML\nDESCRIPTION: Default list of parameter patterns that are excluded from parameter processing in Struts\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/parameters-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*\n```\n\n----------------------------------------\n\nTITLE: Adding Tiles 3 Plugin Dependency in Maven\nDESCRIPTION: This XML snippet shows how to include the struts-tiles3-plugin as a dependency in a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the Tiles 3 plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles-3/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-tiles3-plugin</artifactId>\n  <version>${version.tiles}</version>\n  <scope>compile</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Portlet Project\nDESCRIPTION: Maven command to generate a Struts 2 portlet project using the portlet archetype, which creates a minimally populated JSR 168 portlet with view, edit, and help mode examples.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B -DgroupId=com.mycompany.mysystem \\\n                          -DartifactId=myWebApp \\\n                          -DarchetypeGroupId=org.apache.struts \\\n                          -DarchetypeArtifactId=struts2-archetype-portlet\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Autocompleter as Named Map in Struts\nDESCRIPTION: Shows the JSON format for autocompleter data as a map inside an object, where the property name matches the field name. This format allows for additional context in the response.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"state\" : {\n        \"Alabama\" : \"Alabama\",\n        \"Alaska\" : \"AK\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Struts 2.1 web.xml Filter Chain Configuration\nDESCRIPTION: Example of how to configure the filter chain in web.xml for SiteMesh integration with Struts 2.1.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitemesh/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n    <filter-name>struts-prepare</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>\n</filter>\n\n<filter>\n    <filter-name>struts-execute</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>\n</filter>\n\n<filter>\n    <filter-name>sitemesh</filter-name>\n    <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>\n</filter>\n\n<filter-mapping>\n    <filter-name>struts-prepare</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n    <filter-name>sitemesh</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n    <filter-name>struts-execute</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with Bind Tag in Struts 2\nDESCRIPTION: Demonstrates how to use errorNotifyTopics with the sx:bind tag to execute custom JavaScript when an AJAX request fails. It also shows how to use a loading indicator that displays during the request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/error\", function(error, request, widget){\n     alert('inside a topic event. on error');\n     //error : error object (error.message has the error message)\n     //request: XMLHttpRequest object\n     //widget: widget that published the topic\n });\n </script>         \n \n <input type=\"button\" id=\"button\">\n <img id=\"ind1\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" style=\"display:none\"/>\n <sx:bind href=\"%{#ajaxTest}\" indicator=\"ind1\" errorNotifyTopics=\"/error\" sources=\"button\" events=\"onclick\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Struts 2 Filters in Web XML\nDESCRIPTION: This reference indicates that filters are configured in the web.xml file for the Struts 2 framework. These filters are part of the request processing chain.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/big-picture.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nweb.xml\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Values with Struts Text Tag in JSP\nDESCRIPTION: Example of using the Struts text tag with a parameter to format currency values based on locale-specific properties file definitions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/text-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:text name=\"format.money\"><s:param name=\"value\" value=\"myMoneyValue\"/></s:text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Interceptor in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure the Exception Interceptor in a Struts application. It includes global exception mappings, action-specific exception handling, and result definitions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/exception-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <struts>\n     <package name=\"default\" extends=\"xwork-default\">\n         <global-results>\n             <result name=\"error\" type=\"freemarker\">error.ftl</result>\n         </global-results>\n\n         <global-exception-mappings>\n             <exception-mapping exception=\"java.lang.Exception\" result=\"error\"/>\n         </global-exception-mappings>\n\n         <action name=\"test\">\n             <interceptor-ref name=\"exception\"/>\n             <interceptor-ref name=\"basicStack\"/>\n             <exception-mapping exception=\"com.acme.CustomException\" result=\"custom_error\"/>\n             <result name=\"custom_error\">custom_error.ftl</result>\n             <result name=\"success\" type=\"freemarker\">test.ftl</result>\n         </action>\n     </package>\n </struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Action Mapping in XML\nDESCRIPTION: XML configuration for defining a Struts action mapping that uses Spring as the object factory. This snippet defines a test action in the '/test' namespace that uses a FreeMarker template as its result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/junit/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.objectFactory\" value=\"spring\"/>\n    <package name=\"test\" namespace=\"/test\" extends=\"struts-default\">\n        <action name=\"testAction\" class=\"org.apache.struts2.TestAction\">\n            <result type=\"freemarker\">/template.ftl</result>\n        </action>\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Basic Autocompleter Implementation with External Data Source in Struts 2\nDESCRIPTION: Example of using the Struts 2 autocompleter tag to fetch data from an action. The href attribute points to a JSON data source specified by the jsonList variable.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n <sx:autocompleter name=\"autocompleter1\" href=\"%{jsonList}\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Double Validator in Apache Struts XML\nDESCRIPTION: This XML snippet demonstrates three ways to configure the double validator in Apache Struts: using Plain Validator Syntax, Field Validator Syntax, and Field Validator Syntax with expressions. It shows how to set inclusive and exclusive range limits for double values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/double-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"double\">\n        <param name=\"fieldName\">percentage</param>\n        <param name=\"minInclusive\">20.1</param>\n        <param name=\"maxInclusive\">50.1</param>\n        <message>Age needs to be between ${minInclusive} and ${maxInclusive} (inclusive)</message>\n    </validator>\n \n    <!-- Field Validator Syntax -->\n    <field name=\"percentage\">\n        <field-validator type=\"double\">\n            <param name=\"minExclusive\">0.123</param>\n            <param name=\"maxExclusive\">99.98</param>\n            <message>Percentage needs to be between ${minExclusive} and ${maxExclusive} (exclusive)</message>\n        </field-validator>\n    </field>\n \n    <!-- Field Validator Syntax with expression -->\n    <field name=\"percentage\">\n        <field-validator type=\"double\">\n            <param name=\"minExclusiveExpression\">${minExclusiveValue}</param> <!-- will be evaluated as: Double getMinExclusiveValue() -->\n            <param name=\"maxExclusiveExpression\">${maxExclusiveValue}</param> <!-- will be evaluated as: Double getMaxExclusiveValue() -->\n            <message>Percentage needs to be between ${minExclusive} and ${maxExclusive} (exclusive)</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with FreeMarker Tags in Apache Struts\nDESCRIPTION: Demonstrates how to create the same form as the JSP example, but using FreeMarker syntax. This showcases the similarity between JSP and FreeMarker tag usage.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_2\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.form action=\"updatePerson\">\n    <@s.textfield label=\"First name\" name=\"firstName\"/>\n    <@s.submit value=\"Update\"/>\n</@s.form>\n```\n\n----------------------------------------\n\nTITLE: Adding Apache Commons JCI FAM Dependency for Class Reloading\nDESCRIPTION: Includes the Apache Commons JCI FAM library as a Maven dependency, which is required for the class reloading feature.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n   <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-jci-fam</artifactId>\n       <version>1.0</version>\n   </dependency> \n```\n\n----------------------------------------\n\nTITLE: Setting Convention Plugin Configuration in XML\nDESCRIPTION: Example of how to set a configuration constant for the Convention Plugin. This snippet demonstrates changing the result path for templates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.result.path\" value=\"/WEB-INF/mytemplates/\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring OVal Plugin Settings in Struts\nDESCRIPTION: Example of configuring OVal plugin settings using the constant element in Struts configuration file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.oval.validateJPAAnnotations\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Dynamic Attributes with Struts Tags in Freemarker\nDESCRIPTION: Example of adding dynamic attributes to Struts tags in Freemarker templates using the dynamicAttributes parameter. This allows passing arbitrary attributes to the generated HTML elements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_3\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.textfield name=\"test\" dynamicAttributes={\"placeholder\":\"input\",\"foo\":\"bar\"}/>\n```\n\n----------------------------------------\n\nTITLE: Auto-refreshing div content with loading indicator\nDESCRIPTION: This example shows how to update a div's content automatically every 2 seconds. It also demonstrates displaying a loading indicator while content is being fetched.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_19\n\nLANGUAGE: jsp\nCODE:\n```\n<img id=\"indicator\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" style=\"display:none\"/>\n<sx:div href=\"%{#url}\" updateFreq=\"2000\">\n  Initial Content\n</sx:div>\n```\n\n----------------------------------------\n\nTITLE: Maven Settings for Staging Repository\nDESCRIPTION: XML configuration for settings.xml to enable access to staging repository for archetypes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/struts2-archetype-blank.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n  <profiles>\n    <profile>\n      <id>staging</id>\n      <repositories>\n        <repository>\n          <id>archetype</id>\n          <url>https://repository.apache.org/content/repositories/snapshots/</url>\n          <releases>\n            <enabled>true</enabled>\n            <checksumPolicy>fail</checksumPolicy>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n            <checksumPolicy>warn</checksumPolicy>\n          </snapshots>\n        </repository>\n      </repositories>\n    </profile>\n  </profiles>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Defining Single Unknown Handler in Struts XML\nDESCRIPTION: Configuration for registering a single Unknown Handler implementation in struts.xml. The handler must implement com.opensymphony.xwork2.UnknownHandler interface.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/unknown-handlers.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"com.opensymphony.xwork2.UnknownHandler\" name=\"handler\" class=\"myclasses.SomeUnknownHandler\"/>\n```\n\n----------------------------------------\n\nTITLE: ResultPath Annotation Configuration in Struts 2\nDESCRIPTION: Shows how to use @ResultPath annotation to customize the location where results are stored.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.actions;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts2.convention.annotation.Action;\nimport org.apache.struts2.convention.annotation.ResultPath;\n\n@ResultPath(\"/WEB-INF/jsps\")\npublic class HelloWorld extends ActionSupport {\n  public String execute() {\n    return SUCCESS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using valueNotifyTopics with Autocompleter in Struts 2\nDESCRIPTION: Demonstrates how to use valueNotifyTopics to execute JavaScript code when a value is selected in the autocompleter. The subscriber receives the selected value, key, text, and widget reference.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/value\", function(value, key, text, widget){\n     alert('inside a topic event. after value changed');\n     //value : selected value (like \"Florida\" in example above)\n     //key: selected key (like \"FL\" in example above)\n     //text: text typed into textbox\n     //widget: widget that published the topic\n });\n </script>   \n \n <sx:autocompleter valueNotifyTopics=\"/value\" href=\"%{#ajaxTest}\" />\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Field Validation in Struts XML\nDESCRIPTION: Demonstrates two ways to configure required field validation in Struts: using plain validator syntax and field validator syntax. The example validates a username field to ensure it's not null.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/required-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"required\">\n        <param name=\"fieldName\">username</param>\n        <message>username must not be null</message>\n    </validator>\n \n \n    <!-- Field Validator Syntax -->\n    <field name=\"username\">\n        <field-validator type=\"required\">\n               <message>username must not be null</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Struts Interceptors Table Structure\nDESCRIPTION: Markdown table showing the mapping between interceptor classes, their configuration names, and descriptions. Covers various interceptors like file upload, alias, workflow, and security implementations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Interceptor                                                                        | Name                      | Description                                                                                                                                                                                                                                                                                    |\n|------------------------------------------------------------------------------------|---------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Action File Upload Interceptor](action-file-upload-interceptor)                   | actionFileUpload          | Available since Struts 6.4.0: an Interceptor that adds easy access to file upload support.                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for includeParams in Struts Configuration\nDESCRIPTION: XML configuration to set the default value for the includeParams attribute in the Struts 2 URL tag. This is done through the struts.url.includeParams constant in the struts.xml file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/url-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n   ...\n   <constant name=\"struts.url.includeParams\" value=\"none\" />\n   ...\n</struts>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugging Interceptor in Struts XML\nDESCRIPTION: To enable the Debugging Interceptor, the devMode must be enabled in the struts.xml configuration file. This allows access to various debugging screens for data inspection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/debugging-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.devMode\" value=\"true\"/>\n    <!-- Other configuration -->\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Setting Maven Memory Options\nDESCRIPTION: Environment variable settings to increase Maven's available memory for building and testing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/one-time-steps.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMAVEN_OPTS=-Xmx512m\n```\n\n----------------------------------------\n\nTITLE: Creating a date picker\nDESCRIPTION: This example shows how to create a basic date picker using the datetimepicker tag. By default, it creates a form element for selecting dates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_25\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:datetimepicker name=\"picker\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Action with JSP Result\nDESCRIPTION: Basic configuration of a Struts 2 action in struts.xml that uses a JSP page as the result. The Dispatcher Result is the default result type for JSP pages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"test\" class=\"com.acme.TestAction\">\n    <result name=\"success\">test-success.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring int validator in Apache Struts XML\nDESCRIPTION: Examples of configuring the int validator using both Plain Validator Syntax and Field Validator Syntax. Demonstrates setting static min/max values and using expressions for dynamic validation ranges.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/int-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n     <!-- Plain Validator Syntax -->\n     <validator type=\"int\">\n         <param name=\"fieldName\">age</param>\n         <param name=\"min\">20</param>\n         <param name=\"max\">50</param>\n         <message>Age needs to be between ${min} and ${max}</message>\n     </validator>\n \n     <!-- Field Validator Syntax -->\n     <field name=\"age\">\n         <field-validator type=\"int\">\n             <param name=\"min\">20</param>\n             <param name=\"max\">50</param>\n             <message>Age needs to be between ${min} and ${max}</message>\n         </field-validator>\n     </field>\n \n     <!-- Field Validator Syntax with expression -->\n     <field name=\"age\">\n         <field-validator type=\"int\">\n             <param name=\"minExpression\">${minValue}</param> <!-- will be evaluated as: Integer getMinValue() -->\n             <param name=\"maxExpression\">${maxValue}</param> <!-- will be evaluated as: Integer getMaxValue() -->\n             <message>Age needs to be between ${min} and ${max}</message>\n         </field-validator>\n     </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Specifying Interceptors for a Struts 2 Action\nDESCRIPTION: This XML snippet demonstrates how to specify specific interceptors for a Struts 2 action, including the timer, logger, and defaultStack interceptors. It also shows how to set parameters for the exception interceptor.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/introducing-interceptors.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"register\" class=\"org.apache.struts.register.action.Register\" method=\"execute\">\n    <interceptor-ref name=\"timer\" />\n    <interceptor-ref name=\"logger\" />\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"exception.logEnabled\">true</param>\n        <param name=\"exception.logLevel\">ERROR</param>\n    </interceptor-ref>\n    <result name=\"success\">thankyou.jsp</result>\n    <result name=\"input\">register.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Build Command\nDESCRIPTION: Maven command that executes a clean build and installs the compiled artifacts to your local Maven repository. This will compile all Struts components and run the test suite.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-the-framework-from-source.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Configuring File Size Limits in Struts XML\nDESCRIPTION: Demonstrates how to set various file size limits including total request size (maxSize), per-file size limit (maxFileSize), and action-specific size limits (maximumSize) for file uploads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.multipart.maxSize\" value=\"1000000\"/>\n    <constant name=\"struts.multipart.maxFileSize\" value=\"750000\"/>\n\n    <action name=\"doUpload\" class=\"com.example.UploadAction\">\n        <interceptor-ref name=\"basicStack\"/>\n        <interceptor-ref name=\"actionFileUpload\">\n            <param name=\"maximumSize\">500000</param>\n        </interceptor-ref>\n        <interceptor-ref name=\"validation\"/>\n        <interceptor-ref name=\"workflow\"/>\n\n        <result name=\"success\">good_result.jsp</result>\n    </action>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Action Tag with Request Attribute Access in JSP\nDESCRIPTION: This example shows how to execute an action without including its result, instead accessing an attribute it has placed in the request scope using the property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/action-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n  <s:action name=\"actionTagAction!default\" executeResult=\"false\" />\n  <s:property value=\"#attr.stringByAction\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying loading indicators during Ajax requests\nDESCRIPTION: This example shows how to display a loading indicator while an Ajax request is in progress. The indicator parameter specifies the ID of an image element that will be shown during loading.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_7\n\nLANGUAGE: jsp\nCODE:\n```\n<img id=\"indicator\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" style=\"display:none\" />\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind indicator=\"indicator\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit indicator=\"indicator\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a indicator=\"indicator\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring OSGi Bundle Manifest\nDESCRIPTION: Basic MANIFEST.MF configuration required to enable Struts functionality in an OSGi bundle.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStruts2-Enabled: true\nExport-Package: com.mycompany.myapp.actions\nBundle-Version: 1.0.0\nBundle-SymbolicName: foo.actions\nImport-Package: com.opensymphony.xwork2\n```\n\n----------------------------------------\n\nTITLE: Including Static Resources from Plugins using FreeMarker Template\nDESCRIPTION: This example demonstrates how to include static resources (like CSS files) that are bundled inside plugin JARs. Static resources should be placed under the '/static' directory in the plugin jar and referenced using the '/static' path prefix in templates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_0\n\nLANGUAGE: ftl\nCODE:\n```\n<!-- Assuming /static/main.css is inside a plugin jar, to add it to the page: -->\n\n<@s.url value=\"/static/main.css\" var=\"css\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"%{#css}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Prepare Interceptor in Struts XML\nDESCRIPTION: Example showing how to configure an action with the prepare interceptor. This configuration calls the params interceptor twice, allowing pre-loading of data before parameters are set the second time.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/prepare-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <!-- Calls the params interceptor twice, allowing you to\n       pre-load data for the second time parameters are set -->\n  <action name=\"someAction\" class=\"com.examples.SomeAction\">\n      <interceptor-ref name=\"params\"/>\n      <interceptor-ref name=\"prepare\"/>\n      <interceptor-ref name=\"basicStack\"/>\n      <result name=\"success\">good_result.ftl</result>\n  </action>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Select Pet List with Apache Struts Select Tag\nDESCRIPTION: This example demonstrates how to create a multi-select dropdown for pets using the Struts select tag. It uses a pet DAO to populate the list, sets multiple selection, and pre-selects values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/select-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:select label=\"Pets\"\n       name=\"petIds\"\n       list=\"petDao.pets\"\n       listKey=\"id\"\n       listValue=\"name\"\n       multiple=\"true\"\n       size=\"3\"\n       required=\"true\"\n       value=\"%{petDao.pets.{id}}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Date Tag in JSP with Apache Struts\nDESCRIPTION: Examples demonstrating different ways to format dates using the Struts date tag. Shows usage with explicit format pattern, i18n format key, nice formatting, and default formatting.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/date-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n  <s:date name=\"person.birthday\" format=\"dd/MM/yyyy\" />\n  <s:date name=\"person.birthday\" format=\"%{getText('some.i18n.key')}\" />\n  <s:date name=\"person.birthday\" nice=\"true\" />\n  <s:date name=\"person.birthday\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Include Tag Usage in JSP\nDESCRIPTION: Simple example of including a JSP page using the Struts include tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/include-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:include value=\"myJsp.jsp\" />\n```\n\n----------------------------------------\n\nTITLE: Complete Message Store Interceptor Configuration Example\nDESCRIPTION: Full example showing how to configure two related actions using the Message Store interceptor - one storing messages and another retrieving them. Demonstrates the typical usage pattern for storing and retrieving validation messages across redirects.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/message-store-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"submitApplication\" ....>\n    <interceptor-ref name=\"store\">\n        <param name=\"operationMode\">STORE</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"defaultStack\" />\n    <result name=\"input\" type=\"redirectAction\">applicationFailed</result>\n    <result type=\"dispatcher\">applicationSuccess.jsp</result>\n</action>\n\n<action name=\"applicationFailed\" ....>\n    <interceptor-ref name=\"store\">\n        <param name=\"operationMode\">RETRIEVE</param>\n    </interceptor-ref>\n    <result>applicationFailed.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Advanced Redirect Result with Request Parameters in Struts XML\nDESCRIPTION: Complex example demonstrating redirect result configuration within a package, including multiple parameters and anchor. Shows how to pass report parameters through the redirect URL.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/redirect-result.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"passingRequestParameters\" extends=\"struts-default\" namespace=\"/passingRequestParameters\">\n   <action name=\"gatherReportInfo\" class=\"...\">\n      <result name=\"showReportResult\" type=\"redirect\">\n         <param name=\"location\">generateReport.jsp</param>\n         <param name=\"reportType\">pie</param>\n         <param name=\"width\">100</param>\n         <param name=\"height\">100</param>\n         <param name=\"parse\">false</param>\n         <param name=\"anchor\">summary</param>\n      </result>\n   </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Localized Number Input Field\nDESCRIPTION: JSP code for creating a localized number input field using getText method for formatting.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n<s:textfield key=\"orderItem.price\" value=\"%{getText('format.number',{orderItem.price})}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Attributes to Second Control in Doubleselect Tag (JSP)\nDESCRIPTION: Demonstrates how to add dynamic attributes to the second control generated by the doubleselect tag using the 'second-' prefix. The prefix will be stripped when generating the second control.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/doubleselect-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:doubleselect ... second-control-id=\"id2\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Multiple File Uploads Using Arrays\nDESCRIPTION: HTML form using Struts 2 tags for uploading multiple files with the same input name. This approach requires the Action class to use arrays to handle the multiple files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<s:form action=\"doMultipleUploadUsingArray\" method=\"POST\" enctype=\"multipart/form-data\">\n    <s:file label=\"File (1)\" name=\"upload\"/>\n    <s:file label=\"File (2)\" name=\"upload\"/>\n    <s:file label=\"FIle (3)\" name=\"upload\"/>\n    <s:submit cssClass=\"btn btn-primary\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Exclusion in Struts XML\nDESCRIPTION: Example configuration showing how to set up an interceptor stack to exclude specific parameters including the 'submit' parameter\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/parameters-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n  <interceptor-stack name=\"appDefault\">\n    <interceptor-ref name=\"defaultStack\">\n       <param name=\"exception.logEnabled\">true</param>\n       <param name=\"exception.logLevel\">ERROR</param>\n       <param name=\"params.excludeParams\">dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*,submit</param>\n    </interceptor-ref>\n  </interceptor-stack>\n</interceptors>\n\n<default-interceptor-ref name=\"appDefault\" />\n```\n\n----------------------------------------\n\nTITLE: Auto-reload Configuration in Struts 2\nDESCRIPTION: XML settings for enabling automatic configuration reloading in development mode.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.devMode\" value=\"true\"/>\n<constant name=\"struts.convention.classes.reload\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Jar Scanning Configuration in Struts 2\nDESCRIPTION: XML configuration for enabling jar scanning in Struts 2 Convention Plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.action.includeJars\" value=\".*?/myjar1.*?jar(!/)?,.*?/myjar2*?jar(!/)?\"\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag with Freemarker (With Parameters)\nDESCRIPTION: Example of using the Struts component tag in Freemarker with additional parameters that can be accessed within the template.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/component-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: freemarker\nCODE:\n```\n<@s.component template=\"/my/custom/component.ftl\">\n    <@s.param name=\"key1\" value=\"%{'value1'}\" />\n    <@s.param name=\"key2\" value=\"%{'value2'}\" />\n</@s.component>\n```\n\n----------------------------------------\n\nTITLE: Submitting a Struts form via Ajax\nDESCRIPTION: This example shows how to submit a form created with the Struts form tag via Ajax. The sx:submit and sx:a tags automatically submit the form they're contained within.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_16\n\nLANGUAGE: jsp\nCODE:\n```\n<!-- With a submit tag -->\n<s:form namespace=\"/mynamespace\" action=\"MyAction\">\n  <input type=textbox name=\"data\">\n  <sx:submit />\n</s:form>\n\n<!-- With an anchor tag -->\n<s:form namespace=\"/mynamespace\" action=\"MyAction\">\n  <input type=textbox name=\"data\">\n  <sx:a />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Applying Role-Based Access Control Logic in Java\nDESCRIPTION: This snippet demonstrates the logical operation used by the Roles Interceptor to determine if an action should be permitted based on allowed and disallowed roles.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/roles-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  (if ((inRole(role1) || inRole(role2) || ... inRole(roleN)) &&\n       !inRole(roleA) && !inRole(roleB) && ... !inRole(roleZ))\n  { //permit ...\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag with Velocity (With Parameters)\nDESCRIPTION: Example of using the Struts component tag in Velocity with additional parameters that can be accessed within the template.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/component-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: velocity\nCODE:\n```\n#s-component( \"template=/my/custom/component.vm\" )\n    #s-param( \"name=key1\" \"value=value1\" )\n    #s-param( \"name=key2\" \"value=value2\" )\n#end\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Scope Attribute in JSP\nDESCRIPTION: Example of how to access an attribute stored in the Session scope using Struts 2 tags in a JSP page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"%{#session.mySessionAttribute}\" />\n```\n\n----------------------------------------\n\nTITLE: JDK Logger Wrapper Implementation\nDESCRIPTION: Implementation of the Logger interface that wraps java.util.logging.Logger. Shows how to delegate logging calls to the JDK logging system.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/logging.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.opensymphony.xwork2.util.logging.Logger;\nimport com.opensymphony.xwork2.util.logging.LoggerUtils;\n\nimport java.util.logging.Level;\n\n/**\n * Delegates to jdk logger.  Maps fatal to Level.SEVERE along with error.\n */\npublic class JdkLogger implements Logger {\n    \n    private java.util.logging.Logger log;\n    \n    public JdkLogger(java.util.logging.Logger log) {\n        this.log = log;\n    }\n\n    public void error(String msg, String... args) {\n        log.log(Level.SEVERE, LoggerUtils.format(msg, args));\n    }\n\n    public void error(String msg, Throwable ex, String... args) {\n        log.log(Level.SEVERE, LoggerUtils.format(msg, args), ex);\n    }\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox Input in JSP for Apache Struts\nDESCRIPTION: This snippet demonstrates how to use the checkbox tag in a JSP file with Apache Struts. It creates a checkbox input with a label, name, value, and fieldValue attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/checkbox-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: JSP\nCODE:\n```\n<s:checkbox label=\"checkbox test\" name=\"checkboxField1\" value=\"aBoolean\" fieldValue=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Jakarta Stream MultiPart Parser in Struts 2\nDESCRIPTION: XML configuration to enable the Jakarta Stream MultiPart implementation for handling large file uploads. This parser was added in Struts 2.3.18 and provides better performance for large files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.multipart.parser\" value=\"jakarta-stream\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Clear Session Interceptor in Struts Action\nDESCRIPTION: Example configuration showing how to apply the clearSession interceptor to a Struts action. The interceptor is referenced before the defaultStack to ensure session clearing occurs before standard processing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/clear-session-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"exampleAction\" class=\"com.examples.ExampleAction\">\n    <interceptor-ref name=\"clearSession\"/>\n    <interceptor-ref name=\"defaultStack\"/>\n    <result name=\"success\">example.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using i18n Tag with Custom Resource Bundle in JSP\nDESCRIPTION: Demonstrates how to use the i18n tag to access messages from a custom resource bundle. The example shows accessing a specific key 'aaa.bbb.ccc' from a custom bundle named 'myCustomBundle' using the property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/i18n-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:i18n name=\"myCustomBundle\">\n  The i18n value for key aaa.bbb.ccc in myCustomBundle is <s:property value=\"text('aaa.bbb.ccc')\" />\n</s:i18n>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alias Interceptor in Struts XML\nDESCRIPTION: Example of configuring the Alias Interceptor in a Struts action definition. This configuration aliases the 'foo' parameter to 'bar', meaning that values from 'foo' will be applied to the action's 'bar' setter method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/alias-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <!-- The value for the foo parameter will be applied as if it were named bar -->\n     <param name=\"aliases\">#{ 'foo' : 'bar' }</param>\n\n     <interceptor-ref name=\"alias\"/>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Basic Struts 2 Select Tag Implementation\nDESCRIPTION: Example of a simple Struts 2 select tag that demonstrates the basic syntax for creating a dropdown list.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/themes.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"personBean.sport\" list=\"sports\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters with Page Scope\nDESCRIPTION: Example of accessing passed parameters in the included page using page scope.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/include-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:set var=\"param1\" scope=\"page\">${param.param1}</s:set>\n<s:property value=\"#attr.param1\"/>\n```\n\n----------------------------------------\n\nTITLE: Handling Attributes with Hyphens in Freemarker\nDESCRIPTION: Special syntax for using attributes with hyphens in Freemarker templates, such as HTML5 data attributes. Requires using single quotes around the attribute map.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_7\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.form dynamicAttributes={'data-ajax':'false'}>\n  ...\n</@s.form>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in Struts 2 Action\nDESCRIPTION: Java code demonstrating how to handle multiple file uploads in a Struts 2 action using the UploadedFilesAware interface.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MultipleFileUploadUsingListAction extends ActionSupport implements UploadedFilesAware {\n\n    private List<UploadedFile> uploads = new ArrayList<>();\n\n    public List<UploadedFile> getUpload() {\n        return this.uploads;\n    }\n\n    @Override\n    public void withUploadedFiles(List<UploadedFile> uploads) {\n        this.uploads = uploads;\n    }\n\n    private List<String> getUploadFileNames() {\n        return this.uploads.stream()\n                .map(UploadedFile::getOriginalName)\n                .collect(Collectors.toList());\n    }\n\n    private List<String> getUploadContentTypes() {\n        return this.uploads.stream()\n                .map(UploadedFile::getContentType)\n                .collect(Collectors.toList());\n    }\n\n    public String execute() throws Exception {\n        System.out.println(\"files:\");\n        for (UploadedFile u : uploads) {\n            System.out.println(\"*** \" + u + \"\\t\" + u.length());\n        }\n        System.out.println(\"filenames:\");\n        for (String n : getUploadFileNames()) {\n            System.out.println(\"*** \" + n);\n        }\n        System.out.println(\"content types:\");\n        for (String c : getUploadContentTypes()) {\n            System.out.println(\"*** \" + c);\n        }\n        System.out.println(\"\\n\\n\");\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convention Plugin with REST Support in Struts XML\nDESCRIPTION: Defines the necessary constants in struts.xml to configure the Convention plugin when used with the REST plugin. Specifies action suffix, mapping behavior, parent package, and package locators.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/converting.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.action.suffix\" value=\"Controller\"/>\n<constant name=\"struts.convention.action.mapAllMatches\" value=\"true\"/>\n<constant name=\"struts.convention.default.parent.package\" value=\"rest-default\"/>\n<constant name=\"struts.convention.package.locators\" value=\"example\"/>\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using ActionContext to Access Session in Struts\nDESCRIPTION: An example of a discouraged pattern for accessing session scope in Struts applications. This approach directly uses ActionContext, which is considered a bad practice compared to using the Aware interfaces.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/accessing-application-session-request-objects.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nActionContext.getContext().getSession().put(\"myAttribute\", \"myValue\");\n```\n\n----------------------------------------\n\nTITLE: Basic JSP Page with Struts 2 Tags\nDESCRIPTION: A simple JSP page that includes the Struts 2 tag library and uses the property tag to display a value from the action. The page demonstrates the basic syntax for Struts 2 JSP integration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n\n<html>\n<head>\n    <title>Hello</title>\n</head>\n<body>\n\nHello, <s:property value=\"name\"/>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading div content after page load\nDESCRIPTION: This example shows how to use the sx:div tag to load content via Ajax after the page is loaded. The div shows initial content until the Ajax content is loaded.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_17\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"%{#url}\">\n  Initial Content\n</sx:div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Checkboxlist Tag in HTML Forms\nDESCRIPTION: The Struts 2 checkboxlist tag creates multiple checkboxes from a list of options. The key attribute determines which checkboxes are checked, while the list attribute provides the available options to display.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<s:checkboxlist key=\"personBean.carModels\" list=\"carModelsAvailable\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering I18n Messages with Struts Text Tag in JSP\nDESCRIPTION: Examples of using the Struts text tag to access messages from resource bundles. Shows how to use named bundles, framework-defined bundles, and passing parameters to text messages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/text-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n <!-- First Example -->\n <s:i18n name=\"struts.action.test.i18n.Shop\">\n     <s:text name=\"main.title\"/>\n </s:i18n>\n\n <!-- Second Example -->\n <s:text name=\"main.title\" />\n\n <!-- Third Examlpe -->\n <s:text name=\"i18n.label.greetings\">\n    <s:param >Mr Smith</s:param>\n </s:text>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Struts 2 Select Tag\nDESCRIPTION: HTML markup generated by Struts 2 framework when using the select tag with the default xhtml theme, showing table-based layout and styling classes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/themes.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"tdLabel\">\n        <label for=\"save_personBean_sport\" class=\"label\">Favorite sport:</label>\n    </td>\n    <td>\n        <select name=\"personBean.sport\" id=\"save_personBean_sport\">\n            <option value=\"football\">football</option>\n            <option value=\"baseball\">baseball</option>\n            <option value=\"basketball\" selected=\"selected\">basketball</option>\n        </select>\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form with Struts JSP Tags\nDESCRIPTION: This XML snippet shows how to create a form for file uploads using Struts JSP tags. It includes the necessary enctype attribute for multipart form data.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n   <s:form action=\"doUpload\" method=\"post\" enctype=\"multipart/form-data\">\n       <s:file name=\"upload\" label=\"File\"/>\n       <s:submit/>\n   </s:form>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Iterator Usage with Days (JSP)\nDESCRIPTION: This snippet demonstrates basic usage of the iterator tag, iterating over days and printing each day's value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"days\">\n  <p>day is: <s:property/></p>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Action Naming Differences Between Codebehind and Convention Plugins\nDESCRIPTION: Illustrates the differences in action naming conventions between Codebehind and Convention plugins. Shows how action class names, URLs, and template files are related in both approaches.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/converting.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPreviously in Codebehind:\nGiven an action named AnExampleAction, a request to /anExample -> AnExampleAction.execute() -> > anExample-index.ftl\n\nNow in Convention:\nGiven an action named AnExampleAction, a request to /an-example -> AnExampleAction.execute() -> an-example-index.ftl\n```\n\n----------------------------------------\n\nTITLE: Complete web.xml Configuration for SiteMesh with Struts 2\nDESCRIPTION: Full example of how to configure filter chains in web.xml for SiteMesh integration with Struts 2, including FreeMarker and Velocity decorator servlets.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitemesh/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n    <filter-name>struts-prepare</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>\n</filter>\n\n<filter>\n    <filter-name>struts-execute</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>\n</filter>\n\n\n<filter>\n    <filter-name>sitemesh</filter-name>\n    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter>\n\n<filter-mapping>\n    <filter-name>struts-prepare</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n    <filter-name>sitemesh</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n    <filter-name>struts-execute</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n<listener>\n    <listener-class>org.apache.struts2.dispatcher.listener.StrutsListener</listener-class>\n</listener>\n\n<servlet>\n    <servlet-name>sitemesh-freemarker</servlet-name>\n    <servlet-class>org.apache.struts2.sitemesh.FreemarkerDecoratorServlet</servlet-class>\n    <init-param>\n        <param-name>default_encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet>\n    <servlet-name>sitemesh-velocity</servlet-name>\n    <servlet-class>org.apache.struts2.sitemesh.VelocityDecoratorServlet</servlet-class>\n    <init-param>\n        <param-name>default_encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>sitemesh-freemarker</servlet-name>\n    <url-pattern>*.ftl</url-pattern>\n</servlet-mapping>\n\n<servlet-mapping>\n    <servlet-name>sitemesh-velocity</servlet-name>\n    <url-pattern>*.vm</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptor Parameters - Method 3\nDESCRIPTION: Shows how to create a custom interceptor stack that extends the default stack and overrides parameters. This method allows for reuse of the custom stack across multiple actions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n    <interceptor-stack name=\"parentStack\">\n        <interceptor-ref name=\"defaultStack\">\n            <param name=\"params.excludeParams\">token</param>\n        </interceptor-ref>\n    </interceptor-stack>\n</interceptors>\n\n<default-interceptor-ref name=\"parentStack\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Control Header Template in XHTML Theme\nDESCRIPTION: The controlheader.ftl template that includes the core control header template to format form elements consistently in the XHTML theme.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_1\n\nLANGUAGE: freemarker\nCODE:\n```\n<#include \"/${parameters.templateDir}/xhtml/controlheader-core.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Interceptor in Struts XML\nDESCRIPTION: Example action mapping that demonstrates how to configure the fileUpload interceptor for an upload action. The action uses both fileUpload interceptor and basicStack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"doUpload\" class=\"com.example.UploadAction\">\n     <interceptor-ref name=\"fileUpload\"/>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.jsp</result>\n </action>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JspSupportServlet for JSP Tag Support in Apache Struts\nDESCRIPTION: XML configuration snippet for adding JspSupportServlet to web.xml. This is required to use JSP tags within FreeMarker templates in Struts applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>JspSupportServlet</servlet-name>\n    <servlet-class>org.apache.struts2.views.JspSupportServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Configuring RSS/Atom Feed Mappings for Struts Contributors\nDESCRIPTION: Maps blog RSS/Atom feed URLs to contributor names in a key-value format. Each entry consists of a feed URL in brackets followed by the contributor's name assignment.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/planetstruts.txt#2025-04-08_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n[http://themindstorms.blogspot.com/rss.xml]\nname = Alex Popescu\n[http://weblogs.java.net/blog/crazybob/index.rdf]\nname = Bob Lee\n[http://blogs.sun.com/craigmcc/feed/entries/rss]\nname = Craig McClanahan\n[http://www.jroller.com/dgeary/feed/entries/rss]\nname = David Geary\n[http://www.jroller.com/mrdon/feed/entries/rss]\nname = Don Brown\n[http://www.fdar.com/weblog/index.xml]\nname = Ian Roughley (blog)\n[http://www.jroller.com/greddin/feed/entries/rss]\nname = Gred Reddin\n[http://blog.generationjava.com/feed]\nname = Henri Yandell\n[http://www.fdar.com/news/index.xml]\nname = Ian Roughley (news)\n[http://www.jroller.com/jmitchell/feed/entries/rss]\nname = James Mitchell\n[http://www.jroller.com/jcarreira/feed/entries/rss]\nname = Jason Carreira\n[http://blog.germuska.com/feed/]\nname = Joe Germusk\n[http://feeds.feedburner.com/Blogbody]\nname = Patrick Lightbody\n[http://www.jroller.com/TedHusted/feed/entries/rss]\nname = Ted Husted\n[http://blog.wsmoak.net/atom.php?blogid=1]\nname = Wendy Smoak\n```\n\n----------------------------------------\n\nTITLE: Simple Loop with Begin and End Attributes (JSP)\nDESCRIPTION: This snippet demonstrates a simple loop that iterates 5 times using the begin and end attributes of the iterator tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator var=\"counter\" begin=\"1\" end=\"5\" >\n   <!-- current iteration value (1, ... 5) -->\n   <s:property value=\"top\" />\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptor Stack to Exclude Parameters in Struts 2 XML\nDESCRIPTION: This XML configuration sets up a custom interceptor stack that excludes specific parameters from being processed by the Struts 2 framework. It demonstrates how to add the 'submit' parameter to the list of excluded parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/exclude-parameters.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n    <interceptor-stack name=\"appDefault\">\n        <interceptor-ref name=\"defaultStack\">\n            <param name=\"exception.logEnabled\">true</param>\n            <param name=\"exception.logLevel\">ERROR</param>\n            <param name=\"params.excludeParams\">dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*,submit</param>\n        </interceptor-ref>\n    </interceptor-stack>\n</interceptors>\n\t\t\n<default-interceptor-ref name=\"appDefault\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Parameters Interceptor for Struts Action in XML\nDESCRIPTION: Example of configuring the staticParams interceptor for a Struts action in struts.xml. The example shows how to reference the interceptor with parameters for parsing and overwriting behavior, along with defining a success result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/static-parameters-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"staticParams\">\n          <param name=\"parse\">true</param>\n          <param name=\"overwrite\">false</param>\n     </interceptor-ref>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Displaying fixed error message when div content fails to load\nDESCRIPTION: This example demonstrates how to show a fixed error message when a div's content fails to load. The errorText parameter specifies the message to display on error.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_22\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"noaction\" errorText=\"Error loading content\">\n  Initial Content\n</sx:div>\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionEventListener in Java\nDESCRIPTION: Example implementation of ActionEventListener interface with prepare and handleException methods. The prepare method injects services into actions, while handleException handles specific business exceptions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-event-listener.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyActionEventListener implements ActionEventListener {\n\n    public Object prepare(Object action, ValueStack stack) {\n        if (action instanceof MyBaseAction) {\n            ((MyBaseAction)action).setUserService(stack.findValue(\"userService\"));\n        }\n    }\n    \n    public String handleException(Throwable t, ValueStack stack) {\n        if (t instanceof MyBusinessException) {\n            return stack.findString(\"defaultBusinesResult\");\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bean in Struts XML\nDESCRIPTION: This example demonstrates how to register a custom bean in struts.xml by defining a bean with type, name, and class attributes. The example shows registering a custom ObjectFactory implementation that will be used by the framework.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/bean-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n\n  <bean type=\"com.opensymphony.xwork2.ObjectFactory\" name=\"myfactory\" class=\"com.company.myapp.MyObjectFactory\" />\n  ... \n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bean in Struts XML\nDESCRIPTION: This example demonstrates how to register a custom bean in struts.xml by defining a bean with type, name, and class attributes. The example shows registering a custom ObjectFactory implementation that will be used by the framework.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/bean-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n\n  <bean type=\"com.opensymphony.xwork2.ObjectFactory\" name=\"myfactory\" class=\"com.company.myapp.MyObjectFactory\" />\n  ... \n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltips in Struts Form Components - JSP Examples\nDESCRIPTION: Demonstrates five different approaches to configuring tooltips in Struts forms, including form-level inheritance, attribute overriding, and various parameter configuration methods. Shows tooltip delay and icon path configuration options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/form-tags.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<!-- Example 1: -->\n<s:form\n         tooltipDelay=\"500\"\n         tooltipIconPath=\"/myImages/myIcon.gif\" .... >\n  ....\n    <s:textfield label=\"Customer Name\" tooltip=\"Enter the customer name\" .... />\n  ....\n</s:form>\n\n<!-- Example 2: -->\n<s:form\n         tooltipDelay=\"500\"\n         tooltipIconPath=\"/myImages/myIcon.gif\" .... >\n  ....\n    <s:textfield label=\"Address\"\n         tooltip=\"Enter your address\"\n         tooltipDelay=\"5000\" />\n  ....\n</s:form>\n\n<-- Example 3: -->\n<s:textfield\n       label=\"Customer Name\"\n       tooltip=\"One of our customer Details\">\n       <s:param name=\"tooltipDelay\">\n            500\n       </s:param>\n       <s:param name=\"tooltipIconPath\">\n            /myImages/myIcon.gif\n       </s:param>\n</s:textfield>\n\n<-- Example 4: -->\n<s:textfield\n         label=\"Customer Address\"\n         tooltip=\"Enter The Customer Address\" >\n         <s:param\n             name=\"tooltipDelay\"\n             value=\"500\" />\n</s:textfield>\n\n<-- Example 5: -->\n<s:textfield\n         label=\"Customer Telephone Number\"\n         tooltip=\"Enter customer Telephone Number\"\n         tooltipDelay=\"500\"\n         tooltipIconPath=\"/myImages/myIcon.gif\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Control Header in css_xhtml Theme (FreeMarker)\nDESCRIPTION: This snippet demonstrates the complex header used by HTML tags in the css_xhtml theme. It handles label positioning and error display using CSS rules instead of attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/css-xhtml-theme.md#2025-04-08_snippet_1\n\nLANGUAGE: freemarker\nCODE:\n```\n<#include \"/${parameters.templateDir}/css_xhtml/controlheader-core.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Basic UrlValidator Annotation Example in Java\nDESCRIPTION: Simple example showing how to use the UrlValidator annotation with basic parameters including message, i18n key, and shortCircuit option.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/url-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@UrlValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true)\n```\n\n----------------------------------------\n\nTITLE: Enabling Named Variable Pattern Matcher in Struts XML\nDESCRIPTION: Configuration to enable the named variable pattern matcher which allows extracting parameters from namespace patterns in URLs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.patternMatcher\" value=\"namedVariable\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables Outside Loop Context (JSP)\nDESCRIPTION: This example shows how to access a variable outside the current loop context and handle name clashes with the current context.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_8\n\nLANGUAGE: jsp\nCODE:\n```\n<s:select name=\"location\" size=\"1\" list=\"locations\" listKey=\"key\"\n  listValue=\"value\" emptyOption=\"false\" />\n\n<s:iterator var=\"item\" value=\"items\" status=\"rowstatus\">\n    <s:url var=\"myUrl\" action=\"itemDelete\">\n        <s:param name=\"id\" value=\"#item.id\" />\n        <%-- Outer loop variable name [1]. as clash with item.location --%>\n        <s:param name=\"location\" value=\"[1].location\" />\n    </s:url>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Simple Named Parameter Regular Expression Action Mapping in Struts XML\nDESCRIPTION: Demonstrates an action mapping with named parameters using simple regular expressions. URL segments are captured as parameters and bound to action fields.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"books\" extends=\"struts-default\" namespace=\"/\">\n    <action name=\"/{type}/content/{title}\" class=\"example.BookAction\">\n\t<result>/books/content.jsp</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Running SiteGraph Command Line Tool\nDESCRIPTION: Command line syntax for executing the SiteGraph plugin, showing the required parameters for configuration directory, views directories, output location, and optional namespace.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitegraph/index.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\njava -cp ... -jar struts2-sitegraph-plugin-x.x.x.jar\n     -config CONFIG_DIR\n     -views VIEWS_DIRS\n     -output OUTPUT\n     [-ns NAMESPACE]\n```\n\n----------------------------------------\n\nTITLE: Include Tag with Inline Parameters\nDESCRIPTION: Example of including a JSP page while passing parameters using the param tag with value attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/include-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:include value=\"myJsp.jsp\">\n   <s:param name=\"param1\" value=\"value2\" />\n   <s:param name=\"param2\" value=\"value2\" />\n</s:include>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Struts 2 CDI Plugin\nDESCRIPTION: Maven configuration showing the basic dependencies required to use the Struts 2 CDI plugin. It includes the plugin itself and the CDI API dependency marked as provided since it should be available in the runtime environment.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    ...\n    <dependency>\n        <groupId>org.apache.struts</groupId>\n        <artifactId>struts2-cdi-plugin</artifactId>\n        <version>${struts2.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>javax.enterprise</groupId>\n        <artifactId>cdi-api</artifactId>\n        <version>1.0-SP1</version>\n        <scope>provided</scope>\n    </dependency>\n    ...\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Default URL Validation Regex Pattern in Java\nDESCRIPTION: The default regular expression pattern used for URL validation when no custom regex is specified. This pattern handles various URL formats including HTTP, HTTPS, and FTP protocols with optional authentication and query parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/url-validator-annotation.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nreturn \"^(https?|ftp):\\/\\/\" +\n       \"(([a-z0-9$_\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" +\n       \"(:([a-z0-9$_\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" +\n       \"@)?(#?\" +\n       \")((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*\" +\n       \"[a-z][a-z0-9-]*[a-z0-9]\" +\n       \"|(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5]\\.){3}\" +\n       \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" +\n       \")(:\\\\d+)?\" +\n       \")(((\\/+([a-z0-9$_\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" +\n       \"(\\\\?([a-z0-9$_\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" +\n       \")?)?\" +\n       \"(#([a-z0-9$_\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" +\n       \"$\";\n```\n\n----------------------------------------\n\nTITLE: Configuring DWR XML Settings for Struts 2 Validation\nDESCRIPTION: XML configuration to enable DWR integration with Struts 2 validations. Creates a new validator instance and sets up bean conversion for ValidationAwareSupport.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/dwr/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <dwr>\n    <allow>\n      <create creator=\"new\" javascript=\"validator\" class=\"org.apache.struts2.validators.DWRValidator\"/>\n      <convert converter=\"bean\" match=\"com.opensymphony.xwork2.ValidationAwareSupport\"/>\n    </allow>\n </dwr>\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Spring Context Files in Web XML\nDESCRIPTION: Sets up the web application to load multiple Spring configuration files matching a specified pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Context Configuration locations for Spring XML files -->\n <context-param>\n     <param-name>contextConfigLocation</param-name>\n     <param-value>/WEB-INF/applicationContext-*.xml,classpath*:applicationContext-*.xml</param-value>\n </context-param>\n```\n\n----------------------------------------\n\nTITLE: Using Bind Tag with Topic Listening for AJAX Calls in Struts 2\nDESCRIPTION: Example showing how to use the sx:bind tag to listen to a topic for making an AJAX call without attaching to an event. The tag subscribes to a '/makecall' topic that gets triggered by a button click.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n <sx:bind href=\"%{#ajaxTest}\" listenTopics=\"/makecall\"/>\n <s:submit onclick=\"dojo.event.topic.publish('/makecall')\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Controlling div refresh timer with topics\nDESCRIPTION: This example demonstrates how to control the refresh timer for a div using topics. It allows starting, stopping, and triggering refreshes on demand through topic publishing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_24\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"%{#url}\"\n        listenTopics=\"/refresh\"\n\tstartTimerListenTopics=\"/startTimer\"\n\tstopTimerListenTopics=\"/stopTimer\"\n\tupdateFreq=\"3000\">\n  Initial Content\n</sx:div>\n\n<s:submit value=\"Refresh\" onclick=\"dojo.event.topic.publish('/refresh')\" />\n<s:submit value=\"Start refresh timer\" onclick=\"dojo.event.topic.publish('/startTimer')\" />\n<s:submit value=\"Stop refresh timer\" onclick=\"dojo.event.topic.publish('/stopTimer')\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Action Mapping with JSON Validation in XML\nDESCRIPTION: XML configuration that maps the AJAX validation action with the jsonValidationWorkflowStack interceptor and appropriate result types for both JSON validation and standard responses.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE struts PUBLIC \n  \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n  \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n\n<struts>\n    <package>\n         <action name=\"ajaxFormSubmit\" class=\"org.apache.struts2.showcase.validation.AjaxFormSubmitAction\">\n             <interceptor-ref name=\"jsonValidationWorkflowStack\"/>\n             <result name=\"input\">/WEB-INF/validation/ajaxFormSubmit.jsp</result>\n             <result type=\"jsonActionRedirect\">ajaxFormSubmitSuccess</result>\n         </action>\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Predefined Result Names in ActionSupport Class\nDESCRIPTION: The standard set of result tokens defined by the ActionSupport base class in Struts, including SUCCESS, NONE, ERROR, INPUT, and LOGIN.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString SUCCESS = \"success\";\nString NONE    = \"none\";\nString ERROR   = \"error\";\nString INPUT   = \"input\";\nString LOGIN   = \"login\";\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Labels Position in Struts Tabbed Panel\nDESCRIPTION: Demonstrates how to change the position of tab labels in a tabbed panel. The labelposition attribute can be set to top, right, bottom, or left.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_40\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel labelposition=\"bottom\" id=\"tabContainer\">\n   <sx:div label=\"Tab 1\" >\n       Local Tab 1\n   </sx:div>   \n   <sx:div label=\"Tab 2\" >\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Struts 1 Action in Struts 2\nDESCRIPTION: A basic configuration example showing how to wrap a Struts 1 Action using the Struts1Action wrapper class. This setup allows using an existing Struts 1 Action within a Struts 2 application without modifying the original Action class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/struts-1/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myAction\" class=\"org.apache.struts2.s1.Struts1Action\">\n  <param name=\"className\">com.mycompany.myapp.MyAction</param>\n  <result>myAction.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using JSP Tags in FreeMarker Templates for Apache Struts\nDESCRIPTION: Demonstrates how to include and use JSP tags within a FreeMarker template after configuring JspSupportServlet. This example shows how to assign and use a custom tag library.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_8\n\nLANGUAGE: ftl\nCODE:\n```\n<#assign cewolf=JspTaglibs[\"/WEB-INF/cewolf.tld\"] />\n...\n<@cewold.xxx ... />\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Macro Libraries in Properties File\nDESCRIPTION: Configuration snippet that specifies the Velocity macro libraries to be loaded. The properties file should be placed in the classpath (e.g., /WEB-INF/classes) for Velocity to load it automatically. Defines multiple macro library files including action-default.vm, tigris-macros.vm, and myapp.vm.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/velocity-properties.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Velocity Macro libraries.\nvelocimacro.library = action-default.vm, tigris-macros.vm, myapp.vm\n```\n\n----------------------------------------\n\nTITLE: Selecting Subsets of Collections using OGNL Wildcards\nDESCRIPTION: Demonstrates how to use OGNL wildcards (?, ^, $) to select subsets of collections based on conditions, shown with a Struts iterator tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_6\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"person.relatives.{? #this.gender == 'male'}\">\n  ...\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Accessing Struts Attributes in Tiles Definition\nDESCRIPTION: XML configuration showing how to access Struts ValueStack attributes in a Tiles definition using the S2 prefix.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<definition name=\"home\" extends=\"logged-in\">\n  <put-attribute name=\"title\" expression=\"S2:actionProperty\"/>\n  <put-attribute name=\"body\" value=\"/WEB-INF/tiles/home.jsp\"/>\n</definition>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Control Footer in FreeMarker\nDESCRIPTION: FreeMarker template for rendering the footer of a form control, including error message handling. It checks for field errors and displays them if present.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n${parameters.after!}<#t/>\n    </td><#lt/>\n</tr>\n<#if (parameters.errorposition!\"top\") == 'bottom'>\n<#assign hasFieldErrors = parameters.name?? && fieldErrors?? && fieldErrors[parameters.name]??/>\n<#if hasFieldErrors>\n<tr errorFor=\"${parameters.id}\">\n    <td class=\"tdErrorMessage\" colspan=\"2\"><#rt/>\n        <#if hasFieldErrors>\n            <#list fieldErrors[parameters.name] as error>\n                <div class=\"errorMessage\">${error?html}</div><#t/>\n            </#list>\n        </#if>\n    </td><#lt/>\n</tr>\n</#if>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Body in Struts Tags\nDESCRIPTION: Demonstrates how to escape HTML content in the body of a Struts tag by setting the 'escapeHtmlBody' attribute to true. This is particularly useful for XSS prevention.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<s:a href=\"%{...}\" escapeHtmlBody=\"true\">\n  <img src=\"/images/icon_waste_sml.png\"/>\n</s:a>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Struts XML\nDESCRIPTION: Shows how to define a constant in the struts.xml configuration file. This example sets the 'struts.devMode' constant to true.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/constant-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n\n  <constant name=\"struts.devMode\" value=\"true\" />\n  ... \n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Basic Action Tag Example in JSP\nDESCRIPTION: This example shows the simplest usage of the action tag, executing an action and including its result in the current page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/action-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n  <s:action name=\"actionTagAction\" executeResult=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Currency Formatting with s:text Tag\nDESCRIPTION: JSP code showing how to format a monetary value using the s:text tag with a defined format pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:text name=\"format.money\">\n    <s:param name=\"value\" value=\"myMoneyValue\"/>\n</s:text>\n```\n\n----------------------------------------\n\nTITLE: Subset Tag with Count Parameter in XML\nDESCRIPTION: An example of using the subset tag with the count parameter to limit the number of items processed to 3.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/subset-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<s:subset source=\"myList\" count=\"3\">\n   <s:iterator>\n       <s:property />\n   </s:iterator>\n</s:subset>\n```\n\n----------------------------------------\n\nTITLE: Registering Extension Point in Java (Struts Core)\nDESCRIPTION: Demonstrates how to register an extension point in the StrutsBeanSelectionProvider using the alias() method. This ties the extension point name to its interface/class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nalias(DateFormatter.class, StrutsConstants.STRUTS_DATE_FORMATTER, builder, props, Scope.SINGLETON);\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Action to Use Tiles Definition\nDESCRIPTION: This XML snippet demonstrates how to configure a Struts action to utilize a Tiles definition. It defines an action named 'sample' with a specific class and sets the success result to use the 'tiles' type with a 'tilesWorks' definition.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet-tiles/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"sample\" class=\"org.apache.struts2.tiles.example.SamplePortletAction\" >\n  <result name=\"success\" type=\"tiles\">tilesWorks</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Mixing Local and Remote Tabs in Struts Tabbed Panel\nDESCRIPTION: Demonstrates how to create a tabbed panel with both local content and content loaded from a remote URL. The href attribute specifies the source for remote content.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_34\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel id=\"tabContainer\">\n   <sx:div label=\"Local Tab 1\" >\n       Tab 1\n   </sx:div>   \n   <sx:div label=\"Remote Tab 2\" href=\"%{#url}\">\n       Remote Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Adding Commons FileUpload Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to add the Commons FileUpload 1.3.3 dependency to a Maven project's pom.xml file. This upgrade is recommended to prevent potential Remote Code Execution attacks in Struts 2 versions prior to 2.5.12.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2018.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>commons-fileupload</groupId>\n  <artifactId>commons-fileupload</artifactId>\n  <version>1.3.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a URL with Query String in JSP for Apache Struts\nDESCRIPTION: Illustrates how to create a URL with a query string parameter using JSP tags in Struts. This method requires separate tags for the URL and parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url value=\"somePage\">\n    <s:param name=\"personId\" value=\"%{personId}\"/>\n</s:url>\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Tag in JSP\nDESCRIPTION: Demonstrates the basic usage of the token tag in JSP pages. This tag creates a hidden form element containing a unique token to prevent double form submissions when used with TokenInterceptor or TokenSessionInterceptor.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/token-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:token />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Standard OGNL Object Access\nDESCRIPTION: This snippet shows how standard OGNL accesses objects in the OgnlContext map, including the root object and other named objects.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-basics.md#2025-04-08_snippet_0\n\nLANGUAGE: ognl\nCODE:\n```\n#foo.blah // returns foo.getBlah()\n#bar.blah // returns bar.getBlah()\nblah      // returns foo.getBlah() because foo is the root\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionAware Interface in Java\nDESCRIPTION: Basic implementation of the SessionAware interface's setSession method to get access to HTTP session object in a Struts 2 Action class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/http-session.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Object> userSession ;\n\npublic void setSession(Map<String, Object> session) {\n   userSession = session ;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Themes in Markdown Table\nDESCRIPTION: A markdown table listing the available themes in Struts, including simple, xhtml, css_xhtml, and ajax themes, with brief descriptions of each.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/themes-and-templates.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|[simple theme](simple-theme)| A minimal theme with no \"bells and whistles\" |\n|[xhtml theme](xhtml-theme)| The default theme that uses common HTML practices |\n|[css_xhtml theme](css-xhtml-theme)| The [xhtml theme](xhtml-theme) re-implemented using strictly CSS for layout |\n|[ajax theme](ajax-theme)| A theme based on the [xhtml theme](xhtml-theme) that provides advanced AJAX features |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Action Tag Context Behavior in JSP\nDESCRIPTION: This snippet demonstrates how variables created by the action tag are not available within the tag body itself, but only after the tag is fully evaluated. It shows a property check that verifies whether the action is null inside and outside the tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/action-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:action var=\"myAction\" name=\"MyAction\" namespace=\"/\">\n    Is \"myAction\" null inside the tag? <s:property value=\"#myAction == null\" />\n</s:action>\n    Is \"myAction\" null outside the tag? <s:property value=\"#myAction == null\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring JFreeChart Result in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure a Struts action to use the JFreeChart plugin's 'chart' result type. It specifies the action class and sets parameters for the chart's width and height.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/jfreechart/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"viewModerationChart\" class=\"myapp.actions.ViewModerationChartAction\">\n  <result name=\"success\" type=\"chart\">\n    <param name=\"width\">400</param>\n    <param name=\"height\">300</param> \n  </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Markdown Voting Table Definition\nDESCRIPTION: HTML table defining the voting options (+1, +/-0, -1) and their meanings in the Apache Struts decision-making process.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/bylaws.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table class=\"bodyTable\">\n    <tr class=\"a\">\n        <td>\n            <strong>+1</strong>\n        </td>\n        <td>\n            \"Yes\" \"Agree,\" or \"the action should be performed\".\n            On some issues this is only binding if the voter has tested the action on their own system(s).\n        </td>\n    </tr>\n    <tr class=\"b\">\n        <td>\n            <strong>+/-0</strong>\n        </td>\n        <td>\n            \"Abstain\", \"no opinion\".\n            An abstention may have detrimental effects if too many people abstain.\n        </td>\n    </tr>\n    <tr class=\"a\">\n        <td>\n            <strong>-1</strong>\n        </td>\n        <td>\n            \"No\".\n\n            On issues where consensus is required, this vote counts as a **veto**.\n            All vetos must contain an explanation of why the veto is appropriate. Vetos with no explanation are void.\n            A veto cannot be overruled. If you disagree with the veto, you should lobby the person who\n            cast the veto. Voters intending to veto an action item should make their opinions known to the group\n            immediately so that the problem can be remedied as early as possible.\n\n            If a Committer tries to \"override\" a veto by restoring a vetoed change, the PMC may ask the infrastructure\n            group to revoke that Committer's write privileges.\n        </td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Root Objects in ActionContext using JSP\nDESCRIPTION: Shows how to access objects in different scopes (session, request) using the '#' notation in OGNL expressions within Struts tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"#session.mySessionPropKey\"/> or\n<s:property value=\"#session['mySessionPropKey']\"/> or\n<s:property value=\"#request['myRequestPropKey']\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Wildcard Mapping in Struts XML Configuration\nDESCRIPTION: Demonstrates a basic wildcard mapping that matches all URIs starting with '/edit'. The matched part replaces {1} in various attributes of the action mapping and results.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"/edit*\" class=\"org.apache.struts.webapp.example.Edit{1}Action\">\n    <result name=\"failure\">/mainMenu.jsp</result>\n    <result>{1}.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Enabling Action Prefix Support in Struts Properties\nDESCRIPTION: Configuration for enabling action prefix support in struts.properties file. By default, support for the action: prefix is disabled since Struts 2.3.15.3 for security reasons.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nstruts.mapper.action.prefix.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Using Bind Tag with Form Submission on Checkbox Change in Struts 2\nDESCRIPTION: Shows how to bind an AJAX call to a checkbox change event that submits a form. When the checkbox state changes, the form with ID 'form1' is submitted via AJAX and the response updates the 'div1' element.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <sx:bind id=\"ex3\" href=\"%{#ajaxTest}\" sources=\"chk1\" targets=\"div1\" events=\"onchange\" formId=\"form1\" />\n <form id=\"form1\">\n     <s:checkbox name=\"data\" label=\"Hit me\" id=\"chk1\"/>\n </form>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Timer Interceptor for Action Execution Time in Apache Struts XML\nDESCRIPTION: These XML snippets demonstrate how to configure the Timer Interceptor in Apache Struts actions. The first example records only the action's execution time, while the second records the action's execution time as well as other interceptors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/timer-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <!-- records only the action's execution time -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"completeStack\"/>\n     <interceptor-ref name=\"timer\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n\n <!-- records action's execution time as well as other interceptors-->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"timer\"/>\n     <interceptor-ref name=\"completeStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Point in Properties File\nDESCRIPTION: Demonstrates how to tie the extension point to its implementation in the default.properties file. This assigns the bean name to the extension point key.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nstruts.date.formatter=dateTimeFormatter\n```\n\n----------------------------------------\n\nTITLE: Defining Tiles 3 Result Type in Struts Configuration\nDESCRIPTION: This XML snippet shows how to define the Tiles 3 result type in the Struts configuration file. It specifies the result-type name as 'tiles' and the corresponding class that handles Tiles results.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles-3/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<result-types>\n  <result-type name=\"tiles\" class=\"org.apache.struts2.views.tiles.TilesResult\"/>\n</result-types>\n```\n\n----------------------------------------\n\nTITLE: Publishing topics before Ajax requests\nDESCRIPTION: This example shows how to publish a Dojo topic before an Ajax request is made. It includes a JavaScript function that subscribes to the topic and handles the event before the request proceeds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">\ndojo.event.topic.subscribe(\"/before\", function(event, widget){\n   alert('inside a topic event. before request');\n   //event: event object\n   //widget: widget that published the topic\n});\n</script>\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind beforeNotifyTopics=\"/before\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit beforeNotifyTopics=\"/before\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a beforeNotifyTopics=\"/before\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Java Enum Example\nDESCRIPTION: Java code demonstrating how enums are handled in JSON serialization with custom properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic enum AnEnum {\n   ValueA(\"A\"),\n   ValueB(\"B\");\n\n   private String val;\n   \n   public AnEnum(val) {\n      this.val = val;\n   }\n   public getVal() {\n      return val;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: TabbedPanel Component Attributes Table\nDESCRIPTION: HTML table listing all attributes available for the TabbedPanel component, including details about whether they are required, their default values, types, and descriptions. Contains configuration options for AJAX behavior, styling, and event handling.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tabbedpanel-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>\t\t<table width=\"100%\">\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\"><h4>Dynamic Attributes Allowed:</h4> false</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\">&nbsp;</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Name</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Required</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Default</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Evaluated</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Type</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Description</h4></th>\n\n\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">accesskey</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html accesskey attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">afterNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published after the request(if the request succeeds)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">ajaxAfterValidation</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Boolean</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Make an asynchronous request if validation succeeds. Only valid if 'validate' is 'true'</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">beforeNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published before the request</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error style definitions for element to use</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css style to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">disabled</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html disabled attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorNotifyTopics</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Comma delimmited list of topics that will published after the request(if the request fails)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorPosition</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Define error position of form element (top|bottom)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorText</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The text to display to the user if the is an error fetching the content</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">executeScripts</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Boolean</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Javascript code in the fetched content will be executed</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">formFilter</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Function name used to filter the fields of the form.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">formId</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Form id whose fields will be serialized and passed as parameters</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">handler</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Javascript function name that will make the request</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">highlightColor</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">none</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Color used to perform a highlight effect on the elements specified in the 'targets' attribute</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">highlightDuration</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">2000</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Integer</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Duration of highlight effect in milliseconds. Only valid if 'highlightColor' attribute is set</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">href</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The URL to call to obtain the content. Note: If used with ajax context, the value must be set as an url tag value.</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">id</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The id to use for the element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">indicator</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Id of element that will be shown while making request</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">javascriptTooltip</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Boolean</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Use JavaScript to generate tooltips</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">key</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n```\n\n----------------------------------------\n\nTITLE: Using Validation Profiles with OVal in Struts Actions\nDESCRIPTION: Example of using OVal validation profiles to selectively apply validations based on which action method is executed.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.struts2.validation.Profiles;\n\npublic class FieldsWithProfiles extends ActionSupport {\n    @NotNull(profiles = \"1\")\n    private String firstName;\n\n    @NotNull(profiles = \"2\")\n    private String middleName;\n\n    @NotNull(profiles = \"3\")\n    private String lastName;\n\n    @Profiles({\"1\", \"3\"})\n    public String firstAndLast() {\n        return SUCCESS;\n    }\n\n    @Profiles({\"2\"})\n    public void middle() {\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OGNL Expressions in Static Attributes in JSP\nDESCRIPTION: Demonstrates how to use OGNL expressions for attributes that don't normally support dynamic content, such as setting a label dynamically.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<c:set var=\"foo\" value=\"bar\" scope=\"request\"/>\n<s:textfield name=\"username\" label=\"%{#request.foo}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Chaining Interceptor Behavior with Constants\nDESCRIPTION: Example showing how to enable copying of Action Errors during chaining by setting the struts.xwork.chaining.copyErrors constant to true in the Struts configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/chaining-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.xwork.chaining.copyErrors\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Using an Expression to Set a Label in Struts Tags\nDESCRIPTION: Creates a textfield with both a label and input field. The label is retrieved from the application's message resources using the key 'postalCode.label'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<s:textfield key=\"postalCode.label\" name=\"postalCode\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Request Notification with Bind Tag in Struts 2\nDESCRIPTION: Example demonstrating how to use beforeNotifyTopics with the sx:bind tag. This allows execution of custom JavaScript before an AJAX request is made, with the option to cancel the request by setting event.cancel to true.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/before\", function(event, widget){\n     alert('inside a topic event. before request');\n     //event: set event.cancel = true, to cancel request\n     //widget: widget that published the topic\n });\n </script>         \n \n <input type=\"button\" id=\"button\"> \n <sx:bind id=\"ex1\" href=\"%{#ajaxTest}\" beforeNotifyTopics=\"/before\" sources=\"button\" events=\"onclick\"/> \n\n```\n\n----------------------------------------\n\nTITLE: Action Mapping with Parameters After Action Name in Struts XML\nDESCRIPTION: Demonstrates an action mapping that accepts parameters after the action name. When a URL like '/edit/person/123' is requested, the 'id' parameter will be set to 123.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"edit\" extends=\"struts-default\" namespace=\"/edit\">\n    <action name=\"/person/*\" class=\"org.apache.struts.webapp.example.EditAction\">\n        <param name=\"id\">{1}</param>\n        <result>/mainMenu.jsp</result>\n    </action>   \n</package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Conversion Validator in XML\nDESCRIPTION: Examples of implementing conversion validator using both Plain-Validator and Field-Validator syntax in Struts configuration\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Plain Validator Syntax -->\n<validator type=\"conversion\">\n        <param name=\"fieldName\">myField</param>\n     <message>Conversion Error Occurred</message>\n</validator>\n  \n<!-- Field Validator Syntax -->\n<field name=\"myField\">\n   <field-validator type=\"conversion\">\n      <message>Conversion Error Occurred</message>\n   </field-validator>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Core PropertyAccessor Methods in Java\nDESCRIPTION: Implementation of three required PropertyAccessor methods: getPropertyClass, getSourceAccessor, and getSourceSetter for bean provider functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-expression-compilation.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic Class getPropertyClass(OgnlContext context, Object target, Object name)\n{\n  IBeanProvider provider = (IBeanProvider)target;\n  String beanName = ((String)name).replaceAll(\"\\\"\", \"\");\n\n  if (provider.canProvideBean(beanName))\n    return provider.getBean(beanName).getClass();\n\n  return super.getPropertyClass(context, target, name);\n}\n\npublic String getSourceAccessor(OgnlContext context, Object target, Object name)\n{\n   IBeanProvider provider = (IBeanProvider)target;\n   String beanName = ((String)name).replaceAll(\"\\\"\", \"\");\n\n   if (provider.canProvideBean(beanName)) {\n\n       Class type = OgnlRuntime.getCompiler().getInterfaceClass(provider.getBean(beanName).getClass());\n\n       ExpressionCompiler.addCastString(context, \"((\" + type.getName() + \")\");\n\n       context.setCurrentAccessor(IBeanProvider.class);\n       context.setCurrentType(type);\n\n       return \".getBean(\" + name + \"))\";\n   }\n\n   return super.getSourceAccessor(context, target, name);\n}\n\npublic String getSourceSetter(OgnlContext context, Object target, Object name)\n{\n  throw new UnsupportedCompilationException(\"Can't set beans on IBeanProvider.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying fixed error messages on Ajax error\nDESCRIPTION: This example demonstrates how to display a fixed error message when an Ajax request fails. The errorText parameter specifies the message to display in the target element on error.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_13\n\nLANGUAGE: jsp\nCODE:\n```\n<div id=\"div\" />\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind errorText=\"Error Loading\" targets=\"div\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit errorText=\"Error Loading\" targets=\"div\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a errorText=\"Error Loading\" targets=\"div\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Properties and Methods with OGNL\nDESCRIPTION: This example demonstrates the syntax for accessing static properties and methods using OGNL in Struts 2, when static method access is enabled.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-basics.md#2025-04-08_snippet_3\n\nLANGUAGE: ognl\nCODE:\n```\n@some.package.ClassName@FOO_PROPERTY\n@some.package.ClassName@someMethod()\n```\n\n----------------------------------------\n\nTITLE: Accessing Regular Expression Matched Groups in Struts XML\nDESCRIPTION: Demonstrates how to access matched groups in regular expressions using the {X} notation in results. The ISBN parameter is captured and used in the result path.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"books\" extends=\"struts-default\" namespace=\"/\">\n    <action name=\"/books/{ISBN}/content\" class=\"example.BookAction\">\n\t<result>/books/{1}.jsp</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSF-enabled Struts Action in XML\nDESCRIPTION: Example XML configuration for a JSF-enabled Struts Action that incorporates the JSF plugin. This demonstrates how to add the jsfStack interceptor and use the jsf result type to enable JSF component integration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/jsf/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"employee\" class=\"org.apache.struts.action2.showcase.jsf.EmployeeAction\">\n    <interceptor-ref name=\"basicStack\"/>\n    <interceptor-ref name=\"jsfStack\"/>\n    <result name=\"success\" type=\"jsf\" />\n    <result name=\"index\" type=\"redirect-action\">index</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Validator in Apache Struts XML\nDESCRIPTION: Examples of configuring the date validator in Apache Struts using XML. Includes Plain Validator syntax, Field Validator syntax, and Field Validator syntax with expressions for minimum and maximum date values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/date-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator syntax -->\n    <validator type=\"date\">\n        <param name=\"fieldName\">birthday</param>\n        <param name=\"min\">01/01/1990</param>\n        <param name=\"max\">01/01/2000</param>\n        <message>Birthday must be within ${min} and ${max}</message>\n    </validator>\n \n    <!-- Field Validator Syntax -->\n    <field name=\"birthday\">\n        <field-validator type=\"date\">\n            <param name=\"min\">01/01/1990</param>\n            <param name=\"max\">01/01/2000</param>\n            <message>Birthday must be within ${min} and ${max}</message>\n        </field-validator>\n    </field>\n \n    <!-- Field Validator Syntax with expression -->\n    <field name=\"birthday\">\n        <field-validator type=\"date\">\n            <param name=\"minExpression\">${minValue}</param> <!-- will be evaluated as: Date getMinValue() -->\n            <param name=\"maxExpression\">${maxValue}</param> <!-- will be evaluated as: Date getMaxValue() -->\n            <message>Age needs to be between ${min} and ${max}</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Publishing to a Topic in Dojo\nDESCRIPTION: This snippet demonstrates how to publish a message to a specific topic using Dojo's event system. It shows the basic syntax for publishing to a topic named 'topic_name' with optional content.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-event-system.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndojo.event.topic.publish(\"topic_name\", \"content\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Validation with DateRangeFieldValidator in Java\nDESCRIPTION: Example showing how to use the DateRangeFieldValidator annotation to validate a date field. The validator ensures the date falls between January 1st, 2005 and December 31st, 2005. It includes message customization and i18n support.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/date-range-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DateRangeFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, min = \"2005/01/01\", max = \"2005/12/31\")\n```\n\n----------------------------------------\n\nTITLE: Creating Blank Archetype Project with Maven\nDESCRIPTION: Maven command to generate a new Struts 2 blank archetype project with specified group ID, artifact ID and version.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/struts2-archetype-blank.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn archetype:generate -B \\\n                         -DgroupId=tutorial \\\n                         -DartifactId=tutorial \\\n                         -DarchetypeGroupId=org.apache.struts \\\n                         -DarchetypeArtifactId=struts2-archetype-blank \\\n                         -DarchetypeVersion=<version>\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Directory in struts.xml\nDESCRIPTION: Shows how to set the template directory property in struts.xml configuration. The struts.ui.templateDir property defines where templates are located and defaults to 'template'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/template-loading.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nstruts.ui.templateDir\n```\n\n----------------------------------------\n\nTITLE: XML-based Validation Configuration for OVal\nDESCRIPTION: Example of defining validation rules in XML format using OVal's XML configuration syntax for a Struts action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<oval xmlns=\"http://oval.sf.net/oval-configuration\" xmlns:xsi=\"http://http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://oval.sf.net/oval-configuration http://oval.sourceforge.net/oval-configuration-1.3.xsd\">\n    <class type=\"org.apache.struts2.interceptor.SimpleFieldsXML\" overwrite=\"false\"\n           applyFieldConstraintsToSetters=\"true\">\n        <field name=\"firstName\">\n            <notNull/>\n        </field>\n    </class>\n</oval>\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Scope Attribute in JSP\nDESCRIPTION: Example of how to access an attribute stored in the Application scope using Struts 2 tags in a JSP page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"%{#application.myApplicationAttribute}\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing Topic When Datetimepicker Value Changes in Struts\nDESCRIPTION: Example showing how to subscribe to value change events from a datetimepicker component using Dojo event topics. The component is configured to notify topics when its value changes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_31\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\n  dojo.event.topic.subscribe(\"/value\", function(text, date, widget){\n      alert('value changed');\n      //textEntered: String entered in the textbox\n      //date: JavaScript Date object with the value selected\n      //widget: widget that published the topic \n  });\n</script> \n\n<sx:datetimepicker label=\"Order Date\" valueNotifyTopics=\"/value\"/>\n```\n\n----------------------------------------\n\nTITLE: Using OGNL Expressions with Dynamic Attributes\nDESCRIPTION: Example of using OGNL expressions within dynamic attributes in Freemarker templates. This allows dynamic evaluation of attribute values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_6\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.textfield name=\"test\" placeholder=\"input\" foo=\"checked: %{bar}\"/>\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Attributes to Templates in FreeMarker for Apache Struts\nDESCRIPTION: Demonstrates how to pass custom attributes to templates using FreeMarker tags. This example adds a 'description' attribute to a text field.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_5\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.form action=\"updatePerson\">\n    <@s.textfield label=\"First name\" name=\"firstName\" description=\"...\"/>\n    <@s.submit value=\"Update\"/>\n</@s.form>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Maps in Struts Select Tag\nDESCRIPTION: Demonstrates how to create a map inline using OGNL syntax and use it in a Struts select tag for key-value pairs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:select label=\"label\" name=\"name\" list=\"#{'foo':'foovalue', 'bar':'barvalue'}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Request-Scoped Parameters in JSP with Struts Tags\nDESCRIPTION: Code snippet showing how to use the <s:set/> tag to expose a list of integers to JSP with request scope. This makes the variable accessible to third-party JSP taglibs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/access-to-valuestack-from-jsps.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:set name=\"'a'\" value=\"{ 1, 2, 3, 4 }\" scope=\"request\"/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Regular Expression Action Mapping in Struts XML\nDESCRIPTION: Shows an action mapping with custom regular expressions for parameter extraction. The 'author' parameter uses a custom regex pattern (.+) to match any text including slashes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"books\" extends=\"struts-default\" namespace=\"/\">\n    <action name=\"/{type}/{author:.+}/list\" class=\"example.ListBooksAction\">\n\t<result>/books/list.jsp</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Jetty Maven Plugin Configuration\nDESCRIPTION: Maven plugin configuration for using Jetty 7\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/embedded-jsp/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n             <groupId>org.mortbay.jetty</groupId>\n             <artifactId>jetty-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Reloading Tab Content When Selected in Struts\nDESCRIPTION: Shows how to configure tabs to reload their content every time they are selected. The refreshOnShow attribute ensures the content is refreshed from the source URL when the tab is activated.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_37\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel id=\"tabContainer\">\n   <sx:div label=\"Remote Tab 1\" href=\"%{#url}\" refreshOnShow=\"true\">\n       Remote Tab 1\n   </sx:div>  \n   <sx:div label=\"Remote Tab 2\" href=\"%{#url}\" refreshOnShow=\"true\">\n       Remote Tab 2\n   </sx:div>      \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Alternative to OGNL Projection using Struts Iterator\nDESCRIPTION: Provides an alternative, more expressive way to achieve the same result as the OGNL projection example, using a Struts iterator with a var attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_8\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"persons\" var=\"person\">\n  <s:property value=\"person.firstName\"/>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Including Ajax Head Template in HTML (JSP)\nDESCRIPTION: This example demonstrates how to include the ajax head template in an HTML file using Struts tags. It shows the proper placement within the HTML head section and includes debug mode activation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-head-template.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n    <head>\n        <title>AJAX Example</title>\n        <s:head debug=\"true\" theme=\"ajax\"/>\n    </head>\n    <body>\n        <!--  AJAX examples will go here -->\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing PreResultListener in Struts Interceptor\nDESCRIPTION: Demonstrates how to add a PreResultListener within a Struts Interceptor. The listener is added during the intercept method and can modify the Result execution process.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/pre-result-listener.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n  public class MyInterceptor extends AbstractInterceptor {\n     ...\n      public String intercept(ActionInvocation invocation) throws Exception {\n         invocation.addPreResultListener(new PreResultListener() {\n              public void beforeResult(ActionInvocation invocation, \n                                       String resultCode) {\n                  // perform operation necessary before Result execution\n              }\n         });\n      }\n     ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listening for Ajax Div in Struts\nDESCRIPTION: Example showing how to set up event listening between ajax components using listenTopics and notifyTopics attributes to refresh content when events are triggered.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<saf:div theme=\"ajax\" id=\"weather\" href=\"http://www.weather.com/weather?zip=97239\"\n        loadingText=\"Loading weather information...\"\n        errorText=\"Unable to contact weather server\"\n        listenTopics=\"weather_topic,some_topic\">\n    Placeholder...\n</saf:div>\n<saf:a id=\"link1\"\n      theme=\"ajax\"\n      href=\"refreshWeather.action\"\n      notifyTopics=\"weather_topic,other_topic\"\n      errorText=\"An Error ocurred\">Refresh</saf:a>\n```\n\n----------------------------------------\n\nTITLE: Basic hidden Tag Example in JSP\nDESCRIPTION: Demonstrates the basic usage of the hidden tag in JSP. When 'foo' evaluates to 'bar', this tag will render a hidden input element with the corresponding value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/hidden-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:hidden name=\"foo\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"foo\" value=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: Cloning Apache Struts Repository from GitBox\nDESCRIPTION: Command to clone the Apache Struts repository using Apache GitBox URL for committers.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/submitting-patches.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/struts.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Default Action in Struts 2\nDESCRIPTION: XML configuration for setting up a wildcard default action in Struts 2. This can be used to catch unmatched references and map them to corresponding JSP pages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"*\">\n  <result>/{1}.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using Custom EL Functions to Access ValueStack\nDESCRIPTION: Example showing how to use custom EL functions defined in a TLD file to access Struts ValueStack in JSP pages. This method provides a cleaner approach for complex applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/access-to-valuestack-from-jsps.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib uri=\"/WEB-INF/tld/wwel.tld\" prefix=\"x\" %>\n\na[0] = ${x:vs('a[0]')}\na[0] * 4 = ${x:vs('a[0] * 4')}\n\nCurrent action name: ${x:name()}\nTop of ValueStack: ${x:top()}\n```\n\n----------------------------------------\n\nTITLE: AJAX Anchor with Before-Request Topics\nDESCRIPTION: Example showing how to use beforeNotifyTopics to execute code before an AJAX request is made.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-a-tag.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/before\", function(event, widget){\n     alert('inside a topic event. before request');\n     //event: set event.cancel = true, to cancel request\n     //widget: widget that published the topic\n });\n </script>         \n \n <sx:a beforeNotifyTopics=\"/before\">Publish topics</sx:a>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed File Types with fileUpload Interceptor in Struts 2\nDESCRIPTION: An XML configuration example showing how to limit uploaded file types by specifying allowed MIME types as parameters to the actionFileUpload interceptor. This configuration will restrict uploads to only JPEG and GIF image files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"doUpload\" class=\"com.example.UploadAction\">\n    <interceptor-ref name=\"basicStack\"/>\n    <interceptor-ref name=\"actionFileUpload\">\n        <param name=\"allowedTypes\">image/jpeg,image/gif</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"validation\"/>\n    <interceptor-ref name=\"workflow\"/>\n\n    <result name=\"success\">good_result.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Struts2 Dojo Submit Inside Form\nDESCRIPTION: Example showing how to submit a form using the Struts2 Dojo submit tag placed inside the form.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:form id=\"form\" action=\"AjaxTest\">\n     <input type=\"textbox\" name=\"data\">\n     <sx:submit />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Sample Action Class Implementation in Java\nDESCRIPTION: This Java class defines a sample action used to demonstrate the action tag. It includes two methods: the standard execute() method and a doDefault() method that puts a string attribute in the request scope.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/action-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n public class ActionTagAction extends ActionSupport {\n\n  public String execute() throws Exception {\n      return \"done\";\n  }\n\n  public String doDefault() throws Exception {\n      ServletActionContext.getRequest().setAttribute(\"stringByAction\", \"This is a String put in by the action's doDefault()\");\n      return \"done\";\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Mapping Interceptor in Struts Default XML\nDESCRIPTION: This XML snippet shows the configuration of the exception mapping interceptor in the struts-default.xml file. It defines the interceptor and includes it in the default interceptor stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/exception-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n    ...\n    <interceptor name=\"exception\" class=\"com.opensymphony.xwork.interceptor.ExceptionMappingInterceptor\"/>\n    ...\n</interceptors>\n\n<interceptor-stack name=\"defaultStack\">\n    <interceptor-ref name=\"exception\"/>\n    <interceptor-ref name=\"alias\"/>\n    <interceptor-ref name=\"servlet-config\"/>\n    <interceptor-ref name=\"prepare\"/>\n    <interceptor-ref name=\"i18n\"/>\n    <interceptor-ref name=\"chain\"/>\n    <interceptor-ref name=\"debugging\"/>\n    <interceptor-ref name=\"profiling\"/>\n    <interceptor-ref name=\"scoped-model-driven\"/>\n    <interceptor-ref name=\"model-driven\"/>\n    <interceptor-ref name=\"actionFileUpload\"/>\n    <interceptor-ref name=\"checkbox\"/>\n    <interceptor-ref name=\"static-params\"/>\n    <interceptor-ref name=\"params\"/>\n    <interceptor-ref name=\"conversionError\"/>\n    <interceptor-ref name=\"validation\">\n        <param name=\"excludeMethods\">input,back,cancel,browse</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"workflow\">\n        <param name=\"excludeMethods\">input,back,cancel,browse</param>\n    </interceptor-ref>\n</interceptor-stack>\n```\n\n----------------------------------------\n\nTITLE: TLD File Definition for ValueStack Access Functions\nDESCRIPTION: XML taglib descriptor (TLD) file that defines the custom EL functions for accessing the Struts ValueStack. This file maps function names to their Java implementations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/access-to-valuestack-from-jsps.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\"\n\tversion=\"2.0\">\n\n<description>\nThis taglib enables access to the ValueStack\nfrom JSP 2.0 Expression Language\n</description>\n\n<tlib-version>1.0</tlib-version>\n\n<short-name>wwel</short-name>\n\n<function>\n\t<name>vs</name>\n\t<function-class>com.nmote.wwel.Functions</function-class>\n\t<function-signature>\n\t\tjava.lang.Object findOnValueStack(java.lang.String)\n\t</function-signature>\n</function>\n\n<function>\n\t<name>name</name>\n\t<function-class>com.nmote.wwel.Functions</function-class>\n\t<function-signature>\n\t\tjava.lang.Object getActionName()\n\t</function-signature>\n</function>\n\n<function>\n\t<name>top</name>\n\t<function-class>com.nmote.wwel.Functions</function-class>\n\t<function-signature>\n\t\tjava.lang.Object getTopOfValueStack()\n\t</function-signature>\n</function>\n\n</taglib>\n```\n\n----------------------------------------\n\nTITLE: Preventing Tab Selection in Struts Tabbed Panel\nDESCRIPTION: Demonstrates how to prevent specific tabs from being selected. By subscribing to the beforeSelectTab topic and canceling the event for specific tabs, selection can be controlled programmatically.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_44\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\n   dojo.event.topic.subscribe('/before', function(event, tab, tabContainer) {\n      event.cancel = tab.widgetId == \"tab2\" ;\n   });\n</script>\n<sx:tabbedpanel beforeSelectTabNotifyTopics=\"/before\" id=\"tabContainer\">\n   <sx:div id=\"tab1\" label=\"Tab 1\">\n       Local Tab 1\n   </sx:div>   \n   <sx:div id=\"tab2\" label=\"Tab 2\">\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Creating Option Groups with optgroup Tag in Apache Struts JSP\nDESCRIPTION: This example demonstrates how to use the optgroup tag within a select element in Apache Struts. It creates multiple option groups with different labels and options, showcasing the hierarchical structure of the select menu.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/optgroup-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:select label=\"My Selection\"\n           name=\"mySelection\"\n           value=\"%{'POPEYE'}\"\n           list=\"%{#{'SUPERMAN':'Superman', 'SPIDERMAN':'spiderman'}}\">\n   <s:optgroup label=\"Adult\"\n                list=\"%{#{'SOUTH_PARK':'South Park'}}\" />\n   <s:optgroup label=\"Japanese\"\n                list=\"%{#{'POKEMON':'pokemon','DIGIMON':'digimon','SAILORMOON':'Sailormoon'}}\" />\n</s:select>\n```\n\n----------------------------------------\n\nTITLE: Binding AJAX to Button Click Event with Loading Indicator in Struts 2\nDESCRIPTION: Demonstrates how to attach the sx:bind tag to a button's onclick event with a loading indicator. When the button is clicked, it makes an AJAX request and updates the target div while showing a loading indicator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <img id=\"indicator\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" alt=\"Loading...\" style=\"display:none\"/>\n <sx:bind id=\"ex1\" href=\"%{#ajaxTest}\" sources=\"button\" targets=\"div1\" events=\"onclick\" indicator=\"indicator\" />\n <s:submit theme=\"simple\" type=\"submit\" value=\"submit\" id=\"button\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Using errorNotifyTopics with Autocompleter in Struts 2\nDESCRIPTION: Example of using errorNotifyTopics to handle error events when AJAX requests fail. The subscriber receives the error object, the XMLHttpRequest object, and the widget reference.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/error\", function(error, request, widget){\n     alert('inside a topic event. on error');\n     //error : error object (error.message has the error message)\n     //request: XMLHttpRequest object\n     //widget: widget that published the topic\n });\n </script>\n \n <sx:autocompleter errorNotifyTopics=\"/error\" href=\"%{#ajaxTest}\" />\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote Data with Ajax Div in Struts\nDESCRIPTION: Basic example of using the div tag with ajax theme to asynchronously fetch remote content from a URL and inject it into the div after the page loads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<saf:div theme=\"ajax\" id=\"weather\" href=\"http://www.weather.com/weather?zip=97239\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Result with XML\nDESCRIPTION: Example of configuring a Stream Result using XML configuration. Shows how to set content type, input stream name, content disposition, and buffer size parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/stream-result.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"stream\">\n  <param name=\"contentType\">image/jpeg</param>\n  <param name=\"inputName\">${imageStream}</param>\n  <param name=\"contentDisposition\">attachment;filename=\"document.pdf\"</param>\n  <param name=\"bufferSize\">1024</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Basic Struts Form with Textfield Using Implicit Value\nDESCRIPTION: This example demonstrates a Struts form where the textfield value is implicitly derived from the name attribute, removing the need for an explicit value attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/form-tags.md#2025-04-08_snippet_1\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.form action=\"updateAddress\">\n    <@s.textfield label=\"Postal Code\" name=\"postalCode\"/>\n    ...\n</@s.form>\n```\n\n----------------------------------------\n\nTITLE: Incorrect I18n Usage in Tag Attributes\nDESCRIPTION: An example showing an incorrect way to use the text tag within another tag's attribute, which will not work as expected.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/text-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:textfield name=\"lastName\" label=\"<s:text name=\"person.lastName\"/>\" ../>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Struts 2 Select Tag\nDESCRIPTION: Shows the resulting HTML generated by the Struts 2 framework for the select tag. It includes the label, select element, and option tags with appropriate values and selected state.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"tdLabel\">\n        <label for=\"save_personBean_sport\" class=\"label\">Favorite sport:</label>\n    </td>\n    <td>\n        <select name=\"personBean.sport\" id=\"save_personBean_sport\">\n            <option value=\"football\">football</option>\n            <option value=\"baseball\">baseball</option>\n            <option value=\"basketball\" selected=\"selected\">basketball</option>\n        </select>\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Using ActionMessage Tag in JSP\nDESCRIPTION: Example showing how to use the actionmessage tag in a JSP form. The tag renders any action messages that exist, with the specific rendering layout depending on the chosen theme. Empty messages will not be printed, and strings will be HTML escaped by default.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/actionmessage-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n    <s:actionmessage />\n    <s:form .... >\n       ....\n    </s:form>\n```\n\n----------------------------------------\n\nTITLE: Converting CeWolf JSP Tags to Velocity Template Syntax\nDESCRIPTION: Velocity template implementation that replicates the JSP-based CeWolf chart rendering. This snippet shows how to instantiate a DatasetProducer, store it in the session for CeWolf access, and use Velocity #bodytag and #tag directives to render charts.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/cewolf-charts-using-velocity-templates.md#2025-04-08_snippet_3\n\nLANGUAGE: velocity\nCODE:\n```\n#set( $pageViews = $stack.findValue(\"new com.PageViewCountData()\") )\n$req.session.setAttribute(\"pageViews\", $pageViews ) \n\n#bodytag( SimpleChart \"id=line\" \"title=Page View Statistics\" \"type=line\" \"xaxislabel=Page\" \"yaxslabel=Views\" )\n  #bodytag( Data )\n    #tag( Producer \"id=pageViews\" )\n  #end\n#end\n\n#tag( ChartImg \"chartid=line\" \"renderer=cewolf\" \"width=400\" \"height=300\" )\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Autocompleter as Array of Arrays in Struts\nDESCRIPTION: Shows the JSON format for autocompleter data as an array of arrays. Each inner array contains a display value and a selection key.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n[\n    [\"Alabama\", \"AL\"],\n    [\"Alaska\", \"AK\"]\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Map as Autocompleter Data Source\nDESCRIPTION: Example JSON map/object format for the Autocompleter. This is the recommended and easiest format to generate for the data source.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"Alabama\" : \"AL\",\n     \"Alaska\" : \"AK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IntRangeFieldValidator in Java with Static Values and Expressions\nDESCRIPTION: Examples of how to apply the IntRangeFieldValidator annotation to validate numeric fields. The first example shows validation with static min/max values (0 to 42), while the second demonstrates using expressions to dynamically determine the range at runtime.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/int-range-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@IntRangeFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, min = \"0\", max = \"42\")\n\n@IntRangeFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, minExpression = \"${minValue}\", maxExpression = \"${maxValue}\")\n```\n\n----------------------------------------\n\nTITLE: Using Struts Password Tag in JSP\nDESCRIPTION: This example demonstrates how to use the Struts password tag in a JSP file. It creates a password input field with a label retrieved from a resource bundle using ActionSupport's getText() method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/password-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:password label=\"%{text('password')}\" name=\"password\" size=\"10\" maxlength=\"15\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Messages in OVal Validation Annotations\nDESCRIPTION: Example of OVal validation with custom error messages specified in annotations that can reference keys in property files or use literal strings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class BookActionextends extends ActionSupport {\n    @NotNull(message = \"notnull.field\")\n    @Length(max = 3, message = \"field.too.long\")\n    private String title;\n\n    @NotNull(message = \"You must enter a valid ISBN\")\n    private String isbn;\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Scope Attributes in FreeMarker\nDESCRIPTION: Examples showing how to access session scope attributes using FreeMarker syntax and Struts property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_3\n\nLANGUAGE: ftl\nCODE:\n```\n<#if Session.mySessionAttribute?exists>\n     ${Session.mySessionAttribute}\n</#if>\n```\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.property value=\"%{#session.mySessionAttribute}\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-in ContentTypeHandler in Struts 2\nDESCRIPTION: Demonstrates how to override a built-in content type handler with a custom implementation. First, a custom handler is defined with a unique name, then the override mapping is configured to use it for a specific extension.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<bean name=\"myXml\" type=\"org.apache.struts2.rest.handler.ContentTypeHandler\" class=\"com.mycompany.MyXmlContentHandler\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Autocompleter on Page Load in Struts\nDESCRIPTION: Shows how to create a disabled autocompleter. Setting the disabled attribute to true creates an autocompleter that is initially inactive.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_68\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter href=\"%{#url}\" disabled=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Anchor with Loading Indicator in JSP\nDESCRIPTION: Example showing how to create an asynchronous anchor with a loading image indicator to work around IE6/IE7 bugs. Uses showLoadingText=false and external loading indicator to prevent content overwrite issues.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-a-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<img id=\"loadingImage\" src=\"images/loadingAnimation.gif\" style=\"display:none\"/>\n<s:div id=\"parentDiv\">\n    <s:form action=\"actionName\">\n        <sx:a targets=\"parentDiv\" showLoadingText=\"false\" indicator=\"loadingImage\"/>\n    </s:form>\n</s:div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Ajax Div with Placeholder Content in Struts\nDESCRIPTION: Example showing how to provide placeholder content in an ajax div that displays before the remote data is retrieved.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<saf:div theme=\"ajax\" id=\"weather\" href=\"http://www.weather.com/weather?zip=97239\">\n    Placeholder...\n</saf:div>\n```\n\n----------------------------------------\n\nTITLE: JSP Template Using EL to Display Message from Action\nDESCRIPTION: JSP file that uses Expression Language to display a message returned from the HelloWorld action. This demonstrates how to access action properties in the view.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<html>\n<body>\n  The message is ${message}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Struts 2 Checkboxlist Tag\nDESCRIPTION: HTML code generated by the Struts 2 checkboxlist tag, showing multiple checkboxes with their labels and a hidden field for tracking unchecked values. The checkboxes represent car models, with some pre-checked based on the personBean's carModels property.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"tdLabel\">\n        <label for=\"save_personBean_carModels\" class=\"label\">Car models owned:</label>\n    </td>\n    <td>\n        <input type=\"checkbox\" name=\"personBean.carModels\" value=\"Ford\" id=\"personBean.carModels-1\" checked=\"checked\"/>\n        <label for=\"personBean.carModels-1\" class=\"checkboxLabel\">Ford</label>\n        \n        <input type=\"checkbox\" name=\"personBean.carModels\" value=\"Chrysler\" id=\"personBean.carModels-2\"/>\n        <label for=\"personBean.carModels-2\" class=\"checkboxLabel\">Chrysler</label>\n        \n        <input type=\"checkbox\" name=\"personBean.carModels\" value=\"Toyota\" id=\"personBean.carModels-3\"/>\n        <label for=\"personBean.carModels-3\" class=\"checkboxLabel\">Toyota</label>\n        \n        <input type=\"checkbox\" name=\"personBean.carModels\" value=\"Nissan\" id=\"personBean.carModels-4\" checked=\"checked\"/>\n        <label for=\"personBean.carModels-4\" class=\"checkboxLabel\">Nissan</label>\n        <input type=\"hidden\" id=\"__multiselect_save_personBean_carModels\" name=\"__multiselect_personBean.carModels\" value=\"\" />\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Install Command\nDESCRIPTION: Demonstrates the basic Maven command to run the install phase, which builds the project and installs JARs into the local repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn\n```\n\n----------------------------------------\n\nTITLE: JasperReports Template Location Configuration\nDESCRIPTION: Parameter configuration specifying the location of the compiled jasper template file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<param name=\"location\">/jasper/our_compiled_template.jasper</param>\n```\n\n----------------------------------------\n\nTITLE: Using beforeNotifyTopics with Autocompleter in Struts 2\nDESCRIPTION: Demonstrates the use of beforeNotifyTopics to execute JavaScript code before an AJAX request is made. Provides the ability to cancel the request by setting event.cancel to true.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/before\", function(event, widget){\n     alert('inside a topic event. before request');\n     //event: set event.cancel = true, to cancel request\n     //widget: widget that published the topic\n });\n </script>         \n \n <sx:autocompleter beforeNotifyTopics=\"/before\" href=\"%{#ajaxTest} />\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties on Struts ValueStack\nDESCRIPTION: This example demonstrates how Struts accesses properties on the ValueStack, automatically searching through stack objects to find matching properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-basics.md#2025-04-08_snippet_1\n\nLANGUAGE: ognl\nCODE:\n```\nspecies    // call to animal.getSpecies()\nsalary     // call to person.getSalary()\nname       // call to animal.getName() because animal is on the top\n```\n\n----------------------------------------\n\nTITLE: Accessing Bean Property in FreeMarker\nDESCRIPTION: Demonstrates how to access a specific property of a bean stored in the stack's context using FreeMarker syntax.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/bean-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: freemarker\nCODE:\n```\n[s:property value=\"#counter.foo\"/]\n```\n\n----------------------------------------\n\nTITLE: Styling a Datetimepicker in Struts JSP\nDESCRIPTION: This snippet demonstrates how to apply CSS styling to a Struts datetimepicker component through cssStyle and cssClass attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_30\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:datetimepicker id=\"picker\" cssStye=\"background:red\" cssClass=\"someclass\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldExpressionValidator Annotation in Java\nDESCRIPTION: Example of using the FieldExpressionValidator annotation for field validation. The annotation requires a message and OGNL expression, with optional parameters for i18n key, message params, field name, and short circuit behavior.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/field-expression-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@FieldExpressionValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, expression = \"an OGNL expression\")\n```\n\n----------------------------------------\n\nTITLE: Push Tag with Stack Navigation\nDESCRIPTION: Demonstrates advanced stack navigation using index notation to access specific stack elements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/push-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:push value=\"myObject\">                               ---- (i)\n   <s:bean name=\"jp.SomeBean\" var=\"myBean\"/>            ---- (ii)\n      <s:param name=\"myParam\" value=\"[1].top\"/>         -----(iii)\n   </s:bean>\n</s:push>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Java 8 Support in Struts\nDESCRIPTION: This XML snippet shows how to define xwork-core as a dependency in pom.xml while excluding the old version of ASM to enable Java 8 support. The exclusions for asm and asm-commons are necessary to avoid conflicts with ASM 5 which provides Java 8 compatibility.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/java-8-support/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.struts.xwork</groupId>\n    <artifactId>xwork-core</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>asm</groupId>\n            <artifactId>asm</artifactId>\n        </exclusion>\n        <exclusion>\n            <groupId>asm</groupId>\n            <artifactId>asm-commons</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 if/else Tags for Conditional Rendering in HTML\nDESCRIPTION: This snippet demonstrates how to use the Struts 2 if tag to conditionally render content based on a boolean expression. In this example, different text is displayed depending on whether a person is over 21 years old.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/control-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<s:if test=\"personBean.over21\">\n    <p>You are old enough to vote!</p>\n</s:if>\n<s:else>\n   <p>You are NOT old enough to vote.</p>\n</s:else>\n```\n\n----------------------------------------\n\nTITLE: Currency Formatting Pattern in Properties File\nDESCRIPTION: A properties file entry that defines a currency formatting pattern to be used with the Struts text tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/text-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nformat.money={0,number,currency}\n```\n\n----------------------------------------\n\nTITLE: Creating JSP View for Struts 2 NumberGuess Game\nDESCRIPTION: A JSP view for the NumberGuess game that displays the game status and provides a form for submitting guesses. It uses Struts 2 tags to access game properties and display action errors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ page contentType=\"text/html; charset=UTF-8\" %>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n    <title>Numberguess</title>\n</head>\n\n<body>\n<h2>Numberguess Game - Struts 2 CDI Example</h2>\n\n<h3>I've picked a number between <s:property value=\"game.smallest\"/> and <s:property value=\"game.biggest\"/>.\n    You have <s:property value=\"game.remainingGuesses\"/>remaining guesses.</h3>\n\n<s:form action=\"guess\">\n    <s:textfield name=\"game.guess\" label=\"Your Guess\"/>\n    <s:submit/>\n</s:form>\n<p/>\n<s:actionerror/>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Files Limit in Struts XML\nDESCRIPTION: Sets the maximum number of files that can be uploaded in a single request to prevent DoS attacks. This requires Commons FileUpload version 1.5 or higher and defaults to 256 files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.multipart.maxFiles\" value=\"500\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Stopping Timer for Ajax Div in Struts with JavaScript\nDESCRIPTION: JavaScript function to stop the refresh timer for an ajax div component with id 'remotediv1'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nremotediv1.stopTimer();\n```\n\n----------------------------------------\n\nTITLE: Making Ajax requests triggered by a topic\nDESCRIPTION: This example shows how to trigger an Ajax request by publishing a Dojo topic. The bind tag listens for the topic and makes the request when the topic is published.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:submit value=\"Make Request\" onclick=\"dojo.event.topic.publish('/request')\" />\n<sx:bind listenTopics=\"/request\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: URL Tag Examples in JSP\nDESCRIPTION: Examples of using the Struts 2 URL tag in JSP pages. Shows three different approaches: creating a URL with a direct value, using an action attribute, and including request parameters with the includeParams attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/url-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<!-- Example 1 -->\n<s:url value=\"editGadget.action\">\n    <s:param name=\"id\" value=\"%{selected}\" />\n</s:url>\n\n<!-- Example 2 -->\n<s:url action=\"editGadget\">\n    <s:param name=\"id\" value=\"%{selected}\" />\n</s:url>\n\n<!-- Example 3-->\n<s:url includeParams=\"get\">\n    <s:param name=\"id\" value=\"%{'22'}\" />\n</s:url>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatcher Servlet in web.xml for Struts 2 Portlet\nDESCRIPTION: This XML snippet demonstrates how to configure the dispatcher servlet in web.xml to expose the value stack through request attributes. This is optional if only using Struts 2 tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<servlet id=\"Struts2PortletDispatcherServlet\">\n    <servlet-name>Struts2PortletDispatcherServlet</servlet-name>\n    <servlet-class>org.apache.struts2.portlet.dispatcher.DispatcherServlet</servlet-class>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Suppressing Empty Parameters in Struts URL Tag\nDESCRIPTION: Example demonstrating how to use the param tag with the suppressEmptyParameters attribute to conditionally include parameters in a Struts URL action. This prevents empty parameters from appearing in the generated URL.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/param-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url action=\"eventAdd\">\n  <s:param name=\"bean.searchString\" value=\"%{bean.searchString}\" />\n  <s:param name=\"bean.filter\" value=\"%{bean.filter}\" />\n  <s:param name=\"bean.pageNum\" value=\"%{pager.pageNumber}\" suppressEmptyParameters=\"true\" />\n</s:url>\n```\n\n----------------------------------------\n\nTITLE: Filtering Form Fields in Autocompleter Submission with JavaScript\nDESCRIPTION: Demonstrates how to selectively submit form fields with an Autocompleter by using a JavaScript filter function. The filter function returns true for fields that should be included in the submission.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_72\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\n  function filter(input) {\n     return input.name == \"data1\";\n  }\n</script>\n\n<s:form id=\"form\">\n  <input type=\"textbox\" name=\"data0\">\n  <input type=\"textbox\" name=\"data1\">\n</s:form>\n\n<sx:autocompleter formId=\"form\" formFilter=\"filter\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 if/else Tags with Complex Expressions in HTML\nDESCRIPTION: This snippet shows how to use the Struts 2 if tag with a more complex expression that compares the length of an array to determine the correct grammatical form to display.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/control-tags.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<s:if test=\"personBean.carModels.length > 1\">\n    <p>Car models\n</s:if>\n<s:else>\n   <p>Car model\n</s:else>\n```\n\n----------------------------------------\n\nTITLE: Configuring Portlet Class in portlet.xml for Struts 2 Portlet Framework\nDESCRIPTION: This XML snippet demonstrates how to configure the portlet class in portlet.xml file to use the Struts 2 Portlet framework. It sets up a portlet named 'MyPortlet' using the Jsr286Dispatcher class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<portlet-app id=\"my-portlet-app\"\n\txmlns=\"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\">\n\n    <portlet id=\"MyPortlet\">\n        <description xml:lang=\"EN\">My Portlet</description>\n        <portlet-name>MyPortlet</portlet-name>\n        <display-name xml:lang=\"EN\">my-portlet</display-name>\n    \n        <portlet-class>org.apache.struts2.portlet.dispatcher.Jsr286Dispatcher</portlet-class>\n        \n        <!-- SNIP -->\n\n    </portlet>\n</portlet-app>\n```\n\n----------------------------------------\n\nTITLE: OGNL-based Simple Loop (JSP)\nDESCRIPTION: This example shows how to create a simple loop using OGNL expressions, similar to JSTL's <c:forEach>.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_6\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator status=\"stat\" value=\"(5).{ #this }\" >\n   <s:property value=\"#stat.count\" /> <!-- Note that \"count\" is 1-based, \"index\" is 0-based. -->\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Form with Proper Action and Namespace for Client Validation\nDESCRIPTION: A JSP example demonstrating the correct way to specify action and namespace attributes in the s:form tag to ensure client-side validation works properly. This is essential as Struts needs the exact namespace and action names.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-validation-example.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form method=\"post\" validate=\"true\" action=\"quizClient\" namespace=\"/validation\">\n   <s:textfield label=\"Name\" name=\"name\"/>\n   <s:textfield label=\"Age\" name=\"age\"/>\n   <s:textfield label=\"Favorite color\" name=\"answer\"/>\n   <s:submit/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Setting LRU Cache Mode via XML\nDESCRIPTION: Configures both OGNL expression and BeanInfo caches to use LRU (Least Recently Used) mode with a size of 1000 through struts.xml. This provides the same functionality as the properties file but in XML format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set expression and BeanInfo caches to size 1000 with LRU cache mode -->\n<constant name=\"struts.ognl.enableExpressionCache\" value=\"true\"/>\n<constant name=\"struts.ognl.expressionCacheMaxSize\" value=\"1000\"/>\n<constant name=\"struts.ognl.expressionCacheLRUMode\" value=\"true\"/>\n<constant name=\"struts.ognl.beanInfoCacheMaxSize\" value=\"1000\"/>\n<constant name=\"struts.ognl.beanInfoCacheLRUMode\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Portlet Descriptor for Default Edit Action\nDESCRIPTION: This XML snippet from the portlet descriptor file sets the default action to invoke in edit mode for the Struts 2 portlet.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- The default action to invoke in edit mode. -->\n<init-param>\n   <name>defaultEditAction</name>\n   <value>index</value>\n</init-param>\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Result in Apache Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure a FreeMarker Result in Apache Struts. It sets the result type to 'freemarker' and specifies the template file 'foo.ftl' to be rendered for the 'success' outcome.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"freemarker\">foo.ftl</result>\n```\n\n----------------------------------------\n\nTITLE: Connecting Autocompleter to Remote Data Source in Struts\nDESCRIPTION: Demonstrates how to connect an autocompleter to a remote data source using the href attribute. The URL points to a JSON action that will provide the autocompleter options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_51\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url id=\"optionsUrl\" namespace=\"/autocompleter\" action=\"getStates\" />\n\n<sx:autocompleter href=\"%{#optionsUrl}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring redirectAction Result Type in struts.xml for Portlet\nDESCRIPTION: This XML snippet shows how to configure the redirectAction result type in struts.xml. It demonstrates passing render parameters to the next action in render mode and optionally changing the portlet mode.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<result type=\"redirectAction\" name=\"success\">\n    <param name=\"actionName\">displayCart</param>\n    <param name=\"userId\">${userId}</param>  \n    <!-- If you want to redirect to a different portlet mode, use the portletMode parameter \n    <param name=\"portletMode\">view</param>\n    -->\n</result>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Server-Rendered Tree in Struts\nDESCRIPTION: Shows configuration for a server-side rendered dynamic tree using root node and property mappings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<s:tree\n          id=\"...\"\n          rootNode=\"...\"\n          nodeIdProperty=\"...\"\n          nodeTitleProperty=\"...\"\n          childCollectionProperty=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Stylesheet Link in JSP using Struts Tags\nDESCRIPTION: This example demonstrates how to use the Struts url and link tags to render a <link> element for a CSS stylesheet. The url tag creates a URL variable, which is then used in the link tag to specify the href attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/link-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url var=\"myCss\" value=\"./styles/my-style.css\" encode=\"false\"/>\n<s:link href=\"%{myCss}\" rel=\"stylesheet\" type=\"text/css\" media=\"all\"/>\n```\n\n----------------------------------------\n\nTITLE: Making Ajax requests from multiple sources\nDESCRIPTION: This example shows how to trigger the same Ajax request from multiple source elements. The bind tag listens for events on multiple submit buttons identified by their IDs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:submit value=\"Make Request\" id=\"submit0\" />\n<s:submit value=\"Make Request\" id=\"submit1\" />\n<sx:bind sources=\"submit0,submit1\" events=\"onclick\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button with Gender List in JSP\nDESCRIPTION: Example of creating a radio button control using JSP tag syntax. Demonstrates how to build a gender selection list from an action variable and bind it to a radio control. The selected value is determined by the getMale() method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/radio-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:action name=\"GenderMap\" var=\"genders\"/>\n<s:radio label=\"Gender\" name=\"male\" list=\"#genders.genders\"/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for Mailing Lists\nDESCRIPTION: A markdown table layout defining the available Struts development mailing lists, including list names, subscription/unsubscription links, and descriptions of each list's purpose.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/dev-mail.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                                       | Subscribe                                                                                          | Unsubscribe                                                                                                | Description                                                                          |\n|--------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|\n| [Struts Devolopers](https://lists.apache.org/list.html?dev@struts.apache.org)              | [subscribe](mailto:dev-subscribe@struts.apache.org?subject=subscribe&amp;body=subscribe)           | [unsubscribe](mailto:dev-unsubscribe@struts.apache.org?subject=unsubscribe&amp;body=unsubscribe)           | Contact other developers interested in expanding and improving Struts functionality. |\n| [Struts Commits](https://lists.apache.org/list.html?commits@struts.apache.org)             | [subscribe](mailto:commits-subscribe@struts.apache.org?subject=subscribe&amp;body=subscribe)       | [unsubscribe](mailto:commits-unsubscribe@struts.apache.org?subject=unsubscribe&amp;body=unsubscribe)       | Receive notifications of changes to the Struts source code repository.               |\n| [Struts Issues](https://lists.apache.org/list.html?issues@struts.apache.org)               | [subscribe](mailto:issues-subscribe@struts.apache.org?subject=subscribe&amp;body=subscribe)        | [unsubscribe](mailto:issues-unsubscribe@struts.apache.org?subject=unsubscribe&amp;body=unsubscribe)        | Receive notifications from the Struts issue tracker.                                 |\n| [Struts Notifications](https://lists.apache.org/list.html?notifications@struts.apache.org) | [subscribe](mailto:notifications-subscribe@struts.apache.org?subject=subscribe&amp;body=subscribe) | [unsubscribe](mailto:notifications-unsubscribe@struts.apache.org?subject=unsubscribe&amp;body=unsubscribe) | Receive notifications from Github PRs & comments related to the Struts               |\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with JSP Tags in Apache Struts\nDESCRIPTION: This snippet demonstrates how to create a form using Struts tags in JSP. It includes a textfield for the first name and a submit button.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/velocity-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form action=\"updatePerson\">\n    <s:textfield label=\"First name\" name=\"firstName\"/>\n    <s:submit value=\"Update\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Publishing Topics on Tab Selection in Struts\nDESCRIPTION: Demonstrates how to publish topics when tabs are selected. The beforeSelectTabNotifyTopics attribute publishes before selection, and afterSelectTabNotifyTopics publishes after selection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_42\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\n   dojo.event.topic.subscribe('/before', function(event, tab, tabContainer) {\n      alert(\"Before selecting tab\");\n   });\n\n   dojo.event.topic.subscribe('/after', function(tab, tabContainer) {\n      alert(\"After tab was selected\");\n   });\n</script>\n<sx:tabbedpanel beforeSelectTabNotifyTopics=\"/before\" afterSelectTabNotifyTopics=\"/after\" id=\"tabContainer\">\n   <sx:div label=\"Tab 1\">\n       Local Tab 1\n   </sx:div>   \n   <sx:div label=\"Tab 2\">\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Result in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure a Velocity Result in Struts. It sets the result name to 'success', specifies the result type as 'velocity', and defines the location parameter pointing to the Velocity template file 'foo.vm'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/velocity-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"velocity\">\n\n    <param name=\"location\">foo.vm</param>\n\n</result>\n```\n\n----------------------------------------\n\nTITLE: Creating Closable Tabs in Struts Tabbed Panel\nDESCRIPTION: Shows how to configure tabs that can be closed by the user. Setting the closable attribute to true adds a close button to the tab.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_41\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel id=\"tabContainer\">\n   <sx:div label=\"Tab 1\" >\n       Local Tab 1\n   </sx:div>   \n   <sx:div label=\"Tab 2\"  closable=\"true\">\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelDriven Interface in Java\nDESCRIPTION: This snippet shows the method signature required to implement the ModelDriven interface in a Struts action. The getModel() method should return an instance of the business object.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/model-driven-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic Object getModel();\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in div content\nDESCRIPTION: This example shows how to execute JavaScript code contained in a div's loaded content. The executeScripts parameter enables script execution in the returned content.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_23\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"%{#url}\" executeScripts=\"true\">\n  Initial Content\n</sx:div>\n```\n\n----------------------------------------\n\nTITLE: Using CreateIfNull Annotation with Lists in Java\nDESCRIPTION: Example of applying the CreateIfNull annotation to a List field in Java. When set to true, this annotation will create a new List instance if the field is null during type conversion.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/create-if-null-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @CreateIfNull( value = true )\n private List<User> users;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OGNL Excluded Node Types in Struts XML\nDESCRIPTION: Example configuration for excluding specific OGNL node types to disable certain expression features. This configuration blocks various OGNL capabilities like addition operations, constructors, and static field access, providing enhanced security at the cost of some functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ognl.excludedNodeTypes\"\n          value=\"\n            ognl.ASTAdd,\n            ognl.ASTAssign,\n            ognl.ASTBitAnd,\n            ognl.ASTBitNegate,\n            ognl.ASTBitOr,\n            ognl.ASTCtor,\n            ognl.ASTDivide,\n            ognl.ASTEval,\n            ognl.ASTIn,\n            ognl.ASTInstanceof,\n            ognl.ASTKeyValue,\n            ognl.ASTList,\n            ognl.ASTMap,\n            ognl.ASTMultiply,\n            ognl.ASTNegate,\n            ognl.ASTNotIn,\n            ognl.ASTProject,\n            ognl.ASTRootVarRef,\n            ognl.ASTSelect,\n            ognl.ASTSelectFirst,\n            ognl.ASTSelectLast,\n            ognl.ASTSequence,\n            ognl.ASTShiftLeft,\n            ognl.ASTShiftRight,\n            ognl.ASTStaticField,\n            ognl.ASTStaticMethod,\n            ognl.ASTThisVarRef,\n            ognl.ASTUnsignedShiftRight,\n            ognl.ASTVarRef,\n            ognl.ASTXor\n\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic XSLT Template in Struts\nDESCRIPTION: A minimal XSLT template that matches the root result element. This is an example of a simple stylesheet used with XSLTResult, though Xalan would still process all properties even with this minimal template.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/xsl-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xsl:template match=\"/result\">\n<result/>\n</xsl:template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Interceptor Stack with Bean Validation\nDESCRIPTION: This XML snippet shows how to configure a custom interceptor stack that includes the Bean Validation interceptor. It defines a new interceptor and combines it with the default stack in a custom package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/bean-validation/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"my-app-package\" extends=\"struts-default\">\n    <interceptors>\n        <interceptor>\n            name=\"beanValidation\"\n            class=\"org.apache.struts.beanvalidation.validation.interceptor.BeanValidationInterceptor\">\n        </interceptor>\n        <interceptor-stack name=\"appDefaultStack\">\n            <interceptor-ref name=\"beanValidation\"/>\n            <interceptor-ref name=\"defaultStack\"/>\n        </interceptor-stack>\n    </interceptors>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Creating a time picker\nDESCRIPTION: This example demonstrates how to create a time picker using the datetimepicker tag. The type parameter set to 'time' makes it function as a time selector.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_26\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:datetimepicker type=\"time\" name=\"picker\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Result in Struts 2 XML\nDESCRIPTION: This XML configuration maps an action name to the TextResult class and configures the stream result type. It specifies the content type as HTML and sets the inputName parameter to match the getter method in the action class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"text-result\" class=\"actions.TextResult\">\n    <result type=\"stream\">\n        <param name=\"contentType\">text/html</param>\n        <param name=\"inputName\">inputStream</param>\n    </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Ajax response content with color effects\nDESCRIPTION: This example shows how to highlight the content of a target element with a blue color for 2 seconds after it's updated. It demonstrates this using bind, submit, and anchor tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_8\n\nLANGUAGE: jsp\nCODE:\n```\n<s:div id=\"div\" />\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind highlightColor=\"blue\" highlightDuration=\"2000\" targets=\"div\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit highlightColor=\"blue\" highlightDuration=\"2000\" targets=\"div\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a highlightColor=\"blue\" highlightDuration=\"2000\" targets=\"div\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Using Debugging Interceptor with XML Parameter\nDESCRIPTION: Example URL demonstrating how to use the Debugging Interceptor with the 'xml' parameter. This dumps parameters, context, session, and value stack as an XML document.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/debugging-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080/Welcome.action?debug=xml\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Input in Velocity for Apache Struts\nDESCRIPTION: This example shows how to use the Checkbox tag in a Velocity template for Apache Struts. It creates a checkbox input with label, name, and value attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/checkbox-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: Velocity\nCODE:\n```\n#tag( Checkbox \"label=checkbox test\" \"name=checkboxField1\" \"value=aBoolean\" )\n```\n\n----------------------------------------\n\nTITLE: Manual Release Deployment (Git and Maven)\nDESCRIPTION: Commands to manually checkout a specific release tag and deploy artifacts and site. This is useful for performing the release from a different machine or if the automatic process fails.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-master.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit co tags/$VERSION\nmvn deploy site-deploy --no-plugin-updates -DperformRelease=true\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for XStream (Required for XML Validation)\nDESCRIPTION: Maven dependency configuration required when using XML-based validation with OVal plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.thoughtworks.xstream</groupId>\n    <artifactId>xstream</artifactId>\n    <version>1.3.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Specific Validators with Short-Circuiting in XML\nDESCRIPTION: This XML snippet shows how to configure field-specific validators with short-circuiting. It includes a required validator for the 'bar' field and an expression validator comparing 'foo' and 'bar' fields.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<validator type=\"required\" short-circuit=\"true\">\n  <param name=\"fieldName\">bar</param>\n  <message>You must enter a value for bar.</message>\n</validator>\n\n<validator type=\"expression\">\n  <param name=\"expression\">foo gt bar</param>\n  <message>foo must be great than bar.</message>\n</validator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Specific Validators with Short-Circuiting in XML\nDESCRIPTION: This XML snippet shows how to configure field-specific validators with short-circuiting. It includes a required validator for the 'bar' field and an expression validator comparing 'foo' and 'bar' fields.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<validator type=\"required\" short-circuit=\"true\">\n  <param name=\"fieldName\">bar</param>\n  <message>You must enter a value for bar.</message>\n</validator>\n\n<validator type=\"expression\">\n  <param name=\"expression\">foo gt bar</param>\n  <message>foo must be great than bar.</message>\n</validator>\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Size Tabbed Panel in Struts\nDESCRIPTION: Shows how to create a tabbed panel with fixed dimensions that don't adjust to the current tab's content. The doLayout attribute ensures consistent sizing across all tabs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_35\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel cssStyle=\"width: 500px; height: 300px;\" doLayout=\"true\" id=\"tabContainer\">\n   <sx:div label=\"Tab 1\" >\n       Local Tab 1\n   </sx:div>   \n   <sx:div label=\"Tab 2\" >\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Registering Tiles Result Type in Struts Configuration\nDESCRIPTION: XML configuration to register the Tiles Result type definition in the Struts configuration file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<result-types>\n  <result-type name=\"tiles\" class=\"org.apache.struts2.views.tiles.TilesResult\"/>\n</result-types>\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Modification for Ajax Div in Struts\nDESCRIPTION: Complete example showing how to change the URL of an ajax div at runtime using JavaScript and event topics with the Dojo framework.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<saf:head theme=\"ajax\" />\n\n<script type=\"text/javascript\">\n    function updateReports(id) {\n       var reportDiv= window['reportDivId'];\n       reportDiv.href = '/../reportListRemote.action?selectedId='+id;\n       reportDiv.refresh();\n    }\n    dojo.event.topic.getTopic(\"updateReportsListTopic\").subscribe(null, \"updateReports\");\n</script>\n\n<form ... >\n<saf:select .... onchange=\"javascript: dojo.event.topic.publish(\\\"updateReportsListTopic\\\", this.value); \" />\n\n<saf:div id=\"reportDivId\" theme=\"ajax\" href=\"/.../reportListRemote.action\" >\n  Loading reports...\n</saf:div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Key and Value for Autocompleter in Struts\nDESCRIPTION: Shows how to set both the initial visible value and the associated key value for an autocompleter. The value attribute sets the display text, while keyValue sets the selected key.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_54\n\nLANGUAGE: jsp\nCODE:\n```\n<s:url id=\"optionsUrl\" namespace=\"/autocompleter\" action=\"getStates\" />\n\n<sx:autocompleter href=\"%{#optionsUrl}\" value=\"Florida\" keyValue=\"FL\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing @Before Annotation in Java Action Class\nDESCRIPTION: Demonstrates how to use the @Before annotation to execute authorization checks before the main action method. The example shows a method marked with @Before that performs authentication, followed by the main execute() method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/before-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleAction extends ActionSupport {\n\n  @Before\n  public void isAuthorized() throws AuthenticationException {\n    // authorize request, throw exception if failed\n  }\n\n  public String execute() {\n     // perform secure action\n     return SUCCESS;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Setting date picker value from string\nDESCRIPTION: This example shows how to set the initial value of a date picker from a string. The value parameter accepts a date in string format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_27\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:datetimepicker value=\"%{'2007-01-01'}\" name=\"picker\" />\n```\n\n----------------------------------------\n\nTITLE: Using I18N in Tiles Definition\nDESCRIPTION: XML configuration demonstrating how to use internationalization (I18N) in a Tiles definition by referencing Struts resource bundles.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<definition name=\"home\" extends=\"logged-in\">\n  <put-attribute name=\"title\" expression=\"I18N:home.title\"/>\n  <put-attribute name=\"body\" value=\"/WEB-INF/tiles/home.jsp\"/>\n</definition>\n```\n\n----------------------------------------\n\nTITLE: JSON Success Response Format for Redirection in Struts\nDESCRIPTION: Shows the JSON format returned by the jsonActionRedirect result when validation succeeds. It contains a location property with the URL to redirect to, which will be processed by the client-side JavaScript.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"location\": \"<url to be loaded next>\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing PreResultListener in Struts Action Class\nDESCRIPTION: Shows how to add a PreResultListener within a Struts Action class. The listener is added during the execute method and can perform operations before the Result execution.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/pre-result-listener.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  public class MyAction extends ActionSupport {\n     ...\n     public String execute() throws Exception {\n         ActionInvocation invocation = ActionContext.getContext().getActionInvocation();\n         invocation.addPreResultListener(new PreResultListener() {\n              public void beforeResult(ActionInvocation invocation, \n                                       String resultCode) {\n                  // perform operation necessary before Result execution\n              }\n         });\n     }\n     ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Struts Variables with JSP EL Expressions\nDESCRIPTION: Examples of how to access Struts-set variables using JSP 2.0 Expression Language (EL) syntax, both in plain text and within tag attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/access-to-valuestack-from-jsps.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\na[0] = ${a[0]}\n\n<sample:tag value=\"${a[1]}\"/>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Tabs in Struts Tabbed Panel\nDESCRIPTION: Demonstrates how to configure lazy loading for tab content. By setting preload=\"false\", the tab content will only be loaded when the tab is selected, not when the page initially loads.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_36\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel id=\"tabContainer\">\n   <sx:div label=\"Remote Tab 1\" href=\"%{#url}\">\n       Remote Tab 1\n   </sx:div>  \n   <sx:div label=\"Remote Tab 2\" href=\"%{#url}\" preload=\"false\">\n       Remote Tab 1\n   </sx:div>      \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed List Autocompleter in Struts\nDESCRIPTION: Demonstrates how to create an autocompleter with a fixed list of options. The list attribute takes a literal array of strings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_46\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter list=\"{'apple','banana','grape','pear'}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring XSLT Result with Filtering Patterns\nDESCRIPTION: Configuration example for XSLT result type with filtering patterns. The matchingPattern restricts processing to direct children of the result element, while the excludingPattern skips any property containing 'hugeCollection'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/xsl-result.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"xslt\">\n  <param name=\"stylesheetLocation\">foo.xslt</param>\n  <param name=\"matchingPattern\">^/result/[^/*]$</param>\n  <param name=\"excludingPattern\">.*(hugeCollection).*</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Velocity Combobox Implementation\nDESCRIPTION: Simple example of implementing a combobox in Velocity template syntax, showing birth year selection with basic attributes like size and maxlength.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/combobox-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: velocity\nCODE:\n```\n#tag( ComboBox \"label=Birth year\" \"size=6\" \"maxlength=4\" \"name=birthYear\" \"list=#year\" )\n```\n\n----------------------------------------\n\nTITLE: Implementing Head Template in XHTML Theme\nDESCRIPTION: The head.ftl template that extends the simple theme's head template with additional CSS styles for form rendering.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_4\n\nLANGUAGE: freemarker\nCODE:\n```\n<#--\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n-->\n<#include \"/template/xhtml/head-cdata.ftl\" />\n<#include \"/template/simple/head.ftl\" />\n\n<link rel=\"stylesheet\" href=\"<@s.url value='/struts/xhtml/styles.css' includeParams='none' encode='false' />\" type=\"text/css\"/>\n<#include \"/template/archive.ftl\" />\n\n<!-- Fix the validation using an external javascript iff using xhtml2.5 (thus IE6 or higher) -->\n<#if !parameters.disableMainScripts?default(true)>\n<script type=\"text/javascript\" src=\"<@s.url value='/struts/utils.js' includeParams='none' encode='false' />\"></script>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Configuring PrefixBasedActionMapper for REST and Standard URLs\nDESCRIPTION: Sets up the PrefixBasedActionMapper to route specific URL patterns to different action mappers. URLs with '/rest' prefix are handled by the REST mapper, while others use the standard Struts mapper.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <constant name=\"struts.mapper.class\" value=\"org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper\" />\n  <constant name=\"struts.mapper.prefixMapping\" value=\"/rest:rest,:struts\"/>\n  <constant name=\"struts.actionProxyFactory\" value=\"prefix\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring PrefixBasedActionMapper for REST and Standard URLs\nDESCRIPTION: Sets up the PrefixBasedActionMapper to route specific URL patterns to different action mappers. URLs with '/rest' prefix are handled by the REST mapper, while others use the standard Struts mapper.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <constant name=\"struts.mapper.class\" value=\"org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper\" />\n  <constant name=\"struts.mapper.prefixMapping\" value=\"/rest:rest,:struts\"/>\n  <constant name=\"struts.actionProxyFactory\" value=\"prefix\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Locales with Datetimepicker in Struts\nDESCRIPTION: Demonstrates how to configure the datetimepicker to support multiple locales. The additional locales must be specified in the sx:head tag, then individual pickers can be set to use different languages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_32\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:head extraLocales=\"en-us,nl-nl,de-de\" />\n\n<sx:datetimepicker label=\"In German\" name=\"dddp7\" value=\"%{'2006-06-28'}\" language=\"de-de\" />\n<sx:datetimepicker label=\"In Dutch\"  name=\"dddp8\" value=\"%{'2006-06-28'}\" language=\"nl-nl\" />\n```\n\n----------------------------------------\n\nTITLE: Tiles Layout Page Using Struts Tags\nDESCRIPTION: JSP code for a Tiles layout page that uses Struts tags and demonstrates how to import and use Tiles attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_8\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib uri=\"http://tiles.apache.org/tags-tiles\" prefix=\"tiles\" %>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n\n<%-- Show usage; Used in Header --%>\n<tiles:importAttribute name=\"title\" scope=\"request\"/>\n<html>\n    <head><title>Struts2 Showcase - <tiles:getAsString name=\"title\"/></title></head>\n<body>\n    <tiles:insertAttribute name=\"header\"/>\n    <tiles:insertAttribute name=\"body\"/>\n    <p>Notice that this is a layout made in JSP</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Dimensions for Autocompleter in Struts\nDESCRIPTION: Demonstrates how to set custom dimensions for the autocompleter dropdown. The dropdownHeight and dropdownWidth attributes specify the size in pixels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_67\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter href=\"%{#url}\" dropdownHeight=\"180\" dropdownWidth=\"200\" />\n```\n\n----------------------------------------\n\nTITLE: Annotating Custom Action Method in Java\nDESCRIPTION: Shows how to annotate a custom action method in Java using the Convention Plugin. This example annotates the 'delete' method of the CrudAction class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Action(\"crud\")\npublic class CrudAction {\n    @Action(\"delete\")\n    public String delete() {\n        ...\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Autocompleter as Map in Struts\nDESCRIPTION: Shows the JSON format for autocompleter data as a Map, which is the recommended approach. Keys are the display values, and values are the selection keys.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Alabama\" : \"AL\",\n    \"Alaska\" : \"AK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ajax Head Template in Struts (FTL)\nDESCRIPTION: This snippet shows the contents of the head.ftl file, which includes the necessary JavaScript for the Dojo Toolkit used in Struts AJAX features. It sets up Dojo configuration and includes required JavaScript files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-head-template.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script language=\"JavaScript\" type=\"text/javascript\">\n    // Dojo configuration\n    djConfig = {\n        isDebug: false,\n        bindEncoding: \"${parameters.encoding}\",\n        baseRelativePath: \"<@s.url value='/struts/dojo/'\"/>\",\n        locale: \"${parameters.locale}\"\n    };\n</script>\n\n<script language=\"JavaScript\" type=\"text/javascript\"\n        src=\"<@s.url value='/struts/dojo/dojo.js'\"/>\"></script>\n\n<script language=\"JavaScript\" type=\"text/javascript\"\n        src=\"<@s.url value='/struts/ajax/dojoRequire.js'\"/>\"></script>\n\n<link rel=\"stylesheet\" href=\"<@s.url value='/struts/xhtml/styles.css'\"/>\"\n      type=\"text/css\"/>\n\n<script language=\"JavaScript\" type=\"text/javascript\">\n    dojo.require(\"dojo.io.*\");\n    dojo.require(\"dojo.event.*\");\n    dojo.require(\"dojo.widget.*\");\n    dojo.require(\"dojo.lang.*\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring OGNL Expression Cache via Properties File\nDESCRIPTION: Enables or disables the OGNL expression cache in Struts using the default.properties file. The expression cache is enabled by default but can be disabled to reduce memory usage at the cost of performance.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nstruts.ognl.enableExpressionCache=true\n```\n\nLANGUAGE: properties\nCODE:\n```\nstruts.ognl.enableExpressionCache=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Javatemplates Plugin in Struts XML\nDESCRIPTION: XML configuration required in struts.xml to enable the Javatemplates plugin. Sets the template suffix to 'java' and the UI theme to 'simple'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/javatemplates/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n  <constant name=\"struts.ui.templateSuffix\" value=\"java\" />\n  <constant name=\"struts.ui.theme\" value=\"simple\" />\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Manual JasperReports Result Type Definition\nDESCRIPTION: XML configuration for manually defining the jasper result type when not extending the jasperreports-default package.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<result-types>\n    <result-type name=\"jasper\" class=\"org.apache.struts2.views.jasperreports.JasperReportsResult\"/>\n</result-types>\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Autocompleter with No Name Match in Struts\nDESCRIPTION: Shows the JSON format for autocompleter data where there is no property name match. In this case, the autocompleter will use the first array it finds in the response.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Australopithecus\" : [\n       [\"Alabama\",\"AL\"],\n       [\"Alaska\",\"AK\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Actions with Anchors\nDESCRIPTION: Example demonstrating the usage of anchor parameters with redirectAction result type to generate URLs with hash fragments.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/redirect-action-result.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n    Example of \"anchor\" param usage in conjunction with \"redirectAction\" result-type.\n \n    Generated URL: /displayReport.action#SUMMARY\n-->\n \n<action name=\"displayReport\">\n    <result>/jsp/displayReport.jsp</result>\n</action>\n \n<action name=\"financeReport\" class=\"com.mycompany.reports.FinanceReportAction\"> \n    <result name=\"input\">/jsp/index.jsp</result>            \n    <result name=\"success\" type=\"redirectAction\">\n        <param name=\"actionName\">displayReport</param>\n        <param name=\"parse\">false</param>\n        <param name=\"anchor\">SUMMARY</param>\n    </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Attaching Ajax requests to multiple events on multiple sources\nDESCRIPTION: This example demonstrates how to trigger Ajax requests from multiple events on multiple source elements. The bind tag listens for both focus and change events on two textarea elements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:textarea id=\"area0\" />\n<s:textarea id=\"area1\" />\n<sx:bind sources=\"area0,area1\" events=\"onfocus,onchange\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Action for Autocompleter Data in Struts\nDESCRIPTION: Shows the Java implementation of an action that provides data for an autocompleter. The action returns a Map with display values as keys and selected values as values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_49\n\nLANGUAGE: java\nCODE:\n```\npublic class AutocompleterExample extends ActionSupport {\n\n   public Map<String, String> getOptions() {\n      Map<String,String> options = new HashMap<String,String>();\n      options.put(\"Florida\", \"FL\");\n      options.put(\"Alabama\", \"AL\");\n\n      return options;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading div content via topics\nDESCRIPTION: This example demonstrates how to reload a div's content by publishing a topic. The listenTopics parameter specifies which topic to listen for.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_18\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"%{#url}\" listenTopics=\"/refresh\">\n  Initial Content\n</sx:div>\n\n<s:submit value=\"Refresh\" onclick=\"dojo.event.topic.publish('/refresh')\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Reset Input Example in JSP\nDESCRIPTION: Simple example showing how to render a basic reset button with a value attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/reset-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:reset value=\"Reset\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring JBoss VFS for Windows\nDESCRIPTION: Adds Java system property to force VFS JAR handling in JBoss 5 on Windows systems. This configuration is added to run.conf.bat and enables proper scanning of actions inside JAR files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/jboss-5.md#2025-04-08_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nset \"JAVA_OPTS=%JAVA_OPTS% -Djboss.vfs.forceVfsJar=true\"\n```\n\n----------------------------------------\n\nTITLE: Basic Iterator Generation in JSP\nDESCRIPTION: Demonstrates how to generate a simple iterator from a comma-separated string and iterate through its values using the generator tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/generator-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:generator val=\"%{'aaa,bbb,ccc,ddd,eee'}\">\\n <s:iterator>\\n     <s:property /><br/>\\n </s:iterator>\\n</s:generator>\n```\n\n----------------------------------------\n\nTITLE: Submitting a plain form via Ajax\nDESCRIPTION: This example demonstrates how to submit a standard HTML form via Ajax. The formId parameter specifies which form to submit, and its data will be included in the request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_15\n\nLANGUAGE: jsp\nCODE:\n```\n<form id=\"form\">\n  <input type=textbox name=\"data\">\n</form>\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind formId=\"form\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit formId=\"form\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a formId=\"form\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Portlet Init Parameters in portlet.xml\nDESCRIPTION: This XML snippet shows how to set up init-param elements in portlet.xml for configuring portlet mode to xwork namespace mappings. It sets the portlet namespace, view namespace, and default view action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<init-param>\n    <!-- Portlet namespace -->\n    <name>portletNamespace</name>\n    <value>/portletA</value>\n</init-param>\n<init-param>\n    <!-- The base namespace of the view portlet mode -->\n    <name>viewNamespace</name>\n    <value>/view</value>\n</init-param>\n<init-param>\n    <!-- The default action to invoke in view mode -->\n    <name>defaultViewAction</name>\n    <value>index</value>\n</init-param>\n```\n\n----------------------------------------\n\nTITLE: Custom FileManager Configuration\nDESCRIPTION: Configuration for registering a custom FileManager implementation in Struts2.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n     <filter-name>struts2</filter-name>\n     <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n     <init-param>\n         <param-name>struts.fileManager</param-name>\n         <param-value>com.company.MyFileManager</param-value>\n     </init-param>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Hiding Dropdown Arrow in Autocompleter in Struts\nDESCRIPTION: Shows how to hide the dropdown arrow in an autocompleter. Setting showDownArrow to false removes the arrow button from the control.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_64\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter href=\"%{#url}\" showDownArrow=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Method Action in XML\nDESCRIPTION: Demonstrates how to configure a wildcard method action in XML. This example maps any action ending with 'Crud' to the corresponding method of the Crud class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"*Crud\" class=\"example.Crud\" method=\"{1}\">\n    ...\n```\n\n----------------------------------------\n\nTITLE: Loading Autocompleter Options as User Types in Struts\nDESCRIPTION: Demonstrates how to configure an autocompleter to load options as the user types. The loadOnTextChange attribute enables dynamic loading, and loadMinimumCount specifies the minimum number of characters needed to trigger loading.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_63\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter href=\"%{#url}\" loadOnTextChange=\"true\" loadMinimumCount=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing String Validation with RequiredStringValidator in Java\nDESCRIPTION: Example showing how to use the RequiredStringValidator annotation to validate a String field. The validator checks that the field is non-null and has length greater than 0, with options for trimming whitespace and internationalization support.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/required-string-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RequiredStringValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, trim = true)\n```\n\n----------------------------------------\n\nTITLE: Web Application Configuration for OSGi\nDESCRIPTION: Complete web.xml configuration for Struts OSGi integration including filters and listeners.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app id=\"WebApp_9\" version=\"2.4\" xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n\n    <display-name>Struts Blank</display-name>\n\n    <filter>\n        <filter-name>struts2-prepare</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter</filter-class>\n    </filter>\n\n    <filter>\n        <filter-name>struts2-execute</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter</filter-class>\n    </filter>\n\n     <filter-mapping>\n        <filter-name>struts2-prepare</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n    <filter-mapping>\n        <filter-name>struts2-execute</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n    <listener>\n        <listener-class>org.apache.struts2.osgi.StrutsOsgiListener</listener-class>\n    </listener>\n\n    <listener>\n        <listener-class>org.apache.struts2.dispatcher.ng.listener.StrutsListener</listener-class>\n    </listener>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <context-param>\n        <param-name>contextClass</param-name>\n        <param-value>org.springframework.osgi.web.context.support.OsgiBundleXmlWebApplicationContext</param-value>\n    </context-param>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>osgibundle:/META-INF/spring/*.xml</param-value>\n    </context-param>\n    <context-param>\n        <param-name>parentContextKey</param-name>\n        <param-value>parent-context-bean</param-value>\n    </context-param>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Creating URL Parameters and Links in Struts\nDESCRIPTION: Creates a URL with a Spanish locale parameter, then creates a link to that URL using the expression notation to reference the URL variable.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<s:url var=\"es\" action=\"Hello\">\n  <s:param name=\"request_locale\">es</s:param>\n</s:url>\n<s:a href=\"%{es}\">Espanol</s:a>\n```\n\n----------------------------------------\n\nTITLE: Parameterized Wildcard Action Mapping in Struts XML\nDESCRIPTION: Shows how to use wildcards with parameter substitution in action mappings. The wildcard-matched value is passed as a parameter to both the action and the result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"/edit/*\" class=\"org.apache.struts.webapp.example.Edit{1}Action\">\n    <param name=\"id\">{1}</param>\n    <result>\n      <param name=\"location\">/mainMenu.jsp</param>\n      <param name=\"id\">{1}</param> \n    </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Limiting Displayed Options in Autocompleter in Struts\nDESCRIPTION: Demonstrates how to limit the number of options displayed in the autocompleter dropdown. The resultsLimit attribute specifies the maximum number of options to show.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_65\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter href=\"%{#url}\" resultsLimit=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Name for Autocompleter in Struts\nDESCRIPTION: Demonstrates how to customize the parameter name used for the selected key. By default, the key parameter is named optionsKey, but it can be changed with the keyName attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_55\n\nLANGUAGE: java\nCODE:\n```\npublic MyAction extends ActionSupport {\n    private String superKey;\n    private String options;\n\n    ...    \n}\n```\n\n----------------------------------------\n\nTITLE: Displaying loading text while div content loads\nDESCRIPTION: This example shows how to display a text message while a div's content is being loaded. The loadingText parameter specifies the message, and showLoadingText enables its display.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_21\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"%{#url}\" loadingText=\"reloading\" showLoadingText=\"true\">\n  Initial Content\n</sx:div>\n```\n\n----------------------------------------\n\nTITLE: Button-style Reset Example in JSP\nDESCRIPTION: Example demonstrating how to create a button-type reset control using a localization key for the button text.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/reset-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\nRender a reset button:\n<s:reset type=\"button\" key=\"reset\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Struts Actions with Spring Integration\nDESCRIPTION: Demonstrates how to configure Struts actions in struts.xml, including an example of using a Spring bean name instead of a class name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"\n    \"http://struts.apache.org/dtds/struts-2.0.dtd\">\n<struts>\n    <include file=\"struts-default.xml\"/>\n\n    <package name=\"default\" extends=\"struts-default\">\n        <action name=\"foo\" class=\"com.acme.Foo\">\n            <result>foo.ftl</result>\n        </action>\n    </package>\n\n    <package name=\"secure\" namespace=\"/secure\" extends=\"default\">\n        <action name=\"bar\" class=\"bar\">\n            <result>bar.ftl</result>\n        </action>\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Granting Specific Permissions in SunOne 7.0 for Struts\nDESCRIPTION: This configuration grants only the specific permissions required by the Struts framework, including property read/write access, reflection capabilities, and OGNL invocation permissions. This approach is more secure than granting all permissions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/sunone-7-0.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ngrant {\n\tpermission java.util.PropertyPermission \"*\", \"read, write\";\n\tpermission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n\tpermission ognl.OgnlInvokePermission \"*\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Reloading for Development in Web XML\nDESCRIPTION: Sets up the web application to use a special Spring application context that supports class reloading for development purposes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<context-param>\n   <param-name>contextClass</param-name>\n   <param-value>org.apache.struts2.spring.ClassReloadingXMLWebApplicationContext</param-value>\n</context-param>\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in Ajax response content\nDESCRIPTION: This example demonstrates how to execute JavaScript included in the content returned from an Ajax request. The executeScripts parameter enables script execution in the returned content.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_9\n\nLANGUAGE: jsp\nCODE:\n```\n<s:div id=\"div\" />\n\n<!-- With a bind tag -->\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind executeScripts=\"true\" targets=\"div\" sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n\n<!-- With a submit tag -->\n<sx:submit executeScripts=\"true\" targets=\"div\" href=\"%{#url}\" />\n\n<!-- With an anchor tag -->\n<sx:a executeScripts=\"true\" targets=\"div\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Glassfish 3 OSGi Host Parameter\nDESCRIPTION: Configuration required when running Struts OSGi application on Glassfish 3, which uses Apache Felix. This setting specifies Glassfish as the OSGi host.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<context-param>\n    <param-name>struts.osgi.host</param-name>\n    <param-value>Glassfish</param-value>\n</context-param>\n```\n\n----------------------------------------\n\nTITLE: Formatted Input with Conversion Support\nDESCRIPTION: JSP code showing how to use getFormatted method for input fields with localization and conversion error support.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_6\n\nLANGUAGE: jsp\nCODE:\n```\n<s:textfield key=\"user.born\" value=\"%{getFormatted('format.number','user.born')}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom RegEx for Allowed Action Names in XML\nDESCRIPTION: Demonstrates how to define a custom regular expression to override the default allowed action names in Struts configuration. This example allows action names containing only lowercase letters and curly braces.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n  <constant name=\"struts.allowed.action.names\" value=\"[a-z{}]\"*/>\n  ...\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Autocompleter with JavaScript in Struts\nDESCRIPTION: Demonstrates how to enable and disable a Struts Autocompleter component using JavaScript functions. The script defines two functions: enableit() to enable the autocompleter and disableit() to disable it.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_69\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\n  function enableit() {\n     var autoCompleter = dojo.widget.byId(\"auto\");\n     autoCompleter.enable();\n  }\n\n  function disableit() {\n     var autoCompleter = dojo.widget.byId(\"auto\");\n     autoCompleter.disable();\n  }\n</script>\n\n<sx:autocompleter id=\"auto\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Struts 2 Form Implementation\nDESCRIPTION: Example of creating a form using Struts 2 form tags including textfield and submit controls\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<p>Get your own personal hello by filling out and submitting this form.</p>\n\n<s:form action=\"hello\">\n  <s:textfield name=\"userName\" label=\"Your name\" />\n  <s:submit value=\"Submit\" />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Adding Portlet Tiles Plugin Dependency in Maven\nDESCRIPTION: This XML snippet shows how to include the struts-portlet-tiles-plugin as a dependency in a Maven-based web application. It specifies the groupId, artifactId, and version for the plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet-tiles/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-portlet-tiles-plugin</artifactId>\n  <version>${struts2.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Custom JNDI Key Configuration for CDI BeanManager\nDESCRIPTION: Struts XML configuration example showing how to specify a custom JNDI key for the CDI BeanManager. This is necessary when the container uses a non-standard JNDI location for the BeanManager reference.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <constant name=\"struts.objectFactory.cdi.jndiKey\" value=\"java:comp/some/weird/BeanManagerReference\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocompleter to Show Options Without Suggestions\nDESCRIPTION: Demonstrates how to configure the Autocompleter to display options but not automatically complete text in the input field. This is done by setting autoComplete to false.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_74\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter autoComplete=\"false\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Result Types in Java\nDESCRIPTION: Demonstrates how to create a custom result type by extending ServletDispatcherResult and implementing ParamNameAwareResult to filter acceptable parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-types.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class MyResult extends ServletDispatcherResult implements ParamNameAwareResult {\n\n    public boolean acceptableParamName(String name, String value) {\n        return \"accept\".equals(name);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Tabs with JavaScript in Struts\nDESCRIPTION: Shows how to enable and disable tabs dynamically using JavaScript. The example demonstrates three ways to reference tabs: by index, by ID, and by widget reference.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_39\n\nLANGUAGE: jsp\nCODE:\n```\n<script type=\"text/javascript\">\n   function enableTab(param) {\n      var tabContainer = dojo.widget.byId('tabContainer');\n      tabContainer.enableTab(param);\n   }\n    \n   \n   function disableTab(param) {\n      var tabContainer = dojo.widget.byId('tabContainer');\n      tabContainer.disableTab(param);\n   }\n</script>\n\n<sx:tabbedpanel id=\"tabContainer\" id=\"tabContainer\">\n   <sx:div id=\"tab1\" label=\"Tab 1\">\n       Local Tab 1\n   </sx:div>   \n   <sx:div id=\"tab2\" label=\"Tab 2\" disabled=\"true\">\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n\n<!-- By Tab Index -->\n<input type=\"button\" onclick=\"enableTab(1)\" value=\"Enable Tab 2 using Index\" />\n<input type=\"button\" onclick=\"disableTab(1)\" value=\"Disable Tab 2 using Index\" />\n    \n<!-- By Tab Id -->\n<input type=\"button\" onclick=\"enableTab('tab2')\" value=\"Enable Tab 2 using Id\" />\n<input type=\"button\" onclick=\"disableTab('tab2')\" value=\"Disable Tab 2 using Id\" />\n   \n<!-- By Widget -->\n<input type=\"button\" onclick=\"enableTab(dojo.widget.byId('tab2'))\" value=\"Enable Tab 2 using widget\" />\n<input type=\"button\" onclick=\"disableTab(dojo.widget.byId('tab2'))\" value=\"Disable Tab 2 using widget\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Autocompleter as Named Array in Struts\nDESCRIPTION: Shows the JSON format for autocompleter data as an array inside an object, where the property name matches the field name. This format is useful when the response includes additional data.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"state\" : [\n        [\"Alabama\",\"AL\"],\n        [\"Alaska\",\"AK\"]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Upload Tags in JSP with Apache Struts\nDESCRIPTION: Examples of implementing file upload input fields using the Struts 'file' tag. The examples show how to specify accepted file types using the 'accept' attribute for both single and multiple MIME types.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/file-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n <s:file name=\"anUploadFile\" accept=\"text/*\" />\n <s:file name=\"anohterUploadFIle\" accept=\"text/html,text/plain\" />\n```\n\n----------------------------------------\n\nTITLE: Using Struts Label Tag with Key Attribute in JSP\nDESCRIPTION: Example of using the Struts label tag with a key attribute to retrieve text from a ResourceBundle. The tag will output 'User Name: Ford.Prefect' assuming the i18n message 'userName' corresponds to 'User Name' and getUserName() returns 'Ford.Prefect'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/label-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:label key=\"userName\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Postfix Wildcard Method Action in XML\nDESCRIPTION: Shows how to configure a postfix wildcard method action in XML. This example maps any action starting with 'Crud_' to the corresponding method of the Crud class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"Crud_*\" class=\"example.Crud\" method=\"{1}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Method Invocation RegEx in Struts 2.5\nDESCRIPTION: XML configuration to redefine the default RegEx used for Strict Method Invocation in Struts 2.5. This allows customization of allowed method names.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.strictMethodInvocation.methodRegex\" value=\"([a-zA-Z]*)\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Method Invocation RegEx in Struts 2.5\nDESCRIPTION: XML configuration to redefine the default RegEx used for Strict Method Invocation in Struts 2.5. This allows customization of allowed method names.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.strictMethodInvocation.methodRegex\" value=\"([a-zA-Z]*)\"/>\n```\n\n----------------------------------------\n\nTITLE: Making Ajax requests attached to an event\nDESCRIPTION: This example shows how to trigger an Ajax request when an event occurs on a specific element. The bind tag listens for the onclick event on the submit button.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:submit value=\"Make Request\" id=\"submit\" />\n<sx:bind sources=\"submit\" events=\"onclick\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Bundles Search Priority in Struts 2\nDESCRIPTION: XML configuration to enable searching in default bundles first for improved performance, available since Struts 2.6.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.i18n.search.defaultbundles.first\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Struts 2 Actions\nDESCRIPTION: Shows how to use @ExceptionMapping annotation for handling exceptions at both class and method levels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@ExceptionMappings({\n    @ExceptionMapping(exception = \"java.lang.NullPointerException\", result = \"success\", params = {\"param1\", \"val1\"})\n})\npublic class ExceptionsActionLevelAction {\n\n    public String execute() throws Exception {\n        return null;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExceptionsMethodLevelAction {\n    @Action(value = \"exception1\", exceptionMappings = {\n            @ExceptionMapping(exception = \"java.lang.NullPointerException\", result = \"success\", params = {\"param1\", \"val1\"})\n    })\n    public String run1() throws Exception {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Struts 2 Actions\nDESCRIPTION: Shows how to use @ExceptionMapping annotation for handling exceptions at both class and method levels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@ExceptionMappings({\n    @ExceptionMapping(exception = \"java.lang.NullPointerException\", result = \"success\", params = {\"param1\", \"val1\"})\n})\npublic class ExceptionsActionLevelAction {\n\n    public String execute() throws Exception {\n        return null;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class ExceptionsMethodLevelAction {\n    @Action(value = \"exception1\", exceptionMappings = {\n            @ExceptionMapping(exception = \"java.lang.NullPointerException\", result = \"success\", params = {\"param1\", \"val1\"})\n    })\n    public String run1() throws Exception {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: US Date Format Pattern\nDESCRIPTION: Date format pattern specific to US locale (en_US) using MM/dd/yy pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nformat.date = {0,date,MM/dd/yy}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Factories in Struts XML\nDESCRIPTION: Demonstrates how to configure custom OGNL cache factory implementations in struts.xml. This allows developers to replace the default cache implementations with their own custom solutions that implement the OgnlCacheFactory interface.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ognl.expressionCacheFactory\" value=\"some.package.CustomExpressionCacheFactory\"/>\n<constant name=\"struts.ognl.beanInfoCacheFactory\" value=\"some.package.CustomBeanInfoCacheFactory\"/>\n```\n\n----------------------------------------\n\nTITLE: Preventing Autocompleter Options from Loading on Page Load\nDESCRIPTION: Shows how to prevent the Autocompleter from automatically loading options when the page loads. Setting preload to false makes the Autocompleter wait for user interaction before loading options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_75\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter preload=\"false\" href=\"%{#url}\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Timer for Ajax Div in Struts with JavaScript\nDESCRIPTION: JavaScript function to start the refresh timer for an ajax div component with id 'remotediv1'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nremotediv1.startTimer();\n```\n\n----------------------------------------\n\nTITLE: Setting LRU Cache Mode via Properties File\nDESCRIPTION: Configures both OGNL expression and BeanInfo caches to use LRU (Least Recently Used) mode with a size of 1000 through default.properties. LRU mode evicts least recently used items when the cache reaches capacity.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n### Set expression and BeanInfo caches to size 1000 with LRU cache mode\nstruts.ognl.enableExpressionCache=true\nstruts.ognl.expressionCacheMaxSize=1000\nstruts.ognl.expressionCacheLRUMode=true\nstruts.ognl.beanInfoCacheMaxSize=1000\nstruts.ognl.beanInfoCacheLRUMode=true\n```\n\n----------------------------------------\n\nTITLE: Autocompleter with Static List in Struts 2\nDESCRIPTION: Implementation of an autocompleter using a predefined static list of options. The autoComplete attribute is set to false, which means suggestions will only appear after user interaction.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n <s:autocompleter name=\"test\"  list=\"{'apple','banana','grape','pear'}\" autoComplete=\"false\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Action Prefix Example in Struts Forms\nDESCRIPTION: Example of using the action prefix in a Struts form. When the second submit button is clicked, instead of executing the baz action, the anotherAction's execute() method will be called.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<s:form action=\"baz\">\n    <s:textfield label=\"Enter your name\" name=\"person.name\"/>\n    <s:submit value=\"Create person\"/>\n    <s:submit action=\"anotherAction\" value=\"Cancel\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading Autocompleter with Minimum Character Threshold in Struts 2\nDESCRIPTION: Example of an autocompleter that reloads its content every time the text changes, but only when the text length is at least 3 characters. The entered text is passed as a parameter to the specified URL.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n <sx:autocompleter name=\"mvc\" href=\"%{jsonList}\" loadOnTextChange=\"true\" loadMinimumCount=\"3\"/>\n \n The text entered on the autocompleter is passed as a parameter to the url specified in \"href\", like (text is \"struts\"):\n  \n http://host/example/myaction.do?mvc=struts\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Actions for Portlet Modes in XML\nDESCRIPTION: XML configuration for Struts 2 actions, defining packages and actions for view and edit portlet modes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\"\n    \"http://struts.apache.org/dtds/struts-2.0.dtd\">\n\n<struts>\n   <package name=\"default\" extends=\"struts-portlet-default\" namespace=\"/view\">\n        <action name=\"index\" class=\"com.mycompany.HelloAction\">\n\t    <result>/WEB-INF/jsp/view/index.jsp</result>\n\t</action>\n   </package>\n\t\n   <package name=\"edit\" extends=\"struts-portlet-default\" namespace=\"/edit\">\n\t<action name=\"index\" class=\"com.mycompany.UpdateNameAction\">\n\t    <result type=\"redirectAction\">\n\t        <param name=\"actionName\">index</param>\n\t\t<param name=\"portletMode\">view</param>\n\t    </result>\n\t    <result name=\"input\">/WEB-INF/jsp/edit/index.jsp</result>\n\t</action>\n    </package>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Linking Two Autocompleters Using Topics in Struts\nDESCRIPTION: Shows how to link two Autocompleter components where the selection in the first autocompleter affects the options in the second. This is achieved using topic publishing and listening.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_73\n\nLANGUAGE: jsp\nCODE:\n```\n<form id=\"selectForm\">\n   <sx:autocompleter  name=\"select\" list=\"{'fruits','colors'}\"  valueNotifyTopics=\"/changed\" />\n</form>\n\n<sx:autocompleter  href=\"%{#url}\" formId=\"selectForm\" listenTopics=\"/changed\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring JasperReports Result for CSV Output in Struts XML\nDESCRIPTION: This snippet demonstrates how to configure a Struts result to use JasperReports for generating a CSV report. It specifies the report location, data source, and output format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/jasperreports/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"jasper\">\n    <param name=\"location\">foo.jasper</param>\n    <param name=\"dataSource\">mySource</param>\n    <param name=\"format\">CSV</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Attributes with InputTransferSelect in JSP\nDESCRIPTION: Demonstrates how to add dynamic attributes to the input control generated by the inputtransferselect tag using the input- prefix.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/inputtransferselect-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:inputtransferselect ... input-control-id=\"id2\"/>\n```\n\n----------------------------------------\n\nTITLE: Maven Bundle Plugin Configuration for OSGi Bundles\nDESCRIPTION: Maven configuration example showing how to use the Maven Bundle Plugin to create OSGi bundles. Includes essential OSGi manifest settings like Struts2 enablement, package exports/imports, and Spring context configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.felix</groupId>\n            <artifactId>maven-bundle-plugin</artifactId>\n            <extensions>true</extensions>\n            <version>2.0.0</version>\n            <configuration>\n                <instructions>\n                    <manifestLocation>META-INF</manifestLocation>\n                    <Struts2-Enabled>true</Struts2-Enabled>\n                    <Export-Package>org.apache.struts2.osgi.demo</Export-Package>\n                    <Import-Package>*,com.opensymphony.xwork2</Import-Package>\n                    <Spring-Context>*;create-asynchronously:=false</Spring-Context>\n                </instructions>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: OGNL Expression Message Example\nDESCRIPTION: Example of a sophisticated validation message using OGNL expressions and getText() function.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<message>${getText(\"validation.failednotice\")} ! ${getText(\"reason\")}: ${getText(\"validation.inputrequired\")}</message>\n```\n\n----------------------------------------\n\nTITLE: Iterator with Bean and Status Attribute (JSP)\nDESCRIPTION: This example uses a Bean tag with the iterator, demonstrating how to retrieve objects from ActionContext and use the status attribute for alternating row colors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:bean name=\"org.apache.struts2.example.IteratorExample\" var=\"it\">\n  <s:param name=\"day\" value=\"'foo'\"/>\n  <s:param name=\"day\" value=\"'bar'\"/>\n</s:bean>\n\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"1\">\n<tr>\n  <th>Days of the week</th>\n</tr>\n\n<s:iterator value=\"#it.days\" status=\"rowstatus\">\n  <tr>\n    <s:if test=\"#rowstatus.odd == true\">\n      <td style=\"background: grey\"><s:property/></td>\n    </s:if>\n    <s:else>\n      <td><s:property/></td>\n    </s:else>\n  </tr>\n</s:iterator>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Cache Mode via XML\nDESCRIPTION: Configures both OGNL expression and BeanInfo caches to a specific size (1250) using standard cache mode through struts.xml. This provides the same functionality as the properties file but in XML format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set expression and BeanInfo caches to size 1250 with standard cache mode -->\n<constant name=\"struts.ognl.enableExpressionCache\" value=\"true\"/>\n<constant name=\"struts.ognl.expressionCacheMaxSize\" value=\"1250\"/>\n<constant name=\"struts.ognl.expressionCacheLRUMode\" value=\"false\"/>\n<constant name=\"struts.ognl.beanInfoCacheMaxSize\" value=\"1250\"/>\n<constant name=\"struts.ognl.beanInfoCacheLRUMode\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Registration Link to Homepage\nDESCRIPTION: HTML link added to index.jsp that directs users to the registration form page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/processing-forms.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"register.jsp\">Please register</a> for our prize drawing.</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Plugin Output in JSP\nDESCRIPTION: Shows how to iterate over the plugins in a JSP and display the output of each plugin's saySomething() method using Struts 2 tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/extending-an-application-with-custom-plugins.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator id=\"plugin\" value=\"plugins\">\n  <s:property value=\"#plugin.saySomething()\"/>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Defining Format Patterns in Properties File\nDESCRIPTION: Basic format patterns for time, numbers, percentages and currency in the default properties file using MessageFormat syntax.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nformat.time = {0,time}\nformat.number = {0,number,#0.0##}\nformat.percent = {0,number,##0.00'%'}\nformat.money = {0,number,\\u00A4##0.00}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters in FreeMarker\nDESCRIPTION: Examples showing how to access request parameters using FreeMarker syntax and Struts property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_5\n\nLANGUAGE: ftl\nCODE:\n```\n<#if Parameters.myParameter?exists>\n     ${Parameters.myParameter}\n</#if>\n```\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.property value=\"%{#parameters.myParameter}\" />\n```\n\n----------------------------------------\n\nTITLE: Extended URL Pattern Mapping with Static Content\nDESCRIPTION: Configuration example showing how to handle both action requests and static content with multiple filter mappings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<web-app ...>\n\n    <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>*.action</url-pattern>\n    </filter-mapping>\n\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/static/*</url-pattern>\n    </filter-mapping>\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Velocity URL Variable Example in Struts\nDESCRIPTION: Example showing how to create a URL variable in a Velocity template using the #surl directive and then reference it in an HTML anchor tag using the ${url} syntax.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/velocity.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n#surl \"id=url\" \"value=http://www.yahoo.com\"\nClick <a href=\"${url}\">here</a>!\n```\n\n----------------------------------------\n\nTITLE: Struts 2 Action Configuration\nDESCRIPTION: XML configuration mapping hello.action to HelloWorldAction class in struts.xml\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n<action name=\"hello\" class=\"org.apache.struts.helloworld.action.HelloWorldAction\" method=\"execute\">\n    <result name=\"success\">/HelloWorld.jsp</result>\n</action>\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Struts 2 URL and Link in HTML\nDESCRIPTION: Shows how to create a URL and link to a Struts 2 action using Struts 2 tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<s:url action=\"registerInput\" var=\"registerInputLink\" />\n<p><s:a href=\"%{registerInputLink}\">Please register</s:a> for our prize drawing.</p>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tag Syntax in Apache Struts JSP\nDESCRIPTION: This snippet shows how to use the Tag Syntax in Apache Struts JSP. It includes an iterator and a textfield tag with complex expressions for label and name attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/alt-syntax.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"cart.items\">\n   ...\n   <s:textfield label=\"'Cart item No.' + #rowstatus.index + ' note'\" \n                 name=\"'cart.items[' + #rowstatus.index + '].note'\" \n                 value=\"note\" />\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Struts 2 Tag Developers Guide Page\nDESCRIPTION: YAML front matter configuration that sets up a page using the default layout template with a title of 'Tag Developers Guide'. This is commonly used in static site generators to define page metadata.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tabbedpanel-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: Limited Count Iterator Generation in JSP\nDESCRIPTION: Shows how to generate an iterator with a limited number of entries using the count attribute to restrict output to first 3 items.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/generator-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:generator val=\"%{'aaa,bbb,ccc,ddd,eee'}\" count=\"3\">\\n <s:iterator>\\n     <s:property /><br/>\\n </s:iterator>\\n</s:generator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings for Test Builds\nDESCRIPTION: XML configuration for Maven settings.xml to enable access to Apache staging repositories for test builds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/builds.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n    ...\n    <profiles>\n        <profile>\n            <id>local</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <repositories>\n                <repository>\n                    <id>apache-pre-release</id>\n                    <url>https://repository.apache.org/content/repositories/staging/</url>\n                    <layout>default</layout>\n                </repository>\n            </repositories>\n        </profile>\n    </profiles>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Initializing OgnlExpressionCompiler and OgnlContext Pool in Java\nDESCRIPTION: Shows how to set up the HiveMindExpressionCompiler and configure an OgnlContext pool using Apache Commons Pool. This setup is important for efficient OGNL expression evaluation in frameworks like Tapestry.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-expression-compilation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOgnlRuntime.setCompiler(new HiveMindExpressionCompiler(_classFactory));\n\n_contextPool = new GenericObjectPool(new PoolableOgnlContextFactory(_ognlResolver, _typeConverter));\n\n_contextPool.setMaxActive(-1);\n_contextPool.setMaxIdle(-1);\n_contextPool.setMinEvictableIdleTimeMillis(POOL_MIN_IDLE_TIME);\n_contextPool.setTimeBetweenEvictionRunsMillis(POOL_SLEEP_TIME);\n```\n\n----------------------------------------\n\nTITLE: Creating Struts Form with Field Validation in JSP\nDESCRIPTION: JSP code that creates a form with validated fields for user information including name, age, and birthday. Uses Struts form tags and includes error display functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-visitor-field-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<s:fielderror cssClass=\"alert alert-error\"/>\n\n<s:form method=\"POST\" action=\"submitVisitorValidatorsExamples\" namespace=\"/validation\">\n    <s:textfield name=\"user.name\" label=\"User Name\"/>\n    <s:textfield name=\"user.age\" label=\"User Age\"/>\n    <s:textfield name=\"user.birthday\" label=\"Birthday\"/>\n    <s:submit label=\"Submit\" cssClass=\"btn btn-primary\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Field Errors with fielderror Tag in JSP\nDESCRIPTION: Example showing how to display field errors only for specific fields ('field1' and 'field2') by using nested param tags within the fielderror tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/fielderror-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:fielderror>\n     <s:param>field1</s:param>\n     <s:param>field2</s:param>\n</s:fielderror>\n<s:form .... >\n   ....\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Properties in struts.properties\nDESCRIPTION: Sets up the Velocity configuration file path in the struts.properties file, which should be located in the WEB-INF/classes directory of your web application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/weblogic.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nstruts.velocity.configfile = struts-velocity.properties\n```\n\n----------------------------------------\n\nTITLE: Basic Velocity Template Example for Struts\nDESCRIPTION: A simple Velocity template that displays a greeting using a property from the action class. The ${name} variable references a property from the associated Action class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/velocity.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title>Hello</title>\n</head>\n    <body>\n    Hello, ${name}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Panels in Markdown for Struts Website\nDESCRIPTION: Examples showing how to create different alert panels including info, success, warning, and danger using Bootstrap alert classes in Markdown.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/updating-website.md#2025-04-08_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nInfo panel\n{:.alert alert-info}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSuccess panel\n{:.alert alert-success}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nWarning panel\n{:.alert alert-warning}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nDanger panel\n{:.alert alert-danger}\n```\n\n----------------------------------------\n\nTITLE: Using getText Method in Property Tag for Internationalization\nDESCRIPTION: Shows how to call getText() method within a property tag to retrieve internationalized text from the resource bundle.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<s:property value=\"getText('some.key')\" />\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 Property Tag to Display Object's toString Result\nDESCRIPTION: This HTML snippet shows how to use the Struts 2 property tag to display an object. It will automatically call the object's toString method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<p><s:property value=\"messageStore\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 Text Tag in HTML\nDESCRIPTION: Demonstrates how to use the Struts 2 text tag to display values from a properties file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h3><s:text name=\"thankyou\" /></h3>\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag with JSP (With Parameters)\nDESCRIPTION: Example of using the Struts component tag in JSP with additional parameters that can be accessed within the template.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/component-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:component template=\"/my/custom/component.jsp\">\n    <s:param name=\"key1\" value=\"value1\"/>\n    <s:param name=\"key2\" value=\"value2\"/>\n</s:component>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Partial List (JSP)\nDESCRIPTION: This snippet demonstrates how to iterate over a partial list using the begin and end attributes of the iterator tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_7\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"{1,2,3,4,5}\" begin=\"2\" end=\"4\" >\n   <!-- current iteration value (2,3,4) -->\n   <s:property value=\"top\" />\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Struts 2 Form Tags in HTML\nDESCRIPTION: This snippet demonstrates how to create a form using Struts 2 form tags. It includes various input fields such as text fields, select dropdowns, radio buttons, and checkboxes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/exclude-parameters.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<s:form action=\"save\" method=\"post\">\n    <s:textfield key=\"personBean.firstName\" /> \n    <s:textfield key=\"personBean.lastName\" /> \n    <s:textfield key=\"personBean.email\" />\n    <s:textfield key=\"personBean.phoneNumber\" />\n    <s:select key=\"personBean.sport\" list=\"sports\" />\n    <s:radio key=\"personBean.gender\" list=\"genders\" />\n    <s:select key=\"personBean.residency\" list=\"states\" listKey=\"stateAbbr\" listValue=\"stateName\" />\n    <s:checkbox key=\"personBean.over21\" />\n    <s:checkboxlist key=\"personBean.carModels\" list=\"carModelsAvailable\" />\n    <s:submit key=\"submit\" />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Alt Syntax in Apache Struts JSP\nDESCRIPTION: This snippet demonstrates the Alt Syntax in Apache Struts JSP. It shows the same functionality as the Tag Syntax example, but with cleaner and more intuitive syntax using %{} for expressions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/alt-syntax.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"cart.items\">\n   ...\n   <s:textfield label=\"Cart item No. %{#rowstatus.index} note\" \n                 name=\"cart.items[%{#rowstatus.index}].note\" \n                 value=\"%{note}\" />\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Forcing Valid Options in Struts Autocompleter\nDESCRIPTION: Demonstrates how to force the autocompleter to only accept values from its option list. When forceValidOption is true, invalid entries will be restored to the last valid selection when focus is lost.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_48\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter list=\"{'apple','banana','grape','pear'}\" forceValidOption=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Converter Iterator Generation\nDESCRIPTION: Shows how to use a custom converter with the generator tag to transform iterator values during generation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/generator-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:generator val=\"%{'aaa,bbb,ccc,ddd,eee'}\" converter=\"%{myConverter}\">\\n <s:iterator>\\n     <s:property /><br/>\\n </s:iterator>\\n</s:generator>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class GeneratorTagAction extends ActionSupport {\\n\\n  ....\\n\\n  public Converter getMyConverter() {\\n     return new Converter() {\\n         public Object convert(String value) throws Exception {\\n             return \"converter-\"+value;\\n         }\\n     };\\n  }\\n\\n  ...\\n\\n}\n```\n\n----------------------------------------\n\nTITLE: SiteGraph Plugin Description\nDESCRIPTION: JavaDoc excerpt explaining the SiteGraph plugin purpose and its GraphViz dependency requirement.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitegraph/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n * <p>\n * SiteGraph is a tool that renders out GraphViz-generated images depicting your\n * Struts-powered web application's flow. SiteGraph requires GraphViz be installed\n * and that the \"dot\" executable be in your command path. You can find GraphViz\n * at http://www.graphviz.org.\n * </p>\n```\n\n----------------------------------------\n\nTITLE: Bean-Level Type Conversion Properties\nDESCRIPTION: Configuration for bean-specific custom converter in Measurement-conversion.properties file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# syntax: <propertyName>=<converterClassName>\namount=com.acme.converters.MyCustomBigDecimalConverter\n```\n\n----------------------------------------\n\nTITLE: Bean-Level Type Conversion Properties\nDESCRIPTION: Configuration for bean-specific custom converter in Measurement-conversion.properties file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# syntax: <propertyName>=<converterClassName>\namount=com.acme.converters.MyCustomBigDecimalConverter\n```\n\n----------------------------------------\n\nTITLE: Setting FreeMarker Incompatible Improvements in properties file\nDESCRIPTION: Properties file configuration for enabling new FreeMarker features. This setting controls the version of incompatible improvements to enable.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nincompatible_improvements=2.3.22\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Struts 2 Parameters\nDESCRIPTION: Traditional way of configuring Struts 2 parameters using struts.xml file. This example shows how to set the devMode parameter to true in XML configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/annotations.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.devMode\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This snippet demonstrates how to create a table of contents in Markdown using special syntax. It includes a header that will be excluded from the ToC.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-reference.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Tag Reference \n{:.no_toc}\n\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Result with Explicit Parameter\nDESCRIPTION: Shows the equivalent configuration of a FreeMarker result using the explicit parameter approach.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-types.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<result type=\"freemarker\">\n  <param name=\"location\">foo.vm</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Adding Field Error in Struts 2\nDESCRIPTION: Example of how to add a validation error message for a specific form field using the addFieldError method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\naddFieldError(\"personBean.firstName\", \"First name is required.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplicationAware Interface in Java for Struts Actions\nDESCRIPTION: Example of how to implement the ApplicationAware interface in a Struts action class to access the application scope. The withApplication method receives the application map, which can then be used within the action to store or retrieve values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/accessing-application-session-request-objects.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyAction implements ApplicationAware {\n \n    private Map<String, Object> application;\n\n    public void withApplication(Map<String, Object> application) {\n        this.application = application;\n    }\n    \n    public String execute() {\n        application.set(\"myKey\", \"myValue\");\n        ...\n        return \"success\";\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Loading div content with delay\nDESCRIPTION: This example demonstrates how to load a div's content after a specified delay. The delay parameter sets the time in milliseconds to wait before making the request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_20\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:div href=\"%{#url}\" delay=\"2000\">\n  Initial Content\n</sx:div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 to Reduce Logging Level for Struts Classes\nDESCRIPTION: This XML configuration for Log4j2 demonstrates how to reduce the logging level for Struts framework classes to WARN while maintaining a higher level (INFO) for application classes, reducing log file pollution.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n    <Appenders>\n        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n        </Console>\n    </Appenders>\n    <Loggers>\n        <Logger name=\"com.opensymphony.xwork2\" level=\"warn\"/>\n        <Logger name=\"org.apache.struts2\" level=\"warn\"/>\n        <Root level=\"info\">\n            <AppenderRef ref=\"STDOUT\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing MergeIteratorTagAction in Java for Struts merge tag\nDESCRIPTION: This Java class demonstrates how to prepare data for a merge tag by creating three ArrayList objects with different content. The action populates three lists (myList1, myList2, myList3) with different values that will be merged in the view.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/merge-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MergeIteratorTagAction extends ActionSupport {\n\n    private List myList1;\n    private List myList2;\n    private List myList3;\n    \n    public List getMyList1() {\n        return myList1;\n    }\n    \n    public List getMyList2() {\n        return myList2;\n    }\n    \n    public List getMyList3() {\n        return myList3;\n    }\n    \n    \n    public String execute() throws Exception {\n        myList1 = new ArrayList();\n        myList1.add(\"1\");\n        myList1.add(\"2\");\n        myList1.add(\"3\");\n    \n        myList2 = new ArrayList();\n        myList2.add(\"a\");\n        myList2.add(\"b\");\n        myList2.add(\"c\");\n    \n        myList3 = new ArrayList();\n        myList3.add(\"A\");\n        myList3.add(\"B\");\n        myList3.add(\"C\");\n    \n        return \"done\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OGNL Expression Validation in Struts 2 XML\nDESCRIPTION: XML configuration for implementing field expression validation using OGNL. This example ensures that the user selects at least one car model by checking if the array of selected models has a length greater than zero.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-validation-using-xml.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<validator type=\"fieldexpression\">\n    <param name=\"fieldname\">personBean.carModels</param>\n    <param name=\"expression\"><![CDATA[personBean.carModels.length > 0]]></param>\n    <message>You must select at least one car model.</message>\n</validator>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with JSP Tags in Apache Struts\nDESCRIPTION: Shows how to create a form using Struts tags in a JSP file. This example includes a text field and a submit button.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form action=\"updatePerson\">\n    <s:textfield label=\"First name\" name=\"firstName\"/>\n    <s:submit value=\"Update\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Setting date picker value from stack\nDESCRIPTION: This example demonstrates how to set the value of a date picker from a value on the value stack. The value can be a Date, Calendar, or a properly formatted string.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_28\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:datetimepicker value=\"date\" name=\"picker\" />\n```\n\n----------------------------------------\n\nTITLE: Using the 'append' Tag in JSP with Struts\nDESCRIPTION: This JSP snippet demonstrates how to use the 'append' tag in Struts to combine multiple lists into a single iterator. It then iterates over the appended iterator to display all elements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/append-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:append var=\"myAppendIterator\">\n      <s:param value=\"%{myList1}\" />\n      <s:param value=\"%{myList2}\" />\n      <s:param value=\"%{myList3}\" />\n </s:append>\n <s:iterator value=\"%{#myAppendIterator}\">\n      <s:property />\n </s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Using OGNL Projection in Struts Iterator\nDESCRIPTION: Shows how to use OGNL projection to extract a specific property from a collection of beans in a Struts iterator tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_7\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"persons.{firstName}\">\n  <s:property/>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Iterator with Action and Parameter Passing (JSP)\nDESCRIPTION: This example iterates over an action collection, passing each iterator value to another action using the [0] operator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:action name=\"entries\" var=\"entries\"/>\n<s:iterator value=\"#entries.entries\" >\n    <s:property value=\"name\" />\n    <s:property />\n    <s:push value=\"...\">\n        <s:action name=\"edit\" var=\"edit\" >\n            <s:param name=\"entry\" value=\"[0]\" />\n        </s:action>\n    </s:push>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Handling Autocompleter Form Submission in Struts\nDESCRIPTION: Shows how to handle form submission with an autocompleter. When submitted, the autocompleter will provide both the selected value and its associated key.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_52\n\nLANGUAGE: java\nCODE:\n```\npublic MyAction extends ActionSupport {\n    private String optionsKey;\n    private String options;\n\n    ...    \n}\n```\n\n----------------------------------------\n\nTITLE: AJAX-Loaded Dynamic Tree in Struts\nDESCRIPTION: Implementation of a dynamic tree that loads nodes via AJAX requests, including JSON response format and node reloading functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:url id=\"nodesUrl\" namespace=\"/nodecorate\" action=\"getNodes\" />\n <div style=\"float:left; margin-right: 50px;\">\n     <sx:tree id=\"tree\" href=\"%{#nodesUrl}\" />\n </div>\n \n On this example the url specified on the \"href\" attibute will be called to load\n the elements on the root. The response is expected to be a JSON array of objects like:\n [\n      {\n           label: \"Node 1\",\n           hasChildren: false,\n           id: \"Node1\"\n      },\n      {\n           label: \"Node 2\",\n           hasChildren: true,\n           id: \"Node2\"\n      },\n ]\n \n \"label\" is the text that will be displayed for the node. \"hasChildren\" marks the node has\n having children or not (if true, a plus icon will be assigned to the node so it can be\n expanded). The \"id\" attribute will be used to load the children of the node, when the node\n is expanded. When a node is expanded a request will be made to the url in the \"href\" attribute\n and the node's \"id\" will be passed in the parameter \"nodeId\".\n \n The children collection for a node will be loaded only once, to reload the children of a \n node, use the \"reload()\" function of the treenode widget. To reload the children nodes of \"Node1\"\n from the example above use the following javascript:\n \n dojo.widget.byId(\"Node1\").reload();\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Scope Attributes in FreeMarker\nDESCRIPTION: Examples showing how to access request scope attributes using FreeMarker syntax and Struts property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_4\n\nLANGUAGE: ftl\nCODE:\n```\n<#if Request.myRequestAttribute?exists>\n      ${Request.myRequestAttribute}\n</#if>\n```\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.property value=\"%{#request.myRequestAttribute}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Encoding in JSP Files\nDESCRIPTION: This JSP directive shows how to properly set UTF-8 encoding in JSP files, which is a recommended practice for all applications built with Apache Struts 2 to ensure proper character encoding.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ page contentType=\"text/html; charset=UTF-8\" %>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Tag Developers Guide Page\nDESCRIPTION: Sets the layout to 'default' and defines the title for the Tag Developers Guide page in the Apache Struts documentation site.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: TabbedPanel Component JavaDoc Description\nDESCRIPTION: Documentation explaining the TabbedPanel widget functionality, which is an AJAX component where tabs can display local or remote content. Includes information about the useSelectedTabCookie feature that saves selected tab state in a cookie.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tabbedpanel-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p> The tabbedpanel widget is primarily an AJAX component, where each tab can either be local content or remote\n content (refreshed each time the user selects that tab).</p>\n If the useSelectedTabCookie attribute is set to true, the id of the selected tab is saved in a cookie on activation.\n When coming back to this view, the cookie is read and the tab will be activated again, unless an actual value for the\n selectedTab attribute is specified.</p>\n If you want to use the cookie feature, please be sure that you provide a unique id for your tabbedpanel component,\n since this will also be the identifying name component of the stored cookie.</p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Provider via DispatcherListener in Java\nDESCRIPTION: This code snippet demonstrates how to add a custom ConfigurationProvider to the ConfigurationManager using a DispatcherListener. It shows the static initialization block where the listener is added to the Dispatcher.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/configuration-provider-and-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n static {\n   Dispatcher.addDispatcherListener(new DispatcherListener() {\n     ....\n     public void dispatcherInitialized(Dispatcher du) {\n         ConfigurationManager confManager = du.getConfigurationManager();\n         confManager.addConfigurationProvider( ... );\n     }\n     ....\n   });\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 Parameters in web.xml\nDESCRIPTION: Alternative way to configure Struts 2 parameters using filter initialization parameters in web.xml. This approach can be used when the struts.xml file is eliminated.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/annotations.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n    <filter-name>struts2</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    <init-param>\n        <param-name>struts.devMode</param-name>\n        <param-value>true</param-value>\n    </init-param>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Performing Struts Master Release (Maven)\nDESCRIPTION: Maven command to perform the release, which includes checking out the tagged version, building and deploying artifacts, and deploying the site.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-master.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:perform\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Parameters Interceptor in Struts XML\nDESCRIPTION: XML configuration showing how to secure the params-interceptor by adding excluded parameters to prevent ClassLoader manipulation via request parameters. This was a security mitigation for a zero-day exploit.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2014.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-ref name=\"params\">\n   <param name=\"excludeParams\">(.*\\.|^|.*|\\[('|\"))(c|C)lass(\\.|('|\")])\\[).*,^dojo\\..*,^struts\\..*,^session\\..*,^request\\..*,^application\\..*,^servlet(Request|Response)\\..*,^parameters\\..*,^action:.*,^method:.*</param>\n</interceptor-ref>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabbed Panel Template CSS Path in Struts\nDESCRIPTION: Shows how to customize the CSS template path for a Dojo widget template. This allows for complete customization of the tabbed panel's appearance.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_45\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel templateCssPath=\"%{#cssUrl}\" id=\"tabContainer\">\n   <sx:div id=\"tab1\" label=\"Tab 1\">\n       Local Tab 1\n   </sx:div>   \n   <sx:div id=\"tab2\" label=\"Tab 2\">\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Advanced Dojo Head Tag Configuration with Multiple Locales in XML\nDESCRIPTION: Shows how to configure the sx:head tag with debug mode enabled and multiple locales specified. This configuration helps with development and internationalization support.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-head-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<%@ taglib prefix=\"sx\" uri=\"/struts-dojo-tags\" %>\n<head>\n  <title>My page</title>\n  <sx:head debug=\"true\" extraLocales=\"en-us,nl-nl,de-de\"/>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining Velocity Macros for Apache Struts\nDESCRIPTION: This snippet defines four Velocity macros used in Apache Struts: bean creation, servlet inclusion, URL generation, and property access. These macros simplify common operations in Struts templates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/struts-default-vm.md#2025-04-08_snippet_0\n\nLANGUAGE: Velocity\nCODE:\n```\n#macro(bean $bean_name $name)\n   #set ($name = $action.bean($bean_name))\n#end\n\n#macro(includeservlet $name)\n  $action.include($name,$req,$res)\n#end\n\n#macro(url $name)\n   #set ($name = $action.bean(\"org.apache.struts.util.URLBean\"))\n   $name.setRequest($req)\n   $name.setResponse($res)\n#end\n\n#macro(property $object $property)\n$!{ognl.findValue($property, $object)}\n#end\n```\n\n----------------------------------------\n\nTITLE: Basic Struts Checkboxlist Implementation in JSP\nDESCRIPTION: Demonstrates basic usage of the Struts checkboxlist tag to create multiple checkboxes from a list. The 'name' attribute specifies the form field name while 'list' defines the data source that populates the checkboxes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/checkboxlist-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:checkboxlist name=\"foo\" list=\"bar\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Bind Tag with Image Loading Indicator in JSP\nDESCRIPTION: Example of using the Struts Dojo Bind tag with a loading image to work around an IE6/IE7 bug. This shows how to set up an Ajax request that triggers when a button is clicked, targeting a parent div while displaying a loading animation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<img id=\"loadingImage\" src=\"images/loadingAnimation.gif\" style=\"display:none\"/>\n<s:div id=\"parentDiv\">\n    <s:form action=\"actionName\">\n        <s:submit id=\"btn\" />\n        <sx:bind sources=\"btn\" events=\"onclick\" targets=\"parentDiv\" showLoadingText=\"false\" indicator=\"loadingImage\"/>\n    </s:form>\n</s:div>\n```\n\n----------------------------------------\n\nTITLE: Sorting List and Accessing Sorted Elements in JSP and Java\nDESCRIPTION: This example shows how to use the Struts 2 sort tag to sort a list and store it in a page context attribute. The sorted list is then accessed and iterated over using Java code within a JSP scriptlet.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/sort-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:sort var=\"mySortedList\" comparator=\"myComparator\" source=\"myList\" />\n\n<%\n   Iterator sortedIterator = (Iterator) pageContext.getAttribute(\"mySortedList\");\n   for (Iterator i = sortedIterator; i.hasNext(); ) {\n     // do something with each of the sorted elements\n   }\n%>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Chains in Struts XML\nDESCRIPTION: Example configuration showing how to set up action chaining across different namespaces using Struts XML configuration. Demonstrates chaining from createAccount to login action, and then to a dashboard action in a secure namespace.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-chaining.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"public\" extends=\"struts-default\">\n    <!-- Chain creatAccount to login, using the default parameter -->\n    <action name=\"createAccount\" class=\"...\">\n        <result type=\"chain\">login</result>\n    </action>\n\n    <action name=\"login\" class=\"...\">\n        <!-- Chain to another namespace -->\n        <result type=\"chain\">\n            <param name=\"actionName\">dashboard</param>\n            <param name=\"namespace\">/secure</param>\n        </result>\n    </action>\n</package>\n\n<package name=\"secure\" extends=\"struts-default\" namespace=\"/secure\">\n    <action name=\"dashboard\" class=\"...\">\n        <result>dashboard.jsp</result>\n    </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Subset Tag with Start and Count Parameters in JSP\nDESCRIPTION: This example shows how to use the subset tag with both start and count parameters to extract a specific range of items from the collection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/subset-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:subset source=\"myList\" count=\"13\" start=\"3\">\n   <s:iterator>\n     <s:property />\n   </s:iterator>\n</s:subset>\n```\n\n----------------------------------------\n\nTITLE: Resolving Ambiguous Action Methods in Struts 2 Java Classes\nDESCRIPTION: This Java code demonstrates a potential issue with ambiguous action methods in Struts 2 and suggests a solution by renaming the action method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class RealAction extends BaseAction {  \n    @Action(\"save\")\n    public String save() throws Exception {\n        super.save();\n        return SUCCESS;\n    }\n}\n\npublic class BaseAction extends AbstractAction {\n    public String save() throws Exception {\n        save(Double.MAX_VALUE);\n        return SUCCESS;\n    }\n}\n\npublic abstract class AbstractAction extends ActionSupport {\n    protected void save(Double val) {\n        // some logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interaction with Autocompleter in Struts 2\nDESCRIPTION: Shows how to get and set values for an autocompleter using JavaScript. Includes functions to retrieve the selected key, value, and text, as well as methods to set values programmatically.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n <sx:autocompleter  href=\"%{jsonList}\" id=\"auto\"/>\n <script type=\"text/javascript\">\n   function getValues() {\n      var autoCompleter = dojo.widget.byId(\"auto\");\n      \n      //key (in the states example above, \"AL\")\n      var key = autoCompleter.getSelectedKey();\n      alert(key);\n      \n      //value (in the states example above, \"Alabama\")\n      var value = autoCompleter.getSelectedValue();\n      alert(value);\n      \n      //text currently on the textbox (anything the user typed)\n      var text = autoCompleter.getText();\n      alert(text);\n   }\n \n   function setValues() {\n      var autoCompleter = dojo.widget.byId(\"auto\");\n      \n      //key (key will be set to \"AL\" and value to \"Alabama\")\n      autoCompleter.setSelectedKey(\"AL\");\n      \n      //value (key will be set to \"AL\" and value to \"Alabama\")\n      autoCompleter.setAllValues(\"AL\", \"Alabama\");\n   }\n </script>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Default Stack in Struts XML\nDESCRIPTION: XML configuration example showing how to create a secure default interceptor stack by extending the struts-default package and adding excluded parameters to prevent ClassLoader manipulation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2014.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"default\" namespace=\"/\" extends=\"struts-default\">\n    <interceptors>\n        <interceptor-stack name=\"secureDefaultStack\">\n            <interceptor-ref name=\"defaultStack\">\n                <param name=\"params.excludeParams\">(.*\\.|^|.*|\\[('|\"))(c|C)lass(\\.|('|\")])\\[).*,^dojo\\..*,^struts\\..*,^session\\..*,^request\\..*,^application\\..*,^servlet(Request|Response)\\..*,^parameters\\..*,^action:.*,^method:.*</param>\n            </interceptor-ref>\n        </interceptor-stack>\n    </interceptors>\n\n    <default-interceptor-ref name=\"secureDefaultStack\" />\n</package>\n```\n\n----------------------------------------\n\nTITLE: Page Layout Configuration in YAML\nDESCRIPTION: Defines the layout configuration for the datetextfield tag documentation page. It specifies the default layout, page title, and parent reference to the Tag Reference section.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/datetextfield-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: datetextfield tag\nparent:\n  title: Tag Reference\n  url: tag-reference.html\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Normal Field Size Limit in Struts 2 XML\nDESCRIPTION: XML configuration for setting the maximum size of normal string fields in multipart requests in Struts 2.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.multipart.maxStringLength\" value=\"10000\"/>\n\n    <action name=\"doUpload\" class=\"com.example.UploadAction\">\n          ...\n    </action>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Autocompleter in Struts\nDESCRIPTION: Demonstrates how to create a form that includes an autocompleter. When submitted, the form will include both the selected value and its key.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_53\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form id=\"form\">\n  <sx:autocompleter name=\"options\" label=\"Options\" />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Logging OGNL Expression Warning in Java\nDESCRIPTION: This code snippet demonstrates a warning log message that may appear when testing applications after upgrading to Struts 2 version 6.0.0. It indicates that an OGNL expression is not allowed by a specific pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2022.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nExpression [so-and-so] isn't allowed by pattern [so-and-so]! See Accepted / Excluded patterns at https://struts.apache.org/security/\n```\n\n----------------------------------------\n\nTITLE: Basic Struts Form with Textfield Using Explicit Value\nDESCRIPTION: This example shows how to create a basic Struts form with a textfield, explicitly setting the value attribute by referencing the postalCode property.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/form-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.form action=\"updateAddress\">\n    <@s.textfield label=\"Postal Code\" name=\"postalCode\" value=\"%{postalCode}\"/>\n    ...\n</@s.form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Session Interceptor in Struts XML\nDESCRIPTION: Examples showing how to configure the Token Session Interceptor in Struts action mappings. Demonstrates both basic usage and method exclusion configuration using the excludeMethods parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/token-session-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"tokenSession\"/>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n\n <!-- In this case, myMethod of the action class will not\n        get checked for invalidity of token -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"tokenSession\">\n         <param name=\"excludeMethods\">myMethod</param>\n     </interceptor-ref>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Showing All Matching Options in Autocompleter in Struts\nDESCRIPTION: Shows how to configure an autocompleter to display all matching options. Setting resultsLimit to -1 removes the limit on displayed options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_66\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:autocompleter href=\"%{#url}\" resultsLimit=\"-1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring CeWolf Servlet in web.xml for WebWork Integration\nDESCRIPTION: XML configuration for adding the CeWolf servlet to the web.xml file. This configuration maps the CewolfServlet to the /cewolf/* URL pattern, enabling chart rendering in the WebWork application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/cewolf-charts-using-velocity-templates.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>CewolfServlet</servlet-name>\n    <servlet-class>de.laures.cewolf.CewolfRenderer</servlet-class>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>CewolfServlet</servlet-name>\n    <url-pattern>/cewolf/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using After Request Notification and Highlighting with Bind Tag in Struts 2\nDESCRIPTION: Shows how to use afterNotifyTopics with the sx:bind tag to execute custom JavaScript after an AJAX request completes. It also demonstrates the highlighting feature that visually indicates the updated content.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-bind-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/after\", function(data, request, widget){\n     alert('inside a topic event. after request');\n     //data : text returned from request(the html)\n     //request: XMLHttpRequest object\n     //widget: widget that published the topic\n });\n </script>        \n \n <input type=\"button\" id=\"button\">\n <sx:bind id=\"ex1\" href=\"%{#ajaxTest}\" highlightColor=\"red\" afterNotifyTopics=\"/after\" sources=\"button\" events=\"onclick\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Static and Dynamic Trees with Struts2 TreeNode Tag in XML\nDESCRIPTION: This snippet demonstrates how to create both static and dynamic trees using the Struts2 TreeNode tag. It shows the structure for manually creating a tree with hard-coded data, as well as dynamically generating a tree using data from a backing action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-treenode-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<-- Creating tree statically using hard-coded data. -->\n <s:tree id=\"...\" label=\"...\">\n    <s:treenode id=\"...\" label=\"...\" />\n    <s:treenode id=\"...\" label=\"...\">\n        <s:treenode id=\"...\" label=\"...\" />\n        <s:treenode id=\"...\" label=\"...\" />\n    </s:treenode>\n    <s:treenode id=\"...\" label=\"...\" />\n </s:tree>\n\n <-- Creating tree dynamically using data from backing action. -->\n <s:tree\n          id=\"...\"\n          rootNode=\"...\"\n          nodeIdProperty=\"...\"\n          nodeTitleProperty=\"...\"\n          childCollectionProperty=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Ajax Div with Action Tag in Struts\nDESCRIPTION: Using the action tag with executeResult attribute to load more complex initial data into an ajax div before remote content is loaded.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<saf:div theme=\"ajax\" id=\"weather\" href=\"http://www.weather.com/weather?zip=97239\">\n    <ww:action id=\"weather\" name=\"weatherBean\" executeResult=\"true\">\n        <ww:param name=\"zip\" value=\"97239\"/>\n    </ww:action>\n</saf:div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 XML for Bookmark Actions\nDESCRIPTION: This XML configuration defines the Struts 2 actions for adding and listing bookmarks in the edit and view packages respectively. It specifies the action classes, result types, and JSP views.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"edit\" extends=\"struts-portlet-default\" namespace=\"/edit\">\n\n   <action name=\"index\" class=\"com.mycompany.ListBookmarksAction\">\n      <result>/WEB-INF/jsp/edit/index.jsp</result>\n   </action>\n\n   <action name=\"addBookmark\" class=\"com.mycompany.AddBookmarkAction\">\n      <result type=\"redirectAction\">\n         <param name=\"actionName\">index</param>\n      </result>\n   </action>\n\n</package>\n\n<package name=\"view\" extends=\"struts-portlet-default\" namespace=\"/view\">\n   <action name=\"index\" class=\"com.mycompany.ListBookmarksAction\">\n      <result>/WEB-INF/jsp/view/index.jsp</result>\n   </action>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Linking Two Autocompleters with Topic Publishing in Struts 2\nDESCRIPTION: Demonstrates how to link two autocompleter components where one autocompleter listens to changes from another. Uses valueNotifyTopics to publish changes and listenTopics to receive notifications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n <form id=\"selectForm\">\n      <sx:autocompleter  name=\"select\" list=\"{'fruits','colors'}\"  valueNotifyTopics=\"/changed\" />\n </form>  \n <sx:autocompleter  href=\"%{jsonList}\" formId=\"selectForm\" listenTopics=\"/changed\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Project Using Maven Archetype\nDESCRIPTION: Command to generate a Struts 2 project using Maven's archetype:generate goal with a filter for Apache Struts archetypes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -Dfilter=org.apache:struts\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Errors Using fieldName Attribute in JSP\nDESCRIPTION: Example demonstrating how to display field errors for specific fields by using the fieldName attribute directly on multiple fielderror tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/fielderror-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:fielderror fieldName=\"field1\" />\n<s:fielderror fieldName=\"field1\" />\n```\n\n----------------------------------------\n\nTITLE: WebLogic 6.1 Web.xml Filter Configuration\nDESCRIPTION: Configuration table showing the class name replacements needed in web.xml to make Struts compatible with WebLogic 6.1. Replaces standard filter classes with WebLogic 6.1 compatible versions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/weblogic-6-1.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Original class names to be replaced in web.xml -->\n<filter-class>RequestLifecycleFilter</filter-class>\n<listener-class>SessionLifecycleListener</listener-class>\n<filter-class>FilterDispatcher</filter-class>\n\n<!-- New replacement class names for WebLogic 6.1 compatibility -->\n<filter-class>RequestLifecycleFilterCompatWeblogic61</filter-class>\n<listener-class>SessionLifecycleListenerCompatWeblogic61</listener-class>\n<filter-class>FilterDispatcherCompatWeblogic61</filter-class>\n```\n\n----------------------------------------\n\nTITLE: PrefixBasedActionMapper Configuration in Struts XML\nDESCRIPTION: XML configuration for setting up a PrefixBasedActionMapper. This mapper delegates to different ActionMappers based on URL prefixes, allowing different URL patterns to be handled by different mappers.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.mapper.class\" value=\"prefix\"/>\n\n<constant name=\"struts.mapper.prefixMapping\" value=\"\n  /communities:pseudoRestful,\n  /communityTags:pseudoRestful,\n  /events:pseudoRestful,\n  /mediaList:pseudoRestful,\n  /users:pseudoRestful,\n  /community:struts,\n  /communityTag:struts,\n  /event:struts,\n  /media:struts,\n  /user:struts,\n  :struts\n\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Form Validation with jQuery in JavaScript\nDESCRIPTION: JavaScript implementation that intercepts form submissions, processes them via AJAX, and handles validation errors. It includes functions for removing and displaying validation errors, providing visual feedback during submission, and processing the JSON response from the server.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n /**\n  * Validates form per AJAX. To be called as onSubmit handler.\n  *\n  * @param event onSubmit event\n  */\nfunction ajaxFormValidation(event) {\n    event.preventDefault();\n    _removeValidationErrors();\n    var _form = $(event.target);\n    var _formData = _form.serialize(true);\n    // prepare visual feedback\n    // you may want to use other elements here\n    var originalButton = _form.find('.btn-primary');\n    // note: jQuery returns an array-like object\n    if (originalButton && originalButton.length && originalButton.length > 0) {\n        originalButton.hide();\n        var feedbackElement = $('<div class=\"ajaxVisualFeedback\"></div>').insertAfter(originalButton);\n        var restoreFunction = function() {\n            originalButton.show();\n            feedbackElement.remove();\n        }\n    }\n    var options = {\n        data: 'struts.enableJSONValidation=true&struts.validateOnly=false&' + _formData,\n        async: true,\n        processData: false,\n        type: 'POST',\n        success: function (response, statusText, xhr) {\n            if (response.location) {\n                // no validation errors\n                // action has been executed and sent a redirect URL wrapped as JSON\n                // cannot use a normal http-redirect (status-code 3xx) as this would be followed by browsers and would not be available here\n                // follow JSON-redirect\n                window.location.href = response.location;\n            } else {\n                if (restoreFunction) {\n                    restoreFunction();\n                }\n                _handleValidationResult(_form, response);\n            }\n        },\n        error: function(xhr, textStatus, errorThrown) {\n            if (restoreFunction) {\n                restoreFunction();\n            }\n            // struts sends status code 400 when validation errors are present\n            if (xhr.status === 400) {\n                _handleValidationResult(_form, JSON.parse(xhr.responseText))\n            } else {\n                // a real error occurred -> show user an error message\n                _handleValidationResult(_form, {errors: ['Network or server error!']})\n            }\n        }\n    }\n    // send request, after delay to make sure everybody notices the visual feedback :)\n    window.setTimeout(function() {\n        var url = _form[0].action;\n        jQuery.ajax(url, options);\n    }, 1000);\n}\n/**\n * Removes validation errors from HTML DOM.\n */\nfunction _removeValidationErrors() {\n    // action errors\n    // you might want to use a custom ID here\n    $('ul.errorMessage li').remove();\n    // field errors\n    $('div.errorMessage').remove();\n}\n/**\n * Incorporates validation errors in HTML DOM.\n *\n * @param form Form containing errors.\n * @param errors Errors from server.\n */\nfunction _handleValidationResult(form, errors) {\n    // action errors\n    if (errors.errors) {\n        // you might want to use a custom ID here\n        var errorContainer = $('ul.errorMessage');\n        $.each(errors.errors, function(index, errorMsg) {\n            var li = $('<li><span></span></li>');\n            li.text(errorMsg); // use text() for security reasons\n            errorContainer.append(li);\n        });\n    }\n    // field errors\n    if (errors.fieldErrors) {\n        $.each(errors.fieldErrors, function(fieldName, errorMsg) {\n            var td = $('td[data-error-for-fieldname=\"' + fieldName + '\"]');\n            if (td) {\n                var div = $('<div class=\"errorMessage\"></div>');\n                div.text(errorMsg); // use text() for security reasons\n                td.append(div);\n            }\n        });\n    }\n}\n// register onSubmit handler\n$(window).bind('load', function() {\n    $('form').bind('submit', ajaxFormValidation);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying ConversionErrorFieldValidator Annotation in Java\nDESCRIPTION: This snippet demonstrates how to apply the ConversionErrorFieldValidator annotation to a method in Java. It includes parameters for the error message, i18n key, and short-circuit behavior.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-error-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@ConversionErrorFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings for Staging Repository\nDESCRIPTION: XML configuration to add a staging repository to Maven's settings.xml file, allowing access to snapshot versions of Struts 2 archetypes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n  <profiles>\n    <profile>\n      <id>staging</id>\n      <repositories>\n        <repository>\n          <id>archetype</id>\n          <url>https://repository.apache.org/content/repositories/snapshots/</url>\n          <releases>\n            <enabled>true</enabled>\n            <checksumPolicy>fail</checksumPolicy>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n            <checksumPolicy>warn</checksumPolicy>\n          </snapshots>\n        </repository>\n      </repositories>\n    </profile>\n  </profiles>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Basic Struts2 Dojo Submit Tag Implementation in XML\nDESCRIPTION: A simple example of the Struts2 Dojo submit tag with a basic configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<sx:submit value=\"%{'Submit'}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring COOP Interceptor in Struts XML\nDESCRIPTION: Example configuration showing how to set up the COOP interceptor within a Struts action. Demonstrates setting exempted paths and COOP mode using interceptor parameters. The configuration enables COOP protection with specific paths exempted from the policy and sets the security mode to 'same-origin'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/coop-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action  name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"defaultStack\">\n        <param name=\"coop.exemptedPaths\">/path1,/path2,/path3</param>\n        <param name=\"coop.mode\">same-origin</param>\n    </interceptor-ref>\n    <result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Struts Form with Integer Field\nDESCRIPTION: JSP form implementation with a text field that accepts integer input\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-validator.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- myJspPage.jsp -->\n<s:form action=\"someAction\" method=\"POST\">\n  ....\n  <s:textfield label=\"My Integer Field\" name=\"myIntegerField\" />\n  ....\n  <s:submit />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring ObjectFactory in Struts Properties\nDESCRIPTION: Sets the Struts object factory to use Spring for object creation and management.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstruts.objectFactory = spring\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag with JSP (Basic Example)\nDESCRIPTION: Basic example of using the Struts component tag in JSP to render a custom component without parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/component-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:component template=\"/my/custom/component.jsp\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Store Interceptor with STORE Mode\nDESCRIPTION: Example of configuring the Message Store interceptor with STORE operation mode in Struts action configuration. Shows how to add the interceptor to an action with specific parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/message-store-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"submitApplication\" ...>\n    <interceptor-ref name=\"store\">\n        <param name=\"operationMode\">STORE</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"defaultStack\" />\n    ....\n</action>\n```\n\n----------------------------------------\n\nTITLE: Evaluating Booleans with a Property Reference\nDESCRIPTION: Creates a select field that gets its 'multiple' attribute value from a property called 'allowMultiple' on the value stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"state.label\" name=\"state\" multiple=\"allowMultiple\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSP Support Servlet\nDESCRIPTION: XML configuration required in web.xml to enable JSP tag support in FreeMarker templates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>JspSupportServlet</servlet-name>\n    <servlet-class>org.apache.struts2.views.JspSupportServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: Creating a JSP Form for a ModelDriven Struts 2 Action\nDESCRIPTION: This JSP example shows how to create a form that submits to a ModelDriven action. Note that the form field names directly match the property names of the model object (not action.property as would be needed without ModelDriven).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/model-driven.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form action=\"modelDrivenResult\" method=\"POST\" namespace=\"/modelDriven\">   \n    <s:textfield label=\"Gangster Name\" name=\"name\" />\n    <s:textfield label=\"Gangster Age\"  name=\"age\" />\n    <s:checkbox  label=\"Gangster Busted Before\" name=\"bustedBefore\" />\n    <s:textarea  cols=\"30\" rows=\"5\" label=\"Gangster Description\" name=\"description\" />           \n    <s:submit />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Creating a JSP Form for a ModelDriven Struts 2 Action\nDESCRIPTION: This JSP example shows how to create a form that submits to a ModelDriven action. Note that the form field names directly match the property names of the model object (not action.property as would be needed without ModelDriven).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/model-driven.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form action=\"modelDrivenResult\" method=\"POST\" namespace=\"/modelDriven\">   \n    <s:textfield label=\"Gangster Name\" name=\"name\" />\n    <s:textfield label=\"Gangster Age\"  name=\"age\" />\n    <s:checkbox  label=\"Gangster Busted Before\" name=\"bustedBefore\" />\n    <s:textarea  cols=\"30\" rows=\"5\" label=\"Gangster Description\" name=\"description\" />           \n    <s:submit />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: JSON Object with Name-Prefixed Field for Autocompleter\nDESCRIPTION: Example JSON object format where a field starts with the value specified in the 'name' attribute. The Autocompleter will use this field as its data source.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"states\" : [\n          [\"Alabama\",\"AL\"],\n          [\"Alaska\",\"AK\"]\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Struts Master Release (Maven)\nDESCRIPTION: Maven command to prepare the release, including updating versions, tagging the repository, and creating release commits. The -DautoVersionSubmodules=true flag ensures all submodules are versioned together.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-master.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:prepare -DautoVersionSubmodules=true\n```\n\n----------------------------------------\n\nTITLE: Web Application Deployment Descriptor Reference\nDESCRIPTION: Reference to the standard Java web application deployment descriptor web.xml that initializes web resources like servlets and taglibs alongside Struts configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/configuration-elements.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nweb.xml\n```\n\n----------------------------------------\n\nTITLE: Validation Configuration with Field Repopulation\nDESCRIPTION: XML validation configuration with repopulateField parameter for handling conversion errors\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-validator.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- MyActionSupport-someAction-validation.xml -->\n<validators>\n  ...\n  <field name=\"myIntegerField\">\n     <field-validator type=\"conversion\">\n        <param name=\"repopulateField\">true</param>\n        <message>Conversion Error (Integer Wanted)</message>\n     </field-validator>\n  </field>\n  ...\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Using afterNotifyTopics and highlight with Struts 2 Dojo Submit in XML\nDESCRIPTION: This example demonstrates the use of afterNotifyTopics and the highlight attribute with the Struts 2 Dojo Submit component. It subscribes to an '/after' topic that is triggered after the AJAX request completes, and sets a highlight color for the target.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<script type=\"text/javascript\">\ndojo.event.topic.subscribe(\"/after\", function(data, request, widget){\n    alert('inside a topic event. after request');\n    //data : text returned from request(the html)\n    //request: XMLHttpRequest object\n    //widget: widget that published the topic\n});\n</script>\n\n<sx:submit afterNotifyTopics=\"/after\" highlightColor=\"red\" href=\"%{#ajaxTest}\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Tiles Listener in web.xml\nDESCRIPTION: XML configuration to register the Struts2 Tiles listener in the web application's web.xml file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<listener>\n  <listener-class>org.apache.struts2.tiles.StrutsTilesListener</listener-class>\n</listener>\n```\n\n----------------------------------------\n\nTITLE: Setting Version in Maven POMs\nDESCRIPTION: Uses the Versions Maven Plugin to set the version number across all POMs to prepare for a release.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-normal-release.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn versions:set -DnewVersion=2.3.16.1-SNAPSHOT -DgenerateBackupPoms=false\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Header Core for XHTML Theme\nDESCRIPTION: The main controlheader-core.ftl template that creates the HTML table structure for form elements, handles label positioning, and displays validation errors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_2\n\nLANGUAGE: freemarker\nCODE:\n```\n<#--\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n-->\n<#--\n\tOnly show message if errors are available.\n\tThis will be done if ActionSupport is used.\n-->\n<#assign hasFieldErrors = parameters.name?? && fieldErrors?? && fieldErrors[parameters.name]??/>\n<#assign labelclass=''>\n<#if parameters.labelCssClass??>\n<#assign labelclass = ' '+parameters.labelCssClass/>\n</#if>\n<#if hasFieldErrors>\n<#list fieldErrors[parameters.name] as error>\n<tr errorFor=\"${parameters.id}\">\n    <td align=\"center\" valign=\"top\" colspan=\"2\">\n        <span class=\"errorMessage\">${error?html}</span>\n    </td>\n</tr>\n</#list>\n</#if>\n<#if parameters.labelposition?? && parameters.labelposition==\"top\">\n<tr>\n    <td colspan=\"2\">\n<#if parameters.label??>\n        <label <#t/>\n<#if parameters.id??>\n            for=\"${parameters.id?html}\" <#t/>\n</#if>\n<#if hasFieldErrors>\n            class=\"errorLabel${labelclass}\"<#t/>\n<#else>\n            class=\"label${labelclass}\"<#t/>\n</#if>\n        >\n<#if parameters.required!false><span class=\"required\">*</span></#if>\n${parameters.label?html}<#t/>\n<#include \"/${parameters.templateDir}/xhtml/tooltip.ftl\" />\n        </label>\n</#if>\n    </td>\n</tr>\n<tr>\n    <td colspan=\"2\">\n<#else>\n<tr>\n<#if parameters.label??>\n    <td class=\"tdLabel\">\n        <label <#t/>\n<#if parameters.id??>\n            for=\"${parameters.id?html}\" <#t/>\n</#if>\n<#if hasFieldErrors>\n            class=\"errorLabel${labelclass}\"<#t/>\n<#else>\n            class=\"label${labelclass}\"<#t/>\n</#if>\n        >\n<#if parameters.required!false><span class=\"required\">*</span></#if>\n${parameters.label?html}<#t/>\n<#include \"/${parameters.templateDir}/xhtml/tooltip.ftl\" />\n        </label>\n    </td>\n</#if>\n    <td\n<#if parameters.label??>\n        class=\"tdInput\"\n</#if>\n<#if parameters.align??>\n        align=\"${parameters.align?html}\"\n</#if>\n>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Struts Form Configuration that Breaks Client Validation\nDESCRIPTION: A JSP example showing an incorrect way to specify the form's action attribute using a URL pattern. While the form will function for submission, client-side validation will not work because Struts cannot determine the exact namespace and action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-validation-example.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form method=\"post\" validate=\"true\" action=\"/validation/quizClient.action\">\n   <s:textfield label=\"Name\" name=\"name\"/>\n   <s:textfield label=\"Age\" name=\"age\"/>\n   <s:textfield label=\"Favorite color\" name=\"answer\"/>\n   <s:submit/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: TreeNode Component Tag Attributes Table\nDESCRIPTION: HTML table defining all available attributes for the TreeNode component tag, including their requirements, defaults, types and descriptions. Covers UI attributes like CSS styling, JavaScript events, and core functionality parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-treenode-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table width=\"100%\">\n<tr>\n<td colspan=\"6\"><h4>Dynamic Attributes Allowed:</h4> false</td>\n</tr>\n<tr>\n<td colspan=\"6\">&nbsp;</td>\n</tr>\n<tr>\n<th align=\"left\" valign=\"top\"><h4>Name</h4></th>\n<th align=\"left\" valign=\"top\"><h4>Required</h4></th>\n<th align=\"left\" valign=\"top\"><h4>Default</h4></th>\n<th align=\"left\" valign=\"top\"><h4>Evaluated</h4></th>\n<th align=\"left\" valign=\"top\"><h4>Type</h4></th>\n<th align=\"left\" valign=\"top\"><h4>Description</h4></th>\n</tr>\n<!-- Table rows with attribute details -->\n```\n\n----------------------------------------\n\nTITLE: Implementing TabbedPanel with Local and Remote Content in Struts 2\nDESCRIPTION: This example demonstrates how to use the Struts 2 TabbedPanel component with both local and remote content. It includes a form in the first tab and loads remote content in the second tab.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tabbedpanel-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<sx:head />\n<sx:tabbedpanel id=\"test\" >\n   <sx:div id=\"one\" label=\"one\" theme=\"ajax\" labelposition=\"top\" >\n       This is the first pane<br/>\n       <s:form>\n           <s:textfield name=\"tt\" label=\"Test Text\"/>  <br/>\n           <s:textfield name=\"tt2\" label=\"Test Text2\"/>\n       </s:form>\n   </sx:div>\n   <sx:div id=\"three\" label=\"remote\" theme=\"ajax\" href=\"/AjaxTest.action\" >\n       This is the remote tab\n   </sx:div>\n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Lists in Struts Select Tag\nDESCRIPTION: Shows how to create a list inline using OGNL syntax and use it in a Struts select tag, also demonstrating how to set a default value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl.md#2025-04-08_snippet_3\n\nLANGUAGE: jsp\nCODE:\n```\n<s:select label=\"label\" name=\"name\" list=\"{'name1','name2','name3'}\" value=\"%{'name2'}\" />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Pass a Literal String Value to a Struts Tag\nDESCRIPTION: This example demonstrates the incorrect way to set a literal string value. Instead of setting the value to 'ca', this will try to find a property named 'getCa'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<s:textfield key=\"state.label\" name=\"state\" value=\"ca\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Class with Multiple Validation Annotations in Java\nDESCRIPTION: This example shows how to create a Java class with various validation annotations, including RequiredFieldValidator, IntRangeFieldValidator, and complex Validations annotation with multiple validators.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation-annotation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleAnnotationAction extends ActionSupport {\n\n    @RequiredFieldValidator(type = ValidatorType.FIELD, message = \"You must enter a value for bar.\")\n    @IntRangeFieldValidator(type = ValidatorType.FIELD, min = \"6\", max = \"10\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")\n    @StrutsParameter\n    public void setBar(int bar) {\n        this.bar = bar;\n    }\n\n    public int getBar() {\n        return bar;\n    }\n\n    @Validations(\n            requiredFields =\n                    {@RequiredFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"customfield\", message = \"You must enter a value for field.\")},\n            requiredStrings =\n                    {@RequiredStringValidator(type = ValidatorType.SIMPLE, fieldName = \"stringisrequired\", message = \"You must enter a value for string.\")},\n            emails =\n                    { @EmailValidator(type = ValidatorType.SIMPLE, fieldName = \"emailaddress\", message = \"You must enter a value for email.\")},\n            urls =\n                    { @UrlValidator(type = ValidatorType.SIMPLE, fieldName = \"hreflocation\", message = \"You must enter a value for email.\")},\n            stringLengthFields =\n                    {@StringLengthFieldValidator(type = ValidatorType.SIMPLE, trim = true, minLength=\"10\" , maxLength = \"12\", fieldName = \"needstringlength\", message = \"You must enter a stringlength.\")},\n            intRangeFields =\n                    { @IntRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"intfield\", min = \"6\", max = \"10\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")},\n            dateRangeFields =\n                    {@DateRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = \"datefield\", min = \"-1\", max = \"99\", message = \"bar must be between ${min} and ${max}, current value is ${bar}.\")},\n            expressions = {\n                @ExpressionValidator(expression = \"foo > 1\", message = \"Foo must be greater than Bar 1. Foo = ${foo}, Bar = ${bar}.\"),\n                @ExpressionValidator(expression = \"foo > 2\", message = \"Foo must be greater than Bar 2. Foo = ${foo}, Bar = ${bar}.\"),\n                @ExpressionValidator(expression = \"foo > 3\", message = \"Foo must be greater than Bar 3. Foo = ${foo}, Bar = ${bar}.\"),\n                @ExpressionValidator(expression = \"foo > 4\", message = \"Foo must be greater than Bar 4. Foo = ${foo}, Bar = ${bar}.\"),\n                @ExpressionValidator(expression = \"foo > 5\", message = \"Foo must be greater than Bar 5. Foo = ${foo}, Bar = ${bar}.\")\n    }\n    )\n    public String execute() throws Exception {\n        return SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Prefix Example in Struts Forms\nDESCRIPTION: Example of using the method prefix in a Struts form. When the second submit button is clicked, instead of calling the default execute() method, the anotherMethod() of the baz action will be called.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<s:form action=\"baz\">\n    <s:textfield label=\"Enter your name\" name=\"person.name\"/>\n    <s:submit value=\"Create person\"/>\n    <s:submit method=\"anotherMethod\" value=\"Cancel\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Using Property Keys in JSP Pages with Struts 2\nDESCRIPTION: This HTML snippet shows how to use the 's:text' tag to display the value of a property key (in this case, 'contact') in a JSP page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<hr />\n<s:text name=\"contact\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Object with Named Array Field for Autocompleter\nDESCRIPTION: Example JSON object format with a named field containing an array of 2-dimension arrays. This format works when the dataFieldName attribute matches the field name in the response.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"state\" : [\n          [\"Alabama\",\"AL\"],\n          [\"Alaska\",\"AK\"]\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Series of Git commands for managing branches, including checkout, fetch, pull, and push operations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/submitting-patches.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit fetch\ngit pull\ngit checkout -b my-branch\ngit push -u fork my-branch\ngit push\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Template in XHTML Theme\nDESCRIPTION: The form.ftl template that creates the opening form tag with table structure and adds JavaScript validation support when enabled.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_6\n\nLANGUAGE: freemarker\nCODE:\n```\n<#--\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n-->\n<#if parameters.validate!false == true>\n<script type=\"text/javascript\" src=\"<@s.url value='/struts/xhtml/validation.js' includeParams='none' namespace=\"/\" encode='false' />\"></script>\n    <#if parameters.onsubmit??>  \n        ${tag.addParameter('onsubmit', \"if (typeof ${parameters.onsubmit} !== 'undefined') { return (${parameters.onsubmit}()) && validate${parameters.id?html}Form(); } else { return validate${parameters.id?html}Form(); }\")} \n    <#else>    \n        ${tag.addParameter('onsubmit', \"return validate${parameters.id?html}Form();\")}\n    </#if>\n</#if>\n<#include \"/${parameters.templateDir}/simple/form.ftl\" />\n<#if parameters.validate!false == true>\n<script type=\"text/javascript\">\n    function validate${parameters.id?html}Form() {\n        form = document.getElementById(\"${parameters.id?html}\");\n        clearErrorMessages(form);\n        clearErrorLabels(form);\n\n        var errors = false;\n<#list parameters.tagNames as tagName>\n    <#list tag.getValidators(tagName) as validator>\n        if (form.elements['${tagName?html}']) {\n            field = form.elements['${tagName?html}'];\n            var error = \"${validator.getMessage(action)?js_string}\";\n            <#if validator.validatorType=\"field-validator\">\n                <#if validator.fieldName?? && validator.fieldName!=\"\">\n                    <#assign fieldName=validator.fieldName>\n                <#else>\n                    <#assign fieldName=tagName>\n                </#if>\n                <#if validator.isSimpleValidator>\n            if (field.value != null && (field.value == \"\" || field.value == \"default\" || field.value.match(/^\\s+$/))) {\n                addError(field, error);\n                errors = true;\n            }\n                <#else>\n                    <#if validator.validatorClass=\"RequiredStringValidator\" || validator.validatorClass=\"RequiredFieldValidator\">\n            if (field.value != null && (field.value == \"\" || field.value.match(/^\\s+$/))) {\n                addError(field, error);\n                errors = true;\n            }\n                    <#elseif validator.validatorClass=\"RequiredValidator\">\n            if (field.value != null && (field.value == \"\" || field.value.match(/^\\s+$/) || field.value == \"default\")) {\n                addError(field, error);\n                errors = true;\n            }\n                    <#else>\n            if (field.value != null && field.value != \"\") {\n                if (!${validator.validatorClass}.validate(field.value)) {\n                    addError(field, error);\n                    errors = true;\n                }\n            }\n                    </#if>\n                </#if>\n            <#else>\n            if (!${validator.validatorClass}.validate(\n                <#if validator.validatorClass=\"ExpressionValidator\">\n                    \"${validator.expression?js_string}\", field.value\n                <#else>\n                    <#if validator.isSimpleValidator>\n                    field.value\n                    <#elseif validator.validatorClass=\"FieldExpressionValidator\">\n                    field.value, \"${fieldName?js_string}\", ${validator.expression?js_string}\n                    <#else>\n                    new Array(\n                        <#list parameters.tagNames as tagName>\n                                document.getElementById(\"${parameters.id?html}\").elements[\"${tagName?html}\"]<#if tagName_has_next>, </#if>\n                        </#list>\n                    )\n                    </#if>\n                </#if>\n                )) {\n                addError(field, error);\n                errors = true;\n            }\n            </#if>\n        }\n    </#list>\n</#list>\n\n        return !errors;\n    }\n</script>\n</#if>\n<table class=\"wwFormTable\">\n```\n\n----------------------------------------\n\nTITLE: Java Action Support Class\nDESCRIPTION: Java class implementing the action support with integer field getter and setter methods\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-validator.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/** MyActionSupport.java **/\npublic class MyActionSupport extends ActionSupport {\n    \n    private Integer myIntegerField;\n    \n    public Integer getMyIntegerField() { \n        return this.myIntegerField; \n    }\n\n    @StrutsParameter\n    public void setMyIntegerField(Integer myIntegerField) {\n        this.myIntegerField = myIntegerField;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing RESTful Actions in Apache Struts\nDESCRIPTION: Demonstrates how to write unit tests for actions when using Restful2ActionMapper, including setting up authentication and testing different HTTP methods.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/restful-action-mapper.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MovieActionTest extends StrutsJUnit4TestCase<MovieActionTest>{\n    \n    @Before\n    public void setUp() throws Exception {\n        //assumes Basic authentication\n        super.setUp();\n        String credentials = \"username:password\";\n        request.addHeader(\"authorization\", \"BASIC \" + Base64.encodeBase64String(credentials.getBytes()));\n    }\n        \n    @Test\n    public void testIndex() throws Exception {\n        request.setMethod(\"get\"); //Http method should be set\n        \n        ActionProxy proxy = getActionProxy(\"/rest/movie/\");                        \n      \n        proxy.setExecuteResult(false);\n        String result = proxy.execute();\n        \n       //assertions ...        \n    }\n    \n    @Test\n    public void testView() throws Exception {\n        request.setMethod(\"get\"); //Http method should be set\n              \n        ActionProxy proxy = getActionProxy(\"/rest/movie/1\");                        \n        MovieAction movieAction = MovieAction.class.cast(proxy.getAction());\n           \n        proxy.setExecuteResult(false);\n        \n        String result = proxy.execute();\n        //assertions ...\n        assertEquals(\"1\", movieAction.getId());         \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Apache Struts Repository\nDESCRIPTION: Commands to clone the Apache Struts source code repository using Git, with options for both Apache GitBox and GitHub mirrors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/builds.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> git clone https://gitbox.apache.org/repos/asf/struts.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n> git clone https://github.com/apache/struts.git\n```\n\n----------------------------------------\n\nTITLE: Wrapping Controls in FreeMarker Template\nDESCRIPTION: Example showing how to wrap a basic control template with header and footer templates in FreeMarker. This technique is used by the xhtml theme to enhance simple theme controls.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/extending-themes.md#2025-04-08_snippet_0\n\nLANGUAGE: ftl\nCODE:\n```\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlheader.ftl\" />\n<#include \"/${parameters.templateDir}/simple/xxx.ftl\" />\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlfooter.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Creating XML Validation Configuration for Struts\nDESCRIPTION: A validation.xml file that defines field validators for the form. It includes a required string validator for the name field and an integer range validator for the age field with custom error messages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-validation-example.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n    Add the following DOCTYPE declaration as first line of your XXX-validation.xml file:\n    <!DOCTYPE validators PUBLIC \"-//Apache Struts//XWork Validator 1.0.2//EN\" \"http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd\">\n-->\n<validators>\n    <field name=\"name\">\n        <field-validator type=\"requiredstring\">\n            <message>You must enter a name</message>\n        </field-validator>\n    </field>\n    <field name=\"age\">\n        <field-validator type=\"int\">\n            <param name=\"min\">13</param>\n            <param name=\"max\">19</param>\n            <message>Only people ages 13 to 19 may take this quiz</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Defining Struts Concepts in Markdown Table\nDESCRIPTION: A markdown table defining key concepts in Struts: tag, template, and theme. It explains what each concept represents in the context of the framework.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/themes-and-templates.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| tag | A small piece of code executed from within [JSP](jsp), [FreeMarker](freemarker), or [Velocity](velocity). |\n| template | A bit of code, usually written in [FreeMarker](freemarker), that can be rendered by certain tags (HTML tags) |\n| theme | A  collection of _templates_  packaged together to provide common functionality |\n```\n\n----------------------------------------\n\nTITLE: Required WebSphere 6.5 Properties for Struts\nDESCRIPTION: These properties are required for making Struts2 work with WebSphere 6.5, particularly when using StrutsPrepareAndExecuteFilter. They need to be added to the WebSphere custom properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/websphere.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncom.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror = true\ncom.ibm.ws.webcontainer.invokefilterscompatibility = true\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Tag Developers Guide\nDESCRIPTION: Basic YAML front matter configuration for a documentation page that sets the layout type and title for a tag developers guide.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-treenode-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: Target Content Update with Struts2 Dojo Submit\nDESCRIPTION: Example demonstrating how to update target content with HTML returned from an action using the Struts2 Dojo submit tag with target and href attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<div id=\"div1\">Div 1</div>\n<s:url id=\"ajaxTest\" value=\"/AjaxTest.action\"/>\n\n<sx:submit id=\"link1\" href=\"%{ajaxTest}\" target=\"div1\" />\n```\n\n----------------------------------------\n\nTITLE: Example of Disallowed Property Names in Struts\nDESCRIPTION: This example shows code that won't work because 'parameters' is a reserved name in Struts. The iterator and the Java bean property will conflict with the internal Struts mechanisms.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<s:iterator value=\"parameters\"/>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class MyAction {\n\n    private String[] parameters;\n\n    public String[] getParameters() {\n        return parameters;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Template Basics in Markdown Table\nDESCRIPTION: A markdown table listing the basic concepts related to templates in Struts, including template loading, selecting template directory, selecting themes, and extending themes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/themes-and-templates.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|[Template Loading](template-loading)| How templates are loaded |\n|[Selecting Template Directory](selecting-template-directory)| How the template directories are loaded |\n|[Selecting Themes](selecting-themes)| How you can pick a theme when writing your results |\n|[Extending Themes](extending-themes)| How to create your own themes based on existing themes |\n```\n\n----------------------------------------\n\nTITLE: Working with Session Values and Static Maps in Struts\nDESCRIPTION: Demonstrates accessing a session attribute and creating a select list from a static Map. The first line gets a username from the session, and the second creates a dropdown with usernames.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<s:property value=\"#session.user.username\" />\n<s:select label=\"FooBar\" name=\"foo\" list=\"#{'username':'trillian', 'username':'zaphod'}\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Array Data Format for Autocompleter\nDESCRIPTION: Example JSON array format for the Autocompleter component where each element is a 2-dimension array. This is one of the supported data source formats.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n     [\"Alabama\", \"AL\"],\n     [\"Alaska\", \"AK\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Person Model Class in Java\nDESCRIPTION: Defines a simple Person POJO with id, name, and lastName properties along with getters, setters, and constructors for use as data in JasperReports.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.acme.test;\n\npublic class Person {\n\n    private Long id;\n\n    private String name;\n\n    private String lastName;\n\n    public Person() {\n    }\n\n    public Person(String name, String lastName) {\n        this.name = name;\n        this.lastName = lastName;\n    }\n\n    public Person(Long id, String name, String lastName) {\n        this.id = id;\n        this.name = name;\n        this.lastName = lastName;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Point Converter Configuration Example\nDESCRIPTION: Example of configuring a global Point converter in struts-conversion.properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ncom.acme.Point = com.acme.PointConverter\n```\n\n----------------------------------------\n\nTITLE: German Date Format Pattern\nDESCRIPTION: Date format pattern specific to German locale (de_DE) using dd.MM.yyyy pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nformat.date = {0,date,dd.MM.yyyy}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 XML\nDESCRIPTION: Log4j2 configuration that sets up console logging for Struts 2 and XWork components with debug level.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n    <Appenders>\n        <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n        </Console>\n    </Appenders>\n    <Loggers>\n        <Logger name=\"com.opensymphony.xwork2\" level=\"debug\"/>\n        <Logger name=\"org.apache.struts2\" level=\"debug\"/>\n        <Root level=\"warn\">\n            <AppenderRef ref=\"STDOUT\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Field Errors Using Expression Language in JSP\nDESCRIPTION: Alternative example showing how to display field errors for specific fields by using param tags with expression language to specify the field names.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/fielderror-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:fielderror>\n  <s:param value=\"%{'field1'}\" />\n  <s:param value=\"%{'field2'}\" />\n</s:fielderror>\n<s:form .... >\n   ....\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Action Definition for JasperReports\nDESCRIPTION: Basic action configuration that maps the action name to a Java class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myJasperTest\" class=\"com.acme.test.action.JasperAction\">\n```\n\n----------------------------------------\n\nTITLE: Creating JSP View for Listing Bookmarks in Edit Mode\nDESCRIPTION: This JSP file creates the view for listing bookmarks in edit mode. It includes a table to display bookmarks with edit and delete links, and a form for adding new bookmarks.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_7\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n\n<h2>Manage bookmarks</h2>\n\n<p>\n   <table>\n   <s:iterator value=\"%{bookmarks}\" var=\"bookmark\">\n      <s:url action=\"editBookmark!input\" id=\"editUrl\">\n         <s:param name=\"oldName\" value=\"%{name}\"/>\n      </s:url>\n      <s:url action=\"deleteBookmark\" portletUrlType=\"action\" id=\"deleteUrl\">\n         <s:param name=\"bookmarkName\" value=\"%{name}\"/>\n      </s:url>\n      <tr>\n         <td><s:property value=\"%{name}\"/></td>\n         <td><a href=\"<s:property value=\"%{url}\"/>\" target=\"_blank\"><s:property value=\"%{url}\"/></a></td>\n         <td><a href=\"<s:property value=\"%{editUrl}\"/>\">Edit</a></td>\n         <td><a href=\"<s:property value=\"%{deleteUrl}\"/>\">Delete</a></td>\n      </tr>\n   </s:iterator>\n   </table>\n</p>\n\n<s:form action=\"addBookmark\">\n   <table>\n      <s:textfield name=\"name\" label=\"Name\"/>\n      <s:textfield name=\"url\" label=\"URL\"/>\n      <s:submit value=\"Add\"/>\n   </table>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Convention Plugin for Glassfish 2.x EAR Deployment\nDESCRIPTION: This configuration adds a constant to struts.xml that ensures the Convention Plugin works properly when deployed as an EAR archive in Glassfish 2.x. It prevents the parent class loader from being excluded during scanning.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/glassfish-2-x.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.exclude.parentClassLoader\" value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Action Configuration with Parameters Interceptor\nDESCRIPTION: Simple example showing how to configure an action with the parameters interceptor\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/parameters-interceptor.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n  <interceptor-ref name=\"params\"/>\n  <result name=\"success\">good_result.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Including and Using Struts JSP Tags\nDESCRIPTION: This snippet demonstrates how to include the Struts tag library in a JSP file and use basic Struts tags. It shows the taglib directive with the proper URI and uses the iterator and property tags to display a collection of people.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n  <body>\n    <p>Now you can use the tags, like so:</p>\n    <s:iterator value=\"people\">\n      <s:property value=\"lastName\"/>, <s:property value=\"firstName\"/>\n    </s:iterator>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Struts Form Tag in JSP\nDESCRIPTION: This snippet demonstrates the basic usage of the Struts form tag in a JSP file. The ellipsis (...) indicates where additional attributes would be specified based on the form's requirements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/form-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n <s:form ... />\n```\n\n----------------------------------------\n\nTITLE: Accessing Bean Property in JSP\nDESCRIPTION: Shows how to access a bean that was placed in the stack's context using JSP syntax and the property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/bean-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"#counter\" />\n```\n\n----------------------------------------\n\nTITLE: Basic FreeMarker Tag Syntax in Apache Struts\nDESCRIPTION: Demonstrates the basic syntax for using Struts tags in FreeMarker templates. This structure is used for all supported tags in the framework.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.tag> ...</@s.tag>\n```\n\n----------------------------------------\n\nTITLE: Email Validation Regular Expression Pattern\nDESCRIPTION: The regular expression used by the EmailValidator to validate email addresses. This pattern checks for a properly formatted email address with appropriate characters before and after the @ symbol, followed by a domain with a valid TLD.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/email-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\b^['_a-z0-9-\\+]+(\\.['_a-z0-9-\\+]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,6})$\\b\n```\n\n----------------------------------------\n\nTITLE: Defining an Annotated Interface with Validation Annotations in Java\nDESCRIPTION: This snippet demonstrates how to apply standard or custom validation annotations at the method level in a Java interface. It includes examples of RequiredFieldValidator and RequiredStringValidator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface AnnotationDataAware {\n\n    void setBarObj(Bar b);\n\n    Bar getBarObj();\n\n    @RequiredFieldValidator(message = \"You must enter a value for data.\")\n    @RequiredStringValidator(message = \"You must enter a value for data.\")\n    void setData(String data);\n\n    String getData();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Annotated Interface with Validation Annotations in Java\nDESCRIPTION: This snippet demonstrates how to apply standard or custom validation annotations at the method level in a Java interface. It includes examples of RequiredFieldValidator and RequiredStringValidator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface AnnotationDataAware {\n\n    void setBarObj(Bar b);\n\n    Bar getBarObj();\n\n    @RequiredFieldValidator(message = \"You must enter a value for data.\")\n    @RequiredStringValidator(message = \"You must enter a value for data.\")\n    void setData(String data);\n\n    String getData();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin-defined Extension Point in XML (struts-deferred.xml)\nDESCRIPTION: Demonstrates how to register a plugin-defined extension point in the struts-deferred.xml configuration file. This links the BeanSelectionProvider to a named bean-selection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.6//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.6.dtd\">\n    \n<struts>\n  ...\n  \n  <bean-selection name=\"velocityBeans\" class=\"org.apache.struts2.views.velocity.VelocityBeanSelectionProvider\"/>\n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Maven Repository in Eclipse Workspace\nDESCRIPTION: Command to set up the Eclipse workspace with a variable pointing to the Maven 2 repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmvn -Declipse.workspace=<path-to-eclipse-workspace> eclipse:add-maven-repo\n```\n\n----------------------------------------\n\nTITLE: Configuring JSR168 Portlet Descriptor in XML\nDESCRIPTION: XML configuration for the JSR168 portlet descriptor, defining portlet settings, modes, and Struts 2 dispatcher.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<portlet-app\n   version=\"1.0\"\n   xmlns=\"http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd\"\n   id=\"bookmark-portlet\">\n\n   <portlet id=\"HelloPortlet\">\n      <description xml:lang=\"EN\">Simple hello world portlet</description>\n      <portlet-name>HelloPortlet</portlet-name>\n      <display-name xml:lang=\"EN\">bookmark-portlet</display-name>\n\t\t\n      <portlet-class>org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher</portlet-class>\n\t\t\n      <!-- The namespace for the actions configured for view mode -->\n      <init-param>\n         <name>viewNamespace</name>\n         <value>/view</value>\n      </init-param>\n\t\t\n      <!-- The default action to invoke in view mode. -->\n      <init-param>\n         <name>defaultViewAction</name>\n         <value>index</value>\n      </init-param>\n\t\t\n      <!-- The namespace for the actions configured for edit mode -->\n      <init-param>\n         <name>editNamespace</name>\n         <value>/edit</value>\n      </init-param>\n\t\t\n      <!-- The default action to invoke in edit mode. -->\n      <init-param>\n         <name>defaultEditAction</name>\n         <value>index!input</value>\n      </init-param>\n\t\t\n      <expiration-cache>0</expiration-cache>\n\t\t\n      <supports>\n         <mime-type>text/html</mime-type>\n         <portlet-mode>view</portlet-mode>\n         <portlet-mode>edit</portlet-mode>\n      </supports>\n\t\t\n      <supported-locale>en</supported-locale>\n\t\t\n      <portlet-info>\n         <title>HelloPortlet</title>\n         <short-title>HelloPortlet</short-title>\n         <keywords>struts 2,portlet,hello,world</keywords>\n      </portlet-info>\n   </portlet>  \n</portlet-app>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Markdown configuration for table of contents generation and header formatting.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/config-browser/index.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{:.no_toc}\n\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bean Model Class in Java\nDESCRIPTION: Example model bean class with id and name properties, including getters, setters and toString method. Used to demonstrate collection indexing functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MyBean implements Serializable {\n    private Long id;\n    private String name;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String toString() {\n        return \"MyBean{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \"}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object with First Array Field for Autocompleter\nDESCRIPTION: Example JSON object format where the Autocompleter uses the first array field found in the response. This is used as a fallback method to find a valid data source.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"anything\" : [\n           [\"Alabama\", \"AL\"],\n           [\"Alaska\", \"AK\"]\n    ]       \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button with Car List in Freemarker\nDESCRIPTION: Example of creating a radio button control using Freemarker syntax. Shows how to create a radio button with car options using an inline map, specifying listKey and listValue attributes for key-value mapping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/radio-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: freemarker\nCODE:\n```\n<@s.radio name=\"car\" list={\"ford\": \"Ford Motor Co\", \"toyota\": \"Toyota\"} listKey=\"key\" listValue=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing AddBookmarkAction in Java for Struts 2 Portlet\nDESCRIPTION: This snippet defines the AddBookmarkAction class for adding bookmarks in a Struts 2 portlet. It implements PortletPreferencesAware to handle portlet preferences and includes methods for setting bookmark name and URL.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class AddBookmarkAction extends DefaultActionSupport implements PortletPreferencesAware {\n\n   private String name;\n   private String url;\n\t\n   private PortletPreferences portletPreferences;\n\n   @StrutsParameter\n   public void setName(String name) {\n      this.name = name;\n   }\n\n   @StrutsParameter\n   public void setUrl(String url) {\n      this.url = url;\n   }\n\t\n   public void setPortletPreferences(PortletPreferences portletPreferences) {\n      this.portletPreferences = portletPreferences;\t\n   }\n\n   @Override\n   public String execute() throws Exception {\n      portletPreferences.setValue(name, url);\n      portletPreferences.store();\n      return SUCCESS;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple JSP Example - Who.jsp\nDESCRIPTION: Basic JSP file demonstrating simple text output\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/embedded-jsp/index.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\nHello there, I am the Doctor.\n```\n\n----------------------------------------\n\nTITLE: Creating a URL with Query String in FreeMarker for Apache Struts\nDESCRIPTION: Shows how to create the same URL with a query string as the JSP example, but using FreeMarker syntax. This method allows passing the parameter directly in one statement.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker-tags.md#2025-04-08_snippet_4\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.url value=\"somePage\" personId=\"%{personId}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Validator in XML\nDESCRIPTION: An example of how to configure the expression validator in XML. The validator evaluates an OGNL expression against the stack and must evaluate to a Boolean value. A message tag is included to display when validation fails.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/expression-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n      <validator type=\"expression\">\n         <param name=\"expression\"> .... </param>\n         <message>Failed to meet Ognl Expression  .... </message>\n      </validator>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Velocity Tags in Apache Struts\nDESCRIPTION: This snippet shows how to create the same form as the JSP example, but using Velocity macros. It demonstrates the Velocity syntax for form, textfield, and submit tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/velocity-tags.md#2025-04-08_snippet_1\n\nLANGUAGE: velocity\nCODE:\n```\n#sform (\"action=updatePerson\")\n    #stextfield (\"label=First name\" \"name=firstName\")\n    #ssubmit (\"value=Update\")\n#end\n```\n\n----------------------------------------\n\nTITLE: Struts Spring Integration Configuration\nDESCRIPTION: XML configuration for integrating Spring with Struts in OSGi environment.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n  <constant name=\"struts.objectFactory\" value=\"osgi\" />\n  <constant name=\"struts.objectFactory.delegate\" value=\"springOsgi\" />\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Method Context Type Setting\nDESCRIPTION: Example of setting context types for method calls using reflection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-expression-compilation.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nMethod m = ...(various reflection gynamistics used to find a java.reflect.Method instance)\n\ncontext.setCurrentType(m.getReturnType());\ncontext.setCurrentAccessor(OgnlRuntime.getCompiler().getSuperOrInterfaceClass(m, m.getDeclaringClass()));\n```\n\n----------------------------------------\n\nTITLE: List Wildcard Mapping Example in Struts XML\nDESCRIPTION: Shows a wildcard mapping for 'List*s' pattern and explains how it affects class names and result paths. Demonstrates limitations with non-greedy wildcard matching.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"List*s\" class=\"actions.List{1}s\">\n  <result>list{1}s.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Injecting Extension Point Implementation in Java\nDESCRIPTION: Shows how to inject a bean implementing the extension point using the @Inject annotation. The optional parameter can be used if the implementation is not required.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Inject\npublic void setDateFormatter(DateFormatter dateFormatter) {\n    this.dateFormatter = dateFormatter;\n}\n```\n\n----------------------------------------\n\nTITLE: Table-based HTML Documentation for Struts Component\nDESCRIPTION: HTML table structure documenting component attributes including their names, types, default values, required status and descriptions. The table covers configuration options like href, iconPath, events handlers, data binding properties and display attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"left\" valign=\"top\">Set the header value for the header option.</td>\n<tr>\n<td align=\"left\" valign=\"top\">href</td>\n<td align=\"left\" valign=\"top\">false</td>\n<td align=\"left\" valign=\"top\"></td>\n<td align=\"left\" valign=\"top\">false</td>\n<td align=\"left\" valign=\"top\">String</td>\n<td align=\"left\" valign=\"top\">The URL used to load the options</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Custom JDK Logger Factory Implementation\nDESCRIPTION: Implementation of a custom LoggerFactory for JDK logging support. Shows how to extend LoggerFactory to create JDK-specific loggers.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/logging.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.opensymphony.xwork2.util.logging.Logger;\nimport com.opensymphony.xwork2.util.logging.LoggerFactory;\n\n/**\n * Creates jdk loggers\n */\npublic class JdkLoggerFactory extends LoggerFactory {\n\n    @Override\n    protected Logger getLoggerImpl(Class<?> cls) {\n        return new JdkLogger(java.util.logging.Logger.getLogger(cls.getName()));\n    }\n    \n    @Override\n    protected Logger getLoggerImpl(String name) {\n        return new JdkLogger(java.util.logging.Logger.getLogger(name));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Jetty Tomcat Dependency Configuration\nDESCRIPTION: Maven dependency configuration for adding required Tomcat libraries\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/embedded-jsp/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n     <groupId>org.apache.tomcat</groupId>\n     <artifactId>jasper</artifactId>\n     <version>6.0.18</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Auto-selecting Month in Apache Struts Select Tag\nDESCRIPTION: This comment explains how the month selection works with auto-selection based on the value returned by getSelectedMonth() method.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/select-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n// The month id (01, 02, ...) returned by the getSelectedMonth() call\n// against the stack will be auto-selected\n```\n\n----------------------------------------\n\nTITLE: Defining Page Layout and Title in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter that specifies the default layout template and sets the page title to 'Tag Developers Guide'. This configuration is used by static site generators to process the markdown file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-datetimepicker-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: RESTful URL Examples\nDESCRIPTION: Sample URL patterns showing different content type extensions for RESTful endpoints.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp://my.company.com/myapp/movies/superman\nhttp://my.company.com/myapp/movies/superman.xml\nhttp://my.company.com/myapp/movies/superman.xhtml\nhttp://my.company.com/myapp/movies/superman.json\n```\n\n----------------------------------------\n\nTITLE: Creating Labels in Markdown for Struts Website\nDESCRIPTION: Examples demonstrating how to create different styled labels including primary, info, success, warning, and danger using Bootstrap label classes in Markdown.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/updating-website.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nLabel primary\n{:.label .label-primary}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLabel info\n{:.label .label-info}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLabel success\n{:.label .label-success}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLabel warning\n{:.label .label-warning}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLabel danger\n{:.label .label-danger}\n```\n\n----------------------------------------\n\nTITLE: TreeNode Component JavaDoc Documentation\nDESCRIPTION: JavaDoc documentation explaining the TreeNode component that renders a tree node within a tree widget with AJAX support. Describes two implementation approaches: dynamic construction using id/title, and static construction using node properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-treenode-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: javadoc\nCODE:\n```\nRenders a tree node within a tree widget with AJAX support.\n\nEither of the following combinations should be used depending on if the tree\nis to be constructed dynamically or statically.\n\nDynamically:\n- id - id of this tree node\n- title - label to be displayed for this tree node\n\nStatically:\n- rootNode - the parent node of which this tree is derived from\n- nodeIdProperty - property to obtained this current tree node's id\n- nodeTitleProperty - property to obtained this current tree node's title\n- childCollectionProperty - property that returnds this current tree node's children\n```\n\n----------------------------------------\n\nTITLE: Evaluating Boolean Attributes in Struts Tags\nDESCRIPTION: Creates a select field with the multiple attribute set to true. Since 'multiple' is a boolean attribute, Struts automatically evaluates it as an expression rather than a string.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"state.label\" name=\"state\" multiple=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Action in Struts XML\nDESCRIPTION: Example of configuring a FreeMarker template result in struts action configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"test\" class=\"com.acme.TestAction\">\n    <result name=\"success\" type=\"freemarker\">test-success.ftl</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Scope Attributes in FreeMarker\nDESCRIPTION: Examples showing how to access application scope attributes using FreeMarker syntax and Struts property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_2\n\nLANGUAGE: ftl\nCODE:\n```\n<#if Application.myApplicationAttribute?exists>\n     ${Application.myApplicationAttribute}\n</#if>\n```\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.property value=\"%{#application.myApplicationAttribute}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input Template in XHTML Theme\nDESCRIPTION: The text.ftl template for XHTML theme that wraps the simple theme's text input with controlheader and controlfooter to provide additional styling and layout.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_0\n\nLANGUAGE: freemarker\nCODE:\n```\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlheader.ftl\" />\n<#include \"/${parameters.templateDir}/simple/text.ftl\" />\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlfooter.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Using Text Tag for Internationalization in Struts 2\nDESCRIPTION: Examples of using the Struts 2 text tag to retrieve messages from the default resource bundle, including fallback to a default message when the key is invalid.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<s:text name=\"some.key\" />\n\n<s:text name=\"some.invalid.key\">\n    The Default Message That Will Be Displayed\n</s:text>\n```\n\n----------------------------------------\n\nTITLE: Implementing CspSettingsAware Interface in Java Action Class\nDESCRIPTION: Example of how to implement the CspSettingsAware interface in a Struts action class to configure CSP settings programmatically. The action must implement the getCspSettings() method to provide custom CSP policies per action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/csp-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyAction implements CspSettingsAware {\n    \n    public String execute() {\n        return \"success\";\n    }\n    \n    public CspSetting getCspSettings() {\n      ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Bookmark Action in Struts 2 XML\nDESCRIPTION: This XML snippet configures the edit bookmark action in the Struts 2 configuration file. It specifies the action class, success result, and input result for the edit form.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"editBookmark\" class=\"com.mycompany.EditBookmarkAction\">\n   <result type=\"redirectAction\">\n      <param name=\"actionName\">index</param>\n   </result>\n   <result name=\"input\">/WEB-INF/jsp/edit/edit.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action to Use Tiles Definition\nDESCRIPTION: XML configuration to set up an action to use a Tiles definition as its result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"sample\" class=\"org.apache.struts2.tiles.example.SampleAction\" >\n  <result name=\"success\" type=\"tiles\">tilesWorks</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Custom FileManagerFactory Configuration\nDESCRIPTION: Configuration for registering a custom FileManagerFactory implementation in Struts2.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n     <filter-name>struts2</filter-name>\n     <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n     <init-param>\n         <param-name>struts.fileManagerFactory</param-name>\n         <param-value>com.company.MyFileManagerFactory</param-value>\n     </init-param>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Basic Subset Tag Usage in JSP\nDESCRIPTION: A basic example of using the subset tag to iterate through a collection without specifying count or start parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/subset-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:subset source=\"myList\">\n   <s:iterator>\n      <s:property />\n   </s:iterator>\n</s:subset>\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Method in Struts 2 Action\nDESCRIPTION: Shows the implementation of the execute method in a Struts 2 Action class, which is called when the action is invoked.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/coding-actions.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic String execute() throws Exception {\n    messageStore = new MessageStore() ;\n\n    helloCount++;\n\n    return SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Pass a Literal String Value to a Struts Tag\nDESCRIPTION: This demonstrates the correct way to pass a literal string value 'ca' to a textfield by using the expression notation with quotes around the string literal.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<s:textfield key=\"state.label\" name=\"state\" value=\"%{'ca'}\" />\n```\n\n----------------------------------------\n\nTITLE: Button Submit Implementation in Struts2 Dojo\nDESCRIPTION: Example showing how to render a button submit using the Struts2 Dojo submit tag with a 'type' attribute set to 'button'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<sx:submit type=\"button\" value=\"%{'Submit'}\" label=\"Submit the form\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for css_xhtml Theme (CSS)\nDESCRIPTION: This snippet contains the CSS styles used by the css_xhtml theme for layout and formatting of Struts tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/css-xhtml-theme.md#2025-04-08_snippet_4\n\nLANGUAGE: css\nCODE:\n```\ninput, select, textarea {\n    padding: 2px;\n}\n\nselect {\n    padding: 1px;\n}\n\n.label {\n    font-style:italic;\n    float: left;\n    width: 30%;\n    text-align:right;\n    margin-right: 1em;\n}\n\n.errorLabel {\n    font-style:italic;\n    color:red;\n    float: left;\n    width: 30%;\n    text-align:right;\n    margin-right: 1em;\n}\n\n.errorMessage {\n    font-weight:bold;\n    color:red;\n    padding: 0px 0px 5px 0px;\n}\n\n.checkboxLabel {\n}\n\n.checkboxErrorLabel {\n    color:red;\n}\n\n.required {\n    color:red;\n}\n\n.tdLabel {\n    text-align:right;\n    vertical-align:top;\n}\n```\n\n----------------------------------------\n\nTITLE: Original Hidden Input Implementation in Java\nDESCRIPTION: The original source code for implementing a hidden input field section in Struts, demonstrating attribute chaining pattern with string escaping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/coding-standards.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Hidden input section\na = new Attributes();\na.add(\"type\", \"hidden\")\n    .add(\"id\", \"__multiselect_\" + StringUtils.defaultString(StringEscapeUtils.escapeHtml4(id)))\n    .add(\"name\", \"__multiselect_\" + StringUtils.defaultString(StringEscapeUtils.escapeHtml4(name)))\n    .add(\"value\", \"\").addIfTrue(\"disabled\", disabled);\nstart(\"input\", a);\nend(\"input\");\n```\n\n----------------------------------------\n\nTITLE: Sorting and Iterating Over List Elements in JSP\nDESCRIPTION: This example demonstrates how to use the Struts 2 sort tag to sort a list and then iterate over the sorted elements. The sorted list is directly used within the sort tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/sort-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:sort comparator=\"myComparator\" source=\"myList\">\n     <s:iterator>\n     <!-- do something with each sorted elements -->\n     <s:property value=\"...\" />\n     </s:iterator>\n</s:sort>\n```\n\n----------------------------------------\n\nTITLE: Using InputConfig Annotation in a Struts Action\nDESCRIPTION: An example of using the InputConfig annotation in a Struts action class to specify the method to execute when validation fails. The annotation is applied to the execute() method and directs to the input() method when validation performed by ValidationInterceptor fails.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/input-config-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n public class SampleAction extends ActionSupport {\n\n  public void isValid() throws ValidationException {\n    // validate model object, throw exception if failed\n  }\n\n  @InputConfig(methodName=\"input\")\n  public String execute() {\n     // perform action\n     return SUCCESS;\n  }\n  public String input() {\n     // perform some data filling\n     return INPUT;\n  }\n }\n\n```\n\n----------------------------------------\n\nTITLE: Struts 2 Default Theme Stylesheet\nDESCRIPTION: Default CSS styles used by the Struts 2 xhtml theme for form elements and labels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/themes.md#2025-04-08_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.label {font-style:italic; }\n.errorLabel {font-style:italic; color:red; }\n.errorMessage {font-weight:bold; color:red; }\n.checkboxLabel {}\n.checkboxErrorLabel {color:red; }\n.required {color:red;}\n.tdLabel {text-align:right; vertical-align:top; }\n```\n\n----------------------------------------\n\nTITLE: XML Debug Output Structure Example\nDESCRIPTION: Example of the XML debug output structure showing various framework objects including action mapping, context, value stack, and locale information\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/debugging.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<debug>\n     <parameters /> \n     <context>\n        <struts.actionMapping>\n        <class>class org.apache.struts2.dispatcher.mapper.ActionMapping</class> \n        <name>showcase</name> \n        <namespace>/</namespace> \n        </struts.actionMapping>\n        <attr /> \n        <__devMode>true</__devMode> \n        <report.conversion.errors>false</report.conversion.errors> \n    </context>\n    <request /> \n    <session /> \n    <valueStack>\n        <value>\n            <actionErrors /> \n            <actionMessages /> \n            <class>class com.opensymphony.xwork2.ActionSupport</class> \n            <errorMessages /> \n            <errors /> \n            <fieldErrors /> \n            <locale>\n                <ISO3Country>USA</ISO3Country> \n                <ISO3Language>eng</ISO3Language> \n                <class>class java.util.Locale</class> \n                <country>US</country> \n                <displayCountry>United States</displayCountry> \n                <displayLanguage>English</displayLanguage> \n                <displayName>English (United States)</displayName> \n                <displayVariant /> \n                <language>en</language> \n                <variant /> \n            </locale>\n        </value>\n        <value>\n            <class>class com.opensymphony.xwork2.DefaultTextProvider</class> \n        </value>\n    </valueStack>\n</debug>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Logging in Struts 2\nDESCRIPTION: This XML snippet demonstrates how to configure exception logging in struts.xml by setting parameters for the ExceptionMappingInterceptor. It creates a custom interceptor stack that enables logging with ERROR level.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/exception-handling.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n    <interceptor-stack name=\"appDefaultStack\">\n        <interceptor-ref name=\"defaultStack\">\n            <param name=\"exception.logEnabled\">true</param>\n            <param name=\"exception.logLevel\">ERROR</param>\n        </interceptor-ref>\n    </interceptor-stack>\n</interceptors>\n\n<default-interceptor-ref name=\"appDefaultStack\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Edit Bookmark JSP View in Struts 2 Portlet\nDESCRIPTION: This JSP file creates the view for editing a bookmark in the Struts 2 portlet. It includes a form with fields for the bookmark name and URL, pre-populated with existing values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_11\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n\n<h2>Edit bookmark</h2>\n\n<s:form action=\"editBookmark\">\n   <input type=\"hidden\" name=\"oldName\" value=\"<s:property value=\"%{oldName}\"/>\"/>\n   <table>\n      <s:textfield name=\"name\" label=\"Name\" value=\"%{oldName}\"/>\n      <s:textfield name=\"url\" label=\"URL\"/>\n      <s:submit value=\"Update\"/>\n   </table>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Struts Properties File\nDESCRIPTION: Demonstrates how to set a constant in the struts.properties file. This example sets the 'struts.devMode' property to true.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/constant-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nstruts.devMode = true\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for XHTML Theme\nDESCRIPTION: The styles.css file that defines the visual appearance of form elements in the XHTML theme, including error and validation formatting.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.wwFormTable {}\n.label {font-style:italic; }\n.errorLabel {font-style:italic; color:red; }\n.errorMessage {font-weight:bold; text-align: center; color:red; }\n.checkboxErrorLabel {color:red; }\n.required {color:red;}\n.tdLabel {text-align:right; vertical-align:top; }\n.tdInput {text-align:left; vertical-align:top; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts.xml\nDESCRIPTION: Core Struts 2 configuration file that defines action mappings and enables development mode.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE struts PUBLIC\n    \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n    \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n\n<struts>\n\n    <constant name=\"struts.devMode\" value=\"true\" />\n\n    <package name=\"basicstruts2\" extends=\"struts-default\">\n        <action name=\"index\">\n            <result>/index.jsp</result>\n        </action>\n    </package>\n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Configuring Restful2ActionMapper in Struts XML\nDESCRIPTION: Shows how to set up Restful2ActionMapper as the default action mapper in Struts configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/restful-action-mapper.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.mapper.class\" value=\"org.apache.struts2.dispatcher.mapper.Restful2ActionMapper\" />\n```\n\n----------------------------------------\n\nTITLE: Dojo Div Component JavaDoc Description in HTML\nDESCRIPTION: HTML-formatted documentation outlining the Dojo Div component's functionality. The component generates an HTML div that loads content via XMLHttpRequest using the Dojo framework, with features like auto-refresh timers and topic-based control. When used within a tabbedpanel, each div becomes a tab with special attributes like refreshOnShow, closable, and preload.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-div-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p> <p>\n This tag generates an HTML div that loads its content using an XMLHttpRequest call, via\n the dojo framework. When the \"updateFreq\" is set the built in timer will start automatically and \n reload the div content with the value of \"updateFreq\" as the refresh period(in milliseconds).\n Topics can be used to stop(stopTimerListenTopics) and start(startTimerListenTopics) this timer.  \n </p>\n <p>\n When used inside a \"tabbedpanel\" tag, each div becomes a tab. Some attributes are specific\n to this use case, like:\n <ul>\n   <li>refreshOnShow: div content is realoded when tab is selected</li>\n   <li>closable: Tab will have close button</li>\n   <li>preload: load div content after page is loaded</li>\n </ul>\n </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Close Template in XHTML Theme\nDESCRIPTION: The form-close.ftl template that closes the form table structure and adds any validation JavaScript if validation is enabled.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_7\n\nLANGUAGE: freemarker\nCODE:\n```\n<#--\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n-->\n</table>\n<#include \"/${parameters.templateDir}/simple/form-close.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Listener in web.xml\nDESCRIPTION: This XML snippet shows how to configure the Spring ContextLoaderListener in web.xml to make the application \"Spring aware\" and activate the Spring framework at startup.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n```\n\n----------------------------------------\n\nTITLE: Creating Struts 2 Form with Text Input\nDESCRIPTION: Demonstrates how to create a Struts 2 form with a text input field and submit button using Struts 2 form tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/coding-actions.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<s:form action=\"hello\">\n    <s:textfield name=\"userName\" label=\"Your name\" />\n    <s:submit value=\"Submit\" />\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Push Tag with Nested Property Access\nDESCRIPTION: Illustrates accessing nested properties through the push tag and bean creation with method invocation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/push-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:push value=\"myObject\">                                     ---(A)\n   <s:bean name=\"jp.SomeBean\" var=\"myBean\"/>                  ---(B)\n      <s:param name=\"myParam\" value=\"top.mySomeOtherValue\"/>  ---(C)\n   </s:bean>\n</s:push>\n```\n\n----------------------------------------\n\nTITLE: Custom Label Style Override\nDESCRIPTION: CSS override to customize the appearance of Struts 2 form labels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/themes.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style type=\"text/css\">\n    .label {color:blue; font-style:normal; font-weight:bold}\n</style>\n```\n\n----------------------------------------\n\nTITLE: JSP Combobox Examples\nDESCRIPTION: Three examples showing different ways to implement the Struts combobox tag in JSP: using a Counter bean for birth years, a simple string list for fruits, and a map for colors. Each example demonstrates different configuration options including headers, empty options, and value selection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/combobox-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<-- Example One -->\n<s:bean name=\"struts.util.Counter\" var=\"year\">\n  <s:param name=\"first\" value=\"text('firstBirthYear')\"/>\n  <s:param name=\"last\" value=\"2000\"/>\n\n  <s:combobox label=\"Birth year\" size=\"6\" maxlength=\"4\" name=\"birthYear\" list=\"#year\"/>\n</s:bean>\n\n<-- Example Two -->\n<s:combobox\n    label=\"My Favourite Fruit\"\n    name=\"myFavouriteFruit\"\n    list=\"{'apple','banana','grape','pear'}\"\n    headerKey=\"-1\"\n    headerValue=\"--- Please Select ---\"\n    emptyOption=\"true\"\n    value=\"banana\" />\n\n<-- Example Two -->\n<s:combobox\n   label=\"My Favourite Color\"\n   name=\"myFavouriteColor\"\n   list=\"#{'red':'red','green':'green','blue':'blue'}\"\n   headerKey=\"-1\"\n   headerValue=\"--- Please Select ---\"\n   emptyOption=\"true\"\n   value=\"green\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Tiles Plugin Dependency in Maven\nDESCRIPTION: XML configuration to include the struts-tiles-plugin as a dependency in a Maven-based web application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-tiles-plugin</artifactId>\n  <version>${version.tiles}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Interceptor in Struts XML\nDESCRIPTION: These XML snippets demonstrate how to configure the logger interceptor in Struts actions. The first example shows the logger interceptor placed after the complete stack, while the second example shows it placed before the complete stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/logging-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <!-- prints out a message before and after the immediate action execution -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"completeStack\"/>\n     <interceptor-ref name=\"logger\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n\n <!-- prints out a message before any more interceptors continue and after they have finished -->\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"logger\"/>\n     <interceptor-ref name=\"completeStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bookmark Domain Object in Java\nDESCRIPTION: Java class representing a Bookmark domain object with name and URL properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Bookmark {\n   private String name;\n   private String url;\n\n   public Bookmark(String name, String url) {\n      this.name = name;\n      this.url = url;\n   }\n\t\n   public String getName() {\n      return name;\n   }\n\n   public String getUrl() {\n      return url;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugin in Struts 2 Action Class\nDESCRIPTION: Demonstrates how to inject and use custom plugins in a Struts 2 Action class. It uses the @Inject annotation to get the Container and retrieve all instances of IMyPlugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/extending-an-application-with-custom-plugins.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage example.actions;\n\nimport example.IMyPlugin;\n\npublic class MyAction extends ActionSupport {\n    Set<IMyPlugin> plugins;\n\n    @Inject\n    public void setContainer(Container container) {\n        Set<String> names = container.getInstanceNames(IMyPlugin.class);\n        plugins = new HashSet<IMyPlugin>();\n        for (String name : names) {\n            plugins.add(container.getInstance(IMyPlugin.class, name));\n        }\n    }\n\n    public Set<IMyPlugin> getPlugins() {\n        return this.plugins;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Exclusion Patterns in Struts\nDESCRIPTION: Setting up patterns to exclude certain URLs from Struts processing using regular expressions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/static-content.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.action.excludePattern\" value=\"/some/content/.*,/other/content/.*\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Database Portlet Project\nDESCRIPTION: Maven command to generate a Struts 2 database portlet project using the dbportlet archetype, which creates a JSR 168 portlet that displays database table contents using Spring and Hsql.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B -DgroupId=com.mycompany.mysystem \\\n                          -DartifactId=myWebApp \\\n                          -DarchetypeGroupId=org.apache.struts \\\n                          -DarchetypeArtifactId=struts2-archetype-dbportlet\n```\n\n----------------------------------------\n\nTITLE: Spring Context Configuration in MANIFEST.MF\nDESCRIPTION: Configuration to disable asynchronous loading of Spring context in OSGi environment.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSpring-Context:*;create-asynchronously:=false\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpHeader Result in Struts XML\nDESCRIPTION: Examples of using the HttpHeader Result type in Struts configuration. The first example sets a 204 status code with custom headers, while the second example returns a 305 proxy required error with a custom error message.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/httpheader-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"httpheader\">\n  <param name=\"status\">204</param>\n  <param name=\"headers.a\">a custom header value</param>\n  <param name=\"headers.b\">another custom header value</param>\n</result>\n \n<result name=\"proxyRequired\" type=\"httpheader\">\n  <param name=\"error\">305</param>\n  <param name=\"errorMessage\">this action must be accessed through a proxy</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Dojo TextArea Tag Attributes HTML Table\nDESCRIPTION: Complete HTML table listing all available attributes for the Dojo TextArea component with their requirements, default values, evaluation status, types, and descriptions. The table details configuration options for the component.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-textarea-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>\t\t<table width=\"100%\">\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\"><h4>Dynamic Attributes Allowed:</h4> false</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<td colspan=\"6\">&nbsp;</td>\n\n\t\t\t</tr>\n\n\t\t\t<tr>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Name</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Required</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Default</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Evaluated</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Type</h4></th>\n\n\t\t\t\t<th align=\"left\" valign=\"top\"><h4>Description</h4></th>\n\n\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">accesskey</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html accesskey attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cols</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Integer</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">HTML cols attribute</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorClass</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error class to use for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssErrorStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css error style definitions for element to use</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">cssStyle</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The css style definitions for element to use</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">disabled</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html disabled attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">errorPosition</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Define error position of form element (top|bottom)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">id</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">HTML id attribute</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">javascriptTooltip</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Boolean</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Use JavaScript to generate tooltips</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">key</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the key (name, value, label) for this particular component</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">label</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Label expression used for rendering an element specific label</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">labelSeparator</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">:</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String that will be appended to the label</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">labelposition</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Define label position of form element (top/left)</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">name</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">The name to set for element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onblur</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"> Set the html onblur attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onchange</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onchange attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onclick</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onclick attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">ondblclick</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html ondblclick attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onfocus</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onfocus attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onkeydown</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onkeydown attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onkeypress</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onkeypress attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onkeyup</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onkeyup attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onmousedown</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onmousedown attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onmousemove</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">String</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">Set the html onmousemove attribute on rendered html element</td>\n\n\t\t\t\t</tr>\n\n\t\t\t\t<tr>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">onmouseout</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\"></td>\n\n\t\t\t\t\t<td align=\"left\" valign=\"top\">false</td>\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating Project Using Staging Profile\nDESCRIPTION: Maven command to generate project using the staging profile for accessing snapshots repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/struts2-archetype-blank.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B \\\n                       -DgroupId=tutorial \\\n                       -DartifactId=tutorial \\\n                       -DarchetypeGroupId=org.apache.struts \\\n                       -DarchetypeArtifactId=struts2-archetype-blank \\\n                       -DarchetypeVersion=<version> \\\n                       -Pstaging\n```\n\n----------------------------------------\n\nTITLE: Implementing Struts 2 Radio Tag in JSP\nDESCRIPTION: Shows how to use the Struts 2 radio tag to create a set of radio buttons for gender selection. The tag uses the 'key' attribute for label and name, and the 'list' attribute to specify the options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<s:radio key=\"personBean.gender\" list=\"genders\" />\n```\n\n----------------------------------------\n\nTITLE: Theme Extension Properties Configuration\nDESCRIPTION: Properties file configuration showing how to extend an existing theme. This example shows the ajax theme extending the xhtml theme using theme.properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/extending-themes.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nparent = xhtml\n```\n\n----------------------------------------\n\nTITLE: Setting Context Types for OGNL Compilation\nDESCRIPTION: Example of setting accessor and type information in OgnlContext for proper type casting during compilation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-expression-compilation.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncontext.setCurrentAccessor(IBeanProvider.class);\ncontext.setCurrentType(type);\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 1 Action with Session-Scoped ActionForm\nDESCRIPTION: Configuration showing how to use a Struts 1 Action with a session-scoped ActionForm. This setup uses the scopedModelDriven interceptor to manage the creation and lifecycle of the ActionForm, preserving the Struts 1 scoping behavior.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/struts-1/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myFormAction\" class=\"org.apache.struts2.s1.Struts1Action\">\n  <param name=\"className\">com.mycompany.myapp.MyAction</param>\n\n  <interceptor-ref name=\"scopedModelDriven\">\n    <param name=\"className\">com.mycompany.myapp.MyForm</param>\n    <param name=\"name\">gangsterForm</param>\n    <param name=\"scope\">session</param>\n  </interceptor-ref>\n  <interceptor-ref name=\"struts1Stack\"/>\n\n  <result>myAction.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating Struts 2 Portlet Project with Maven\nDESCRIPTION: Maven command to create a skeleton project for a Struts 2 portlet application using the Struts 2 Portlet Archetype.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmvn archetype:create -DarchetypeGroupId=org.apache.struts -DarchetypeArtifactId=struts2-archetype-portlet -DarchetypeVersion=2.1.1-SNAPSHOT -DartifactId=bookmark-portlet \n    -DgroupId=com.mycompany -DremoteRepositories=http://people.apache.org/repo/m2-snapshot-repository\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme Properties in Struts\nDESCRIPTION: Sets the parent theme for the custom theme to 'xhtml', which means the custom theme will inherit all templates from the xhtml theme except for those that are explicitly overridden.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nparent = xhtml\n```\n\n----------------------------------------\n\nTITLE: Creating Git Patch Command\nDESCRIPTION: Command to generate a patch file from changes made to Main.java using Git diff command. The patch can then be submitted through JIRA for review by Apache Struts committers.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/helping.md#2025-04-08_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit diff Main.java >> patchfile.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring SiteMesh Filter and Struts Listener in web.xml\nDESCRIPTION: Example of how to add the SiteMesh filter and Struts listener to the web.xml configuration file. This is required for Struts 2.2 and later versions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitemesh/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n    <filter-name>sitemesh</filter-name>\n    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter> \n...\n<listener>\n    <listener-class>org.apache.struts2.dispatcher.listener.StrutsListener</listener-class>\n</listener> \n```\n\n----------------------------------------\n\nTITLE: Including TestNG Plugin Dependency in Maven POM\nDESCRIPTION: This XML snippet shows how to include the Struts 2 TestNG plugin as a dependency in a Maven project's POM file. The dependency is scoped as 'test' since it's only needed during test execution and not at runtime.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/testng/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-testng-plugin</artifactId>\n  <version>STRUTS_2_VERSION</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing Successful Validation in Struts Action\nDESCRIPTION: JUnit test method that verifies the Action's validation passes when valid form parameters are provided. Sets up mock request parameters and checks for successful execution.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/unit-testing.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testExecuteValidationPasses() throws Exception {\n    request.setParameter(\"personBean.firstName\", \"Bruce\");\n    request.setParameter(\"personBean.lastName\", \"Phillips\");\n    request.setParameter(\"personBean.email\", \"bphillips@ku.edu\");\n    request.setParameter(\"personBean.age\", \"19\");\n\n    ActionProxy actionProxy = getActionProxy(\"/register.action\");\n    Register action = (Register) actionProxy.getAction() ;\n\n    assertNotNull(\"The action is null but should not be.\", action);\n\n    String result = actionProxy.execute();\n\n    assertEquals(\"The execute method did not return \" + ActionSupport.SUCCESS + \" but should have.\", ActionSupport.SUCCESS, result);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Nested Objects with OVal @AssertValid Annotation\nDESCRIPTION: Example of using the @AssertValid annotation to validate nested objects within an Action class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/oval/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MemberObject extends ActionSupport {\n    @AssertValid\n    private Person person = new Person();\n\n    public Person getPerson() {\n        return person;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Struts 2 Action in XML Configuration\nDESCRIPTION: Configures a Struts 2 action in struts.xml to handle the registerInput action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"registerInput\" class=\"org.apache.struts.register.action.Register\" method=\"input\" >\n    <result name=\"input\">/register.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Push Tag with Bean Creation\nDESCRIPTION: Shows how push tag interacts with bean creation and parameter setting, demonstrating stack manipulation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/push-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:push value=\"myObject\">                            ----- (1)\n     <s:bean name=\"jp.SomeBean\" var=\"myBean\"/>       ----- (2)\n        <s:param name=\"myParam\" value=\"top\"/>        ----- (3)\n     </s:bean>\n</s:push>\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Action with Freemarker Result Type\nDESCRIPTION: XML configuration showing how to define an action that uses the freemarker result type to render a view. The freemarker result type is included from struts-default.xml.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<include file=\"struts-default.xml\"/>\n...\n<action name=\"test\" class=\"package.Test\">\n  <result name=\"success\" type=\"freemarker\">/WEB-INF/views/testView.ftl</result>\n</action>\n...\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Response for Successful Validation in Struts\nDESCRIPTION: Shows the empty JSON response returned when validation succeeds and struts.validateOnly is set to true. This indicates to the client that there were no validation errors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Flow with Struts else Tag in JSP\nDESCRIPTION: Demonstrates how to use the Struts else tag in conjunction with if and elseif tags for conditional flow control. Shows a complete example of conditional branching where only the elseif block will be executed based on the test conditions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/else-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n  <s:if test=\"%{false}\">\n      <div>Will Not Be Executed</div>\n  </s:if>\n  <s:elseif test=\"%{true}\">\n      <div>Will Be Executed</div>\n  </s:elseif>\n  <s:else>\n      <div>Will Not Be Executed</div>\n  </s:else>\n```\n\n----------------------------------------\n\nTITLE: Configuring JBoss VFS for Linux/OSX\nDESCRIPTION: Adds Java system property to force VFS JAR handling in JBoss 5 on Linux/OSX systems. This configuration is added to run.conf and enables proper scanning of actions inside JAR files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/jboss-5.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJAVA_OPTS=\"$JAVA_OPTS -Djboss.vfs.forceVfsJar=true\"\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 iterator Tag for Simple Collections in HTML\nDESCRIPTION: This snippet demonstrates how to use the Struts 2 iterator tag to loop through a simple collection (String array) and display each item in an HTML table row.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/control-tags.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"margin-left:15px\">\n    <s:iterator value=\"personBean.carModels\">\n        <tr><td><s:property /></td></tr>\n    </s:iterator>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTimePicker Component in Java\nDESCRIPTION: This snippet defines the DateTimePicker class, which renders a date/time picker in a dropdown container. It supports customizable formatting and parsing of date/time values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-datetimepicker-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class DateTimePicker extends UIBean {\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Refreshing Ajax Div in Struts with JavaScript\nDESCRIPTION: JavaScript function to manually trigger a refresh of the content in an ajax div component with id 'remotediv1'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nremotediv1.refresh();\n```\n\n----------------------------------------\n\nTITLE: Building Struts with Maven\nDESCRIPTION: Command to navigate to the Struts project directory and build the framework using Maven. This performs a clean build and installs the compiled artifacts to your local Maven repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-the-framework-from-source.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd Projects\\Apache\\struts\n```\n\n----------------------------------------\n\nTITLE: Configuring OSGi Bundle Cache Parameters in web.xml\nDESCRIPTION: Example of setting context parameters in web.xml to control OSGi bundle caching behavior. This configuration is used by the StrutsOsgiListener to manage bundle caching.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<context-param>\n    <param-name>struts.osgi.clearBundleCache</param-name>\n    <param-value>false</param-value>\n</context-param>\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency for Injection in EditAction Class\nDESCRIPTION: This code shows the improved dependency declaration in EditAction where no implementation is hard-coded, allowing Spring to inject the appropriate implementation at runtime.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate EditService editService;\n```\n\n----------------------------------------\n\nTITLE: Parameterized Message Example\nDESCRIPTION: Example showing how to create a parameterized validation message that pulls min and max parameters from IntRangeFieldValidator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nbar must be between ${min} and ${max}, current value is ${bar}.\n```\n\n----------------------------------------\n\nTITLE: Parameterized Message Example\nDESCRIPTION: Example showing how to create a parameterized validation message that pulls min and max parameters from IntRangeFieldValidator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nbar must be between ${min} and ${max}, current value is ${bar}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Result in Struts XML Configuration\nDESCRIPTION: XML configuration snippet showing how to define an action that uses a Velocity template as its result type. This connects a Java action class with a Velocity template file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/velocity.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"test\" class=\"com.acme.TestAction\">\n    <result name=\"success\" type=\"velocity\">test-success.vm</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Action with Convention Plugin in Java\nDESCRIPTION: Shows how to configure a Struts action for JSON output using the Convention Plugin. This approach uses annotations to specify the result type as JSON.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.opensymphony.xwork2.ActionSupport;\nimport org.apache.struts2.convention.annotation.Result;\n\n@Result(type = \"json\")\npublic class JSONExample extends ActionSupport {\n// action code\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Textfield Template in css_xhtml Theme (FreeMarker)\nDESCRIPTION: This snippet shows how the textfield template in the css_xhtml theme wraps the simple theme's implementation with controlheader and controlfooter templates.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/css-xhtml-theme.md#2025-04-08_snippet_0\n\nLANGUAGE: freemarker\nCODE:\n```\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlheader.ftl\" />\n<#include \"/${parameters.templateDir}/simple/text.ftl\" />\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlfooter.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Postback Result in Struts XML\nDESCRIPTION: Examples showing how to configure Postback Result in Struts configuration. Demonstrates both direct URL posting and internal action routing with namespace and action name parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/postback-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"registerThirdParty\" >\n    <result type=\"postback\">https://www.example.com/register</result>\n</action>\n\n<action name=\"registerThirdParty\" >\n    <result type=\"postback\">\n        <param name=\"namespace\">/secure</param>\n        <param name=\"actionName\">register2</param>\n    </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring JasperReports Action in Struts XML\nDESCRIPTION: Main configuration for setting up a JasperReports action in struts.xml. Defines the action mapping with jasper result type and necessary parameters for report generation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"default\" namespace=\"/\" extends=\"jasperreports-default\">\n    <action name=\"myJasperTest\" class=\"com.acme.test.action.JasperAction\">\n        <result name=\"success\" type=\"jasper\">\n            <param name=\"location\">/jasper/our_compiled_template.jasper</param>\n            <param name=\"dataSource\">myList</param>\n            <param name=\"format\">PDF</param>\n        </result>\n    </action>\n    ...\n</package>\n```\n\n----------------------------------------\n\nTITLE: Rendering Asynchronous Submit Button with Loading Indicator in JSP\nDESCRIPTION: This snippet demonstrates how to use the Dojo submit component with a loading indicator to avoid issues in IE6/IE7. It sets showLoadingText to false and uses an external loading image.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<img id=\"loadingImage\" src=\"images/loadingAnimation.gif\" style=\"display:none\"/>\n<s:div id=\"parentDiv\">\n    <s:form action=\"actionName\">\n        <sx:submit  targets=\"parentDiv\" showLoadingText=\"false\" indicator=\"loadingImage\"/>\n    </s:form>\n</s:div>\n```\n\n----------------------------------------\n\nTITLE: Maven Build Success Output\nDESCRIPTION: Shows the output of a successful Maven build for Apache Struts, listing all the modules that were built.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] Struts 2 Bill of Materials ......................... SUCCESS [  1.188 s]\n[INFO] Struts 2 2.5.24-SNAPSHOT ........................... SUCCESS [  2.249 s]\n[INFO] Struts 2 Core ...................................... SUCCESS [01:13 min]\n[INFO] Struts Plugins ..................................... SUCCESS [  0.232 s]\n[INFO] Struts 2 Configuration Browser Plugin .............. SUCCESS [  1.374 s]\n[INFO] Struts 2 Sitemesh Plugin ........................... SUCCESS [  1.429 s]\n[INFO] Struts 2 Tiles Plugin .............................. SUCCESS [  2.303 s]\n[INFO] Struts 2 DWR Plugin ................................ SUCCESS [  0.905 s]\n[INFO] Struts 2 Spring Plugin ............................. SUCCESS [  2.232 s]\n[INFO] Struts 2 Convention Plugin ......................... SUCCESS [  4.540 s]\n[INFO] Struts 2 JUnit Plugin .............................. SUCCESS [  4.297 s]\n[INFO] Struts 2 JSON Plugin ............................... SUCCESS [  5.384 s]\n[INFO] Struts 2 Bean Validation Plugin .................... SUCCESS [  3.345 s]\n[INFO] Struts 2 Webapps ................................... SUCCESS [  0.391 s]\n[INFO] Struts 2 Showcase Webapp ........................... SUCCESS [  6.104 s]\n[INFO] Struts 2 REST Plugin ............................... SUCCESS [  4.058 s]\n[INFO] Struts 2 Rest Showcase Webapp ...................... SUCCESS [  1.524 s]\n[INFO] Struts 2 CDI Plugin ................................ SUCCESS [  2.758 s]\n[INFO] Struts 2 Embedded JSP Plugin ....................... SUCCESS [  8.111 s]\n[INFO] Struts 2 GXP Plugin ................................ SUCCESS [  1.137 s]\n[INFO] Struts 2 Jasper Reports Plugin ..................... SUCCESS [  4.392 s]\n[INFO] Struts 2 Java Templates Plugin ..................... SUCCESS [  2.666 s]\n[INFO] Struts 2 JFreeChart Plugin ......................... SUCCESS [  3.169 s]\n[INFO] Struts 2 OSGi Plugin ............................... SUCCESS [  3.209 s]\n[INFO] Struts 2 OVal Plugin ............................... SUCCESS [  3.113 s]\n[INFO] Struts 2 Pell Multipart Plugin ..................... SUCCESS [  0.842 s]\n[INFO] Struts 2 Plexus Plugin ............................. SUCCESS [  1.003 s]\n[INFO] Struts 2 Portlet Plugin ............................ SUCCESS [  5.210 s]\n[INFO] Struts 2 Portlet Tiles Plugin ...................... SUCCESS [  0.999 s]\n[INFO] DEPRECATED: Struts 2 Sitegraph Plugin .............. SUCCESS [  2.634 s]\n[INFO] Struts 2 TestNG Plugin ............................. SUCCESS [  2.081 s]\n[INFO] Struts OSGi Bundles ................................ SUCCESS [  0.083 s]\n[INFO] Struts 2 OSGi Admin Bundle ......................... SUCCESS [  1.237 s]\n[INFO] Struts 2 OSGi Demo Bundle 2.5.24-SNAPSHOT .......... SUCCESS [  1.157 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 02:39 min\n[INFO] Finished at: 2020-08-14T11:24:15+02:00\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Static Content Loader in Struts\nDESCRIPTION: XML configuration for implementing and registering a custom StaticContentLoader implementation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/static-content.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"org.apache.struts2.dispatcher.StaticContentLoader\" class=\"MyStaticContentLoader\" name=\"myLoader\"/>\n<constant name=\"struts.staticContentLoader\" value=\"myLoader\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring XSLT Result with exposedValue Parameter\nDESCRIPTION: XSLT result configuration example showing how to use the exposedValue parameter with an OGNL expression to use a specific action property (user) as the base document for XSLT processing instead of the action itself.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/xsl-result.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"xslt\">\n  <param name=\"stylesheetLocation\">foo.xslt</param>\n  <param name=\"exposedValue\">${user}</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World in Java\nDESCRIPTION: A basic Hello World program example used to demonstrate code block formatting in documentation. Shows proper Java class structure with Javadoc comments.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/documentation-style-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/** Hello World class. */\npublic class HelloWorld {\n  /** Main method. */\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Checkbox List Template\nDESCRIPTION: FreeMarker template for customizing the rendering of checkbox lists in a custom Struts 2 theme.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/themes.md#2025-04-08_snippet_4\n\nLANGUAGE: ftl\nCODE:\n```\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlheader.ftl\" />\n\n<#include \"/${parameters.templateDir}/KUTheme_simple/checkboxlist.ftl\" />\n\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/controlfooter.ftl\" /><#nt/>\n```\n\n----------------------------------------\n\nTITLE: Using Struts 2 Key Attribute in HTML Form\nDESCRIPTION: Demonstrates how to use the Struts 2 key attribute in a textfield tag to reference values from the properties file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<s:textfield key=\"personBean.firstName\"  />\n```\n\n----------------------------------------\n\nTITLE: Using JSP Tags in FreeMarker\nDESCRIPTION: Example of using JSP tags within FreeMarker templates using tag library support.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_7\n\nLANGUAGE: ftl\nCODE:\n```\n<#assign mytag=JspTaglibs[\"/WEB-INF/mytag.tld\"]>\n<@mytag.tagx attribute1=\"some ${value}\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Action Mapping in Struts 2 XML\nDESCRIPTION: Basic XML configuration for a Struts 2 action that handles file uploads. This defines an action named 'doUpload' that maps to the UploadAction class with a success result pointing to 'good_result.jsp'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/file-upload.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"doUpload\" class=\"com.example.UploadAction\">\n    <result name=\"success\">good_result.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: AJAX Anchor with Error Handling\nDESCRIPTION: Shows how to use errorNotifyTopics and loading indicator for error handling in AJAX requests.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-a-tag.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/error\", function(error, request, widget){\n     alert('inside a topic event. on error');\n     //error : error object (error.message has the error message)\n     //request: XMLHttpRequest object\n     //widget: widget that published the topic\n });\n </script>         \n \n <img id=\"ind1\" src=\"${pageContext.request.contextPath}/images/indicator.gif\" style=\"display:none\"/>\n <sx:a errorNotifyTopics=\"/error\" indicator=\"ind1\" href=\"%{#ajaxTest}\">Publish topics</sx:a>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Message Resource Property File in Java\nDESCRIPTION: Defines a properties file named Register.properties with key-value pairs for form field labels and messages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npersonBean.firstName=First name\npersonBean.lastName=Last name\npersonBean.age=Age\npersonBean.email=Email\nthankyou=Thank you for registering %{personBean.firstName}.\n```\n\n----------------------------------------\n\nTITLE: Using Expression Language in Freemarker, Velocity, or JSTL\nDESCRIPTION: Displays the username property of a user object using the standard ${} notation used in Freemarker, Velocity, or JSTL.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_8\n\nLANGUAGE: html\nCODE:\n```\nUsername: ${user.username}\n```\n\n----------------------------------------\n\nTITLE: Defining Struts Tag Attributes in HTML Table\nDESCRIPTION: This HTML snippet defines a table structure documenting various attributes for a Struts tag. It includes information such as attribute names, default values, types, and descriptions for each attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n\t<td align=\"left\" valign=\"top\">indicator</td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\"></td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\">String</td>\n\t<td align=\"left\" valign=\"top\">Set indicator</td>\n</tr>\n<tr>\n\t<td align=\"left\" valign=\"top\">javascriptTooltip</td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\">Boolean</td>\n\t<td align=\"left\" valign=\"top\">Use JavaScript to generate tooltips</td>\n</tr>\n<!-- Additional rows omitted for brevity -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Browser Link in Struts 2\nDESCRIPTION: HTML code to create a link to the Struts 2 configuration browser, which provides details about the framework configuration. This link should be placed on an admin page or anywhere during development.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/debugging-struts.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href='<s:url action=\"index\" namespace=\"config-browser\" />'>Launch the configuration browser</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Key for Apache Distribution\nDESCRIPTION: Commands to create and configure SSH keys for authentication with people.apache.org, including setting up proper permissions and copying public keys to the server.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/one-time-steps.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/.ssh\nchmod 700 ~/.ssh\nssh-keygen -q -f ~/.ssh/id_rsa -t rsa\n#Enter a passphrase\nchmod go-rwx ~/.ssh/*\n\n#copy the public key to people.apache.org\nscp ~/.ssh/id_rsa.pub people.apache.org:/home/$USERNAME\n\n# next, setup the public key on server\nssh people.apache.org\nmkdir ~/.ssh\nchmod 700 ~/.ssh\ncat ~/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\nrm ~/id_rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Maven Plugin\nDESCRIPTION: Maven plugin configuration for running the application using Jetty server with specific context path and scan settings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    ...   \n    <plugins>\n        <plugin>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-maven-plugin</artifactId>\n            <version>9.4.7.v20170914</version>\n            <configuration>\n                <webApp>\n                    <contextPath>/${build.finalName}</contextPath>\n                </webApp>\n                <stopKey>CTRL+C</stopKey>\n                <stopPort>8999</stopPort>\n                <scanIntervalSeconds>10</scanIntervalSeconds>\n                <scanTargets>\n                    <scanTarget>src/main/webapp/WEB-INF/web.xml</scanTarget>\n                </scanTargets>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Configuring Freemarker Template Update Delay\nDESCRIPTION: Configuration setting for freemarker.properties file to control how often Freemarker checks for template updates. Setting a higher value reduces unnecessary disk checks and improves performance.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/performance-tuning.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ntemplate_update_delay=60000\n```\n\n----------------------------------------\n\nTITLE: Adding Static Field and Getter in Java Action Class\nDESCRIPTION: This Java code adds a static integer field 'helloCount' to the HelloWorldAction class and provides a getter method. This demonstrates how Struts 2 can access and display primitive data types.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static int helloCount = 0;\n\npublic int getHelloCount() {\n    return helloCount;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Package Level Properties in HTML\nDESCRIPTION: Shows how to use a property defined in package.properties within an HTML file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<h1><s:text name=\"greeting\" /></h1>\n```\n\n----------------------------------------\n\nTITLE: Using Default Result Type in Struts XML\nDESCRIPTION: Demonstrates how to use the default result type (Dispatcher) without specifying the type attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-types.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\">/WEB-INF/index.jsp</result>\n```\n\n----------------------------------------\n\nTITLE: Custom ActionMapper Implementation in Java\nDESCRIPTION: Example Java code for implementing a custom ActionMapper. This implementation needs to provide methods for mapping requests to actions and converting action mappings back to URIs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class MyCustomActionMapper implements ActionMapper {\n  public ActionMapping getMapping(HttpServletRequest request,\n                                  ConfigurationManager configManager) {\n    ....\n  }\n\n  public String getUriFromActionMapping(ActionMapping mapping) {\n    ....\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Validator XML\nDESCRIPTION: XML configuration for the visitor field validator, defining validation rules for the user object with context and prefix parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-visitor-field-validator.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <field name=\"user\">\n        <field-validator type=\"visitor\">\n            <param name=\"context\">userContext</param>\n            <param name=\"appendPrefix\">true</param>\n            <message>User:</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: WebSphere wsadmin Jython Script for Setting Struts Properties\nDESCRIPTION: A Jython automation script for WebSphere's wsadmin that automatically sets the required custom properties for Struts2. This script finds the appropriate node and server and adds the properties if they don't already exist.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/websphere.md#2025-04-08_snippet_4\n\nLANGUAGE: jython\nCODE:\n```\ndef findObjectName(objectId):\n        index = objectId.find('(')\n        return objectId[0 : index]\n\nnode = AdminNodeManagement.listNodes()[0]\nserver = AdminConfig.list('Server')\n\nnodeName = findObjectName(node)\nserverName = findObjectName(server)\n\nwebContainer = AdminConfig.list('WebContainer', node)\nwebContainerDetails = AdminConfig.show(webContainer)\n\nif webContainerDetails.find(\"com.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror\") == -1:\n        print \"creating prop: com.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror\"\n        AdminServerManagement.configureCustomProperty(nodeName, serverName, \"WebContainer\",\"com.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror\", \"true\")\nif webContainerDetails.find(\"com.ibm.ws.webcontainer.invokefilterscompatibility\") == -1:\n        print \"creating prop: com.ibm.ws.webcontainer.invokefilterscompatibility\"\n        AdminServerManagement.configureCustomProperty(nodeName, serverName, \"WebContainer\", \"com.ibm.ws.webcontainer.invokefilterscompatibility\", \"true\")\n```\n\n----------------------------------------\n\nTITLE: Image Submit Button Implementation in Struts2 Dojo\nDESCRIPTION: Example showing how to render an image submit button using the Struts2 Dojo submit tag with a 'type' attribute set to 'image'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<sx:submit type=\"image\" value=\"%{'Submit'}\" label=\"Submit the form\" src=\"submit.gif\"/>\n```\n\n----------------------------------------\n\nTITLE: Struts Annotations Release Vote Template\nDESCRIPTION: Template for initiating a quality vote for Struts Annotations release. Includes voting options from test build to GA and explains voting rules.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/sample-announcements.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSubject: [VOTE] Struts Annotations 1.0.x Vote\nThe Struts Annotations 1.0.x test build is now available as a Maven\nartifact. It is a dependency of Struts 2.x.y.\n\nIf you have had a chance to review the test build, please respond with\na vote on its quality:\n\n[ ] Leave at test build\n[ ] Alpha\n[ ] Beta\n[ ] General Availability (GA)\n\nEveryone who has tested the build is invited to vote. Votes by PMC members are considered binding. A vote passes \nif there are at least three binding +1s and more +1s than -1s.\n\nThe vote will remain open for at least 72 hours, longer upon request.\n```\n\n----------------------------------------\n\nTITLE: Implementing XStreamProvider for Custom XStream Configuration\nDESCRIPTION: Demonstrates how to implement the XStreamProvider interface in a Struts action to create and configure a custom XStream instance for XML serialization/deserialization. Allows for setting custom aliases for classes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate static class SimpleAction extends ActionSupport implements XStreamProvider {\n    @Override\n    public XStream createXStream() {\n        XStream stream = new XStream(new StaxDriver());\n        stream.alias(\"parents\", ArrayList.class);\n        stream.alias(\"data\", SimpleBean.class);\n        return stream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Interface in Java\nDESCRIPTION: Shows the definition of the Action interface in Java, which is the default entry point for handler classes in Struts. It declares a single method 'execute' that returns a String and may throw an Exception.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface Action {\n    public String execute() throws Exception;\n}\n```\n\n----------------------------------------\n\nTITLE: Test Build Announcement Template\nDESCRIPTION: Template for announcing test builds to the dev list, including release notes, distribution links and Maven repository information.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/sample-announcements.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe test build of Struts 2.0.3 is available.\n\nNo determination as to the quality ('alpha,' 'beta,' or 'GA') of Struts 2.0.3 has been made, and at this time it is \nsimply a \"test build\".  We welcome any comments you may have, and will take all feedback into account if a quality vote \nis called for this build.\n\nRelease notes:\n* [https://cwiki.apache.org/confluence/display/WW/Version+Notes+#.#.#]\n\nDistribution:\n* [https://dist.apache.org/repos/dist/dev/struts/#.#.#/]\n\nMaven 2 staging repository:\n* [https://repository.apache.org/content/groups/staging/]\n\nWe appreciate the time and effort everyone has put toward contributing code and documentation, posting to the mailing \nlists, and logging issues.\n```\n\n----------------------------------------\n\nTITLE: Standard Struts 2 Action Configuration Without Wildcards\nDESCRIPTION: Traditional Struts 2 configuration requiring separate action nodes for each method. This approach needs individual action mappings for each action method (create, edit, etc.), resulting in verbose configuration files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/wildcard-method-selection.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"createPerson\" class=\"org.apache.struts.tutorials.wildcardmethod.action.PersonAction\" method=\"create\">\n    <result name=\"input\">input.jsp</result>\n    <result name=\"success\">view.jsp</result>\n</action>\n\n<action name=\"editPerson\" class=\"org.apache.struts.tutorials.wildcardmethod.action.PersonAction\" method=\"edit\">\n    <result name=\"input\">input.jsp</result>\n    <result name=\"success\">view.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Scope Attribute in JSP\nDESCRIPTION: Example of how to access an attribute stored in the Request scope using Struts 2 tags in a JSP page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"%{#request.myRequestAttribute}\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Names for Same Result in Struts\nDESCRIPTION: XML configuration showing how to define multiple names for the same result using comma-separated values (added in Struts 2.5).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-configuration.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"save\">\n    <result>success.jsp</result>\n    <result name=\"error, input\">input-form.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Local Repository\nDESCRIPTION: Commands for cleaning up local repository after PR is merged, including switching to master and deleting the feature branch.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/submitting-patches.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit fetch -p\ngit pull\ngit branch -d my-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Loading and Error Messages for Ajax Div in Struts\nDESCRIPTION: Example showing how to display custom loading and error messages when retrieving remote data with the ajax div tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-div-template.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<saf:div theme=\"ajax\" id=\"weather\" href=\"http://www.weather.com/weather?zip=97239\"\n        loadingText=\"Loading weather information...\"\n        errorText=\"Unable to contact weather server\">\n    Placeholder...\n</saf:div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Alignment in Markdown for Struts Website\nDESCRIPTION: Examples showing how to align text right, center, left, or justify using Markdown syntax with CSS classes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/updating-website.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nText right\n{:.text-right}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText center\n{:.text-center}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText left\n{:.text-left}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText justify\n{:.text-justify}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Result with Java Annotations\nDESCRIPTION: Example of configuring a Stream Result action using Java annotations. The action class demonstrates sending an image file stream with custom content type, filename, and buffer size settings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/stream-result.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.mycompany.webapp.actions;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\n\nimport org.apache.struts2.convention.annotation.Result;\n\nimport com.opensymphony.xwork2.Action;\nimport com.opensymphony.xwork2.ActionSupport;\n\n@Result(\n\tname = \"success\", \n\ttype = \"stream\", \n\tparams = { \n\t\t\"contentType\", \"${type}\", \n\t\t\"inputName\", \"${stream}\", \n\t\t\"bufferSize\", \"1024\", \n\t\t\"contentDisposition\", \"attachment;filename=\\\"${filename}\\\"\" \n\t}\n)\npublic class FileDisplay extends ActionSupport {\n\n\tprivate String type = \"image/jpeg\";\n\tprivate String filename;\n\tprivate InputStream stream;\n\n\tpublic String execute() throws Exception {\n\n\t\tfilename = \"myimage.jpg\";\n\t\tFile img = new File(\"/path/to/image/image.jpg\");\n\t\tstream = new FileInputStream(img);\n\n\t\treturn Action.SUCCESS;\n\t}\n\t\n\tprivate String getType() {\n\t\treturn this.type;\n\t}\n\t\n\tprivate String getFilename() {\n\t\treturn this.filename;\n\t}\n\t\n\tprivate InputStream getStream() {\n\t\treturn this.stream;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Slashes in Action Names in XML Configuration\nDESCRIPTION: Shows how to enable the use of slashes in action names by setting a constant in the struts.xml file. This is necessary when action names contain slashes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.enable.SlashesInActionNames\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeNotifyTopics with Struts 2 Dojo Submit in XML\nDESCRIPTION: This snippet shows how to use the beforeNotifyTopics attribute with the Struts 2 Dojo Submit component. It subscribes to a '/before' topic that is triggered before the AJAX request is sent, allowing for request cancellation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<script type=\"text/javascript\">\ndojo.event.topic.subscribe(\"/before\", function(event, widget){\n    alert('inside a topic event. before request');\n    //event: set event.cancel = true, to cancel request\n    //widget: widget that published the topic\n});\n</script>\n\n<sx:submit beforeNotifyTopics=\"/before\" />\n```\n\n----------------------------------------\n\nTITLE: Fast-Track Security Release Vote Template\nDESCRIPTION: Template for expedited security release votes, including security bulletin references and fast-track voting procedures.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/sample-announcements.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThe Struts #.#.#.# test build is now available.\n\n(optional (in case of the presence of security bulletin)\nIt includes the latest security patches which fix two possible vulnerabilities:\n* ...\n* ...\n\nFor details and the rationale behind these changes, please consult the\ncorresponding security bulletins:\n* https://cwiki.apache.org/confluence/display/WW/S2-XXX\n* https://cwiki.apache.org/confluence/display/WW/S2-XXX\n\nPlease note that currently these bulletins and the release notes are\nonly visible to logged-in users with the struts-committer role. This is\na needed requirement to control disclosure until the actual release is\nannounced.\n(/optional)\n\nRelease notes:\n* [https://cwiki.apache.org/confluence/display/WW/Version+Notes+#.#.#.#]\n\nDistribution:\n* [https://dist.apache.org/repos/dist/dev/struts/#.#.#.#/]\n\nMaven 2 staging repository:\n* [https://repository.apache.org/content/groups/staging/]\n\nOnce you have had a chance to review the test build, please respond with a vote on its quality:\n\n[ ] Leave at test build\n[ ] Alpha\n[ ] Beta\n[ ] General Availability (GA)\n\nEveryone who has tested the build is invited to vote. Votes by PMC members are considered binding. A vote passes \nif there are at least three binding +1s and more +1s than -1s.\n\nThis is a \"fast-track\" release vote. If we have a positive vote after 24 hours (at least three binding +1s and more +1s \nthan -1s), the release may be submitted for mirroring and announced to the usual channels.\n\nThe website download link will include the mirroring timestamp parameter [1], which limits the selection of mirrors \nto those that have been refreshed since the indicated time and date. (After 24 hours, we *must* remove the timestamp\nparameter from the website link, to avoid unnecessary server load.) In the case of a fast-track release, the email \nannouncement will not link directly to <download.cgi>, but to <downloads.html>, so that we can control use of the timestamp \nparameter.\n\n[1] <[http://apache.org/dev/mirrors.html#use|http://apache.org/dev/mirrors.html#use]>\n\n- The Apache Struts group.\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Parameters in FreeMarker\nDESCRIPTION: Examples showing how to access context parameters using FreeMarker stack and Struts property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_6\n\nLANGUAGE: ftl\nCODE:\n```\n${stack.findValue('#myContextParam')}\n```\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.property value=\"%{#myContextParam}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Struts 2.5 DTD for Strict Method Invocation\nDESCRIPTION: XML snippet showing how to define the Struts 2.5 DTD for use with Strict Method Invocation (SMI). This is required to use the latest configuration options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-configuration.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n        \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n        \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n<struts>\n...\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Web XML\nDESCRIPTION: Illustrates how to set a constant as an initialization parameter in the web.xml file. This example configures the Struts filter and sets the 'struts.devMode' parameter to true.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/constant-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<web-app id=\"WebApp_9\" version=\"2.4\" \n\txmlns=\"http://java.sun.com/xml/ns/j2ee\" \n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n\n    <filter>\n        <filter-name>struts</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.StrutsPrepareAndExecuteFilter</filter-class>\n        <init-param>\n        \t<param-name>struts.devMode</param-name>\n        \t<param-value>true</param-value>\n        </init-param>\n    </filter>\n\n    ...\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameter in JSP\nDESCRIPTION: Example of how to access a request parameter using Struts 2 tags in a JSP page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/jsp.md#2025-04-08_snippet_5\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"%{#parameters.myParameter}\" />\n```\n\n----------------------------------------\n\nTITLE: PrefixBasedActionProxyFactory Configuration in Struts XML\nDESCRIPTION: XML configuration for enabling the PrefixBasedActionProxyFactory, which should be used with PrefixBasedActionMapper to connect appropriate ActionProxyFactory with a given ActionMapper.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.actionProxyFactory\" value=\"prefix\"/>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Dynamic Attributes\nDESCRIPTION: The resulting HTML output from using dynamic attributes with Struts tags in Freemarker. Shows how the attributes are incorporated into the generated HTML element.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"test\" value=\"\" id=\"test\" placeholder=\"input\" foo=\"bar\"/>\n```\n\n----------------------------------------\n\nTITLE: Java Validation Annotation\nDESCRIPTION: Example of using validation annotations with parameterized messages in Java code.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@RequiredStringValidator(key = \"errors.required\", messageParams = {\n    \"getText('username.field.name')\"\n})\n@StrutsParameter\npublic void setUsername(String username) {\n    this.username = username;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling XML Configuration Reloading in Struts Properties\nDESCRIPTION: Setting to enable dynamic reloading of XML configuration files like actions.xml in Struts. This allows for configuration changes to take effect without server restart, though it may impact performance.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/reloading-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nstruts.configuration.xml.reload=true\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Struts Component Properties\nDESCRIPTION: HTML table rows documenting component properties including their names, default values, types and descriptions. The table includes configuration for event handlers, label settings, node properties and display options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n<td align=\"left\" valign=\"top\">key</td>\n<td align=\"left\" valign=\"top\">false</td>\n<td align=\"left\" valign=\"top\"></td>\n<td align=\"left\" valign=\"top\">false</td>\n<td align=\"left\" valign=\"top\">String</td>\n<td align=\"left\" valign=\"top\">Set the key (name, value, label) for this particular component</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Skipping Confluence Page Export in Maven Build\nDESCRIPTION: Shows the Maven command to skip exporting pages from Confluence during the build process.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -DskipWiki\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Mode in Struts XML Configuration\nDESCRIPTION: Configuration snippet to enable development mode in Struts by setting struts.devMode to true in struts.xml\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/debugging.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.devMode\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Annotated Action Classes in Java\nDESCRIPTION: Example showing base and child action classes with annotated methods. The @Before, @BeforeResult, and @After annotations control execution flow around the main execute() method, with inheritance properly handled in the execution chain.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/annotation-workflow-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  public class BaseAnnotatedAction {\n  \tprotected String log = \"\";\n\n  \t@Before\n  \tpublic String baseBefore() {\n  \t\tlog = log + \"baseBefore-\";\n  \t\treturn null;\n  \t}\n  }\n\n  public class AnnotatedAction extends BaseAnnotatedAction {\n  \t@Before\n  \tpublic String before() {\n  \t\tlog = log + \"before\";\n  \t\treturn null;\n  \t}\n\n  \tpublic String execute() {\n  \t\tlog = log + \"-execute\";\n  \t\treturn Action.SUCCESS;\n  \t}\n\n  \t@BeforeResult\n  \tpublic void beforeResult() throws Exception {\n  \t\tlog = log +\"-beforeResult\";\n  \t}\n\n  \t@After\n  \tpublic void after() {\n  \t\tlog = log + \"-after\";\n  \t}\n  }\n```\n\n----------------------------------------\n\nTITLE: Struts Configuration in XML\nDESCRIPTION: This XML configuration defines two actions that map to the ActionTagAction class. The first action uses the default execute method, while the second explicitly maps to the 'default' method. Both return to a success.jsp page on completion.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/action-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <struts>\n      ....\n     <action name=\"actionTagAction1\" class=\"tmjee.testing.ActionTagAction\">\n         <result name=\"done\">success.jsp</result>\n     </action>\n      <action name=\"actionTagAction2\" class=\"tmjee.testing.ActionTagAction\" method=\"default\">\n         <result name=\"done\">success.jsp</result>\n     </action>\n      ....\n   </struts>\n```\n\n----------------------------------------\n\nTITLE: Configuration Reference for Struts Dispatcher Error Handler\nDESCRIPTION: Reference for configuring custom error handling in Struts Dispatcher through the struts.dispatcher.errorHandler extension point. The Dispatcher uses DispatcherErrorHandler to manage exceptions, defaulting to HttpServletResponse#sendError for 404 or 500 errors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/dispatcher.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstruts.dispatcher.errorHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Conversion using Conversion Annotation in Java\nDESCRIPTION: Example demonstrates how to use the @Conversion annotation at the type level to specify custom type conversions. The example shows converting a Date property using a custom converter class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @Conversion(\n     conversions = {\n          // key must be the name of a property for which converter should be used\n          @TypeConversion(key = \"date\", converter = \"org.demo.converter.DateConverter\")\n     }\n )\n public class ConversionAction implements Action {\n\n     private Date date;\n\n     public setDate(Date date) {\n         this.date = date;\n     }\n\n     public Date getDate() {\n         return date;\n     }\n\n }\n```\n\n----------------------------------------\n\nTITLE: Basic InputTransferSelect Implementation in JSP\nDESCRIPTION: Shows a basic implementation of the inputtransferselect tag with a label, name attribute, and a list of cartoon characters as options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/inputtransferselect-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:inputtransferselect\n     label=\"Favourite Cartoons Characters\"\n     name=\"cartoons\"\n     list=\"{'Popeye', 'He-Man', 'Spiderman'}\"\n />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ActionProxy in Struts\nDESCRIPTION: Example showing how to create a custom ActionProxy by overriding the createActionProxy methods in a custom ActionProxyFactory. This allows for customized handling of Action class instantiation and execution.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-proxy-and-actionproxy-factory.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n ActionProxyFactory.getFactory(new MyActionProxyFactory() {\n    ....\n    public ActionProxy createActionProxy(Configuration config,\n           String namespace, String actionName, Map extraContext)\n           throws Exception {\n        createActionProxy(config, namespace, actionName, extraContext, true);\n    }\n    public ActionProxy createActionProxy(Configuration config,\n           String namespace, String actionName, Map extraContext,\n           boolean executeResult, boolean cleanupContext)\n           throws Exception {\n        ....\n   }\n   ....\n });\n\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeResult Annotation in Java for Apache Struts Action\nDESCRIPTION: This snippet demonstrates how to use the BeforeResult annotation in an Apache Struts action class. The annotated method 'isValid()' is executed before the result, allowing for validation or other pre-result processing. The execute() method performs the main action logic.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/before-result-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleAction extends ActionSupport {\n\n  @BeforeResult\n  public void isValid() throws ValidationException {\n    // validate model object, throw exception if failed\n  }\n\n  public String execute() {\n     // perform action\n     return SUCCESS;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Struts 2 Welcome Page with URL Tag\nDESCRIPTION: Example JSP page showing how to use Struts 2 taglib directive and url tag to create a dynamic link to hello action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Basic Struts 2 Application - Welcome</title>\n  </head>\n  <body>\n    <h1>Welcome To Struts 2!</h1>\n    <p><a href=\"<s:url action='hello'/>\">Hello World</a></p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Regex Validation in Apache Struts XML Configuration\nDESCRIPTION: Examples of regex validator implementation in Apache Struts using both Plain Validator Syntax and Field Validator Syntax. The example shows how to validate a field called 'myStrangePostcode' with a specific regular expression pattern, and demonstrates expression-based configuration options.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/regex-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"regex\">\n        <param name=\"fieldName\">myStrangePostcode</param>\n        <param name=\"regex\"><![CDATA[([aAbBcCdD][123][eEfFgG][456])]]></param>\n    </validator>\n \n    <!-- Field Validator Syntax -->\n    <field name=\"myStrangePostcode\">\n        <field-validator type=\"regex\">\n            <param name=\"regex\"><![CDATA[([aAbBcCdD][123][eEfFgG][456])]]></param>\n        </field-validator>\n    </field>\n \n    <!-- Field Validator Syntax with expressions -->\n    <field name=\"myStrangePostcode\">\n        <field-validator type=\"regex\">\n            <param name=\"regexExpression\">${regexValue}</param> <!-- will be evaluated as: String getRegexValue() -->\n            <param name=\"caseSensitiveExpression\">${caseSensitiveValue}</param> <!-- will be evaluated as: boolean getCaseSensitiveValue() -->\n            <param name=\"trimExpression\">${trimValue}</param> <!-- will be evaluated as: boolean getTrimValue() -->\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Configuring Execute and Wait Interceptor with Initial Delay\nDESCRIPTION: This XML configuration demonstrates how to set an initial delay for the Execute and Wait Interceptor. It uses a 2-second (2000 milliseconds) delay before showing the wait page to the user.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/execute-and-wait-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"completeStack\"/>\n    <interceptor-ref name=\"execAndWait\">\n        <param name=\"delay\">2000</param>\n    </interceptor-ref>\n    <result name=\"wait\">longRunningAction-wait.jsp</result>\n    <result name=\"success\">longRunningAction-success.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Documenting Struts Tag Attributes in HTML Table\nDESCRIPTION: This HTML snippet defines a table structure documenting various attributes of a Struts tag. Each row represents an attribute, with columns for the attribute name, whether it's required, default value, type, and description.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-a-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n\t<td align=\"left\" valign=\"top\">key</td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\"></td>\n\t<td align=\"left\" valign=\"top\">false</td>\n\t<td align=\"left\" valign=\"top\">String</td>\n\t<td align=\"left\" valign=\"top\">Set the key (name, value, label) for this particular component</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Including Struts Dojo Tags in JSP\nDESCRIPTION: JSP taglib directive to include Struts Dojo tags in a page. Required for using Ajax functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-tags.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<%@ taglib prefix=\"sx\" uri=\"/struts-dojo-tags\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Action in Struts 2 XML\nDESCRIPTION: XML configuration for defining an action without specifying a class, which will use the default action class (ActionSupport) defined in struts-default.xml.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"index\">\n   <result>/index.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating a Wait Page with Auto-Refresh in HTML and Struts Tags\nDESCRIPTION: This HTML snippet shows how to create a wait page that automatically refreshes to check the status of a long-running action. It uses Struts tags to generate the URL and includes a manual refresh link as a fallback.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/execute-and-wait-interceptor.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<%@ taglib prefix=\"s\" uri=\"/struts\" %>\n<html>\n<head>\n    <title>Please wait</title>\n    <meta http-equiv=\"refresh\" content=\"5;url=<s:url includeParams='all' />\"/>\n</head>\n<body>\nPlease wait while we process your request.\nClick <a href=\"<s:url includeParams=\" all\" />\"></a> if this page does not reload automatically.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Struts Head Tag in JSP\nDESCRIPTION: Example showing how to incorporate the Struts head tag within an HTML head section. The tag is used alongside standard HTML head elements like title.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/head-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n <head>\n   <title>My page</title>\n   <s:head/>\n </head>\n```\n\n----------------------------------------\n\nTITLE: Defining RESTful URL Pattern in Apache Struts\nDESCRIPTION: Demonstrates the URL format used by RestfulActionMapper, allowing for flexible parameter passing in a RESTful style.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/restful-action-mapper.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://HOST/ACTION_NAME/PARAM_NAME1/PARAM_VALUE1/PARAM_NAME2/PARAM_VALUE2\n```\n\n----------------------------------------\n\nTITLE: XSLT Template for Accessing Action Properties\nDESCRIPTION: An XSLT template that matches the root result element and accesses the username property from the action class using value-of select. The root match must be named 'result' in Struts XSLT processing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/xsl-result.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<xsl:template match=\"result\">\n  <html>\n    <body>\n      Hello <xsl:value-of select=\"username\"/> how are you?\n    </body>\n  </html>\n</xsl:template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Short Validator in Apache Struts XML\nDESCRIPTION: Examples demonstrating three different ways to configure the short validator: using Plain Validator Syntax, Field Validator Syntax, and Field Validator Syntax with expressions. The validator checks if a short value falls within specified minimum and maximum bounds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/short-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <!-- Plain Validator Syntax -->\n    <validator type=\"short\">\n        <param name=\"fieldName\">age</param>\n        <param name=\"min\">20</param>\n        <param name=\"max\">50</param>\n        <message>Age needs to be between ${min} and ${max}</message>\n    </validator>\n \n    <!-- Field Validator Syntax -->\n    <field name=\"age\">\n        <field-validator type=\"short\">\n            <param name=\"min\">20</param>\n            <param name=\"max\">50</param>\n            <message>Age needs to be between ${min} and ${max}</message>\n        </field-validator>\n    </field>\n \n    <!-- Field Validator Syntax with expression -->\n    <field name=\"age\">\n        <field-validator type=\"short\">\n            <param name=\"minExpression\">${minValue}</param> <!-- will be evaluated as: Short getMinValue() -->\n            <param name=\"maxExpression\">${maxValue}</param> <!-- will be evaluated as: Short getMaxValue() -->\n            <message>Age needs to be between ${min} and ${max}</message>\n        </field-validator>\n    </field>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Performing Struts Annotations Release\nDESCRIPTION: Maven command to perform the release of Struts Annotations. This step builds and deploys the release artifacts to a staging repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-annotations.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:perform\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 to Use Only Global Resource Bundles\nDESCRIPTION: XML configuration to use GlobalLocalizedTextProvider which only searches in global bundles and skips package scan functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/localization.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.localizedTextProvider\" value=\"global-only\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Target Content with AJAX Anchor\nDESCRIPTION: Example showing how to use the sx:a tag to update a div element's content via AJAX request.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-a-tag.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <div id=\"div1\">Div 1</div>\n <s:url id=\"ajaxTest\" value=\"/AjaxTest.action\"/>\n \n <sx:a id=\"link1\" href=\"%{ajaxTest}\" target=\"div1\">\n      Update Content\n </sx:a>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Exception Handling in Struts 2 XML\nDESCRIPTION: This XML snippet demonstrates how to configure global exception handling in struts.xml with global-results and global-exception-mappings elements. It maps specific exception types to appropriate result pages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/exception-handling.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<global-results>\n    <result name=\"securityerror\">/securityerror.jsp</result>\n    <result name=\"error\">/error.jsp</result>\n</global-results>\n\n<global-exception-mappings>\n    <exception-mapping exception=\"org.apache.struts.register.exceptions.SecurityBreachException\" result=\"securityerror\" />\n    <exception-mapping exception=\"java.lang.Exception\" result=\"error\" />\n</global-exception-mappings>\n```\n\n----------------------------------------\n\nTITLE: Using RegexFieldValidator Annotation in Java\nDESCRIPTION: Example of how to apply the RegexFieldValidator annotation to validate a field using a regular expression. The annotation specifies a key for the error message and the regular expression pattern to validate against.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/regex-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n @RegexFieldValidator( key = \"regex.field\", regex = \"yourregexp\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Execute and Wait Interceptor with Custom Delay and Sleep Interval\nDESCRIPTION: This XML snippet shows how to configure the Execute and Wait Interceptor with a custom initial delay and sleep interval. It sets a 1-second delay and checks the background process status every 50 milliseconds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/execute-and-wait-interceptor.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"someAction\" class=\"com.examples.SomeAction\">\n    <interceptor-ref name=\"completeStack\"/>\n    <interceptor-ref name=\"execAndWait\">\n        <param name=\"delay\">1000</param>\n        <param name=\"delaySleepInterval\">50</param>\n    </interceptor-ref>\n    <result name=\"wait\">longRunningAction-wait.jsp</result>\n    <result name=\"success\">longRunningAction-success.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conversion Behavior in Iterator Tag (JSP)\nDESCRIPTION: This example shows how to use the iterator tag with conversion behavior, demonstrating the difference between default conversion and using the status object for string representation of numbers.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/iterator-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator begin=\"1\" end=\"3\" status=\"status\">\n    <s:property/>\n    <s:textfield id=\"text_%{#status.countStr}\" name=\"test[%{#status.indexStr}]\"/>\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Additional Struts Configuration for Restful2ActionMapper\nDESCRIPTION: Specifies additional constants required for Restful2ActionMapper to function properly.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/restful-action-mapper.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.enable.SlashesInActionNames\" value=\"true\" />\n<constant name=\"struts.mapper.alwaysSelectFullNamespace\" value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Markdown configuration for table of contents generation with exclusion of header.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/editing-the-documentation.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Editing the Documentation\n{:.no_toc}\n\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Overriding Convention Plugin Bean in XML\nDESCRIPTION: Example of how to override a default Convention Plugin bean implementation. This snippet shows how to replace the default ActionNameBuilder with a custom implementation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"org.apache.struts2.convention.ActionNameBuilder\" name=\"MyActionNameBuilder\" class=\"example.SultansOfSwingNameBuilder\"/>\n<constant name=\"struts.convention.actionNameBuilder\" value=\"MyActionNameBuilder\"/>\n```\n\n----------------------------------------\n\nTITLE: Email Validator Implementation Examples in XML Configuration\nDESCRIPTION: Examples of implementing the email validator in Struts using different syntaxes: Plain-Validator Syntax, Field Validator Syntax, and Field Validator Syntax with expressions. Shows how to specify the field to validate and customize error messages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/email-validator.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Plain Validator Syntax -->\n<validators>\n    <validator type=\"email\">\n        <param name=\"fieldName\">myEmail</param>\n        <message>Must provide a valid email</message>\n    </validator>\n</validators>\n \n<!-- Field Validator Syntax -->\n<field name=\"myEmail\">\n   <field-validator type=\"email\">\n      <message>Must provide a valid email</message>\n   </field-validator>\n</field>\n \n<!-- Field Validator Syntax with expressions -->\n<!-- Only available when used with xml based configuration, if you want to have the same\n        flexibility with annotations use @RegexFieldValidator instead -->\n<field name=\"myEmail\">\n   <field-validator type=\"email\">\n      <param name=\"regexExpression\">${emailPattern}</param> <!-- will be evaluated as: String getEmailPattern() -->\n      <param name=\"caseSensitiveExpression\">${emailCaseSensitive}</param> <!-- will be evaluated as: boolean getEmailCaseSensitive() -->\n      <param name=\"trimExpression\">${trimEmail}</param> <!-- will be evaluated as: boolean getTrimEmail() -->\n      <message>Must provide a valid email</message>\n   </field-validator>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Configuring PlainText Result in Struts XML\nDESCRIPTION: Examples showing how to configure the PlainText Result type in Struts configuration. Demonstrates both simple usage with default parameters and advanced usage with explicit character set specification.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/plaintext-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"displayJspRawContent\" >\n  <result type=\"plainText\">/myJspFile.jsp</result>\n</action>\n\n<action name=\"displayJspRawContent\" >\n  <result type=\"plainText\">\n     <param name=\"location\">/myJspFile.jsp</param>\n     <param name=\"charSet\">UTF-8</param>\n  </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using afterNotifyTopics with Autocompleter in Struts 2\nDESCRIPTION: Shows how to use afterNotifyTopics to execute JavaScript code after an AJAX request is completed successfully. Provides access to the response data, the XMLHttpRequest object, and the widget that published the topic.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-autocompleter-tag.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n <script type=\"text/javascript\">\n dojo.event.topic.subscribe(\"/after\", function(data, request, widget){\n     alert('inside a topic event. after request');\n     //data : JavaScript object from parsing response\n     //request: XMLHttpRequest object\n     //widget: widget that published the topic\n });\n </script>        \n \n <sx:autocompleter afterNotifyTopics=\"/after\" href=\"%{#ajaxTest}\" />\n\n```\n\n----------------------------------------\n\nTITLE: Improved Hidden Input with Static Imports in Java\nDESCRIPTION: A code snippet demonstrating how static imports can improve readability of the hidden input field implementation by reducing verbosity.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/coding-standards.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\na.add(\"type\", \"hidden\")\n .add(\"id\", \"__multiselect_\" + defaultString(escapeHtml4(id)));\n```\n\n----------------------------------------\n\nTITLE: Configuring Conversion Error Interceptor in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure an action to use the Conversion Error Interceptor in a Struts configuration file. It shows the interceptor being referenced alongside the params interceptor.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conversion-error-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"params\"/>\n     <interceptor-ref name=\"conversionError\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with s:text Tag\nDESCRIPTION: JSP code demonstrating date formatting using the s:text tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/formatting-dates-and-numbers.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:text name=\"format.date\"><s:param value=\"dueDate\"/></s:text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Struts Action in XML\nDESCRIPTION: Example XML configuration for a regular Struts Action that doesn't use JSF integration. This shows the basic structure with interceptors and results for comparison purposes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/jsf/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"employee\" class=\"org.apache.struts.action2.showcase.jsf.EmployeeAction\">\n    <interceptor-ref name=\"basicStack\"/>\n    <result name=\"success\">employee.jsp</result>\n    <result name=\"index\" type=\"redirect-action\">index</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Adding Convention Plugin Dependency in Maven POM\nDESCRIPTION: XML snippet showing how to add the Convention plugin dependency to a Maven project's POM file. The version needs to be replaced with the current Struts version (2.1.6 or later).\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.struts</groupId>\n    <artifactId>struts2-convention-plugin</artifactId>\n    <version>X.X.X</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Tabs in Struts Tabbed Panel\nDESCRIPTION: Demonstrates how to create a tabbed panel with disabled tabs. Disabled tabs cannot be selected by the user until they are enabled programmatically.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-and-javascript-recipes.md#2025-04-08_snippet_38\n\nLANGUAGE: jsp\nCODE:\n```\n<sx:tabbedpanel id=\"tabContainer\">\n   <sx:div label=\"Tab 1\" >\n       Local Tab 1\n   </sx:div>   \n   <sx:div label=\"Tab 2\" disabled=\"true\">\n       Local Tab 2\n   </sx:div>   \n</sx:tabbedpanel>\n```\n\n----------------------------------------\n\nTITLE: Struts 2 Login Action Mapping\nDESCRIPTION: XML configuration for Login action with method wildcard and multiple results.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/struts2-archetype-blank.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"Login_*\" method=\"{1}\" class=\"tutorial2.example.Login\">\n  <result name=\"input\">/example/Login.jsp</result>\n  <result type=\"redirectAction\">Menu</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Implementing DoubleRangeFieldValidator Annotation in Java\nDESCRIPTION: This code snippet demonstrates how to use the DoubleRangeFieldValidator annotation in Java. It sets a message, i18n key, shortCircuit flag, and inclusive minimum and maximum values for the validator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/double-range-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@DoubleRangeFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true, minInclusive = \"0.123\", maxInclusive = \"99.987\")\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Tag Developers Guide\nDESCRIPTION: YAML front matter block that configures the page layout and title for the Struts Tag Developers Guide documentation page. It specifies a default layout to be used and sets the page title.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-textarea-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet Config Interceptor in Struts XML\nDESCRIPTION: Example showing how to configure an action with the servletConfig interceptor and basicStack in Struts configuration. The action class is set with appropriate interceptor references and success result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/servlet-config-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"someAction\" class=\"com.examples.SomeAction\">\n     <interceptor-ref name=\"servletConfig\"/>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.ftl</result>\n </action>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing a User from a Mailing List with Custom Email Format\nDESCRIPTION: Code snippet showing the email format used by moderators to unsubscribe a user from an Apache Struts mailing list. The format requires replacing the @ in the email with = and using a specific address structure.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/mail.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{listname}-unsubscribe-badboy=menace.com@tlp.apache.org\n```\n\n----------------------------------------\n\nTITLE: XML Validator Configuration Header\nDESCRIPTION: XML header configuration for validation file showing DOCTYPE and schema reference.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE validators PUBLIC\n        \"-//Apache Struts//XWork Validator 1.0.3//EN\"\n        \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\">\n<validators>\n  ...\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Value Exclusion in Struts XML\nDESCRIPTION: Example configuration showing how to exclude specific parameter values and accept only alphanumeric values\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/parameters-interceptor.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<interceptors>\n  <interceptor-stack name=\"appDefault\">\n    <interceptor-ref name=\"defaultStack\">\n       <param name=\"exception.logEnabled\">true</param>\n       <param name=\"exception.logLevel\">ERROR</param>\n       <param name=\"params.excludedValuePatterns\">.*\\$\\{.*?\\}.*,.*%\\{.*?\\}.*</param>\n       <param name=\"params.acceptedValuePatterns\">[a-zA-Z0-9]*</param>\n    </interceptor-ref>\n  </interceptor-stack>\n</interceptors>\n\n<default-interceptor-ref name=\"appDefault\" />\n```\n\n----------------------------------------\n\nTITLE: Using ActionError Tag in JSP with Apache Struts\nDESCRIPTION: This snippet demonstrates how to use the actionerror tag in a JSP file within an Apache Struts application. The tag is placed before a form to display any action errors that may exist.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/actionerror-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n    <s:actionerror />\n    <s:form .... >\n       ....\n    </s:form>\n```\n\n----------------------------------------\n\nTITLE: JBoss-specific Struts 2 Configuration\nDESCRIPTION: Required XML configuration settings for running Struts 2 Convention Plugin on JBoss.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.convention.exclude.parentClassLoader\" value=\"true\" />\n<constant name=\"struts.convention.action.fileProtocols\" value=\"jar,vfsfile,vfszip\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining layout, title and parent page hierarchy.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/dependency-injection.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: default\ntitle: Dependency Injection\nparent:\n  title: Core Developers\n  url: index\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatcher Result in Struts XML\nDESCRIPTION: Example of configuring a dispatcher result type in Struts XML configuration. The result forwards to 'foo.jsp' on success. The location parameter specifies the target JSP file to forward to.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/dispatcher-result.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"dispatcher\">\n  <param name=\"location\">foo.jsp</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Defining Head Template in css_xhtml Theme (FreeMarker)\nDESCRIPTION: This snippet shows the head template for the css_xhtml theme, which includes CSS for layout and supports JavaScript validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/css-xhtml-theme.md#2025-04-08_snippet_3\n\nLANGUAGE: freemarker\nCODE:\n```\n<#include \"/${parameters.templateDir}/css_xhtml/head-common.ftl\" />\n<#if parameters.xhtml?default(false)>\n<#include \"/${parameters.templateDir}/css_xhtml/head-xhtml.ftl\" />\n<#else>\n<#include \"/${parameters.templateDir}/css_xhtml/head-html.ftl\" />\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Interceptor in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure the validation interceptor in Struts to validate only annotated methods and exclude specific methods from validation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/validation-annotation.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-ref name=\"validation\">\n    <param name=\"validateAnnotatedMethodOnly\">true</param>\n    <param name=\"excludeMethods\">input,back,cancel,browse</param>\n</interceptor-ref>\n```\n\n----------------------------------------\n\nTITLE: Displaying All Field Errors with fielderror Tag in JSP\nDESCRIPTION: Basic example that shows how to use the fielderror tag to display all field errors on a page. The field errors will be HTML escaped by default and the layout will depend on the theme used.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/fielderror-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:fielderror />\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Mapper in Struts XML\nDESCRIPTION: Basic XML configuration to enable REST action mapper in Struts 2.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/rest/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.mapper.class\" value=\"rest\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Scoped Attributes in JSP Templates with OGNL\nDESCRIPTION: Examples of how to access application, session, request, and page scoped attributes in JSP templates using OGNL expressions with the s:property tag. The #attr reference will search through page, request, session, and application scopes in that order.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/accessing-application-session-request-objects.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:property value=\"#application.myId\" />\n\n<s:property value=\"#session.myId\" />\n\n<s:property value=\"#request.myId\" />\n\n<s:property value=\"#attr.myId\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ConditionalVisitorFieldValidator in XML for Apache Struts\nDESCRIPTION: This example demonstrates how to use the conditionalvisitor field validator in a Struts XML configuration file. The validator will only pass validation to the VisitorFieldValidator if the specified expression evaluates to true. In this case, validation will only proceed if 'reason' equals 'colleague' and 'colleaguePositionID' equals 'OTHER'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/conditionalvisitor-validator.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"colleaguePosition\">\n    <field-validator type=\"conditionalvisitor\">\n        <param name=\"expression\">reason == 'colleague' and colleaguePositionID == 'OTHER'</param>\n        <message>You must select reason Colleague and position Other</message>\n    </field-validator>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Footer in XHTML Theme\nDESCRIPTION: The controlfooter.ftl template that closes the table structure created by controlheader and adds support for an 'after' parameter for additional customization.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/xhtml-theme.md#2025-04-08_snippet_3\n\nLANGUAGE: freemarker\nCODE:\n```\n<#--\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n-->\n<#if parameters.after??>\n${parameters.after?html}<#t/>\n</#if>\n        </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: WebSphere Admin Console Configuration Path\nDESCRIPTION: Path in the WebSphere administration console where custom properties for Struts2 need to be added. This helps administrators locate where to set the required properties.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/websphere.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nServers > Application servers > {server name} > Web container > Custom Properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Convention Plugin for WebLogic Deployment\nDESCRIPTION: Properties to add to struts.properties file to make Struts Convention Plugin work correctly in WebLogic. These settings modify the JAR scanning behavior to include the application's JAR files and support proper file protocols.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/weblogic.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n#struts convention property modifications for Weblogic\nstruts.convention.action.includeJars=.*?/yourwebapp.*?jar(!/)?\nstruts.convention.action.fileProtocols=jar,zip\n```\n\n----------------------------------------\n\nTITLE: Applying RequiredFieldValidator Annotation in Java\nDESCRIPTION: This snippet demonstrates how to apply the RequiredFieldValidator annotation to a method in Java. It includes parameters for the message, i18n key, and shortCircuit behavior.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/required-field-validator-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RequiredFieldValidator(message = \"Default message\", key = \"i18n.key\", shortCircuit = true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Parameter Evaluation in Interceptors\nDESCRIPTION: Demonstrates how to implement lazy parameter evaluation in interceptors using the WithLazyParams interface. Includes both XML configuration and Java implementation examples.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"LazyFoo\" class=\"com.opensymphony.xwork2.SimpleAction\">\n    <result name=\"success\">result.jsp</result>\n    <interceptor-ref name=\"lazy\">\n        <param name=\"foo\">${bar}</param>\n    </interceptor-ref>\n</action>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class MockLazyInterceptor extends AbstractInterceptor implements WithLazyParams {\n\n    private String foo = \"\";\n\n    public void setFoo(String foo) {\n        this.foo = foo;\n    }\n\n    public String intercept(ActionInvocation invocation) throws Exception {\n        ....\n        return invocation.invoke();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Action with Plexus ID in XML\nDESCRIPTION: Example showing how to configure a Struts action using a Plexus object ID in struts.xml instead of a Java class name. This allows Plexus to manage the object creation and dependency injection.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plexus/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myAction\" class=\"myPlexusId\">\n  <result>myAction.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Simplified CompositeActionMapper Configuration in Struts XML\nDESCRIPTION: A simplified example of CompositeActionMapper configuration with two mappers: the default mapper and the restful mapper.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-mapper.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.mapper.class\" value=\"composite\" />\n<constant name=\"struts.mapper.composite\" value=\"struts,restful\" />\n```\n\n----------------------------------------\n\nTITLE: Struts Default Configuration File Reference\nDESCRIPTION: Reference to the main Struts configuration file that contains framework resource definitions and configurations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/configuration-elements.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nstruts.xml\n```\n\n----------------------------------------\n\nTITLE: Creating JSP Form for Non-Field Validation in Struts\nDESCRIPTION: HTML form implementation using Struts tags to collect multiple text inputs that will be cross-validated. The form submits to the 'submitNonFieldValidatorsExamples' action and includes error display capability.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-non-field-validators.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<s:actionerror/>\n\n<s:form method=\"POST\" action=\"submitNonFieldValidatorsExamples\" namespace=\"/validation\">\n    <s:textfield name=\"someText\" label=\"Some Text\"/>\n    <s:textfield name=\"someTextRetype\" label=\"Retype Some Text\"/>\n    <s:textfield name=\"someTextRetypeAgain\" label=\"Retype Some Text Again\"/>\n    <s:submit label=\"Submit\" cssClass=\"btn btn-primary\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Control Header in FreeMarker\nDESCRIPTION: FreeMarker template for rendering the header of a form control, including label positioning and error message handling. It sets up the structure for displaying labels and error messages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n <#--\n    Always include elements to show errors. They may be filled later via AJAX.\n-->\n<#assign hasFieldErrors = parameters.name?? && fieldErrors?? && fieldErrors[parameters.name]??/>\n<#if (parameters.errorposition!\"top\") == 'top'>\n<tr errorFor=\"${parameters.id}\">\n    <td class=\"tdErrorMessage\" colspan=\"2\" data-error-for-fieldname=\"${parameters.name}\"><#rt/>\n        <#if hasFieldErrors>\n            <#list fieldErrors[parameters.name] as error>\n                <div class=\"errorMessage\">${error?html}</div><#t/>\n            </#list>\n        </#if>\n    </td><#lt/>\n</tr>\n</#if>\n<#if !parameters.labelposition?? && (parameters.form.labelposition)??>\n<#assign labelpos = parameters.form.labelposition/>\n<#elseif parameters.labelposition??>\n<#assign labelpos = parameters.labelposition/>\n</#if>\n<#--\n    if the label position is top,\n    then give the label it's own row in the table\n-->\n<tr>\n<#if (labelpos!\"\") == 'top'>\n    <td class=\"tdLabelTop\" colspan=\"2\"><#rt/>\n<#else>\n    <td class=\"tdLabel\"><#rt/>\n</#if>\n<#if parameters.label??>\n    <label <#t/>\n<#if parameters.id??>\n        for=\"${parameters.id?html}\" <#t/>\n</#if>\n<#if hasFieldErrors>\n        class=\"errorLabel\"<#t/>\n<#else>\n        class=\"label\"<#t/>\n</#if>\n    ><#t/>\n<#if parameters.required!false && parameters.requiredPosition!\"right\" != 'right'>\n        <span class=\"required\">*</span><#t/>\n</#if>\n${parameters.label?html}<#t/>\n<#if parameters.required!false && parameters.requiredPosition!\"right\" == 'right'>\n <span class=\"required\">*</span><#t/>\n</#if>\n${parameters.labelseparator!\":\"?html}<#t/>\n<#include \"/${parameters.templateDir}/${parameters.expandTheme}/tooltip.ftl\" />\n</label><#t/>\n</#if>\n    </td><#lt/>\n<#-- add the extra row -->\n<#if (labelpos!\"\") == 'top'>\n</tr>\n<tr>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed File Types for Upload Interceptor in Struts XML\nDESCRIPTION: This XML snippet shows how to configure the actionFileUpload interceptor with allowed file types. It demonstrates setting the allowedTypes parameter to restrict uploads to specific image formats.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload-interceptor.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<interceptor-ref name=\"actionFileUpload\">\n  <param name=\"allowedTypes\">\n     image/png,image/gif,image/jpeg\n  </param>\n</interceptor-ref>\n```\n\n----------------------------------------\n\nTITLE: Defining RESTful Action in Struts XML\nDESCRIPTION: Demonstrates how to define a RESTful action mapping using wildcards to handle CRUD operations.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/restful-action-mapper.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"movie/*\" className=\"app.MovieAction\">\n    <param name=\"id\">{1}</param>\n    ...\n</action>\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in JSP View\nDESCRIPTION: JSP markup using Struts tags to retrieve and display session data in the view layer.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/http-session.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n    <p>I've said hello to you <s:property value=\"#session.helloCount\" /> times!</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Action in Struts XML\nDESCRIPTION: XML configuration for the asynchronous action in struts.xml. This maps the 'async' action name to the AsyncAction class and sets up a JSON result type for the success outcome.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/async/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"async\" class=\"com.company.struts.AsyncAction\">\n    <result name=\"success\" type=\"json\"/>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Using Struts UI Tags in Freemarker Templates\nDESCRIPTION: Example of integrating Struts UI tags in Freemarker templates by using JspTaglibs. This approach works even if the servlet container doesn't support JSP or if the taglib isn't defined in web.xml.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_2\n\nLANGUAGE: ftl\nCODE:\n```\n<#assign s=JspTaglibs[\"/WEB-INF/struts.tld\"] />\n\n<@s.form method=\"'post'\" name=\"'inputform'\" action=\"'save.action'\" >\n    <@s.hidden name=\"'id'\" />\n    <@s.textarea label=\"'Details'\" name=\"'details'\" rows=5 cols=40 />\n    <@s.submit value=\"'Save'\" align=\"center\" />\n</@s.form>\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Response in Struts 1\nDESCRIPTION: This snippet demonstrates how to return a direct response for an AJAX request in Struts 1. It sets the content type to HTML, writes a simple text message to the response writer, and returns null to bypass the standard action-to-view mapping.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nresponse.setContentType(\"text/html\");\nPrintWriter out = response.getWriter();\nout.println(\"Hello World!  This is an AJAX response from a Struts Action.\");\nout.flush();\nreturn null;\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Action for Proxied Objects in Struts XML\nDESCRIPTION: Shows how to configure a Struts action to handle proxied objects in JSON serialization. It demonstrates setting the ignoreInterfaces parameter to false for both the interceptor and the result.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"contact\" class=\"package.ContactAction\" method=\"smd\">\n   <interceptor-ref name=\"json\">\n      <param name=\"enableSMD\">true</param>\n      <param name=\"ignoreSMDMethodInterfaces\">false</param>\n   </interceptor-ref>\n   <result type=\"json\">\n      <param name=\"enableSMD\">true</param>\n      <param name=\"ignoreInterfaces\">false</param>\n   </result>\n   <interceptor-ref name=\"default\"/>\n</action>\n```\n\n----------------------------------------\n\nTITLE: JasperReports DataSource Configuration\nDESCRIPTION: Parameter configuration defining the action property containing the data collection for the report.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<param name=\"dataSource\">myList</param>\n```\n\n----------------------------------------\n\nTITLE: Adding CSS for AJAX Visual Feedback\nDESCRIPTION: Defines CSS styling for a visual loading indicator that provides feedback to users during AJAX operations. The CSS references an external indicator.gif image that should be included in the project's assets.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.ajaxVisualFeedback {\n    width: 16px;\n    height: 16px;\n    background-image: url('../images/indicator.gif');\n    background-repeat: no-repeat;\n    float: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, defining layout and title.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/idea-plugin.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: IntelliJ IDEA plugin\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Static Content Serving in Struts XML Configuration\nDESCRIPTION: Configuration constant to disable built-in static content serving functionality in Struts.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/static-content.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.serve.static\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Dynamic Attributes in Freemarker\nDESCRIPTION: Simplified syntax for adding dynamic attributes directly as tag parameters. This approach is more concise than using the dynamicAttributes parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/freemarker-support.md#2025-04-08_snippet_4\n\nLANGUAGE: ftl\nCODE:\n```\n<@s.textfield name=\"test\" placeholder=\"input\" foo=\"bar\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action to Use Tiles Definition\nDESCRIPTION: This XML configuration demonstrates how to set up an action to use a Tiles definition. It defines an action named 'sample' with a success result that uses the 'tiles' result type, pointing to a Tiles definition named 'tilesWorks'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles-3/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"sample\" class=\"org.apache.struts2.tiles.example.SampleAction\" >\n  <result name=\"success\" type=\"tiles\">tilesWorks</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Creating Month Selection Dropdown with Apache Struts Select Tag\nDESCRIPTION: This snippet shows how to create a month selection dropdown using the Struts select tag. It includes a header option, uses a map for month options, and sets a selected value.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/select-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<s:select label=\"Months\"\n       name=\"months\"\n       headerKey=\"-1\" headerValue=\"Select Month\"\n       list=\"#{'01':'Jan', '02':'Feb', [...]}\"\n       value=\"selectedMonth\"\n       required=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating AJAX Validation Form in JSP\nDESCRIPTION: This JSP file creates a form with various input fields that will be validated using AJAX. It uses a custom theme 'ajaxErrorContainers' to display validation errors.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<%@taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n    <title>Struts2 Showcase - Validation - AJAX Form Submit</title>\n    <s:head theme=\"xhtml\"/>\n</head>\n<body>\n<div class=\"page-header\">\n    <h1>AJAX Form Submit</h1>\n</div>\n    <h3>Action Errors Will Appear Here</h3>\n    <s:actionerror theme=\"ajaxErrorContainers\"/>\n    <hr/>\n    <s:form method=\"POST\" theme=\"xhtml\">\n        <s:textfield label=\"Required Validator Field\" name=\"requiredValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Required String Validator Field\" name=\"requiredStringValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Integer Validator Field\" name=\"integerValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Date Validator Field\" name=\"dateValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Email Validator Field\" name=\"emailValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"URL Validator Field\" name=\"urlValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"String Length Validator Field\" name=\"stringLengthValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Regex Validator Field\" name=\"regexValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Field Expression Validator Field\" name=\"fieldExpressionValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:submit label=\"Submit\" cssClass=\"btn btn-primary\"/>\n    </s:form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: JSON Validation Response Format in Struts\nDESCRIPTION: Shows the JSON format returned by the jsonValidation interceptor when validation errors occur. The response includes global action errors in the 'errors' array and field-specific errors in the 'fieldErrors' object mapped by field name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ajax-client-side-validation.md#2025-04-08_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"errors\": [\"Global Error 1\", \"Global Error 2\"],\n    \"fieldErrors\": {\n        \"field1\": [\"Field 1 Error 1\", \"Field 1 Error 2\"],\n        \"field1\": [\"Field 2 Error 1\", \"Field 2 Error 2\"]  \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts 2 with XML for NumberGuess Application\nDESCRIPTION: XML configuration for Struts 2 that defines actions for the NumberGuess game. It sets up action mappings, specifies the action classes, and configures the results to point to the appropriate JSP view.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE struts PUBLIC\n          \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"       \n          \"http://struts.apache.org/dtds/struts-2.3.dtd\">\n<struts>\n  <constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\"/>\n  <constant name=\"struts.devMode\" value=\"true\"/>\n  \n    <package name=\"numberguess\" extends=\"struts-default\">\n\n        <action name=\"NumberGuess\" class=\"org.apache.struts2.example.cdi.NumberGuess\">\n            <result>/WEB-INF/pages/NumberGuess.jsp</result>\n        </action>\n\n        <action name=\"guess\" class=\"org.apache.struts2.example.cdi.NumberGuess\" method=\"guess\">\n            <result>/WEB-INF/pages/NumberGuess.jsp</result>\n        </action>\n\n    </package>\n\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Plugin Project\nDESCRIPTION: Maven command to generate a Struts 2 plugin project using the plugin archetype, which includes examples of a new result type and XML-based configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B -DgroupId=com.mycompany.mysystem \\\n                          -DartifactId=myPlugin \\\n                          -DarchetypeGroupId=org.apache.struts \\\n                          -DarchetypeArtifactId=struts2-archetype-plugin\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic in Dojo\nDESCRIPTION: This snippet shows how to subscribe to a topic in Dojo's event system. It defines a function to handle the event and then subscribes to the 'topic_name' topic, specifying the function to be called when an event is received.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-event-system.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomethingWithEvent(data) {\n...\n}\n\ndojo.event.topic.getTopic(\"topic_name\").subscribe(null, \"doSomethingWithEvent\");\n```\n\n----------------------------------------\n\nTITLE: JSP Iterator Implementation for Bean List\nDESCRIPTION: JSP code showing how to iterate over a bean list and create text fields with proper naming convention for type conversion.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_8\n\nLANGUAGE: jsp\nCODE:\n```\n<s:iterator value=\"beanList\" id=\"bean\">\n  <stextfield name=\"beanList(%{bean.id}).name\" />\n</s:iterator>\n```\n\n----------------------------------------\n\nTITLE: Applying KeyProperty Annotation in Java for Apache Struts\nDESCRIPTION: This snippet demonstrates how to use the KeyProperty annotation to specify the key property for User objects within a collection. The annotation is applied to a List of User objects, setting the 'userName' attribute as the key property.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/key-property-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n // The key property for User objects within the users collection is the <code>userName</code> attribute.\n @KeyProperty( value = \"userName\" )\n protected List<User> users = null;\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Decorator Servlet in web.xml\nDESCRIPTION: Example of how to configure the FreeMarker decorator servlet in web.xml for use with SiteMesh and Struts 2.2+.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitemesh/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>sitemesh-freemarker</servlet-name>\n    <servlet-class>org.apache.struts2.sitemesh.FreemarkerDecoratorServlet</servlet-class>\n    <init-param>\n \t<param-name>default_encoding</param-name>\n \t<param-value>UTF-8</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet> \n\n<servlet-mapping>\n    <servlet-name>sitemesh-freemarker</servlet-name>\n    <url-pattern>*.ftl</url-pattern>\n</servlet-mapping> \n```\n\n----------------------------------------\n\nTITLE: Defining Extension Point Bean in XML (struts-default.xml)\nDESCRIPTION: Shows how to define a bean for the extension point implementation in the struts-default.xml configuration file. This links the implementation class to a named bean.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/plugins-architecture.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean type=\"org.apache.struts2.components.date.DateFormatter\" \n      name=\"dateTimeFormatter\" \n      class=\"org.apache.struts2.components.date.DateTimeFormatterAdapter\" \n      scope=\"singleton\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mapping for File Upload in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure an action mapping with the actionFileUpload interceptor and basicStack for handling file uploads in Struts.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/action-file-upload-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <action name=\"doUpload\" class=\"com.example.UploadAction\">\n     <interceptor-ref name=\"actionFileUpload\"/>\n     <interceptor-ref name=\"basicStack\"/>\n     <result name=\"success\">good_result.jsp</result>\n </action>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JasperReports Result for PDF Output in Struts XML\nDESCRIPTION: This example shows the configuration for generating a PDF report using JasperReports in Struts. It defines the report location and data source, defaulting to PDF format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/jasperreports/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"jasper\">\n    <param name=\"location\">foo.jasper</param>\n    <param name=\"dataSource\">mySource</param>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Remote Repositories\nDESCRIPTION: Command to list all configured remote repositories for the local Git repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/submitting-patches.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Applying Text Color Classes in Markdown for Struts Website\nDESCRIPTION: Examples demonstrating how to apply different text colors including primary, info, success, warning, and danger using CSS classes in Markdown.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/updating-website.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nText primary\n{:.text-primary}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText info\n{:.text-info}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText success\n{:.text-success}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText warning\n{:.text-warning}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nText danger\n{:.text-danger}\n```\n\n----------------------------------------\n\nTITLE: Configuring validator.xml for Expression-based Validation in Struts\nDESCRIPTION: XML configuration defining an expression validator that ensures all three text inputs match exactly. The validator uses a CDATA-wrapped expression to compare the fields and provides a custom error message.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/using-non-field-validators.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<validators>\n    <validator type=\"expression\">\n        <param name=\"expression\">\n            <![CDATA[ ( (someText == someTextRetype) && (someTextRetype == someTextRetypeAgain) ) ]]></param>\n        <message><![CDATA[ all three text must be exactly the same ]]></message>\n    </validator>\n</validators>\n```\n\n----------------------------------------\n\nTITLE: Using @StrutsParameter for DTO Population in Java\nDESCRIPTION: This Java code shows how to use @StrutsParameter with depth parameter to allow population of nested DTOs. The depth parameter controls how deep parameter injection is permitted, with 1 allowing immediate properties of the returned object to be set.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate MyDto formData = new MyDto();\n\n@StrutsParameter(depth = 1)\npublic MyDto getFormData() {\n    return formData;\n}\n\npublic static class MyDto {\n    private String fullName;\n\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convention Plugin Configuration\nDESCRIPTION: XML configuration for Convention plugin template path.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<struts>\n    <constant name=\"struts.convention.result.path\" value=\"/content/\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with CeWolf JSP Tags\nDESCRIPTION: JSP implementation of CeWolf chart rendering, which creates a line chart for page view statistics. This snippet uses JSP tags to define a chart with a DatasetProducer bean and render it as an image with specified dimensions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/cewolf-charts-using-velocity-templates.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<jsp:useBean id=\"pageViews\" class=\"de.laures.cewolf.example.PageViewCountData\"/>\n<cewolf:chart \n    id=\"line\" \n    title=\"Page View Statistics\" \n    type=\"line\" \n    xaxislabel=\"Page\" \n    yaxislabel=\"Views\">\n    <cewolf:data>\n        <cewolf:producer id=\"pageViews\"/>\n    </cewolf:data>\n</cewolf:chart>\n\n<cewolf:img chartid=\"line\" renderer=\"cewolf\" width=\"400\" height=\"300\"/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hard-Coded Dependency in EditAction Class\nDESCRIPTION: This code snippet shows the hard-coded dependency in the EditAction class, which creates tight coupling with the EditServiceInMemory implementation. This approach makes testing and maintenance difficult.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate EditService editService = new EditServiceInMemory();\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptor Parameters - Method 1\nDESCRIPTION: Shows how to override interceptor parameters by explicitly listing all interceptors and setting parameters individually. This method copies the entire default stack and modifies specific parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/interceptors.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"myAction\" class=\"myActionClass\">\n    <interceptor-ref name=\"exception\"/>\n    <interceptor-ref name=\"alias\"/>\n    <interceptor-ref name=\"params\"/>\n    <interceptor-ref name=\"servletConfig\"/>\n    <interceptor-ref name=\"prepare\"/>\n    <interceptor-ref name=\"i18n\"/>\n    <interceptor-ref name=\"chain\"/>\n    <interceptor-ref name=\"modelDriven\"/>\n    <interceptor-ref name=\"actionFileUpload\"/>\n    <interceptor-ref name=\"staticParams\"/>\n    <interceptor-ref name=\"params\"/>\n    <interceptor-ref name=\"conversionError\"/>\n    <interceptor-ref name=\"validation\">\n        <param name=\"excludeMethods\">myValidationExcludeMethod</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"workflow\">\n        <param name=\"excludeMethods\">myWorkflowExcludeMethod</param>\n    </interceptor-ref>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Complete Struts 2 Conversion Package Configuration Example\nDESCRIPTION: A comprehensive example of a Struts 2 conversion configuration package that demonstrates various action mappings for form handling, including list and set population, enum conversion, and result configurations. This example shows typical patterns used in Struts 2 applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/struts-1/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.5.dtd\">\n\t\n<struts>\n\t<package name=\"conversion\" namespace=\"/conversion\" extends=\"struts-default\">\n\t\n        <action name=\"index\">\n            <result>/WEB-INF/conversion/index.jsp</result>\n        </action>\n        \n\t\t<!-- Example populating a List inside an Action -->\n\t\t<action name=\"enterPersonsInfo\" method=\"input\"\n\t\t\t\tclass=\"org.apache.struts2.showcase.conversion.PersonAction\">\n\t\t\t<result>/WEB-INF/conversion/enterPersonInfo.jsp</result>\n\t\t</action>\n\t\t<action name=\"submitPersonInfo\" method=\"submit\"\n\t\t\t\tclass=\"org.apache.struts2.showcase.conversion.PersonAction\">\n\t\t\t<result>/WEB-INF/conversion/showPersonInfo.jsp</result>\n\t\t\t<result name=\"input\">/WEB-INF/conversion/enterPersonInfo.jsp</result>\n\t\t</action>\n\t\t<action name=\"showPersonJspCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/enterPersonInfo.jsp</result>\n\t\t</action>\n\t\t<action name=\"showPersonActionJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/PersonAction.java.txt</result>\n\t\t</action>\n\t\t<action name=\"showPersonJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/Person.java.txt</result>\n\t\t</action>\n\t\t\n\t\t\n\t\t<!-- Example populating a Set inside an Action -->\n\t\t<action name=\"enterAddressesInfo\" class=\"org.apache.struts2.showcase.conversion.AddressAction\" method=\"input\">\n\t\t\t<result>/WEB-INF/conversion/enterAddressInfo.jsp</result>\n\t\t</action>\n\t\t<action name=\"submitAddressesInfo\" class=\"org.apache.struts2.showcase.conversion.AddressAction\" method=\"submit\">\n\t\t\t<result>/WEB-INF/conversion/showAddressInfo.jsp</result>\n\t\t\t<result name=\"input\">/WEB-INF/conversion/enterAddressInfo.jsp</result>\n\t\t</action>\n\t\t<action name=\"showAddressJspCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/enterAddressInfo.jsp</result>\n\t\t</action>\n\t\t<action name=\"showAddressActionJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/AddressAction.java.txt</result>\n\t\t</action>\n\t\t<action name=\"showAddressJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/Address.java.txt</result>\n\t\t</action>\n\t\t\n\t\t\n\t\t<!-- Example populating a List with Tiger 5 Enum  -->\t\t\n\t\t<action name=\"enterOperationEnumInfo\" class=\"org.apache.struts2.showcase.conversion.OperationsEnumAction\" method=\"input\">\n\t\t\t<result>/WEB-INF/conversion/enterOperations.jsp</result>\n\t\t</action>\n\t\t<action name=\"submitOperationEnumInfo\" class=\"org.apache.struts2.showcase.conversion.OperationsEnumAction\" method=\"submit\">\n\t\t\t<result>/WEB-INF/conversion/showOperations.jsp</result>\n\t\t\t<result name=\"input\">/WEB-INF/conversion/enterOperations.jsp</result>\n\t\t</action>\n\t\t<action name=\"showEnumJspCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/enterOperations.jsp</result>\n\t\t</action>\n\t\t<action name=\"showOperationsEnumJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/OperationsEnum.java.txt</result>\n\t\t</action>\n\t\t<action name=\"showOperationEnumActionJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/OperationsEnumAction.java.txt</result>\n\t\t</action>\n\t\t<action name=\"showEnumTypeConverterJavaCode\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/EnumTypeConverter.java.txt</result>\n\t\t</action>\n\t\t<action name=\"showOperationsEnumActionConversionProperties\">\n\t\t\t<result type=\"plainText\">/WEB-INF/conversion/OperationsEnumActionConversion.txt</result>\n\t\t</action>\n\t\t\n\t</package>\n</struts>\t\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in robots.txt\nDESCRIPTION: This directive instructs all web crawlers and search engine bots that they are allowed to access the entire website. The wildcard user-agent (*) applies to all bots without any disallow rules.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/robots.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Struts2 Taglib Configuration\nDESCRIPTION: Optional taglib configuration in web.xml for Struts2 tag library support.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<web-app ...>\n    <!-- ... --> \n\n    <taglib>\n       <taglib-uri>/s</taglib-uri>\n       <taglib-location>/WEB-INF/struts-tags.tld</taglib-location>\n    </taglib>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Constraints for URL Patterns in XML\nDESCRIPTION: This XML configuration demonstrates how to restrict access to resources in a specific URL pattern (/secure/*) to users with the 'admin' role only. This approach is used to control security levels by namespace.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<security-constraint>\n    <web-resource-collection>\n        <web-resource-name>admin</web-resource-name>\n        <url-pattern>/secure/*</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n        <role-name>admin</role-name>\n    </auth-constraint>\n</security-constraint>\n```\n\n----------------------------------------\n\nTITLE: Creating Random Qualifier Annotation for CDI\nDESCRIPTION: A CDI qualifier annotation named Random that can be used to distinguish between different injectable beans. This annotation is applied to injection points to specify which implementation should be injected.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/cdi/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.struts2.example.cdi;\n\nimport javax.inject.Qualifier;\nimport java.lang.annotation.Documented;\nimport static java.lang.annotation.ElementType.*;\nimport java.lang.annotation.Retention;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport java.lang.annotation.Target;\n\n@Target( { TYPE, METHOD, PARAMETER, FIELD })\n@Retention(RUNTIME)\n@Documented\n@Qualifier\npublic @interface Random {}\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Result with Default Parameter\nDESCRIPTION: Demonstrates configuring a FreeMarker result using the default parameter shorthand notation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/result-types.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<result type=\"freemarker\">foo.fm</result>\n```\n\n----------------------------------------\n\nTITLE: JSP Include Example - Hello.jsp\nDESCRIPTION: Demonstrates how to include another JSP file using the full classpath path\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/embedded-jsp/index.md#2025-04-08_snippet_1\n\nLANGUAGE: jsp\nCODE:\n```\n<jsp:include page=\"org/myexample/jsps/Who.jsp\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet in web.xml for WebSphere 6 Workaround\nDESCRIPTION: XML configuration for web.xml that registers the LaunchServlet to be loaded at application startup. This is part of the workaround for the WebSphere 6 classloader bug affecting Struts properties files.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/websphere.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n  <servlet-name>dummyaction</servlet-name>\n  <servlet-class>com.xxx.yyyyyy.service.LaunchServlet</servlet-class>\n  <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Struts 2 Radio Tag\nDESCRIPTION: Displays the HTML generated by the Struts 2 framework for the radio tag. It includes the label and a set of radio inputs with appropriate values, IDs, and labels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/form-tags.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"tdLabel\">\n        <label for=\"save_personBean_gender\" class=\"label\">Gender:</label>\n    </td>\n    <td>\n        <input type=\"radio\" name=\"personBean.gender\" id=\"save_personBean_gendermale\" value=\"male\"/>\n        <label for=\"save_personBean_gendermale\">male</label>\n        \n        <input type=\"radio\" name=\"personBean.gender\" id=\"save_personBean_genderfemale\" value=\"female\"/>\n        <label for=\"save_personBean_genderfemale\">female</label>\n        \n        <input type=\"radio\" name=\"personBean.gender\" id=\"save_personBean_gendernot sure\" checked=\"checked\" value=\"not sure\"/>\n        <label for=\"save_personBean_gendernot sure\">not sure</label>\n    </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: SiteGraph Command Line Arguments Explanation\nDESCRIPTION: Detailed explanation of the command line arguments required by the SiteGraph tool including the config directory, views directories, output location, and namespace restriction.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitegraph/index.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage: -config CONFIG_DIR -views VIEWS_DIRS -output OUTPUT [-ns NAMESPACE]\n       CONFIG_DIR => a directory containing struts.xml\n       VIEWS_DIRS => comma seperated list of dirs containing JSPs, VMs, etc\n       OUPUT      => the directory where the output should go\n       NAMESPACE  => the namespace path restriction (/, /foo, etc)\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Blank Project\nDESCRIPTION: Maven command to generate a basic Struts 2 project using the blank archetype, which provides a minimal starting point for a Struts 2 application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B -DgroupId=com.mycompany.mysystem \\\n                          -DartifactId=myWebApp \\\n                          -DarchetypeGroupId=org.apache.struts \\\n                          -DarchetypeArtifactId=struts2-archetype-blank\n```\n\n----------------------------------------\n\nTITLE: Creating JFreeChart in Struts Action\nDESCRIPTION: This Java code snippet shows a Struts Action class that creates a JFreeChart object. It demonstrates how to set up data series, configure chart axes, and create a scatter plot. The getChart() method is called by the chart result to render the chart.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/jfreechart/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ViewModerationChartAction extends ActionSupport {\n\n\tprivate JFreeChart chart;\n\n\tpublic String execute() throws Exception {\n\t\t// chart creation logic...\n\t\tXYSeries dataSeries = new XYSeries(new Integer(1)); //pass a key for this serie\n\t\tfor (int i = 0; i <= 100; i++) {\n\t\t\tdataSeries.add(i, RandomUtils.nextInt());\n\t\t}\n\t\tXYSeriesCollection xyDataset = new XYSeriesCollection(dataSeries);\n\n\t\tValueAxis xAxis = new NumberAxis(\"Raw Marks\");\n\t\tValueAxis yAxis = new NumberAxis(\"Moderated Marks\");\n\n\t\t// set my chart variable\n\t\tchart =\n\t\t\tnew JFreeChart(\n\t\t\t\t\"Moderation Function\",\n\t\t\t\tJFreeChart.DEFAULT_TITLE_FONT,\n\t\t\t\tnew XYPlot(\n\t\t\t\t\txyDataset,\n\t\t\t\t\txAxis,\n\t\t\t\t\tyAxis,\n\t\t\t\t\tnew StandardXYItemRenderer(StandardXYItemRenderer.LINES)),\n\t\t\t\tfalse);\n\t\tchart.setBackgroundPaint(java.awt.Color.white);\n\n\t\treturn super.SUCCESS;\n\t}\n\n\tpublic JFreeChart getChart() {\n\t\treturn chart;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Struts Action Mapping Configuration\nDESCRIPTION: XML configuration showing how to map an action to an embedded JSP result\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/embedded-jsp/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <package name=\"example\" namespace=\"/example\" extends=\"embeddedjsp-default\">\n     <action name=\"HelloWorld\" class=\"example.HelloWorld\">\n         <result type=\"embeddedJsp\">org/myexample/jsps/Hello.jsp</result>\n     </action>\n </package>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Important Security Mailing List Information in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to emphasize important information about the security mailing list. It states that only security-related issues should be sent to this address, and all other communications will be ignored.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`All mail sent to this address that does not relate to security problems in the Apache\\nStruts source code will be ignored`.\n```\n\n----------------------------------------\n\nTITLE: Enabling Parameters After Action Name in Struts XML\nDESCRIPTION: Configuration to enable the use of slashes in action names and parameters after the action name in URLs.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/wildcard-mappings.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.enable.SlashesInActionNames\" value=\"true\"/>\n<constant name=\"struts.mapper.alwaysSelectFullNamespace\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: SiteGraph API Documentation\nDESCRIPTION: JavaDoc excerpt explaining how to use SiteGraph programmatically through its API rather than the command line.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitegraph/index.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n * <p>\n * If you wish to use SiteGraph through its API rather than through the command line,\n * you can do that as well. All you need to do is create a new SiteGraph instance,\n * optionally specify a {@link Writer} to output the dot content to, and then call\n * {@link #prepare()}.\n * </p>\n```\n\n----------------------------------------\n\nTITLE: Variable-Based Iterator Generation in JSP\nDESCRIPTION: Demonstrates storing a generated iterator in a PageContext variable and accessing it through Java code within JSP.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/generator-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:generator val=\"%{'aaa,bbb,ccc,ddd,eee'}\" count=\"4\" separator=\",\" var=\"myAtt\" />\\n<%\\n Iterator i = (Iterator) pageContext.getAttribute(\"myAtt\");\\n while(i.hasNext()) {\\n     String s = (String) i.next(); %>\\n     <%=s%> <br/>\\n<%    }\\n%>\n```\n\n----------------------------------------\n\nTITLE: Styling AJAX Visual Feedback with CSS\nDESCRIPTION: CSS snippet for styling the visual feedback element during AJAX requests. It defines the appearance of a loading indicator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.ajaxVisualFeedback {\n    width: 16px;\n    height: 16px;\n    background-image: url('../images/indicator.gif');\n    background-repeat: no-repeat;\n    float: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Tiles Result Type for Portlets in Struts Configuration\nDESCRIPTION: This XML snippet demonstrates how to register the Tiles Result type definition specifically for Portlets in the Struts configuration. It defines a result-type named 'tiles' with the PortletTilesResult class.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet-tiles/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<result-types>\n  <result-type name=\"tiles\" class=\"org.apache.struts2.views.tiles.PortletTilesResult\"/>\n</result-types>\n```\n\n----------------------------------------\n\nTITLE: Expected XML Output with Loop Elimination\nDESCRIPTION: Sample XML output showing how the loop elimination mechanism prevents infinite recursion in the object tree by stopping when it detects that an object property has already been processed.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/xsl-result.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<result>\n<x>\n<y/>\n</x>\n</result>\n```\n\n----------------------------------------\n\nTITLE: Struts 2 Action Configuration Using Wildcard Method Selection\nDESCRIPTION: Simplified action configuration using wildcard method selection. The wildcard character (*) in the action name and the placeholder ({1}) in the method attribute allow Struts 2 to dynamically determine which method to call based on the URL pattern.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/wildcard-method-selection.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"*Person\" class=\"org.apache.struts.tutorials.wildcardmethod.action.PersonAction\" method=\"{1}\">\n    <result name=\"success\">view.jsp</result>\n    <result name=\"input\">input.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Struts 2 Plugin in Java\nDESCRIPTION: Implements the IMyPlugIn interface to create a concrete plugin class MyPlugin. This class provides the actual functionality of the plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/extending-an-application-with-custom-plugins.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage example.impl;\n\nimport example.IMyPlugin; \n\npublic class MyPlugin implements IMyPlugin {\n   public String saySomething() {\n       return \"We don't need no education\";\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Method Invocation in Struts 2 XML Configuration\nDESCRIPTION: This XML snippet shows how to disable Dynamic Method Invocation (DMI) in Struts 2 to prevent potential security vulnerabilities.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/security/index.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a JSP Form with AJAX Validation Support in HTML\nDESCRIPTION: A JSP page that implements a form with AJAX validation, using the custom 'ajaxErrorContainers' theme to ensure error containers are always present in the DOM regardless of validation state.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/json-ajax-validation.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<%@taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n    <title>Struts2 Showcase - Validation - AJAX Form Submit</title>\n    <s:head theme=\"xhtml\"/>\n</head>\n<body>\n<div class=\"page-header\">\n    <h1>AJAX Form Submit</h1>\n</div>\n    <h3>Action Errors Will Appear Here</h3>\n    <s:actionerror theme=\"ajaxErrorContainers\"/>\n    <hr/>\n    <s:form method=\"POST\" theme=\"xhtml\">\n        <s:textfield label=\"Required Validator Field\" name=\"requiredValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Required String Validator Field\" name=\"requiredStringValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Integer Validator Field\" name=\"integerValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Date Validator Field\" name=\"dateValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Email Validator Field\" name=\"emailValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"URL Validator Field\" name=\"urlValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"String Length Validator Field\" name=\"stringLengthValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Regex Validator Field\" name=\"regexValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:textfield label=\"Field Expression Validator Field\" name=\"fieldExpressionValidatorField\" theme=\"ajaxErrorContainers\"/>\n        <s:submit label=\"Submit\" cssClass=\"btn btn-primary\"/>\n    </s:form>\n</body>\n</html> \n```\n\n----------------------------------------\n\nTITLE: Configuring Tiles Direct Action in Struts for Portlet Environment\nDESCRIPTION: This XML snippet shows the configuration of a dedicated action to support Tiles in a portlet environment. It defines an action named 'tilesDirect' that uses the DirectRenderFromEventAction class and a tiles result type.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet-tiles/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"tilesDirect\" class=\"org.apache.struts2.portlet.dispatcher.DirectRenderFromEventAction\">\n    <result type=\"tiles\" name=\"success\">${location}</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Preparing Release with Maven Release Plugin\nDESCRIPTION: Uses the Maven Release Plugin to prepare the release, including updating versions and tagging the repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-normal-release.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:prepare -DautoVersionSubmodules=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts XML Action Mapping\nDESCRIPTION: XML configuration that maps the 'register' action to the Register class and defines success/input result pages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/unit-testing.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"register\" class=\"org.apache.struts.register.action.Register\" method=\"execute\">\n    <result name=\"success\">/thankyou.jsp</result>\n    <result name=\"input\">/register.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Custom URL Pattern Mapping for Struts2\nDESCRIPTION: Example of configuring specific URL pattern mapping for Struts2 filter to handle only .action requests.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/web-xml.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<web-app ...>\n\n    <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>*.action</url-pattern>\n    </filter-mapping>\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Struts 2 Interceptor Configuration\nDESCRIPTION: XML configuration for excluding sensitive parameters globally using the params interceptor.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/http-session.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<package name=\"basicstruts2\" extends=\"struts-default\">\n    <interceptors>\n        <interceptor-stack name=\"appDefault\">\n            <interceptor-ref name=\"defaultStack\">\n                <param name=\"exception.logEnabled\">true</param>\n                <param name=\"exception.logLevel\">ERROR</param>\n                <param name=\"params.excludeParams\">dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*</param>\n            </interceptor-ref>\n        </interceptor-stack>\n    </interceptors>\n\n    <default-interceptor-ref name=\"appDefault\" />\n    ...\n</package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Scanning in Struts XML\nDESCRIPTION: Determines whether to disable scanning the classpath for Action classes. This setting can be customized in the Struts configuration file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/codebehind/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.configuration.classpath.disableActionScanning\" value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Cloning Struts Master Repository (Bash)\nDESCRIPTION: Command to obtain a fresh checkout of the Struts Master project from the Apache Git repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-master.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/struts-master.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Plugin Dependency in Maven\nDESCRIPTION: XML Maven dependency configuration for including the Struts Spring Plugin in your project's pom.xml file. This is required when testing Struts actions that use Spring integration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/junit/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.struts</groupId>\n    <artifactId>struts2-spring-plugin</artifactId>\n    <version>STRUTS_VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Struts Static Content Path Structure\nDESCRIPTION: Default path structure for serving static content (JavaScript, CSS) through FilterDispatcher. Content is served from '/struts/' path and mapped to specific packages.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/configuration-files.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\norg.apache.struts2.static\ntemplate\n```\n\n----------------------------------------\n\nTITLE: UrlValidator with Dynamic Regex Expression in Java\nDESCRIPTION: Example demonstrating how to use UrlValidator with a dynamic regex pattern defined through an expression that will be evaluated against the current stack.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/url-validator-annotation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@UrlValidator(message = \"Default message\", key = \"i18n.key\", urlRegexExpression = \"${urlRegex}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Decorator Servlet in web.xml\nDESCRIPTION: Example of how to configure the Velocity decorator servlet in web.xml for use with SiteMesh and Struts 2.2+.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitemesh/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>sitemesh-freemarker</servlet-name>\n    <servlet-class>org.apache.struts2.sitemesh.VelocityDecoratorServlet</servlet-class>\n    <init-param>\n        <param-name>default_encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet> \n\n<servlet-mapping>\n    <servlet-name>sitemesh-freemarker</servlet-name>\n    <url-pattern>*.ftl</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Resuming Failed Release Preparation (Maven)\nDESCRIPTION: Maven command to resume a failed release preparation process. This is useful if the initial preparation encounters issues and needs to be continued.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-master.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:prepare -Dresume\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Remover Interceptor in Struts XML\nDESCRIPTION: This XML snippet demonstrates how to configure the Parameter Remover Interceptor in a Struts action. It specifies the interceptor reference with parameters for removing specific values from certain parameters before they are applied to the action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/parameter-remover-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"sample\" class=\"org.martingilday.Sample\">\n    <interceptor-ref name=\"paramRemover\">\n        <param name=\"paramNames\">aParam,anotherParam</param>\n        <param name=\"paramValues\">--,-1</param>\n    </interceptor-ref>\n    <interceptor-ref name=\"defaultStack\" />\n    ...\n</action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pattern Separator for Exclusions\nDESCRIPTION: Configuration for custom separator in exclusion patterns when using complex regular expressions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/static-content.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.action.excludePattern.separator\" value=\"//\"/>\n<constant name=\"struts.action.excludePattern\" value=\"/some/[a-zA-Z]{1,10}.json///other/content/.*\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample User Expression Interface\nDESCRIPTION: Example interface definition for demonstrating expression compilation against different object instances.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ognl-expression-compilation.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic abstract LoginPage extends BasePage implements UserPermissions {\n\n  public abstract User getUser();\n\n}\n\n..\n/**\n * Interface for any page/component that holds references to the current system\n * User.\n */\npublic interface UserPermissions {\n   User getUser();\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal web.xml Configuration for JSP Decorators\nDESCRIPTION: Minimal changes required in web.xml when using JSP for SiteMesh decorators with Struts 2, without the need for the Struts2 Sitemesh plugin.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/sitemesh/index.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n    <filter-name>struts2-prepare</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>\n</filter>\n\n<filter>\n    <filter-name>sitemesh</filter-name>\n    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter>\n\n<filter>\n    <filter-name>struts2-execute</filter-name>\n    <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>\n</filter>\n\n<filter-mapping>\n    <filter-name>struts2-prepare</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n    <filter-name>sitemesh</filter-name>\n    <url-pattern>/*</url-pattern>\n    <dispatcher>REQUEST</dispatcher>\n    <dispatcher>FORWARD</dispatcher>\n    <dispatcher>INCLUDE</dispatcher>\n</filter-mapping>\n\n<filter-mapping>\n    <filter-name>struts2-execute</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n----------------------------------------\n\nTITLE: Cloning Apache Struts Repository with Git\nDESCRIPTION: Commands to clone the Apache Struts source code repository using Git. This creates a local copy of the Struts codebase in your Projects/Apache directory.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-the-framework-from-source.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cd Projects\\Apache\\\n> git clone https://gitbox.apache.org/repos/asf/struts.git\n```\n\n----------------------------------------\n\nTITLE: Performing Release with Maven Release Plugin\nDESCRIPTION: Uses the Maven Release Plugin to perform the release, including deploying artifacts to the staging repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-normal-release.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:perform -DretryFailedDeploymentCount=10\n```\n\n----------------------------------------\n\nTITLE: Configuring OGNL Expression Cache via XML\nDESCRIPTION: Enables or disables the OGNL expression cache in Struts using the struts.xml configuration file. This provides the same functionality as the properties file but in XML format.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ognl.enableExpressionCache\" value=\"true\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ognl.enableExpressionCache\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: JavaDoc Description for Struts Dojo Tree Component\nDESCRIPTION: The JavaDoc description for the Tree component which renders a tree widget with AJAX support. It explains that the 'id' attribute is recommended and required when using 'selectedNotifyTopic' or 'href' attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-tree-tag.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>\n Renders a tree widget with AJAX support.<p/>\n\n The \"id \"attribute is normally specified(recommended), such that it could be looked up using\n javascript if necessary. The \"id\" attribute is required if the \"selectedNotifyTopic\" or the \n \"href\" attributes are going to be used.<p/>\n\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Tiles Definitions in tiles.xml\nDESCRIPTION: XML configuration for defining Tiles layouts and definitions in the tiles.xml file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE tiles-definitions PUBLIC\n        \"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\"\n        \"http://tiles.apache.org/dtds/tiles-config_3_0.dtd\">\n<tiles-definitions>\n\n    <definition name=\"fooLayout\" template=\"/WEB-INF/tiles/layout.jsp\">\n        <put-attribute name=\"title\" value=\"Tiles Sample\"/>\n        <put-attribute name=\"header\" value=\".header\"/>\n        <put-attribute name=\"body\" value=\".bodyp\"/>\n    </definition>\n\n    <definition name=\"tilesWorks\" extends=\"fooLayout\">\n        <put-attribute name=\"header\" value=\"/WEB-INF/tiles/header.jsp\"/>\n        <put-attribute name=\"body\" value=\"/WEB-INF/tiles/body.jsp\"/>\n    </definition>\n\n</tiles-definitions>\n```\n\n----------------------------------------\n\nTITLE: Building Struts with Maven Wrapper\nDESCRIPTION: Command to build Apache Struts using the Maven Wrapper script that's included with the source code. This allows building without having Maven installed separately on your system.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-the-framework-from-source.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean install\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Cache Mode via Properties File\nDESCRIPTION: Configures both OGNL expression and BeanInfo caches to a specific size (1250) using standard cache mode through default.properties. This configuration controls cache behavior and memory usage.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/ognl-cache-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n### Set expression and BeanInfo caches to size 1250 with standard cache mode\nstruts.ognl.enableExpressionCache=true\nstruts.ognl.expressionCacheMaxSize=1250\nstruts.ognl.expressionCacheLRUMode=false\nstruts.ognl.beanInfoCacheMaxSize=1250\nstruts.ognl.beanInfoCacheLRUMode=false\n```\n\n----------------------------------------\n\nTITLE: Basic DateTimePicker Usage Examples in Struts 2\nDESCRIPTION: Examples of basic DateTimePicker tag implementation with various configuration options including labels, display format, and value initialization from static strings and dynamic values.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-datetimepicker-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <sx:datetimepicker name=\"order.date\" label=\"Order Date\" />\n   <sx:datetimepicker name=\"delivery.date\" label=\"Delivery Date\" displayFormat=\"yyyy-MM-dd\"  />\n   <sx:datetimepicker name=\"delivery.date\" label=\"Delivery Date\" value=\"%{date}\"  />\n   <sx:datetimepicker name=\"delivery.date\" label=\"Delivery Date\" value=\"%{'2007-01-01'}\"  />\n   <sx:datetimepicker name=\"order.date\" label=\"Order Date\" value=\"%{'today'}\"/>\n\n```\n\n----------------------------------------\n\nTITLE: JSP Template for Alternate Result Code\nDESCRIPTION: JSP file that will be used when the 'zero' result code is returned from the action. Demonstrates the convention of naming result templates with result codes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/convention/index.md#2025-04-08_snippet_6\n\nLANGUAGE: jsp\nCODE:\n```\n<html>\n<body>\n  The error message is ${message}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Specifying Maven Repository Location\nDESCRIPTION: Shows the default location of the local Maven repository where JARs are installed after building.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.m2/repository\n```\n\n----------------------------------------\n\nTITLE: Debug Tag Declaration in Markdown\nDESCRIPTION: Markdown frontmatter defining the debug tag documentation page structure within the tag reference section\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/debug-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: default\ntitle: debug tag\nparent:\n  title: Tag Reference\n  url: tag-reference.html\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Welcome Page JSP\nDESCRIPTION: Basic JSP page that serves as the welcome page for the Struts 2 application with UTF-8 encoding.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<!DOCTYPE html>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Basic Struts 2 Application - Welcome</title>\n  </head>\n  <body>\n    <h1>Welcome To Struts 2!</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: YAML Layout Configuration for Tag Developers Guide\nDESCRIPTION: YAML front matter configuration block that sets the page layout to 'default' and defines the page title as 'Tag Developers Guide'.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-a-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Spring Bean for Struts Action\nDESCRIPTION: Configures a Spring bean that can be used as a Struts action, demonstrating integration between Spring and Struts.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/spring/index.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n<beans default-autowire=\"autodetect\">\n    <bean id=\"bar\" class=\"com.my.BarClass\" singleton=\"false\"/>\n    ...\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Locating Built Struts JAR\nDESCRIPTION: Specifies the location of the main Struts JAR file after a successful build.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncore/target/struts2-core-2.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Traditional HTML Form Creation in Java Web Development\nDESCRIPTION: This snippet shows the traditional way of creating an HTML form in Java web development, highlighting the verbosity and complexity of the code.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/nutshell.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<% User user = ... %>\n<form action=\"Profile_update.action\" method=\"post\">\n    <table>\n        <tr>\n            <td align=\"right\"><label>First name:</label></td>\n            <td><input type=\"text\" name=\"user.firstname\" value=\"<%=user.getFirstname() %> /></td>\n        </tr>\n        <tr>\n            <td><input type=\"radio\" name=\"user.gender\" value=\"0\" id=\"user.gender0\" \n                <% if (user.getGender()==0) { %> checked=\"checked\" %> } %> />\n            <label for=\"user.gender0\">Female</label>\n        </tr>\n    </table>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Viewing Struts 2 Debug Log Messages\nDESCRIPTION: These log messages show Struts 2 processing an action request. The logs demonstrate the DefaultActionProxy being created for the index action and the ServletDispatcherResult forwarding to the index.jsp file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_6\n\nLANGUAGE: log\nCODE:\n```\n...\n2017-04-17 11:16:01,084 DEBUG [qtp1723848804-22] xwork2.DefaultActionProxy (DefaultActionProxy.java:89) - Creating an DefaultActionProxy for namespace [/] and action name [index]\n...\n2017-04-17 11:16:01,172 DEBUG [qtp1723848804-22] result.ServletDispatcherResult (ServletDispatcherResult.java:131) - Forwarding to location: /index.jsp\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Footer in css_xhtml Theme (FreeMarker)\nDESCRIPTION: This snippet shows the implementation of the control footer in the css_xhtml theme, which is relatively simple compared to the header.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/css-xhtml-theme.md#2025-04-08_snippet_2\n\nLANGUAGE: freemarker\nCODE:\n```\n</div>\n<#include \"/${parameters.templateDir}/css_xhtml/controlfooter-core.ftl\" />\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for Spring OSGi\nDESCRIPTION: Maven configuration for required Spring OSGi dependencies.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>2.5.5</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.osgi</groupId>\n        <artifactId>spring-osgi-web</artifactId>\n        <version>1.1.2</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Running Maven in Offline Mode\nDESCRIPTION: Shows how to run Maven in offline mode to speed up the build process when internet connection is not available.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn -o\n```\n\n----------------------------------------\n\nTITLE: Collection Growth Limit Configuration\nDESCRIPTION: XML configuration to set the auto-growth collection limit to prevent DoS attacks through collection manipulation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/type-conversion.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.ognl.autoGrowthCollectionLimit\" value=\"1024\"/>\n```\n\n----------------------------------------\n\nTITLE: Processing Form Input in Struts 2 Action\nDESCRIPTION: Demonstrates how to use the form input value in the Action class's execute method to personalize a message.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/coding-actions.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nif (userName != null) {\n    messageStore.setMessage( messageStore.getMessage() + \" \" + userName);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Component Tag with Velocity (Basic Example)\nDESCRIPTION: Basic example of using the Struts component tag in Velocity to render a custom component without parameters.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/component-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: velocity\nCODE:\n```\n#s-component( \"template=/my/custom/component.vm\" )\n```\n\n----------------------------------------\n\nTITLE: Configuring web.xml for Async Support in Struts\nDESCRIPTION: Web application descriptor configuration required to enable asynchronous support for Struts actions. The async-supported flag must be set to true for the StrutsServlet.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/async/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>strutsServlet</servlet-name>\n    <servlet-class>org.apache.struts2.dispatcher.servlet.StrutsServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n    <async-supported>true</async-supported>\n</servlet>\n\n<servlet-mapping>\n<servlet-name>strutsServlet</servlet-name>\n<url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Form Configuration for Client Validation\nDESCRIPTION: Example of a Struts form tag that won't work with client-side validation because it combines the namespace and action into a single URI path instead of separating them into distinct attributes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/client-side-validation.md#2025-04-08_snippet_2\n\nLANGUAGE: jsp\nCODE:\n```\n<s:form action=\"/user/submitProfile.action\" validate=\"true\">\n  ...\n</s:form>\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing Static Field in Action's Execute Method\nDESCRIPTION: This Java code snippet shows how to increment the 'helloCount' static field each time the execute method of the HelloWorldAction class is called.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nhelloCount++;\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Checkbox Input in Apache Struts\nDESCRIPTION: This snippet shows the resulting HTML output for a checkbox input generated by Apache Struts. It assumes a simple template and that the 'aBoolean' value is true, resulting in a checked checkbox.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/checkbox-tag.md#2025-04-08_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"checkbox\" name=\"checkboxField1\" value=\"true\" checked=\"checked\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Timeout for Async Actions in Struts\nDESCRIPTION: Implementation of an async action with custom timeout setting. This example sets a 60-second timeout for the asynchronous operation using the AsyncAction constructor with timeout parameter.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/async/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncAction {\n\n    public Callable<String> execute() throws InterruptedException {\n        return new AsyncAction(60000/*timeout*/, new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                waitForEvent();\n                return \"success\";\n            }\n        });\n    }\n\n    private void waitForEvent() throws InterruptedException {\n        Thread.sleep(40000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hello World Program via Command Line\nDESCRIPTION: Command line instructions for compiling and running the Hello World Java program, demonstrating proper terminal command formatting.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/documentation-style-guide.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ javac HelloWorld.java\n\n$ java HelloWorld\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Improved Hidden Input with Dedicated Method in Java\nDESCRIPTION: A code snippet showing how extracting functionality into a dedicated method can improve the readability of the hidden input implementation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/coding-standards.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\na.add(\"type\", \"hidden\")\n .add(\"id\", \"__multiselect_\" + safeId(id));\n```\n\n----------------------------------------\n\nTITLE: Creating Package Level Properties File in Java\nDESCRIPTION: Defines a package-level properties file named package.properties with a greeting message.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ngreeting=Welcome to The Wonderful World of Struts 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Bean Tag in FreeMarker\nDESCRIPTION: Example showing how to instantiate a SimpleCounter bean and set its foo property using FreeMarker syntax. The bean is placed in the ValueStack context and can be accessed using property tags.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/bean-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: freemarker\nCODE:\n```\n[@s.bean name=\"org.apache.struts2.example.counter.SimpleCounter\" var=\"counter\"]\n   [s:param name=\"foo\" value=\"BAR\"/]\n   The value of foo is : [s:property value=\"foo\"/], when inside the bean tag.\n[/s:bean]\n```\n\n----------------------------------------\n\nTITLE: Struts Configuration for Spring-Managed ActionSupport Class\nDESCRIPTION: This XML snippet shows how to configure a Struts action when using Spring to manage the ActionSupport class. The class attribute references the Spring bean ID instead of the actual class name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/spring.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"edit\" class=\"editAction\" method=\"input\">\n    <result name=\"input\">/edit.jsp</result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, defining layout, title and parent page hierarchy.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/editing-the-documentation.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: default\ntitle: Editing the Documentation\nparent:\n  title: Contributors Guide\n  url: index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Struts Dispatcher with Servlet Context in WebSphere 6\nDESCRIPTION: This Java servlet implementation works around a WebSphere classloader bug by initializing the Struts Dispatcher with the servlet context. It needs to be launched at application startup to ensure properties files are loaded correctly.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/websphere.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.struts2.dispatcher.Dispatcher;\n \npublic class LaunchServlet extends HttpServlet implements Servlet {\n \n\tpublic LaunchServlet() {\n\t\tsuper();\n\t}\n \n\tpublic void init(ServletConfig arg0) throws ServletException {\n\t\t\n\t\t// this works around a bug in the websphere classloader.\n\t\tsuper.init(arg0);\n\t\tDispatcher d = new Dispatcher(getServletContext(), new HashMap<String, String>());\t\n\t\t\n\t}\n \n}\n```\n\n----------------------------------------\n\nTITLE: Defining JasperReports Template in XML\nDESCRIPTION: Creates an XML-based JasperReports template that defines fields, layout, and presentation for generating a report listing Person objects with their name and lastName.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE jasperReport PUBLIC \"-//JasperReports//DTD Report Design//EN\" \"http://jasperreports.sourceforge.net/dtds/jasperreport.dtd\">\n<jasperReport name=\"jasper_test\">\n  <!-- Our fields from the Person class. -->\n  <field name=\"name\" class=\"java.lang.String\"/>\n  <field name=\"lastName\" class=\"java.lang.String\"/>\n  <title>\n    <band height=\"50\">\n      <staticText>\n        <reportElement x=\"0\" y=\"0\" width=\"180\" height=\"15\"/>\n        <textElement/>\n        <text><![CDATA[Struts 2 JasperReports Sample]]></text>\n      </staticText>\n    </band>\n  </title>\n  <pageHeader>\n    <band/>\n  </pageHeader>\n  <columnHeader>\n    <band height=\"20\">\n      <staticText>\n        <reportElement x=\"180\" y=\"0\" width=\"180\" height=\"20\"/>\n        <textElement>\n          <font isUnderline=\"true\"/>\n        </textElement>\n        <text><![CDATA[NAME]]></text>\n      </staticText>\n      <staticText>\n        <reportElement x=\"360\" y=\"0\" width=\"180\" height=\"20\"/>\n        <textElement>\n          <font isUnderline=\"true\"/>\n        </textElement>\n        <text><![CDATA[LASTNAME]]></text>\n      </staticText>\n    </band>\n  </columnHeader>\n  <detail>\n    <band height=\"20\">\n      <textField>\n        <reportElement x=\"180\" y=\"0\" width=\"180\" height=\"15\"/>\n        <textElement/>\n        <textFieldExpression><![CDATA[$F{name}]]></textFieldExpression>\n      </textField>\n      <textField>\n        <reportElement x=\"360\" y=\"0\" width=\"180\" height=\"15\"/>\n        <textElement/>\n        <textFieldExpression><![CDATA[$F{lastName}]]></textFieldExpression>\n      </textField>\n    </band>\n  </detail>\n  <columnFooter>\n    <band/>\n  </columnFooter>\n  <pageFooter>\n    <band height=\"15\">\n      <staticText>\n        <reportElement x=\"0\" y=\"0\" width=\"40\" height=\"15\"/>\n        <textElement/>\n        <text><![CDATA[Page:]]></text>\n      </staticText>\n      <textField>\n        <reportElement x=\"40\" y=\"0\" width=\"100\" height=\"15\"/>\n        <textElement/>\n        <textFieldExpression class=\"java.lang.Integer\"><![CDATA[$V{PAGE_NUMBER}]]></textFieldExpression>\n      </textField>\n    </band>\n  </pageFooter>\n  <summary>\n    <band/>\n  </summary>\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Theme Control Header in FreeMarker\nDESCRIPTION: FreeMarker template for the AJAX theme's control header that handles form validation. It adds onblur validation events to HTML form controls when validation is enabled, and includes the standard XHTML control header for labels.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/ajax-theme.md#2025-04-08_snippet_0\n\nLANGUAGE: ftl\nCODE:\n```\n<#if parameters.label?if_exists != \"\">\n\t<#include \"/${parameters.templateDir}/xhtml/controlheader.ftl\" />\n</#if>\n<#if parameters.form?exists && parameters.form.validate?default(false) == true>\n\t<#-- can't mutate the data model in freemarker -->\n    <#if parameters.onblur?exists>\n        ${tag.addParameter('onblur', \"validate(this);${parameters.onblur}\")}\n    <#else>\n        ${tag.addParameter('onblur', \"validate(this);\")}    \n    </#if>\n</#if>\n```\n\n----------------------------------------\n\nTITLE: JasperReports Result Configuration\nDESCRIPTION: Result type configuration for successful execution of JasperReports action.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/jasper-reports-tutorial.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<result name=\"success\" type=\"jasper\">\n```\n\n----------------------------------------\n\nTITLE: Creating PGP Keys for Struts Distribution\nDESCRIPTION: Commands to checkout Struts Maven build configuration, create PGP keys, and update the KEYS file in the Apache distribution directory.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/one-time-steps.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsvn co https://svn.apache.org/repos/asf/struts/maven/trunk/build struts-maven-build\ncd struts-maven-build\n(gpg --fingerprint --list-sigs <your name> && gpg --armor --export <your name>) >> KEYS\nscp KEYS people.apache.org:/www/www.apache.org/dist/struts\nsvn commit KEYS -m \"Add public key\"\n```\n\n----------------------------------------\n\nTITLE: WebLogic Error Message for Convention Plugin\nDESCRIPTION: Example error message when deploying a Struts application that uses the Convention Plugin to WebLogic, indicating that no Action is mapped for a specific namespace and action name.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/weblogic.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThere is no Action mapped for namespace / and action name xxxxxx\n```\n\n----------------------------------------\n\nTITLE: Implementing Bookmark Deletion in Struts 2 Portlet\nDESCRIPTION: This Java class implements the action for deleting bookmarks in a Struts 2 portlet. It uses PortletPreferences to remove bookmark values and implements PortletPreferencesAware interface.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class DeleteBookmarkAction extends DefaultActionSupport implements PortletPreferencesAware{\n\n   private String bookmarkName;\n\t\n   private PortletPreferences portletPreferences;\n\n   @StrutsParameter\n   public void setBookmarkName(String bookmarkName) {\n      this.bookmarkName = bookmarkName;\n   }\n\t\n   public void setPortletPreferences(PortletPreferences portletPreferences) {\n      this.portletPreferences = portletPreferences;\n   }\n\t\n   @Override\n   public String execute() throws Exception {\n      portletPreferences.reset(bookmarkName);\n      portletPreferences.store();\n      return SUCCESS;\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Apache Struts Repository from GitHub\nDESCRIPTION: Command to clone the Apache Struts repository using GitHub mirror URL.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/submitting-patches.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/apache/struts.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Security for SessionAware\nDESCRIPTION: Implementation of ParameterNameAware interface to prevent session-related security vulnerabilities.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/http-session.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic boolean acceptableParameterName(String parameterName) {\n    boolean allowedParameterName = true ;\n\n    if ( parameterName.contains(\"session\")  || parameterName.contains(\"request\") ) {\n        allowedParameterName = false ;\n    } \n\n    return allowedParameterName;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Maven Memory Options\nDESCRIPTION: Alternative environment variable setting for larger Maven memory allocation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/one-time-steps.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMAVEN_OPTS=-Xmx1024m\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Incompatible Improvements in web.xml\nDESCRIPTION: XML configuration for setting FreeMarker incompatible improvements via ServletContext initialization parameters. Available since Struts 2.5.13.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<init-param>\n    <param-name>freemarker.incompatible_improvements</param-name>\n    <param-value>2.3.22</param-value>\n</init-param>\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete Bookmark Action in Struts 2 XML\nDESCRIPTION: This XML snippet configures the delete bookmark action in the Struts 2 configuration file. It specifies the action class and redirects to the index action after deletion.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/portlet/struts-2-portlet-tutorial.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<action name=\"deleteBookmark\" class=\"com.mycompany.DeleteBookmarkAction\">\n   <result type=\"redirectAction\">\n      <param name=\"actionName\">index</param>\n   </result>\n</action>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function to Generate Unsubscribe Email Address\nDESCRIPTION: JavaScript function that generates an unsubscribe email address for the Struts Users mailing list. It takes an email address input, replaces the @ symbol with =, and creates a properly formatted unsubscribe address.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/mail.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction generate(form) {\n  var badBoy=form[0];\n  var email = 'user-unsubscribe-' + badBoy.value.replace('@', '=') + '@struts.apache.org';\n  var link = document.getElementById('ready-email');\n  link.style.visibility = 'visible';\n  link.href = 'mailto:' + email;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Build Settings\nDESCRIPTION: Maven build configuration that sets the final WAR file name for the Struts 2 application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/how-to-create-a-struts2-web-application.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <finalName>basic-struts</finalName>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Deleting Git Release Tags\nDESCRIPTION: Command to remove an existing Git tag from the remote repository when retagging is needed.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/one-time-steps.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push --delete origin STRUTS_#_#_#\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeMarker Cache in struts.xml\nDESCRIPTION: XML configuration options for enabling FreeMarker cache in struts.xml. These constants control cache size, update delay, and enable templatesCache functionality.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/freemarker.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.freemarker.mru.max.strong.size\" value=\"250\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.freemarker.templatesCache.updateDelay\" value=\"60 s\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.freemarker.templatesCache\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Forms Using Struts Tags\nDESCRIPTION: This snippet demonstrates how to create a form using Struts Tags, showing how it simplifies the code and adds features like validation and localization.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/nutshell.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<s:actionerror/>\n<s:form action=\"Profile\\_update\" validate=\"true\">\n    <s:textfield label=\"Username\" name=\"username\"/>\n    <s:password label=\"Password\" name=\"password\"/>\n    <s:password label=\"(Repeat) Password\" name=\"password2\"/>\n    <s:textfield label=\"Full Name\" name=\"fullName\"/>\n    <s:textfield label=\"From Address\" name=\"fromAddress\"/>\n    <s:textfield label=\"Reply To Address\" name=\"replyToAddress\"/>\n    <s:submit value=\"Save\" name=\"Save\"/>\n    <s:submit action=\"Register_cancel\" value=\"Cancel\" name=\"Cancel\"  onclick=\"form.onsubmit=null\"/>\n</s:form>\n```\n\n----------------------------------------\n\nTITLE: Defining NoOp Interceptor Configuration\nDESCRIPTION: YAML frontmatter configuration for the NoOp Interceptor documentation page, specifying layout and navigation hierarchy.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/no-op-interceptor.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: NoOp Interceptor\nparent:\n    title: Interceptors\n    url: interceptors.html\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing toString Method in Java Model Class\nDESCRIPTION: This Java code adds a toString method to the MessageStore class. This method will be called when the object is displayed using the Struts 2 property tag.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/using-tags.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic String toString() {\n    return message + \" (from toString)\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fork Remote to Local Repository\nDESCRIPTION: Git command to add a personal fork as a remote to the local repository for contributing changes.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/submitting-patches.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add fork https://github.com/my-username/struts.git\n```\n\n----------------------------------------\n\nTITLE: Skipping Assembly Creation in Maven Build\nDESCRIPTION: Demonstrates the Maven command to skip creating assembly packages during the build process.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -DskipAssembly\n```\n\n----------------------------------------\n\nTITLE: Improved Hidden Input with Builder Pattern in Java\nDESCRIPTION: A code snippet demonstrating how using a builder pattern can enhance readability and maintainability of the hidden input field implementation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/coding-standards.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\na.add(\"type\", \"hidden\")\n .add(\"id\", HtmlID.with(\"__multiselect_\").withSafeId(id).create());\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Package in Struts XML\nDESCRIPTION: Sets the default package for created Action mappings in the Codebehind Plugin. This constant can be configured in any Struts configuration file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/codebehind/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constant name=\"struts.codebehind.defaultPackage\" value=\"codebehind-default\" />\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Configuration Files in Struts XML\nDESCRIPTION: Shows how to use the <include> element to split Struts configuration across multiple XML files. Each included file must maintain the same format as struts.xml, including the DOCTYPE declaration. Files can be placed anywhere on the classpath and referenced by path in the 'file' attribute.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/include-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE struts PUBLIC\n  \"-//Apache Software Foundation//DTD Struts Configuration 6.0//EN\"\n  \"https://struts.apache.org/dtds/struts-6.0.dtd\">\n<struts>\n    <include file=\"Home.xml\"/>\n    <include file=\"Hello.xml\"/>\n    <include file=\"Simple.xml\"/>\n    <include file=\"/util/POJO.xml\"/>\n    <include file=\"/com/initech/admin/admin-struts.xml\"/>\n</struts>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Install Command for First-Time Build\nDESCRIPTION: Demonstrates the Maven command to run the install phase, which is recommended for first-time builds to resolve module dependencies.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Building Apache Struts with Maven\nDESCRIPTION: Maven commands for building Apache Struts from source, with options for full build and build without assembly.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/builds.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mvn install\n```\n\nLANGUAGE: bash\nCODE:\n```\n> mvn -DskipAssembly=true install\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining the page layout and navigation hierarchy.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/config-browser/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Config Browser Plugin\nparent:\n    url: ../\n    title: Plugins\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table of Bundled Struts 2 Plugins\nDESCRIPTION: This markdown code snippet creates a table listing all bundled plugins for Apache Struts 2, including their names, supported versions, and relevant notes. It provides a quick reference for developers looking to use specific plugins in their Struts 2 applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                      | Versions       | Note                                                                  |\n|-------------------------------------------|----------------|-----------------------------------------------------------------------|\n| [Async Plugin](async)                     | 6.0.0+         |\n| [Bean Validation Plugin](bean-validation) | 2.5+           |\n| [CDI (JSR 299) Plugin](cdi)               | 2.3.1+         |\n| [Codebehind Plugin](codebehind)           | < 2.5          | removed since 2.5, use [Convention Plugin](convention)                |\n| [Config Browser Plugin](config-browser)   |                |                                                                       |\n| [Convention Plugin](convention)           | 2.1.3+         |                                                                       |\n| [DWR Plugin](dwr)                         |                |                                                                       |\n| [Embedded JSP Plugin](embedded-jsp)       | 2.1.7+         | deprecated since 6.0.0                                                |\n| [JasperReports Plugin](jasperreports)     |                |                                                                       |\n| [Java 8 Support Plugin](java-8-support)   | 2.3.21 - 2.5.2 |                                                                       |\n| [Javatemplates Plugin](javatemplates)     | 2.1.3+         |                                                                       |\n| [JFreeChart Plugin](jfreechart)           |                |                                                                       |\n| [JSF Plugin](jsf)                         | < 2.5          | removed since 2.5                                                     |\n| [JSON Plugin](json)                       | 2.1.7+         |                                                                       |\n| [JUnit Plugin](junit)                     |                |                                                                       |\n| [OVal Plugin](oval)                       | 2.1.7+         | deprecated since 6.0.0, use [Bean Validation Plugin](bean-validation) |\n| [OSGi Plugin](osgi)                       | 2.1.7+         | deprecated since 6.0.0                                                |\n| [Plexus Plugin](plexus)                   |                | deprecated since 6.0.0                                                |\n| [Portlet Plugin](portlet)                 |                | deprecated since 6.0.0                                                |\n| [Portlet Tiles Plugin](portlet-tiles)     | 2.3.5+         | deprecated since 6.0.0                                                |\n| [REST Plugin](rest)                       | 2.1.1+         |                                                                       |\n| [SiteGraph Plugin](sitegraph)             | < 2.5          | removed since 2.5                                                     |\n| [SiteMesh Plugin](sitemesh)               |                |                                                                       |\n| [Spring Plugin](spring)                   |                |                                                                       |\n| [Struts 1 Plugin](struts-1)               | < 2.5          | removed since 2.5                                                     |\n| [TestNG Plugin](testng)                   |                |                                                                       |\n| [Tiles Plugin](tiles)                     |                |                                                                       |\n| [Tiles 3 Plugin](tiles-3)                 | < 2.5          | removed since 2.5                                                     |\n| [Velocity Plugin](velocity)               |                |                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Manual Release Deployment\nDESCRIPTION: Commands for manually deploying the release if the automated process fails or needs to be run again.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-normal-release.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout STRUTS_2_5_[PATCH_VERSION]\nmvn javadoc:javadoc deploy --no-plugin-updates -DperformRelease=true -Papache-release\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This snippet demonstrates how to create a dynamic table of contents in Markdown using kramdown syntax. It excludes the main header from the ToC.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/birdseye.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Struts Action\nDESCRIPTION: Shows an example of the JSON output generated from a Struts action. This represents the serialized form of the action's properties, including custom naming using the @JSON annotation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/json/index.md#2025-04-08_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{  \n   \"field1\" : \"str\", \n   \"ints\": [10, 20],\n   \"map\": {\n       \"John\":\"Galt\"\n   },\n   \"newName\": \"custom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Language-Specific Properties for Internationalization\nDESCRIPTION: This snippet demonstrates the content of a Spanish language properties file (Register_es.properties) used for internationalization in Struts 2.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/getting-started/message-resource-files.md#2025-04-08_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\npersonBean.firstName=Nombre\npersonBean.lastName=Apellidos\npersonBean.age=Edad\npersonBean.email=Correo\nthankyou=Gracias por registrarse, %{personBean.firstName}. \n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings for Apache Servers\nDESCRIPTION: XML configuration for Maven settings.xml to enable Apache server authentication and GPG signing for releases.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/one-time-steps.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <servers>\n    <!-- To publish a snapshot of some part of Maven -->\n    <server>\n      <id>apache.snapshots.https</id>\n      <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n      <password> <!-- YOUR APACHE LDAP PASSWORD --> </password>\n    </server>\n    <!-- To stage a release of some part of Maven -->\n    <server>\n      <id>apache.releases.https</id>\n      <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n      <password> <!-- YOUR APACHE LDAP PASSWORD --> </password>\n    </server>\n  </servers>\n  <profiles>\n    <profile>\n      <id>apache-release</id>\n      <properties>\n        <gpg.passphrase> <!-- YOUR KEY PASSPHRASE --> </gpg.passphrase>\n      </properties>\n    </profile>\n  </profiles>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Logging Potential Security Issue in Apache Struts 2.5.30\nDESCRIPTION: Example of a warning log message that may appear if an expression is not allowed by the accepted patterns in Apache Struts 2.5.30. This is related to a fix for a double evaluation security vulnerability.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2022.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nExpression [so-and-so] isn't allowed by pattern [so-and-so]! See Accepted / Excluded patterns at\nhttps://struts.apache.org/security/\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for Velocity\nDESCRIPTION: Maven configuration for Velocity template engine dependencies.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/osgi/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<depndencies>\n    <dependency>\n        <groupId>velocity</groupId>\n        <artifactId>velocity</artifactId>\n        <version>1.5</version>\n    </dependency>\n\n    <dependency>\n        <groupId>velocity-tools</groupId>\n        <artifactId>velocity-tools</artifactId>\n        <version>1.3</version>\n    </dependency>\n\n    <dependency>\n        <groupId>commons-digester</groupId>\n        <artifactId>commons-digester</artifactId>\n        <version>1.8</version>\n    </dependency>\n</depndencies>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Package Command\nDESCRIPTION: Shows the Maven command to run the package phase, which is useful for first-time builds.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Release Quality Vote Template\nDESCRIPTION: Comprehensive template for initiating a release quality vote, including distribution links and voting guidelines.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/sample-announcements.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSubject: [VOTE] Struts #.#.# Vote\nThe Struts #.#.# test build is now available.\n\nRelease notes:\n* [https://cwiki.apache.org/confluence/display/WW/Version+Notes+#.#.#]\n\nDistribution:\n* [https://dist.apache.org/repos/dist/dev/struts/#.#.#/]\n\nMaven 2 staging repository:\n* [https://repository.apache.org/content/groups/staging/]\n\nOnce you have had a chance to review the test build, please respond with a vote on its quality:\n\n[ ] Leave at test build\n[ ] Alpha\n[ ] Beta\n[ ] General Availability (GA)\n\nEveryone who has tested the build is invited to vote. Votes by PMC members are considered binding. A vote passes if \nthere are at least three binding +1s and more +1s than -1s.\n\nThe vote will remain open for at least 72 hours, longer upon request. A vote can be amended at any time to upgrade \nor downgrade the quality of the release based on future experience. If an initial vote designates the build as \"Beta\", \nthe release will be submitted for mirroring and announced to the user list. Once released as a public beta, subsequent \nquality votes on a build may be held on the user list.\n\nAs always, the act of voting carries certain obligations. A binding vote not only states an opinion, but means that \nthe voter is agreeing to help do the work\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Commons FileUpload\nDESCRIPTION: Maven XML configuration showing how to include the secure version (1.3.1) of Commons FileUpload library to prevent DoS attacks in Struts applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2014.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>commons-fileupload</groupId>\n  <artifactId>commons-fileupload</artifactId>\n  <version>1.3.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Velocity Resource Loaders for WebLogic\nDESCRIPTION: Modifies the template loaders section in the struts-velocity.properties file to ensure proper resource loading in WebLogic. Sets up both file and class resource loaders with appropriate caching settings.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/weblogic.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n===========================================\nresource.loader = class\n\nfile.resource.loader.description = Velocity File Resource Loader\nfile.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader\nfile.resource.loader.path = .\nfile.resource.loader.cache = false\nfile.resource.loader.modificationCheckInterval = 2\n\nclass.resource.loader.class = org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\nclass.resource.loader.cache = true\n==========================================\n```\n\n----------------------------------------\n\nTITLE: Registering Tiles Listener in web.xml\nDESCRIPTION: This XML configuration registers the Tiles listener in the web.xml file. It specifies the CompleteAutoloadTilesListener class as the listener-class, which is required for Tiles 3 support in a Struts application.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles-3/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<listener>\n    <listener-class>org.apache.tiles.extras.complete.CompleteAutoloadTilesListener</listener-class>\n</listener>\n```\n\n----------------------------------------\n\nTITLE: Removing Stale XWork JARs\nDESCRIPTION: Specifies the directory to remove in order to clear out any stale XWork 2 JARs from the local Maven repository.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-with-maven.md#2025-04-08_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.m2/repository\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Project POM for Test Builds\nDESCRIPTION: XML configuration for project POM.xml to include Apache staging repository configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/builds.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<repositories>\n    <repository>\n        <id>apache-pre-release</id>\n        <url>https://repository.apache.org/content/repositories/staging/</url>\n        <layout>default</layout>\n    </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Creating Struts 2 Application Using Maven Archetype\nDESCRIPTION: Example Maven command to create a Struts 2 application using the blank archetype, specifying groupId and artifactId for the new project.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B \\\n                       -DgroupId=tutorial \\\n                       -DartifactId=tutorial \\\n                       -DarchetypeGroupId=org.apache.struts \\\n                       -DarchetypeArtifactId=struts2-archetype-blank\n```\n\n----------------------------------------\n\nTITLE: Using Tiles Annotations in Struts Action\nDESCRIPTION: Java code demonstrating how to use Tiles annotations in a Struts action class instead of XML configuration.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/plugins/tiles/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Result(name = \"success\", type=\"tiles\")\n@TilesDefinition(extend = \"fooLayout\", putAttributes = {\n    @TilesPutAttribute(name = \"header\", value = \"/WEB-INF/tiles/header.jsp\"),\n    @TilesPutAttribute(name = \"body\", value = \"/WEB-INF/tiles/body.ftl\")\n})\npublic class FooAction extends ActionSupport {\n```\n\n----------------------------------------\n\nTITLE: Moving Release Assemblies Script\nDESCRIPTION: Bash script to download release assemblies from staging, rename files, generate checksums, and publish to the Apache distribution directory for testing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-normal-release.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\n#create the destination directory\necho \"Creating working dir $VERSION\"\nmkdir $VERSION\ncd $VERSION\n\n# get the distro\necho \"Getting distro $VERSION\"\nwget -erobots=off -nv  -l 1 --accept=jar,zip,md5,sha1,asc -r --no-check-certificate -nd -nH https://repository.apache.org/content/groups/staging/org/apache/struts/struts2-assembly/$VERSION\n\n# rename files\necho \"Renaming files\"\nfor f in *2-assembly*.zip*\ndo\n mv $f `echo $f | sed s/2-assembly//g`\ndone\n\n# remove unneeded files\necho \"Removing uneeded files\"\nfor f in struts2-assembly-*.pom*\ndo\n rm $f\ndone\n\n# remove uneeded hashes\necho \"Removing uneeded files\"\nrm *.md5\nrm *.sha1\n\n# generates sha signatures\necho \"Generating SHA signatures\"\nfor f in *.zip\ndo\n  shasum -a 256 $f > $f.sha256\n  shasum -a 512 $f > $f.sha512\ndone\n\ncd ..\n\n# checking out repo\necho \"Publishing artifacts for test\"\nsvn --no-auth-cache co --depth empty https://dist.apache.org/repos/dist/dev/struts/ struts-dev\nmv $VERSION struts-dev/\ncd struts-dev\nsvn add --force ./\nsvn --no-auth-cache commit -m \"Updates test release $VERSION\"\n\ncd ..\nrm -r struts-dev\n\necho \"Done!\"\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Convention-based Project\nDESCRIPTION: Maven command to generate a Struts 2 project using the convention-based archetype, which includes features like convention-based validation, example actions, and unit testing.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B -DgroupId=com.mycompany.mysystem \\\n                          -DartifactId=myWebApp \\\n                          -DarchetypeGroupId=org.apache.struts \\\n                          -DarchetypeArtifactId=struts2-archetype-convention\n```\n\n----------------------------------------\n\nTITLE: Referring to a Property on the Value Stack\nDESCRIPTION: Creates a textfield that binds to the 'username' property on the value stack, which is a common pattern in Struts applications.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<s:textfield name=\"username\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Struts 2 Project Using Staging Profile\nDESCRIPTION: Maven command to generate a Struts 2 project using the blank archetype from the staging repository, utilizing the staging profile.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/maven-archetypes/index.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -B \\\n                       -DgroupId=tutorial \\\n                       -DartifactId=tutorial \\\n                       -DarchetypeGroupId=org.apache.struts \\\n                       -DarchetypeArtifactId=struts2-archetype-blank \\\n                       -Pstaging\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining the page layout and title for the documentation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/commercial-support.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Commercial Support\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Struts Annotations Repository\nDESCRIPTION: Command to clone the Struts Annotations repository from Apache's GitBox. This is the first step in obtaining a fresh checkout of the source code.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/building-struts-annotations.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clons https://gitbox.apache.org/repos/asf/struts-annotations.git\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Struts Helping Page\nDESCRIPTION: Basic YAML frontmatter for a Markdown document that sets the page layout to default and defines the title as 'Helping'. This is used to configure how the page will be rendered in a static site generator.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/helping.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Helping\n---\n```\n\n----------------------------------------\n\nTITLE: Evaluating Booleans with Explicit Expression and Property Reference\nDESCRIPTION: Creates a select field that explicitly evaluates the 'allowMultiple' property for its multiple attribute using the %{} notation.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"state.label\" name=\"state\" multiple=\"%{allowMultiple}\"/>\n```\n\n----------------------------------------\n\nTITLE: Verifying PGP Signatures Using PGPK\nDESCRIPTION: Commands for verifying Apache Struts distribution file signatures using the PGPK tool. This requires downloading the KEYS file from the main distribution directory first, then importing it and verifying the signature against the downloaded file.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/download.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n% pgpk -a KEYS\n% pgpv ${filename}.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Front Matter\nDESCRIPTION: YAML front matter defining the page layout and title for the announcements page\nSOURCE: https://github.com/apache/struts-site/blob/main/source/announce-2016.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Announcements 2016\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Struts Framework Properties in default.properties\nDESCRIPTION: The default.properties file from the Struts core that defines all configurable framework properties. This file shows the default values that can be overridden in a custom properties file placed in the classpath.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/core-developers/default-properties.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n### START SNIPPET: complete_file\n\n### Struts default properties\n###(can be overridden by a struts.properties file in the root of the classpath)\n###\n\n### This can be used to set your default locale and encoding scheme\n# struts.locale=en_US\nstruts.i18n.encoding=UTF-8\n\n### if specified, the default object factory can be overridden here\n### Note: short-hand notation is supported in some cases, such as \"spring\"\n###       Alternatively, you can provide a com.opensymphony.xwork2.ObjectFactory subclass name here\nstruts.objectFactory = com.opensymphony.xwork2.ObjectFactory\n\n### specifies the autoWiring logic when using the SpringObjectFactory.\n### valid values are: name, type, auto, and constructor (name is the default)\nstruts.objectFactory.spring.autoWire = name\n\n### indicates to the struts-spring integration if Class instances should be cached\n### this should, until a future Spring release makes it possible, be left as true\n### unless you know exactly what you are doing!\n### valid values are: true, false (true is the default)\nstruts.objectFactory.spring.useClassCache = true\n\n### ensures the autowire strategy is always respected.\n### valid values are: true, false (false is the default)\nstruts.objectFactory.spring.autoWire.alwaysRespect = false\n\n### if specified, the default object type determiner can be overridden here\n### Note: short-hand notation is supported in some cases, such as \"tiger\"\n###       Alternatively, you can provide a com.opensymphony.xwork2.util.ObjectTypeDeterminer implementation name here\n### Note: By default, com.opensymphony.xwork2.util.DefaultObjectTypeDeterminer is used which handles type detection\n###       using generics. com.opensymphony.xwork2.util.GenericsObjectTypeDeterminer was deprecated and should not be used.\nstruts.objectTypeDeterminer = com.opensymphony.xwork2.util.DefaultObjectTypeDeterminer\n\n### Parser to handle HTTP POST requests, encoded using the MIME-type multipart/form-data\n# struts.multipart.parser=cos\n# struts.multipart.parser=pell\nstruts.multipart.parser=jakarta-stream\n# struts.multipart.parser=jakarta\n\n### Uses javax.servlet.context.tempdir by default\nstruts.multipart.saveDir=\n\n### If files are larger than this limit, they'll be rejected\nstruts.multipart.maxSize=2097152\n\n### Set the file upload max size per file. If it's not specified, maxSize is used.\nstruts.multipart.maxFileSize=\n\n### Files with extensions in this list will be rejected from file upload\nstruts.multipart.blockFiles=compile-time-config.xml,dwrConfig.xml\n\n### Set the buffer size to use when uploading files (optional)\nstruts.multipart.bufferSize=\n\n### for customized file upload error messages (per file size limit)\nstruts.messages.error.content.type.not.allowed=Content-Type not allowed: {0}.\nstruts.messages.error.file.extension.not.allowed=File extension not allowed: {0}.\nstruts.messages.error.file.too.large=The file is too large to be uploaded: {0} \"{1}\" \"{2}\" {3}.\nstruts.messages.error.upload.too.large=The request is too large to be processed.\nstruts.messages.error.uploading=Error uploading: {0} {1}.\n\n### for customized BeanUtilsBean converter behavior. The extended bean utils bean is used by both, bean tag\n### and type converter. It can be used to handle/convert null values - don't return None as String value\nstruts.bean.utils.object.null-handler=com.opensymphony.xwork2.conversion.impl.NoneValueHandler\n\n### struts.custom.properties allows one to override any property in this file\n### for a given request. Pass-in the properties key-value in request's parameter\nstruts.custom.properties=_action_properties\nstruts.custom.i18n.resources=_action_i18n_resources\n\n### How request URLs are mapped to and from actions\nstruts.mapper.class=org.apache.struts2.dispatcher.mapper.DefaultActionMapper\n\n### Used by the DefaultActionMapper\n### You may provide a comma separated list, e.g. struts.action.extension=action,jnlp,do\n### The blank extension allows you to match directory listings as well as pure action names\n### without interfering with static resources, which can be specified as an empty string\n### prior to a comma e.g. struts.action.extension=, or struts.action.extension=x,y,z,,\nstruts.action.extension=action,,\n\n### Used by FilterDispatcher\n### If true then Struts serves static content from inside its jar.\n### If false then the static content must be available at <context_path>/struts\nstruts.serve.static=true\n\n### Used by FilterDispatcher\n### This is good for development where one wants changes to the static content be\n### fetch on each request.\n### NOTE: This will only have effect if struts.serve.static=true\nstruts.serve.static.browserCache=true\n\n### Standard UI theme\n### Change this to reflect which path should be used for JSP control tag templates by default\nstruts.ui.theme=xhtml\nstruts.ui.templateDir=template\n#sets the default template type. Either ftl, vm, or jsp\nstruts.ui.templateSuffix=ftl\n\n### Configuration reloading\n### This will cause the configuration to reload when WEB-INF/classes changes\n### (this is here for backwards compatibility - see below)\nstruts.configuration.xml.reload=false\n\n### Configuration comma delimited list of resources to reload\n### Change this to include resources you want to watch for changes\nstruts.configuration.reload=\n\n### List of Freemarker modifiers to load\nstruts.freemarker.modifiers.append=\n\n### Load macros from the classpath instead of the web root.\nstruts.freemarker.templatesPath=/template\n\n### Sets the Struts Velocity configuration. Must be a class that extends\n### org.apache.velocity.runtime.Defaults.  The JSP/Velocity integration is\n### deprecated, so the default engine for Velocity templates is now\n### org.apache.struts2.views.velocity.StrutsVelocityManager.\n### Note: You must also have the Velocity dependencies in your classpath.\n### These can be found in the Velocity dependencies lib, or you can just include\n### struts-velocity.jar.\nstruts.velocity.configfile = velocity.properties\n\n### Comma separated list of resources to search for a velocity.properties file\nstruts.velocity.contexts =\n\n### Location of the velocity toolbox\nstruts.velocity.toolboxlocation=\n\n### List of VelocityContext providers.\nstruts.velocity.contexts.provider = action,chain,request,session,application\n\n### The location where struts velocity templates are loaded from.\n### By default they are loaded from \"velocity\" directory under webapp and from struts.jar!\nstruts.velocity.templatesPath = /template/velocity\n\n### Cache?\nstruts.velocity.cacheable = false\n\n### Comma separated list of regular expressions matching transient token names.\nstruts.token.name.patterns = struts.token\n\n### Comma separated list of regular expressions matching pattern of actions\n### that should be excluded from token session and token parameter interceptors.\nstruts.token.excludePatterns =\n\n### Comma separated list of regular expressions matching pattern of actions\n### that should be excluded from referrer interceptor.\nstruts.referrer.excludePatterns =\n\n### Defines the default character encoding to be used for URLs and form values,\n### changing this might requires corresponding configuration of the servlet container\nstruts.url.encoding=UTF-8\n\n### Excluded params configuration\n### see struts2-core/src/main/resources/struts-excluded-params.properties\nstruts.excludedPatterns.file = struts-excluded-params.properties\n\n### Configure a custom ObjectInputFilter\n### to prevent Java deserialization attacks\n### see struts2-core/src/main/resources/struts-deser-filter.properties\nstruts.deser.filter.file = struts-deser-filter.properties\n\n### configure custom parameters that can be removed from the action\nstruts.action.parameters.remove =\n\n### The org.apache.struts2.dispatcher.mapper.ActionMapping implementation,\n### by default DefaultActionMapper is used only support prefix/postfix/ActionName\n### If need custom the implemention can be custom the prefix or others\n#struts.mapper.action.prefix.enabled=true\n#struts.mapper.action.prefix.crossNamespaces=false\n# for DMI:\nstruts.mapper.action.prefix.enabled=true\n# for REST: struts.mapper.action.prefixOverride.RESTPrefixCheck=true\n#struts.mapper.action.postfix.enabled=true\n\n### used to build URLs, such as the UrlTag\nstruts.url.http.port = 80\nstruts.url.https.port = 443\n### possible values are: none, get or all\nstruts.url.includeParams = none\n\n### whether to cache SimpleTextParser for attributes parsing on not\nstruts.parser.cache.simple.text.parser=true\n\n### Parse Locale provided via i18n Interceptor and use it for formatting\n### By default is true\nstruts.i18n.parse.user.locale=true\n\n### Defines whether the localization should fall back to a matching language-only locale\n### if a language-and-country is specified and the exact locale not found\n### When true, will first test for a locale.toString() match, then locale.getLanguage()\n### When false, it will only check for the locale.toString() match\n### By default true for backward compatibility\nstruts.i18n.fallback.to.language.only=true\n\n### Run action execution in separate thread\n### true by default\nstruts.mapper.action.context.enabled = true\n\n### Run action mappings in separate thread\n### when struts.mapper.action.context.enabled is set to true\n### false by default\nstruts.mapper.action.in.context.exec.enabled = false\n\n### It needs to be set to true when your actions are accessed cross domains. Default is false.\nstruts.allow.cross.domain.access=false\n\n### Configure struts internal bean factory for creating objects, this improves internal performance\nstruts.internal.bean.factory=com.opensymphony.xwork2.util.DefaultObjectFactory\n\n### Configure struts internal bean factory for creating objects, that allows select the reflection provider\n### Valid options: SunReflectionProvider, XWorkConverter, XWorkJAVA8Converter(not yet implemented), and others\nstruts.reflection.provider=com.opensymphony.xwork2.conversion.impl.XWorkConverter\n\n### Configure the ordered list of reflection context factory, when tries to create objects Struts will scan for next factory\n### when previous returned null.\nstruts.reflection.context.factory = com.opensymphony.xwork2.conversion.impl.XWorkBasicValueStackFactory,com.opensymphony.xwork2.conversion.impl.XWorkJavaReflectionProvider,com.opensymphony.xwork2.conversion.impl.XWorkJBossReflectionProvider\n\n### Configure internal bean factory cache, these beans live as long as Dispatcher, do not set this to false!\nstruts.bean.factory.cache=true\n\n### Whether to allow static method access in OGNL expressions or not\nstruts.ognl.allowStaticMethodAccess=false\n\n### Whether to enable OgnlTool for the FreemarkerResult and the VelocityResult\nstruts.freemarker.ognl.integration=false\nstruts.velocity.ognl.integration=false\n\n### When set to false Struts will handle exceptions to restore attributes when rendering Freemarker view\n### because Freemarker internally fails to handle exceptions properly.\n### Set to false unless you need to see messages from the Freemarker engine to debug your templates\nstruts.freemarker.exception.propagate=true\n\n### Allows provide custom TranslationProviders for better i18n support\nstruts.xworkConverter.provider=struts\n\n### Enables creation of json deserialization errors list in ActionContext\nstruts.enableJSONValidation = false\n### Enables caching of json deserialization errors list in ActionContext in session\nstruts.enableJSONValidationCache = false\n### Used as key to store actions errors in session (used only if 'struts.enableJSONValidationCache' is set to true)\nstruts.JSONValidation.cache.actionErrors.key = STRUTS_ACTION_JSON_VALIDATION_ERRORS\n### Valid values are java, json and other formats provided by Struts action tag\nstruts.JSONValidation.error.format = java\n\n### If set to false it will not use Struts internal JakartaStreamMultiPartRequest parser but instead\n### it will try to access input stream directly when it's needed\nstruts.multipart.parser.jakarta.stream.buffer = true\n\n### END SNIPPET: complete_file\n```\n\n----------------------------------------\n\nTITLE: Markdown TOC Configuration\nDESCRIPTION: Markdown configuration for table of contents generation with header exclusion.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/precise-error-reporting.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Booleans with Explicit Expression Notation\nDESCRIPTION: Creates a select field with multiple selection enabled using the explicit expression notation %{true}. This is functionally identical to the previous example but more verbose.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/tag-syntax.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<s:select key=\"state.label\" name=\"state\" multiple=\"%{true}\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors in Markdown for Struts Website\nDESCRIPTION: Examples showing how to apply background colors including primary, info, success, warning, and danger using CSS classes in Markdown.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/updating-website.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nBackground primary\n{:.bg-primary}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nBackground info\n{:.bg-info}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nBackground success\n{:.bg-success}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nBackground warning\n{:.bg-warning}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nBackground danger\n{:.bg-danger}\n```\n\n----------------------------------------\n\nTITLE: Release Announcement Template\nDESCRIPTION: Template for announcing new Struts releases, including version details, requirements, and support information.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/contributors/sample-announcements.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSubject: [ANN] Struts #.#.# [GA | Beta] release available\n\nThe Apache Struts group is pleased to announce that Struts #.#.# is available as a \"[Beta | General Availability]\" \nrelease. [[The Beta designation indicates that we believe the distribution needs wider testing before being upgraded \nto a \"General Availability\" release. Your input is essential.] The GA designation is our highest quality grade.]\n\nApache Struts 2 is an elegant, extensible framework for creating enterprise-ready Java web applications. The framework \nis designed to streamline the full development cycle, from building, to deploying, to maintaining applications over time.\n\n[This release includes one important security fix:]\n\nAll developers are strongly advised to update existing Struts 2 applications to Struts #.#.#.\n\nStruts #.#.# is available in a full distribution, or as separate library, source, example and documentation distributions, \nfrom the releases page.\n* http://struts.apache.org/download.cgi#struts###\n\nThe release is also available from the central Maven repository under Group ID \"org.apache.struts\".\n\nThe #.#.x series of the Apache Struts framework has a minimum requirement of the following specification versions:\n* Java Servlet 2.4 and JavaServer Pages (JSP) 2.0\n* Java 2 Standard Platform Edition (J2SE) 7\n\nThe release notes are available online at:\n* https://cwiki.apache.org/confluence/display/WW/Version+Notes+#.#.#\n\nShould any issues arise with your use of any version of the Struts framework, please post your comments to the user list,\nand, if appropriate, file a tracking ticket.appropriate, file a tracking ticket:\n* https://issues.apache.org/jira/browse/WW\n\n- The Apache Struts group.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Markdown configuration for table of contents generation with specific formatting instructions.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/commercial-support.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Commercial support\n{:.no_toc}\n\n* Will be replaced with the ToC, excluding a header\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Subset Tag with Var Attribute in JSP\nDESCRIPTION: An example showing how to store the subset result in a variable using the var attribute and then process it with standard JSP code.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/subset-tag.md#2025-04-08_snippet_4\n\nLANGUAGE: jsp\nCODE:\n```\n<s:subset var=\"mySubset\" source=\"myList\" count=\"13\" start=\"3\" />\n<%\n    Iterator i = (Iterator) pageContext.getAttribute(\"mySubset\");\n    while(i.hasNext()) {\n%>\n<%=i.next() %>\n<%  } %>\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter for Tag Developers Guide Page\nDESCRIPTION: This YAML snippet defines the Jekyll front matter for the Tag Developers Guide page. It specifies the layout as 'default' and sets the title of the page.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/dojo-submit-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tag Developers Guide\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Option Transfer Select Component in JSP\nDESCRIPTION: Demonstrates the minimum required attributes for creating an optiontransferselect component. It sets up two lists of cartoon characters that can be transferred between left and right select elements.\nSOURCE: https://github.com/apache/struts-site/blob/main/source/tag-developers/optiontransferselect-tag.md#2025-04-08_snippet_0\n\nLANGUAGE: jsp\nCODE:\n```\n<s:optiontransferselect\n     label=\"Favourite Cartoons Characters\"\n     name=\"leftSideCartoonCharacters\"\n     list=\"{'Popeye', 'He-Man', 'Spiderman'}\"\n     doubleName=\"rightSideCartoonCharacters\"\n     doubleList=\"{'Superman', 'Mickey Mouse', 'Donald Duck'}\"\n />\n```"
  }
]