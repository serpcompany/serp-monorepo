[
  {
    "owner": "alekseykorshuk",
    "repo": "yoomoney-api",
    "content": "TITLE: Authorizing with YooMoney API - Python\nDESCRIPTION: This Python snippet demonstrates how to initiate the OAuth process to obtain an access token from YooMoney using the Authorize class from the yoomoney package. Input parameters (client_id, redirect_uri, client_secret, and scope) must be specified based on the user's registered YooMoney application. Outputs: initiates authorization flow; completion provides access token for later API calls. Make sure the appropriate scopes are included for the features you need.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom yoomoney import Authorize\n\nAuthorize(\n      client_id=\"YOUR_CLIENT_ID\",\n      redirect_uri=\"YOUR_REDIRECT_URI\",\n      client_secret=\"YOUR_CLIENT_SECRET\",\n      scope=[\"account-info\",\n             \"operation-history\",\n             \"operation-details\",\n             \"incoming-transfers\",\n             \"payment-p2p\",\n             \"payment-shop\",\n             ]\n      )\n```\n\n----------------------------------------\n\nTITLE: Initializing Quickpay Form for YooMoney - Python\nDESCRIPTION: This snippet shows how to create and configure a Quickpay payment form using the Quickpay class from yoomoney. The user provides basic parameters such as receiver, form type, targets, payment type, and sum. Outputs: prints base_url and redirected_url for payment initiation. Prerequisite: appropriate payment account. Use these URLs in web/app interfaces to embed or redirect users to the payment form.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom yoomoney import Quickpay\n\nquickpay = Quickpay(\n            receiver=\"410019014512803\",\n            quickpay_form=\"shop\",\n            targets=\"Sponsor this project\",\n            paymentType=\"SB\",\n            sum=150,\n            )\n\nprint(quickpay.base_url)\nprint(quickpay.redirected_url)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information - Python\nDESCRIPTION: This example queries a YooMoney account's details using a provided access token and the Client class. It retrieves and prints high-level account information and iterates through some extended data, including linked bank cards. Prerequisite: a valid API token. Inputs: token string. Outputs: human-readable account details, sent to standard output. If no cards are linked, a message is printed; otherwise, card data is enumerated.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom yoomoney import Client\n\ntoken = \"YOUR_TOKEN\"\n\nclient = Client(token)\n\nuser = client.account_info()\n\nprint(\"Account number:\", user.account)\nprint(\"Account balance:\", user.balance)\nprint(\"Account currency code in ISO 4217 format:\", user.currency)\nprint(\"Account status:\", user.account_status)\nprint(\"Account type:\", user.account_type)\n\nprint(\"Extended balance information:\")\nfor pair in vars(user.balance_details):\n    print(\"\\t-->\", pair, \":\", vars(user.balance_details).get(pair))\n\nprint(\"Information about linked bank cards:\")\ncards = user.cards_linked\n\nif len(cards) != 0:\n    for card in cards:\n        print(card.pan_fragment, \" - \", card.type)\nelse:\n    print(\"No card is linked to the account\")\n```\n\n----------------------------------------\n\nTITLE: Querying Operation History - Python\nDESCRIPTION: This Python code retrieves a list of past operations from a user's YooMoney account using the Client class and displays their summary info. It authenticates with a token, fetches operation history, and iterates through each operation printing details. Prerequisite: valid API access token. Inputs: token string. Outputs: operation metadata (ID, status, type, etc.) printed to standard output. Handles paginated data; 'next_record' marker helps for subsequent page queries.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom yoomoney import Client\n\ntoken = \"YOUR_TOKEN\"\n\nclient = Client(token)\n\nhistory = client.operation_history()\n\nprint(\"List of operations:\")\nprint(\"Next page starts with: \", history.next_record)\n\nfor operation in history.operations:\n    print()\n    print(\"Operation:\",operation.operation_id)\n    print(\"\\tStatus     -->\", operation.status)\n    print(\"\\tDatetime   -->\", operation.datetime)\n    print(\"\\tTitle      -->\", operation.title)\n    print(\"\\tPattern id -->\", operation.pattern_id)\n    print(\"\\tDirection  -->\", operation.direction)\n    print(\"\\tAmount     -->\", operation.amount)\n    print(\"\\tLabel      -->\", operation.label)\n    print(\"\\tType       -->\", operation.type)\n```\n\n----------------------------------------\n\nTITLE: Querying Operation Details - Python\nDESCRIPTION: This example queries details for a single YooMoney operation using its ID. It leverages the Client class with an access token, fetches full details of one transaction, and iterates through public object properties, formatting output. Prerequisite: valid token and an operation_id (from previous history call). Outputs: all key-value details for the specified transaction. Handles absent/None fields gracefully.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom yoomoney import Client\n\ntoken = \"YOUR_TOKEN\"\n\nclient = Client(token)\n\ndetails = client.operation_details(operation_id=\"OPERATION_ID\")\n\nproperties = [i for i in details.__dict__.keys() if i[:1] != '_']\n\nmax_size = len(max(properties, key=len))\n\nfor prop in properties:\n    print(prop, \" \" * (max_size - len(prop)), \"-->\", str(details.__getattribute__(prop)).replace('\\n', ' '))\n```\n\n----------------------------------------\n\nTITLE: Installing YooMoney API Python Library - Shell\nDESCRIPTION: These shell commands install the unofficial YooMoney Python library via PyPI or directly from the source repository. The first command updates the library if it's already installed; the second sequence clones the repository and installs using setup.py. Prerequisites: Python environment, pip, and git for sourcing. Inputs: command-line interface; Outputs: library installed to environment. Run in a shell/terminal; user must have appropriate permissions.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install yoomoney --upgrade\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/AlekseyKorshuk/yoomoney-api --recursive\ncd yoomoney-api\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Sample Operation Details Output - Python\nDESCRIPTION: Provides example output for querying operation details from the yoomoney API. The output includes all available fields such as status, type, amounts, participants, messages, and other transaction metadata. The sample helps document the API's detailed structure and typical field formats.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noperation_id     --> 670244335488002312\nstatus           --> success\npattern_id       --> p2p\ndirection        --> in\namount           --> 100500.0\namount_due       --> None\nfee              --> None\ndatetime         --> 2021-10-10 10:10:10\ntitle            --> Перевод от 410019014512803\nsender           --> 410019014512803\nrecipient        --> None\nrecipient_type   --> None\nmessage          --> Justtext\ncomment          --> None\ncodepro          --> False\nprotection_code  --> None\nexpires          --> None\nanswer_datetime  --> None\nlabel            --> 7920963969\ndetails          --> Justtext\ntype             --> incoming-transfer\ndigital_goods    --> None\n```\n\n----------------------------------------\n\nTITLE: Sample Operation History Output - Python\nDESCRIPTION: Illustrates sample printed output from querying operation history. Each operation shows status, date, amount, label, type, and direction, revealing serialized records as returned by the yoomoney API. Useful for validating expected return data and formatting for users/admins.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nList of operations:\nNext page starts with:  None\n\nOperation: 670278348725002105\n  Status     --> success\n  Datetime   --> 2021-10-10 10:10:10\n  Title      --> Пополнение с карты ****4487\n  Pattern id --> None\n  Direction  --> in\n  Amount     --> 100500.0\n  Label      --> 3784030974\n  Type       --> deposition\n\nOperation: 670244335488002313\n  Status     --> success\n  Datetime   --> 2021-10-10 10:10:10\n  Title      --> Перевод от 410019014512803\n  Pattern id --> p2p\n  Direction  --> in\n  Amount     --> 100500.0\n  Label      --> 7920963969\n  Type       --> incoming-transfer\n```\n\n----------------------------------------\n\nTITLE: Sample Account Information Output - Python\nDESCRIPTION: This code block provides sample output for querying account information via the yoomoney.Client. It shows fully populated fields including dummy balances and card/linked data. Useful for comparison and understanding expected API results structure. Outputs: formatted printed information; for demonstration only.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAccount number: 410019014512803\nAccount balance: 999999999999.99\nAccount currency code in ISO 4217 format: 643\nAccount status: identified\nAccount type: personal\nExtended balance information:\n   --> total : 999999999999.99\n   --> available : 999999999999.99\n   --> deposition_pending : None\n   --> blocked : None\n   --> debt : None\n   --> hold : None\nInformation about linked bank cards:\nNo card is linked to the account\n```\n\n----------------------------------------\n\nTITLE: Sample Quickpay Form Output - Python\nDESCRIPTION: Shows example output URLs for a generated Quickpay payment form using the yoomoney API. These URLs can be used to direct users to payment confirmation flows on YooMoney. Output features both the base QuickPay request and the redirected action URL containing a request ID.\nSOURCE: https://github.com/alekseykorshuk/yoomoney-api/blob/master/README.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhttps://yoomoney.ru/quickpay/confirm.xml?receiver=410019014512803&quickpay-form=shop&targets=Sponsor%20this%20project&paymentType=SB&sum=150\nhttps://yoomoney.ru/transfer/quickpay?requestId=343532353937313933395f66326561316639656131626539326632616434376662373665613831373636393537613336383639\n```"
  }
]