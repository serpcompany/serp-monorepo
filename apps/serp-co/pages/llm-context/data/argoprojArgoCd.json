[
  {
    "owner": "argoproj",
    "repo": "argo-cd",
    "content": "TITLE: Defining an Argo CD Application using Kubernetes YAML\nDESCRIPTION: This YAML snippet defines a minimal Argo CD Application resource used to deploy an application instance in a Kubernetes environment. It specifies the application name, namespace, the project it belongs to, source Git repository details including repository URL, revision, and path, and the destination cluster with namespace to deploy into. Dependencies include having Argo CD installed and configured in the given namespace, and kubectl available for applying the manifest. Inputs are the repository and deployment target configuration; output is the registered Application resource that Argo CD manages and deploys.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for argocd app wait\nDESCRIPTION: Lists the command-line flags available specifically for the `argocd app wait` command. These options allow customization of the waiting behavior, such as specifying a namespace, waiting for specific conditions (degraded, delete, health, hydrated, operation, suspended, sync), setting a timeout, filtering resources, selecting apps by label, and controlling the output format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_wait.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-N, --app-namespace string   Only wait for an application  in namespace\n    --degraded               Wait for degraded\n    --delete                 Wait for delete\n    --health                 Wait for health\n-h, --help                   help for wait\n    --hydrated               Wait for hydration operations\n    --operation              Wait for pending operations\n-o, --output string          Output format. One of: json|yaml|wide|tree|tree=detailed (default \"wide\")\n    --resource stringArray   Sync only specific resources as GROUP:KIND:NAME or !GROUP:KIND:NAME. Fields may be blank and '*' can be used. This option may be specified repeatedly\n-l, --selector string        Wait for apps by label. Supports '=', '==', '!=', in, notin, exists & not exists. Matching apps must satisfy all of the specified label constraints.\n    --suspended              Wait for suspended\n    --sync                   Wait for sync\n    --timeout uint           Time out after this many seconds\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Docker Image - Bash\nDESCRIPTION: Builds a Docker container image using a Dockerfile in the current directory and tags it with `mycompany/guestbook:v2.0`. Subsequently, it pushes the newly built and tagged image to a configured container registry. This step is typically part of a CI pipeline to produce deployable artifacts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/ci_automation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mycompany/guestbook:v2.0 .\ndocker push mycompany/guestbook:v2.0\n```\n\n----------------------------------------\n\nTITLE: Querying Role Details Using Argo CD CLI in Shell\nDESCRIPTION: This CLI command retrieves the details of a specified role within an Argo CD project, including policies and JWT tokens. To use, supply the project and role name as required parameters; optional flags allow control over context and authentication. Dependencies include the argocd CLI installed and appropriate credentials to access the Argo CD instance. The expected output shows structured information about the role; input parameters include the target project and role names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_get.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role get PROJECT ROLE-NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging into Argo CD Core using CLI\nDESCRIPTION: Commands to set the current Kubernetes context to the Argo CD namespace and log into Argo CD Core using the CLI with the --core flag, which spawns a local API server process.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/core.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-context --current --namespace=argocd # change current kube context to argocd namespace\nargocd login --core\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Ingress with NGINX for Argo CD - YAML\nDESCRIPTION: This YAML snippet configures a separate NGINX Ingress resource to handle gRPC traffic for Argo CD. It uses the annotation 'nginx.ingress.kubernetes.io/backend-protocol' set to 'GRPC' to indicate gRPC backend protocol. This ingress directs traffic on host 'grpc.argocd.example.com' to the 'argocd-server' service at port named 'https'. The TLS secret referenced is 'argocd-ingress-grpc'. This setup requires disabling TLS on the Argo CD API server and having unique hostnames and TLS secrets for HTTP and gRPC ingresses to prevent conflicts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-grpc-ingress\n  namespace: argocd\n  annotations:\n    nginx.ingress.kubernetes.io/backend-protocol: \"GRPC\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: https\n    host: grpc.argocd.example.com\n  tls:\n  - hosts:\n    - grpc.argocd.example.com\n    secretName: argocd-ingress-grpc\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Application with Multiple Git Sources - YAML\nDESCRIPTION: This snippet demonstrates how to define an Argo CD Application that combines resources from two separate Git repositories. The `sources` field, which is an array, replaces the singular `source` field. Argo CD will generate manifests from each listed source and combine them for reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/multiple_sources.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-billing-app\n  namespace: argocd\nspec:\n  project: default\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  sources:\n    - repoURL: https://github.com/mycompany/billing-app.git\n      path: manifests\n      targetRevision: 8.5.1\n    - repoURL: https://github.com/mycompany/common-settings.git\n      path: configmaps-billing\n      targetRevision: HEAD\n\n```\n\n----------------------------------------\n\nTITLE: Argo CD Application Specification YAML Structure\nDESCRIPTION: A comprehensive YAML specification showing all available fields for an Argo CD Application. This includes configuration for the application metadata, source repository information, destination details, and synchronization settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/application-specification.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/application.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Self-Healing in Argo CD Application Manifest\nDESCRIPTION: Configures the automated sync policy in the application manifest to enable automatic self-healing. Setting `selfHeal: true` ensures that Argo CD actively monitors the live cluster state and triggers an automated sync to correct any observed drift from the desired Git state.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  syncPolicy:\n    automated:\n      selfHeal: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Pruning in Argo CD Application Manifest\nDESCRIPTION: Configures the automated sync policy within the application manifest to enable automatic pruning. Setting `prune: true` ensures that resources removed from the Git source are automatically deleted from the cluster during an automated sync.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  syncPolicy:\n    automated:\n      prune: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Automated Sync using Argo CD CLI\nDESCRIPTION: Configures an existing Argo CD application to use the basic automated sync policy via the command line interface. This setting enables Argo CD to automatically synchronize the application when it detects differences between the desired state in Git and the live state in the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set <APPNAME> --sync-policy automated\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Pruning using Argo CD CLI\nDESCRIPTION: Adds the automatic pruning option to an existing application's sync policy using the command line interface. When automated sync is enabled, this allows Argo CD to automatically delete resources in the cluster that are no longer defined in the Git source.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set <APPNAME> --auto-prune\n```\n\n----------------------------------------\n\nTITLE: Defining an Argo CD Project Resource in YAML\nDESCRIPTION: Example YAML structure defining an Argo CD Project custom resource. This snippet showcases the various configurable fields such as `metadata`, `spec`, `description`, `sourceRepos`, `destinations`, `clusterResourceWhitelist`, `namespaceResourceWhitelist`, `roles`, `syncWindows`, etc., used to manage application deployment permissions and settings within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/project-specification.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/project.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD CLI using Homebrew\nDESCRIPTION: Installs the Argo CD command-line interface (CLI) on systems where Homebrew is available (macOS, Linux, WSL). This provides the `argocd` executable for interacting with the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install argocd\n```\n\n----------------------------------------\n\nTITLE: Application and AppProject Definition - YAML\nDESCRIPTION: Defines an Argo CD Application and AppProject using YAML. The Application specifies a source repository, target revision, and destination server. The AppProject configures allowed source repositories and destination namespaces, along with service account mappings. The example demonstrates how the absence of `spec.destination.namespace` in the Application uses the Application's namespace for service account scoping. This YAML configuration shows how to set up an Argo CD application to deploy the guestbook application and the associated project configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: my-project\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n  destination:\n    server: https://kubernetes.default.svc\n---\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  destinations:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n    - namespace: guestbook-ui\n      server: https://kubernetes.default.svc\n  destinationServiceAccounts:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-deployer\n    - namespace: guestbook-ui\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-ui-deployer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Initial Argo CD Admin Password\nDESCRIPTION: Retrieves the auto-generated initial password for the Argo CD `admin` user using the `argocd` CLI. This password is required for the first login and is stored in a Kubernetes secret named `argocd-initial-admin-secret` in the Argo CD namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin initial-password -n argocd\n```\n\n----------------------------------------\n\nTITLE: Getting the Admin Password\nDESCRIPTION: This command retrieves the initial admin password for Argo CD. It uses `kubectl` to extract the password from the `argocd-initial-admin-secret` secret in the `argocd` namespace, and then decodes it.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo\n```\n\n----------------------------------------\n\nTITLE: Disabling Manual Sync Override for a Window (Bash)\nDESCRIPTION: Shows the command `argocd proj windows disable-manual-sync` used to remove the manual sync override for a specific Sync Window (identified by PROJECT and ID). After running this, the window's deny/allow rules will strictly apply to manual syncs again.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows disable-manual-sync PROJECT ID\n```\n\n----------------------------------------\n\nTITLE: AWS ALB Ingress Configuration with Conditional gRPC Routing for Argo CD - YAML\nDESCRIPTION: This ingress resource YAML configures AWS ALB to serve both standard HTTPS and gRPC traffic by conditionally routing traffic based on the 'Content-Type' HTTP header. It uses annotations to set backend protocol to HTTPS and applies routing conditions that direct 'application/grpc' traffic to a dedicated gRPC service named 'argogrpc'. The ingress listens on port 443 with TLS enabled for host 'argocd.argoproj.io'. Proper ordering of backend services is required to ensure correct routing behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    alb.ingress.kubernetes.io/backend-protocol: HTTPS\n    # Use this annotation (which must match a service name) to route traffic to HTTP2 backends.\n    alb.ingress.kubernetes.io/conditions.argogrpc: |\n      [{\"field\":\"http-header\",\"httpHeaderConfig\":{\"httpHeaderName\": \"Content-Type\", \"values\":[\"application/grpc\"]}}]\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTPS\":443}]'\n  name: argocd\n  namespace: argocd\nspec:\n  rules:\n  - host: argocd.argoproj.io\n    http:\n      paths:\n      - path: /\n        backend:\n          service:\n            name: argogrpc # The grpc service must be placed before the argocd-server for the listening rules to be created in the correct order\n            port:\n              number: 443\n        pathType: Prefix\n      - path: /\n        backend:\n          service:\n            name: argocd-server\n            port:\n              number: 443\n        pathType: Prefix\n  tls:\n  - hosts:\n    - argocd.argoproj.io\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Repository Secret (YAML)\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Secret to store HTTPS credentials for accessing a Git repository.  It requires the `argocd.argoproj.io/secret-type: repository` label and includes fields for URL, username, password and optional project scoping. The secret provides the required credentials for Argo CD to authenticate to the repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://github.com/argoproj/private-repo\n  password: my-password\n  username: my-username\n  project: my-project\n```\n\n----------------------------------------\n\nTITLE: Creating an Argo CD Cluster Secret (YAML)\nDESCRIPTION: Provides an example Kubernetes Secret (`kind: Secret`, `type: Opaque`) to register a target cluster with Argo CD. It includes the cluster name (`name`), API server URL (`server`), and a `config` block (as a multi-line string containing JSON) using a bearer token and CA data for secure communication. Requires the `argocd.argoproj.io/secret-type: cluster` label for Argo CD to recognize it.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster.example.com\n  server: https://mycluster.example.com\n  config: |\n    {\n      \"bearerToken\": \"<authentication token>\",\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Projects in argocd-cm (Declarative)\nDESCRIPTION: Illustrates how to configure global projects within the `argocd-cm` ConfigMap. This configuration uses a `labelSelector` to identify projects (based on labels like `opt: prod`) that should inherit settings from a specified global project (`proj-global-test`). This allows for centralizing configuration for groups of projects.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n  globalProjects: |-\n    - labelSelector:\n        matchExpressions:\n          - key: opt\n            operator: In\n            values:\n              - prod\n      projectName: proj-global-test\nkind: ConfigMap\n```\n\n----------------------------------------\n\nTITLE: Logging into Argo CD CLI\nDESCRIPTION: Authenticates the `argocd` command-line interface with a running Argo CD server instance. The user provides the server address and is prompted for credentials (username and password), which are typically the initial `admin` credentials retrieved earlier.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nargocd login <ARGOCD_SERVER>\n```\n\n----------------------------------------\n\nTITLE: Running a specific resource action using `argocd app actions run` (Shell Command Example)\nDESCRIPTION: This snippet illustrates executing a specific action on an application resource. It shows the command structure including application name, action name, resource kind, and optional arguments such as resource name, namespace, and group.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app actions run APPNAME ACTION --kind KIND [--resource-name RESOURCE] [--namespace NAMESPACE] [--group GROUP]\n```\n\n----------------------------------------\n\nTITLE: Ignoring 'spec.replicas' field for all Deployments in Argo CD using JSON Patch\nDESCRIPTION: Configures Argo CD to ignore differences in the 'spec.replicas' field for all Deployment resources within the application. This is achieved through specifying `ignoreDifferences` with group, kind, and jsonPointer within the application YAML, enabling drift detection to overlook replica count changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ignoreDifferences:\n    - group: apps\n      kind: Deployment\n      jsonPointers:\n        - /spec/replicas\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Apply at Application Level in Argo CD\nDESCRIPTION: Configure an Argo CD application to use Kubernetes server-side apply instead of client-side apply. This helps with large resources that exceed annotation size limits or when managing resources not fully owned by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - ServerSideApply=true\n```\n\n----------------------------------------\n\nTITLE: Creating Jsonnet App with argocd app create\nDESCRIPTION: This example shows how to create a Jsonnet-based application using `argocd app create`. It specifies the repository, path, destination namespace, and destination server, and it sets Jsonnet extensions using `--jsonnet-ext-str`. This example creates a new app that utilizes a Jsonnet file, passing a replica count as a parameter. It requires access to a Kubernetes cluster, Argo CD configured, and the specified Git repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a Jsonnet app\n  argocd app create jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2\n```\n\n----------------------------------------\n\nTITLE: Enabling Helm Credential Passing via Argo CD CLI (Bash)\nDESCRIPTION: Demonstrates using the `argocd app set` command with the `--helm-pass-credentials` flag for the `helm-guestbook` application. This allows Argo CD to send Helm repository credentials even when downloading dependent charts from different domains, overriding Helm's default security behavior (introduced in v3.6.1).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set helm-guestbook --helm-pass-credentials\n```\n\n----------------------------------------\n\nTITLE: Argo CD ConfigMap for SQS Service (Secret)\nDESCRIPTION: This YAML snippet configures the Argo CD ConfigMap to define the SQS service.  It includes the region, queue name, account ID, AWS access key, and AWS access secret. It assumes that `awsaccess_key` and `awsaccess_secret` are defined as keys in a Kubernetes Secret. The ConfigMap defines the `service.awssqs` service definition, `template.deployment-ready` template, and `trigger.on-deployment-ready` trigger.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.awssqs: |\n    region: \"us-east-2\"\n    queue: \"myqueue\"\n    account: \"1234567\"\n    key: \"$awsaccess_key\"\n    secret: \"$awsaccess_secret\"\n\n  template.deployment-ready: |\n    message: |\n      Deployment {{.obj.metadata.name}} is ready!\n\n  trigger.on-deployment-ready: |\n    - when: any(obj.status.conditions, {.type == 'Available' && .status == 'True'})\n      send: [deployment-ready]\n    - oncePer: obj.metadata.annotations[\"generation\"]\n```\n\n----------------------------------------\n\nTITLE: Skipping Dry Run for Missing CRDs via Application Spec (YAML)\nDESCRIPTION: Configures the `SkipDryRunOnMissingResource=true` sync option within the `spec.syncPolicy.syncOptions` of an Argo CD Application resource. This applies the behavior globally to all resources within the Application, skipping the dry run phase for any resource whose CRD is not present in the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - SkipDryRunOnMissingResource=true\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository via SSH with SOCKS5 Proxy - Argo CD CLI Shell Example\nDESCRIPTION: This example illustrates adding a Git repository via SSH while routing traffic through a SOCKS5 proxy, without proxy credentials. Requires argocd CLI, SSH repository access, and a private key. The '--proxy' flag specifies proxy details, and '--ssh-private-key-path' is used for authentication. Input is the SSH repository URL and proxy address; output is successful registration of the repository through the proxy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add ssh://git@github.com/argoproj/argocd-example-apps --ssh-private-key-path ~/id_rsa --proxy socks5://your.proxy.server.ip:1080\n```\n\n----------------------------------------\n\nTITLE: Updating Argo CD Admin Password\nDESCRIPTION: Allows the currently authenticated user, typically the initial `admin` user, to change their password using the `argocd` command-line interface. This is recommended after the first login.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nargocd account update-password\n```\n\n----------------------------------------\n\nTITLE: Modifying ApplicationSet controller parameters in deployment YAML\nDESCRIPTION: Example of how to add command-line parameters to the ApplicationSet controller in the deployment specification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n    # (...)\n  template:\n    # (...)\n    spec:\n      containers:\n      - command:\n        - entrypoint.sh\n        - argocd-applicationset-controller\n        # Insert new parameters here, for example:\n        # --policy create-only\n    # (...)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Argo CD (HA) using kubectl\nDESCRIPTION: This bash script upgrades an HA Argo CD deployment using `kubectl`.  It fetches the HA installation manifest from the GitHub repository.  The `<version>` placeholder must be replaced with the intended Argo CD version.  This command applies the manifest to the `argocd` namespace.  The script assumes you have kubectl configured and the appropriate permissions. The `<version>` parameter represents the Argo CD version.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/ha/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Combining Git Directory and Cluster Generators with Matrix Generator in Argo CD\nDESCRIPTION: This example demonstrates using Matrix generator to combine Git Directory and Cluster generators to deploy applications to multiple clusters. It scans a Git repository for application resources and targets them to all available clusters defined in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # matrix 'parent' generator\n    - matrix:\n        generators:\n          # git generator, 'child' #1\n          - git:\n              repoURL: https://github.com/argoproj/argo-cd.git\n              revision: HEAD\n              directories:\n                - path: applicationset/examples/matrix/cluster-addons/*\n          # cluster generator, 'child' #2\n          - clusters:\n              selector:\n                matchLabels:\n                  argocd.argoproj.io/secret-type: cluster\n  template:\n    metadata:\n      name: '{{.path.basename}}-{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: '{{.server}}'\n        namespace: '{{.path.basename}}'\n```\n\n----------------------------------------\n\nTITLE: Adding a Finalizer to an Argo CD Application for Cascading Delete in YAML\nDESCRIPTION: This YAML fragment shows how to add the 'resources-finalizer.argocd.argoproj.io' finalizer to an Application resource's metadata. Including this finalizer ensures that when the application is deleted, all managed Kubernetes resources deployed by Argo CD are also deleted (cascading delete). Without this finalizer, deleting the application resource will not remove deployed resources, potentially causing orphaned objects. This requires editing the metadata.finalizers field of the Application manifest.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `argocd account` Subcommands (Bash)\nDESCRIPTION: Provides practical examples demonstrating common use cases for `argocd account`. These include listing existing accounts, updating the current user's password, checking specific permissions (e.g., ability to sync applications), and retrieving information about the currently authenticated user.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List accounts\nargocd account list\n\n# Update the current user's password\nargocd account update-password\n\n# Can I sync any app?\nargocd account can-i sync applications '*'\n\n# Get User information\nargocd account get-user-info\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Notification Templates in Argo CD\nDESCRIPTION: This snippet demonstrates how to create a notification template with a custom email subject and message for application sync events. It includes conditional formatting based on the notification service type.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/email.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.app-sync-succeeded: |\n    email:\n      subject: Application {{.app.metadata.name}} has been successfully synced.\n    message: |\n      {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n      Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription for Webex Teams in Argo CD Application\nDESCRIPTION: Defines a subscription within an Argo CD Application resource to listen for specific notification triggers and send messages to a Webex Teams room or user. The annotation key specifies the trigger, while the value designates the recipient or room ID.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webex.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.webex: <personal email or room id>\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD SSH Known Hosts ConfigMap in YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes `ConfigMap` named `argocd-ssh-known-hosts-cm`. It stores the SSH known hosts data under the `ssh_known_hosts` key, which Argo CD uses to verify the identity of Git repository servers during SSH connections. The data consists of multiple lines, each containing a host identifier (potentially including port), key type, and the base64-encoded public key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/name: argocd-ssh-known-hosts-cm\n    app.kubernetes.io/part-of: argocd\n  name: argocd-ssh-known-hosts-cm\ndata:\n  ssh_known_hosts: |\n    # This file was automatically generated by hack/update-ssh-known-hosts.sh. DO NOT EDIT\n    [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n    [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n    bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=\n    bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO\n    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=\n    github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n    gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n    ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n    vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Helm-based App of Apps\nDESCRIPTION: Illustrates a typical file layout for implementing the App of Apps pattern using Helm. It includes a root `Chart.yaml`, a `templates` directory containing child application manifests, and a `values.yaml` for configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── Chart.yaml\n├── templates\n│   ├── guestbook.yaml\n│   ├── helm-dependency.yaml\n│   ├── helm-guestbook.yaml\n│   └── kustomize-guestbook.yaml\n└── values.yaml\n```\n\n----------------------------------------\n\nTITLE: Explicitly Configuring Directory Tool in Argo CD Application\nDESCRIPTION: This YAML snippet demonstrates how to explicitly specify the 'directory' tool in an Argo CD Application custom resource. The configuration uses the 'directory' field under 'source' with a 'recurse: true' setting to enable recursive scanning of the directory.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/tool_detection.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  ...\nspec:\n  ...\n  source:\n    ...\n    \n    # Tool -> plain directory\n    directory:\n      recurse: true\n...\n```\n\n----------------------------------------\n\nTITLE: Patch Resource in ArgoCD Application\nDESCRIPTION: This command allows patching a resource within an ArgoCD application.  It requires the application name and provides options to specify the resource to patch (group, kind, namespace, resource-name), the patch content, and the patch type. The `--all` flag enables patching multiple matching resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_patch-resource.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nargocd app patch-resource APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Repository Secret (YAML)\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Secret to store SSH credentials for accessing a Git repository. It requires the `argocd.argoproj.io/secret-type: repository` label, a `url` field, and the `sshPrivateKey` field containing the SSH private key. This allows Argo CD to authenticate to the repository using SSH.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: git@github.com:argoproj/my-private-repository.git\n  sshPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Inspecting GnuPG Keys in Argo CD Repository Server\nDESCRIPTION: Example of how to inspect the GnuPG keys within the Argo CD repository server pod. The command executes a bash shell in the pod and lists the GnuPG keys in the keyring located at '/app/config/gpg/keys'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl exec -it argocd-repo-server-7d6bdfdf6d-hzqkg bash\nargocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ GNUPGHOME=/app/config/gpg/keys gpg --list-keys\n/app/config/gpg/keys/pubring.kbx\n--------------------------------\npub   rsa2048 2020-06-15 [SC] [expires: 2020-12-12]\n      D48F075D818A813C436914BC9324F0D2144753B1\nuid           [ultimate] Anon Ymous (ArgoCD key signing key) <noreply@argoproj.io>\n\npub   rsa2048 2017-08-16 [SC]\n      5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23\nuid           [ultimate] GitHub (web-flow commit signing) <noreply@github.com>\n\nargocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$\n```\n\n----------------------------------------\n\nTITLE: Subscribing Argo CD Applications to Telegram Channel by Username\nDESCRIPTION: This YAML snippet adds an annotation to an Argo CD Application resource to subscribe it to a Telegram public channel using the channel's username. When a sync succeeds, a notification will be sent to the specified Telegram channel. No additional dependencies besides the Argo CD application and notification setup are needed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/telegram.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: username\n```\n\n----------------------------------------\n\nTITLE: Configuring preserveResourcesOnDeletion in ApplicationSet YAML\nDESCRIPTION: A YAML snippet that shows how to prevent an Application's child resources from being deleted when the parent Application is deleted by adding the preserveResourcesOnDeletion field to the syncPolicy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    preserveResourcesOnDeletion: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kustomize Build Options in argocd-cm - YAML\nDESCRIPTION: This YAML snippet shows how to configure Kustomize build options globally within Argo CD by modifying the `argocd-cm` ConfigMap. It sets the `kustomize.buildOptions` field to `--enable-helm`, enabling Helm chart rendering via Kustomize for all applications. Dependencies include the Argo CD controller and a running Kubernetes cluster. The output modifies the behavior of all applications using Kustomize in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  kustomize.buildOptions: --enable-helm\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Cluster Configuration Structure (YAML)\nDESCRIPTION: Outlines the expected structure for the `config` field within an Argo CD cluster Secret (stored as a JSON string). Details various authentication methods (basic, bearer token, AWS IAM, exec provider), proxy settings (`proxyUrl`), and TLS client configuration options (`tlsClientConfig`) used by Argo CD to connect to and manage a Kubernetes cluster. This serves as a reference schema.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Basic authentication settings\nusername: string\npassword: string\n# Bearer authentication settings\nbearerToken: string\n# IAM authentication configuration\nawsAuthConfig:\n    clusterName: string\n    roleARN: string\n    profile: string\n# Configure external command to supply client credentials\n# See https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig\nexecProviderConfig:\n    command: string\n    args: [\n      string\n    ]\n    env: {\n      key: value\n    }\n    apiVersion: string\n    installHint: string\n# Proxy URL for the kubernetes client to use when connecting to the cluster api server\nproxyUrl: string\n# Transport layer security configuration settings\ntlsClientConfig:\n    # Base64 encoded PEM-encoded bytes (typically read from a client certificate file).\n    caData: string\n    # Base64 encoded PEM-encoded bytes (typically read from a client certificate file).\n    certData: string\n    # Server should be accessed without verifying the TLS certificate\n    insecure: boolean\n    # Base64 encoded PEM-encoded bytes (typically read from a client certificate key file).\n    keyData: string\n    # ServerName is passed to the server for SNI and is used in the client to check server\n    # certificates against. If ServerName is empty, the hostname used to contact the\n    # server is used.\n    serverName: string\n# Disable automatic compression for requests to the cluster \ndisableCompression: boolean\n```\n\n----------------------------------------\n\nTITLE: Storing Rocket.Chat Credentials in Kubernetes Secret (YAML)\nDESCRIPTION: This snippet shows how to create a Kubernetes Secret to securely store the Rocket.Chat bot user's email and password. The secret name should be referenced by the argocd-notifications-cm. Replace <secret-name>, <email>, and <password> with your actual values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/rocketchat.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  rocketchat-email: <email>\n  rocketchat-password: <password>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository via SSH on Custom Port - Argo CD CLI Shell Example\nDESCRIPTION: This snippet shows how to add a Git repository using SSH on a non-default port by employing an 'ssh://' URL syntax. Requires argocd CLI, SSH access, and a private key. The '--ssh-private-key-path' flag is for specifying authentication credentials, with the SSH URL indicating the custom port (e.g., 2222). Output is the configured repository entry in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Policies for Argo CD (YAML)\nDESCRIPTION: This YAML snippet defines RBAC policies within the `argocd-rbac-cm` ConfigMap.  It includes a default role and example policies to grant permissions for accessing applications, clusters, and repositories.  The example uses Entra ID Group IDs for assigning roles to users based on their group membership within Entra ID.  This snippet needs the `policy.default` and `policy.csv` values set correctly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# example policy\npolicy.default: role:readonly\npolicy.csv: |\n   p, role:org-admin, applications, *, */*, allow\n   p, role:org-admin, clusters, get, *, allow\n   p, role:org-admin, repositories, get, *, allow\n   p, role:org-admin, repositories, create, *, allow\n   p, role:org-admin, repositories, update, *, allow\n   p, role:org-admin, repositories, delete, *, allow\n   g, \"84ce98d1-e359-4f3b-85af-985b458de3c6\", role:org-admin # (azure group assigned to role)\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-repo-server-metrics ServiceMonitor in YAML\nDESCRIPTION: This ServiceMonitor targets the argocd-repo-server component for metrics collection.  It uses the `argocd-repo-server` label to identify the service for scraping. The `endpoints` section specifies the port for metric retrieval. The `release` label should match the name chosen by Prometheus Operator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-repo-server-metrics\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-repo-server\n  endpoints:\n  - port: metrics\n```\n```\n\n----------------------------------------\n\nTITLE: Setting ApplicationSet Sync Policy to Create-Update (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the ApplicationSet's `syncPolicy` to `create-update`. This allows the ApplicationSet controller to create and update Applications, but prevents it from deleting them. It requires the `argoproj.io/v1alpha1` API version and the `ApplicationSet` kind.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-update\n```\n\n----------------------------------------\n\nTITLE: Add Volume to argocd-dex-server Deployment\nDESCRIPTION: Adds a volume definition to the `argocd-dex-server` deployment that references the secret containing the Google authentication JSON file. The volume is named `google-json` and configured to use the `argocd-google-groups-json` secret. `defaultMode` is set to 420.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n- emptyDir: {}\n  name: static-files\n- emptyDir: {}\n  name: dexconfig\n- name: google-json\n  secret:\n    defaultMode: 420\n    secretName: argocd-google-groups-json\n```\n\n----------------------------------------\n\nTITLE: Generating a Role Token Using Argo CD CLI (Shell Command)\nDESCRIPTION: This snippet demonstrates how to use the 'argocd proj role create-token' command to generate a token for a specific project ('test-project') and role ('test-role') in Argo CD. The command initiates the token creation process, which returns details such as the token ID, issue date, expiration, and the generated token itself. Prerequisites include Argo CD CLI installation and proper authentication; flags are available for setting expiration, token ID, and output formatting. Inputs include project and role names, while outputs can vary between detailed results and token-only output for scripting.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_create-token.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ argocd proj role create-token test-project test-role\nCreate token succeeded for proj:test-project:test-role.\n  ID: f316c466-40bd-4cfd-8a8c-1392e92255d4\n  Issued At: 2023-10-08T15:21:40+01:00\n  Expires At: Never\n  Token: xxx\n\n```\n\n----------------------------------------\n\nTITLE: Generating Declarative Specs for Different Application Types\nDESCRIPTION: Provides examples of using `argocd admin app generate-spec` to generate declarative configurations for various application types. Demonstrates usage for Directory, Jsonnet, Helm (from Git and Helm repo), Kustomize, and applications using custom config management plugins, showcasing relevant flags like `--repo`, `--path`, `--dest-namespace`, `--dest-server`, `--directory-recurse`, `--jsonnet-ext-str`, `--helm-set`, `--helm-chart`, `--revision`, `--kustomize-image`, and `--config-management-plugin`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_app_generate-spec.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\t# Generate declarative config for a directory app\n\targocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse\n\n\t# Generate declarative config for a Jsonnet app\n\targocd admin app generate-spec jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2\n\n\t# Generate declarative config for a Helm app\n\targocd admin app generate-spec helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2\n\n\t# Generate declarative config for a Helm app from a Helm repo\n\targocd admin app generate-spec nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc\n\n\t# Generate declarative config for a Kustomize app\n\targocd admin app generate-spec kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1\n\n\t# Generate declarative config for a app using a custom tool:\n\targocd admin app generate-spec kasane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane\n```\n\n----------------------------------------\n\nTITLE: Defining a Helm-based Application in Argo CD (Basic Example)\nDESCRIPTION: A declarative YAML definition for deploying a sealed-secrets Helm chart from a Helm repository. The configuration specifies the chart name, repository URL, target revision, and destination namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: sealed-secrets\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: sealed-secrets\n    repoURL: https://bitnami-labs.github.io/sealed-secrets\n    targetRevision: 1.16.1\n    helm:\n      releaseName: sealed-secrets\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: kubeseal\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD OIDC with PKCE Authentication - YAML\nDESCRIPTION: This YAML snippet configures the `argocd-cm` ConfigMap for OIDC authentication using Keycloak with the PKCE method. It includes the issuer URL, client ID, lists requested scopes, and explicitly enables PKCE authentication by setting `enablePKCEAuthentication` to `true`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/keycloak.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Keycloak\n    issuer: https://keycloak.example.com/realms/master\n    clientID: argocd\n    enablePKCEAuthentication: true\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Storing Plugin Credentials\nDESCRIPTION: YAML definition showing how to store plugin credentials in a separate Kubernetes Secret instead of the default argocd-secret. The secret must have the label 'app.kubernetes.io/part-of: argocd'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: another-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  # ...\n  # Store client secret like below.\n  # The secret value must be base64 encoded **once**.\n  # This value corresponds to: `printf \"strong-password\" | base64`.\n  plugin.myplugin.token: \"c3Ryb25nLXBhc3N3b3Jk\"\n```\n\n----------------------------------------\n\nTITLE: Adding Private Git Repository via GCP Service Account - Argo CD CLI Shell Example\nDESCRIPTION: This snippet demonstrates adding a private Git repository on Google Cloud Sources by using a GCP service account for authentication. Dependencies include argocd CLI and a valid GCP service account key file. The '--gcp-service-account-key-path' flag is required, with the key file in JSON format. Input is the repository URL and service account key path; output is repository registration using GCP authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://source.developers.google.com/p/my-google-cloud-project/r/my-repo --gcp-service-account-key-path service-account-key.json\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Known Hosts to ArgoCD via CLI using Bash\nDESCRIPTION: This snippet illustrates how to add SSH known host entries to ArgoCD using the CLI. Two methods are shown: piping `ssh-keyscan` output to `argocd cert add-ssh` with `--batch` for adding keys on the fly, and importing an existing `known_hosts` file by specifying the `--from` flag with `--batch`. Both require the input to be in the OpenSSH known_hosts format and the `argocd` CLI tool to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nssh-keyscan server.example.com | argocd cert add-ssh --batch\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd cert add-ssh --batch --from /etc/ssh/ssh_known_hosts\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Helm Parameters in Argo CD\nDESCRIPTION: Configuration that shows how to override specific Helm chart parameters using the parameters field. This is equivalent to using the --set flag in Helm CLI commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  helm:\n    parameters:\n    - name: \"service.type\"\n      value: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Authentication for Argo CD using Entra ID - YAML\nDESCRIPTION: This YAML snippet configures OIDC authentication for Argo CD by editing the argocd-cm ConfigMap. It specifies the Argo CD URL, OIDC provider details (issuer, clientID, clientSecret), and options for enabling Azure Workload Identity integration. Key parameters include the external Argo CD URL, Azure tenant and client IDs, and token claim mappings. Prerequisites: registered Azure App, necessary permissions, and collected credentials. Input: key and value pairs under data.oidc.config and data.url. Output: Modified ConfigMap enabling OIDC login. Limitations: clientSecret required unless using workload identity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nConfigMap -> argocd-cm\n\ndata:\n   url: https://argocd.example.com/ # Replace with the external base URL of your Argo CD\n   oidc.config: |\n         name: Azure\n         issuer: https://login.microsoftonline.com/{directory_tenant_id}/v2.0\n         clientID: {azure_ad_application_client_id}\n         clientSecret: $oidc.azure.clientSecret // if using client secret for authentication\n         azure:\n           useWorkloadIdentity: true // if using azure workload identity for authentication\n         requestedIDTokenClaims:\n            groups:\n               essential: true\n               value: \"SecurityGroup\"\n         requestedScopes:\n            - openid\n            - profile\n            - email\n```\n\n----------------------------------------\n\nTITLE: Example ApplicationSet CR YAML\nDESCRIPTION: This is an example of the YAML file format that will be passed as a parameter for creating and applying ApplicationSets using the argocd appset create/apply commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Credential Templates (YAML)\nDESCRIPTION: This snippet demonstrates how to create credential templates for sharing credentials across multiple repositories. It defines a `repo-creds` secret to store common credentials and uses separate repository secrets, which reference the URL prefix of the Git provider.  This enables the reuse of credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: first-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://github.com/argoproj/private-repo\n--- \napiVersion: v1\nkind: Secret\nmetadata:\n  name: second-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://github.com/argoproj/other-private-repo\n--- \napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  type: git\n  url: https://github.com/argoproj\n  password: my-password\n  username: my-username\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Automated Sync in Argo CD Application Manifest\nDESCRIPTION: Specifies the basic automated sync policy within an application's Custom Resource Definition (CRD) manifest. Setting `spec.syncPolicy.automated` to an empty object `{}` enables automated synchronization based on Git changes when the manifest is applied.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  syncPolicy:\n    automated: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD Using Standard Manifests in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use Kustomize to install Argo CD by referencing the official install.yaml manifest remotely. It configures the namespace to 'argocd' and includes the Argo CD installation resources from the specified version. This approach facilitates easy customization and management of Argo CD installation manifests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/installation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: argocd\nresources:\n- https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.2/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic ArgoCD Cluster Add Command Usage\nDESCRIPTION: The basic syntax for adding a Kubernetes cluster to ArgoCD using the 'argocd cluster add' command. This command requires a CONTEXT parameter which identifies the cluster to be added.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_add.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster add CONTEXT [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Self-Healing using Argo CD CLI\nDESCRIPTION: Adds the automatic self-healing option to an application's sync policy using the command line interface. This setting triggers an automated sync whenever Argo CD detects that the live cluster state deviates from the desired state defined in Git, attempting to revert unexpected changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set <APPNAME> --self-heal\n```\n\n----------------------------------------\n\nTITLE: Example: Slack notification hook upon sync success\nDESCRIPTION: This YAML manifest defines a Job that sends a Slack message post-sync success via a curl command. It uses the PostSync hook annotation and delete policy, enabling automated notifications after a deployment completes successfully.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_hooks.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: app-slack-notification-\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: slack-notification\n        image: curlimages/curl\n        command:\n          - \"curl\"\n          - \"-X\"\n          - \"POST\"\n          - \"--data-urlencode\"\n          - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync succeeded\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\"\n          - \"https://hooks.slack.com/services/...\"\n      restartPolicy: Never\n  backoffLimit: 2\n```\n\n----------------------------------------\n\nTITLE: Connecting via Telepresence v1 with Deployment Swap (Shell)\nDESCRIPTION: Swaps the 'argocd-server' deployment for local debugging and forwards ports 8080 and 8083. Writes remote environment variables to a file and starts a shell session. Requires Telepresence v1, an available 'argocd-server' deployment, and specified ports. Outputs a local bash shell ready for debugging with remote environment mirrored.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntelepresence --swap-deployment argocd-server --namespace argocd --env-file .envrc.remote --expose 8080:8080 --expose 8083:8083 --run bash\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy to Map AWS SSO Group to Argo CD Admin Role in YAML\nDESCRIPTION: Specifies the ConfigMap for RBAC in Argo CD to map an AWS SSO group to the 'admin' role within Argo CD. The policy CSV defines the group-to-role link, and scopes specify the relevant attribute statements.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/identity-center.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, <Identity Center Group ID>, role:admin\n  scopes: '[groups, email]'\n```\n\n----------------------------------------\n\nTITLE: Applying Argo CD CRDs Separately using Kubectl and Kustomize (Bash)\nDESCRIPTION: This command installs the necessary Argo CD Custom Resource Definitions (CRDs) using `kubectl apply` with Kustomize (`-k`). It points to the CRD manifests directory in the Argo CD GitHub repository on the `stable` branch. This step is required specifically when using the `namespace-install.yaml` manifest because it does not bundle the CRDs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/manifests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k https://github.com/argoproj/argo-cd/manifests/crds\\?ref\\=stable\n```\n\n----------------------------------------\n\nTITLE: Enabling Selective Sync via Argo CD CLI (Bash)\nDESCRIPTION: Demonstrates using the Argo CD command-line interface (CLI) to enable the selective sync feature for an existing application. The `argocd app set` command modifies the application's configuration to include the `ApplyOutOfSyncOnly=true` sync option.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ argocd app set guestbook --sync-option ApplyOutOfSyncOnly=true\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository via SSH with Proxy Credentials - Argo CD CLI Shell Example\nDESCRIPTION: This snippet adds a Git repository over SSH using a SOCKS5 proxy that requires authentication credentials. Prerequisites include the argocd CLI, SSH repository access, a private key, and proxy credentials. The command uses '--proxy' for the proxy URL with embedded user and password, and '--ssh-private-key-path' for SSH key authentication. Output is a repository connected via authenticated proxy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add ssh://git@github.com/argoproj/argocd-example-apps --ssh-private-key-path ~/id_rsa --proxy socks5://username:password@your.proxy.server.ip:1080\n```\n\n----------------------------------------\n\nTITLE: Including the ApplicationSet YAML Specification\nDESCRIPTION: This snippet uses a placeholder `{!docs/operator-manual/applicationset.yaml!}` to include the complete YAML definition of the Argo CD ApplicationSet Custom Resource. This referenced file contains all the fields and their structure for defining an ApplicationSet.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/applicationset-specification.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/applicationset.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Private gRPC Ingress for Argo CD with Contour Ingress Controller in YAML\nDESCRIPTION: Kubernetes Ingress resource using Contour ingress class 'contour-internal' exposing Argo CD API server for internal gRPC traffic. TLS is terminated using the specified secret. This ingress is separated from HTTP(S) traffic due to Contour's single-protocol per ingress limitation. Requires argocd-server running with --insecure flag or ConfigMap setting.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-grpc\n  annotations:\n    kubernetes.io/ingress.class: contour-internal\nspec:\n  rules:\n  - host: grpc-internal.path.to.argocd.io\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: https\n  tls:\n  - hosts:\n    - grpc-internal.path.to.argocd.io\n    secretName: your-certificate-name\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub App Repository Secret (YAML)\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Secret to store GitHub App credentials for accessing a Git repository.  It requires the `argocd.argoproj.io/secret-type: repository` label, `url`, `githubAppID`, `githubAppInstallationID`, and `githubAppPrivateKey` fields. These values are used to authenticate via the GitHub App. It also includes an example for GitHub Enterprise repositories, using `githubAppEnterpriseBaseUrl`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://github.com/argoproj/my-private-repository\n  githubAppID: 1\n  githubAppInstallationID: 2\n  githubAppPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n```\n\nLANGUAGE: yaml\nCODE:\n```\n--- \napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-enterprise-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://ghe.example.com/argoproj/my-private-repository\n  githubAppID: 1\n  githubAppInstallationID: 2\n  githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3\n  githubAppPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Scaling Argo CD Server Replicas for High Availability - YAML\nDESCRIPTION: This YAML snippet provides a strategic merge patch example for scaling the `argocd-server` Deployment. Increasing the number of replicas ensures higher availability and distributes the load, especially for concurrent login requests as controlled by the `ARGOCD_API_SERVER_REPLICAS` environment variable.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-server\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: argocd-server\n        env:\n        - name: ARGOCD_API_SERVER_REPLICAS\n          value: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `argocd account` Command (Bash)\nDESCRIPTION: Shows the fundamental structure for using the `argocd account` command. It typically requires a subcommand (like 'list', 'update-password', etc.) followed by optional flags to modify its behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd account [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding a Project-Scoped Repository using argocd CLI\nDESCRIPTION: Demonstrates the command-line method to add a Git repository that is specifically scoped to an Argo CD project (`my-project`). The `--project` flag is used to associate the repository with the specified project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nargocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project\n```\n\n----------------------------------------\n\nTITLE: Creating Helm App from Helm Repo with argocd app create\nDESCRIPTION: This snippet shows how to create a Helm application using a Helm repository directly via `argocd app create`.  It specifies the repository (`--repo`), the Helm chart name (`--helm-chart`), the chart revision (`--revision`), destination namespace, and destination server. This allows direct deployment of Helm charts from their public repositories.  It requires Argo CD installed and configured, and connectivity to a Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a Helm app from a Helm repo\n  argocd app create nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc\n```\n\n----------------------------------------\n\nTITLE: Passing Build Environment Variables to Helm via Argo CD CLI (Bash)\nDESCRIPTION: Illustrates how to use the `argocd app create` command with the `--helm-set-string` flag. This allows passing an Argo CD build environment variable (e.g., `ARGOCD_APP_NAME`) as a string parameter (`app`) directly into the Helm chart during application creation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create APPNAME \\\n  --helm-set-string 'app=${ARGOCD_APP_NAME}'\n```\n\n----------------------------------------\n\nTITLE: Examples of argocd cluster Subcommands (Shell)\nDESCRIPTION: Provides practical examples demonstrating common `argocd cluster` subcommands. Includes listing clusters (optionally in JSON), adding a new cluster from a kubectl context, getting detailed cluster information, removing a cluster, and setting cluster properties like name or target namespaces.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# List all known clusters in JSON format:\nargocd cluster list -o json\n\n# Add a target cluster configuration to ArgoCD. The context must exist in your kubectl config:\nargocd cluster add example-cluster\n\n# Get specific details about a cluster in plain text (wide) format:\nargocd cluster get example-cluster -o wide\n\n# Remove a target cluster context from ArgoCD\nargocd cluster rm example-cluster\n\n# Set a target cluster context from ArgoCD\nargocd cluster set CLUSTER_NAME --name new-cluster-name --namespace '*'\nargocd cluster set CLUSTER_NAME --name new-cluster-name --namespace namespace-one --namespace namespace-two\n```\n\n----------------------------------------\n\nTITLE: Setting Helm Version via Argo CD CLI (Bash)\nDESCRIPTION: Uses the `argocd app set` command with the `--helm-version` flag to explicitly specify the Helm version (v3 in this case) that Argo CD should use when templating the Helm chart for the `helm-guestbook` application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set helm-guestbook --helm-version v3\n```\n\n----------------------------------------\n\nTITLE: Configuring 'ignoreDifferences' globally for all resources in all applications\nDESCRIPTION: Applies a system-wide ignore configuration for all resource types managed by Argo CD, including ignoring the 'status' field and specific JSON pointers, promoting uniform suppression of unwanted drift detection over the entire environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.customizations.ignoreDifferences.all: |\n    managedFieldsManagers:\n    - kube-controller-manager\n    jsonPointers:\n    - /spec/replicas\n```\n\n----------------------------------------\n\nTITLE: Updating Argo CD RBAC Policies for New Actions (CSV)\nDESCRIPTION: This snippet provides an example of updating Argo CD RBAC policies written in CSV format. It contrasts older, broader policies using wildcards (`actions/`) with newer, more specific policies required in v2.8 to control permissions for new actions like creating Jobs or Workflows. It demonstrates how to explicitly grant permissions for specific actions, allowing administrators to exclude permissions for the new actions introduced in v2.8 if desired.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.7-2.8.md#_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\np, role:action-runner, applications, actions/, *, allow\n\nNew:\n\n```csv\np, role:action-runner, applications, action/argoproj.io/Rollout/abort, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/promote-full, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/retry, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/resume, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/restart, *, allow\np, role:action-runner, applications, action/argoproj.io/AnalysisRun/terminate, *, allow\np, role:action-runner, applications, action/apps/DaemonSet/restart, *, allow\np, role:action-runner, applications, action/apps/StatefulSet/restart, *, allow\np, role:action-runner, applications, action/apps/Deployment/pause, *, allow\np, role:action-runner, applications, action/apps/Deployment/resume, *, allow\np, role:action-runner, applications, action/apps/Deployment/restart, *, allow\n\n# If you don't want to grant the new permissions, don't include the following lines\np, role:action-runner, applications, action/argoproj.io/WorkflowTemplate/create-workflow, *, allow\np, role:action-runner, applications, action/argoproj.io/CronWorkflow/create-workflow, *, allow\np, role:action-runner, applications, action/batch/CronJob/create-job, *, allow\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Exclusions and Inclusions in Argo CD ConfigMap via YAML and Shell\nDESCRIPTION: This snippet provides instructions and YAML examples for configuring Argo CD's `resource.exclusions` and `resource.inclusions` settings inside the argocd-cm ConfigMap. The configuration limits or allows specific Kubernetes API group/kind resources for discovery and synchronization by Argo CD. The snippet includes a shell command to edit the ConfigMap and YAML templates demonstrating how to exclude all resources on a specific cluster or include only certain resource kinds. These settings help optimize performance and restrict access to sensitive or problematic resources. Note that globs must be quoted, and changes may require Argo CD controller restarts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nkubectl edit configmap argocd-cm -n argocd\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  resource.exclusions: |\n    - apiGroups:\n      - \"*\"\n      kinds:\n      - \"*\"\n      clusters:\n      - https://192.168.0.20\nkind: ConfigMap\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  resource.inclusions: |\n    - apiGroups:\n      - \"*\"\n      kinds:\n      - Deployment\n      clusters:\n      - https://192.168.0.20\nkind: ConfigMap\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubectl Configuration (Bash)\nDESCRIPTION: This command checks if `kubectl` is correctly configured to interact with the `kind` cluster. It uses the `kubectl cluster-info` command with the `--context` flag, specifying the context `kind-argocd-cluster`. The output confirms kubectl is pointing to the right cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/try_argo_cd_locally.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cluster-info --context kind-argocd-cluster\n```\n\n----------------------------------------\n\nTITLE: Narrowing 'ignoreDifferences' to a specific Deployment resource by name and namespace\nDESCRIPTION: Limits the diff ignoring behavior to a specific Deployment named 'guestbook' in the 'default' namespace, allowing targeted drift detection suppression for individual resources as needed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ignoreDifferences:\n    - group: apps\n      kind: Deployment\n      name: guestbook\n      namespace: default\n      jsonPointers:\n        - /spec/replicas\n```\n\n----------------------------------------\n\nTITLE: Specifying Override Images in .argocd-source.yaml - YAML\nDESCRIPTION: This YAML snippet provides an example override file for Argo CD, intended to be stored in the application's source directory within Git as '.argocd-source.yaml'. It demonstrates how to specify tool-specific fields, such as a different image version for kustomize-based deployments, allowing automated update mechanisms or write-back tools (e.g., argocd-image-updater) to update image tags in Git. Dependencies include a valid YAML structure and an Argo CD setup that supports reading these overrides during manifest generation. The expected input is the structured YAML file, while the output is an application manifest generated with the given image override. Application-specific versions of this file ('.argocd-source-<appname>.yaml') are also supported, and parameter merging behavior is handled by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/parameters.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkustomize:\n  images:\n    - gcr.io/heptio-images/ks-guestbook-demo:0.2\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding Repository Service for Local Testing - Shell\nDESCRIPTION: This command forwards port 9081 from the 'argocd-e2e-server' service in the 'argocd-e2e' namespace to the local machine, allowing access for local test processes. Requires 'kubectl' and an open local port 9081. Leave this running in a separate terminal while tests are in progress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd-e2e port-forward service/argocd-e2e-server 9081:9081\n\n```\n\n----------------------------------------\n\nTITLE: Managing Source Repositories CLI\nDESCRIPTION: These bash commands manage permitted source Git repositories for a specific project using the Argo CD CLI.  The `add-source` command adds a repository, while the `remove-source` command removes one.  Negation using `!` is also supported to disallow specific repositories.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-source <PROJECT> <REPO>\nargocd proj remove-source <PROJECT> <REPO>\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-source <PROJECT> !<REPO>\nargocd proj remove-source <PROJECT> !<REPO>\n```\n\n----------------------------------------\n\nTITLE: Creating Argo CD Application via CLI from Git\nDESCRIPTION: Creates a new Argo CD application named `guestbook` using the `argocd` command-line interface. It configures the application to source its manifests from the specified Git repository URL and path, targeting deployment to the `default` namespace in the `in-cluster` Kubernetes server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-server https://kubernetes.default.svc --dest-namespace default\n```\n\n----------------------------------------\n\nTITLE: Creating a Helm Chart Deployment with Parameter Override - Bash\nDESCRIPTION: This bash command demonstrates deploying a Helm chart-managed application using the Argo CD CLI, specifying parameters at creation time. The example installs Redis from a public Helm chart repo, customizing the deployment by overriding the default password with '-p password=abc123'. Required dependencies are the Argo CD CLI and access to the target Kubernetes cluster. The key inputs are the repository source, chart path, destination server/namespace, and parameter overrides. The result is an application deployment with initial configuration tailored via parameters, facilitating rapid onboarding without Git repository forking or direct chart modification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/parameters.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password=abc123\n```\n\n----------------------------------------\n\nTITLE: Deployment Manifest without Replicas (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes Deployment manifest for nginx, explicitly excluding the `replicas` field. This allows a Horizontal Pod Autoscaler (HPA) to manage the number of replicas dynamically, preventing conflicts between the Git-managed manifest and the HPA's scaling decisions. The absence of `replicas` is intentional to enable autoscaling. No dependencies beyond standard Kubernetes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/best_practices.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  # do not include replicas in the manifests if you want replicas to be controlled by HPA\n  # replicas: 1\n  template:\n    spec:\n      containers:\n      - image: nginx:1.7.9\n        name: nginx\n        ports:\n        - containerPort: 80\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Project-Scoped Repository Management\nDESCRIPTION: Provides examples of RBAC policies required to allow users or roles within a project to manage (create, delete, update) project-scoped Git repositories. These policies grant permissions scoped to the specific project (`proj:my-project:admin`) and the 'repositories' resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_16\n\nLANGUAGE: RBAC Policy\nCODE:\n```\np, proj:my-project:admin, repositories, create, my-project/*, allow\np, proj:my-project:admin, repositories, delete, my-project/*, allow\np, proj:my-project:admin, repositories, update, my-project/*, allow\n```\n\n----------------------------------------\n\nTITLE: Creating Role and RoleBinding for Service Account on Remote Cluster Using Shell\nDESCRIPTION: This snippet creates a Role named 'guestbook-deployer-role' granting 'get', 'list', 'update', and 'delete' verbs on 'pods', 'deployment', and 'service' resources within the 'guestbook' namespace. It also creates a RoleBinding named 'guestbook-deployer-rb' that associates this Role with the 'guestbook-deployer' service account, enabling scoped permissions for syncing to those resource types.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ctx remote-cluster\nkubectl create role guestbook-deployer-role --verb get,list,update,delete --resource pods,deployment,service\nkubectl create rolebinding guestbook-deployer-rb --serviceaccount guestbook-deployer --role guestbook-deployer-role\n```\n\n----------------------------------------\n\nTITLE: Specifying a Helm Chart as Application Source in Argo CD using YAML\nDESCRIPTION: This snippet demonstrates how to define the source of an Argo CD application as a Helm chart repository instead of a Git path. The 'chart' attribute replaces 'path' within the spec.source section, identifying the Helm chart to deploy. This configuration depends on the Helm repository being accessible and properly configured in Argo CD. The inputs are the Helm repo URL and chart name, while the output is an application configured to deploy the specified Helm chart.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  project: default\n  source:\n    repoURL: https://argoproj.github.io/argo-helm\n    chart: argo\n```\n\n----------------------------------------\n\nTITLE: Example: Slack notification hook upon sync failure\nDESCRIPTION: This YAML illustrates a Job configured as a SyncFail hook that posts a Slack message when deployment synchronization fails. It uses appropriate annotations for hook classification and deletion, facilitating automated failure alerts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_hooks.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: app-slack-notification-fail-\n  annotations:\n    argocd.argoproj.io/hook: SyncFail\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: slack-notification\n        image: curlimages/curl\n        command:\n          - \"curl\"\n          - \"-X\"\n          - \"POST\"\n          - \"--data-urlencode\"\n          - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync failed\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\"\n          - \"https://hooks.slack.com/services/...\"\n      restartPolicy: Never\n  backoffLimit: 2\n```\n\n----------------------------------------\n\nTITLE: Updating Git Manifests with New Image - Bash\nDESCRIPTION: Clones the Git repository containing Kubernetes configuration manifests, navigates into it, and updates the image tag for the 'guestbook' application to `mycompany/guestbook:v2.0`. Examples are provided using both Kustomize and a direct `kubectl patch --local` for plain YAML files. Finally, the changes are committed and pushed to the remote Git repository, triggering Argo CD to detect the configuration update.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/ci_automation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mycompany/guestbook-config.git\ncd guestbook-config\n\n# kustomize\nkustomize edit set image mycompany/guestbook:v2.0\n\n# plain yaml\nkubectl patch --local -f config-deployment.yaml -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"guestbook\",\"image\":\"mycompany/guestbook:v2.0\"}]}}}}' -o yaml\n\ngit add .\ngit commit -m \"Update guestbook to v2.0\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Pruning with Allow-Empty in Application Manifest\nDESCRIPTION: Configures the automated sync policy in the application manifest to enable both automatic pruning and the `allowEmpty` option. This combination allows Argo CD to automatically delete resources and successfully synchronize the application even if the Git source results in an empty set of resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  syncPolicy:\n    automated:\n      prune: true\n      allowEmpty: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD ConfigMap for Okta SSO (YAML)\nDESCRIPTION: This YAML snippet configures the `argocd-cm` ConfigMap to enable Okta Single Sign-On for Argo CD.  It specifies the issuer, client ID, client secret, requested scopes, and requested ID token claims required for Okta authentication.  The `cliClientID` is optional and used for CLI SSO.  Users should replace placeholder values with their actual Okta configuration details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/okta.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://argocd.example.com\noidc.config: |\n  name: Okta\n  # this is the authorization server URI\n  issuer: https://example.okta.com/oauth2/aus9abcdefgABCDEFGd7\n  clientID: 0oa9abcdefgh123AB5d7\n  cliClientID: gfedcba0987654321GEFDCBA # Optional if using the CLI for SSO\n  clientSecret: ABCDEFG1234567890abcdefg\n  requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n  requestedIDTokenClaims: {\"groups\": {\"essential\": true}}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Extraneous Resources Annotation - YAML\nDESCRIPTION: This YAML snippet shows how to add the `argocd.argoproj.io/compare-options: IgnoreExtraneous` annotation to a Kubernetes resource's metadata to exclude it from the Argo CD application's sync status comparison. This annotation is useful for resources that are dynamically generated or managed by external tools. The application requires Argo CD to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/compare-options.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: IgnoreExtraneous\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct OIDC Authentication in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML configuration within `argocd-cm` under the `oidc.config` key sets up direct OIDC authentication for Argo CD. It defines the OIDC provider's details (`name`, `issuer`, `clientID`, `clientSecret`), optional scope/claim requests (`requestedScopes`, `requestedIDTokenClaims`), audience validation (`allowedAudiences`, `skipAudienceCheckWhenTokenHasNoAudience`), separate CLI client configuration (`cliClientID`), and PKCE flow enablement (`enablePKCEAuthentication`). The `clientSecret` typically references a Kubernetes secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  url: https://argocd.example.com\n\n  oidc.config: |\n    name: Okta\n    issuer: https://dev-123456.oktapreview.com\n    clientID: aaaabbbbccccddddeee\n    clientSecret: $oidc.okta.clientSecret\n    \n    # Optional list of allowed aud claims. If omitted or empty, defaults to the clientID value above (and the \n    # cliClientID, if that is also specified). If you specify a list and want the clientID to be allowed, you must \n    # explicitly include it in the list.\n    # Token verification will pass if any of the token's audiences matches any of the audiences in this list.\n    allowedAudiences:\n    - aaaabbbbccccddddeee\n    - qqqqwwwweeeerrrrttt\n\n    # Optional. If false, tokens without an audience will always fail validation. If true, tokens without an audience \n    # will always pass validation.\n    # Defaults to true for Argo CD < 2.6.0. Defaults to false for Argo CD >= 2.6.0.\n    skipAudienceCheckWhenTokenHasNoAudience: true\n\n    # Optional set of OIDC scopes to request. If omitted, defaults to: [\"openid\", \"profile\", \"email\", \"groups\"]\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n\n    # Optional set of OIDC claims to request on the ID token.\n    requestedIDTokenClaims: {\"groups\": {\"essential\": true}}\n\n    # Some OIDC providers require a separate clientID for different callback URLs.\n    # For example, if configuring Argo CD with self-hosted Dex, you will need a separate client ID\n    # for the 'localhost' (CLI) client to Dex. This field is optional. If omitted, the CLI will\n    # use the same clientID as the Argo CD server\n    cliClientID: vvvvwwwwxxxxyyyyzzzz\n\n    # PKCE authentication flow processes authorization flow from browser only - default false\n    # uses the clientID\n    # make sure the Identity Provider (IdP) is public and doesn't need clientSecret\n    # make sure the Identity Provider (IdP) has this redirect URI registered: https://argocd.example.com/pkce/verify\n    enablePKCEAuthentication: true\n```\n\n----------------------------------------\n\nTITLE: Registering Kubernetes Cluster with Argo CD\nDESCRIPTION: Registers an external Kubernetes cluster with Argo CD, identified by its context name from the user's kubeconfig file. This allows Argo CD to deploy and manage applications on that cluster by creating necessary ServiceAccount and RBAC resources there.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster add CONTEXTNAME\n```\n\n----------------------------------------\n\nTITLE: Defining Apply and Hook Synchronization Strategies in YAML\nDESCRIPTION: Specifies 'syncStrategy' as 'apply' to instruct Argo CD to perform 'kubectl apply', or 'hook' to submit referenced resources during sync. These strategies determine how resources are synchronized, with 'hook' supporting custom hooks. Dependencies include correct annotation of resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  sync:\n    syncStrategy:\n      apply: {}\n```\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n----------------------------------------\n\nTITLE: Basic usage of argocd app diff command in bash\nDESCRIPTION: The basic command syntax for comparing target and live state of an Argo CD application. It requires an application name as an argument and can be customized with additional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_diff.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app diff APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Import Argo CD Data from Backup - Bash\nDESCRIPTION: This snippet uses a Docker container to run the `argocd admin import` command to import Argo CD data from a `backup.yaml` file.  It mounts the `~/.kube` directory for cluster access and pipes the content of the backup file to the import command. Requires Docker and `argocd` CLI in the container.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/disaster_recovery.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -v ~/.kube:/home/argocd/.kube --rm quay.io/argoproj/argocd:$VERSION argocd admin import - < backup.yaml\n```\n\n----------------------------------------\n\nTITLE: Upgrading Argo CD (Non-HA) using kubectl\nDESCRIPTION: This bash script upgrades a non-HA Argo CD deployment using `kubectl`.  It retrieves the installation manifest from the GitHub repository, replacing `<version>` with the desired Argo CD version.  The command applies the manifest to the `argocd` namespace.  Ensure kubectl is configured to interact with your Kubernetes cluster.  The `<version>` parameter represents the Argo CD version.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Argo CD Application Sync Command - Bash\nDESCRIPTION: This snippet demonstrates the command-line syntax to synchronize one or more Argo CD applications to their desired state. It supports syncing apps by name, label selectors, or project association. Users can sync specific revisions, source positions, or individual Kubernetes resources within applications. Multiple flags are supported to alter sync behavior such as forcing updates, pruning resources, performing dry runs, and outputting results in different formats. Dependencies include having Argo CD CLI installed and authenticated against the Argo CD server. Inputs include application names, label selectors, projects, resource identifiers, and various optional flags controlling sync strategies, retries, timeouts, and namespaces. The command outputs the sync operation status with user-configurable detail. Limitations arise primarily from correct specification of resource designators and permissions to perform operations on the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_sync.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app sync [APPNAME... | -l selector | --project project-name] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Sync an app\n  argocd app sync my-app\n\n  # Sync multiples apps\n  argocd app sync my-app other-app\n\n  # Sync apps by label, in this example we sync apps that are children of another app (aka app-of-apps)\n  argocd app sync -l app.kubernetes.io/instance=my-app\n  argocd app sync -l app.kubernetes.io/instance!=my-app\n  argocd app sync -l app.kubernetes.io/instance\n  argocd app sync -l '!app.kubernetes.io/instance'\n  argocd app sync -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n\n  # Sync a multi-source application for specific revision of specific sources\n  argocd app sync my-app --revisions 0.0.1 --source-positions 1 --revisions 0.0.2 --source-positions 2\n  argocd app sync my-app --revisions 0.0.1 --source-names my-chart --revisions 0.0.2 --source-names my-values\n\n  # Sync a specific resource\n  # Resource should be formatted as GROUP:KIND:NAME. If no GROUP is specified then :KIND:NAME\n  argocd app sync my-app --resource :Service:my-service\n  argocd app sync my-app --resource argoproj.io:Rollout:my-rollout\n  argocd app sync my-app --resource '!apps:Deployment:my-service'\n  argocd app sync my-app --resource apps:Deployment:my-service --resource :Service:my-service\n  argocd app sync my-app --resource '!*:Service:*'\n  # Specify namespace if the application has resources with the same name in different namespaces\n  argocd app sync my-app --resource argoproj.io:Rollout:my-namespace/my-rollout\n```\n\n----------------------------------------\n\nTITLE: Help Option for 'argocd proj edit' Command\nDESCRIPTION: Displays help information related to the 'edit' command, including available options and usage tips when invoked with '-h' or '--help'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_edit.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for edit\n```\n\n----------------------------------------\n\nTITLE: Creating a k3d Kubernetes Cluster with Custom API Port in Shell\nDESCRIPTION: Command to create a k3d cluster with disabled traefik and a custom API port bound to the host IP, along with port forwarding for HTTPS. This facilitates running a disposable Kubernetes environment inside Docker containers while ensuring proper network accessibility and avoiding API connectivity issues. The command demonstrates k3d’s CLI usage with multiple options and is intended to be run from a Unix shell with k3d and Docker installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nk3d cluster create my-cluster --wait --k3s-arg '--disable=traefik@server:*' --api-port $IP:6550 -p 443:443@loadbalancer\n```\n\n----------------------------------------\n\nTITLE: Subscribing an Argo CD Application to a Webhook Notification (YAML)\nDESCRIPTION: Demonstrates how to subscribe an Argo CD Application resource to a specific notification trigger (`<trigger-name>`) and associated webhook service (`<webhook-name>`) using annotations. This connects application events defined in the trigger to the configured webhook.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.<webhook-name>: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Resource Actions in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define custom resource actions for `CronJob` resources in the `argocd-cm` ConfigMap.  It defines actions for `suspend` and `resume` using Lua scripts.  The example shows how to disable actions conditionally based on object state and set the `disabled` key to disable an action.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/resource_actions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresource.customizations.actions.batch_CronJob: |\n  discovery.lua: |\n    actions = {}\n    actions[\"suspend\"] = {[\"disabled\"] = true}\n    actions[\"resume\"] = {[\"disabled\"] = true}\n  \n    local suspend = false\n    if obj.spec.suspend ~= nil then\n        suspend = obj.spec.suspend\n    end\n    if suspend then\n        actions[\"resume\"][\"disabled\"] = false\n    else\n        actions[\"suspend\"][\"disabled\"] = false\n    end\n    return actions\n  definitions:\n  - name: suspend\n    action.lua: |\n      obj.spec.suspend = true\n      return obj\n  - name: resume\n    action.lua: |\n      if obj.spec.suspend ~= nil and obj.spec.suspend then\n          obj.spec.suspend = false\n      end\n      return obj\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'argocd proj edit' Command\nDESCRIPTION: Lists all the global and context-specific options that can be used with the command to customize behavior, such as server context, authentication, TLS settings, port forwarding, logging, and resource names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_edit.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Setting ARGOCD_SERVER for Remote Access on Custom Port - Shell\nDESCRIPTION: This line sets ARGOCD_SERVER to 127.0.0.1:4443 for local access via the port-forwarded remote Argo CD API server. Test processes reference this environment variable to connect. Port-forwarding must be active before running this command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_SERVER=127.0.0.1:4443\n\n```\n\n----------------------------------------\n\nTITLE: Combined Application YAML example with multiple sources\nDESCRIPTION: This YAML snippet provides a complete example of an Application definition utilizing the new `sources` field along with the deprecated `source` field (for backwards compatibility). It demonstrates multiple sources including referencing values files from different repositories.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/multiple-sources-for-applications.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: grafana\n  namespace: argocd\nspec:\n  destination:\n    namespace: monitoring\n    server: https://some.k8s.url.com:6443\n  project: default\n  source:\n    repoURL: https://github.com/helm/charts\n    targetRevision: master\n    helm:\n    valueFiles:\n        - values.yaml\n    chart: incubator/elasticsearch\n  sources:                                          # new field\n  # application that consists of MongoDB and ElasticSearch resources\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/mongodb\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch\n    - repoURL: https://github.com/my-org/my-repo  # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"my-repo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n  syncPolicy:\n    automated: {}\n```\n\n----------------------------------------\n\nTITLE: Storing Teams Webhook URL (Secret)\nDESCRIPTION: This YAML snippet defines a Secret named `<secret-name>` to securely store the Teams webhook URL.  It contains a `channel-teams-url` entry that holds the actual webhook URL. The secret's name must be defined, and this secret is crucial for Teams notifications to function, ensuring the correct destination for notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  channel-teams-url: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Defining and Using User Context in Argo CD Notification Templates (YAML)\nDESCRIPTION: Shows how to define shared key-value pairs under the `context` key in the `argocd-notifications-cm` ConfigMap. These values (`region`, `environmentName`) can then be accessed within any template using the `.context` field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  context: |\n    region: east\n    environmentName: staging\n\n  template.a-slack-template-with-context: |\n    message: \"Something happened in {{ .context.environmentName }} in the {{ .context.region }} data center!\"\n```\n\n----------------------------------------\n\nTITLE: Disabling ignoreDifferencesOnResourceUpdates in Argo CD ConfigMap - YAML\nDESCRIPTION: This snippet shows how to disable the automatic addition of ignoreDifferences configurations during resource updates by setting ignoreDifferencesOnResourceUpdates to false under resource.compareoptions in the argocd-cm ConfigMap. This option controls whether existing ignoreDifferences settings also affect resource update reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.compareoptions: |\n    ignoreDifferencesOnResourceUpdates: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Extensions in Argo CD Global ConfigMap Using YAML\nDESCRIPTION: This snippet provides a complete example of configuring proxy extensions within the Argo CD main ConfigMap (`argocd-cm`). It defines an extension named `httpbin` with connection settings such as timeouts and keep alive durations. It specifies a backend service URL, headers to be injected into requests (supporting secret key references via `$` prefix), and associates the service with a cluster by name and server URL. This global configuration supports multiple extensions and services under a single ConfigMap key `extension.config`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/proxy-extensions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  extension.config: |\n    extensions:\n    - name: httpbin\n      backend:\n        connectionTimeout: 2s\n        keepAlive: 15s\n        idleConnectionTimeout: 60s\n        maxIdleConnections: 30\n        services:\n        - url: http://httpbin.org\n          headers:\n          - name: some-header\n            value: '$some.argocd.secret.key'\n          cluster:\n            name: some-cluster\n            server: https://some-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining an Argo CD AppProject Resource using Kubernetes YAML\nDESCRIPTION: This YAML defines an AppProject Custom Resource in Argo CD that groups applications logically. It specifies metadata including namespace, a deletion finalizer to prevent premature deletion if referenced, description, allowed source repositories, allowed deployment destinations, resource whitelists and blacklists controlling which Kubernetes resources can be created, and access control roles that define permissions and policies within the project. Dependencies include Argo CD installation and understanding of project-scoped RBAC policies. Expected inputs are repository and destination configurations and role definitions; output is a managed project resource within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  # Finalizer that ensures that project is not deleted until it is not referenced by any application\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n  - '*'\n  # Only permit applications to deploy to the guestbook namespace in the same cluster\n  destinations:\n  - namespace: guestbook\n    server: https://kubernetes.default.svc\n  # Deny all cluster-scoped resources from being created, except for Namespace\n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy\n  namespaceResourceBlacklist:\n  - group: ''\n    kind: ResourceQuota\n  - group: ''\n    kind: LimitRange\n  - group: ''\n    kind: NetworkPolicy\n  # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet\n  namespaceResourceWhitelist:\n  - group: 'apps'\n    kind: Deployment\n  - group: 'apps'\n    kind: StatefulSet\n  roles:\n  # A role which provides read-only access to all applications in the project\n  - name: read-only\n    description: Read-only privileges to my-project\n    policies:\n    - p, proj:my-project:read-only, applications, get, my-project/*, allow\n    groups:\n    - my-oidc-group\n  # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide\n  # sync privileges to a CI system\n  - name: ci-role\n    description: Sync privileges for guestbook-dev\n    policies:\n    - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow\n    # NOTE: JWT tokens can only be generated by the API server and the token is not persisted\n    # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.\n    jwtTokens:\n    - iat: 1535390316\n```\n\n----------------------------------------\n\nTITLE: Scanning SSH Host Keys using ssh-keyscan in Bash\nDESCRIPTION: This Bash script demonstrates how to use the `ssh-keyscan` utility to retrieve the public SSH keys for a predefined list of common Git hosting providers (Bitbucket, GitHub, GitLab, Azure DevOps). The output format `<server_name> <keytype> <base64-encoded_key>` is suitable for direct use in an `ssh_known_hosts` file or the `argocd-ssh-known-hosts-cm` ConfigMap. Errors are redirected to `/dev/null` to suppress connection or host resolution issues.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ for host in bitbucket.org github.com gitlab.com ssh.dev.azure.com vs-ssh.visualstudio.com ; do ssh-keyscan $host 2> /dev/null ; done\nbitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n```\n\n----------------------------------------\n\nTITLE: Edit argocd-secret with webhook secrets\nDESCRIPTION: This bash command and YAML snippet shows how to edit the Argo CD secret (`argocd-secret`) to include webhook secrets from Git providers (GitHub, GitLab). The secret includes shared secrets used for authenticating webhook events.  This enables quicker application updates by reacting to events in the Git repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit secret argocd-secret -n argocd\n```\n\n----------------------------------------\n\nTITLE: Adding Private Helm Repository via HTTPS with Credentials - Argo CD CLI Shell Example\nDESCRIPTION: This shell snippet shows adding a private Helm repository over HTTPS using username and password credentials. Requires argocd CLI, repository access, and authentication credentials. '--type helm' and '--name' flags are mandatory; '--username' and '--password' allow access to the secured repository. Input is the Helm repository URL and user credentials; output is the configured private Helm repository in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://charts.helm.sh/stable --type helm --name stable --username test --password test\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Argo CD with Root Path (Nginx)\nDESCRIPTION: Provides an example Nginx configuration file for proxying requests to an Argo CD instance configured with a `--rootpath` (e.g., '/argo-cd'). It sets up a location block that passes requests starting with `/argo-cd/` to the Argo CD server running internally, preserving the path.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_27\n\nLANGUAGE: nginx\nCODE:\n```\nworker_processes 1;\n\nevents { worker_connections 1024; }\n\nhttp {\n\n    sendfile on;\n\n    server {\n        listen 443;\n\n        location /argo-cd/ {\n            proxy_pass         https://localhost:8080/argo-cd/;\n            proxy_redirect     off;\n            proxy_set_header   Host $host;\n            proxy_set_header   X-Real-IP $remote_addr;\n            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header   X-Forwarded-Host $server_name;\n            # buffering should be disabled for api/v1/stream/applications to support chunked response\n            proxy_buffering off;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Trigger in Argo CD Notifications (YAML)\nDESCRIPTION: Defines a ConfigMap to set up a webhook endpoint, including URL, headers, and a template to send sync status details via POST request upon successful deployment. Also sets a trigger to activate when an app is healthy and Succeeded.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/examples.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.on-deployed-webhook: |\n    url: <your-webhook-url>\n    headers:\n    - name: \"Content-Type\"\n      value: \"application/json\"\n\n  template.on-deployed-template: |\n    webhook:\n      on-deployed-webhook:\n        method: POST\n        body: |\n              {{toJson .app.status.operationState.syncResult}}\n\n  trigger.on-deployed-trigger: |\n    when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\n    oncePer: app.status.sync.revision\n    send: [on-deployed-template]\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Repo with Private Key using Argo CD CLI (Bash)\nDESCRIPTION: Adds a private Git repository accessed over SSH using a private key file. The `--ssh-private-key-path` flag points to the location of the SSH private key file on the local system. Note that `ssh://` style URLs are required for specifying non-standard SSH ports.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo add git@github.com:argoproj/argocd-example-apps.git --ssh-private-key-path ~/.ssh/id_rsa\n```\n\n----------------------------------------\n\nTITLE: Enable Server-Side Diff Globally (Argo CD Controller) - YAML\nDESCRIPTION: Configures the Argo CD application controller to use the Server-Side Diff strategy for all managed applications by adding the `controller.diff.server.side: \"true\"` entry to the `argocd-cmd-params-cm` ConfigMap. This requires administrator privileges to modify the ConfigMap and a restart of the controller pod to take effect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diff-strategies.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  controller.diff.server.side: \"true\"\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pod Name for Port Forwarding - Kubernetes\nDESCRIPTION: This command retrieves the name of the MinIO pod within the specified Kubernetes namespace. The pod name is then stored in the `POD_NAME` environment variable. This variable is later used for port forwarding, allowing local access to the MinIO service.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"release={{ template \"minio.fullname\" . }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n```\n\n----------------------------------------\n\nTITLE: Adding GCP Service Account Credentials\nDESCRIPTION: This demonstrates adding credentials using a GCP service account key.  It uses the `--gcp-service-account-key-path` flag to specify the path to the service account key file. This allows Argo CD to authenticate to GCP and access the repository resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_6\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with GCP credentials for all repositories under https://source.developers.google.com/p/my-google-cloud-project/r/\n  argocd repocreds add https://source.developers.google.com/p/my-google-cloud-project/r/ --gcp-service-account-key-path service-account-key.json\n```\n\n----------------------------------------\n\nTITLE: Generating and Sourcing Fish Completion Script (Shell)\nDESCRIPTION: These commands illustrate how to generate the fish completion script and save it to the standard fish completions directory. This makes the completions available for the fish shell.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_completion.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ argocd completion fish > ~/.config/fish/completions/argocd.fish\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ source ~/.config/fish/completions/argocd.fish\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Kustomize Versions\nDESCRIPTION: This YAML snippet details how to configure multiple Kustomize versions within Argo CD using the `argocd-cm` ConfigMap. It uses `kustomize.path.<version>` to specify the path to custom Kustomize binaries. After configuration, Argo CD will use specified custom versions. Requires custom tools bundling and `argocd-cm` modification and restart.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n    kustomize.path.v3.5.1: /custom-tools/kustomize_3_5_1\n    kustomize.path.v3.5.4: /custom-tools/kustomize_3_5_4\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab SCM Provider Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Shows how to configure the GitLab SCM provider in an ApplicationSet generator. Parameters include group or namespaced path, GitLab API URL, branch scanning options, subgroup and shared project inclusion, topic filtering, authentication via Secret, and options for TLS verification. Requires access to the GitLab API and, for private groups or organizations, appropriate Secrets for authentication. Supports additional security via custom CA or disabling certificate validation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      gitlab:\n        # The base GitLab group to scan.  You can either use the group id or the full namespaced path.\n        group: \"8675309\"\n        # For self-hosted GitLab:\n        api: https://gitlab.example.com/\n        # If true, scan every branch of every repository. If false, scan only the default branch. Defaults to false.\n        allBranches: true\n        # If true, recurses through subgroups. If false, it searches only in the base group. Defaults to false.\n        includeSubgroups: true\n        # If true and includeSubgroups is also true, include Shared Projects, which is gitlab API default.\n        # If false only search Projects under the same path. Defaults to true.\n        includeSharedProjects: false\n        # filter projects by topic. A single topic is supported by Gitlab API. Defaults to \"\" (all topics).\n        topic: \"my-topic\"\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: gitlab-token\n          key: token\n        # If true, skips validating the SCM provider's TLS certificate - useful for self-signed certificates.\n        insecure: false\n        # Reference to a ConfigMap containing trusted CA certs - useful for self-signed certificates. (optional)\n        caRef:\n          configMapName: argocd-tls-certs-cm\n          key: gitlab-ca\n  template:\n  # ...\n\n```\n\n----------------------------------------\n\nTITLE: Applying SSH Configuration for Argo CD\nDESCRIPTION: This code provides a workaround for older SSH servers by enabling the `ssh-rsa` algorithm in Argo CD. This involves creating a ConfigMap with the necessary SSH configuration, enabling SHA-1. It is recommended only as a temporary fix.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.2-2.3.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nHost old-host\n    HostkeyAlgorithms +ssh-rsa\n    PubkeyAcceptedAlgorithms +ssh-rsa\n```\n\n----------------------------------------\n\nTITLE: Requiring Confirmation for Resource Deletion in Argo CD (YAML)\nDESCRIPTION: Applies the `argocd.argoproj.io/sync-options: Delete=confirm` annotation to a resource's metadata. This prevents the resource from being automatically deleted during Application deletion until manual confirmation is provided via the Argo CD UI, CLI, or by adding the `argocd.argoproj.io/deletion-approved: <ISO formatted timestamp>` annotation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Delete=confirm\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Links in argocd-cm.yaml\nDESCRIPTION: A comprehensive example of configuring deep links in the argocd-cm ConfigMap. This shows examples for project-level, application-level, and resource-level links with various conditional statements and templating options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/deep_links.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  # sample project level links\n  project.links: |\n    - url: https://myaudit-system.com?project={{.project.metadata.name}}\n      title: Audit\n      description: system audit logs\n      icon.class: \"fa-book\"\n  # sample application level links\n  application.links: |\n    # pkg.go.dev/text/template is used for evaluating url templates\n    - url: https://mycompany.splunk.com?search={{.app.spec.destination.namespace}}&env={{.project.metadata.labels.env}}\n      title: Splunk\n    # conditionally show link e.g. for specific project\n    # github.com/expr-lang/expr is used for evaluation of conditions\n    - url: https://mycompany.splunk.com?search={{.app.spec.destination.namespace}}\n      title: Splunk\n      if: application.spec.project == \"default\"\n    - url: https://{{.app.metadata.annotations.splunkhost}}?search={{.app.spec.destination.namespace}}\n      title: Splunk\n      if: app.metadata.annotations.splunkhost != \"\"\n  # sample resource level links\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{.resource.metadata.name}}&env={{.project.metadata.labels.env}}\n      title: Splunk\n      if: resource.kind == \"Pod\" || resource.kind == \"Deployment\"\n    \n    # sample checking a tag exists that contains - or / and how to alternatively access it\n    - url: https://mycompany.splunk.com?tag={{ index .resource.metadata.labels \"some.specific.kubernetes.like/tag\" }}\n      title: Tag Service\n      if: resource.metadata.labels[\"some.specific.kubernetes.like/tag\"] != nil && resource.metadata.labels[\"some.specific.kubernetes.like/tag\"] != \"\"\n```\n\n----------------------------------------\n\nTITLE: Generator Template Override Example in ApplicationSet\nDESCRIPTION: Example showing how generator-level templates can override spec-level templates. In this case, the path value in the generator template overrides the default path in the spec template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Template.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n      template:\n        metadata: {}\n        spec:\n          project: \"default\"\n          source:\n            targetRevision: HEAD\n            repoURL: https://github.com/argoproj/argo-cd.git\n            # New path value is generated here:\n            path: 'applicationset/examples/template-override/{{ .nameNormalized }}-override'\n          destination: {}\n\n  template:\n    metadata:\n      name: '{{ .nameNormalized }}-guestbook'\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        # This 'default' value is not used: it is replaced by the generator's template path, above\n        path: applicationset/examples/template-override/default\n      destination:\n        server: '{{ .server }}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Arbitrary Values via Values Field in ApplicationSet\nDESCRIPTION: This YAML configuration demonstrates how to pass custom key-value pairs using the 'values' field within an SCM provider generator. These values are interpolated in the template, allowing for flexible and dynamic naming or parameterization of generated applications based on repository metadata or external inputs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - scmProvider:\n      bitbucketServer:\n        project: myproject\n        api: https://mycompany.bitbucket.org\n        allBranches: true\n        basicAuth:\n          username: myuser\n          passwordRef:\n            secretName: mypassword\n            key: password\n      values:\n        name: \"{{.organization}}-{{.repository}}\"\n  template:\n    metadata:\n      name: '{{ .values.name }}'\n    spec:\n      source:\n        repoURL: '{{ .url }}'\n        targetRevision: '{{ .branch }}'\n        path: kubernetes/\n      project: default\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: Creating App using Custom Tool with argocd app create\nDESCRIPTION: This snippet demonstrates the creation of an application that utilizes a custom configuration management tool. It specifies the repository, path, destination namespace, destination server and config management plugin using the `--config-management-plugin` flag. This provides a way to integrate custom tools for defining and managing application configurations. Requires the Argo CD CLI to be configured, access to a Kubernetes cluster and the custom plugin installed and available.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a app using a custom tool:\n  argocd app create kasane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane\n```\n\n----------------------------------------\n\nTITLE: Defining a Child Application Template in Argo CD (YAML)\nDESCRIPTION: Example YAML manifest for a child Argo CD Application resource (`guestbook`). This template defines the application's metadata, namespace, project, source repository details, and destination cluster/namespace. It includes a finalizer for proper resource cleanup upon deletion and uses a Helm value (`{{ .Values.spec.destination.server }}`) for the destination server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: argocd\n    server: {{ .Values.spec.destination.server }}\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps\n    targetRevision: HEAD\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic SCM Provider Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Demonstrates how to define an ApplicationSet with an SCM provider generator. The example includes configuring the clone protocol (e.g., ssh) and references a specific provider (such as GitHub) for further customization. No provider-specific fields are fully shown in this snippet, focusing instead on the overall generator and template structure. Intended as a foundation for more specific SCM provider configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      # Which protocol to clone using.\n      cloneProtocol: ssh\n      # See below for provider specific options.\n      github:\n        # ...\n\n```\n\n----------------------------------------\n\nTITLE: Deleting and Re-adding External Cluster Token via kubectl and argocd CLI - Bash\nDESCRIPTION: This snippet demonstrates how to rotate the ServiceAccount bearer token used by Argo CD to authenticate to an externally managed Kubernetes cluster. It involves deleting the existing secret token in the kube-system namespace and re-adding the cluster with the updated credentials using the `argocd cluster add` command. Dependencies include a kubeconfig context targeting the external cluster and installed kubectl and argocd CLI tools.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/security.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# run using a kubeconfig for the externally managed cluster\nkubectl delete secret argocd-manager-token-XXXXXX -n kube-system\nargocd cluster add CONTEXTNAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD CMP via argocd-cm (Deprecated)\nDESCRIPTION: This YAML snippet shows the deprecated method of defining a Config Management Plugin within the `argocd-cm` ConfigMap. It includes optional `init` and `generate` commands along with the `lockRepo` setting, which is not relevant for sidecar plugins. This method was removed in Argo CD v2.8.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  configManagementPlugins: |\n    - name: pluginName\n      init:                          # Optional command to initialize application source directory\n        command: [\"sample command\"]\n        args: [\"sample args\"]\n      generate:                      # Command to generate Kubernetes Objects in either YAML or JSON\n        command: [\"sample command\"]\n        args: [\"sample args\"]\n      lockRepo: true                 # Defaults to false. See below.\n```\n\n----------------------------------------\n\nTITLE: Defining Application sources in YAML\nDESCRIPTION: This YAML snippet demonstrates the proposed change to the Application spec, where the `source` field is supplemented by a new `sources` field, allowing users to specify multiple source repositories for an application. The `source` field will be deprecated.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/multiple-sources-for-applications.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    repoURL: https://github.com/elastic/helm-charts/tree/main/elasticsearch\n    targetRevision: 6.8\n    helm:\n      valueFiles:\n        - values.yaml\n  sources:                                          # new field\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch\n      helm:\n        valueFiles:\n          - values.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Image with SLSA Attestations\nDESCRIPTION: This shell script verifies the SLSA provenance of a container image using slsa-verifier. It first retrieves the immutable container image using `crane digest`, then calls `slsa-verifier verify-image`. It requires slsa-verifier and crane to be installed. The parameters include the image name, source URI, and source tag. The output confirms the provenance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Get the immutable container image to prevent TOCTOU attacks https://github.com/slsa-framework/slsa-verifier#toctou-attacks\nIMAGE=quay.io/argoproj/argocd:v2.7.0\nIMAGE=\"${IMAGE}@\"$(crane digest \"${IMAGE}\")\n# Verify provenance, including the tag to prevent rollback attacks.\nslsa-verifier verify-image \"$IMAGE\" \\\n    --source-uri github.com/argoproj/argo-cd \\\n    --source-tag v2.7.0\n```\n\n----------------------------------------\n\nTITLE: Executing Argo CD Version Command in Bash\nDESCRIPTION: This snippet shows how to invoke the 'argocd version' command from a shell environment to print Argo CD client and server version information. It supports various flags affecting output detail and format, allowing for JSON, YAML, shortened output, or client-only queries without server connection.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_version.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd version [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for argocd-repo-server using kubectl (Shell)\nDESCRIPTION: This shell command creates a Kubernetes TLS secret named 'argocd-repo-server-tls' in the 'argocd' namespace containing the TLS certificate and private key for the argocd-repo-server workload. It requires kubectl configured with cluster access and existing PEM files for the certificate and key. This secret enables argocd-repo-server to serve a persistent TLS certificate instead of a self-signed certificate. Note that changes to this secret require a manual restart of argocd-repo-server pods to take effect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/tls.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -n argocd secret tls argocd-repo-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Subscriptions in ConfigMap (YAML)\nDESCRIPTION: This snippet shows how to define global notification subscriptions in the `argocd-notifications-cm` ConfigMap. The `subscriptions` field contains a list of subscription definitions, each specifying recipients (like slack:test2, email:test@gmail.com), triggers (`on-sync-status-unknown`), and optionally a selector (`selector: test=true`) to limit which applications the subscription applies to. This allows for centralized management of default notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/subscriptions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Contains centrally managed global application subscriptions\n  subscriptions: |\n    # subscription for on-sync-status-unknown trigger notifications\n    - recipients:\n      - slack:test2\n      - email:test@gmail.com\n      triggers:\n      - on-sync-status-unknown\n    # subscription restricted to applications with matching labels only\n    - recipients:\n      - slack:test3\n      selector: test=true\n      triggers:\n      - on-sync-status-unknown\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Argo CD Project Events via Annotation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to subscribe to Argo CD project events by adding the same annotation used for applications to the `AppProject` CRD. It uses `notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient>` annotation within the `metadata` section of an `AppProject` resource.  This effectively applies the subscription configuration to all applications within that project. Dependencies include a running Argo CD instance and the Argo CD Notifications controller. The annotation key is composed of trigger name, notification service, and recipient list.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/subscriptions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application Health via argocd CLI - Shell - sh\nDESCRIPTION: Demonstrates usage of the `argocd` CLI to retrieve application health and sync status in JSON format after migrating away from direct CR status parsing. This is necessary after Argo CD's shift to storing health status externally. Requires installation of the `argocd` CLI and appropriate API access. Replace `<my app>` with the relevant application name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nargocd app get <my app> -o json\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Parameter Overrides with Argo CD CLI - Bash\nDESCRIPTION: This sequence of bash commands shows how to use the Argo CD CLI to set boolean and array value parameters within an application's manifest, leveraging YAML-path-like syntax. Prerequisites include Argo CD CLI with cluster connectivity and the target application deployed. The commands directly update parameters such as 'ingress.enabled' and array elements like 'ingress.hosts[0]', allowing advanced customization without editing Git-tracked files. Inputs include the application name and complex path parameters; expected output is a reconfigured application manifest. This approach is ideal for quick environment tweaks.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/parameters.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set guestbook -p ingress.enabled=true\nargocd app set guestbook -p ingress.hosts[0]=guestbook.myclusterurl\n```\n\n----------------------------------------\n\nTITLE: Explicitly Enabling Automated Sync with 'enabled' Flag in Application Manifest\nDESCRIPTION: Uses the `enabled` flag within the automated sync policy in the application manifest to explicitly turn on automated sync. Setting `enabled: true` ensures the automated sync is active, providing a clear way to control the feature's state regardless of other policy settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  syncPolicy:\n    automated:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining Kustomize Application Manifest\nDESCRIPTION: This YAML snippet defines an Argo CD application using Kustomize. It specifies the source repository, path, and target revision for the Kustomize application. The `destination` section specifies the Kubernetes cluster and namespace where the application will be deployed. This is a basic example of deploying a Kustomize-based application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kustomize-example\nspec:\n  project: default\n  source:\n    path: examples/helloWorld\n    repoURL: 'https://github.com/kubernetes-sigs/kustomize'\n    targetRevision: HEAD\n  destination:\n    namespace: default\n    server: 'https://kubernetes.default.svc'\n```\n\n----------------------------------------\n\nTITLE: Getting logs of application pods\nDESCRIPTION: This command gets logs of pods associated with the application \"my-app\". It demonstrates how to use various flags to filter the logs based on group, kind, namespace, and resource name.  The command can also stream logs in real-time, get the last N lines of logs, get logs since a specified number of seconds ago, get logs until a specified time, filter logs to show only those containing a specific string, filter logs to show only those containing a specific string and match case, get logs for a specific container within the pods, and get previously terminated container logs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_logs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Get logs of pods associated with the application \"my-app\"\n  argocd app logs my-app\n  \n  # Get logs of pods associated with the application \"my-app\" in a specific resource group\n  argocd app logs my-app --group my-group\n  \n  # Get logs of pods associated with the application \"my-app\" in a specific resource kind\n  argocd app logs my-app --kind my-kind\n  \n  # Get logs of pods associated with the application \"my-app\" in a specific namespace\n  argocd app logs my-app --namespace my-namespace\n  \n  # Get logs of pods associated with the application \"my-app\" for a specific resource name\n  argocd app logs my-app --name my-resource\n  \n  # Stream logs in real-time for the application \"my-app\"\n  argocd app logs my-app -f\n  \n  # Get the last N lines of logs for the application \"my-app\"\n  argocd app logs my-app --tail 100\n  \n  # Get logs since a specified number of seconds ago\n  argocd app logs my-app --since-seconds 3600\n  \n  # Get logs until a specified time (format: \"2023-10-10T15:30:00Z\")\n  argocd app logs my-app --until-time \"2023-10-10T15:30:00Z\"\n  \n  # Filter logs to show only those containing a specific string\n  argocd app logs my-app --filter \"error\"\n  \n  # Filter logs to show only those containing a specific string and match case\n  argocd app logs my-app --filter \"error\" --match-case\n  \n  # Get logs for a specific container within the pods\n  argocd app logs my-app -c my-container\n  \n  # Get previously terminated container logs\n  argocd app logs my-app -p\n```\n\n----------------------------------------\n\nTITLE: Configure OIDC for ArgoCD using kubectl\nDESCRIPTION: This snippet configures OpenID Connect (OIDC) settings for ArgoCD by editing the `argocd-cm` configmap.  It sets the issuer URL, client ID, client secret, and requested scopes for authentication with Auth0.  The `domain_hint` and the `http://your.domain/groups` scope are also configured to allow ArgoCD to properly assign roles and scopes based on user groups defined in Auth0. Replace placeholders like `<yourtenant>.<eu|us>.auth0.com`, `<theClientId>`, `<theClientSecret>`, `<theDomainHint>`, and `http://your.domain/groups` with your actual Auth0 configuration values. This configuration tells ArgoCD how to communicate with Auth0 for user authentication and authorization.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/auth0.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndata:\n  application.instanceLabelKey: argocd.argoproj.io/instance\n  url: https://your.argoingress.address\n  oidc.config: |\n    name: Auth0\n    issuer: https://<yourtenant>.<eu|us>.auth0.com/\n    clientID: <theClientId>\n    clientSecret: <theClientSecret>\n    domain_hint: <theDomainHint>\n    requestedScopes:\n    - openid\n    - profile\n    - email\n    # not strictly necessary - but good practice:\n    - 'http://your.domain/groups'\n...\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Argo CD CMP by Name in Application Manifest\nDESCRIPTION: This snippet from an Argo CD Application manifest shows how to explicitly specify which CMP to use by setting the `spec.source.plugin.name` field. This approach bypasses the plugin discovery mechanism and directly associates the application with the named plugin (e.g., `pluginName`). If the plugin definition includes a version, the name should be `<metadata.name>-<spec.version>`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  source:\n    plugin:\n      name: pluginName  # Delete this for auto-discovery (and set `plugin: {}` if `name` was the only value) or use proper sidecar plugin name\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with Helm - Bash\nDESCRIPTION: Installs the Minio Helm chart on the Kubernetes cluster using the default configuration. Requires Helm installed and access to a working Kubernetes cluster (v1.4+). Expects cluster to have persistent volume support. Outputs the release and creates Minio resources; no parameters are overridden in this default form.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install stable/minio\n```\n\n----------------------------------------\n\nTITLE: Getting Application Pod Logs with ArgoCD CLI\nDESCRIPTION: This command retrieves logs from pods associated with the application specified by APPNAME. It accepts various flags to filter the logs based on resource group, kind, namespace, name, time, content, and container. The command can also stream logs in real-time or retrieve logs from previously terminated containers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_logs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app logs APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Go Template Usage with List Generator (YAML)\nDESCRIPTION: A complete example demonstrating basic Go template usage within an ApplicationSet configured with a List generator. It substitutes `cluster` and `url` values from the generator's elements into the template's metadata and spec fields.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub App Credential using Argo CD CLI (Bash)\nDESCRIPTION: Configures access to a private GitHub repository using a GitHub Application. This command requires the App ID (`--github-app-id`), the Installation ID (`--github-app-installation-id`), and the path to the App's private key file (`--github-app-private-key-path`). For GitHub Enterprise, add the `--github-app-enterprise-base-url` flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo add https://github.com/argoproj/argocd-example-apps.git --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Data Webhook and Template in Argo CD (YAML)\nDESCRIPTION: This ConfigMap snippet defines a webhook service `form` with a target URL and sets the `Content-Type` header to `application/x-www-form-urlencoded`. It also includes a template `form-data` that uses this service, specifies the `POST` method, and provides the form data in the required key=value format in the request `body`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.form: |\n    url: https://form.example.com\n    headers:\n    - name: Content-Type\n      value: application/x-www-form-urlencoded\n\n  template.form-data: |\n    webhook:\n      form:\n        method: POST\n        body: key1=value1&key2=value2\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Resource Fields in Argo CD via resource.customizations - YAML\nDESCRIPTION: This snippet configures Argo CD to ignore updates to specific JSON paths within tracked resources. It illustrates ignoring the /status/refreshTime field of the ExternalSecret resource using jsonPointers. This customization is added under the resource.customizations key in the argocd-cm ConfigMap. The jsonPointers list specifies exact JSON paths whose changes should not trigger reconcile actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret:\n    |\n    jsonPointers:\n    - /status/refreshTime\n    # JQ equivalent of the above:\n    # jqPathExpressions:\n    # - .status.refreshTime\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD on Kubernetes with kubectl (Bash)\nDESCRIPTION: This snippet demonstrates the installation of Argo CD into a Kubernetes cluster using kubectl commands. It first creates a dedicated namespace 'argocd', and then applies the official Argo CD installation manifest from the project's GitHub repository. Requires kubectl to be configured and connected to a target Kubernetes cluster. Inputs: None. Outputs: Argo CD resources installed within the 'argocd' namespace. Ensure cluster permissions allow namespace creation and resource deployments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Advanced Templating with templatePatch in ApplicationSet\nDESCRIPTION: Example of using templatePatch for advanced templating that supports json and yaml. This example shows conditional automated sync policy, conditional prune setting, and adding multiple helm value files from a list.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Template.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          autoSync: true\n          prune: true\n          valueFiles:\n            - values.large.yaml\n            - values.debug.yaml\n  template:\n    metadata:\n      name: '{{ .nameNormalized }}-deployment'\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{ .nameNormalized }}\n      destination:\n        server: '{{ .server }}'\n        namespace: guestbook\n  templatePatch: |\n    spec:\n      source:\n        helm:\n          valueFiles:\n          {{- range $valueFile := .valueFiles }}\n            - {{ $valueFile }}\n          {{- end }}\n    {{- if .autoSync }}\n      syncPolicy:\n        automated:\n          prune: {{ .prune }}\n    {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Argo CD CLI Commands\nDESCRIPTION: Details the common command-line options inherited from parent Argo CD commands. These flags control aspects like server connection (`--server`, `--insecure`, `--plaintext`), authentication (`--auth-token`), Kubernetes context (`--kube-context`), configuration file path (`--config`), logging (`--loglevel`, `--logformat`), and interaction with specific Argo CD components.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-policy.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Trigger in ConfigMap (YAML)\nDESCRIPTION: This YAML snippet demonstrates the configuration of a trigger within an `argocd-notifications-cm` ConfigMap. It defines a trigger condition based on the application's sync status.  Dependencies include `antonmedv/expr` for condition evaluation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  trigger.on-sync-status-unknown: |\n    - when: app.status.sync.status == 'Unknown'     # trigger condition\n      send: [app-sync-status, github-commit-status] # template names\n```\n```\n\n----------------------------------------\n\nTITLE: Configure RBAC for ArgoCD using kubectl\nDESCRIPTION: This snippet configures Role-Based Access Control (RBAC) for ArgoCD by editing the `argocd-rbac-cm` configmap. It defines policies that grant permissions based on group membership obtained from Auth0. It allows members of `someProjectGroup` to manage applications within the `someProject` namespace. It maps members of the `argocd-global-admins` group from Auth0 to the `role:admin` role in ArgoCD. The `scopes` section is essential for ArgoCD to use groups for RBAC and specifies which claims to use for group membership and email addresses. Replace placeholders like `someProjectGroup`, `someProject/*`, `argocd-global-admins` and `http://your.domain/groups` with your actual configuration values.  This configuration ensures that users authenticated via Auth0 are granted appropriate permissions within ArgoCD based on their group memberships.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/auth0.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndata:\n  policy.csv: |\n    # let members with group someProjectGroup handle apps in someProject\n    # this can also be defined in the UI in the group-definition to avoid doing it there in the configmap\n    p, someProjectGroup, applications, *, someProject/*, allow\n    # let the group membership argocd-admins from OIDC become role:admin - needs to go into the configmap\n    g, argocd-global-admins, role:admin\n  policy.default: role:readonly\n  # essential to get argo to use groups for RBAC:\n  scopes: '[http://your.domain/groups, email]' \n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Role Trust Policy for EKS - JSON\nDESCRIPTION: Establishes a trust policy on the cluster IAM role to allow the Argo CD management IAM role to assume it. This JSON is attached to the IAM cluster role and is an essential prerequisite for Argo CD to authenticate against the EKS API. Adjust AWS account and role variables as required.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ARGO_CD_MANAGEMENT_IAM_ROLE_NAME>\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Options for allow-namespace-resource (Argo CD CLI, Bash)\nDESCRIPTION: This block enumerates command-line flags inherited from parent commands in the Argo CD CLI, such as authentication, context selection, output formatting, and connection options. Prerequisites are a working Argo CD CLI environment and understanding of Argo CD server topology. These options affect CLI behavior regarding which server, context, or authentication method is used.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_allow-namespace-resource.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings              Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Project Role Definition YAML\nDESCRIPTION: This YAML snippet defines a project role within an Argo CD project. It includes a name, description, associated groups, and policies that define the role's permissions. This is essential for implementing RBAC within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: sample-test-project\nspec:\n  ...\n  roles:\n  - name: custom-project-role\n    description: The \"custom-project-role\" will be applied to the `some-user` group.\n    groups:\n    - some-user\n    policies:\n    - p, proj:sample-test-project:custom-project-role, applications, *, *, allow\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting ApplicationSet Sync Policy to Create-Only (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the ApplicationSet's `syncPolicy` to `create-only`. This prevents the ApplicationSet controller from modifying or deleting Applications after creation.  It requires the `argoproj.io/v1alpha1` API version and the `ApplicationSet` kind.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-only\n```\n\n----------------------------------------\n\nTITLE: Mounting Argo CD CMP Configuration via ConfigMap\nDESCRIPTION: This Kubernetes ConfigMap resource demonstrates how to package the `ConfigManagementPlugin` YAML definition. The plugin configuration is stored under a key (e.g., `pluginName.yaml`) within the `data` field. This ConfigMap can then be mounted as a volume into the CMP sidecar container, making the plugin configuration accessible at runtime.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: pluginName\n  namespace: argocd\ndata:\n  pluginName.yaml: |\n    apiVersion: argoproj.io/v1alpha1\n    kind: ConfigManagementPlugin\n    metadata:\n      name: pluginName\n    spec:\n      init:                          # Optional command to initialize application source directory\n        command: [\"sample command\"]\n        args: [\"sample args\"]\n      generate:                      # Command to generate Kubernetes Objects in either YAML or JSON\n        command: [\"sample command\"]\n        args: [\"sample args\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace with Custom Metadata in Argo CD\nDESCRIPTION: Configure an application to create a namespace with custom labels and annotations. Requires CreateNamespace=true sync option to be set.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: test\nspec:\n  syncPolicy:\n    managedNamespaceMetadata:\n      labels: # The labels to set on the application namespace\n        any: label\n        you: like\n      annotations: # The annotations to set on the application namespace\n        the: same\n        applies: for\n        annotations: on-the-namespace\n    syncOptions:\n    - CreateNamespace=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Prune Before Synchronization in YAML\nDESCRIPTION: Sets the 'prune' flag to true within 'sync' to enable resource pruning prior to applying new configurations, ensuring obsolete resources are removed. Essential for clean synchronization cycles.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  sync:\n    prune: true\n```\n\n----------------------------------------\n\nTITLE: Export Argo CD Data to Backup - Bash\nDESCRIPTION: This snippet uses a Docker container to run the `argocd admin export` command to export all Argo CD data to a `backup.yaml` file. It mounts the `~/.kube` directory to provide access to the Kubernetes cluster. Requires Docker and `argocd` CLI in the container.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/disaster_recovery.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v ~/.kube:/home/argocd/.kube --rm quay.io/argoproj/argocd:$VERSION argocd admin export > backup.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Webex Token Secret in Kubernetes\nDESCRIPTION: Creates a Kubernetes Secret to securely store the Webex bot access token, which is required for authentication with the Webex Teams API. The secret's 'webex-token' key holds the token value.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webex.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  webex-token: <bot access token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD CLI inherited command options\nDESCRIPTION: This snippet shows all available command line options that can be inherited from parent commands when using the Argo CD CLI. These options control authentication, connection settings, component naming, and logging behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_app_generate-spec.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Managing Argo CD repository connections using the CLI - Bash\nDESCRIPTION: This snippet demonstrates example shell commands for managing git repository connections via the 'argocd repo' CLI command. It shows how to add a git repository, retrieve configuration by URL, list all configured repositories, and remove repository credentials. These commands require a configured Argo CD CLI environment with access to the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo add git@git.example.com:repos/repo\nargocd repo get https://github.com/yourusername/your-repo.git\nargocd repo list\nargocd repo rm https://github.com/yourusername/your-repo.git\n```\n\n----------------------------------------\n\nTITLE: Example JWT Token Usage CLI\nDESCRIPTION: This bash snippet provides an example of using JWT tokens to access an application in Argo CD. It demonstrates creating a role, generating a token, adding a policy to the role, and then using the token to access the application. It showcases a typical RBAC workflow using JWT tokens.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nPROJ=myproject\nAPP=guestbook-default\nROLE=get-role\nargocd proj role create $PROJ $ROLE\nargocd proj role create-token $PROJ $ROLE -e 10m\nJWT=<value from command above>\nargocd proj role list $PROJ\nargocd proj role get $PROJ $ROLE\n\n# This command will fail because the JWT Token associated with the project role does not have a policy to allow access to the application\nargocd app get $APP --auth-token $JWT\n# Adding a policy to grant access to the application for the new role\nargocd proj role add-policy $PROJ $ROLE --action get --permission allow --object $APP\nargocd app get $APP --auth-token $JWT\n\n# Removing the policy we added and adding one with a wildcard.\nargocd proj role remove-policy $PROJ $ROLE -a get -o $APP\nargocd proj role add-policy $PROJ $ROLE -a get --permission allow -o '*'\n# The wildcard allows us to access the application due to the wildcard.\nargocd app get $APP --auth-token $JWT\nargocd proj role get $PROJ $ROLE\n\n\nargocd proj role get $PROJ $ROLE\n# Revoking the JWT token\nargocd proj role delete-token $PROJ $ROLE <id field from the last command>\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands in ArgoCD CLI\nDESCRIPTION: Lists all the options inherited from parent commands that can be used with the add-source command. These include authentication, connection, and configuration options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-source.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Application Metadata with Notification Subscriptions Annotations\nDESCRIPTION: This snippet includes annotations within an Application resource for subscribing to notification channels upon specific events like on-sync-succeeded. Each annotation specifies the subscription channel name for corresponding workspace or service instance, enabling targeted notifications per environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/overview.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.workspace1: my-channel\n    notifications.argoproj.io/subscribe.on-sync-succeeded.workspace2: my-channel\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Resource Custom Actions (CSV)\nDESCRIPTION: This snippet allows a user to perform any action on DaemonSet resources and a specific `maintenance-off` action on Pod resources. It demonstrates using the `action` resource type to control access to custom actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, action//Pod/maintenance-off, default/*, allow\np, example-user, applications, action/extensions/DaemonSet/*, default/*, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Discovery with ApplicationSet\nDESCRIPTION: Shows an example YAML configuration to enable discovery of all clusters within Argo CD using the 'clusters' generator with an empty configuration. This allows ApplicationSets to automatically include all available clusters, facilitating broad resource management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  generators:\n  - clusters: {} # Automatically use all clusters defined within Argo CD\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Manifest with Envsubst - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an Argo CD Application manifest to use environment variable substitution for annotations. It sets the `commonAnnotationsEnvsubst` to `true` within the `kustomize` section and utilizes the `${ARGOCD_APP_NAME}` environment variable to set the `app-source` annotation to the application's name.  No dependencies are required, and the manifest applies to the Argo CD controller. The output is an application with the specified annotation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook-app\n  namespace: argocd\nspec:\n  project: default\n  destination:\n    namespace: demo\n    server: https://kubernetes.default.svc\n  source:\n    path: kustomize-guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps\n    targetRevision: HEAD\n    kustomize:\n      commonAnnotationsEnvsubst: true\n      commonAnnotations:\n        app-source: ${ARGOCD_APP_NAME}\n  syncPolicy:\n    syncOptions:\n      - CreateNamespace=true\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Gmail SMTP Service in Argo CD\nDESCRIPTION: This snippet demonstrates how to configure Argo CD notifications to use Gmail's SMTP service with authentication. It includes server settings, port configuration, and credential placeholders.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/email.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.email.gmail: |\n    username: $email-username\n    password: $email-password\n    host: smtp.gmail.com\n    port: 465\n    from: $email-username\n```\n\n----------------------------------------\n\nTITLE: Example ApplicationSet Resource using Git Generator\nDESCRIPTION: This YAML snippet demonstrates an example ApplicationSet resource utilizing the Git generator. It specifies the repository URL, revision, and file path for the configuration files. The `template` section defines how generated parameters are used to deploy applications to different clusters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      files:\n      - path: \"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\"\n  template:\n    metadata:\n      name: '{{.cluster.name}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: \"applicationset/examples/git-generator-files-discovery/apps/guestbook\"\n      destination:\n        server: '{{.cluster.address}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Testing a Plugin with cURL\nDESCRIPTION: Example cURL command for testing the plugin's getparams.execute endpoint. It demonstrates how to send a request with proper authentication and input parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:4355/api/v1/getparams.execute -H \"Authorization: Bearer strong-password\" -d \\\n'{\n  \"applicationSetName\": \"fake-appset\",\n  \"input\": {\n    \"parameters\": {\n      \"param1\": \"value1\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configure ArgoCD ConfigMap for OneLogin OIDC\nDESCRIPTION: This YAML snippet configures the ArgoCD ConfigMap (argocd-cm) to integrate with OneLogin as an OIDC provider.  It specifies the OIDC issuer URL, client ID, and client secret obtained from the OneLogin application's SSO tab.  It also defines the requested scopes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/onelogin.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  url: https://<argocd.myproject.com>\n  oidc.config: |\n    name: OneLogin\n    issuer: https://<subdomain>.onelogin.com/oidc/2\n    clientID: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaaaaaaa\n    clientSecret: abcdef123456\n\n    # Optional set of OIDC scopes to request. If omitted, defaults to: [\"openid\", \"profile\", \"email\", \"groups\"]\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\n----------------------------------------\n\nTITLE: Example of Specifying Service Account in a Different Namespace in AppProject Using YAML\nDESCRIPTION: This YAML snippet demonstrates an AppProject configuration for setting a service account located in a different namespace than the Application's destination namespace, by specifying the namespace and service account in the format <namespace>:<service_account_name>. It allows ArgoCD to impersonate a service account outside the application deployment namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  destinationServiceAccounts:\n    - server: https://kubernetes.default.svc\n      namespace: '*'\n      defaultServiceAccount: mynamespace:guestbook-deployer\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining an ApplicationSet with List Generator in Argo CD (YAML)\nDESCRIPTION: This YAML snippet defines an Argo CD ApplicationSet Custom Resource that leverages the List generator to target multiple clusters. Each cluster entry specifies a name and URL, which are passed as template parameters to create individual Argo CD Applications. Dependencies include an operational Argo CD deployment with access to the ApplicationSet controller and appropriate cluster credentials. Required fields are 'generators' (defining target clusters), and 'template' (defining per-application resources). Inputs are cluster names and URLs; outputs are automatically generated Applications per cluster. The generator and templating mechanisms require accuracy in field names and template syntax.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/application-set.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Defining an ApplicationSet with a Merge Generator (YAML)\nDESCRIPTION: This YAML defines an Argo CD `ApplicationSet` named `cluster-git`. It uses a `merge` generator to combine parameters from three child generators: a base `clusters` generator, an overriding `clusters` generator (filtering by label `use-kafka: 'false'`), and a `list` generator targeting a specific server. The `mergeKeys` field specifies that generators should be merged based on the `server` value. The resulting parameters are used in the `template` section to configure Helm parameters (`kafka`, `redis`) and the destination server for generated applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # merge 'parent' generator\n    - merge:\n        mergeKeys:\n          - server\n        generators:\n          - clusters:\n              values:\n                kafka: 'true'\n                redis: 'false'\n          # For clusters with a specific label, enable Kafka.\n          - clusters:\n              selector:\n                matchLabels:\n                  use-kafka: 'false'\n              values:\n                kafka: 'false'\n          # For a specific cluster, enable Redis.\n          - list:\n              elements: \n                - server: https://2.4.6.8\n                  values.redis: 'true'\n  template:\n    metadata:\n      name: '{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: app\n        helm:\n          parameters:\n            - name: kafka\n              value: '{{.values.kafka}}'\n            - name: redis\n              value: '{{.values.redis}}'\n      destination:\n        server: '{{.server}}'\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy Deny Application Delete, Allow Pod Delete (CSV)\nDESCRIPTION: This snippet demonstrates how to explicitly deny deletion of the application itself but allow deletion of its Pods. It combines `deny` and `allow` effects for different levels of the application resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, delete, default/prod-app, deny\np, example-user, applications, delete/*/Pod/*/*, default/prod-app, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Azure Groups in Argo CD - YAML\nDESCRIPTION: This YAML ConfigMap configures RBAC policies for Argo CD, mapping Azure AD (Entra ID) group IDs to Argo CD roles, and defining permissions. The snippet sets a default readonly role and provides fine-grained policies granting an org-admin role access to various resources. Additionally, it enables group/role mapping via the scopes key for claims passed in the OIDC token. Inputs: Azure AD group IDs, desired role names. Output: role assignment and permissions for Argo CD users. Dependencies: previously configured OIDC provider and group claim mapping. The 'scopes' parameter specifies which JWT claims are used for role mapping.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nConfigMap -> argocd-rbac-cm\n\npolicy.default: role:readonly\npolicy.csv: |\n   p, role:org-admin, applications, *, */*, allow\n   p, role:org-admin, clusters, get, *, allow\n   p, role:org-admin, repositories, get, *, allow\n   p, role:org-admin, repositories, create, *, allow\n   p, role:org-admin, repositories, update, *, allow\n   p, role:org-admin, repositories, delete, *, allow\n   g, \"84ce98d1-e359-4f3b-85af-985b458de3c6\", role:org-admin\n```\n\n----------------------------------------\n\nTITLE: Creating an Argo CD ApplicationSet from a YAML File\nDESCRIPTION: This shell command uses the Argo CD CLI to create an ApplicationSet resource based on the definition provided in the 'cluster-addons.yaml' file. This is the standard method for applying ApplicationSet configurations defined in YAML.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n# Create the above ApplicationSet\nargocd appset create cluster-addons.yaml\n```\n\n----------------------------------------\n\nTITLE: Custom Health Check for cert-manager.io/Certificate using Lua in ConfigMap - YAML\nDESCRIPTION: This YAML snippet defines a custom Lua health check for the cert-manager.io/Certificate CRD, to be placed in the resource.customizations.health.cert-manager.io_Certificate field of argocd-cm. The Lua script iterates over the conditions in the object's status, setting the resource as Healthy or Degraded based on the 'Ready' condition; if neither is met, it defaults to Progressing. Dependencies include cert-manager CRDs and Argo CD's Lua customization support. This enables fine-grained health assessment for custom resources, returning status and optionally a message field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n  resource.customizations.health.cert-manager.io_Certificate: |\n    hs = {}\n    if obj.status ~= nil then\n      if obj.status.conditions ~= nil then\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"Ready\" and condition.status == \"False\" then\n            hs.status = \"Degraded\"\n            hs.message = condition.message\n            return hs\n          end\n          if condition.type == \"Ready\" and condition.status == \"True\" then\n            hs.status = \"Healthy\"\n            hs.message = condition.message\n            return hs\n          end\n        end\n      end\n    end\n\n    hs.status = \"Progressing\"\n    hs.message = \"Waiting for certificate\"\n    return hs\n```\n\n----------------------------------------\n\nTITLE: AppProject for Team Two - YAML\nDESCRIPTION: Defines an AppProject named `team-two-project` which restricts applications to be sourced from the `team-two-cd` namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: team-two-project\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - team-two-cd\n```\n\n----------------------------------------\n\nTITLE: Example ConfigMap Entry for Storing GnuPG Public Key in YAML\nDESCRIPTION: Shows how to store a GnuPG public key in ArgoCD's internal ConfigMap `argocd-gpg-keys-cm`. The key ID serves as the entry key with the ASCII armored public key block as the multi-line string value. This entry enables ArgoCD to verify commit signatures made by this public key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n4AEE18F83AFDEB23: |\n    -----BEGIN PGP PUBLIC KEY BLOCK-----\n\n    mQENBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta\n    x15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT\n    SQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ\n    7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa\n    buXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v\n    yWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAG0NUdpdEh1YiAod2ViLWZs\n    b3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+iQEiBBMBCAAW\n    BQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEH/iATWFmi2oxlBh3wAsySNCNV4IPf\n    DDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6\n    9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws\n    +8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5\n    4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O\n    j7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48=\n    =Bvzs\n    -----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Example argocd-secret with webhook secrets (YAML)\nDESCRIPTION: This YAML snippet is an example of the format for including webhook secrets in the `argocd-secret`. The example shows how to add GitHub and GitLab secrets, ensuring the `stringData` field is used for easier secret input.  It's vital to restart the ApplicationSet pod after modifying the secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\ntype: Opaque\ndata:\n...\n\nstringData:\n  # github webhook secret\n  webhook.github.secret: shhhh! it's a github secret\n\n  # gitlab webhook secret\n  webhook.gitlab.secret: shhhh! it's a gitlab secret\n```\n\n----------------------------------------\n\nTITLE: Exposing Argo CD Application Conditions as Prometheus Metrics Using YAML\nDESCRIPTION: This snippet illustrates enabling exposure of specific Argo CD Application conditions as Prometheus metrics via the `--metrics-application-conditions` flags in the argocd-application-controller container command. The example enables conditions `OrphanedResourceWarning` and `ExcludedResourceWarning`, facilitating resource state monitoring for detecting orphaned or excluded Kubernetes resources managed by Argo CD. This requires container configuration and is disabled by default to avoid unnecessary metric cardinality.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- command:\n  - argocd-application-controller\n  - --metrics-application-conditions\n  - OrphanedResourceWarning\n  - --metrics-application-conditions\n  - ExcludedResourceWarning\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Spec Example\nDESCRIPTION: This code snippet provides an example of an ApplicationSet spec configured with a RollingUpdate strategy. It demonstrates how to define steps using match expressions to control the update order and throttle updates with maxUpdate. The example also shows how to use labels to target specific applications and pull data from the argo cluster secrets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/2022-07-13-appset-progressive-rollout-strategy.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n        env: dev\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n        env: prod\n      - cluster: engineering-qa\n        url: https://9.8.7.6/\n        env: qa\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      steps:\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - dev\n          maxUpdate: 0 # if undefined or 0, all applications matched are updated together\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - qa\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - us-east-2\n                - eu-west-1\n                - ap-southeast-1\n          maxUpdate: 1 # maxUpdate supports both integer and percentage string values\n  template:\n    metadata:\n      name: '{{cluster}}-guestbook'\n      labels:\n        env: \"{{env}}\"                                # label can be provided explicitly from a list generator\n        region: \"{{metadata.labels.cluster/region}}\"  # or pulled from labels on the argo cluster secrets\n    spec:\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{cluster}}\n      destination:\n        server: '{{url}}'\n        namespace: guestbook\n```\n```\n\n----------------------------------------\n\nTITLE: Available Flags for the argocd Command\nDESCRIPTION: Lists the global command-line flags available for the `argocd` command. These flags configure options such as server connection details (address, TLS, certificates), authentication (token), context switching (Argo CD context, kube context), logging levels, and direct Kubernetes interaction.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n  -h, --help                            help for argocd\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Argo CD Login Command Examples\nDESCRIPTION: Examples demonstrating different authentication methods: username/password authentication, SSO-based login, and direct access configuration using Kubernetes API server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_login.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Login to Argo CD using a username and password\nargocd login cd.argoproj.io\n\n# Login to Argo CD using SSO\nargocd login cd.argoproj.io --sso\n\n# Configure direct access using Kubernetes API server\nargocd login cd.argoproj.io --core\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-applicationset-controller ServiceMonitor in YAML\nDESCRIPTION: This YAML defines a ServiceMonitor for collecting metrics from the Argo CD ApplicationSet controller. It uses label selectors to match the controller. The `endpoints` section directs Prometheus to the metrics port. It requires Prometheus Operator and a running ApplicationSet controller.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-applicationset-controller-metrics\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-applicationset-controller\n  endpoints:\n  - port: metrics\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Project Parameters with Allowed Cluster Resources - CLI\nDESCRIPTION: This command sets project parameters and specifies allowed cluster resources for an Argo CD project. The `--allow-cluster-resource` flag takes a comma-separated list of resource names. The project name is specified as the first argument.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_set.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj set PROJECT --allow-cluster-resource [RES1,RES2,...]\n```\n\n----------------------------------------\n\nTITLE: Adding Project Destination Service Account in Argo CD CLI\nDESCRIPTION: This command adds a service account to a project's destination.  It takes the project name, server URL, namespace, and service account name as parameters.  The `--service-account-namespace` flag allows specifying a different namespace for the service account. This enables Argo CD to manage deployments in the designated namespace using the given service account.  It requires the Argo CD CLI and access to a running Argo CD instance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-destination-service-account.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj add-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Syntax for Deleting Applications using 'argocd app delete' in Bash\nDESCRIPTION: Defines the basic command structure to delete one or multiple applications, optionally using labels to specify target applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_delete.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app delete APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting Clusters by Kubernetes Version Label in Argo CD ApplicationSet YAML\nDESCRIPTION: This YAML example demonstrates filtering clusters based on their Kubernetes version by selecting Secrets labeled with 'argocd.argoproj.io/kubernetes-version'. The cluster secret must have the label 'argocd.argoproj.io/auto-label-cluster-info' set to 'true' for the controller to dynamically add version labels. The example filters for version '1.28', and the commented 'matchExpressions' illustrate more flexible version selection. This facilitates targeting clusters for application deployment based on their Kubernetes versions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  goTemplate: true\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          argocd.argoproj.io/kubernetes-version: 1.28\n        # matchExpressions are also supported.\n        #matchExpressions:\n        #  - key: argocd.argoproj.io/kubernetes-version\n        #    operator: In\n        #    values:\n        #      - \"1.27\"\n        #      - \"1.28\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Windows in AppProject Manifest (YAML)\nDESCRIPTION: Provides an example of defining multiple Sync Windows directly within an Argo CD `AppProject` Custom Resource definition under the `spec.syncWindows` field. It showcases different configurations including 'allow' and 'deny' kinds, cron schedules, durations, time zones, manual sync override (`manualSync: true`), and targeting applications by name (`*-prod`), namespace (`default`), or cluster (`in-cluster`, `cluster1`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: default\nspec:\n  syncWindows:\n  - kind: allow\n    schedule: '10 1 * * *'\n    duration: 1h\n    applications:\n    - '*-prod'\n    manualSync: true\n  - kind: deny\n    schedule: '0 22 * * *'\n    timeZone: \"Europe/Amsterdam\"\n    duration: 1h\n    namespaces:\n    - default\n  - kind: allow\n    schedule: '0 23 * * *'\n    duration: 1h\n    clusters:\n    - in-cluster\n    - cluster1\n```\n\n----------------------------------------\n\nTITLE: Replacing Resources Instead of Applying via Application Spec (YAML)\nDESCRIPTION: Sets the `Replace=true` sync option in the `spec.syncPolicy.syncOptions` of an Application manifest. This instructs Argo CD to use `kubectl replace` or `kubectl create` instead of the default `kubectl apply` for all resources managed by the Application. This can avoid issues with large resource specs exceeding annotation size limits but is potentially destructive and may cause downtime.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - Replace=true\n```\n\n----------------------------------------\n\nTITLE: ConfigMap for Plugin Configuration\nDESCRIPTION: This YAML snippet defines a ConfigMap that encapsulates the plugin configuration file (plugin.yaml). This approach allows for managing the plugin configuration separately from the sidecar image and enables configuration updates without image rebuilding. The plugin configuration file is stored under the plugin.yaml key, and then mounted into the sidecar.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-plugin-config\ndata:\n  plugin.yaml: |\n    apiVersion: argoproj.io/v1alpha1\n    kind: ConfigManagementPlugin\n    metadata:\n      name: my-plugin\n    spec:\n      version: v1.0\n      init:\n        command: [sh, -c, 'echo \"Initializing...\"']\n      generate:\n        command: [sh, -c, 'echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"']\n      discover:\n        fileName: \"./subdir/s*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Argo CD Application with Inline Kustomize Patches\nDESCRIPTION: This YAML snippet showcases how to define an Argo CD application with inline Kustomize patches. It configures the `source` to point to a Git repository and path, sets `destination` and `project`, and includes a `kustomize.patches` section. This section targets a specific Deployment and modifies the container port. This method allows for applying patches directly within the application definition.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kustomize-inline-guestbook\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: test1\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: kustomize-guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: master\n    kustomize:\n      patches:\n        - target:\n            kind: Deployment\n            name: guestbook-ui\n          patch: |-\n            - op: replace\n              path: /spec/template/spec/containers/0/ports/0/containerPort\n              value: 443\n```\n\n----------------------------------------\n\nTITLE: Updating Sync Window Targeting Criteria (Bash)\nDESCRIPTION: Explains how to modify an existing Sync Window (identified by PROJECT and ID) using the `argocd proj windows update` command. This specific example updates the target namespaces for the window. It's crucial to provide the *complete* desired list of namespaces (e.g., `default,kube-system,prod1`), including any pre-existing ones you wish to keep, as the command overwrites the field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows update PROJECT ID --namespaces default,kube-system,prod1\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Fields in argoproj.io/Application Resources - YAML\nDESCRIPTION: This example configures Argo CD to ignore changes to ownerReferences and reconciledAt fields, as well as the lastTransitionTime within conditions, for the Application resource type. These fields often cause unnecessary reconciles when updated frequently without meaningful changes. This customization uses both jsonPointers and jqPathExpressions under resource.customizations.ignoreResourceUpdates.argoproj.io_Application in the argocd-cm ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |\n    jsonPointers:\n    # Ignore when ownerReferences change, for example when a parent ApplicationSet changes often.\n    - /metadata/ownerReferences\n    # Ignore reconciledAt, since by itself it doesn't indicate any important change.\n    - /status/reconciledAt\n    jqPathExpressions:\n    # Ignore lastTransitionTime for conditions; helpful when SharedResourceWarnings are being regularly updated but not\n    # actually changing in content.\n    - .status?.conditions[]?.lastTransitionTime\n```\n\n----------------------------------------\n\nTITLE: Running argocd-server with Default Settings in Bash\nDESCRIPTION: Basic command to start the Argo CD API server using default configuration settings. The server exposes gRPC/REST APIs used by the Web UI, CLI, and CI/CD systems.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd-server [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Values in Argo CD ApplicationSet with Go Templates\nDESCRIPTION: This example demonstrates an ApplicationSet that uses Go templates with the 'dig' function to provide a fallback value for an optional 'nameSuffix' parameter. It includes error handling for missing keys and generates Applications with properly formatted names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://kubernetes.default.svc\n      - cluster: engineering-prod\n        url: https://kubernetes.default.svc\n        nameSuffix: -my-name-suffix\n  template:\n    metadata:\n      name: '{{.cluster}}{{dig \"nameSuffix\" \"\" .}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: applicationset/examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Generating ArgoCD Account Token for Specific Account\nDESCRIPTION: This example shows how to generate a token for a specific ArgoCD account. The `--account` flag is used to specify the account name for which to generate the token.  The token will be generated for the specified account.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_generate-token.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd account generate-token --account <account-name>\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Resource with Git Generator and Template Restrictions - YAML\nDESCRIPTION: This YAML snippet defines an Argo CD ApplicationSet resource that uses a Git generator to discover JSON configuration files specifying applications. It enables templated generation of Argo CD Applications with controlled fields. Key fields restricted by the template include the project, cluster name, and namespace to enforce security boundaries, while other fields, such as repository URL, revision, and path, are dynamically interpolated from the JSON metadata files. The snippet uses Go templating with 'missingkey=error' to ensure required data is present.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Use-Cases.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ApplicationSet\n# (...)\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      files:\n      - path: \"apps/**/config.json\"\n  template:\n    spec:\n      project: dev-team-one # project is restricted\n      source:\n        # developers may customize app details using JSON files from above repo URL\n        repoURL: {{.app.source}}\n        targetRevision: {{.app.revision}}\n        path: {{.app.path}}\n      destination:\n        name: production-cluster # cluster is restricted\n        namespace: dev-team-one # namespace is restricted\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail on Shared Resource in Argo CD\nDESCRIPTION: Configure an application to fail during sync if it finds resources that are already managed by another Argo CD application in the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - FailOnSharedResource=true\n```\n\n----------------------------------------\n\nTITLE: Custom Action Example in YAML\nDESCRIPTION: This YAML snippet presents a complete example of a custom action that creates a new ConfigMap, patches the original ConfigMap and sets labels and annotations, using Lua to modify resources. It creates a new ConfigMap with `create` operation and patches original with `patch` operation.  It also includes the application's tracking label,  sets the prune false annotation to prevent deletion, and the ignore extraneous annotation to mark the app as synced.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/resource_actions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nresource.customizations.actions.ConfigMap: |\n  discovery.lua: |\n    actions = {}\n    actions[\"do-things\"] = {}\n    return actions\n  definitions:\n  - name: do-things\n    action.lua: |\n      -- Create a new ConfigMap\n      cm1 = {}\n      cm1.apiVersion = \"v1\"\n      cm1.kind = \"ConfigMap\"\n      cm1.metadata = {}\n      cm1.metadata.name = \"cm1\"\n      cm1.metadata.namespace = obj.metadata.namespace\n      cm1.metadata.labels = {}\n      -- Copy ArgoCD tracking label so that the resource is recognized by the App\n      cm1.metadata.labels[\"app.kubernetes.io/instance\"] = obj.metadata.labels[\"app.kubernetes.io/instance\"]\n      cm1.metadata.annotations = {}\n      -- For Apps with auto-prune, set the prune false on the resource, so it does not get deleted\n      cm1.metadata.annotations[\"argocd.argoproj.io/sync-options\"] = \"Prune=false\"\t  \n      -- Keep the App synced even though it has a resource that is not in Git\n      cm1.metadata.annotations[\"argocd.argoproj.io/compare-options\"] = \"IgnoreExtraneous\"\t\t  \n      cm1.data = {}\n      cm1.data.myKey1 = \"myValue1\"\n      impactedResource1 = {}\n      impactedResource1.operation = \"create\"\n      impactedResource1.resource = cm1\n\n      -- Patch the original cm\n      obj.metadata.labels[\"aKey\"] = \"aValue\"\n      impactedResource2 = {}\n      impactedResource2.operation = \"patch\"\n      impactedResource2.resource = obj\n\n      result = {}\n      result[1] = impactedResource1\n      result[2] = impactedResource2\n      return result\t\t  \n```\n\n----------------------------------------\n\nTITLE: Creating MultiSource App with argocd app create\nDESCRIPTION: This example illustrates creating a multi-source application by passing a YAML file using the `--file` flag to `argocd app create`. The YAML file is expected to contain an Application resource with multiple sources.  This requires that the YAML file is formatted correctly with the proper Argo CD application spec format. Requires the Argo CD CLI to be configured and have access to a Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a MultiSource app while yaml file contains an application with multiple sources\n  argocd app create guestbook --file <path-to-yaml-file>\n```\n\n----------------------------------------\n\nTITLE: Example: Removing a Service Account from a Specific Destination - Shell\nDESCRIPTION: This is a practical example of using the 'argocd proj remove-destination-service-account' command to remove a specified service account from an Argo CD project for a given server and namespace. PROJECT is the project name, SERVER is the destination Kubernetes server, NAMESPACE is the Kubernetes namespace, and SERVICE_ACCOUNT is the service account to remove. This command must be run in an environment where the Argo CD CLI is configured and connected to the appropriate Argo CD instance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-destination-service-account.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj remove-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT\n```\n\n----------------------------------------\n\nTITLE: Configuring Duck-Typing for Cluster Decision Resource (YAML)\nDESCRIPTION: Defines a Kubernetes ConfigMap (`my-configmap`) required by the `clusterDecisionResource` generator for duck-typing. It specifies the `apiVersion` (`mallard.io/v1beta1`) and `kind` (`ducks`) of the target custom resource, the key within the resource's status field containing the list of cluster decisions (`statusListKey: decisions`), and the key within each list item that holds the actual cluster name recognized by Argo CD (`matchKey: clusterName`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster-Decision-Resource.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\ndata:\n  # apiVersion of the target resource\n  apiVersion: mallard.io/v1beta1  \n  # kind of the target resource\n  kind: ducks\n  # status key name that holds the list of Argo CD clusters\n  statusListKey: decisions\n  # The key in the status list whose value is the cluster name found in Argo CD\n  matchKey: clusterName\n```\n\n----------------------------------------\n\nTITLE: Ignoring Differences in Child Applications (YAML)\nDESCRIPTION: YAML configuration within an Argo CD Application `spec` to ignore specific differences in managed resources, particularly useful in the App of Apps pattern. This example uses `ignoreDifferences` with `jsonPointers` to ignore changes in child applications' `spec/syncPolicy/automated` field and certain metadata annotations, preventing them from showing as 'OutOfSync'. Requires `RespectIgnoreDifferences=true` in `syncOptions`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ...\n  syncPolicy:\n    ...\n    syncOptions:\n      - RespectIgnoreDifferences=true\n    ...\n  ignoreDifferences:\n    - group: \"*\"\n      kind: \"Application\"\n      namespace: \"*\"\n      jsonPointers:\n        # Allow manually disabling auto sync for apps, useful for debugging.\n        - /spec/syncPolicy/automated\n        # These are automatically updated on a regular basis. Not ignoring last applied configuration since it's used for computing diffs after normalization.\n        - /metadata/annotations/argocd.argoproj.io~1refresh\n        - /operation\n  ...\n```\n\n----------------------------------------\n\nTITLE: Listing Sync Windows for a Project (Bash)\nDESCRIPTION: Demonstrates using the `argocd proj windows list` command to view all configured Sync Windows for a specific Argo CD project (PROJECT). The example output shows the tabular format, including window ID, current status (Active/Inactive), kind (allow/deny), schedule, duration, target criteria (Applications, Namespaces, Clusters), and manual sync override status.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows list PROJECT\n```\n\nLANGUAGE: text\nCODE:\n```\nID  STATUS    KIND   SCHEDULE    DURATION  APPLICATIONS  NAMESPACES  CLUSTERS  MANUALSYNC\n0   Active    allow  * * * * *   1h        -             -           prod1     Disabled\n1   Inactive  deny   * * * * 1   3h        -             default     -         Disabled\n2   Inactive  allow  1 2 * * *   1h        prod-*        -           -         Enabled\n3   Active    deny   * * * * *   1h        -             default     -         Disabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync Waves in Argo CD using YAML\nDESCRIPTION: This code snippet shows how to configure a sync wave for a resource in Argo CD using a YAML annotation. The `argocd.argoproj.io/sync-wave: \"5\"` annotation specifies the wave number to which the resource belongs. Resources within the same wave are processed together, and waves are processed in numerical order (lower values first for creation/update, higher values for deletion).  This allows for controlled rollout of resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-waves.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-wave: \"5\"\n```\n\n----------------------------------------\n\nTITLE: Adding Private Git Repository via HTTPS with Username/Password and TLS Client Certificates - Argo CD CLI Shell Example\nDESCRIPTION: This command registers a private Git repository via HTTPS using username/password authentication and client-side TLS certificates for enhanced security. Dependencies include argocd CLI, repository access with the specified credentials, and PEM-formatted TLS cert/key files. Key parameters are '--username', '--password', '--tls-client-cert-path', and '--tls-client-cert-key-path'. Outputs a secured repository configuration in Argo CD, with input being repository URL, credentials, and certificate paths.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n```\n\n----------------------------------------\n\nTITLE: Subscribing Argo Rollout to PagerDuty Notifications Annotation\nDESCRIPTION: Demonstrates how to use annotations on an Argo Rollout resource to subscribe it to specific notification events, in this case, `on-rollout-aborted` via the PagerDuty service. The annotation value specifies the PagerDuty service ID associated with the notification. Depends on an Argo Rollout resource and the configured notification service.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-rollout-aborted.pagerduty: \"<serviceID for PagerDuty>\"\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Local User (Alternative) - YAML\nDESCRIPTION: This is an alternative to role assignment. It is best practice for local users. This assigns all permissions to a local user directly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\np, my-local-user, *, *, *, allow\n```\n\n----------------------------------------\n\nTITLE: Setting Helm Version Declaratively in Argo CD Application (YAML)\nDESCRIPTION: Configures an Argo CD Application manifest (`spec.source.helm.version`) to explicitly define the Helm version (v3) to be used for processing the associated Helm chart. This ensures consistent templating behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    helm:\n      version: v3\n```\n\n----------------------------------------\n\nTITLE: Adding Repository Credentials with CLI\nDESCRIPTION: This command adds credentials to connect to a Git repository. It accepts the repository URL as a required argument, along with various options for authentication, such as username/password, bearer tokens, SSH keys, and GitHub App configurations.  The command updates the Argo CD configuration to allow it to securely access and manage the specified repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nargocd repocreds add REPOURL [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Reconcile - YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable the `skip-reconcile` annotation for an Argo CD Application.  The `argocd.argoproj.io/skip-reconcile: \"true\"` annotation is added to the `metadata` section of the application configuration. This configuration will stop the Application from reconciling.  There are no dependencies required for this configuration. The output of this configuration will stop any processing of the application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/skip_reconcile.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/skip-reconcile: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-dex-server ServiceMonitor in YAML\nDESCRIPTION: This ServiceMonitor is designed to gather metrics from the Argo CD Dex server.  It employs the `app.kubernetes.io/name: argocd-dex-server` label for target selection.  The `endpoints` section specifies the port for metrics. This setup demands Prometheus Operator and a working Dex server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-dex-server\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-dex-server\n  endpoints:\n    - port: metrics\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Sync Window via Argo CD CLI (Bash)\nDESCRIPTION: Demonstrates adding a new Sync Window to an Argo CD project using the `argocd proj windows add` command. This example creates an 'allow' window for the specified PROJECT, triggering daily at 22:00 (`0 22 * * *`), lasting for 1 hour (`1h`), and applying to all applications (`*`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows add PROJECT \\\n    --kind allow \\\n    --schedule \"0 22 * * *\" \\\n    --duration 1h \\\n    --applications \"*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD Manifests using kubectl\nDESCRIPTION: Installs the core Argo CD components by creating a dedicated namespace `argocd` and applying the official installation manifest file from the stable branch using `kubectl`. Requires `kubectl` configured to access a Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Argo CD Subscriptions via ConfigMap (YAML)\nDESCRIPTION: This YAML snippet shows how to configure global Argo CD subscriptions using the `argocd-notifications-cm` ConfigMap.  The `subscriptions` field contains a list of subscriptions.  Each subscription specifies recipients (e.g., Slack, email), triggers, and optionally a selector to filter applications based on labels.  Dependencies include a running Argo CD instance and the Argo CD Notifications controller. The snippet illustrates how to subscribe to the `on-sync-status-unknown` trigger and how to restrict subscriptions to applications matching specific labels using the `selector` field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/subscriptions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Contains centrally managed global application subscriptions\n  subscriptions: |\n    # subscription for on-sync-status-unknown trigger notifications\n    - recipients:\n      - slack:test2\n      - email:test@gmail.com\n      triggers:\n      - on-sync-status-unknown\n    # subscription restricted to applications with matching labels only\n    - recipients:\n      - slack:test3\n      selector: test=true\n      triggers:\n      - on-sync-status-unknown\n```\n\n----------------------------------------\n\nTITLE: Deleting ApplicationSet Resources with Orphan Cascade using kubectl - Shell\nDESCRIPTION: This shell command allows users to delete an ApplicationSet resource in Kubernetes without cascading the deletion to child Application resources. It requires kubectl to be installed and properly configured to access the relevant Kubernetes cluster. Replace (NAME) with the actual name of the ApplicationSet you wish to delete. The command uses the --cascade=orphan flag to orphan child Applications, but note that existing finalizers on the Applications may still result in the deletion of their managed resources unless syncPolicy.preserveResourcesOnDeletion is set to true.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Application-Deletion.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete ApplicationSet (NAME) --cascade=orphan\n```\n\n----------------------------------------\n\nTITLE: Generating Argo CD Applications for All Clusters Using the Cluster Generator in YAML\nDESCRIPTION: This YAML example configures an Argo CD ApplicationSet resource leveraging the Cluster generator to automatically iterate over all registered clusters within Argo CD. The template uses parameters like '{{.name}}' and '{{.server}}' sourced from each cluster's Secret to populate application metadata and deployment destinations. It demonstrates enabling Go templating with strict missing-key errors, targeting the 'guestbook' path in a Git repository, and deploying Applications per cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters: {} # Automatically use all clusters defined within Argo CD\n  template:\n    metadata:\n      name: '{{.name}}-guestbook' # 'name' field of the Secret\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{.server}}' # 'server' field of the secret\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Configuring File Parameters for Helm in Argo CD\nDESCRIPTION: Example demonstrating how to use the fileParameters field to provide file content as values to a Helm chart. This is equivalent to using the --set-file flag in Helm CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  helm:\n    fileParameters:\n      - name: some.key\n        path: path/to/file.ext\n```\n\n----------------------------------------\n\nTITLE: Adding Allowed GnuPG Signature Key to ArgoCD Project Using CLI in Bash\nDESCRIPTION: Adds a specified GnuPG public key ID to the list of allowed signature keys for an ArgoCD project, enforcing commit signature verification with that key. Requires project name and key ID as parameters. This enables signature enforcement on all applications associated with the project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-signature-key myproj 4AEE18F83AFDEB23\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard-Based Health Checks for Custom Resource Groups in ConfigMap - YAML\nDESCRIPTION: These YAML examples demonstrate configuring Lua-based health checks for multiple custom resources using wildcards in the resource.customizations key of the argocd-cm ConfigMap. This approach allows defining one health check for various resources in a group or all resources under a group prefix. Since wildcards are not supported in resource.customizations.health.* keys, only resource.customizations supports them. Key parameters are the group and kind patterns, and the actual health.lua script must be inserted instead of the ellipsis. No external dependencies are required.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nresource.customizations: |\n  ec2.aws.crossplane.io/*:\n    health.lua: |\n      ...\n```\n\nLANGUAGE: YAML\nCODE:\n```\nresource.customizations: |\n  \"*.aws.crossplane.io/*\":\n    health.lua: |\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Apply with Schema Validation Disabled in Argo CD\nDESCRIPTION: Configure an application to use server-side apply while disabling schema validation. Required when using partial YAML updates that don't satisfy the complete schema requirements.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - ServerSideApply=true\n    - Validate=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Hydration in an Argo CD Application\nDESCRIPTION: This YAML snippet demonstrates how to configure the `spec.sourceHydrator` field of an Argo CD Application. It specifies the `drySource` (where the unhydrated manifests are located) and the `syncSource` (the target branch and path for the hydrated manifests). This configuration tells Argo CD to hydrate the manifests from the `drySource` and push them to the `syncSource`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/source-hydrator.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      path: helm-guestbook\n      targetRevision: HEAD\n    syncSource:\n      targetBranch: environments/dev\n      path: helm-guestbook\n```\n\n----------------------------------------\n\nTITLE: Applying ignoreResourceUpdates to All Resources at the Argo CD Level - YAML\nDESCRIPTION: This configuration applies ignoreResourceUpdates to all tracked resources managed by Argo CD, ignoring changes under the /status JSON path for every resource kind. This is useful when broad ignoring of resource status updates is desired to reduce reconcile frequency. The configuration is set under resource.customizations.ignoreResourceUpdates.all in the argocd-cm ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.customizations.ignoreResourceUpdates.all: |\n    jsonPointers:\n    - /status\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Connector in Argo CD with Dex\nDESCRIPTION: This YAML snippet configures the GitHub connector in Argo CD's Dex configuration.  It specifies the client ID, client secret, and allowed GitHub organizations for authentication.  Replace placeholders for `clientID`, `clientSecret` and `orgs` with your actual values. This configuration is part of the `dex.config` in the `argocd-cm` ConfigMap. The secret can be referenced from a Kubernetes secret using the `$dex.github.clientSecret` or `$some_K8S_secret:dex.github.clientSecret` syntax.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  url: https://argocd.example.com\n\n  dex.config: |\n    connectors:\n      # GitHub example\n      - type: github\n        id: github\n        name: GitHub\n        config:\n          clientID: aabbccddeeff00112233\n          clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret\n          orgs:\n          - name: your-github-org\n\n      # GitHub enterprise example\n      - type: github\n        id: acme-github\n        name: Acme GitHub\n        config:\n          hostName: github.acme.example.com\n          clientID: abcdefghijklmnopqrst\n          clientSecret: $dex.acme.clientSecret  # Alternatively $<some_K8S_secret>:dex.acme.clientSecret\n          orgs:\n          - name: your-github-org\n```\n\n----------------------------------------\n\nTITLE: Explicit RBAC Policy Configuration to Exclude New Resources in Argo CD (CSV)\nDESCRIPTION: This CSV snippet provides a safe RBAC policy update to explicitly enumerate each pre-2.5 Argo CD resource the 'org-admin' role can manage, excluding the new 'applicationsets' resource. Each policy line specifies a particular resource (e.g., clusters, projects, applications), the action ('create'), and an object scope ('*'). To prevent unintended privilege escalation after upgrade, these precise entries should replace wildcard policies. Inputs: defined roles, resource names. Outputs: granular, controlled permissions per resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.4-2.5.md#_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, role:org-admin, clusters,     create, *, allow\np, role:org-admin, projects,     create, *, allow\np, role:org-admin, applications, create, *, allow\np, role:org-admin, repositories, create, *, allow\np, role:org-admin, certificates, create, *, allow\np, role:org-admin, accounts,     create, *, allow\np, role:org-admin, gpgkeys,      create, *, allow\np, role:org-admin, exec,         create, *, allow\n\n```\n\n----------------------------------------\n\nTITLE: External HTTPS SSO Callback Ingress for Argo CD with Contour in YAML\nDESCRIPTION: Defines a public-facing Kubernetes Ingress resource annotated for 'contour-external' ingress class to expose a specific SSO callback path (/api/dex/callback) over HTTPS. This allows external access for SSO while keeping the main UI internal. TLS termination uses a Kubernetes secret. Requires argocd-server TLS disabled and deployment configured accordingly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-external-callback-http\n  annotations:\n    kubernetes.io/ingress.class: contour-external\n    ingress.kubernetes.io/force-ssl-redirect: \"true\"\nspec:\n  rules:\n  - host: external.path.to.argocd.io\n    http:\n      paths:\n      - path: /api/dex/callback\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: http\n  tls:\n  - hosts:\n    - external.path.to.argocd.io\n    secretName: your-certificate-name\n```\n\n----------------------------------------\n\nTITLE: Using the Argo CD App Rollback Command (Bash)\nDESCRIPTION: Shows the basic syntax for the `argocd app rollback` command. It requires the application name and optionally a history ID. Omitting the ID rolls back to the previous version. Additional flags can be used to modify the command's behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_rollback.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app rollback APPNAME [ID] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Application History - Argo CD CLI - Shell\nDESCRIPTION: This shell snippet demonstrates the basic usage of the 'argocd app history' command to display the deployment history of a specified Argo CD application. Dependencies: Requires the Argo CD CLI to be installed and available in the environment. The parameter 'APPNAME' must be replaced with the target application's name, and optional '[flags]' can be provided for further customization. The output is typically a list of deployment history entries for the selected Argo CD application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_history.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd app history APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Argo CD Application Creation\nDESCRIPTION: This command creates an Argo CD application named 'crd-creation'. It fetches manifests from the specified Git repository (https://github.com/argoproj/argo-cd.git) and path (test/e2e/functional/crd-creation). The application will be deployed to the default Kubernetes service in the 'default' namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/e2e/testdata/crd-creation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create crd-creation \\\n  --repo https://github.com/argoproj/argo-cd.git \\\n  --path test/e2e/functional/crd-creation \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace default\n```\n\n----------------------------------------\n\nTITLE: Triggering Argo CD Application Sync - Bash\nDESCRIPTION: Sets environment variables for the Argo CD server address and an authentication token (JWT). It then downloads the appropriate `argocd` CLI binary from the server to ensure compatibility, places it in the system's PATH, and uses the CLI to trigger an immediate synchronization of the 'guestbook' application. The command `argocd app wait guestbook` pauses the script until the synchronization process for the 'guestbook' application is complete.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/ci_automation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ARGOCD_SERVER=argocd.example.com\nexport ARGOCD_AUTH_TOKEN=<JWT token generated from project>\ncurl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64\nargocd app sync guestbook\nargocd app wait guestbook\n```\n\n----------------------------------------\n\nTITLE: Configuring diffing to ignore the 'status' field across resources\nDESCRIPTION: Sets a system parameter to exclude the 'status' field from diffing, preventing drift detection from reporting differences in Kubernetes controller-managed status data. Use with caution if status is considered part of the desired state.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.compareoptions: |\n    ignoreResourceStatusField: all\n```\n\n----------------------------------------\n\nTITLE: Skipping Helm CRD Installation Declaratively (YAML)\nDESCRIPTION: Configures an Argo CD Application manifest by setting `spec.source.helm.skipCrds: true`. This declaratively prevents Argo CD from installing CRDs located in the Helm chart's `crds` folder, similar to the `--helm-skip-crds` CLI option.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    helm:\n      skipCrds: true\n```\n\n----------------------------------------\n\nTITLE: Downloading latest stable Argo CD CLI on Linux using curl\nDESCRIPTION: Commands to download and install the latest stable version of the Argo CD CLI on Linux systems using curl.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=$(curl -L -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION)\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v$VERSION/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Example Application Metadata JSON for Git Generator Usage in Argo CD - JSON\nDESCRIPTION: This JSON snippet represents part of a configuration file used with the ApplicationSet Git generator. It contains application source information such as Git repository URL, revision, and path pointing to specific application manifests. This metadata is utilized by ApplicationSet templates to dynamically generate Argo CD Application manifests. The snippet assumes inclusion within a larger JSON file and is used as input for templating.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Use-Cases.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  (...)\n  \"app\": {\n    \"source\": \"https://github.com/argoproj/argo-cd\",\n    \"revision\": \"HEAD\",\n    \"path\": \"applicationset/examples/git-generator-files-discovery/apps/guestbook\"\n  }\n  (...)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Allow and Deny Sync Windows to Argo CD Projects\nDESCRIPTION: Examples showing how to add allow and deny sync windows to an Argo CD project. The first example creates an allow window for one hour, while the second creates a deny window with manual sync capability and specific target filters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_add.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#Add a 1 hour allow sync window\nargocd proj windows add PROJECT \\\n    --kind allow \\\n    --schedule \"0 22 * * *\" \\\n    --duration 1h \\\n    --applications \"*\"\n\n#Add a deny sync window with the ability to manually sync.\nargocd proj windows add PROJECT \\\n    --kind deny \\\n    --schedule \"30 10 * * *\" \\\n    --duration 30m \\\n    --applications \"prod-\\*,website\" \\\n    --namespaces \"default,\\*-prod\" \\\n    --clusters \"prod,staging\" \\\n    --manual-sync\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Application Access (CSV)\nDESCRIPTION: This snippet demonstrates how to grant a user access to get any applications but only see logs in a specific application within a project. It uses the `applications` and `logs` resources and specifies the object as `<app-project>/<app-name>`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, get, *, allow\np, example-user, logs, get, example-project/my-app, allow\n```\n\n----------------------------------------\n\nTITLE: Using Label Selector to Exclude Local Cluster in Argo CD ApplicationSet YAML\nDESCRIPTION: This snippet configures a label selector to include only remote clusters by matching the label 'argocd.argoproj.io/secret-type: cluster'. Since the local cluster does not have a Secret resource or this label, it will be excluded from the selection. This technique allows targeting only non-local clusters for deployments. Comments indicate support for matchExpressions as an alternate selector strategy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          argocd.argoproj.io/secret-type: cluster\n        # The cluster generator also supports matchExpressions.\n        #matchExpressions:\n        #  - key: staging\n        #    operator: In\n        #    values:\n        #      - \"true\"\n```\n\n----------------------------------------\n\nTITLE: Application Manifest Using Config Management Plugin - YAML\nDESCRIPTION: This YAML snippet shows an Argo CD Application manifest using a plugin for configuration management. The plugin section includes environment variable declarations to be passed to the plugin's execution environment. Main fields include metadata for Application identification and spec.source.plugin.env for passing plugin-specific configuration. Dependencies are a pre-registered config management plugin and Argo CD supporting plugins via Application manifests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n    plugin:\n      env:\n        - name: FOO\n          value: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Argo CD CLI Options - Shell/Bash\nDESCRIPTION: This snippet lists global command-line options available for the Argo CD CLI. These options control authentication, server communication, Kubernetes context, certificate use, network settings, logging, and integration points with Redis, repo-server, and API server. Each flag may require additional configuration files or environment variables and can be combined in shell commands to customize CLI behavior. The expected input is a set of CLI flags; outputs and side effects depend on specific subcommands and server interaction. Prerequisites include a valid Argo CD installation and access to the specified contexts or servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet with Kustomize Patch\nDESCRIPTION: This YAML snippet shows an ApplicationSet using a Go template and a Kustomize patch. It dynamically generates Argo CD applications based on a list of clusters. The patch modifies a deployment by adding an argument. It uses attributes from the generators.  Dependencies include the `external-dns` project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: external-dns\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters: {}\n  template:\n    metadata:\n      name: 'external-dns'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/kubernetes-sigs/external-dns/\n        targetRevision: v0.14.0\n        path: kustomize\n        kustomize:\n          patches:\n          - target:\n              kind: Deployment\n              name: external-dns\n            patch: |-\n              - op: add\n                path: /spec/template/spec/containers/0/args/3\n                value: --txt-owner-id={{.name}}   # patch using attribute from generator\n      destination:\n        name: 'in-cluster'\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: Debugging Cluster Connectivity with Exported Kubeconfig (bash)\nDESCRIPTION: Sets the `KUBECONFIG` environment variable to use the previously exported kubeconfig file (`/tmp/kubeconfig`). Then, runs `kubectl get pods` with high verbosity (`-v 9`) to test the connection to the target cluster and gather detailed debugging information for diagnosing connectivity issues.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=/tmp/kubeconfig\nkubectl get pods -v 9\n```\n\n----------------------------------------\n\nTITLE: Send Alertmanager HA Cluster with Bearer Token\nDESCRIPTION: This ConfigMap configures the Argo CD notifications controller to send alerts to a high-availability Alertmanager cluster using a bearer token for authentication. It defines multiple targets, enables HTTPS, skips SSL verification, and references the bearer token stored in a Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:19093\n    - 10.5.39.39:29093\n    - 10.5.39.39:39093\n    scheme: https\n    apiPath: /api/v2/alerts\n    insecureSkipVerify: true\n    bearerToken: $alertmanager-bearer-token\n```\n\n----------------------------------------\n\nTITLE: Syncing (Deploying) Argo CD Application via CLI\nDESCRIPTION: Initiates a manual synchronization process for the specified Argo CD application (`guestbook`) using the `argocd app sync` command. This tells Argo CD to apply the desired state defined in the Git repository to the target Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nargocd app sync guestbook\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD OIDC with Client Authentication - YAML\nDESCRIPTION: This YAML snippet shows the configuration for the `argocd-cm` ConfigMap to enable OIDC authentication using Keycloak with the Client Authentication method. It specifies the issuer URL, client ID, references the client secret stored in a Secret, and lists the requested OIDC scopes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/keycloak.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Keycloak\n    issuer: https://keycloak.example.com/realms/master\n    clientID: argocd\n    clientSecret: $oidc.keycloak.clientSecret\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n\n```\n\n----------------------------------------\n\nTITLE: Updating Dex Main Container Command for Argo CD v2.0 (Bash)\nDESCRIPTION: Shows the updated main container command for the `argocd-dex-server` deployment in Argo CD v2.0. It executes the `rundex` command using the binary copied by the init container (named `argocd-dex` in the shared volume). This reflects the migration of Dex functionality from `argocd-util` to the consolidated `argocd` binary, which adopts behavior based on its invocation name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.8-2.0.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- command:\n  - /shared/argocd-dex\n  - rundex\n```\n\n----------------------------------------\n\nTITLE: Logging into Argo CD CLI with Non-Root GRPC Web Path (Shell)\nDESCRIPTION: Shows how to use the `argocd login` command with the `--grpc-web-root-path` flag (e.g., `/argo-cd`). This is necessary when the Argo CD server is configured with a `--rootpath` to specify the correct path for GRPC web connections used by the CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n$ argocd login <host>:<port> --grpc-web-root-path /argo-cd\n```\n\n----------------------------------------\n\nTITLE: Executing 'argocd account can-i' Command for Permission Checks - Shell\nDESCRIPTION: The snippet demonstrates the usage of the 'argocd account can-i' command to determine if an Argo CD account can perform specific actions such as sync, update, or create on various resources like applications, projects, or clusters. It includes example commands that illustrate typical permission checks. The expected input is the action, resource, and an optional subresource. The command outputs whether the action is allowed or not. Dependencies include having the 'argocd' CLI tool configured with appropriate authentication and context. Limitations depend on the permissions granted to the authenticated account within the Argo CD instance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_can-i.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd account can-i ACTION RESOURCE SUBRESOURCE [flags]\n\n# Can I sync any app?\nargocd account can-i sync applications '*'\n\n# Can I update a project?\nargocd account can-i update projects 'default'\n\n# Can I create a cluster?\nargocd account can-i create clusters '*'\n```\n\n----------------------------------------\n\nTITLE: Deleting ArgoCD Application with argocd (Non-Cascade)\nDESCRIPTION: Deletes an ArgoCD application without cascading deletion of associated resources using the `argocd` CLI.  The `--cascade=false` flag ensures only the application is removed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/app_deletion.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app delete APPNAME --cascade=false\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Updating Application Resources (CSV)\nDESCRIPTION: This snippet shows how to allow a user to update all resources within an application but prevent updates to the application itself. The `<action>` is used with a wildcard to target all sub-resources for updates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, update/*, default/prod-app, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-notifications-controller ServiceMonitor in YAML\nDESCRIPTION: This YAML configuration is for the Notifications Controller, collecting metrics. The `selector` targets the controller based on the name provided. Ensure Prometheus Operator is correctly deployed and functioning, along with the notifications controller. The metrics port will need to be correctly configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-notifications-controller\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-notifications-controller-metrics\n  endpoints:\n    - port: metrics\n```\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy Allow Application Update, Deny Sub-Resource Updates (CSV)\nDESCRIPTION: This snippet illustrates how to explicitly allow updates to the application itself but deny updates to any of its sub-resources. It combines the `allow` and `deny` effects for different scopes of update actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, update, default/prod-app, allow\np, example-user, applications, update/*, default/prod-app, deny\n```\n\n----------------------------------------\n\nTITLE: Example: Listing Tokens for a Specific Argo CD Project Role (Shell)\nDESCRIPTION: Demonstrates listing tokens for the role 'test-role' within the project 'test-project'. The output displays the token ID, issuance timestamp, and expiration timestamp (or 'Never' if it doesn't expire).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list-tokens.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ argocd proj role list-tokens test-project test-role\nID                                      ISSUED AT                    EXPIRES AT\nf316c466-40bd-4cfd-8a8c-1392e92255d4    2023-10-08T15:21:40+01:00    Never\nfa9d3517-c52d-434c-9bff-215b38508842    2023-10-08T11:08:18+01:00    Never\n```\n\n----------------------------------------\n\nTITLE: Configuring EKS Cluster Secret for Argo CD with IRSA (YAML)\nDESCRIPTION: Demonstrates a Kubernetes Secret configuration for adding an Amazon EKS cluster to Argo CD using AWS IAM Roles for Service Accounts (IRSA). Specifies the cluster name for Argo CD (`name`), the EKS cluster server endpoint (`server`), and an `awsAuthConfig` block within the `config` field, detailing the actual EKS cluster name and the ARN of the IAM role Argo CD should assume. Requires IRSA setup on the Argo CD cluster, appropriate IAM roles, and permissions on the target EKS cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: \"eks-cluster-name-for-argo\"\n  server: \"https://xxxyyyzzz.xyz.some-region.eks.amazonaws.com\"\n  config: |\n    {\n      \"awsAuthConfig\": {\n        \"clusterName\": \"my-eks-cluster-name\",\n        \"roleARN\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_ROLE_NAME>\"\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }        \n    }\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy Example (New)\nDESCRIPTION: This example demonstrates the updated RBAC policy that grants specific privileges to different resources. It includes explicit permissions for clusters, projects, applications, repositories, certificates, accounts, gpgkeys, and optionally, extensions, providing more granular control.  The final line for `extensions` is optional, depending on whether the admin wants to grant access to this new resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.6-2.7.md#_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, role:org-admin, clusters, create, my-proj/*, allow\np, role:org-admin, projects, create, my-proj/*, allow\np, role:org-admin, applications, create, my-proj/*, allow\np, role:org-admin, repositories, create, my-proj/*, allow\np, role:org-admin, certificates, create, my-proj/*, allow\np, role:org-admin, accounts, create, my-proj/*, allow\np, role:org-admin, gpgkeys, create, my-proj/*, allow\n# If you don't want to grant the new permission, don't include the following line\np, role:org-admin, extensions, invoke, my-proj/*, allow\n```\n\n----------------------------------------\n\nTITLE: Kustomize Components in Argo CD Application\nDESCRIPTION: This YAML snippet demonstrates how to use Kustomize components within an Argo CD application. It defines an Argo CD application that references a component using `kustomize.components`. The `path` specifies the location of the `kustomization.yaml` file, and the `components` section lists the Kustomize components to include. The `ignoreMissingComponents` option is set to `true` to prevent errors if components are missing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: application-kustomize-components\nspec:\n  ...\n  source:\n    path: examples/application-kustomize-components/base\n    repoURL: https://github.com/my-user/my-repo\n    targetRevision: main\n    \n    # This!\n    kustomize:\n      components:\n        - ../component  # relative to the kustomization.yaml (`source.path`).\n      ignoreMissingComponents: true\n```\n\n----------------------------------------\n\nTITLE: Deleting ApplicationSets via Argo CD CLI - Shell\nDESCRIPTION: This shell command shows the base usage of 'argocd appset delete' for removing one or more ApplicationSets from the Argo CD instance. The command accepts various flags, including optional parameters to specify confirmation, authentication tokens, or context configuration. Required dependencies include the Argo CD CLI. The primary required parameter is the ApplicationSet name(s) to delete. Outputs include success or error messages for each attempted deletion. The command may prompt for confirmation unless the '-y' flag is provided.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_delete.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd appset delete [flags]\n```\n\n----------------------------------------\n\nTITLE: Subscribing Application to Rocket.Chat Notifications via Annotation (YAML)\nDESCRIPTION: This snippet demonstrates how to subscribe an Argo CD Application to Rocket.Chat notifications for a specific event (on-sync-succeeded). This is done using a Kubernetes annotation on the Application resource. The annotation value specifies the target channel or user (prefixed with # or @).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/rocketchat.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.rocketchat: #my_channel\n\n```\n\n----------------------------------------\n\nTITLE: Declarative Source Repository Management YAML\nDESCRIPTION: This YAML snippet demonstrates declarative management of source repositories. It uses a list of source repository patterns, including negations, to control which repositories are allowed or denied.  The order of rules matters for evaluation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sourceRepos:\n    # Do not use the test repo in argoproj\n    - '!ssh://git@GITHUB.com:argoproj/test'\n    # Nor any Gitlab repo under group/ \n    - '!https://gitlab.com/group/**'\n    # Any other repo is fine though\n    - '*'\n```\n\n----------------------------------------\n\nTITLE: Configuration Flags for argocd-repo-server\nDESCRIPTION: This section lists all available command-line options for configuring the Repository Server, including network addresses, cache expiration, TLS settings, maximum sizes for manifests, Redis connection parameters, and tracing options. Many flags have default values specified, allowing customization of server behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-repo-server.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n      --address string                                 Listen on given address for incoming connections (default \"0.0.0.0\")\n      --allow-oob-symlinks                             Allow out-of-bounds symlinks in repositories (not recommended)\n      --default-cache-expiration duration              Cache expiration default (default 24h0m0s)\n      --disable-helm-manifest-max-extracted-size       Disable maximum size of helm manifest archives when extracted\n      --disable-tls                                    Disable TLS on the gRPC endpoint\n      --helm-manifest-max-extracted-size string        Maximum size of helm manifest archives when extracted (default \"1G\")\n      --helm-registry-max-index-size string            Maximum size of registry index file (default \"1G\")\n  -h, --help                                           help for argocd-repo-server\n      --include-hidden-directories                     Include hidden directories from Git\n      --logformat string                               Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                                Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --max-combined-directory-manifests-size string   Max combined size of manifest files in a directory-type Application (default \"10M\")\n      --metrics-address string                         Listen on given address for metrics (default \"0.0.0.0\")\n      --metrics-port int                               Start metrics server on given port (default 8084)\n      --otlp-address string                            OpenTelemetry collector address to send traces to\n      --otlp-attrs strings                             List of OpenTelemetry collector extra attrs when send traces, each attribute is separated by a colon(e.g. key:value)\n      --otlp-headers stringToString                    List of OpenTelemetry collector extra headers sent with traces, headers are comma-separated key-value pairs(e.g. key1=value1,key2=value2) (default [])\n      --otlp-insecure                                  OpenTelemetry collector insecure mode (default true)\n      --parallelismlimit int                           Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.\n      --plugin-tar-exclude stringArray                 Globs to filter when sending tarballs to plugins.\n      --plugin-use-manifest-generate-paths             Pass the resources described in argocd.argoproj.io/manifest-generate-paths value to the cmpserver to generate the application manifests.\n      --port int                                       Listen on given port for incoming connections (default 8081)\n      --redis string                                   Redis server hostname and port (e.g. argocd-redis:6379). \n      --redis-ca-certificate string                    Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --redis-client-certificate string                Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --redis-client-key string                        Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --redis-compress string                          Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --redis-insecure-skip-tls-verify                 Skip Redis server certificate validation.\n      --redis-use-tls                                  Use TLS when connecting to Redis. \n      --redisdb int                                    Redis database.\n      --repo-cache-expiration duration                 Cache expiration for repo state, incl. app lists, app details, manifest generation, revision meta-data (default 24h0m0s)\n      --revision-cache-expiration duration             Cache expiration for cached revision (default 3m0s)\n      --revision-cache-lock-timeout duration           Cache TTL for locks to prevent duplicate requests on revisions, set to 0 to disable (default 10s)\n      --sentinel stringArray                           Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). \n      --sentinelmaster string                          Redis sentinel master group name. (default \"master\")\n      --streamed-manifest-max-extracted-size string    Maximum size of streamed manifest archives when extracted (default \"1G\")\n      --streamed-manifest-max-tar-size string          Maximum size of streamed manifest archives (default \"100M\")\n      --tlsciphers string                              The list of acceptable ciphers to be used when establishing TLS connections. Use 'list' to list available ciphers. (default \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\")\n      --tlsmaxversion string                           The maximum SSL/TLS version that is acceptable (one of: 1.0|1.1|1.2|1.3) (default \"1.3\")\n      --tlsminversion string                           The minimum SSL/TLS version that is acceptable (one of: 1.0|1.1|1.2|1.3) (default \"1.2\")\n```\n\n----------------------------------------\n\nTITLE: Sample Commands for Deleting Applications\nDESCRIPTION: Provides examples of deleting a single application, multiple applications, or applications based on label selectors for various deletion scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_delete.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete an app\nargocd app delete my-app\n\n# Delete multiple apps\nargocd app delete my-app other-app\n\n# Delete apps by label\nargocd app delete -l app.kubernetes.io/instance=my-app\nargocd app delete -l app.kubernetes.io/instance!=my-app\nargocd app delete -l app.kubernetes.io/instance\nargocd app delete -l '!app.kubernetes.io/instance'\nargocd app delete -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n```\n\n----------------------------------------\n\nTITLE: Inherited Global Flags for Argo CD CLI Commands in Shell\nDESCRIPTION: This snippet enumerates the global flags inherited by the 'argocd relogin' command from the parent Argo CD CLI commands. These flags control authentication tokens, client certificates, configuration paths, Kubernetes contexts, logging formats, server connections, and other runtime behaviors essential for interacting with the Argo CD server and Kubernetes cluster. Proper use requires understanding of the Argo CD deployment and configuration environment. These flags affect command behavior, security verification, and networking layers during authentication token refresh.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_relogin.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Creating Helm App with argocd app create\nDESCRIPTION: This snippet demonstrates the creation of a Helm-based application using the `argocd app create` command and the `--helm-set` flag. It defines the repository, path, destination namespace, and destination server. It also uses `--helm-set` to override the `replicaCount` parameter in the Helm chart. It requires a running Kubernetes cluster and Argo CD configured to interact with it, and access to the specified Helm chart.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a Helm app\n  argocd app create helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2\n```\n\n----------------------------------------\n\nTITLE: Demonstrate Common argocd app Usage Examples (CLI)\nDESCRIPTION: Illustrates practical examples of using the `argocd app` command in the Argo CD CLI. Includes examples for listing applications, retrieving details for a specific application (`my-app`), and setting an application parameter (`image.tag=v1.0.1`). These snippets showcase common application management operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nargocd app list\n\nargocd app get my-app\n\nargocd app set my-app -p image.tag=v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Disabling the Admin User in Argo CD\nDESCRIPTION: This YAML snippet demonstrates how to disable the built-in 'admin' user in Argo CD by setting `admin.enabled` to `false` in the `argocd-cm` ConfigMap. Requires Kubernetes and access to the `argocd-cm` ConfigMap. Disabling the admin user improves security after creating alternative user accounts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  admin.enabled: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pull Request Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Demonstrates the basic structure of an Argo CD ApplicationSet using the `pullRequest` generator. It shows setting the `requeueAfterSeconds` interval for polling the SCM provider and indicates where provider-specific configurations (like GitHub) should be nested. Requires an Argo CD ApplicationSet resource definition.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      # When using a Pull Request generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n      requeueAfterSeconds: 1800\n      # See below for provider specific options.\n      github:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Creating Argo CD CMP Configuration File (v1alpha1)\nDESCRIPTION: This YAML defines a ConfigManagementPlugin custom resource (CRD) using the `argoproj.io/v1alpha1` API version. This is the standard way to configure a sidecar CMP, specifying `init` and `generate` commands within the `spec`. This file defines the plugin's behavior and is used within the CMP sidecar.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: pluginName\nspec:\n  init:                          # Optional command to initialize application source directory\n    command: [\"sample command\"]\n    args: [\"sample args\"]\n  generate:                      # Command to generate Kubernetes Objects in either YAML or JSON\n    command: [\"sample command\"]\n    args: [\"sample args\"]\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Command Examples\nDESCRIPTION: Examples demonstrating common operations for managing ApplicationSets including getting details, listing all ApplicationSets, creating from YAML files or URLs, and deleting ApplicationSets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get an ApplicationSet.\nargocd appset get APPSETNAME\n  \n# List all the ApplicationSets\nargocd appset list\n  \n# Create an ApplicationSet from a YAML stored in a file or at given URL\nargocd appset create <filename or URL> (<filename or URL>...)\n  \n# Delete an ApplicationSet\nargocd appset delete APPSETNAME (APPSETNAME...)\n```\n\n----------------------------------------\n\nTITLE: Printing SLSA Provenance for Container Image\nDESCRIPTION: This bash script verifies the SLSA provenance of a container image and prints the provenance using `jq`. It utilizes `slsa-verifier verify-image` with the `--print-provenance` option. The script requires slsa-verifier and jq, and it allows viewing the attestation payload.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nslsa-verifier verify-image \"$IMAGE\" \\\n    --source-uri github.com/argoproj/argo-cd \\\n    --source-tag v2.7.0 \\\n    --print-provenance | jq\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for argocd-dex-server using kubectl (Shell)\nDESCRIPTION: This shell command demonstrates how to create a Kubernetes TLS secret named 'argocd-dex-server-tls' in the 'argocd' namespace containing the TLS certificate and private key used by the argocd-dex-server workload. It assumes kubectl access and PEM files are available. This secret replaces the default self-signed certificate and enables secure HTTPS communication for the dex server. Updates to this secret require a pod restart to be applied.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/tls.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -n argocd secret tls argocd-dex-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Argo CD Login Command Options\nDESCRIPTION: Specific command-line options available for the 'argocd login' command, including options for authentication methods, naming contexts, and SSL configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_login.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for login\n      --name string          Name to use for the context\n      --password string      The password of an account to authenticate\n      --skip-test-tls        Skip testing whether the server is configured with TLS (this can help when the command hangs for no apparent reason)\n      --sso                  Perform SSO login\n      --sso-launch-browser   Automatically launch the system default browser when performing SSO login (default true)\n      --sso-port int         Port to run local OAuth2 login application (default 8085)\n      --username string      The username of an account to authenticate\n```\n\n----------------------------------------\n\nTITLE: Logging in to Argo CD CLI with PKCE SSO - Bash\nDESCRIPTION: This command initiates the Argo CD CLI login process using the configured OIDC provider via Single Sign-On (SSO) with the PKCE flow. It opens a browser window to complete the authentication and uses gRPC-web for communication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/keycloak.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nargocd login argocd.example.com --sso --grpc-web\n```\n\n----------------------------------------\n\nTITLE: Storing Keycloak Client Secret in Argo CD Secret - Bash\nDESCRIPTION: This snippet uses `kubectl` to patch the `argocd-secret` Kubernetes Secret, adding or updating the `oidc.keycloak.clientSecret` field. This securely stores the Keycloak client secret for Argo CD to reference in its OIDC configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/keycloak.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl -n argo-cd patch secret argocd-secret --patch='{\"stringData\": { \"oidc.keycloak.clientSecret\": \"<REPLACE_WITH_CLIENT_SECRET>\" }}'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Sync Policy Changes (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to ignore changes to the `spec.syncPolicy` field of Applications managed by the ApplicationSet controller.  This allows users to temporarily toggle auto-sync for individual Applications. Requires `argoproj.io/v1alpha1` API version and `ApplicationSet` kind.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  ignoreApplicationDifferences:\n    - jsonPointers:\n        - /spec/syncPolicy\n```\n\n----------------------------------------\n\nTITLE: Using Parameters from One Child Generator in Another in Matrix Generator\nDESCRIPTION: This example shows how parameters generated by one child generator can be used inside another child generator. It uses a git-files generator with a cluster generator where cluster selection is based on values from the git generator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # matrix 'parent' generator\n    - matrix:\n        generators:\n          # git generator, 'child' #1\n          - git:\n              repoURL: https://github.com/argoproj/applicationset.git\n              revision: HEAD\n              files:\n                - path: \"examples/git-generator-files-discovery/cluster-config/**/config.json\"\n          # cluster generator, 'child' #2\n          - clusters:\n              selector:\n                matchLabels:\n                  argocd.argoproj.io/secret-type: cluster\n                  kubernetes.io/environment: '{{.path.basename}}'\n  template:\n    metadata:\n      name: '{{.name}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/applicationset.git\n        targetRevision: HEAD\n        path: \"examples/git-generator-files-discovery/apps/guestbook\"\n      destination:\n        server: '{{.server}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Example: Removing Cluster by Server Address\nDESCRIPTION: This provides an example of how to use the `argocd cluster rm` command with the server address as an argument. It demonstrates how to remove a cluster by providing the URL of the Argo CD server. The user must replace `12.34.567.89` with the actual server address.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_rm.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nargocd cluster rm https://12.34.567.89\n```\n\n----------------------------------------\n\nTITLE: Sending Test Notification Using In-Cluster Config (Bash)\nDESCRIPTION: This command sends a test notification for the 'app-sync-succeeded' trigger associated with the 'guestbook' application to the specified Slack recipient ('slack:argocd admin notifications'). It relies on the ConfigMap and Secret resources available within the connected Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications template notify \\\n  app-sync-succeeded guestbook --recipient slack:argocd admin notifications\n```\n\n----------------------------------------\n\nTITLE: Generated Application example for flat list in Argo CD\nDESCRIPTION: This is the output YAML generated by the flat list generator when there are two clusters (cluster1 and cluster2). It shows how the cluster names are aggregated into the `helm.values` field of the application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: flat-list-guestbook\n  namespace: guestbook\nspec:\n  project: \"my-project\"\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps/\n    targetRevision: 'HEAD'\n    path: helm-guestbook\n    helm:\n      values: |\n        clusters:\n          - name: cluster1\n          - name: cluster2\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for Microsoft Authentication (YAML)\nDESCRIPTION: This YAML snippet configures Dex within the `argocd-cm` ConfigMap to authenticate users via Microsoft.  It utilizes the `microsoft` connector type and requires values for `clientID`, `clientSecret`, `redirectURI`, and `tenant`.  It also includes an optional `groups` section to specify the Entra ID groups that should be permitted to access Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n    dex.config: |\n      connectors:\n      - type: microsoft\n        id: microsoft\n        name: Your Company GmbH\n        config:\n          clientID: $MICROSOFT_APPLICATION_ID\n          clientSecret: $MICROSOFT_CLIENT_SECRET\n          redirectURI: http://localhost:8080/api/dex/callback\n          tenant: ffffffff-ffff-ffff-ffff-ffffffffffff\n          groups:\n            - DevOps\n```\n\n----------------------------------------\n\nTITLE: Enabling Orphaned Resources Warning in Argo CD (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to enable the Orphaned Resources Monitoring feature and generate a warning when orphaned resources are detected within a project. This configuration needs to be applied using the AppProject custom resource within your Argo CD setup. The `warn: true` setting will trigger a warning in the Argo CD UI for any application in the project that has orphaned resources in its target namespace. This enables the detection and visibility of the orphaned resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/orphaned-resources.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\nkind: AppProject\nmetadata:\n  ...\nspec:\n  ...\n  orphanedResources:\n    warn: true\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Directory App with argocd app create\nDESCRIPTION: This example shows how to create a directory-based application using `argocd app create`. It specifies the repository using `--repo`, the path to the application definition using `--path`, the destination namespace using `--dest-namespace`, the destination server using `--dest-server`, and uses `--directory-recurse` to recursively include all subdirectories. This will create a directory app that syncs its configuration from the provided Git repository. Requires Argo CD CLI configured and access to the Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a directory app\n  argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse\n```\n\n----------------------------------------\n\nTITLE: Ignoring fields owned by a specific manager in live resources\nDESCRIPTION: Configures Argo CD to ignore differences in all resource fields managed by 'kube-controller-manager', useful for bypassing differences caused by external controllers or webhooks that modify resources post-deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ignoreDifferences:\n    - group: '*'\n      kind: '*'\n      managedFieldsManagers:\n        - kube-controller-manager\n```\n\n----------------------------------------\n\nTITLE: AppProject with SSO User/Group Roles - YAML\nDESCRIPTION: This AppProject configuration assigns the 'admin' role to users and groups based on the specified OIDC scopes (email and groups). This allows associating user emails and groups directly within the AppProject.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: team-beta-project\n  namespace: argocd\nspec:\n  roles:\n    - name: admin\n      description: Admin privileges to team-beta\n      policies:\n        - p, proj:team-beta-project:admin, applications, *, *, allow\n      groups:\n        - user@example.org # Value from the email scope\n        - my-org:team-beta # Value from the groups scope\n```\n\n----------------------------------------\n\nTITLE: Storing Mattermost Token in Kubernetes Secret (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes Secret (`stringData`) to securely store the Mattermost bot token. The secret name is `<secret-name>` and the key for the token is `mattermost-token`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/mattermost.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  mattermost-token: token\n\n```\n\n----------------------------------------\n\nTITLE: Secret Resource for Pushover API Token\nDESCRIPTION: Creates a Secret resource named `<secret-name>` that securely stores the Pushover API token under the key `pushover-token`. This allows secure management of sensitive information and is referenced in the ConfigMap to authenticate notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pushover.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pushover-token: avtc41pn13asmra6zaiyf7dh6cgx97\n```\n\n----------------------------------------\n\nTITLE: Creating Argo CD Application using argocd app create\nDESCRIPTION: This snippet demonstrates the basic usage of the `argocd app create` command in the Argo CD CLI. The command creates a new application, taking the application name and various flags as input. It takes flags like `--repo`, `--path`, `--dest-namespace`, `--dest-server`, and other type-specific flags. The output is the creation of a new application in Argo CD with the specified configurations. It requires the Argo CD CLI installed and configured and Kubernetes cluster access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd app create APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Argo CD Web UI locally in Core mode\nDESCRIPTION: Command to launch the Argo CD Web UI locally when running in Core mode, making the interface available at http://localhost:8080.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/core.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin dashboard -n argocd\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables (Bash)\nDESCRIPTION: This bash snippet demonstrates how to set AWS credentials and region as environment variables. These environment variables can then be used by Argo CD to authenticate with AWS SQS.  Setting parameters via ConfigMap takes precedent over environment variables.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=\"test\"\nexport AWS_SECRET_ACCESS_KEY=\"test\"\nexport AWS_DEFAULT_REGION=\"us-east-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ApplicationSet with Pull Request Generator and Values in YAML\nDESCRIPTION: This example demonstrates how to set up an ApplicationSet with a Pull Request generator that passes additional values. The generator includes a custom value 'pr_branch' that references the pull request branch. These values can be accessed using the 'values.' prefix in templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      # ...\n      values:\n        pr_branch: '{{ .branch }}'\n  template:\n    metadata:\n      name: '{{ .values.name }}'\n    spec:\n      source:\n        repoURL: '{{ .url }}'\n        targetRevision: '{{ .branch }}'\n        path: kubernetes/\n      project: default\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: Update argocd-cm Dex Configuration\nDESCRIPTION: Updates the `argocd-cm` configmap with the Dex configuration for Google authentication. This configuration includes the `redirectURI`, `clientID`, `clientSecret`, `serviceAccountFilePath`, and `adminEmail`. The `type` is set to `google`. Replace the placeholder values with your actual Google OAuth credentials and Argo CD domain.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndex.config: |\n  connectors:\n  - config:\n      redirectURI: https://argocd.example.com/api/dex/callback\n      clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n      clientSecret: XXXXXXXXXXXXX\n      serviceAccountFilePath: /tmp/oidc/googleAuth.json\n      adminEmail: admin-email@example.com\n    type: google\n    id: google\n    name: Google\n```\n\n----------------------------------------\n\nTITLE: RBAC Role Assignment to Local User - YAML\nDESCRIPTION: This example shows how to assign a role (admin) to a local user (my-local-user).  However it's recommended to assign policies directly instead to avoid potential conflicts with SSO users.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ng, my-local-user, role:admin\n```\n\n----------------------------------------\n\nTITLE: Adding Private GitHub Enterprise Repository via GitHub App - Argo CD CLI Shell Example\nDESCRIPTION: This command adds a private repository hosted on GitHub Enterprise using GitHub App authentication. Prerequisites are argocd CLI, GitHub App credentials, and enterprise server base URL. Flags include '--github-app-id', '--github-app-installation-id', '--github-app-private-key-path', and '--github-app-enterprise-base-url'. Input is the repository and GitHub App info; output is repository connectivity using enterprise-specific endpoints.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://ghe.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Extensions - CSV\nDESCRIPTION: This example demonstrates how to grant a user permission to invoke a specific extension (httpbin) within applications under a specific project (default).  The user also needs read permission on the application resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_9\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, get, default/*, allow\np, example-user, extensions, invoke, httpbin, allow\n```\n\n----------------------------------------\n\nTITLE: Downloading latest Argo CD CLI on Linux using curl\nDESCRIPTION: Commands to download and install the latest version of the Argo CD CLI on Linux systems using curl.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Schema Validation Skipping in Argo CD via Declarative YAML\nDESCRIPTION: This snippet shows how to set the 'skipSchemaValidation' parameter to true within the application's source spec in a YAML manifest, enabling schema validation skipping declaratively in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    helm:\n      skipSchemaValidation: true\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Argo CD Cluster Connectivity\nDESCRIPTION: These commands allow you to manually verify cluster access from within an Argo CD pod. The first command connects to a running Argo CD server pod.  The second command reconstructs the cluster configuration.  The third command tests the connectivity to the cluster using the reconstructed config.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkubectl exec -it <argocd-pod-name> bash # ssh into any argocd server pod\nargocd admin cluster kubeconfig https://<cluster-url> /tmp/config --namespace argocd # generate your cluster config\nKUBECONFIG=/tmp/config kubectl get pods # test connection manually\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Argo CD Plugin - YAML\nDESCRIPTION: This YAML snippet defines an Argo CD Application manifest that specifies custom environment variables for a config management plugin. Environment variables can reference system, build, or application field variables, and are prefixed with ARGOCD_ENV_ by Argo CD to avoid collisions. Dependencies include the plugin being registered via sidecar and Argo CD configured to support plugins. Key parameters are name-value pairs specified under spec.source.plugin.env, and values may include variable expansions. Only explicitly set variables are supplied to the plugin.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    plugin:\n      env:\n        - name: FOO\n          value: bar\n        - name: REV\n          value: test-$ARGOCD_APP_REVISION\n```\n\n----------------------------------------\n\nTITLE: Example Usage of argocd admin notifications template notify Command - Shell\nDESCRIPTION: This snippet provides example shell commands demonstrating usage of the notification notify command: sending a notification to a Slack channel using in-cluster config, and rendering notification output to the console. These examples illustrate how to specify recipients and the template/resource to notify on.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template_notify.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Trigger notification using in-cluster config map and secret\nargocd admin notifications template notify app-sync-succeeded guestbook --recipient slack:my-slack-channel\n\n# Render notification render generated notification in console\nargocd admin notifications template notify app-sync-succeeded guestbook\n```\n\n----------------------------------------\n\nTITLE: Subscribing Argo CD Applications to Private Telegram Chat by Chat ID\nDESCRIPTION: This snippet configures an Argo CD Application to subscribe to a private Telegram chat using its chat ID, with a negative number indicating a chat ID. It enables notifications on sync success to the specified chat, requiring only the application resource configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/telegram.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: -1000000000000\n```\n\n----------------------------------------\n\nTITLE: Updating Dex Init Container Command for Argo CD v2.0 (Bash)\nDESCRIPTION: Shows the updated init container command for the `argocd-dex-server` deployment in Argo CD v2.0. It copies the multi-functional `argocd` binary (which includes `argocd-dex` behavior) to a shared volume, replacing the previous method that used the separate `argocd-util` binary. This change is necessary due to the consolidation of binaries and the migration of Dex commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.8-2.0.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /shared/argocd-dex\n```\n\n----------------------------------------\n\nTITLE: Command Line Options for argocd app get Command - Bash\nDESCRIPTION: This code snippet lists and describes the command line options available for the 'argocd app get' command. It includes flags for scoping the application by namespace, output format selection, refreshing data, and revealing operational or parameter information. Users can specify particular sources via name or position in app spec for parameter display. The snippet also enumerates inherited flags from parent commands that cover server context, authentication, connection, logging, and troubleshooting settings essential for CLI operation with Argo CD servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_get.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -N, --app-namespace string   Only get application from namespace\n      --hard-refresh           Refresh application data as well as target manifests cache\n  -h, --help                   help for get\n  -o, --output string          Output format. One of: json|yaml|wide|tree (default \"wide\")\n      --refresh                Refresh application data when retrieving\n      --show-operation         Show application operation\n      --show-params            Show application parameters and overrides\n      --source-name string     Name of the source from the list of sources of the app.\n      --source-position int    Position of the source from the list of sources of the app. Counting starts at 1. (default -1)\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Kustomize Inline Patch Example\nDESCRIPTION: This YAML snippet demonstrates how to apply inline patches to Kustomize resources within an Argo CD application. It defines a `Kustomization` and specifies a patch to modify a deployment's container port. The `target` field selects the resource to patch, and the `patch` field provides the modifications. This approach avoids separate overlay files.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nmetadata:\n  name: kustomize-inline-example\nnamespace: test1\nresources:\n  - https://github.com/argoproj/argocd-example-apps//kustomize-guestbook/\npatches:\n  - target:\n      kind: Deployment\n      name: guestbook-ui\n    patch: |-\n      - op: replace\n        path: /spec/template/spec/containers/0/ports/0/containerPort\n        value: 443\n```\n\n----------------------------------------\n\nTITLE: Inline Helm Values Using valuesObject in Argo CD\nDESCRIPTION: Example showing how to specify Helm values directly in the Application manifest using the valuesObject field. This approach allows defining structured values without requiring external files.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  helm:\n    valuesObject:\n      ingress:\n        enabled: true\n        path: /\n        hosts:\n          - mydomain.example.com\n        annotations:\n          kubernetes.io/ingress.class: nginx\n          kubernetes.io/tls-acme: \"true\"\n        labels: {}\n        tls:\n          - secretName: mydomain-tls\n            hosts:\n              - mydomain.example.com\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Local User - YAML\nDESCRIPTION: This policy directly grants a local user (my-local-user) the permission to sync applications in the 'my-project' project.  This avoids using roles for local users.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\np, my-local-user, applications, sync, my-project/*, allow\n```\n\n----------------------------------------\n\nTITLE: Replacing a Specific Resource Instead of Applying via Annotation (YAML)\nDESCRIPTION: Uses the `argocd.argoproj.io/sync-options: Replace=true` annotation on a specific resource's metadata. Argo CD will then use `kubectl replace` or `kubectl create` for this resource instead of `kubectl apply`. Use with caution as it's a potentially destructive operation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Replace=true\n```\n\n----------------------------------------\n\nTITLE: Injecting Authorization Header in Outgoing Requests for Argo CD Proxy Extension (YAML)\nDESCRIPTION: This YAML snippet configures a proxy extension backend to inject an 'Authorization' header into outgoing requests sent to a specific backend service. Dependencies include an Argo CD setup where the relevant header value is defined in the 'argocd-secret'. The 'name' parameter identifies the header, while its 'value' is templated from the Argo CD secret key. The expected input is the header's value stored in the secret, and the output is outgoing requests with the extra authorization header populated. Limitations include the necessity for secret management and ensuring the header template matches the defined secret key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/proxy-extensions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextension.config: |\n  extensions:\n  - name: some-extension\n    backend:\n      services:\n      - url: http://extension-name.com:8080\n        headers:\n        - name: Authorization\n          value: '$some-extension.authorization.header'\n```\n\n----------------------------------------\n\nTITLE: argocd CLI Login Command for Ambassador Path-based Routing in Shell\nDESCRIPTION: Shell command example for logging into the Argo CD API server exposed under a non-root path with grpc-web support. Passes the --grpc-web-root-path flag with the base path configured in Ambassador Mapping and argocd-server deployment, enabling proper routing of gRPC calls.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd login <host>:<port> --grpc-web-root-path /argo-cd\n```\n\n----------------------------------------\n\nTITLE: Configuring Unauthenticated SMTP Service in Argo CD\nDESCRIPTION: This snippet shows how to configure Argo CD notifications to use an SMTP server without authentication. It specifies only the host, port, and sender email address.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/email.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.email.example: |\n    host: smtp.example.com\n    port: 587\n    from: $email-username\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Test Manifest Skipping in Argo CD via Declarative YAML\nDESCRIPTION: This snippet depicts setting 'skipTests' to true within the Helm source configuration in a YAML manifest, enabling test skipping declaratively in Argo CD manifests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    helm:\n      skipTests: true # or false\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed GnuPG Signature Keys for an ArgoCD Project Using CLI in Bash\nDESCRIPTION: Overrides the list of allowed GnuPG signature keys for an ArgoCD project by specifying a new comma-separated list of key IDs. Can be used on existing projects or during project creation. Controls which keys are enforced for commit signature verification for all applications within the project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj set myproj --signature-keys 4AEE18F83AFDEB23,07E34825A909B250\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Recipient in Global Subscription (YAML)\nDESCRIPTION: This snippet illustrates how to configure a custom webhook as a recipient within the global subscriptions defined in the `argocd-notifications-cm` ConfigMap. It shows that a webhook service needs to be defined (indicated by `service.webhook.<webhook-name>`) and then referenced by its `<webhook-name>` in the `recipients` list of a subscription entry. This enables sending notifications for specific triggers, like `on-sync-status-unknown`, to a custom webhook endpoint.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/subscriptions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    (snip)\n  subscriptions: |\n    - recipients:\n      - <webhook-name>\n      triggers:\n      - on-sync-status-unknown\n```\n\n----------------------------------------\n\nTITLE: Default Project Configuration YAML\nDESCRIPTION: This YAML snippet defines the default project configuration in Argo CD.  It allows deployments from any source repository to any cluster and namespace, with no restrictions on resource kinds. The wildcard characters indicate unrestricted access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sourceRepos:\n  - '*'\n  destinations:\n  - namespace: '*'\n    server: '*'\n  clusterResourceWhitelist:\n  - group: '*'\n    kind: '*'\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Cluster Secret Using ArgoCD-k8s-auth with Workload Identity in YAML\nDESCRIPTION: This snippet shows a Kubernetes Secret manifest used to configure Argo CD with a GKE cluster via argocd-k8s-auth using Google Cloud Workload Identity authentication. It includes fields such as execProviderConfig specifying the command and arguments for authentication and TLS client configuration including a base64-encoded CA certificate. Dependencies include enabling Workload Identity on the GKE cluster and binding appropriate IAM roles to service accounts used by Argo CD components. The input is the Secret YAML to be applied to the cluster, and the output enables Argo CD to authenticate securely to the GKE API server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster.example.com\n  server: https://mycluster.example.com\n  config: |\n    {\n      \"execProviderConfig\": {\n        \"command\": \"argocd-k8s-auth\",\n        \"args\": [\"gcp\"],\n        \"apiVersion\": \"client.authentication.k8s.io/v1beta1\"\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Patching ClusterRole for Clustered Argo (kubectl)\nDESCRIPTION: This command patches the `argocd-server` ClusterRole to allow it to `exec` into pods within a clustered Argo CD setup. It adds a rule granting the `create` verb on the `pods/exec` resource. Requires `kubectl` with appropriate permissions. The command targets the cluster role identified by `<argocd-server-clusterrole-name>`.  This assumes an Argo CD installation with cluster-wide permissions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/web_based_terminal.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl patch clusterrole <argocd-server-clusterrole-name> - type='json' -p='[{\"op\": \"add\", \"path\": \"/rules/-\", \"value\": {\"apiGroups\": [\"*\"], \"resources\": [\"pods/exec\"], \"verbs\": [\"create\"]}}]'\n```\n\n----------------------------------------\n\nTITLE: Creating GKE BackendConfig for Argo CD Health Checks (YAML)\nDESCRIPTION: Defines a GKE BackendConfig resource named 'argocd-backend-config' in the 'argocd' namespace. This configuration is referenced by the Argo CD server Service and specifies health check parameters (interval, timeout, thresholds, path, port) used by the Google Cloud Load Balancer to monitor the health of the Argo CD server pods via the '/healthz' endpoint on port 8080.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cloud.google.com/v1\nkind: BackendConfig\nmetadata:\n  name: argocd-backend-config\n  namespace: argocd\nspec:\n  healthCheck:\n    checkIntervalSec: 30\n    timeoutSec: 5\n    healthyThreshold: 1\n    unhealthyThreshold: 2\n    type: HTTP\n    requestPath: /healthz\n    port: 8080\n```\n\n----------------------------------------\n\nTITLE: ConfigMap for Allowed SCM Providers - YAML\nDESCRIPTION: This YAML snippet shows how to configure the allowed SCM providers using a ConfigMap.  The `applicationsetcontroller.allowed.scm.providers` data field restricts the URLs that can be used in SCM provider configurations, mitigating potential security risks.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  applicationsetcontroller.allowed.scm.providers: https://git.mydomain.com/,https://gitlab.mydomain.com/\n```\n\n----------------------------------------\n\nTITLE: Defining Static and Dynamic Parameters in ConfigManagementPlugin (YAML)\nDESCRIPTION: Shows the proposed structure for the `ConfigManagementPlugin` custom resource, introducing the `parameters` key with `static` and `dynamic` sections for declaring available parameters. Static parameters apply to all apps managed by this CMP, while dynamic parameters can be generated per-app using a specified command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: cmp-plugin\nspec:\n  version: v1.0\n  generate:\n    command: [\"example.sh\"]\n  discover:\n    fileName: \"./subdir/s*.yaml\"\n  # NEW KEY\n  parameters:\n    static:\n    # The static announcement follows the parameters announcement schema. This is where a parameter description\n    # should go if it applies to all apps for this CMP.\n    - name: values-file\n      title: Values File\n      tooltip: Path of a Helm values file to apply to the chart.\n    dynamic:\n      # The (optional) generated announcement is combined with the declarative announcement (if present). This is where\n      # a parameter description should be generated if it applies only to a specific app which the CMP handles.\n      command: [\"example-params.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/HTTPS Ingress with NGINX for Argo CD - YAML\nDESCRIPTION: This YAML snippet defines an NGINX Ingress resource for Argo CD that handles HTTP/HTTPS traffic with forced SSL redirection and HTTP backend protocol. It uses annotations to specify backend protocol and SSL redirect behavior. Key parameters include 'ingressClassName' set to nginx, the host as 'argocd.example.com', and TLS configuration referencing the secret 'argocd-ingress-http'. This ingress routes traffic to the 'argocd-server' service on the 'http' port. The snippet requires an existing NGINX ingress controller and a TLS secret for SSL termination.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-http-ingress\n  namespace: argocd\n  annotations:\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTP\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: http\n    host: argocd.example.com\n  tls:\n  - hosts:\n    - argocd.example.com\n    secretName: argocd-ingress-http\n```\n\n----------------------------------------\n\nTITLE: Listing Application Resources with 'argocd app resources' Command\nDESCRIPTION: Provides the syntax and usage of the 'argocd app resources' CLI command, which lists resources of a specified application. The command requires the application name and supports additional flags to customize output, such as filtering orphaned resources or displaying a tree view.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_resources.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app resources APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD Manifest (Bash)\nDESCRIPTION: This snippet installs Argo CD on the Kubernetes cluster.  It first creates a namespace `argocd` using `kubectl create namespace`. Then it applies the Argo CD manifest from a remote URL, using `kubectl apply -n argocd -f`. The dependency is a running Kubernetes cluster. The output is the creation of required resources in the argocd namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/try_argo_cd_locally.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes TLS Secret for Ingress (Shell)\nDESCRIPTION: Creates a Kubernetes TLS Secret named 'secret-yourdomain-com' in the 'argocd' namespace using kubectl. This secret stores the SSL certificate ('cert-file.crt') and private key ('key-file.key') required by the Ingress resource to terminate TLS connections for your domain.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd create secret tls secret-yourdomain-com \\\n  --cert cert-file.crt --key key-file.key\n```\n\n----------------------------------------\n\nTITLE: Traefik Ingress Configuration\nDESCRIPTION: This YAML snippet configures Traefik to publish the loadBalancer IP, resolving the issue where Ingress resources get stuck in a `Progressing` state. This allows Argo CD to properly detect the health of the Ingress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nproviders:\n  kubernetesIngress:\n    publishedService:\n      enabled: true\n```\n```\n\n----------------------------------------\n\nTITLE: Delete ApplicationSet via CLI - Shell\nDESCRIPTION: This command shows how to delete an ApplicationSet using the Argo CD CLI when the ApplicationSet resides in a namespace other than the control plane's namespace.  The format `foo/bar` is used, where `foo` is the name and `bar` is the namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Delete the application\nargocd appset delete foo/bar\n```\n\n----------------------------------------\n\nTITLE: Adding GnuPG Signature Key with Argo CD CLI - Shell\nDESCRIPTION: Demonstrates how to use the Argo CD CLI to add a GnuPG signature key to a specified project. This example requires that the 'argocd' CLI tool is installed and configured to connect with your Argo CD instance. The PROJECT and KEY-ID arguments should be replaced with your target project name and GnuPG key ID, respectively. The command will associate the specified GnuPG key with the given project, enabling signature verification for resources managed by Argo CD. No output is expected on success, but errors will be printed in the CLI if the command fails.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-signature-key.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj add-signature-key PROJECT KEY-ID [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring NewRelic Integration - ConfigMap\nDESCRIPTION: This YAML snippet defines a ConfigMap named `argocd-notifications-cm`. It configures the `service.newrelic` section with the `apiURL` and `apiKey` used for NewRelic integration.  The `apiKey` utilizes a variable `$newrelic-apiKey` to reference a secret. It is essential to replace `<api-url>` with the actual NewRelic API URL.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/newrelic.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.newrelic: |\n    apiURL: <api-url>\n    apiKey: $newrelic-apiKey\n```\n\n----------------------------------------\n\nTITLE: Application with custom annotations and labels example in YAML\nDESCRIPTION: Example of an Application with custom annotations and labels that need to be preserved during ApplicationSet reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  # This annotation and label exists only on this Application, and not in \n  # the parent ApplicationSet template:\n  annotations: \n    my-custom-annotation: some-value\n  labels:\n    my-custom-label: some-value\nspec:\n  # (...)\n```\n\n----------------------------------------\n\nTITLE: Configuring ApplicationSet with Cluster Decision Resource Generator (YAML)\nDESCRIPTION: Defines an Argo CD ApplicationSet named 'guestbook' that utilizes the `clusterDecisionResource` generator. This generator uses duck-typing, configured via `configMapRef: my-configmap`, to identify target clusters by querying a resource named 'quak' or resources matching a label selector. It uses Go templating to dynamically set the destination server based on the `clusterName` found in the referenced resource's status.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster-Decision-Resource.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n name: guestbook\n namespace: argocd\nspec:\n goTemplate: true\n goTemplateOptions: [\"missingkey=error\"]\n generators:\n - clusterDecisionResource:\n    # ConfigMap with GVK information for the duck type resource\n    configMapRef: my-configmap  \n    name: quak           # Choose either \"name\" of the resource or \"labelSelector\"\n    labelSelector:\n      matchLabels:       # OPTIONAL\n        duck: spotted\n      matchExpressions:  # OPTIONAL\n      - key: duck\n        operator: In\n        values:\n        - \"spotted\"\n        - \"canvasback\"   \n    # OPTIONAL: Checks for changes every 60sec (default 3min)\n    requeueAfterSeconds: 60\n template:\n   metadata:\n     name: '{{.name}}-guestbook'\n   spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{.clusterName}}' # 'server' field of the secret\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Setting Application Parameters with Argo CD CLI - Shell\nDESCRIPTION: This snippet demonstrates the basic usage of the 'argocd app set' command to update application parameters. The command requires the application name (APPNAME) and can include multiple flags to specify the parameters to override, such as setting configuration values or assigning properties like namespace. Dependencies include the Argo CD CLI installed and access to a configured Argo CD instance. The primary input is the application name, and outputs are the modified application properties within the Argo CD control plane. Limitations include the user's RBAC permissions and the requirement for valid parameter keys and values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_set.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd app set APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Specifying Kustomize Version in Application\nDESCRIPTION: This YAML snippet illustrates how to specify the Kustomize version for an Argo CD application within the application's specification. The example utilizes the `kustomize.version` field to set the version to `v3.5.4`. This sets the desired Kustomize version that Argo CD will use when rendering and deploying manifests.  Requires a pre-configured Kustomize version in `argocd-cm`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: kustomize-guestbook\n\n    kustomize:\n      version: v3.5.4\n```\n\n----------------------------------------\n\nTITLE: Filtering Argo CD Clusters with Label Selectors in ApplicationSet Using YAML\nDESCRIPTION: This snippet shows how to narrow the scope of clusters targeted by the ApplicationSet's Cluster generator using a label selector with 'matchLabels'. Clusters are filtered to include only those with a specific label, such as 'staging: \"true\"', on their Secrets. The commented 'matchExpressions' demonstrate more complex label filtering options. This enables deploying applications selectively based on cluster labels.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          staging: \"true\"\n        # The cluster generator also supports matchExpressions.\n        #matchExpressions:\n        #  - key: staging\n        #    operator: In\n        #    values:\n        #      - \"true\"\n  template:\n  # (...)\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Sidecar in Argo CD Repo Server - YAML\nDESCRIPTION: This YAML snippet demonstrates how to patch the argocd-repo-server deployment to register a plugin as a sidecar container. The example configures the plugin container to run the lightweight argocd-cmp-server as its entrypoint, specifying necessary volume mounts, user security context, and config sources. Required dependencies include building or referencing a compatible plugin image and defining associated ConfigMaps. Key parameters include container names, image, command, and volumeMount paths. The setup expects the plugin configuration file at /home/argocd/cmp-server/config/plugin.yaml and enforces not sharing the /tmp volume with the main repo-server container to maintain isolation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- name: my-plugin\n  command: [/var/run/argocd/argocd-cmp-server] # Entrypoint should be Argo CD lightweight CMP server i.e. argocd-cmp-server\n  image: ubuntu # This can be off-the-shelf or custom-built image\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 999\n  volumeMounts:\n    - mountPath: /var/run/argocd\n      name: var-files\n    - mountPath: /home/argocd/cmp-server/plugins\n      name: plugins\n    # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.\n    - mountPath: /home/argocd/cmp-server/config/plugin.yaml\n      subPath: plugin.yaml\n      name: my-plugin-config\n    # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps \n    # mitigate path traversal attacks.\n    - mountPath: /tmp\n      name: cmp-tmp\nvolumes:\n- configMap:\n    name: my-plugin-config\n  name: my-plugin-config\n- emptyDir: {}\n  name: cmp-tmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for OIDC Authentication with Google - YAML\nDESCRIPTION: This YAML snippet configures the argocd-cm ConfigMap for Argo CD, enabling OpenID Connect login via Google through Dex. The dex.config key establishes an OIDC connector, requiring a clientID and clientSecret from the Google Cloud Console. Users are authenticated via Google; groups membership is not available via this method. Replace placeholders with real credentials and set the url value to your Argo CD instance domain.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n  url: https://argocd.example.com\n  dex.config: |\n    connectors:\n    - config:\n        issuer: https://accounts.google.com\n        clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n        clientSecret: XXXXXXXXXXXXX\n      type: oidc\n      id: google\n      name: Google\n\n```\n\n----------------------------------------\n\nTITLE: Shell: Connect Externally via NodePort\nDESCRIPTION: Provides shell commands to connect to Redis from outside the cluster when the service type is set to NodePort (`.Values.master.service.type` contains \"NodePort\"). It first retrieves the IP address of a cluster node and the NodePort assigned to the Redis master service using `kubectl get nodes` and `kubectl get service`. Then, it uses `redis-cli` with the obtained Node IP and NodePort, conditionally including the password (`-a $REDIS_PASSWORD`) if `.Values.usePassword` is true.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"redis.fullname\" . }}-master)\nredis-cli -h $NODE_IP -p $NODE_PORT {{- if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgoCD Application and AppProject for Multiple Namespaces and Custom Service Accounts Using YAML\nDESCRIPTION: This YAML defines an ArgoCD Application and AppProject where the Application deploys to the 'guestbook' namespace, and the AppProject allows destinations including 'guestbook' and 'guestbook-ui' namespaces. It configures `destinationServiceAccounts` mapping namespaces to specific default service accounts like 'guestbook-deployer' and 'guestbook-ui-deployer' for sync impersonation, supporting multiple namespace scenarios with distinct service accounts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: my-project\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n---\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  destinations:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n    - namespace: guestbook-ui\n      server: https://kubernetes.default.svc\n  destinationServiceAccounts:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-deployer\n    - namespace: guestbook-ui\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-ui-deployer\n```\n\n----------------------------------------\n\nTITLE: Configuring Webex Teams Service in Argo CD ConfigMap\nDESCRIPTION: Sets up the Webex service configuration in Argo CD's ConfigMap by referencing the previously stored secret token. The 'token' field is populated dynamically from the secret's value.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webex.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webex: |\n    token: $webex-token\n```\n\n----------------------------------------\n\nTITLE: Deployment Annotation for SQS Notification (Env)\nDESCRIPTION: This YAML snippet shows the annotation required on a Deployment resource to send a notification when the deployment is ready.  It relies on the environment variables to be set for AWS authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  annotations:\n    notifications.argoproj.io/subscribe.on-deployment-ready.awssqs: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Mattermost Subscription on Argo CD Application (YAML)\nDESCRIPTION: This YAML snippet illustrates how to add an annotation to an Argo CD Application resource to subscribe it to a notification trigger (`<trigger-name>`). The annotation uses the `mattermost` service and specifies the target channel ID (`<channel-id>`) for notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/mattermost.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.mattermost: <channel-id>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Notification Template in Argo CD (YAML)\nDESCRIPTION: Creates a ConfigMap to define a Slack notification template that reports application name, namespace, revision, and deployed images when a deployment is successful. This setup enables real-time Slack updates for deployment events.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/examples.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: <your-slack-bot-token>\n\n  template.on-deployed-template: |\n    slack:\n      message: |\n        *Deployment Notification*\n        *Application:* `{{.app.metadata.name}}`\n        *Namespace:* `{{.app.spec.destination.namespace}}`\n        *Revision:* `{{.app.status.sync.revision}}`\n        *Deployed Images:*\n          {{- range $resource := .app.status.operationState.syncResult.resources -}}\n            {{- range $image := $resource.images -}}\n              - \"{{$image}}\"\n            {{- end }}\n          {{- end }}\n  trigger.on-deployed-trigger: |\n    when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\n    oncePer: app.status.sync.revision\n    send: [on-deployed-template]\n```\n\n----------------------------------------\n\nTITLE: ArgoCD Global Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the 'argocd cluster add' command. These include global connection, authentication, and logging configuration options for ArgoCD CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_add.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD CMP to Preserve File Modes\nDESCRIPTION: This `ConfigManagementPlugin` definition demonstrates enabling the `preserveFileMode` option by setting it to `true` within the `spec`. When enabled, the plugin receives repository files with their original file permissions intact, which can be a security risk if executable permissions are present. Use this option only with trusted plugins.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: pluginName\nspec:\n  init:\n    command: [\"sample command\"]\n    args: [\"sample args\"]\n  generate:\n    command: [\"sample command\"]\n    args: [\"sample args\"]\n  preserveFileMode: true\n```\n\n----------------------------------------\n\nTITLE: Changing Replica Count in Distributed Minio Deployment - Helm Bash\nDESCRIPTION: Installs Minio in distributed mode with a custom number of replica nodes by setting both mode and replicas parameters. Prerequisites include Kubernetes 1.5+, enough node resources, and cluster support for distributed Minio. Uses --set mode=distributed,replicas=8; replicas must be within Minio's valid distributed range (typically 4-16). Output is a distributed Minio deployment with the specified number of nodes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set mode=distributed,replicas=8 stable/minio\n```\n\n----------------------------------------\n\nTITLE: Defining ArgoCD Application and AppProject with Service Account Impersonation Using YAML\nDESCRIPTION: This YAML snippet defines an ArgoCD 'Application' named 'guestbook' and an 'AppProject' named 'my-project'. The Application points to a Git repository for manifests and targets the 'guestbook' namespace in the destination cluster. The AppProject specifies allowed source repositories, permitted destination namespaces, and maps the 'guestbook' namespace to use the 'guestbook-deployer' service account for application synchronization, enabling impersonation with scoped credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: my-project\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n---\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  destinations:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n  destinationServiceAccounts:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-deployer\n```\n\n----------------------------------------\n\nTITLE: Defining a Trivial Parameterized CMP Plugin (YAML and Shell)\nDESCRIPTION: This example shows a complete CMP plugin (ConfigManagementPlugin) that defines a single static parameter (cm-name-suffix), provides generate/discover script steps, and uses shell script commands. It demonstrates how a plugin pulls parameter values from JSON, uses environment variables, and emits a Kubernetes ConfigMap manifest. Dependencies: The plugin assumes jq is available for parameter extraction.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: trivial-cmp\nspec:\n  version: v1.0\n  generate:\n    command: \n      - sh\n      - -c\n      - |\n        # Pull one parameter value from the \"main\" section of the given parameters.\n        CM_NAME_SUFFIX=$(echo \"$ARGOCD_APP_PARAMETERS\" | jq -r '.[\"main\"][] | select(.name == \"cm-name-suffix\").value')\n        cat << EOM\n        {\n          \"kind\": \"ConfigMap\",\n          \"apiVersion\": \"v1\",\n          \"metadata\": {\n            \"name\": \"$ARGOCD_APP_NAME-$CM_NAME_SUFFIX\",\n            \"namespace\": \"$ARGOCD_APP_NAMESPACE\"\n          }\n        }\n        EOM\n  discover:\n    fileName: \"./trivial-cmp\"\n  parameters:\n    command:\n      - sh\n      - -c\n      - |\n        echo '[{\"name\": \"cm-name-suffix\"}]'\n```\n\n----------------------------------------\n\nTITLE: Example: Deleting a Project Role\nDESCRIPTION: This example shows how to delete a role named `test-role` from the `test-project` project. Make sure that `test-project` exists and the role is correctly named, or the command may fail.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ argocd proj role delete test-project test-role\n```\n\n----------------------------------------\n\nTITLE: Checking OpenSSH Version (Shell)\nDESCRIPTION: Verifies the installed OpenSSH client version using the '-V' flag. This check is important before upgrading to Argo CD 2.2.12, as it requires OpenSSH >= 8.9 due to changes in supported SSH key signature algorithms.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.1-2.2.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -V\n```\n\n----------------------------------------\n\nTITLE: Argo CD Application with Namespace-Specific Service Accounts\nDESCRIPTION: YAML configuration for an Argo CD Application and AppProject that specifies different service accounts for different namespaces, enabling precise permission control per namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: my-project\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n---\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  destinations:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n    - namespace: guestbook-ui\n      server: https://kubernetes.default.svc\n  destinationServiceAccounts:\n    - namespace: guestbook\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-deployer\n    - namespace: guestbook-ui\n      server: https://kubernetes.default.svc\n      defaultServiceAccount: guestbook-ui-deployer\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgoCD Notifications for Failed Application Sync in YAML\nDESCRIPTION: This template defines the structure and content for notifications sent when an application sync operation fails. It includes customized formats for email, Slack, and Microsoft Teams with relevant application details, error messages, and action links.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/catalog.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nemail:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n        \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }},\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n      \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n    }\n    {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":{{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.\n\n```\n\n----------------------------------------\n\nTITLE: Executing Notifications CLI Inside Controller Pod (Bash)\nDESCRIPTION: This command uses `kubectl exec` to run the `argocd admin notifications trigger get` command directly inside a running `argocd-notifications-controller` pod. This is useful for validating the configuration as seen by the controller within the cluster environment. Replace `<pod-hash>` with the actual hash of the pod.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it argocd-notifications-controller-<pod-hash> \\\n  /usr/local/bin/argocd admin notifications trigger get\n```\n\n----------------------------------------\n\nTITLE: Configuring AppProject for Cross-Namespace Application Management\nDESCRIPTION: YAML manifest for an AppProject resource that allows Applications to be created in a specific namespace. The sourceNamespaces field lists namespaces authorized to host Applications for this project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n    name: some-project\n    namespace: argocd\nspec:\n    sourceNamespaces:\n    - some-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Teams Notification Service (ConfigMap)\nDESCRIPTION: This YAML snippet defines a ConfigMap named `argocd-notifications-cm` that configures the Teams notification service. It specifies the `recipientUrls` for Teams channels using environment variables, enabling Argo CD to send notifications to the defined channels.  Dependencies include a running Argo CD instance and a configured Teams bot with webhook URLs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.teams: |\n    recipientUrls:\n      channelName: $channel-teams-url\n```\n\n----------------------------------------\n\nTITLE: Gathering cluster information as a flat list in Argo CD\nDESCRIPTION: This example demonstrates how to use the `flatList` option in the cluster generator to gather cluster information into a single application. It iterates through the found clusters using `range .clusters` and creates a list of cluster names within the `helm.values` field. The generated application will have a single Application resource with aggregated cluster details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          type: 'staging'\n      flatList: true\n  template:\n    metadata:\n      name: 'flat-list-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        # The cluster values field for each generator will be substituted here:\n        targetRevision: 'HEAD'\n        path: helm-guestbook\n        helm:\n          values: |\n            clusters:\n            {{- range .clusters }}\n              - name: {{ .name }}\n            {{- end }}\n      destination:\n        # In this case this is equivalent to just using {{name}}\n        server: 'my-cluster'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Listing All ArgoCD Applications in Shell\nDESCRIPTION: This code snippet shows how to list all Argo CD applications using the `argocd app list` command. No specific filters or options are applied, resulting in a comprehensive list of all applications managed by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_list.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app list\n```\n\n----------------------------------------\n\nTITLE: Disabling manual sync for a sync window using Argo CD CLI\nDESCRIPTION: Command to disable manual synchronization for a specified sync window within a project. Requires project name and sync window ID, which can be obtained via listing commands. The command is part of the Argo CD CLI toolkit and affects the synchronization behavior for deployment workflows.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_disable-manual-sync.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows disable-manual-sync PROJECT ID\n```\n\n----------------------------------------\n\nTITLE: Piping Kustomize Output to Notifications Command (Bash)\nDESCRIPTION: This command demonstrates integrating Kustomize with Argo CD notifications. It builds the Kustomize configuration from the './argocd-notifications' directory and pipes the resulting manifest (containing the ConfigMap) directly to the standard input of the `argocd-notifications` command using the `--config-map -` flag. It then triggers a notification for 'app-sync-succeeded' for the 'guestbook' app to a Grafana recipient.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build ./argocd-notifications | \\\n  argocd-notifications \\\n  template notify app-sync-succeeded guestbook --recipient grafana:argocd \\\n  --config-map -\n```\n\n----------------------------------------\n\nTITLE: Interpolating parameter values in `values` field - Argo CD\nDESCRIPTION: This example extends the previous one by showing how to interpolate parameter values such as `name` and annotations from the cluster secret within the `values` field.  It uses the `index` function to access the value of a specific annotation, and `.name` to access the cluster name. The `values.` prefix is still required in the template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          type: 'staging'\n      # A key-value map for arbitrary parameters\n      values:\n        # If `my-custom-annotation` is in your cluster secret, `revision` will be substituted with it.\n        revision: '{{index .metadata.annotations \"my-custom-annotation\"}}' \n        clusterName: '{{.name}}'\n  - clusters:\n      selector:\n        matchLabels:\n          type: 'production'\n      values:\n        # production uses a different revision value, for 'stable' branch\n        revision: stable\n        clusterName: '{{.name}}'\n  template:\n    metadata:\n      name: '{{.name}}-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        # The cluster values field for each generator will be substituted here:\n        targetRevision: '{{.values.revision}}'\n        path: guestbook\n      destination:\n        # In this case this is equivalent to just using {{name}}\n        server: '{{.values.clusterName}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Example: Creating Argo CD Project from Manifest (bash)\nDESCRIPTION: This example illustrates how to create or update an Argo CD project by providing its configuration from a file or a URL. The `-f` or `--file` flag is used to specify the path to a Kubernetes manifest containing the project definition.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_create.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj create PROJECT -f FILE|URL\n```\n\n----------------------------------------\n\nTITLE: Get Notification Triggers - Argo CD CLI\nDESCRIPTION: This command retrieves and prints information about configured notification triggers. It requires the Argo CD CLI to be installed and configured. The output can be formatted as JSON, YAML, wide, or name. The default output format is wide.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_trigger_get.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nargocd admin notifications trigger get [flags]\n```\n\n----------------------------------------\n\nTITLE: Default Triggers Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates the use of `defaultTriggers` in a `argocd-notifications-cm` ConfigMap, allowing users to specify a default set of triggers.  It illustrates how to predefine trigger behavior for application annotations. The `defaultTriggers` field holds the names of triggers applied by default.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Holds list of triggers that are used by default if trigger is not specified explicitly in the subscription\n  defaultTriggers: |\n    - on-sync-status-unknown\n\n  defaultTriggers.mattermost: |\n    - on-sync-running\n    - on-sync-succeeded\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Event Label Exclusion - YAML\nDESCRIPTION: This snippet demonstrates the use of `resource.excludeEventLabelKeys` to exclude specific labels from Kubernetes events for Argo CD applications. The key takes a comma-separated list of labels. This configuration happens in the Argo CD configuration file and supports wildcards. No dependencies are required.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n  resource.excludeEventLabelKeys: environment,bu\n```\n\n----------------------------------------\n\nTITLE: Add Argo CD Project Destination with Server URL\nDESCRIPTION: This example demonstrates how to add a project destination using a server URL (SERVER) in the specified namespace (NAMESPACE) on the project with name PROJECT.  It requires the project name, server URL, and namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-destination.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj add-destination PROJECT SERVER NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Adding Public Helm Repository via HTTPS - Argo CD CLI Shell Example\nDESCRIPTION: This example demonstrates adding a public Helm repository using HTTPS and assigning a name to the repository. Prerequisites: argocd CLI and network access to the Helm repository endpoint. Key parameters are '--type helm' and '--name', both required for Helm repository setup. Input is the Helm repository URL and a desired name; output is a newly configured repository in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://charts.helm.sh/stable --type helm --name stable\n```\n\n----------------------------------------\n\nTITLE: Creating and Syncing the Parent App of Apps via CLI (Bash)\nDESCRIPTION: Sequence of Argo CD CLI commands to first create the parent application (`apps`) pointing to the Helm chart repository and path, and then trigger its synchronization. Syncing the parent app causes Argo CD to create the child Application resources defined in the templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create apps \\\n    --dest-namespace argocd \\\n    --dest-server https://kubernetes.default.svc \\\n    --repo https://github.com/argoproj/argocd-example-apps.git \\\n    --path apps  \nargocd app sync apps\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Annotation Masking - YAML\nDESCRIPTION: This snippet demonstrates how to configure the masking of sensitive annotations in Secrets using the `resource.sensitive.mask.annotations` key. This key accepts a comma-separated list of annotation keys whose values will be masked in the UI and CLI.  No dependencies are required for this configuration; it directly modifies the Argo CD configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n  resource.sensitive.mask.annotations: openshift.io/token-secret.value, api-key\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Values with Git Directory Generator (YAML)\nDESCRIPTION: Illustrates how to use the `values` field within the Git Directory Generator to define custom key-value pairs. These values, accessible via the `values.` prefix (e.g., `{{.values.cluster}}`), can be interpolated from generated path parameters or be static strings, and subsequently used within the Application `template` section.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/example/example-repo.git\n      revision: HEAD\n      directories:\n      - path: '*'\n      values:\n        cluster: '{{.path.basename}}'\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/example/example-repo.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.values.cluster}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Service in Argo CD Notifications ConfigMap (YAML)\nDESCRIPTION: Defines the configuration for the GitHub notification service within the `argocd-notifications-cm` ConfigMap. It specifies the GitHub App ID, installation ID, and references the private key stored in a Kubernetes secret (`$github-privateKey`). An optional `enterpriseBaseURL` can be added for GitHub Enterprise.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/github.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.github: |\n    appID: <app-id>\n    installationID: <installation-id>\n    privateKey: $github-privateKey\n```\n\n----------------------------------------\n\nTITLE: Defining a Project-Scoped Repository (Declarative)\nDESCRIPTION: Shows the declarative approach to define a Git repository scoped to an Argo CD project using a Kubernetes Secret. The crucial element is the `stringData.project` field, which specifies the project (`my-project1`) this repository belongs to. This method allows managing project repositories via GitOps.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    argocd.argoproj.io/secret-type: repository\ntype: Opaque\nstringData:\n  project: my-project1                                     # Project scoped \n  name: argocd-example-apps\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: ****\n  password: ****\n```\n\n----------------------------------------\n\nTITLE: Preventing Resource Deletion on App Deletion (YAML)\nDESCRIPTION: Uses the `argocd.argoproj.io/sync-options: Delete=false` annotation on a resource's metadata. This ensures that the annotated resource is not deleted when the managing Argo CD Application is deleted, useful for preserving stateful resources like Persistent Volume Claims (PVCs).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Delete=false\n```\n\n----------------------------------------\n\nTITLE: Setting Application Namespace Parameter - Argo CD CLI - Shell\nDESCRIPTION: This example uses the '--namespace' flag to assign or override the target namespace of an Argo CD application while setting parameters. Dependencies are the correct CLI installation and sufficient permissions to update the application. Inputs are the application name, desired parameters, and the target namespace. The main effect is to deploy or update the application within the specified Kubernetes namespace. Namespace must exist in the target cluster and be accessible by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_set.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nargocd app set my-app --parameter key1=value1 --parameter key2=value2 --namespace my-namespace\n```\n\n----------------------------------------\n\nTITLE: Example `argocd-ssh-known-hosts-cm.yaml` Configuration\nDESCRIPTION: This YAML snippet shows an example structure for the `argocd-ssh-known-hosts-cm` ConfigMap. This ConfigMap allows Argo CD to store and trust the public SSH keys of Git repository hosts, enabling secure connections without manual host key verification prompts. The placeholder indicates where the actual content of the file is included.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-ssh-known-hosts-cm-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/argocd-ssh-known-hosts-cm.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Importing a GnuPG Public Key Using ArgoCD CLI in Bash\nDESCRIPTION: Imports a new GnuPG public key into ArgoCD for commit signature verification using the CLI. The key must be provided either in binary or ASCII-armored format at the specified file path. Requires appropriate RBAC permissions to create gpgkeys resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd gpg add --from <path-to-key>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitea SCM Provider Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Presents the YAML required to use the Gitea SCM provider in an ApplicationSet generator. Configurable fields include Gitea owner, instance API URL, allBranches toggle, and Secret for API authentication. Currently, label filtering is not supported. Setup requires the Gitea instance to expose its API and, for private repositories, a valid authentication Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      gitea:\n        # The Gitea owner to scan.\n        owner: myorg\n        # The Gitea instance url\n        api: https://gitea.mydomain.com/\n        # If true, scan every branch of every repository. If false, scan only the default branch. Defaults to false.\n        allBranches: true\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: gitea-token\n          key: token\n  template:\n  # ...\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Output from Base Cluster Generator (YAML)\nDESCRIPTION: This snippet shows the example parameter sets generated by the initial `clusters` generator in the first ApplicationSet example. It identifies two clusters, `staging` (https://1.2.3.4) and `production` (https://2.4.6.8), providing their server addresses and default `kafka` and `redis` values ('true' and 'false' respectively).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'true'\n  values.redis: 'false'\n  \n- name: production\n  server: https://2.4.6.8\n  values.kafka: 'true'\n  values.redis: 'false'\n```\n\n----------------------------------------\n\nTITLE: Defining a Webhook Notification Template in Argo CD ConfigMap (YAML)\nDESCRIPTION: Configures a notification template (e.g., `github-commit-status`) within the `argocd-notifications-cm` ConfigMap. It links to a specific webhook service (`<webhook-name>`), defines the HTTP `method` (POST, GET, etc.), an optional URL `path` template, and the request `body` template using Go templating. It also shows how to define a trigger that sends this template based on application state.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.github-commit-status: |\n    webhook:\n      <webhook-name>:\n        method: POST # one of: GET, POST, PUT, PATCH. Default value: GET \n        path: <optional-path-template>\n        body: |\n          <optional-body-template>\n  trigger.<trigger-name>: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [github-commit-status]\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgoCD Notifications for Running Application Sync in YAML\nDESCRIPTION: This template defines the structure and content for notifications sent when an application sync operation starts running. It provides formats for email, Slack, and Microsoft Teams with application details, start time, and relevant links.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/catalog.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemail:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n        \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }},\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n      \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n    }\n    {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":{{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.\n\n```\n\n----------------------------------------\n\nTITLE: Example Status for Multi-Source Argo CD Application (YAML)\nDESCRIPTION: Illustrates the structure of the `status.operationState.syncResult` field in a multi-source Argo CD Application, where commit revisions are stored within a `revisions` array instead of a single `revision` field. This structure necessitates using index-based access in notification templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  operationState:\n    syncResult:\n      revisions:\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n```\n\n----------------------------------------\n\nTITLE: Using ArgoCD CLI to add SSH known hosts\nDESCRIPTION: Command syntax for adding SSH known host entries to ArgoCD repository servers. The command requires the --batch flag and can optionally read from a file or stdin.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_add-ssh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cert add-ssh --batch [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Google Cloud Source Repo with Service Account Key using Argo CD CLI (Bash)\nDESCRIPTION: Adds a private Google Cloud Source repository using a Google Cloud service account key. The `--gcp-service-account-key-path` flag specifies the path to the service account key file in JSON format. Ensure the service account has at least `Source Repository Reader` permissions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo add https://source.developers.google.com/p/my-google-cloud-project/r/my-repo --gcp-service-account-key-path service-account-key.json\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `argocd app manifests` (Bash)\nDESCRIPTION: Shows the fundamental command structure for printing application manifests using `argocd app manifests`. Requires the application name (APPNAME) and accepts optional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_manifests.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app manifests APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting Resource Tracking Method in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to select the primary resource tracking method for Argo CD by modifying the `argocd-cm` ConfigMap. Setting the `application.resourceTrackingMethod` key within the `data` section dictates whether Argo CD uses `label`, `annotation+label`, or `annotation` (as shown here) to identify resources belonging to an application. Changes require application sync or waiting for automatic refresh.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_tracking.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  application.resourceTrackingMethod: annotation\n```\n\n----------------------------------------\n\nTITLE: Kustomize Configuration for Argo CD Self-Management - YAML\nDESCRIPTION: This YAML snippet demonstrates a Kustomize configuration for managing Argo CD itself. It uses base Argo CD manifests from a GitHub repository and applies patches for required changes. The snippet showcases how to include additional resources, such as ingress rules, cluster secrets, and repository secrets. It requires Kustomize to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n# additional resources like ingress rules, cluster and repository secrets.\nresources:\n- github.com/argoproj/argo-cd//manifests/cluster-install?ref=stable\n- clusters-secrets.yaml\n- repos-secrets.yaml\n\n# changes to config maps\npatches:\n- path: overlays/argo-cd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting ArgoCD Application with kubectl (Non-Cascade)\nDESCRIPTION: Deletes an ArgoCD application without cascading deletion using `kubectl`.  It first removes the `finalizers` field from the application's metadata before deleting the application object.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/app_deletion.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch app APPNAME  -p '{\"metadata\": {\"finalizers\": null}}' --type merge\nkubectl delete app APPNAME\n```\n\n----------------------------------------\n\nTITLE: Listing Argo CD Notification Command Options - Shell\nDESCRIPTION: This shell snippet provides an enumeration of all available command-line flags for 'argocd admin notifications'. It details customization options for secure connections (e.g., --argocd-repo-server, --tls-server-name), authentication (e.g., --token, --username, --password), and configuration file locations (e.g., --config-map, --secret, --kubeconfig). Each parameter serves to adapt command behavior to different deployment environments or operational requirements. This reference is essential for administrators who need granular control over notification management and secure access to clusters or repo servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n  -h, --help                            help for notifications\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Cluster (minikube)\nDESCRIPTION: This command starts a local Kubernetes cluster using minikube. This allows local testing of the Argo CD deployment. Minikube must be installed before this is run.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Listing GPG keys in JSON format\nDESCRIPTION: This command lists all configured GPG public keys and outputs them in JSON format. The `-o json` option specifies the output format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg_list.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd gpg list -o json\n```\n\n----------------------------------------\n\nTITLE: Configuring AppProject Notifications with Annotation (YAML)\nDESCRIPTION: This snippet illustrates configuring notifications for all applications within a specific Argo CD AppProject. Adding the `notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2` annotation to the AppProject resource ensures that any application belonging to this project will send 'on-sync-succeeded' trigger notifications to the specified Slack channels. This provides a way to configure notifications consistently for a group of applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/subscriptions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n```\n\n----------------------------------------\n\nTITLE: Example SSH Negotiation Error (Text)\nDESCRIPTION: Illustrates the error message received when an SSH connection fails because the client (with 'ssh-rsa' disabled) and server cannot agree on a host key algorithm. This typically occurs if the server only offers the deprecated 'ssh-rsa' algorithm.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.1-2.2.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ ssh -oHostKeyAlgorithms=-ssh-rsa vs-ssh.visualstudio.com\nUnable to negotiate with 20.42.134.1 port 22: no matching host key type found. Their offer: ssh-rsa\n```\n\n----------------------------------------\n\nTITLE: Git Generator with values field\nDESCRIPTION: This YAML snippet illustrates passing additional key-value pairs using the `values` field within the Git generator. The example uses `index .path.segments` to construct a `base_dir` parameter, dynamically setting the source path for the application template. Requires a compatible Git repository structure.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      files:\n      - path: \"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\"\n      values:\n        base_dir: \"{{index .path.segments 0}}/{{index .path.segments 1}}/{{index .path.segments 2}}\"\n  template:\n    metadata:\n      name: '{{.cluster.name}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: \"{{.values.base_dir}}/apps/guestbook\"\n      destination:\n        server: '{{.cluster.address}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Generated Repository Metadata Variables for ApplicationSet\nDESCRIPTION: This YAML snippet outlines the set of variables available in the template, which are automatically generated from repository metadata. These include repository name, URL, branch, commit hashes, labels, and normalized branch names, enabling dynamic application configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n/* Generated variables include:\n- organization: The repository's organization name.\n- repository: The repository name.\n- url: Clone URL.\n- branch: Default branch name.\n- sha: Commit SHA.\n- short_sha: 8-character abbreviated SHA.\n- short_sha_7: 7-character abbreviated SHA.\n- labels: Comma-separated labels or topics.\n- branchNormalized: Lowercase, alphanumeric, hyphens, and dots version of branch.\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex SAML Connector for AWS SSO in YAML\nDESCRIPTION: Defines the Dex configuration for SAML authentication with AWS SSO, including setting up the logger, connector type, SSO URL, CA data, entity issuer, redirect URI, and attribute mappings. Reads CA certificates in base64 format and specifies user attributes for email and groups.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/identity-center.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndex.config: |\n  logger:\n    level: debug\n    format: json\n  connectors:\n  - type: saml\n    id: aws\n    name: \"AWS IAM Identity Center\"\n    config:\n      ssoURL: https://portal.sso.yourregion.amazonaws.com/saml/assertion/id\n      caData: <CA cert (IAM Identity Center Certificate of Identity Center APP SAML) passed through base64 encoding>\n      entityIssuer: https://external.path.to.argocd.io/api/dex/callback\n      redirectURI: https://external.path.to.argocd.io/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: groups\n```\n\n----------------------------------------\n\nTITLE: Options for output format in `argocd cluster get`\nDESCRIPTION: This snippet lists options for formatting the output of the command, including JSON, YAML, wide, or server-specific details, with the default set to YAML. The flags enable customization of the command's output presentation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_get.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of: json|yaml|wide|server (default \"yaml\")\n```\n\n----------------------------------------\n\nTITLE: Define argocd app actions run command syntax (Shell)\nDESCRIPTION: Describes the fundamental structure of the `argocd app actions run` command. It requires the application name (`APPNAME`) and the action name (`ACTION`) to be performed, optionally accepting flags for further specification. This is the base format for executing actions on Argo CD resources via the CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions_run.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd app actions run APPNAME ACTION [flags]\n```\n\n----------------------------------------\n\nTITLE: Downloading specific Argo CD CLI version on Linux using curl\nDESCRIPTION: Commands to download and install a specific version of the Argo CD CLI on Linux systems using curl.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=<TAG> # Select desired TAG from https://github.com/argoproj/argo-cd/releases\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: ArgoCD Deletion Finalizer YAML Example\nDESCRIPTION: Shows the YAML configuration for ArgoCD deletion finalizers, including foreground and background cascading deletion options.  This configuration enables cascading deletes when the application is deleted.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/app_deletion.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  finalizers:\n    # The default behaviour is foreground cascading deletion\n    - resources-finalizer.argocd.argoproj.io\n    # Alternatively, you can use background cascading deletion\n    # - resources-finalizer.argocd.argoproj.io/background\n```\n\n----------------------------------------\n\nTITLE: Verifying SBOM with SLSA\nDESCRIPTION: This bash script verifies an SBOM using slsa-verifier. It utilizes `--provenance-path` to specify the attestation file and `--source-uri` and `--source-tag` to specify the source repository and tag. It verifies the integrity of the SBOM. Requires slsa-verifier.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nslsa-verifier verify-artifact sbom.tar.gz \\\n  --provenance-path argocd-sbom.intoto.jsonl \\\n  --source-uri github.com/argoproj/argo-cd \\\n  --source-tag v2.7.0\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for argocd proj deny-namespace-resource (Shell)\nDESCRIPTION: Displays the general syntax for the `argocd proj deny-namespace-resource` command. It requires providing the project name, the API group, and the kind of the resource as positional arguments. Optional flags are indicated by `[flags]`. This command adds the specified resource to the deny list by default, or removes it from the allow list if the `--list allow` flag is used.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_deny-namespace-resource.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj deny-namespace-resource PROJECT GROUP KIND [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD App Sync Success Notification Template (YAML)\nDESCRIPTION: This YAML snippet defines the structure and content of the 'app-sync-succeeded' notification template for Argo CD. It uses Go templating to dynamically generate messages for various channels (email, message, Slack, Teams) based on the application status and context, providing details like application name, sync status, repository URL(s), and conditions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/catalog.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemail:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n        \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }},\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n      \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n    }\n    {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":{{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating Argo CD CLI through Reverse Proxies (Shell)\nDESCRIPTION: Demonstrates how to use the `argocd login` command with the `--header` flag to pass custom HTTP headers (e.g., 'x-token1', 'x-token2'). This is necessary for authenticating through intermediate reverse proxies that require specific headers. The flag can be repeated or headers can be comma-separated.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ argocd login <host>:<port> --header 'x-token1:foo' --header 'x-token2:bar' # can be repeated multiple times\n$ argocd login <host>:<port> --header 'x-token1:foo,x-token2:bar' # headers can also be comma separated\n```\n\n----------------------------------------\n\nTITLE: Configuring preservedFields in ApplicationSet YAML\nDESCRIPTION: YAML snippet showing how to configure ApplicationSet to preserve specific annotations and labels during reconciliation, allowing external modifications to be retained.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  preservedFields:\n    annotations: [\"my-custom-annotation\"]\n    labels: [\"my-custom-label\"]\n```\n\n----------------------------------------\n\nTITLE: Execute argocd repo list Command (CLI)\nDESCRIPTION: This snippet shows the basic syntax for the `argocd repo list` command. It is used to display a list of repositories configured in Argo CD. Optional flags can be added to modify the output or behavior, such as changing the output format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_list.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nargocd repo list [flags]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to NewRelic Notifications - Application\nDESCRIPTION: This YAML snippet illustrates the configuration of an Argo CD Application resource to subscribe to NewRelic notifications.  The `notifications.argoproj.io/subscribe.<trigger-name>.newrelic` annotation specifies the NewRelic application ID (`<app-id>`) for notifications triggered by `<trigger-name>`. Ensure you replace `<trigger-name>` and `<app-id>` with the appropriate values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/newrelic.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.newrelic: <app-id>\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Certificates to ArgoCD\nDESCRIPTION: This command adds TLS certificate data to ArgoCD for a specified repository server.  The server name is a required argument. TLS certificate data can be read from stdin or from a file specified using the `--from` flag. The `--upsert` flag allows replacing existing certificates if they differ from the input.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_add-tls.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cert add-tls SERVERNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Restarting Non-HA Redis component - Bash\nDESCRIPTION: This bash command restarts the non-HA Redis deployment in Argo CD. It's a necessary step in rotating the Redis secret, ensuring that the Redis instance uses the newly generated credentials after the old secret is deleted.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment argocd-redis\n```\n\n----------------------------------------\n\nTITLE: Examples of using `argocd cluster get` to retrieve cluster info\nDESCRIPTION: Examples demonstrate how to invoke the command with specific server URLs or contexts, showing practical usage scenarios for fetching cluster details such as the cluster endpoint or configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_get.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster get https://12.34.567.89\nargocd cluster get in-cluster\n```\n\n----------------------------------------\n\nTITLE: Checking RBAC permissions using the default ConfigMap - argocd\nDESCRIPTION: This example checks RBAC permissions using the default `argocd-rbac-cm` ConfigMap in a specific namespace. The `--namespace` flag is used to specify the namespace where the ConfigMap is located.  The Kubernetes context must point to the cluster Argo CD is running in. The `argocd` CLI tool is required.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_can.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings rbac can some:role create application 'default/app' --namespace argocd\n```\n\n----------------------------------------\n\nTITLE: Re-enabling ssh-rsa via SSH Config (ssh-config)\nDESCRIPTION: Provides an example configuration snippet for the SSH client configuration file (`~/.ssh/config`) to selectively re-enable the 'ssh-rsa' algorithm for both host key (`HostkeyAlgorithms`) and public key (`PubkeyAcceptedAlgorithms`) authentication for a specific host identified as 'old-host'. This is a temporary workaround for connecting to legacy servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.1-2.2.md#_snippet_3\n\nLANGUAGE: ssh-config\nCODE:\n```\nHost old-host\n    HostkeyAlgorithms +ssh-rsa\n    PubkeyAcceptedAlgorithms +ssh-rsa\n```\n\n----------------------------------------\n\nTITLE: Configuring Mattermost Service in Argo CD Notifications ConfigMap (YAML)\nDESCRIPTION: This YAML snippet shows how to define the Mattermost notification service within the `argocd-notifications-cm` ConfigMap. It specifies the Mattermost API URL and references a token stored in a Kubernetes Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/mattermost.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.mattermost: |\n    apiURL: <api-url>\n    token: $mattermost-token\n\n```\n\n----------------------------------------\n\nTITLE: Restricting Applications to Project-Scoped Clusters\nDESCRIPTION: Shows how to modify the `spec` of an `AppProject` resource to enforce that applications within this project can only be deployed to clusters that are explicitly defined as project-scoped for this project. Setting `permitOnlyProjectScopedClusters` to `true` enables this restriction.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  permitOnlyProjectScopedClusters: true\n```\n\n----------------------------------------\n\nTITLE: Argo CD Generate-Spec Command Options\nDESCRIPTION: Comprehensive list of command-line flags for the 'generate-spec' command in Argo CD. These options configure application specifications including source repositories, destination clusters, sync policies, and tool-specific settings for Helm, Kustomize, and Jsonnet.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_app_generate-spec.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-empty                                Set allow zero live resources when sync is automated\n      --annotations stringArray                    Set metadata annotations (e.g. example=value)\n      --auto-prune                                 Set automatic pruning when sync is automated\n      --config-management-plugin string            Config management plugin name\n      --dest-name string                           K8s cluster Name (e.g. minikube)\n      --dest-namespace string                      K8s target namespace\n      --dest-server string                         K8s cluster URL (e.g. https://kubernetes.default.svc)\n      --directory-exclude string                   Set glob expression used to exclude files from application source path\n      --directory-include string                   Set glob expression used to include files from application source path\n      --directory-recurse                          Recurse directory\n      --dry-source-path string                     Path in repository to the app directory for the dry source\n      --dry-source-repo string                     Repository URL of the app dry source\n      --dry-source-revision string                 Revision of the app dry source\n      --env string                                 Application environment to monitor\n  -f, --file string                                Filename or URL to Kubernetes manifests for the app\n      --helm-api-versions stringArray              Helm api-versions (in format [group/]version/kind) to use when running helm template (Can be repeated to set several values: --helm-api-versions traefik.io/v1alpha1/TLSOption --helm-api-versions v1/Service). If not set, use the api-versions from the destination cluster\n      --helm-chart string                          Helm Chart name\n      --helm-kube-version string                   Helm kube-version to use when running helm template. If not set, use the kube version from the destination cluster\n      --helm-namespace string                      Helm namespace to use when running helm template. If not set, use app.spec.destination.namespace\n      --helm-pass-credentials                      Pass credentials to all domain\n      --helm-set stringArray                       Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2)\n      --helm-set-file stringArray                  Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2)\n      --helm-set-string stringArray                Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2)\n      --helm-skip-crds                             Skip helm crd installation step\n      --helm-skip-schema-validation                Skip helm schema validation step\n      --helm-skip-tests                            Skip helm test manifests installation step\n      --helm-version string                        Helm version\n  -h, --help                                       help for generate-spec\n      --hydrate-to-branch string                   The branch to hydrate the app to\n      --ignore-missing-components                  Ignore locally missing component directories when setting Kustomize components\n      --ignore-missing-value-files                 Ignore locally missing valueFiles when setting helm template --values\n  -i, --inline                                     If set then generated resource is written back to the file specified in --file flag\n      --jsonnet-ext-var-code stringArray           Jsonnet ext var\n      --jsonnet-ext-var-str stringArray            Jsonnet string ext var\n      --jsonnet-libs stringArray                   Additional jsonnet libs (prefixed by repoRoot)\n      --jsonnet-tla-code stringArray               Jsonnet top level code arguments\n      --jsonnet-tla-str stringArray                Jsonnet top level string arguments\n      --kustomize-api-versions stringArray         api-versions (in format [group/]version/kind) to use when running helm template (Can be repeated to set several values: --helm-api-versions traefik.io/v1alpha1/TLSOption --helm-api-versions v1/Service). If not set, use the api-versions from the destination cluster. Only applicable when Helm is enabled for Kustomize builds\n      --kustomize-common-annotation stringArray    Set common labels in Kustomize\n      --kustomize-common-label stringArray         Set common labels in Kustomize\n      --kustomize-force-common-annotation          Force common annotations in Kustomize\n      --kustomize-force-common-label               Force common labels in Kustomize\n      --kustomize-image stringArray                Kustomize images (e.g. --kustomize-image node:8.15.0 --kustomize-image mysql=mariadb,alpine@sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d)\n      --kustomize-kube-version string              kube-version to use when running helm template. If not set, use the kube version from the destination cluster. Only applicable when Helm is enabled for Kustomize builds\n      --kustomize-label-include-templates          Apply common label to resource templates\n      --kustomize-label-without-selector           Do not apply common label to selectors. Also do not apply label to templates unless --kustomize-label-include-templates is set\n      --kustomize-namespace string                 Kustomize namespace\n      --kustomize-replica stringArray              Kustomize replicas (e.g. --kustomize-replica my-development=2 --kustomize-replica my-statefulset=4)\n      --kustomize-version string                   Kustomize version\n  -l, --label stringArray                          Labels to apply to the app\n      --name string                                A name for the app, ignored if a file is set (DEPRECATED)\n      --nameprefix string                          Kustomize nameprefix\n      --namesuffix string                          Kustomize namesuffix\n  -o, --output string                              Output format. One of: json|yaml (default \"yaml\")\n  -p, --parameter stringArray                      set a parameter override (e.g. -p guestbook=image=example/guestbook:latest)\n      --path string                                Path in repository to the app directory, ignored if a file is set\n      --plugin-env stringArray                     Additional plugin envs\n      --project string                             Application project name\n      --ref string                                 Ref is reference to another source within sources field\n      --release-name string                        Helm release-name\n      --repo string                                Repository URL, ignored if a file is set\n      --revision string                            The tracking source branch, tag, commit or Helm chart version the application will sync to\n      --revision-history-limit int                 How many items to keep in revision history (default 10)\n      --self-heal                                  Set self healing when sync is automated\n      --set-finalizer                              Sets deletion finalizer on the application, application resources will be cascaded on deletion\n      --source-name string                         Name of the source from the list of sources of the app.\n      --sync-option Prune=false                    Add or remove a sync option, e.g add Prune=false. Remove using `!` prefix, e.g. `!Prune=false`\n      --sync-policy string                         Set the sync policy (one of: manual (aliases of manual: none), automated (aliases of automated: auto, automatic))\n      --sync-retry-backoff-duration duration       Sync retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s)\n      --sync-retry-backoff-factor int              Factor multiplies the base duration after each failed sync retry (default 2)\n      --sync-retry-backoff-max-duration duration   Max sync retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s)\n      --sync-retry-limit int                       Max number of allowed sync retries\n      --sync-source-branch string                  The branch from which the app will sync\n      --sync-source-path string                    The path in the repository from which the app will sync\n      --validate                                   Validation of repo and cluster (default true)\n      --values stringArray                         Helm values file(s) to use\n      --values-literal-file string                 Filename or URL to import as a literal Helm values block\n```\n\n----------------------------------------\n\nTITLE: Options for argocd cluster Command (Shell)\nDESCRIPTION: Lists the command-line flags specifically available for the `argocd cluster` command and its subcommands. These options control aspects like user impersonation, certificate authentication, TLS verification skipping, kubeconfig context selection, connection details (proxy, timeout), and basic authentication credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n--as string                      Username to impersonate for the operation\n--as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n--as-uid string                  UID to impersonate for the operation\n--certificate-authority string   Path to a cert file for the certificate authority\n--client-certificate string      Path to a client certificate file for TLS\n--client-key string              Path to a client key file for TLS\n--cluster string                 The name of the kubeconfig cluster to use\n--context string                 The name of the kubeconfig context to use\n--disable-compression            If true, opt-out of response compression for all requests to the server\n-h, --help                           help for cluster\n--insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n--kubeconfig string              Path to a kube config. Only required if out-of-cluster\n-n, --namespace string               If present, the namespace scope for this CLI request\n--password string                Password for basic authentication to the API server\n--proxy-url string               If provided, this URL will be used to connect via proxy\n--request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n--tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n--token string                   Bearer token for authentication to the API server\n--user string                    The name of the kubeconfig user to use\n--username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Subscribing an Argo CD Application to GitHub Notifications (YAML)\nDESCRIPTION: Illustrates how to subscribe an Argo CD Application to GitHub notifications for a specific event trigger. This is achieved by adding the `notifications.argoproj.io/subscribe.<trigger-name>.github` annotation to the Application's metadata. Replace `<trigger-name>` with a valid trigger name (e.g., `on-sync-succeeded`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/github.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.github: \"\"\n```\n\n----------------------------------------\n\nTITLE: Starting Argo CD ApplicationSet Controller CLI Command in Bash\nDESCRIPTION: This snippet shows the basic CLI invocation syntax of the Argo CD ApplicationSet controller command. It is used to start the ApplicationSet controller with optional flags to control runtime behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-applicationset-controller.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd-applicationset-controller [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Schema Validation Skipping in Argo CD via CLI\nDESCRIPTION: This snippet demonstrates how to disable schema validation for Helm charts in Argo CD using the CLI option 'argocd app set' with the '--helm-skip-schema-validation' flag. It allows users to bypass Helm's 'values.schema.json' checks when deploying.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set helm-guestbook --helm-skip-schema-validation\n```\n\n----------------------------------------\n\nTITLE: Removing All Certificates and SSH Keys - ArgoCD\nDESCRIPTION: This command removes all certificates and SSH known host entries associated with the specified server from ArgoCD.  The server name (cd.example.com) is passed as an argument.  No `--cert-type` is specified, meaning all types of certificates/keys are removed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nargocd cert rm cd.example.com\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ArgoCD Cluster Stats Command\nDESCRIPTION: Examples of how to use the ArgoCD admin cluster stats command in different scenarios, including displaying stats for all clusters, for a specific shard, or for a specific cluster in a multi-cluster environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_stats.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#Display stats and shards for clusters \nargocd admin cluster stats\n\n#Display Cluster Statistics for a Specific Shard\nargocd admin cluster stats --shard=1\n\n#In a multi-cluster environment to print stats for a specific cluster say(target-cluster)\nargocd admin cluster stats target-cluster\n```\n\n----------------------------------------\n\nTITLE: Applying Namespace Customization Patch for Argo CD Installation Using Kustomize in YAML\nDESCRIPTION: This YAML snippet shows how to customize the Argo CD installation namespace via Kustomize by applying a patch to the ClusterRoleBinding resource. The patch replaces the namespace field in the ClusterRoleBinding's subjects to match the custom namespace, ensuring the ServiceAccount permissions align with the deployment namespace. This prevents permission errors when deploying Argo CD outside the default 'argocd' namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/installation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: <your-custom-namespace>\nresources:\n  - https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.2/manifests/install.yaml\n\npatches:\n  - patch: |-\n      - op: replace\n        path: /subjects/0/namespace\n        value: <your-custom-namespace>\n    target:\n      kind: ClusterRoleBinding\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom TLS Certificates with argocd-tls-certs-cm ConfigMap in Kubernetes YAML\nDESCRIPTION: This YAML example demonstrates how to create a ConfigMap to store custom TLS certificates for Git repositories. The ConfigMap is named 'argocd-tls-certs-cm' and contains a self-signed certificate for 'server.example.com' in PEM format. This configuration enables Argo CD to establish secure connections to repositories using non-standard certificates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-tls-certs-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  server.example.com: |\n    -----BEGIN CERTIFICATE-----\n    MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL\n    BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE\n    BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0\n    c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda\n    Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT\n    YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES\n    MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi\n    MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5\n    NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc\n    CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u\n    P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G\n    ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+\n    YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E\n    Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko\n    Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J\n    kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u\n    kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO\n    gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7\n    bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86\n    r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/\n    BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn\n    Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx\n    CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2\n    XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT\n    +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr\n    d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO\n    OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so\n    6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr\n    jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8\n    9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W\n    +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK\n    XWyb96wrUlv+E8I=\n    -----END CERTIFICATE-----\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Application Resource Status Requiring Deletion Approval - Argo CD - YAML\nDESCRIPTION: This YAML snippet shows an entry for a resource in the Argo CD application's status.resources list, illustrating the new requiresDeletionApproval boolean field proposed in this enhancement. The structure includes resource properties such as health.status, kind, name, namespace, status, version, and new approval flags requiresPruning and requiresDeletionApproval. Setting requiresDeletionApproval to true signals that deleting this resource requires explicit user approval. This field must be recognized by the Argo CD UI and CLI, which should visually indicate its presence so users know which resources need manual confirmation. There are no external dependencies, but this structure assumes an Argo CD version supporting the proposed enhancement. Inputs include standard Kubernetes resource identifiers; output is expanded status tracking within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/resource-deletion-with-approval.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- health:\n    status: Healthy\n  kind: Service\n  name: guestbook-ui\n  namespace: default\n  status: OutOfSync\n  version: v1\n  requiresPruning: true\n  requiresDeletionApproval: true # new field that indicates that deletion approval is required\n```\n\n----------------------------------------\n\nTITLE: Requiring Confirmation for Resource Pruning in Argo CD (YAML)\nDESCRIPTION: Applies the `argocd.argoproj.io/sync-options: Prune=confirm` annotation to a resource's metadata. This requires manual confirmation before Argo CD prunes the resource during sync. Confirmation can be given via the Argo CD UI, CLI, or by manually adding the `argocd.argoproj.io/deletion-approved: <ISO formatted timestamp>` annotation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Prune=confirm\n```\n\n----------------------------------------\n\nTITLE: Updating Repository Target Revision with Merge Patch - Bash\nDESCRIPTION: This snippet demonstrates updating the target revision of an application's repository using a merge patch. The patch body is provided as a JSON object targeting the 'spec.source.targetRevision' field. The '--type merge' flag indicates that a JSON merge patch is applied rather than a JSON patch array. Must have Argo CD CLI installed and proper server authentication. Inputs consist of the application name and merge patch JSON; output is the application updated to track the specified revision.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_patch.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd app patch myapplication --patch '{\"spec\": { \"source\": { \"targetRevision\": \"master\" } }}' --type merge\n```\n\n----------------------------------------\n\nTITLE: Running argocd admin cluster namespaces enable-namespaced-mode\nDESCRIPTION: This command enables namespaced mode for clusters based on a specified pattern. It's crucial for managing resources at the namespace level within a cluster. The PATTERN argument is required.  It uses a variety of flags for authentication and configuration. Requires Argo CD CLI to be installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin cluster namespaces enable-namespaced-mode PATTERN [flags]\n```\n\n----------------------------------------\n\nTITLE: Argo CD ConfigManagementPlugin CRD example\nDESCRIPTION: This YAML snippet defines a ConfigManagementPlugin as a Custom Resource Definition (CRD). The CRD specifies the plugin's name, image, version, and commands for initialization and manifest generation. This is an alternative approach to configuring plugins by patching the `argocd-repo-server` manifest.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: cdk8s\nspec:\n  name: cdk8s\n  image: docker.ui/cdk8s/cdk8s:latest\n  version: v1.0\n  init:\n    command: [cdk8s, init]\n  generate:\n    command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"]\n    discovery:\n    find:\n    - command: [find . -name main.ts]\n      glob: \"**/*/main.ts\"\n      check:\n    - command: [-f ./main.ts]\n      glob: \"main.ts\"\n```\n\n----------------------------------------\n\nTITLE: Storing Google Chat Webhook URL in Kubernetes Secret (YAML)\nDESCRIPTION: This Kubernetes Secret securely stores the Google Chat webhook URL, preventing it from being exposed in configuration files. The webhook URL is used to send notifications to a specific Google Chat space.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/googlechat.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  space-webhook-url: https://chat.googleapis.com/v1/spaces/<space_id>/messages?key=<key>&token=<token>  \n```\n\n----------------------------------------\n\nTITLE: Using Ignore Missing Value Files Option with Helm in Argo CD\nDESCRIPTION: A configuration that enables ignoring missing value files during Helm template expansion. This is useful for implementing default/override patterns, where some value files might be optional.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  helm:\n    valueFiles:\n    - values-common.yaml\n    - values-optional-override.yaml\n    ignoreMissingValueFiles: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Webhook and Template in Argo CD (YAML)\nDESCRIPTION: This ConfigMap snippet sets up a webhook service `slack_webhook` pointing to a Slack Incoming Webhook URL and setting the `Content-Type` header to `application/json`. It also defines a template `send-slack` which uses this service, specifies the `POST` method, and constructs a JSON payload according to Slack's attachment format, dynamically populating fields like application name, URL, sync status, and repository using Go templating based on the Argo CD application context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.slack_webhook: |\n    url: https://hooks.slack.com/services/xxxxx\n    headers:\n    - name: Content-Type\n      value: application/json\n\n  template.send-slack: |\n    webhook:\n      slack_webhook:\n        method: POST\n        body: |\n          {\n            \"attachments\": [{\n              \"title\": \"{{.app.metadata.name}}\",\n              \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n              \"color\": \"#18be52\",\n              \"fields\": [{\n                \"title\": \"Sync Status\",\n                \"value\": \"{{.app.status.sync.status}}\",\n                \"short\": true\n              }, {\n                \"title\": \"Repository\",\n                \"value\": \"{{.app.spec.source.repoURL}}\",\n                \"short\": true\n              }]\n            }]\n          }\n```\n\n----------------------------------------\n\nTITLE: ConfigMap for TokenRef Strict Mode - YAML\nDESCRIPTION: This YAML snippet shows how to enable strict mode for `tokenRef` in ApplicationSets.  Setting `applicationsetcontroller.tokenref.strict.mode` to `true` enforces that referenced secrets must have the label `argocd.argoproj.io/secret-type=scm-creds`, preventing access to arbitrary secrets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n    applicationsetcontroller.tokenref.strict.mode: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Example argocd-cm.yaml Configuration\nDESCRIPTION: This YAML snippet shows an example configuration for an `argocd-cm.yaml` file. This file likely contains configuration settings for Argo CD, such as parameters related to various features, authentication methods, or other aspects of the application's operation.  The specific settings and their purposes would depend on the actual content of the `argocd-cm.yaml` file, which is included in the file via a placeholder.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/argocd-cm.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Alertmanager Configuration\nDESCRIPTION: This example shows a basic Prometheus Alertmanager configuration. It defines a route for grouping alerts, setting intervals, and specifying a receiver. The receiver uses a webhook to send alerts to a specified URL. Note that 'send_resolved' is set to false to avoid unnecessary recovery notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'default'\nreceivers:\n- name: 'default'\n  webhook_configs:\n  - send_resolved: false\n    url: 'http://10.5.39.39:10080/api/alerts/webhook'\n```\n\n----------------------------------------\n\nTITLE: Generating Repository Specification for Various Repository Types with 'argocd admin repo generate-spec' (Bash)\nDESCRIPTION: This snippet provides multiple examples demonstrating how to use the 'argocd admin repo generate-spec' command to generate declarative configurations for different types of repositories, including SSH, HTTPS, Helm, and OCI repositories, with various authentication methods and configuration options. It helps automate repository management in Argo CD setups.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_repo_generate-spec.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin repo generate-spec git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa\n\n# Add a Git repository via SSH on a non-default port\nargocd admin repo generate-spec ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa\n\n# Add a private Git repository via HTTPS with username/password and TLS client certificates\nargocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n\n# Add a private Git BitBucket Data Center repo via HTTPS with bearer token\nargocd admin repo generate-spec https://bitbucket.example.com/scm/proj/repo --bearer-token secret-token\n\n# Add a private Git repo via HTTPS with username/password and skipping server verification\nargocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification\n\n# Add a public Helm repository named 'stable'\nargocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable\n\n# Add a private Helm repository named 'stable'\nargocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable --username test --password test\n\n# Add a private Helm OCI-based repository named 'stable'\nargocd admin repo generate-spec helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test\n```\n\n----------------------------------------\n\nTITLE: Argocd-applicationset-controller CLI Options for Controller Configuration in Bash\nDESCRIPTION: This snippet details the extensive command-line flags supported by the 'argocd-applicationset-controller' command, enabling users to configure various aspects of the ApplicationSet controller. Flags include those for specifying SCM providers, concurrency limits, authentication methods, TLS certificates, leader election, logging, metrics, webhook settings, and sync policies. The options influence controller connectivity, security, operational parameters, and debugging capabilities. Dependencies include a configured Kubernetes environment and optionally configured SCM systems. Inputs are provided through the CLI; outputs include running controller processes with applied settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-applicationset-controller.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --allowed-scm-providers strings           The list of allowed custom SCM provider API URLs. This restriction does not apply to SCM or PR generators which do not accept a custom API URL. (Default: Empty = all)\n      --applicationset-namespaces strings       Argo CD applicationset namespaces\n      --argocd-repo-server string               Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --as string                               Username to impersonate for the operation\n      --as-group stringArray                    Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                           UID to impersonate for the operation\n      --certificate-authority string            Path to a cert file for the certificate authority\n      --client-certificate string               Path to a client certificate file for TLS\n      --client-key string                       Path to a client key file for TLS\n      --cluster string                          The name of the kubeconfig cluster to use\n      --concurrent-reconciliations int          Max concurrent reconciliations limit for the controller (default 10)\n      --context string                          The name of the kubeconfig context to use\n      --debug                                   Print debug logs. Takes precedence over loglevel\n      --disable-compression                     If true, opt-out of response compression for all requests to the server\n      --dry-run                                 Enable dry run mode\n      --enable-leader-election                  Enable leader election for controller manager. Enabling this will ensure there is only one active controller manager.\n      --enable-new-git-file-globbing            Enable new globbing in Git files generator.\n      --enable-policy-override                  For security reason if 'policy' is set, it is not possible to override it at applicationSet level. 'allow-policy-override' allows user to define their own policy (default true)\n      --enable-progressive-syncs                Enable use of the experimental progressive syncs feature.\n      --enable-scm-providers                    Enable retrieving information from SCM providers, used by the SCM and PR generators (Default: true) (default true)\n  -h, --help                                    help for argocd-applicationset-controller\n      --insecure-skip-tls-verify                If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                       Path to a kube config. Only required if out-of-cluster\n      --logformat string                        Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                         Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --metrics-addr string                     The address the metric endpoint binds to. (default \":8080\")\n      --metrics-applicationset-labels strings   List of Application labels that will be added to the argocd_applicationset_labels metric\n  -n, --namespace string                        If present, the namespace scope for this CLI request\n      --password string                         Password for basic authentication to the API server\n      --policy string                           Modify how application is synced between the generator and the cluster. Default is '' (empty), which means AppSets default to 'sync', but they may override that default. Setting an explicit value prevents AppSet-level overrides, unless --allow-policy-override is enabled. Explicit options are: 'sync' (create & update & delete), 'create-only', 'create-update' (no deletion), 'create-delete' (no update)\n      --preserved-annotations strings           Sets global preserved field values for annotations\n      --preserved-labels strings                Sets global preserved field values for labels\n      --probe-addr string                       The address the probe endpoint binds to. (default \":8081\")\n      --proxy-url string                        If provided, this URL will be used to connect via proxy\n      --repo-server-plaintext                   Disable TLS on connections to repo server\n      --repo-server-strict-tls                  Whether to use strict validation of the TLS cert presented by the repo server\n      --repo-server-timeout-seconds int         Repo server RPC call timeout seconds. (default 60)\n      --request-timeout string                  The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --scm-root-ca-path string                 Provide Root CA Path for self-signed TLS Certificates\n      --server string                           The address and port of the Kubernetes API server\n      --tls-server-name string                  If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                            Bearer token for authentication to the API server\n      --token-ref-strict-mode                   Set to true to require secrets referenced by SCM providers to have the argocd.argoproj.io/secret-type=scm-creds label set (Default: false)\n      --user string                             The name of the kubeconfig user to use\n      --username string                         Username for basic authentication to the API server\n      --webhook-addr string                     The address the webhook endpoint binds to. (default \":7000\")\n      --webhook-parallelism-limit int           Number of webhook requests processed concurrently (default 50)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Read-Only RBAC Policy in Argo CD - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Argo CD RBAC policy by editing the argocd-rbac-cm ConfigMap. Setting policy.default to 'role:readonly' ensures all users are granted read-only permissions by default. To apply, insert this section into your ConfigMap manifest and apply it to the cluster; no external dependencies are required beyond a running Argo CD instance. Key parameter: policy.default ('role:readonly') determines the base access level for all users.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.default: role:readonly\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps as SCM Provider in ApplicationSet\nDESCRIPTION: YAML configuration to set up an Azure DevOps connection for an ApplicationSet generator. Includes settings for organization, team project, authentication via Personal Access Token, and options for scanning branches.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      azureDevOps:\n        # The Azure DevOps organization.\n        organization: myorg\n        # URL to Azure DevOps. Optional. Defaults to https://dev.azure.com.\n        api: https://dev.azure.com\n        # If true, scan every branch of eligible repositories. If false, check only the default branch of the eligible repositories. Defaults to false.\n        allBranches: true\n        # The team project within the specified Azure DevOps organization.\n        teamProject: myProject\n        # Reference to a Secret containing the Azure DevOps Personal Access Token (PAT) used for accessing Azure DevOps.\n        accessTokenRef:\n          secretName: azure-devops-scm\n          key: accesstoken\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Refreshing Authentication Token Using Argo CD CLI in Shell\nDESCRIPTION: This snippet shows how to use the 'argocd relogin' command to refresh an expired authentication token for the Argo CD CLI user session. The command can be run with no flags to reinitiate the previous login context or with the '--password' flag to supply a password directly. It supports reinitiating Single Sign-On (SSO) login and updating the server context if the user previously logged in using SSO. Dependencies include having the Argo CD CLI installed and configured. The input consists of optional flags and the command output refreshes access credentials without outputting explicit token data.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_relogin.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd relogin [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Reinitiates the login with previous contexts\nargocd relogin\n\n# Reinitiates the login with password\nargocd relogin --password YOUR_PASSWORD\n\n# Configure direct access using Kubernetes API server\nargocd login cd.argoproj.io --core\n\n# If user logged in with - \"argocd login cd.argoproj.io\" with sso login\n# The command - \"argocd relogin\" will Reinitiates SSO login and updates the server context\n```\n\n----------------------------------------\n\nTITLE: Template for ApplicationSet Resources Using Your Repositories\nDESCRIPTION: This YAML snippet demonstrates how to define a template for ApplicationSet resources that uses parameters generated from repositories. It uses placeholders to inject repository information like URL, branch, and paths, facilitating dynamic application creation based on repository metadata.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - scmProvider:\n    # ...\n  template:\n    metadata:\n      name: '{{ .repository }}'\n    spec:\n      source:\n        repoURL: '{{ .url }}'\n        targetRevision: '{{ .branch }}'\n        path: kubernetes/\n      project: default\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: Assign Application To Project CLI\nDESCRIPTION: This bash command assigns an application to a specific project using the Argo CD CLI. The user must have permissions to access the target project. This command is crucial for organizing and managing applications within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set guestbook-default --project myproject\n```\n\n----------------------------------------\n\nTITLE: Generating Argo CD Auth Token\nDESCRIPTION: This bash command generates an authentication token for a specified user in Argo CD.  If the `--account` flag is omitted, it generates a token for the current user. Replace `<username>` with the target user's username. Requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# if flag --account is omitted then Argo CD generates token for current user\nargocd account generate-token --account <username>\n```\n\n----------------------------------------\n\nTITLE: Configuring aws-auth ConfigMap for IAM Role Mapping - YAML\nDESCRIPTION: Shows the required mapping of an IAM role to a Kubernetes RBAC group in the aws-auth ConfigMap for EKS clusters managed by Argo CD. This enables RBAC mapping for the specified IAM role. Placeholders must be replaced with actual group and role values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  # Other groups and accounts omitted for brevity. Ensure that no other rolearns and/or groups are inadvertently removed, \n  # or you risk borking access to your cluster.\n  #\n  # The group name is a RoleBinding which you use to map to a [Cluster]Role. See https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-binding-examples  \n  mapRoles: |\n    - \"groups\":\n      - \"<GROUP-NAME-IN-K8S-RBAC>\"\n      \"rolearn\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_CLUSTER_ROLE>\"\n      \"username\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_CLUSTER_ROLE>\"\n```\n\n----------------------------------------\n\nTITLE: Argo CD Secret Configuration\nDESCRIPTION: This YAML configuration defines an Argo CD secret.  It is intended to be used for configuring sensitive information within an Argo CD deployment, such as repository credentials or other secrets used by the controller.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-secret-yaml.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{!docs/operator-manual/argocd-secret.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Storing OIDC Client Secret in argocd-secret (Kubernetes YAML)\nDESCRIPTION: This Kubernetes manifest defines a Secret named `argocd-secret` used to store sensitive data for Argo CD, such as an OIDC client secret. The example shows a key `oidc.auth0.clientSecret` holding a base64-encoded secret value. This secret is referenced later in the `argocd-cm` ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-secret\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  ...\n  # The secret value must be base64 encoded **once** \n  # this value corresponds to: `printf \"hello-world\" | base64`\n  oidc.auth0.clientSecret: \"aGVsbG8td29ybGQ=\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Examples of `argocd admin cluster` Subcommands (Shell)\nDESCRIPTION: Illustrates common use cases for `argocd admin cluster` subcommands. Examples include generating declarative configuration for a cluster (`generate-spec`), retrieving the kubeconfig for a specific cluster (`kubeconfig`), and listing the namespaces managed by Argo CD within a cluster (`namespaces`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#Generate declarative config for a cluster\nargocd admin cluster generate-spec my-cluster -o yaml\n\n#Generate a kubeconfig for a cluster named \"my-cluster\" and display it in the console\nargocd admin cluster kubeconfig my-cluster\n\n#Print information namespaces which Argo CD manages in each cluster\nargocd admin cluster namespaces my-cluster \n```\n\n----------------------------------------\n\nTITLE: Basic Usage for Argo CD proj create (bash)\nDESCRIPTION: This snippet shows the fundamental syntax for the `argocd proj create` command. It requires a `PROJECT` name argument and accepts various optional `[flags]` to configure the project's properties.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_create.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj create PROJECT [flags]\n```\n\n----------------------------------------\n\nTITLE: Removing Permissions from Default Project YAML\nDESCRIPTION: This YAML snippet removes all permissions from the default project in Argo CD.  It sets the source repositories and destinations to empty lists, and blacklists all resource kinds. This will deny access to any application that attempts to use it.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: default\nspec:\n  sourceRepos: []\n  sourceNamespaces: []\n  destinations: []\n  namespaceResourceBlacklist:\n  - group: '*'\n    kind: '*'\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Resource Hook with argocd.argoproj.io/hook annotation\nDESCRIPTION: This snippet shows a YAML manifest for a Kubernetes Job resource annotated as a PreSync hook in Argo CD. The annotation ensures the resource is executed at the designated phase before deploying application manifests, enabling custom pre-deployment actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_hooks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: schema-migrate-\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n```\n\n----------------------------------------\n\nTITLE: Storing Plugin Credentials in ArgoCD Secret\nDESCRIPTION: YAML definition for storing plugin authentication tokens in the ArgoCD secret. The token is base64 encoded and must be added to the argocd-secret resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-secret\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  # ...\n  # The secret value must be base64 encoded **once**.\n  # this value corresponds to: `printf \"strong-password\" | base64`.\n  plugin.myplugin.token: \"c3Ryb25nLXBhc3N3b3Jk\"\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Listing all GPG public keys\nDESCRIPTION: This command lists all configured GPG public keys in the default wide format. No specific options are used to modify the output.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg_list.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd gpg list\n```\n\n----------------------------------------\n\nTITLE: Downloading Argo CD CLI for Mac (Intel)\nDESCRIPTION: Command to download the Argo CD CLI binary specifically for Mac Intel (AMD64) architecture.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL -o argocd-darwin-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-amd64\n```\n\n----------------------------------------\n\nTITLE: Argocd repo command flags and options - Shell\nDESCRIPTION: This snippet lists available flags and options for the 'argocd repo' command including authentication, TLS, Kubernetes context selection, proxy configuration, and request controls. These options enable detailed control over how the CLI connects to repositories and interacts with the Argo CD API server or Kubernetes cluster. Key parameters include --username, --password, --token for authentication, --insecure-skip-tls-verify to skip certificate validation, and --kubeconfig to specify cluster config.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for repo\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sync Window Using Argo CD CLI - Shell\nDESCRIPTION: Shows how to remove a sync window from a specified Argo CD project using the CLI. Requires Argo CD CLI to be installed and a valid connection to the desired Argo CD instance. The primary parameters are the project name and the sync window ID (which can be listed using \"argocd proj windows list PROJECT\"). The command only removes the window matching the given ID, with optional flags for authentication and context configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_delete.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj windows delete PROJECT ID [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jsonnet Build Environment Declaratively in Argo CD Application (YAML)\nDESCRIPTION: Shows the declarative YAML syntax within an Argo CD Application resource's `spec.source.directory.jsonnet` section to configure the Jsonnet build environment. It defines external variables (`extVars`), top-level arguments (`tlas`), and shared libraries (`libs`) using Argo CD environment variables like `$ARGOCD_APP_NAME` and `$ARGOCD_APP_NAMESPACE`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/jsonnet.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  directory:\n    jsonnet:\n      extVars:\n      - name: app\n        value: $ARGOCD_APP_NAME\n      tlas:\n        - name: ns\n          value: $ARGOCD_APP_NAMESPACE\n      libs:\n        - vendor\n```\n\n----------------------------------------\n\nTITLE: Generating Cluster Spec with Argo CD CLI\nDESCRIPTION: This command generates declarative configuration for a cluster using the Argo CD CLI.  It takes a context as an argument and supports various flags to configure cluster access, authentication, and resource management options. The generated spec can be output in JSON or YAML format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_generate-spec.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin cluster generate-spec CONTEXT [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing available actions using `argocd app actions list` (Shell Command Example)\nDESCRIPTION: This snippet demonstrates how to list all available actions for a specific application in Argo CD. It provides a clear example command to retrieve actions, specifying the application name as a parameter.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app actions list APPNAME\n```\n\n----------------------------------------\n\nTITLE: Adding Git Repository via SSH with Private Key - Argo CD CLI Shell Example\nDESCRIPTION: This shell snippet demonstrates adding a Git repository to Argo CD using SSH and a private key for authentication, while ignoring the server's SSH host key. Required dependencies: argocd CLI, appropriate access to the target SSH repository, and a private key file (e.g., id_rsa). Inputs include the repository SSH URL and flags for authentication and security; output is the registration of the repository within Argo CD. The '--insecure-ignore-host-key' option disables strict host key checking, which may decrease security.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa\n```\n\n----------------------------------------\n\nTITLE: RollingSync Strategy Example in ApplicationSet\nDESCRIPTION: Example YAML configuration demonstrating how to implement a progressive deployment strategy using ApplicationSet's RollingSync. It shows a three-step deployment across development, QA, and production environments with different update behaviors for each environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Progressive-Syncs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n        env: env-dev\n      - cluster: engineering-qa\n        url: https://2.4.6.8\n        env: env-qa\n      - cluster: engineering-prod\n        url: https://9.8.7.6/\n        env: env-prod\n  strategy:\n    type: RollingSync\n    rollingSync:\n      steps:\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-dev\n          #maxUpdate: 100%  # if undefined, all applications matched are updated together (default is 100%)\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-qa\n          maxUpdate: 0      # if 0, no matched applications will be updated\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-prod\n          maxUpdate: 10%    # maxUpdate supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%)\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n      labels:\n        envLabel: '{{.env}}'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Git Directory Generator in ApplicationSet (YAML)\nDESCRIPTION: Defines an Argo CD ApplicationSet using the Git Directory Generator to automatically create Applications based on directories matching a path wildcard in a specified Git repository. It demonstrates templating the Application name, source path, and destination namespace using generated parameters like `{{.path.basename}}` and `{{.path.path}}`. Requires Go templating enabled via `goTemplate: true`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n      syncPolicy:\n        syncOptions:\n        - CreateNamespace=true\n```\n\n----------------------------------------\n\nTITLE: Available options for argocd app diff command in bash\nDESCRIPTION: Lists all specific options available for the diff command. These options allow users to customize the diff operation, such as limiting to a specific namespace, changing the exit code behavior, refreshing application data, and comparing to local manifests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_diff.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -N, --app-namespace string                              Only render the difference in namespace\n      --diff-exit-code int                                Return specified exit code when there is a diff. Typical error code is 20. (default 1)\n      --exit-code                                         Return non-zero exit code when there is a diff. May also return non-zero exit code if there is an error. (default true)\n      --hard-refresh                                      Refresh application data as well as target manifests cache\n  -h, --help                                              help for diff\n      --ignore-normalizer-jq-execution-timeout duration   Set ignore normalizer JQ execution timeout (default 1s)\n      --local string                                      Compare live app to a local manifests\n      --local-include stringArray                         Used with --server-side-generate, specify patterns of filenames to send. Matching is based on filename and not path. (default [*.yaml,*.yml,*.json])\n      --local-repo-root string                            Path to the repository root. Used together with --local allows setting the repository root (default \"/\")\n      --refresh                                           Refresh application data when retrieving\n      --revision string                                   Compare live app to a particular revision\n      --revisions stringArray                             Show manifests at specific revisions for source position in source-positions\n      --server-side-generate                              Used with --local, this will send your manifests to the server for diffing\n      --source-names stringArray                          List of source names. Default is an empty array.\n      --source-positions int64Slice                       List of source positions. Default is empty array. Counting start at 1. (default [])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Service Accounts and RBAC for Impersonation in Remote Cluster Using Shell\nDESCRIPTION: These shell commands set up a non-default service account 'argocd-admin' with impersonation capabilities on the remote cluster. It creates cluster roles allowing impersonate and access review verbs and binds them to the service account via cluster role bindings. This setup manages scenarios requiring granular permissions without cluster-admin access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ctx remote-cluster\nkubectl create serviceaccount argocd-admin\nkubectl create clusterrole argocd-admin-role --verb=impersonate --resource=\"users,groups,serviceaccounts\"\nkubectl create clusterrole argocd-admin-role-access-review --verb=create --resource=\"selfsubjectaccessreviews\"\nkubectl create clusterrolebinding argocd-admin-role-binding --serviceaccount argocd-admin --clusterrole  argocd-admin-role\nkubectl create clusterrolebinding argocd-admin-access-review-role-binding --serviceaccount argocd-admin --clusterrole  argocd-admin-role\n```\n\n----------------------------------------\n\nTITLE: Options for 'argocd app delete' Command in Bash\nDESCRIPTION: Details each command-line flag available for the delete operation, including their functions and default values, enabling tailored deletion workflows.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_delete.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-N, --app-namespace string        Namespace where the application will be deleted from\n--cascade                     Perform a cascaded deletion of all application resources (default true)\n-h, --help                        help for delete\n-p, --propagation-policy string   Specify propagation policy for deletion of application's resources. One of: foreground|background (default \"foreground\")\n-l, --selector string             Delete all apps with matching label. Supports '=', '==', '!=', 'in', 'notin', 'exists', 'not exists'.\n--wait                        Wait until deletion of the application(s) completes\n-y, --yes                         Turn off prompting to confirm cascaded deletion of application resources\n```\n\n----------------------------------------\n\nTITLE: Command Syntax for `argocd proj remove-destination`\nDESCRIPTION: Specifies the required arguments for the `argocd proj remove-destination` command: the project name (PROJECT), the target server address (SERVER), and the target namespace (NAMESPACE). Optional flags can follow.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-destination.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj remove-destination PROJECT SERVER NAMESPACE [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Command Line Options for 'argocd version' in Bash\nDESCRIPTION: This snippet lists the detailed flags and options accepted by the 'argocd version' command including impersonation parameters, TLS and authentication settings, output format control, cluster context and kubeconfig configuration, and timeout settings. These options allow flexible customization of command behavior and server connectivity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_version.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client                         client version only (no server required)\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for version\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n  -o, --output string                  Output format. One of: json|yaml|wide|short (default \"wide\")\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --short                          print just the version number\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Getting latest Argo CD CLI version on Windows with PowerShell\nDESCRIPTION: PowerShell command to retrieve the latest version tag of Argo CD from GitHub API for Windows installation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$version = (Invoke-RestMethod https://api.github.com/repos/argoproj/argo-cd/releases/latest).tag_name\n```\n\n----------------------------------------\n\nTITLE: Setting ApplicationSet Policy with create-only flag (Shell)\nDESCRIPTION: This command line snippet demonstrates how to set the ApplicationSet's `policy` to `create-only` with command line argument. It requires the argocd applicationset controller to be deployed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n--policy create-only\n```\n\n----------------------------------------\n\nTITLE: Listing Argo CD User Accounts\nDESCRIPTION: This bash command lists all user accounts configured in Argo CD using the Argo CD CLI. It provides a full list of available users, including local and SSO-integrated accounts. Requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nargocd account list\n```\n\n----------------------------------------\n\nTITLE: Enabling Impersonation Feature in Argo CD ConfigMap\nDESCRIPTION: Shell command to patch the Argo CD ConfigMap to enable the service account impersonation feature.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch cm argocd-cm -n argocd --type json --patch '[{ \"op\": \"add\", \"path\": \"/data/application.sync.impersonation.enabled\", \"value\": \"true\" }]'\n```\n\n----------------------------------------\n\nTITLE: Updating Application Source Path with JSON Patch - Bash\nDESCRIPTION: This example shows how to update the source path of an application using a JSON patch. It uses the '--patch' flag with a JSON array conforming to the JSON Patch RFC, specifying a replace operation to change the '/spec/source/path' property to a new value. The '--type json' flag explicitly sets the patch type. This requires Argo CD CLI installed and authenticated. Inputs are the application name and the JSON patch string; the output is the application updated with the new source path.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_patch.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd app patch myapplication --patch='[{\"op\": \"replace\", \"path\": \"/spec/source/path\", \"value\": \"newPath\"}]' --type json\n```\n\n----------------------------------------\n\nTITLE: Install Argo CD Build Tools - Shell\nDESCRIPTION: This shell command installs the necessary tools to build and test Argo CD locally.  It uses `make install-tools-local` to install the binaries. The `BIN` environment variable can be set to change the installation directory. This typically requires root privileges unless the installation directory is writeable by the user.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nBIN=~/go/bin make install-tools-local\n```\n\n----------------------------------------\n\nTITLE: Disabling GPG verification for local development\nDESCRIPTION: Sets an environment variable to disable GPG verification if encountering key generation errors during local development.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_GPG_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Using argocd appset get Command\nDESCRIPTION: Retrieve details about an ApplicationSet by specifying its name. The command follows the pattern 'argocd appset get APPSETNAME [flags]'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_get.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd appset get APPSETNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Describe argocd repo list Specific Options (CLI)\nDESCRIPTION: This snippet lists the options specific to the `argocd repo list` command. The `-o` flag controls the output format (json, yaml, wide, url), defaulting to wide. The `--refresh` flag forces a cache refresh on the connection status, specifically with the 'hard' value.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_list.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n  -h, --help             help for list\n  -o, --output string    Output format. One of: json|yaml|wide|url (default \"wide\")\n      --refresh string   Force a cache refresh on connection status , must be one of: 'hard'\n```\n\n----------------------------------------\n\nTITLE: Application with Skip Reconcile - YAML\nDESCRIPTION: This YAML snippet provides a complete example of an Argo CD Application configured with the `skip-reconcile` annotation. The `apiVersion`, `kind`, `metadata`, and `spec` fields define the Application's characteristics, including its name, namespace, destination, project, and source repository. The `argocd.argoproj.io/skip-reconcile: \"true\"` annotation is included in the `metadata` to disable reconciliation.  This configuration assumes you have Argo CD deployed and configured. The expected output is an application that will not be reconciled by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/skip_reconcile.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/skip-reconcile: \"true\"\n  name: guestbook\n  namespace: argocd\nspec:\n  destination:\n    namespace: guestbook\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd admin cluster` (Shell)\nDESCRIPTION: Lists the options inherited from parent Argo CD commands that can be used with `argocd admin cluster`. These flags control various aspects like authentication tokens (`--auth-token`), server connection details (`--server`, `--insecure`, `--grpc-web`), configuration file paths (`--config`), Kubernetes context (`--kube-context`), logging levels (`--loglevel`), and specific Argo CD component names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Helm Credential Passing Declaratively (YAML)\nDESCRIPTION: Configures an Argo CD Application manifest by setting `spec.source.helm.passCredentials: true`. This declaratively enables the passing of Helm repository credentials across different domains during chart dependency resolution, mirroring the behavior of the `--helm-pass-credentials` CLI flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    helm:\n      passCredentials: true\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for argocd-server using kubectl (Shell)\nDESCRIPTION: This shell command demonstrates how to create a Kubernetes TLS secret named 'argocd-server-tls' in the 'argocd' namespace by specifying the paths to the certificate and private key PEM files. Dependencies include having kubectl configured with access to the cluster and the PEM files available at the specified paths. The secret stores 'tls.crt' and 'tls.key' keys used by argocd-server for its HTTPS endpoint. This secret enables Argo CD to serve valid TLS certificates and supports automated certificate renewal without server restarts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/tls.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -n argocd secret tls argocd-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Deleting ArgoCD Application with argocd (Cascade)\nDESCRIPTION: Deletes an ArgoCD application with cascading deletion of associated resources using the `argocd` CLI. The `--cascade` flag ensures that associated resources are also removed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/app_deletion.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd app delete APPNAME --cascade\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd app delete APPNAME\n```\n\n----------------------------------------\n\nTITLE: Annotating Argo CD Service Accounts for EKS IRSA (YAML)\nDESCRIPTION: Provides example Kubernetes ServiceAccount resource definitions (in YAML format) for `argocd-application-controller`, `argocd-applicationset-controller`, and `argocd-server`. Each service account is annotated with `eks.amazonaws.com/role-arn` pointing to the ARN of the Argo CD management IAM role. This annotation links the Kubernetes service account to the AWS IAM role, enabling pods using these service accounts to assume the role via IRSA. Requires restarting the relevant Argo CD pods after applying these changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: \"<arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ARGO_CD_MANAGEMENT_IAM_ROLE_NAME>\"\n  name: argocd-application-controller\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: \"<arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ARGO_CD_MANAGEMENT_IAM_ROLE_NAME>\"\n  name: argocd-applicationset-controller\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: \"<arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ARGO_CD_MANAGEMENT_IAM_ROLE_NAME>\"\n  name: argocd-server\n```\n\n----------------------------------------\n\nTITLE: Defining Health Assessment for argoproj.io/Application via Lua in ConfigMap - YAML\nDESCRIPTION: This YAML snippet shows how to add a Lua-based health assessment for the argoproj.io/Application CRD inside the argocd-cm ConfigMap's data field. By specifying resource.customizations.health.argoproj.io_Application and providing a Lua script, administrators can restore or customize health assessment behavior for app-of-apps scenarios. Requires access to the argocd-cm ConfigMap and adheres to Kubernetes YAML structure. No external dependencies are required, and the key inputs are the Application CRD objects whose status fields will be checked.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations.health.argoproj.io_Application: |\n    hs = {}\n    hs.status = \"Progressing\"\n    hs.message = \"\"\n    if obj.status ~= nil then\n      if obj.status.health ~= nil then\n        hs.status = obj.status.health.status\n        if obj.status.health.message ~= nil then\n          hs.message = obj.status.health.message\n        end\n      end\n    end\n    return hs\n```\n\n----------------------------------------\n\nTITLE: Ignoring Application Differences (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use `ignoreApplicationDifferences` to prevent the ApplicationSet controller from overwriting changes to specific Application fields. It shows how to ignore changes to `targetRevision` using a jqPathExpression. Requires `argoproj.io/v1alpha1` API version and `ApplicationSet` kind.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  ignoreApplicationDifferences:\n    - jqPathExpressions:\n        - .spec.sources[] | select(.repoURL == \"https://git.example.com/org/repo1\").targetRevision\n  template:\n    spec:\n      sources:\n      - repoURL: https://git.example.com/org/repo1\n        targetRevision: main\n      - repoURL: https://git.example.com/org/repo2\n        targetRevision: main\n```\n\n----------------------------------------\n\nTITLE: Setting Kustomize Version using CLI\nDESCRIPTION: This bash command demonstrates how to set the Kustomize version for an Argo CD application using the Argo CD CLI. The command uses `argocd app set` with the `--kustomize-version` flag and the desired version (e.g., `v3.5.4`). This offers a command-line alternative to configuring Kustomize versions in the application spec or UI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nargocd app set <appName> --kustomize-version v3.5.4\n```\n\n----------------------------------------\n\nTITLE: Preventing Resource Pruning with Argo CD Annotation (YAML)\nDESCRIPTION: Uses the `argocd.argoproj.io/sync-options: Prune=false` annotation within a resource's metadata to prevent Argo CD from pruning (deleting) this specific resource during a sync operation, even if it's not defined in the target state. This might cause the application to report an OutOfSync status if pruning was expected.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Prune=false\n```\n\n----------------------------------------\n\nTITLE: List: Project Sync Windows with argocd CLI (Shell)\nDESCRIPTION: Provides the command syntax for listing all sync windows configured for a specific Argo CD project using the `argocd proj windows list` subcommand. It requires specifying the target project's name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n#List project sync windows\nargocd proj windows list <project-name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Apply for Specific Resource in Argo CD\nDESCRIPTION: Override the application-level server-side apply setting for a specific resource by explicitly setting ServerSideApply=false in resource annotations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: ServerSideApply=false\n```\n\n----------------------------------------\n\nTITLE: Create Role - Argo CD CLI\nDESCRIPTION: Creates a role within a specified project using the Argo CD CLI. Requires the project name and role name as arguments. This command is used to define roles that can be associated with JWT tokens. The Argo CD CLI must be installed and configured to interact with the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete-token.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n$ argocd proj role create test-project test-role\n```\n\n----------------------------------------\n\nTITLE: Retrieving Synchronization Status of an Application\nDESCRIPTION: Executes 'kubectl get' to fetch application status, specifically the 'operationState' field, showing sync completion time, message, and phase. Useful for tracking synchronization success or failure. Requires application name and namespace as input.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ kubectl get -n <namespace> app <app-name> -o yaml\n...\nstatus:\n  operationState:\n    finishedAt: \"2023-08-03T11:16:17Z\"\n    message: successfully synced (all tasks run)\n    phase: Succeeded\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreResourceUpdates for batch_Job and Pod Resources - YAML\nDESCRIPTION: This snippet configures Argo CD to ignore all changes to the /status field of batch Job and Pod resources to reduce reconcile frequency. It is set under resource.customizations.ignoreResourceUpdates keys for batch_Job and Pod in the argocd-cm ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nresource.customizations.ignoreResourceUpdates.batch_Job: |\n  jsonPointers:\n    - /status\nresource.customizations.ignoreResourceUpdates.Pod: |\n  jsonPointers:\n    - /status\n```\n\n----------------------------------------\n\nTITLE: Merging Built-in Actions in YAML\nDESCRIPTION: This YAML snippet demonstrates how to retain built-in actions while adding custom actions. It shows setting `mergeBuiltinActions: true` for `Rollout` resources. The `discovery.lua` script lists the actions, and the `action.lua` script defines the action behavior. Custom actions will have precedence over built-in actions.  This shows how to prevent overriding all built-in actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/resource_actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresource.customizations.actions.argoproj.io_Rollout: |\n  mergeBuiltinActions: true\n  discovery.lua: |\n    actions = {}\n    actions[\"do-things\"] = {}\n    return actions\n  definitions:\n  - name: do-things\n    action.lua: |\n      return obj\n```\n\n----------------------------------------\n\nTITLE: Test Build Toolchain - Shell\nDESCRIPTION: This shell script generates API code and then builds the Argo CD project. It first uses `make codegen-local` to generate the code and then uses `make build-local` to build the project.  It is designed to check whether the build toolchain has been set up correctly before running the rest of the tests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake codegen-local\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake build-local\n```\n\n----------------------------------------\n\nTITLE: Logout from Argo CD using argocd logout command\nDESCRIPTION: This command logs out the user from Argo CD. It's useful for security reasons or when switching between different Argo CD contexts or accounts. No specific dependencies are required, but the Argo CD CLI must be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_logout.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd logout CONTEXT [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting a Stable Helm Value via Argo CD CLI (Bash)\nDESCRIPTION: Demonstrates using the `argocd app set` command to override a Helm chart value (`password`) for a specific application (`redis`). This provides a stable value, preventing the `OutOfSync` state often caused by Helm functions like `randAlphaNum` used in chart templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set redis -p password=abc123\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Commit Status Template in Argo CD ConfigMap (YAML)\nDESCRIPTION: This ConfigMap snippet defines both the `github` webhook service (URL and Authorization header) and a template `github-commit-status`. The template uses the `github` service, specifies the `POST` method, constructs the API path dynamically using Go templating to target the specific repository and commit revision, and defines a JSON body to set the commit status (`state`, `description`, `target_url`, `context`) based on the application's sync status.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.github: |\n    url: https://api.github.com\n    headers: #optional headers\n    - name: Authorization\n      value: token $github-token\n\n  template.github-commit-status: |\n    webhook:\n      github:\n        method: POST\n        path: /repos/{{call .repo.FullNameByRepoURL .app.spec.source.repoURL}}/statuses/{{.app.status.operationState.operation.sync.revision}}\n        body: |\n          {\n            {{if eq .app.status.operationState.phase \"Running\"}} \"state\": \"pending\"{{end}}\n            {{if eq .app.status.operationState.phase \"Succeeded\"}} \"state\": \"success\"{{end}}\n            {{if eq .app.status.operationState.phase \"Error\"}} \"state\": \"error\"{{end}}\n            {{if eq .app.status.operationState.phase \"Failed\"}} \"state\": \"error\"{{end}},\n            \"description\": \"ArgoCD\",\n            \"target_url\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n            \"context\": \"continuous-delivery/{{.app.metadata.name}}\"\n          }\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationSet with List Generator (v0.1.0/v0.2.0)\nDESCRIPTION: This YAML snippet defines an ApplicationSet using the List generator. It targets a local cluster and passes the `url` and `cluster` fields as parameters into the template. This example demonstrates the basic usage of the List generator, including both v0.1.0 and v0.2.0 forms.  It requires Argo CD and an existing Kubernetes cluster predefined within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-List.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://kubernetes.default.svc\n      # - cluster: engineering-prod\n      #   url: https://kubernetes.default.svc\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: applicationset/examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Example: Removing/Allowing a Namespaced Resource (Argo CD CLI, Bash)\nDESCRIPTION: This example illustrates removing a namespaced API resource from the deny list or adding it to the allow list for an Argo CD project using the CLI. It expects the PROJECT, GROUP, and KIND parameters as arguments. Ensure you have sufficient permissions and are targeting the correct Argo CD project and cluster. The result is that the specified resource is either permitted or not denied for use within the given project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_allow-namespace-resource.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj allow-namespace-resource PROJECT GROUP KIND\n```\n\n----------------------------------------\n\nTITLE: Restarting Argo CD Components - Bash\nDESCRIPTION: These bash commands restart various Argo CD components to ensure they pick up the new Redis configuration after a secret rotation. The components restarted are the server, repo server, and application controller. This step is crucial for the new Redis credentials to take effect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment argocd-server argocd-repo-server\nkubectl rollout restart statefulset argocd-application-controller\n```\n\n----------------------------------------\n\nTITLE: Creating PagerDuty API Key Secret\nDESCRIPTION: This YAML snippet defines a Kubernetes Secret to store the PagerDuty integration key. The `pagerduty-key-my-service` key in the `stringData` field holds the actual PagerDuty integration key. Replace `<secret-name>` with the desired secret name and `<pd-integration-key>` with the actual PagerDuty integration key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty_v2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pagerduty-key-my-service: <pd-integration-key>\n```\n\n----------------------------------------\n\nTITLE: Example: Run argocd app actions with resource filtering (Shell)\nDESCRIPTION: Provides a concrete example of running an action on an application's resources using the `argocd app actions run` command. It demonstrates how to specify the resource `KIND` and optionally filter by resource name, namespace, and group, allowing targeted execution of actions on specific Kubernetes resources managed by the application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions_run.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Run an available action for an application\nargocd app actions run APPNAME ACTION --kind KIND [--resource-name RESOURCE] [--namespace NAMESPACE] [--group GROUP]\n```\n\n----------------------------------------\n\nTITLE: `bcrypt` Command Specific Options\nDESCRIPTION: Lists the command-line options specific to the `argocd account bcrypt` subcommand. It includes `--help` for usage information and `--password` to specify the password to be hashed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_bcrypt.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help              help for bcrypt\n      --password string   Password for which bcrypt hash is generated\n```\n\n----------------------------------------\n\nTITLE: Executing Argo CD Health Check with Overrides (Shell)\nDESCRIPTION: Documents the basic syntax for the `argocd admin settings resource-overrides health` command. It requires a path to the resource YAML file (`RESOURCE_YAML_PATH`) and accepts various optional flags to specify context or configuration paths. The command assesses resource health using configured Lua scripts defined in the 'resource.customizations' field of the 'argocd-cm' ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_health.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings resource-overrides health RESOURCE_YAML_PATH [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining an Argo CD ApplicationSet using YAML\nDESCRIPTION: This YAML snippet defines an Argo CD ApplicationSet resource named 'cluster-addons'. It uses a Git generator to scan for directories within 'examples/git-generator-directory/cluster-addons/*' in the specified repository. For each discovered directory (path), it generates an Argo CD Application resource using the template, deploying it to the default Kubernetes cluster in a namespace matching the directory's basename.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# cluster-addons.yaml:\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\nspec:\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj-labs/applicationset.git\n      revision: HEAD\n      directories:\n      - path: examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj-labs/applicationset.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path.basename}}'\n```\n\n----------------------------------------\n\nTITLE: Usage: argocd proj windows Command (Shell)\nDESCRIPTION: Displays the basic usage syntax for the `argocd proj windows` command, indicating that additional flags can be used to modify its behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj windows [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Service in Argo CD Notifications ConfigMap (YAML)\nDESCRIPTION: Defines the Grafana service configuration within the `argocd-notifications-cm` ConfigMap. It specifies the Grafana API URL (`apiUrl`) and references the API key (`apiKey`) stored in a Kubernetes Secret (using the variable `$grafana-api-key`). This configuration enables Argo CD Notifications to connect to the specified Grafana instance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/grafana.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.grafana: |\n    apiUrl: https://grafana.example.com/api\n    apiKey: $grafana-api-key\n```\n\n----------------------------------------\n\nTITLE: Mounting Custom CSS Volume in Argo CD Server Deployment (YAML)\nDESCRIPTION: This YAML snippet illustrates how to modify the `argocd-server` Deployment to mount the custom CSS file defined in a ConfigMap. It defines a volume named `styles` sourced from the `argocd-styles-cm` ConfigMap and mounts it at `/shared/app/custom` within the `argocd-server` container using `volumeMounts`. This makes the CSS file available at the relative path specified in the `argocd-cm` ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom-styles.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-server\n  ...\nspec:\n  template:\n    ...\n    spec:\n      containers:\n      - command:\n        ...\n        volumeMounts:\n        ...\n        - mountPath: /shared/app/custom\n          name: styles\n      ...\n      volumes:\n      ...\n      - configMap:\n          name: argocd-styles-cm\n        name: styles\n```\n\n----------------------------------------\n\nTITLE: Available Options for argocd admin cluster namespaces command in Bash\nDESCRIPTION: List of options that can be used with the 'argocd admin cluster namespaces' command, including authentication, cluster selection, and timeout settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for namespaces\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Creating Source Resource Child in Lua\nDESCRIPTION: This Lua snippet shows how to create a new resource as a child of the source resource when using a custom action. It sets the `ownerReference` on the new resource, ensuring the Kubernetes child-parent relationship and proper Argo CD management. It defines an `ownerRef` object and populates it using the `apiVersion`, `kind`, `name`, and `uid` from the source resource (`obj`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/resource_actions.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- ...\nownerRef = {}\nownerRef.apiVersion = obj.apiVersion\nownerRef.kind = obj.kind\nownerRef.name = obj.metadata.name\nownerRef.uid = obj.metadata.uid\njob = {}\njob.metadata = {}\njob.metadata.ownerReferences = {}\njob.metadata.ownerReferences[1] = ownerRef\n-- ...\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Resources with Automatic Pruning using Argo CD CLI\nDESCRIPTION: Adds the `allowEmpty` option to an application's sync policy using the command line interface. When used with automatic pruning, this allows Argo CD to perform a sync that results in the application having no resources, overriding the default safety mechanism.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/auto_sync.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set <APPNAME> --allow-empty\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Cloud as SCM Provider in ApplicationSet\nDESCRIPTION: YAML configuration to set up a Bitbucket Cloud (bitbucket.org) connection for an ApplicationSet generator. Includes workspace/owner specification, user authentication with app password, and branch scanning options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      bitbucket:\n        # The workspace id (slug).  \n        owner: \"example-owner\"\n        # The user to use for basic authentication with an app password.\n        user: \"example-user\"\n        # If true, scan every branch of every repository. If false, scan only the main branch. Defaults to false.\n        allBranches: true\n        # Reference to a Secret containing an app password.\n        appPasswordRef:\n          secretName: appPassword\n          key: password\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Examples of Using argocd app wait\nDESCRIPTION: Provides practical examples demonstrating how to use the `argocd app wait` command. Examples cover waiting for a single application, multiple applications specified by name, filtering by specific Kubernetes resources (using GROUP:KIND:NAME format, including exclusions with '!'), specifying namespaces for resources, and selecting applications using various label selectors (equality, inequality, existence, set membership).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_wait.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Wait for an app\nargocd app wait my-app\n\n# Wait for multiple apps\nargocd app wait my-app other-app\n\n# Wait for apps by resource\n# Resource should be formatted as GROUP:KIND:NAME. If no GROUP is specified then :KIND:NAME.\nargocd app wait my-app --resource :Service:my-service\nargocd app wait my-app --resource argoproj.io:Rollout:my-rollout\nargocd app wait my-app --resource '!apps:Deployment:my-service'\nargocd app wait my-app --resource apps:Deployment:my-service --resource :Service:my-service\nargocd app wait my-app --resource '!*:Service:*'\n# Specify namespace if the application has resources with the same name in different namespaces\nargocd app wait my-app --resource argoproj.io:Rollout:my-namespace/my-rollout\n\n# Wait for apps by label, in this example we waiting for apps that are children of another app (aka app-of-apps)\nargocd app wait -l app.kubernetes.io/instance=my-app\nargocd app wait -l app.kubernetes.io/instance!=my-app\nargocd app wait -l app.kubernetes.io/instance\nargocd app wait -l '!app.kubernetes.io/instance'\nargocd app wait -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Push Secret for Argo CD Hydrator in YAML\nDESCRIPTION: Defines a Kubernetes Secret used by Argo CD to authenticate push access to a Git repository for hydrated manifests. It includes necessary metadata, secret type, and credentials fields. This secret allows applications with pull access to also push hydrated manifests, ensuring version control and auditability.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    # Note that this is \"repository-push\" instead of \"repository\". The same secret should never be used for both push and pull access.\n    argocd.argoproj.io/secret-type: repository-push\ntextData:\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: '****'\n  password: '****'\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `argocd admin app generate-spec`\nDESCRIPTION: Shows the basic command structure for generating declarative application configuration using `argocd admin app generate-spec`. Requires the application name (APPNAME) and accepts various optional flags to specify application source, destination, and tool-specific parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_app_generate-spec.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin app generate-spec APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing GnuPG Keys via ArgoCD CLI in Bash\nDESCRIPTION: Lists all GnuPG public keys currently configured in ArgoCD for commit signature verification using the CLI. This command requires ArgoCD CLI installed and proper RBAC permissions for managing gpgkeys resources. It outputs a list of keys that ArgoCD trusts for verifying Git commit signatures.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd gpg list\n```\n\n----------------------------------------\n\nTITLE: Using Matrix Generator with Plugin YAML\nDESCRIPTION: Illustrates combining the `pullRequest` generator with the `plugin` generator using a `matrix` strategy. The output of the pullRequest generator (like branch name) is used as a parameter for the plugin, enabling the plugin to fetch additional data related to the pull request.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/applicationset-plugin-generator.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  generators:\n    - matrix:\n        generators:\n          - pullRequest:\n              github:\n                owner: binboum\n                repo: argo-test\n                labels:\n                - preview-matrix\n                tokenRef:\n                  secretName: github-secret\n                  key: token\n          - plugin:\n              configMapRef: cm-plugin\n              name: plugin-matrix\n              params:\n                repo: \"argo-test\"\n                branch: \"{{.branch}}\"\n```\n\n----------------------------------------\n\nTITLE: Validating Argo CD Settings from File or Cluster\nDESCRIPTION: Demonstrates how to use 'argocd admin settings validate'. The first example validates all settings using a local YAML file specified with '--argocd-cm-path'. The second example validates specific setting groups ('accounts', 'plugins') loaded directly from the Kubernetes cluster of the current kubeconfig context using '--load-cluster-settings' and '--group'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_validate.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\n#Validates all settings in the specified YAML file\nargocd admin settings validate --argocd-cm-path ./argocd-cm.yaml\n\n#Validates accounts and plugins settings in Kubernetes cluster of current kubeconfig context\nargocd admin settings validate --group accounts --group plugins --load-cluster-settings\n```\n\n----------------------------------------\n\nTITLE: Basic Extension Reverse Proxy Configuration in argocd-cm.yaml - YAML\nDESCRIPTION: This YAML configuration sets up an extension named 'some-extension' with reverse proxy support in the Argo CD ConfigMap (argocd-cm.yaml). The snippet demonstrates enabling the extension, configuring an idle connection timeout, and directing backend traffic to a specific service URL. It requires that Argo CD is running and that the specified backend service (extension-name.com:8080) is reachable. Key parameters: extension name, enabled/disabled state, idleConnTimeout, service backend URL. The output is an activated reverse proxy configuration, allowing the UI extension to call its backend. Limitations: Only a single service URL is configured—no multi-cluster support here.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/proxy-extensions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextension.config: |\n  extensions:\n    - name: some-extension\n      enabled: true\n      backend:\n        idleConnTimeout: 10s\n        services:\n          - url: http://extension-name.com:8080\n\n```\n\n----------------------------------------\n\nTITLE: Using the argocd account delete-token Command\nDESCRIPTION: The basic syntax for the argocd account delete-token command, which is used to delete a specific token from an Argo CD account.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_delete-token.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd account delete-token [flags]\n```\n\n----------------------------------------\n\nTITLE: Global CLI Options for Inherited Commands - Shell\nDESCRIPTION: This shell snippet lists global command-line options inherited from parent commands that can be used with 'argocd appset delete'. Options cover authentication, context switching, security, logging, and connection configurations. Prerequisites include proper CLI setup and relevant files (e.g., config, certificates). These parameters control the behavior of the CLI when interacting with various Argo CD server environments and Kubernetes clusters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_delete.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings              Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Adding Project Source Repository in ArgoCD\nDESCRIPTION: Shows the basic syntax for adding a source repository URL to an ArgoCD project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-source PROJECT URL [flags]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Argo CD Audit Events using kubectl (Bash)\nDESCRIPTION: Demonstrates querying Kubernetes events using `kubectl get events` to view the audit trail generated by Argo CD actions, including resource creation, updates, sync operations, and the responsible actor. Requires `kubectl` access to the cluster where Argo CD is running.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/security.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get events\nLAST SEEN   FIRST SEEN   COUNT   NAME                         KIND          SUBOBJECT   TYPE      REASON               SOURCE                          MESSAGE\n1m          1m           1       guestbook.157f7c5edd33aeac   Application               Normal    ResourceCreated      argocd-server                   admin created application\n1m          1m           1       guestbook.157f7c5f0f747acf   Application               Normal    ResourceUpdated      argocd-application-controller   Updated sync status:  -> OutOfSync\n1m          1m           1       guestbook.157f7c5f0fbebbff   Application               Normal    ResourceUpdated      argocd-application-controller   Updated health status:  -> Missing\n1m          1m           1       guestbook.157f7c6069e14f4d   Application               Normal    OperationStarted     argocd-server                   admin initiated sync to HEAD (8a1cb4a02d3538e54907c827352f66f20c3d7b0d)\n1m          1m           1       guestbook.157f7c60a55a81a8   Application               Normal    OperationCompleted   argocd-application-controller   Sync operation to 8a1cb4a02d3538e54907c827352f66f20c3d7b0d succeeded\n1m          1m           1       guestbook.157f7c60af1ccae2   Application               Normal    ResourceUpdated      argocd-application-controller   Updated sync status: OutOfSync -> Synced\n1m          1m           1       guestbook.157f7c60af5bc4f0   Application               Normal    ResourceUpdated      argocd-application-controller   Updated health status: Missing -> Progressing\n1m          1m           1       guestbook.157f7c651990e848   Application               Normal    ResourceUpdated      argocd-application-controller   Updated health status: Progressing -> Healthy\n```\n\n----------------------------------------\n\nTITLE: Showing Specific GnuPG Key Information Using ArgoCD CLI in Bash\nDESCRIPTION: Retrieves and displays detailed information about a specific GnuPG public key by its key ID using the ArgoCD CLI. Requires the key ID as an argument and appropriate permissions to access gpgkeys resources. Useful to verify key details before enforcing signature verification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd gpg get <key-id>\n```\n\n----------------------------------------\n\nTITLE: ConfigManagementPlugin Manifest Definition\nDESCRIPTION: This YAML snippet defines the structure of a ConfigManagementPlugin manifest. This manifest is crucial for configuring custom config management tools within Argo CD. It specifies the plugin's name, version, init and generate commands, discovery settings, parameters, and other configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  # The name of the plugin must be unique within a given Argo CD instance.\n  name: my-plugin\nspec:\n  # The version of your plugin. Optional. If specified, the Application's spec.source.plugin.name field\n  # must be <plugin name>-<plugin version>.\n  version: v1.0\n  # The init command runs in the Application source directory at the beginning of each manifest generation. The init\n  # command can output anything. A non-zero status code will fail manifest generation.\n  init:\n    # Init always happens immediately before generate, but its output is not treated as manifests.\n    # This is a good place to, for example, download chart dependencies.\n    command: [sh]\n    args: [-c, 'echo \"Initializing...\"']\n  # The generate command runs in the Application source directory each time manifests are generated. Standard output\n  # must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation.\n  # To write log messages from the command, write them to stderr, it will always be displayed.\n  # Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).\n  generate:\n    command: [sh, -c]\n    args:\n      - |\n        echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"\n  # The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be\n  # used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin \n  # will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. \n  # Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the \n  # first (in that order) is evaluated.\n  discover:\n    # fileName is a glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source \n    # directory. If there is a match, this plugin may be used for the Application.\n    fileName: \"./subdir/s*.yaml\"\n    find:\n      # This does the same thing as fileName, but it supports double-start (nested directory) glob patterns.\n      glob: \"**/Chart.yaml\"\n      # The find command runs in the repository's root directory. To match, it must exit with status code 0 _and_ \n      # produce non-empty output to standard out.\n      command: [sh, -c, find . -name env.yaml]\n  # The parameters config describes what parameters the UI should display for an Application. It is up to the user to\n  # actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements _only_\n  # inform the \"Parameters\" tab in the App Details page of the UI.\n  parameters:\n    # Static parameter announcements are sent to the UI for _all_ Applications handled by this plugin.\n    # Think of the `string`, `array`, and `map` values set here as \"defaults\". It is up to the plugin author to make \n    # sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different\n    # values for those parameters.\n    static:\n      - name: string-param\n        title: Description of the string param\n        tooltip: Tooltip shown when the user hovers the\n        # If this field is set, the UI will indicate to the user that they must set the value.\n        required: false\n        # itemType tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is\n        # \"string\". Examples of other types which may be supported in the future are \"boolean\" or \"number\".\n        # Even if the itemType is not \"string\", the parameter value from the Application spec will be sent to the plugin\n        # as a string. It's up to the plugin to do the appropriate conversion.\n        itemType: \"\"\n        # collectionType describes what type of value this parameter accepts (string, array, or map) and allows the UI\n        # to present a form to match that type. Default is \"string\". This field must be present for non-string types.\n        # It will not be inferred from the presence of an `array` or `map` field.\n        collectionType: \"\"\n        # This field communicates the parameter's default value to the UI. Setting this field is optional.\n        string: default-string-value\n      # All the fields above besides \"string\" apply to both the array and map type parameter announcements.\n      - name: array-param\n        # This field communicates the parameter's default value to the UI. Setting this field is optional.\n        array: [default, items]\n        collectionType: array\n      - name: map-param\n        # This field communicates the parameter's default value to the UI. Setting this field is optional.\n        map:\n          some: value\n        collectionType: map\n    # Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example,\n    # the values for a Helm chart's values.yaml file could be sent as parameter announcements.\n    dynamic:\n      # The command is run in an Application's source directory. Standard output must be JSON matching the schema of the\n      # static parameter announcements list.\n      command: [echo, '[{\"name\": \"example-param\", \"string\": \"default-string-value\"}]']\n\n  # If set to `true` then the plugin receives repository files with original file mode. Dangerous since the repository\n  # might have executable files. Set to true only if you trust the CMP plugin authors.\n  preserveFileMode: false\n\n  # If set to `true` then the plugin can retrieve git credentials from the reposerver during generate. Plugin authors \n  # should ensure these credentials are appropriately protected during execution\n  provideGitCreds: false\n```\n\n----------------------------------------\n\nTITLE: Requesting Essential Group Claims for OIDC in Argo CD (YAML)\nDESCRIPTION: This concise YAML snippet shows a simple configuration for `requestedIDTokenClaims` within `argocd-cm`'s `oidc.config` key. It specifically requests the 'groups' claim from the OIDC provider and marks it as 'essential', ensuring it's included in the ID token if supported by the provider.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  oidc.config: |\n    requestedIDTokenClaims: {\"groups\": {\"essential\": true}}\n```\n\n----------------------------------------\n\nTITLE: Customizing PagerDuty Notification Template Argo CD ConfigMap\nDESCRIPTION: Customizes the notification template for the `rollout-aborted` event within the `argocd-notifications-cm`. It defines the generic message and specific PagerDuty fields like `title`, `urgency`, `body`, and optional `priorityID` using Go template syntax. Depends on a Kubernetes cluster and the `argocd-notifications-cm` ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.rollout-aborted: |\n    message: Rollout {{.rollout.metadata.name}} is aborted.\n    pagerduty:\n      title: \"Rollout {{.rollout.metadata.name}}\"\n      urgency: \"high\"\n      body: \"Rollout {{.rollout.metadata.name}} aborted \"\n      priorityID: \"<priorityID of incident>\"\n```\n\n----------------------------------------\n\nTITLE: Removing Repository Credentials Shell\nDESCRIPTION: This example illustrates how to remove existing repository credential templates. It requires the URL parameter to specify which credentials should be removed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Remove credentials for the repositories with speficied URL\nargocd repocreds rm URL\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-cm ConfigMap (YAML)\nDESCRIPTION: This snippet configures the `argocd-cm` ConfigMap to enable the exec feature.  The `exec.enabled` key is set to \"true\". This enables the web terminal functionality within Argo CD. This change requires Argo CD v2.4 or later.  The `<namespace>` placeholder should be replaced with the actual namespace where Argo CD is installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/web_based_terminal.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: <namespace>  # Replace <namespace> with your actual namespace\ndata:\n  exec.enabled: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Various Parameter Types in Application Spec (YAML)\nDESCRIPTION: Provides an example of setting different parameter types (`string`, `array`, `map`) within an `Application` resource's `spec.source.plugin.parameters`. This shows how to pass complex data structures like multi-line strings, lists, and key-value pairs to a hypothetical Helm CMP.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    plugin:\n      parameters:\n        - name: values\n          string: >-\n            resources:\n              cpu: 100m\n              memory: 128Mi\n        - name: values-files\n          array: [values.yaml]\n        - name: helm-parameters\n          map: \n            image.repository: my.example.com/gcr-proxy/heptio-images/ks-guestbook-demo\n            image.tag: \"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands in ArgoCD CLI\nDESCRIPTION: Command-line options inherited from the parent argocd admin command, including configuration paths, connection settings, and authentication options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Validate RBAC Policy from Local CSV File (Argo CD CLI)\nDESCRIPTION: Demonstrates how to validate an Argo CD RBAC policy stored in a local file named `policy.csv`. The `--policy-file` flag is used to specify the path to this local file. The command checks the syntax of the policy within the file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_validate.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Check whether a given policy file is valid using a local policy.csv file.\nargocd admin settings rbac validate --policy-file policy.csv\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Helm CMP Configuration (YAML)\nDESCRIPTION: Configures a basic Argo CD Config Management Plugin specifically for Helm. It sets the generation command to `generate.sh`, discovers applications via the presence of a `values.yaml` file, and defines static and dynamic parameters, with dynamic parameters sourced from `get-parameters.sh`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: simple-helm-cmp\nspec:\n  version: v1.0\n  generate:\n    command: [/home/argocd/generate.sh]\n  discover:\n    fileName: \"./values.yaml\"\n  parameters:\n    static:\n    - name: values-files\n      title: VALUES FILES\n      collectionType: array\n    dynamic:\n      command: [/home/argocd/get-parameters.sh]\n```\n\n----------------------------------------\n\nTITLE: Skipping Dry Run for Missing CRDs via Annotation (YAML)\nDESCRIPTION: Applies the `argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true` annotation to a resource's metadata. This prevents Argo CD sync failures caused by `the server could not find the requested resource` error when the Custom Resource Definition (CRD) for this resource does not yet exist in the cluster. The dry run is still performed if the CRD is present.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true\n```\n\n----------------------------------------\n\nTITLE: Editing ApplicationSet controller deployment with kubectl\nDESCRIPTION: Command to edit the ApplicationSet controller deployment directly on the cluster to modify container launch parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit deployment/argocd-applicationset-controller -n argocd\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Role Mapping in Argo CD RBAC - YAML\nDESCRIPTION: This YAML snippet extends the Argo CD RBAC configuration to add mappings from JWT token claims (such as groups and email) to Argo CD roles, which ensures users are properly authorized based on their Entra ID (Azure AD) roles. The 'scopes' list must match those configured in the OIDC app registration and token claims. Required: pre-existing OIDC config, Argo CD deployment with RBAC enabled, and correct Azure group claim emission. Inputs: group identifiers, roles, and desired JWT claims. Output: dynamic user-role assignment based on authentication token content.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npolicy.default: role:readonly\npolicy.csv: |\n   p, role:org-admin, applications, *, */*, allow\n   p, role:org-admin, clusters, get, *, allow\n   p, role:org-admin, repositories, get, *, allow\n   p, role:org-admin, repositories, create, *, allow\n   p, role:org-admin, repositories, update, *, allow\n   p, role:org-admin, repositories, delete, *, allow\n   g, \"84ce98d1-e359-4f3b-85af-985b458de3c6\", role:org-admin\nscopes: '[groups, email]'\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Directories in Git Directory Generator (YAML)\nDESCRIPTION: Shows how to configure the Git Directory Generator in an ApplicationSet to exclude specific directories (e.g., `exclude-helm-guestbook`) from being processed. This is achieved by adding another entry under `directories` with the path to exclude and setting `exclude: true`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/excludes/cluster-addons/*\n      - path: applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\n        exclude: true\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n```\n\n----------------------------------------\n\nTITLE: Create ApplicationSets Command Invocation\nDESCRIPTION: This snippet demonstrates how to use the `argocd appset create` command to create one or more ApplicationSets.  It takes a filename or URL as input, where the filename or URL points to an AppSet definition. This command requires the Argo CD CLI to be installed and configured to connect to an Argo CD server. The output of this command is the creation of the ApplicationSet resource on the Argo CD server. The AppSet resource defines how to create Argo CD Applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_create.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nargocd appset create <filename or URL> (<filename or URL>...)\n```\n\n----------------------------------------\n\nTITLE: Basic Project Deletion Command Syntax in Argo CD\nDESCRIPTION: The basic syntax for deleting a project in Argo CD using the CLI. This command requires specifying the PROJECT name that needs to be deleted.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_delete.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj delete PROJECT [flags]\n```\n\n----------------------------------------\n\nTITLE: Handling Missing CollectionType in Parameter Announcements (YAML)\nDESCRIPTION: This YAML block demonstrates three cases: parameter without 'collectionType' (treated as string), with a map (but no 'collectionType', ignored), and with both. If collectionType is absent, everything defaults to string and maps are not used, enforcing strict type expectations for correct UI behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n- name: name-prefix  # expects a string\n- name: helm-parameters-incorrect  # expects a string, the map is ignored\n  map:\n    global.image.repository: quay.io/argoproj/argocd\n- name: helm-parameters  # expects a map\n  collectionType: map\n  map:\n    global.image.repository: quay.io/argoproj/argocd\n```\n\n----------------------------------------\n\nTITLE: Configuring Prune Deletion Propagation Policy (YAML)\nDESCRIPTION: Sets the `PrunePropagationPolicy` sync option within the `spec.syncPolicy.syncOptions` of an Application manifest. This controls the Kubernetes garbage collection propagation policy (e.g., `foreground`, `background`, `orphan`) used when Argo CD prunes resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - PrunePropagationPolicy=foreground\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Rules for Applications in Argo CD\nDESCRIPTION: Examples of RBAC policy rules for controlling access to Argo CD Applications. Shows the updated syntax using project/namespace/application pattern and demonstrates wildcard usage for different access control scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\np, somerole, applications, get, foo/*, allow\n```\n\nLANGUAGE: text\nCODE:\n```\np, somerole, applications, get, foo/bar/*, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring hook deletion policies with argocd.argoproj.io/hook-delete-policy annotation\nDESCRIPTION: This YAML defines a Kubernetes Job with annotations specifying the hook's deletion policy after execution. It uses policies like HookSucceeded, HookFailed, and BeforeHookCreation to control resource cleanup and re-creation behaviors, ensuring proper hook lifecycle management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_hooks.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: integration-test-\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\n```\n\n----------------------------------------\n\nTITLE: Basic ApplicationSet Template Example Using Cluster Generator\nDESCRIPTION: Example of a template subfield for a Cluster generator that defines how to create an Application resource by combining parameters from the generator with template fields using {{values}} syntax.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Template.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# (...)\n template:\n   metadata:\n     name: '{{ .nameNormalized }}-guestbook'\n   spec:\n     source:\n       repoURL: https://github.com/infra-team/cluster-deployments.git\n       targetRevision: HEAD\n       path: guestbook/{{ .nameNormalized }}\n     destination:\n       server: '{{ .server }}'\n       namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Role in Argo CD CLI\nDESCRIPTION: Defines the syntax for creating a new project role within an existing project in Argo CD, specifying the project name, role name, and optional description. Useful for setting up role-based access control.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_create.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj role create PROJECT ROLE-NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Examples of argocd admin cluster kubeconfig Command Usage\nDESCRIPTION: Demonstrates various examples of using the kubeconfig command, including generating, listing, and deleting kubeconfigs, as well as creating a kubeconfig with TLS verification disabled.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_kubeconfig.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#Generate a kubeconfig for a cluster named \"my-cluster\" on console\nargocd admin cluster kubeconfig my-cluster\n\n#Listing available kubeconfigs for clusters managed by argocd\nargocd admin cluster kubeconfig\n\n#Removing a specific kubeconfig file \nargocd admin cluster kubeconfig my-cluster --delete\n\n#Generate a Kubeconfig for a Cluster with TLS Verification Disabled\nargocd admin cluster kubeconfig https://cluster-api-url:6443 /path/to/output/kubeconfig.yaml --insecure-skip-tls-verify\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-repo-creds.yaml\nDESCRIPTION: This YAML snippet provides an example of an argocd-repo-creds.yaml configuration.  It is a configuration file likely used within the Argo CD project. This file is essential for securely managing repository credentials and configuring access to remote Git repositories and other resources within Argo CD deployments. The expected input is a valid YAML structure; the output is a configured argocd-repo-creds.yaml file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-repo-creds-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/argocd-repo-creds.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Describe Inherited argocd repo Command Options (CLI)\nDESCRIPTION: This snippet lists common options inherited from parent Argo CD CLI commands. These options configure the connection to the Argo CD server, authentication methods (token, certs), logging levels, and other global settings applicable across many `argocd` commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_list.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \\\"/home/user/.config/argocd/config\\\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-application-controller\\\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \\\"json\\\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \\\"info\\\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \\\"gzip\\\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-redis-ha-haproxy\\\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-redis\\\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-repo-server\\\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-server\\\")\n```\n\n----------------------------------------\n\nTITLE: Options: argocd admin proj Specific Flags CLI\nDESCRIPTION: Lists the command-specific options available directly under `argocd admin proj`. Currently, only the standard help flag is shown, which prints usage information for this specific subcommand.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n  -h, --help   help for proj\n```\n\n----------------------------------------\n\nTITLE: Adding Private Helm OCI-Based Repository via HTTPS - Argo CD CLI Shell Example\nDESCRIPTION: This command enables OCI-based Helm repository integration by specifying repository type as Helm, enabling OCI mode, and providing credentials over HTTPS. Prerequisites: argocd CLI, repository access, username and password. Relevant flags include '--type helm', '--enable-oci', and '--name'. Input is the OCI registry endpoint with credentials; output is repository registration with OCI support in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test\n```\n\n----------------------------------------\n\nTITLE: Example: Adding an Update Policy to a Project Role\nDESCRIPTION: Demonstrates adding a policy that grants 'update' permission on the 'project' object within 'test-project' for the 'test-role'. It shows checking the role's policies before and after applying the new policy using `argocd proj role get`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-policy.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Before adding new policy\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (3 hours ago)  <none>\n\n# Add a new policy to allow update to the project\n$ argocd proj role add-policy test-project test-role -a update -p allow -o project\n\n# Policy should be updated\n$  argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\np, proj:test-project:test-role, applications, update, test-project/project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (3 hours ago)  <none>\n```\n\n----------------------------------------\n\nTITLE: Example of Getting ApplicationSet Details\nDESCRIPTION: Example showing how to retrieve details for an ApplicationSet by name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_get.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get ApplicationSets\nargocd appset get APPSETNAME\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd repocreds rm`\nDESCRIPTION: Details the options inherited from parent commands that can be used with `argocd repocreds rm`. These options control aspects like authentication (token, certificates), server connection (address, context, insecure), logging, Kubernetes interaction, and specific component names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_rm.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Options for argocd admin settings validate\nDESCRIPTION: Lists specific options available for the 'argocd admin settings validate' command. '--group' allows specifying which setting groups to validate (e.g., accounts, general, kustomize, resource-overrides), and '-h' or '--help' displays help information.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_validate.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --group stringArray   Optional list of setting groups that have to be validated ( one of: accounts, general, kustomize, resource-overrides)\n  -h, --help                help for validate\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD Notification Triggers CLI Command in Bash\nDESCRIPTION: This snippet demonstrates how to execute the 'argocd admin notifications trigger run' command to evaluate notification triggers configured in Argo CD. It includes example invocations to run a trigger named 'on-sync-status-unknown' either using the default config map defined in 'argocd-notifications-cm' or an alternative configuration file specified via the '--config-map' flag. The snippet assumes the presence of a local application manifest file './sample-app.yaml' as input. These commands require an installed Argo CD CLI environment, appropriate permissions, and configured connection to an Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_trigger_run.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications trigger run NAME RESOURCE_NAME [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Execute trigger configured in 'argocd-notification-cm' ConfigMap\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Execute trigger using my-config-map.yaml instead of 'argocd-notifications-cm' ConfigMap\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml \\\n    --config-map ./my-config-map.yaml\n```\n\n----------------------------------------\n\nTITLE: Validate RBAC Policy from Cluster ConfigMap (Argo CD CLI)\nDESCRIPTION: Shows how to validate the default Argo CD RBAC ConfigMap (`argocd-rbac-cm`) directly from a Kubernetes cluster. By providing a namespace using the `--namespace` flag (e.g., `argocd`) and omitting `--policy-file`, the command fetches the ConfigMap from the specified namespace in the current cluster context and validates its policy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_validate.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# If --policy-file is not given, and instead --namespace is giventhe ConfigMap 'argocd-rbac-cm'\n# from K8s is used.\nargocd admin settings rbac validate --namespace argocd\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of argocd admin cluster kubeconfig Command\nDESCRIPTION: Shows the basic command syntax for generating kubeconfig for a specified cluster. The command requires CLUSTER_URL and OUTPUT_PATH parameters and supports various flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_kubeconfig.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin cluster kubeconfig CLUSTER_URL OUTPUT_PATH [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Repository Credentials Shell\nDESCRIPTION: This example shows how to list all repository credential templates that are currently configured in Argo CD. This command does not require any additional parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# List all the configured repository credentials\nargocd repocreds list\n```\n\n----------------------------------------\n\nTITLE: Revoking Argo CD Access to External Cluster Using kubectl and argocd CLI - Bash\nDESCRIPTION: This snippet provides commands to revoke Argo CD's access to an externally managed Kubernetes cluster by deleting the Argo CD ServiceAccount, its associated cluster role, and cluster role binding, followed by removing the cluster entry from Argo CD. These commands require kubectl configured to access the external cluster and the argocd CLI. The approach ensures that Argo CD no longer has any permissions or references to the specified cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/security.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run using a kubeconfig for the externally managed cluster\nkubectl delete sa argocd-manager -n kube-system\nkubectl delete clusterrole argocd-manager-role\nkubectl delete clusterrolebinding argocd-manager-role-binding\nargocd cluster rm https://your-kubernetes-cluster-addr\n```\n\n----------------------------------------\n\nTITLE: Managing Applications in Other Namespaces with CLI\nDESCRIPTION: Series of Argo CD CLI commands demonstrating how to create, sync, delete, and retrieve application manifests for applications in namespaces other than the control plane.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Create an application\nargocd app create foo/bar ...\n# Sync the application\nargocd app sync foo/bar\n# Delete the application\nargocd app delete foo/bar\n# Retrieve application's manifest\nargocd app manifests foo/bar\n```\n\n----------------------------------------\n\nTITLE: Mapping CRD for Host-based Routing with Ambassador Ingress Controller in YAML\nDESCRIPTION: Defines two Ambassador Mapping Custom Resource Definitions (CRDs) to enable host-based routing for the Argo CD API server. One mapping handles the UI traffic over HTTPS, and the other handles gRPC CLI traffic over HTTP with grpc flag enabled and regex header matching. Requires Ambassador Edge Stack as the ingress controller and setting Argo CD server to run with TLS disabled by passing the --insecure flag or corresponding ConfigMap option. The host parameter uses port 443 for CLI mapping with an annotation to ignore the port if strip_matching_host_port is enabled.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: getambassador.io/v2\nkind: Mapping\nmetadata:\n  name: argocd-server-ui\n  namespace: argocd\nspec:\n  host: argocd.example.com\n  prefix: /\n  service: https://argocd-server:443\n---\napiVersion: getambassador.io/v2\nkind: Mapping\nmetadata:\n  name: argocd-server-cli\n  namespace: argocd\nspec:\n  # NOTE: the port must be ignored if you have strip_matching_host_port enabled on envoy\n  host: argocd.example.com:443\n  prefix: /\n  service: argocd-server:80\n  regex_headers:\n    Content-Type: \"^application/grpc.*$\"\n  grpc: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Namespace Creation in Argo CD\nDESCRIPTION: Configure an application to automatically create the target namespace if it doesn't exist. The namespace to create must be specified in spec.destination.namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\nspec:\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: some-namespace\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n```\n\n----------------------------------------\n\nTITLE: Command Specific Options for `argocd repocreds rm`\nDESCRIPTION: Lists the command-specific options available for the `argocd repocreds rm` command. The `-h` or `--help` flag displays help information for the command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_rm.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for rm\n```\n\n----------------------------------------\n\nTITLE: AppProject configuration with sourceNamespaces for project-one\nDESCRIPTION: Example of an AppProject resource that allows Applications to be created in namespace-one using this project. This restricts which namespaces can use this project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: project-one\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - namespace-one\n```\n\n----------------------------------------\n\nTITLE: Adding a Source Namespace to an Argo CD Project Using CLI\nDESCRIPTION: This code snippet demonstrates the basic usage of the 'argocd proj add-source-namespace' command to add a namespace as a source for a specified project. It helps in configuring allowed namespaces for application deployment in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-source-namespace.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-source-namespace PROJECT NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Global Options for argocd Commands\nDESCRIPTION: Options that apply to all argocd commands, including authentication settings, connection parameters, and logging configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_get.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Docker Hub Authentication for Builder Image in Bash\nDESCRIPTION: Command to authenticate with Docker Hub before building and publishing the Argo CD builder image.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/ci.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n```\n\n----------------------------------------\n\nTITLE: Customizing Helm Release Name in Argo CD\nDESCRIPTION: Configuration that overrides the default Helm release name (which would normally be the Application name) with a custom value. This can be useful in centralized Argo CD deployments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n    helm:\n      releaseName: myRelease\n```\n\n----------------------------------------\n\nTITLE: Extending JQ path expression timeout for complex evaluations\nDESCRIPTION: Adjusts the default one-second timeout for JQPathExpression evaluations within Argo CD by setting 'ignore.normalizer.jq.timeout' to a higher value, such as 5 seconds, to accommodate complex or slow evaluations and prevent timeout errors.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  data:\n    ignore.normalizer.jq.timeout: '5s'\n```\n\n----------------------------------------\n\nTITLE: Specifying known Kubernetes types for CRDs to improve diffing accuracy\nDESCRIPTION: Informs Argo CD about CRD fields that inherit Kubernetes native types, such as 'core/v1/PodSpec', to prevent false positives due to custom marshalling or formatting differences, by listing them under 'resource.customizations'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations.knownTypeFields.argoproj.io_Rollout: |\n    - field: spec.template.spec\n      type: core/v1/PodSpec\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm API Versions in .argocd-source.yaml\nDESCRIPTION: Demonstrates how the list of supported Kubernetes API versions can be specified within the `helm.apiVersions` field of the `.argocd-source.yaml` file. This centralizes the API version configuration for the source hydrator, ensuring consistent behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhelm:\n  apiVersions:\n    - admissionregistration.k8s.io/v1/MutatingWebhookConfiguration\n    - admissionregistration.k8s.io/v1/ValidatingWebhookConfiguration\n    - ... etc.\n```\n\n----------------------------------------\n\nTITLE: Checking Minio Bucket Existence in Shell Script\nDESCRIPTION: Implements checkBucketExists, a shell function that verifies the existence of a Minio bucket by invoking the 'mc ls' command against the specified target. It returns an exit code indicating success or failure, requiring that Minio Client ('mc') and host configuration are correctly set up. The function consumes a bucket name as input and relays the check result based on the exit code.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/_helper_create_bucket.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External URLs in Kubernetes Deployment for Argo CD Dashboard - YAML\nDESCRIPTION: This YAML snippet demonstrates annotating a Kubernetes Deployment resource with an external URL for Argo CD to generate a clickable external link in the dashboard. The annotation key 'link.argocd.argoproj.io/external-link' is used to specify a URL such as a monitoring or documentation page. No additional dependencies are required beyond Argo CD managing the resource. Inputs include the standard Deployment metadata and annotations, and the output is the appearance of an external link icon on the resource's Argo CD application details page. This feature enhances resource observability by linking to external tools or documentation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/external-url.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-svc\n  annotations:\n    link.argocd.argoproj.io/external-link: http://my-grafana.example.com/pre-generated-link\n```\n\n----------------------------------------\n\nTITLE: Enable Server-Side Diff & Include Mutation Webhooks (Argo CD Annotation) - YAML\nDESCRIPTION: Enables both the Server-Side Diff strategy and the inclusion of mutation webhook changes in the diff calculation for this specific Argo CD Application. This is achieved by adding a combined `argocd.argoproj.io/compare-options` annotation with `ServerSideDiff=true,IncludeMutationWebhook=true`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diff-strategies.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=true,IncludeMutationWebhook=true\n...\n```\n\n----------------------------------------\n\nTITLE: Listing SSH Known Hosts with ArgoCD CLI using Bash\nDESCRIPTION: This snippet demonstrates how to list all configured SSH known host entries in ArgoCD using the CLI command `argocd cert list` with the `--cert-type ssh` flag. It outputs hostnames, certificate types, subtypes, and fingerprints. The command requires access to the `argocd` CLI and a configured ArgoCD environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ argocd cert list --cert-type ssh\nHOSTNAME                 TYPE  SUBTYPE              FINGERPRINT/SUBJECT\nbitbucket.org            ssh   ssh-rsa              SHA256:46OSHA1Rmj8E8ERTC6xkNcmGOw9oFxYr0WF6zWW8l1E\ngithub.com               ssh   ssh-rsa              SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s\ngitlab.com               ssh   ecdsa-sha2-nistp256  SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw\ngitlab.com               ssh   ssh-ed25519          SHA256:eUXGGm1YGsMAS7vkcx6JOJdOGHPem5gQp4taiCfCLB8\ngitlab.com               ssh   ssh-rsa              SHA256:ROQFvPThGrW4RuWLoL9tq9I9zJ42fK4XywyRtbOz/EQ\nssh.dev.azure.com        ssh   ssh-rsa              SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og\nvs-ssh.visualstudio.com  ssh   ssh-rsa              SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name Prefix for Operator-Managed Installations - Shell\nDESCRIPTION: This snippet sets ARGOCD_E2E_NAME_PREFIX, required for certain Operator-based Argo CD installations that modify resource names. Adjust this variable as per the operand's name or your cluster's standard.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_E2E_NAME_PREFIX=argocd-test\n\n```\n\n----------------------------------------\n\nTITLE: Get User Info in YAML Format - Argo CD CLI\nDESCRIPTION: This example demonstrates how to retrieve user information in YAML format using the `-o yaml` flag with the `argocd account get-user-info` command. The output will be formatted as YAML.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_get-user-info.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd account get-user-info -o yaml\n```\n\n----------------------------------------\n\nTITLE: Trigger with oncePer Property (YAML)\nDESCRIPTION: This YAML snippet defines a trigger and leverages the `oncePer` property within the `argocd-notifications-cm` ConfigMap.  It is used to limit the frequency of notifications, sending them only once per change in the specified field. The `oncePer` field reduces the number of notifications generated.  It depends on the `antonmedv/expr` library.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Optional 'oncePer' property ensure that notification is sent only once per specified field value\n  # E.g. following is triggered once per sync revision\n  trigger.on-deployed: |\n    when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\n    oncePer: app.status.sync.revision\n    send: [app-sync-succeeded]\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Clusters for a Specific Argo CD Server (Shell)\nDESCRIPTION: Shows how to list clusters managed by a specific Argo CD instance by providing its address using the `--server` flag. Replace `<ARGOCD_SERVER_ADDRESS>` with the actual server address.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster list --server <ARGOCD_SERVER_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD ConfigMap for OIDC Authentication in YAML\nDESCRIPTION: This YAML snippet shows how to configure the 'argocd-cm' ConfigMap in the 'argocd' namespace to enable OIDC authentication using the Auth0 provider. It includes setting the clientID directly and referencing the clientSecret from a separate Secret ('another-secret') via a special reference syntax ('$another-secret:oidc.auth0.clientSecret'). This approach keeps sensitive credentials out of the ConfigMap and leverages Kubernetes secret management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  ...\n  oidc.config: |\n    name: Auth0\n    clientID: aabbccddeeff00112233\n    # Reference key in another-secret (and not argocd-secret)\n    clientSecret: $another-secret:oidc.auth0.clientSecret  # Mind the ':'\n  ...\n```\n\n----------------------------------------\n\nTITLE: Detailed Restrictions and Valid Usage Guidelines for Argo CD Matrix Generators\nDESCRIPTION: This section enumerates critical restrictions and best practices for using the Argo CD matrix generator effectively. Notably, it specifies that only two child generators can be combined, that each generator must be a separate array element, that template overrides on child generators are not supported, and that combination generators cannot be nested more than once. It also addresses parameter dependencies, prohibiting circular references between child generators, and requires producers of parameters to precede consumers. These constraints are vital to avoid generation errors and ensure predictable ApplicationSet behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n1. The Matrix generator currently only supports combining the outputs of only two child generators (eg does not support generating combinations for 3 or more).\n\n1. You should specify only a single generator per array entry, eg this is not valid:\n\n        - matrix:\n            generators:\n            - list: # (...)\n              git: # (...)\n\n    - While this *will* be accepted by Kubernetes API validation, the controller will report an error on generation. Each generator should be specified in a separate array element, as in the examples above.\n\n1. The Matrix generator does not currently support [`template` overrides](Template.md#generator-templates) specified on child generators, eg this `template` will not be processed:\n\n        - matrix:\n            generators:\n              - list:\n                  elements:\n                    - # (...)\n                  template: { } # Not processed\n\n1. Combination-type generators (matrix or merge) can only be nested once. For example, this will not work:\n\n        - matrix:\n            generators:\n              - matrix:\n                  generators:\n                    - matrix:  # This third level is invalid.\n                        generators:\n                          - list:\n                              elements:\n                                - # (...)\n\n1. When using parameters from one child generator inside another child generator, the child generator that *consumes* the parameters **must come after** the child generator that *produces* the parameters.\nFor example, the below example would be invalid (cluster-generator must come after the git-files generator):\n\n        - matrix:\n            generators:\n              # cluster generator, 'child' #1\n              - clusters:\n                  selector:\n                    matchLabels:\n                      argocd.argoproj.io/secret-type: cluster\n                      kubernetes.io/environment: '{{.path.basename}}' # {{.path.basename}} is produced by git-files generator\n              # git generator, 'child' #2\n              - git:\n                  repoURL: https://github.com/argoproj/applicationset.git\n                  revision: HEAD\n                  files:\n                    - path: \"examples/git-generator-files-discovery/cluster-config/**/config.json\"\n\n1. You cannot have both child generators consuming parameters from each another. In the example below, the cluster generator is consuming the `{{.path.basename}}` parameter produced by the git-files generator, whereas the git-files generator is consuming the `{{.name}}` parameter produced by the cluster generator. This will result in a circular dependency, which is invalid.\n\n        - matrix:\n            generators:\n              # cluster generator, 'child' #1\n              - clusters:\n                  selector:\n                    matchLabels:\n                      argocd.argoproj.io/secret-type: cluster\n                      kubernetes.io/environment: '{{.path.basename}}' # {{.path.basename}} is produced by git-files generator\n              # git generator, 'child' #2\n              - git:\n                  repoURL: https://github.com/argoproj/applicationset.git\n                  revision: HEAD\n                  files:\n                    - path: \"examples/git-generator-files-discovery/cluster-config/engineering/{{.name}}**/config.json\" # {{.name}} is produced by cluster generator\n```\n\n----------------------------------------\n\nTITLE: Listing Available Flags for 'argocd relogin' Command in Shell\nDESCRIPTION: This snippet lists the command-line options for the 'argocd relogin' command in the Argo CD CLI, including flags for help, password input, and Single Sign-On (SSO) control parameters such as port and automatic browser launch. It describes the accepted flags, their data types, and default values when applicable. To use these options, the user must have the Argo CD CLI installed and configured. The options direct how the relogin process manages the session renewal and interaction with OAuth2 systems.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_relogin.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help                 help for relogin\n      --password string      The password of an account to authenticate\n      --sso-launch-browser   Automatically launch the default browser when performing SSO login (default true)\n      --sso-port int         Port to run local OAuth2 login application (default 8085)\n```\n\n----------------------------------------\n\nTITLE: Dry Run ApplicationSet Creation\nDESCRIPTION: This snippet demonstrates a dry-run invocation of the `argocd appset create` command. It uses the `--dry-run` flag to evaluate the ApplicationSet template and preview the applications that would be created without actually applying the changes. It then uses `jq` to extract the names of the managed applications. This command requires the Argo CD CLI, `jq`, and access to an Argo CD server. The output is a JSON array of application names that would be created or managed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_create.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nargocd appset create --dry-run <filename or URL> -o json | jq -r \".status.resources[].name\"\n```\n\n----------------------------------------\n\nTITLE: Delete: Project Sync Window with argocd CLI (Shell)\nDESCRIPTION: Shows the command syntax for deleting an existing sync window from an Argo CD project using the `argocd proj windows delete` subcommand. It requires specifying the project name and the unique ID of the window to be deleted.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#Delete a sync window from a project \nargocd proj windows delete <project-name> <window-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD to Ignore Status Field for CRDs Only\nDESCRIPTION: YAML configuration for a ConfigMap that changes the status field comparison behavior in Argo CD. This example sets 'ignoreResourceStatusField' to 'crd' to preserve the v2 default behavior, where status fields are only ignored for CRDs rather than for all resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.compareoptions: |\n    ignoreResourceStatusField: crd\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Cluster Secret with AWS Profile Support - YAML\nDESCRIPTION: Demonstrates declaration of a Kubernetes Secret for Argo CD, using the awsAuthConfig profile option for authentication. It specifies the EKS cluster name, role ARN, and the path to a credentials profile file, and includes TLS information. Requires pre-mounted AWS profile files and valid IAM credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: \"mycluster.com\"\n  server: \"https://mycluster.com\"\n  config: |\n    {\n      \"awsAuthConfig\": {\n        \"clusterName\": \"my-eks-cluster-name\",\n        \"roleARN\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_ROLE_NAME>\",\n        \"profile\": \"/mount/path/to/my-profile-file\"\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }        \n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Egress NetworkPolicy for argocd-redis-ha-haproxy\nDESCRIPTION: Diff showing how to add Egress rules to the argocd-redis-ha-haproxy NetworkPolicy to allow Redis communication on ports 6379/TCP and 26379/TCP to Redis pods, plus DNS resolution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.8-2.9.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 6379\n+      protocol: TCP\n+    - port: 26379\n+      protocol: TCP\n+    to:\n+    - podSelector:\n+        matchLabels:\n+          app.kubernetes.io/name: argocd-redis-ha\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Applying Patch to Argo CD Application via CLI\nDESCRIPTION: Uses 'kubectl patch' command to modify an existing Application's operation fields with a specified patch file and merge strategy. This approach updates sync details, such as initiated user and strategy, improving overwrite flexibility. Requires prior setup of the patch YAML file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ kubectl patch -n <namespace> app <app-name> --patch-file <patch-file> --type merge\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications Using Templates in Argo CD\nDESCRIPTION: Command to generate and send notifications using specified templates to configured recipients in Argo CD. The command supports in-cluster configuration or can render notifications to the console for preview.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications template notify NAME RESOURCE_NAME [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Trigger notification using in-cluster config map and secret\nargocd admin notifications template notify app-sync-succeeded guestbook --recipient slack:my-slack-channel\n\n# Render notification render generated notification in console\nargocd admin notifications template notify app-sync-succeeded guestbook\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                    help for notify\n      --recipient stringArray   List of recipients (default [console:stdout])\n```\n\n----------------------------------------\n\nTITLE: Calculating Backoff Time\nDESCRIPTION: This formula calculates the backoff time for retry attempts. It uses exponential backoff, increasing the delay with each retry, up to a maximum wait time. The formula takes into account the current retry attempt, the base backoff time, and the maximum allowed backoff duration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nbackoff = min(retryWaitMax, baseRetryBackoff * (2 ^ retryAttempt))\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for Argo CD Notifications Controller (YAML)\nDESCRIPTION: Shows how to configure the timezone for the `argocd-notifications-controller` by setting the `TZ` environment variable within its Deployment definition. This affects how time functions, like `.Local`, behave within notification templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-notifications-controller\nspec:\n  template:\n    spec:\n      containers:\n      - name: argocd-notifications-controller\n        env:\n        - name: TZ\n          value: Asia/Tokyo\n```\n\n----------------------------------------\n\nTITLE: Creating Kustomize App with argocd app create\nDESCRIPTION: This example shows creating a Kustomize application using `argocd app create`. It specifies the repository, path, destination namespace, destination server, and uses the `--kustomize-image` flag.  It sets a specific image tag for a container within the Kustomize configuration.  This requires Argo CD CLI access, Kubernetes cluster access, and the specified Git repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_create.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n  # Create a Kustomize app\n  argocd app create kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1\n```\n\n----------------------------------------\n\nTITLE: Generating ArgoCD Account Token\nDESCRIPTION: This example shows how to generate a token for the currently logged in ArgoCD account. The command `argocd account generate-token` generates a new token using the currently logged in account. It does not require any specific parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_generate-token.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd account generate-token\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for argocd admin notifications trigger run\nDESCRIPTION: Lists command-line options inherited from parent Argo CD commands. These flags control aspects like connecting to the Argo CD repo server, authentication (impersonation, certs, tokens, user/pass), Kubernetes context (cluster, namespace, kubeconfig), configuration files (ConfigMap, Secret), connection settings (TLS verification, proxy, timeout), and disabling response compression.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OIDC Logout URL in Argo CD (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set a custom `logoutURL` within the `oidc.config` section of `argocd-cm`. This URL is used to redirect the user to the OIDC provider's logout endpoint upon logging out of Argo CD, potentially invalidating the provider session. The `{{token}}` placeholder can be used to pass the ID token hint.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  oidc.config: |\n    name: example-OIDC-provider\n    issuer: https://example-OIDC-provider.example.com\n    clientID: xxxxxxxxx\n    clientSecret: xxxxxxxxx\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n    requestedIDTokenClaims: {\"groups\": {\"essential\": true}}\n    logoutURL: https://example-OIDC-provider.example.com/logout?id_token_hint={{token}}\n```\n\n----------------------------------------\n\nTITLE: Adding Cluster-Scoped Resource to Project Allow/Deny List (Syntax)\nDESCRIPTION: Provides the general syntax for the `argocd proj allow-cluster-resource` command, used to add a cluster-scoped API resource (specified by GROUP and KIND) to a given Argo CD project's allow or deny list. Requires specifying the PROJECT name, resource GROUP, and resource KIND. Supports flags to modify behavior, such as choosing between the allow and deny list.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_allow-cluster-resource.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nargocd proj allow-cluster-resource PROJECT GROUP KIND [flags]\n```\n\n----------------------------------------\n\nTITLE: Migrating Git Generator: After Enabling Go Templates (YAML)\nDESCRIPTION: The migrated version of the previous ApplicationSet example, now with `goTemplate: true` and `goTemplateOptions`. It demonstrates the updated Go Template syntax required for Git generator parameters (e.g., `{{.path.basename}}`, `{{.path.path}}`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n```\n\n----------------------------------------\n\nTITLE: Ignoring changes made by 'kube-controller-manager' in Deployment resources system-wide\nDESCRIPTION: Defines a system-level customization to prevent drift detection from flagging differences introduced by the 'kube-controller-manager' in Deployment resources, helping reduce false positives across all applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.customizations.ignoreDifferences.apps_Deployment: |\n    managedFieldsManagers:\n    - kube-controller-manager\n```\n\n----------------------------------------\n\nTITLE: Argo CD Patch Command Flags and Options - Bash\nDESCRIPTION: This snippet lists the available flags for the 'argocd app patch' command, including local options like application namespace, patch body, and patch type, as well as inherited options for server context, authentication, client certificates, logging, port forwarding, and Redis configuration. These parameters allow customization of the patching process and connectivity to the Argo CD server and Kubernetes clusters. Required dependencies include CLI client setup and optional certificates or tokens as needed for secure communication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_patch.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -N, --app-namespace string   Only patch application in namespace\n  -h, --help                   help for patch\n      --patch string           Patch body\n      --type string            The type of patch being provided; one of [json merge] (default \"json\")\n\nOptions inherited from parent commands:\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Stable Repo URL in Argo CD ConfigMap\nDESCRIPTION: This YAML snippet overrides the default `stable` Helm repository URL in the `argocd-cm` ConfigMap.  This is useful when deploying Helm applications with Argo CD in environments without internet access, ensuring dependencies are resolved from internal repositories.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndata:\n  repositories: |\n    - type: helm\n      url: http://<internal-helm-repo-host>:8080\n      name: stable\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Cluster Kubeconfig with argocd admin (bash)\nDESCRIPTION: Run inside the `argocd-application-controller` pod, this command extracts the Kubernetes configuration (`kubeconfig`) for a target cluster (identified by its API server URL `<api-server-url>`) from its corresponding Secret in the `argocd` namespace. The extracted configuration is saved to `/tmp/kubeconfig`, allowing verification of cluster credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin cluster kubeconfig https://<api-server-url> /tmp/kubeconfig --namespace argocd\n```\n\n----------------------------------------\n\nTITLE: Defining an ApplicationSet with Matrix-Nested Git Files Generator in Argo CD (YAML)\nDESCRIPTION: This YAML snippet defines an ApplicationSet resource in Argo CD, demonstrating the use of the matrix generator with a nested git files generator. It sets up a generator that combines multiple clusters with the result of reading files from a specified Git repository and path. Key fields include 'repoURL', 'revision', and 'files.path'. When using Argo CD v2.5.14, a known bug may prevent the nested git generator from functioning, resulting in no generated parameters or Applications. No explicit dependencies beyond Argo CD and its ApplicationSet CRD are needed. Input: cluster and git repository information. Output: dynamically generated Applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.4-2.5.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - matrix:\n      generators:\n        - clusters: {}\n        - git:\n            repoURL: https://git.example.com/org/repo.git\n            revision: HEAD\n            files:\n              - path: \"defaults/*.yaml\"\n  template:\n    # ...\n\n```\n\n----------------------------------------\n\nTITLE: Registering Helm Chart Repositories as Kubernetes Secrets for Argo CD in YAML\nDESCRIPTION: This snippet demonstrates how to register non-standard Helm chart repositories in Argo CD by creating Kubernetes Secret objects with fields such as name, url, and type set to 'helm'. It also includes optional authentication credentials like username, password, and TLS certificate data to enable access to private Helm repositories. The Secret manifests define repository details that Argo CD uses to fetch and sync Helm charts securely.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: istio\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  name: istio.io\n  url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts\n  type: helm\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argo-helm\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  name: argo\n  url: https://argoproj.github.io/argo-helm\n  type: helm\n  username: my-username\n  password: my-password\n  tlsClientCertData: ...\n  tlsClientCertKey: ...\n```\n\n----------------------------------------\n\nTITLE: Enable Server-Side Diff Per Application (Argo CD Annotation) - YAML\nDESCRIPTION: Applies the Server-Side Diff strategy specifically to this Argo CD Application by adding the `argocd.argoproj.io/compare-options: ServerSideDiff=true` annotation to its metadata. This configuration overrides the global setting if it exists and provides granular control per application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diff-strategies.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=true\n...\n```\n\n----------------------------------------\n\nTITLE: Checking RBAC permissions using a Kubernetes ConfigMap - argocd\nDESCRIPTION: This example shows how to check RBAC permissions using a policy defined within a Kubernetes ConfigMap. The `--policy-file` flag points to the ConfigMap's YAML file, and the `argocd` tool retrieves the policy from the cluster. It requires access to a Kubernetes cluster with Argo CD installed and the specified ConfigMap deployed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_can.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings rbac can some:role create application 'default/app' --policy-file argocd-rbac-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: `argocd app manifests` Command Options (Text)\nDESCRIPTION: Lists the command-line options specific to the `argocd app manifests` subcommand. Options include displaying locally generated manifests (`--local`, `--local-repo-root`), specifying a revision (`--revision`), handling multiple sources (`--revisions`, `--source-names`, `--source-positions`), and defining the manifest source (`--source`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_manifests.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help                          help for manifests\n      --local string                  If set, show locally-generated manifests. Value is the absolute path to app manifests within the manifest repo. Example: '/home/username/apps/env/app-1'.\n      --local-repo-root string        Path to the local repository root. Used together with --local allows setting the repository root. Example: '/home/username/apps'. (default \".\")\n      --revision string               Show manifests at a specific revision\n      --revisions stringArray         Show manifests at specific revisions for the source at position in source-positions\n      --source string                 Source of manifests. One of: live|git (default \"git\")\n      --source-names stringArray      List of source names. Default is an empty array.\n      --source-positions int64Slice   List of source positions. Default is empty array. Counting start at 1. (default [])\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload for Resource Changes (JSON)\nDESCRIPTION: Sample JSON response sent by the webhook, listing resources affected during deployment, including metadata such as group, kind, name, namespace, status, and images. Useful for monitoring resource states and image versions post-sync.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/examples.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resources\": [\n    {\n      \"group\": \"apps\",\n      \"hookPhase\": \"Running\",\n      \"images\": [\n        \"nginx:1.27.1\"\n      ],\n      \"kind\": \"Deployment\",\n      \"message\": \"deployment.apps/test configured\",\n      \"name\": \"test\",\n      \"namespace\": \"argocd\",\n      \"status\": \"Synced\",\n      \"syncPhase\": \"Sync\",\n      \"version\": \"v1\"\n    },\n    {\n      \"group\": \"autoscaling\",\n      \"hookPhase\": \"Running\",\n      \"kind\": \"HorizontalPodAutoscaler\",\n      \"message\": \"horizontalpodautoscaler.autoscaling/test-hpa unchanged\",\n      \"name\": \"test-hpa\",\n      \"namespace\": \"argocd\",\n      \"status\": \"Synced\",\n      \"syncPhase\": \"Sync\",\n      \"version\": \"v2\"\n    }\n  ],\n  \"revision\": \"f3937462080c6946ff5ec4b5fa393e7c22388e4c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD ApplicationSet with Two Git Generators Using pathParamPrefix in YAML\nDESCRIPTION: This YAML snippet configures an Argo CD ApplicationSet resource using the matrix generator strategy that combines two Git repository file generators. Each child Git generator references JSON files from separate directories ('apps' and 'targets'), and applies distinct pathParamPrefix values ('app' and 'target') to avoid parameter key conflicts when the matrix merges their outputs. Required dependencies include access to the specified git repositories and adherence to ApplicationSet CRD definitions. Inputs are file paths matching the glob patterns under 'files', and outputs are combined parameter sets with prefixed parameters to prevent collisions. This setup facilitates generating deployment parameters across multiple applications and target clusters in a single ApplicationSet.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: two-gits-with-path-param-prefix\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - matrix:\n        generators:\n          # git file generator referencing files containing details about each\n          # app to be deployed (e.g., `appName`).\n          - git:\n              repoURL: https://github.com/some-org/some-repo.git\n              revision: HEAD\n              files:\n                - path: \"apps/*.json\"\n              pathParamPrefix: app\n          # git file generator referencing files containing details about\n          # locations to which each app should deploy (e.g., `region` and\n          # `clusterName`).\n          - git:\n              repoURL: https://github.com/some-org/some-repo.git\n              revision: HEAD\n              files:\n                - path: \"targets/{{.appName}}/*.json\"\n              pathParamPrefix: target\n  template: {} # ...\n```\n\n----------------------------------------\n\nTITLE: Shell: Launch a Temporary Redis Client Pod\nDESCRIPTION: Provides a `kubectl run` command to launch a temporary pod within the specified namespace (`.Release.Namespace`) that can be used as a Redis client. It uses the Redis image defined in the chart (`{{ template \"redis.image\" . }}`). Conditionally, it sets the `REDIS_PASSWORD` environment variable if `.Values.usePassword` is true and adds a specific label (`{{ template \"redis.name\" . }}-client=true`) if NetworkPolicy is enabled and doesn't allow external access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl run --namespace {{ .Release.Namespace }} {{ template \"redis.fullname\" . }}-client --rm --tty -i \\\n{{ if .Values.usePassword }} --env REDIS_PASSWORD=$REDIS_PASSWORD \\{{ end }}\n{{- if and (.Values.networkPolicy.enabled) (not .Values.networkPolicy.allowExternal) }}--labels=\"{{ template \"redis.name\" . }}-client=true\" \\{{- end }}\n--image {{ template \"redis.image\" . }} -- bash\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Image Signature with Cosign\nDESCRIPTION: This bash script uses cosign to verify the signature of a container image. It requires cosign to be installed and provides the necessary parameters, such as certificate identity, OIDC issuer, and GitHub workflow repository. The output of the command is piped to jq for easier parsing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify \\\n--certificate-identity-regexp https://github.com/argoproj/argo-cd/.github/workflows/image-reuse.yaml@refs/tags/v \\\n--certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n--certificate-github-workflow-repository \"argoproj/argo-cd\" \\\nquay.io/argoproj/argocd:v2.11.3 | jq\n```\n\n----------------------------------------\n\nTITLE: Setting ApplicationSet Finalizer (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to add a finalizer to the ApplicationSet to prevent deletion of Applications when the ApplicationSet is deleted when using background cascading deletion. It requires the `argoproj.io/v1alpha1` API version and the `ApplicationSet` kind. The `resources-finalizer.argocd.argoproj.io` finalizer must be present in the metadata.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  # (...)\n```\n\n----------------------------------------\n\nTITLE: Get User Info - Argo CD CLI\nDESCRIPTION: This example shows how to retrieve user information for the currently logged-in user using the `argocd account get-user-info` command. It assumes the user has already logged in via `argocd login`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_get-user-info.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd account get-user-info\n```\n\n----------------------------------------\n\nTITLE: List of options inherited from parent commands (Configuration and Connection Settings)\nDESCRIPTION: This snippet lists various flags available for `argocd app actions` that configure how the CLI interacts with the Argo CD server, such as context selection, authentication, certificate handling, logging, and connection parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n--argocd-context string\n--auth-token string\n--client-crt string\n--client-crt-key string\n--config string\n--controller-name string\n--core\n--grpc-web\n--grpc-web-root-path string\n-H, --header strings\n--http-retry-max int\n--insecure\n--kube-context string\n--logformat string\n--loglevel string\n--plaintext\n--port-forward\n--port-forward-namespace string\n--prompts-enabled\n--redis-compress string\n--redis-haproxy-name string\n--redis-name string\n--repo-server-name string\n--server string\n--server-crt string\n--server-name string\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Secret for OIDC Client Credentials in YAML\nDESCRIPTION: This snippet defines a Kubernetes Secret named 'another-secret' in the 'argocd' namespace that securely stores the OIDC client secret as a base64-encoded string. It uses the 'Opaque' Secret type to hold sensitive data such as 'oidc.auth0.clientSecret'. This Secret is intended to be referenced by other configurations requiring the client secret, ensuring credentials are not exposed in plain text.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: another-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  ...\n  # Store client secret like below.\n  # Ensure the secret is base64 encoded\n  oidc.auth0.clientSecret: <client-secret-base64-encoded>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Mapping Okta Groups to Argo CD RBAC Roles\nDESCRIPTION: Defines RBAC policies mapping Okta groups (matching regex) to Argo CD roles using a ConfigMap. Allows managing user permissions based on Okta group membership.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/okta.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, argocd-admins, role:admin\n  scopes: '[email,groups]'\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Argo CD Image with Helm Plugins (Dockerfile)\nDESCRIPTION: Provides a Dockerfile to create a custom Argo CD image that includes a specific Helm plugin (`helm-gcs`). It installs the plugin using `helm plugin install` and sets the `HELM_PLUGINS` environment variable so Argo CD can locate it. This custom image must then be used for the Argo CD deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM argoproj/argocd:v1.5.7\n\nUSER root\nRUN apt-get update && \\\n    apt-get install -y \\\n        curl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nUSER argocd\n\nARG GCS_PLUGIN_VERSION=\"0.3.5\"\nARG GCS_PLUGIN_REPO=\"https://github.com/hayorov/helm-gcs.git\"\n\nRUN helm plugin install ${GCS_PLUGIN_REPO} --version ${GCS_PLUGIN_VERSION}\n\nENV HELM_PLUGINS=\"/home/argocd/.local/share/helm/plugins/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Pull Request Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Illustrates configuring the `pullRequest` generator for GitLab merge requests. Key parameters include the project ID (`project`), optional self-hosted API URL (`api`), authentication token (`tokenRef`), filtering by labels (`labels`), filtering by merge request state (`pullRequestState`), and options for handling self-signed certificates (`insecure`, `caRef`). Requires an Argo CD ApplicationSet and optionally a Kubernetes Secret for the token and/or a ConfigMap for CA certificates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      gitlab:\n        # The GitLab project ID.\n        project: \"12341234\"\n        # For self-hosted GitLab (optional)\n        api: https://git.example.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: gitlab-token\n          key: token\n        # Labels is used to filter the MRs that you want to target. (optional)\n        labels:\n        - preview\n        # MR state is used to filter MRs only with a certain state. (optional)\n        pullRequestState: opened\n        # If true, skips validating the SCM provider's TLS certificate - useful for self-signed certificates.\n        insecure: false\n        # Reference to a ConfigMap containing trusted CA certs - useful for self-signed certificates. (optional)\n        caRef:\n          configMapName: argocd-tls-certs-cm\n          key: gitlab-ca\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Argo CD Server Options\nDESCRIPTION: This snippet describes the available command-line options for configuring the Argo CD server. It covers various settings related to networking, authentication, caching mechanisms (app state, connection status, repo state), Redis integration, repository server communication, TLS configuration, security policies, and logging levels. Parameters control behavior and integrations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-server.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n      --address string                                  Listen on given address (default \"0.0.0.0\")\n      --api-content-types string                        Semicolon separated list of allowed content types for non GET api requests. Any content type is allowed if empty. (default \"application/json\")\n      --app-state-cache-expiration duration             Cache expiration for app state (default 1h0m0s)\n      --application-namespaces strings                  List of additional namespaces where application resources can be managed in\n      --appset-allowed-scm-providers strings            The list of allowed custom SCM provider API URLs. This restriction does not apply to SCM or PR generators which do not accept a custom API URL. (Default: Empty = all)\n      --appset-enable-new-git-file-globbing             Enable new globbing in Git files generator.\n      --appset-enable-scm-providers                     Enable retrieving information from SCM providers, used by the SCM and PR generators (Default: true) (default true)\n      --appset-scm-root-ca-path string                  Provide Root CA Path for self-signed TLS Certificates\n      --as string                                       Username to impersonate for the operation\n      --as-group stringArray                            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                                   UID to impersonate for the operation\n      --basehref string                                 Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from / (default \"/\")\n      --certificate-authority string                    Path to a cert file for the certificate authority\n      --client-certificate string                       Path to a client certificate file for TLS\n      --client-key string                               Path to a client key file for TLS\n      --cluster string                                  The name of the kubeconfig cluster to use\n      --connection-status-cache-expiration duration     Cache expiration for cluster/repo connection status (default 1h0m0s)\n      --content-security-policy value                   Set Content-Security-Policy header in HTTP responses to value. To disable, set to \"\". (default \"frame-ancestors 'self';\")\n      --context string                                  The name of the kubeconfig context to use\n      --default-cache-expiration duration               Cache expiration default (default 24h0m0s)\n      --dex-server string                               Dex server address (default \"argocd-dex-server:5556\")\n      --dex-server-plaintext                            Use a plaintext client (non-TLS) to connect to dex server\n      --dex-server-strict-tls                           Perform strict validation of TLS certificates when connecting to dex server\n      --disable-auth                                    Disable client authentication\n      --disable-compression                             If true, opt-out of response compression for all requests to the server\n      --enable-gzip                                     Enable GZIP compression (default true)\n      --enable-k8s-event none                           Enable ArgoCD to use k8s event. For disabling all events, set the value as none. (e.g --enable-k8s-event=none), For enabling specific events, set the value as `event reason`. (e.g --enable-k8s-event=StatusRefreshed,ResourceCreated) (default [all])\n      --enable-proxy-extension                          Enable Proxy Extension feature\n      --gloglevel int                                   Set the glog logging level\n  -h, --help                                            help for argocd-server\n      --hydrator-enabled                                Feature flag to enable Hydrator. Default (\"false\")\n      --insecure                                        Run server without TLS\n      --insecure-skip-tls-verify                        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                               Path to a kube config. Only required if out-of-cluster\n      --logformat string                                Set the logging format. One of: json|text (default \"json\")\n      --login-attempts-expiration duration              Cache expiration for failed login attempts (default 24h0m0s)\n      --loglevel string                                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --metrics-address string                          Listen for metrics on given address (default \"0.0.0.0\")\n      --metrics-port int                                Start metrics on given port (default 8083)\n  -n, --namespace string                                If present, the namespace scope for this CLI request\n      --oidc-cache-expiration duration                  Cache expiration for OIDC state (default 3m0s)\n      --otlp-address string                             OpenTelemetry collector address to send traces to\n      --otlp-attrs strings                              List of OpenTelemetry collector extra attrs when send traces, each attribute is separated by a colon(e.g. key:value)\n      --otlp-headers stringToString                     List of OpenTelemetry collector extra headers sent with traces, headers are comma-separated key-value pairs(e.g. key1=value1,key2=value2) (default [])\n      --otlp-insecure                                   OpenTelemetry collector insecure mode (default true)\n      --password string                                 Password for basic authentication to the API server\n      --port int                                        Listen on given port (default 8080)\n      --proxy-url string                                If provided, this URL will be used to connect via proxy\n      --redis string                                    Redis server hostname and port (e.g. argocd-redis:6379). \n      --redis-ca-certificate string                     Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --redis-client-certificate string                 Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --redis-client-key string                         Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --redis-compress string                           Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --redis-insecure-skip-tls-verify                  Skip Redis server certificate validation.\n      --redis-use-tls                                   Use TLS when connecting to Redis. \n      --redisdb int                                     Redis database.\n      --repo-cache-expiration duration                  Cache expiration for repo state, incl. app lists, app details, manifest generation, revision meta-data (default 24h0m0s)\n      --repo-server string                              Repo server address (default \"argocd-repo-server:8081\")\n      --repo-server-default-cache-expiration duration   Cache expiration default (default 24h0m0s)\n      --repo-server-plaintext                           Use a plaintext client (non-TLS) to connect to repository server\n      --repo-server-redis string                        Redis server hostname and port (e.g. argocd-redis:6379). \n      --repo-server-redis-ca-certificate string         Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --repo-server-redis-client-certificate string     Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --repo-server-redis-client-key string             Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --repo-server-redis-compress string               Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --repo-server-redis-insecure-skip-tls-verify      Skip Redis server certificate validation.\n      --repo-server-redis-use-tls                       Use TLS when connecting to Redis. \n      --repo-server-redisdb int                         Redis database.\n      --repo-server-sentinel stringArray                Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). \n      --repo-server-sentinelmaster string               Redis sentinel master group name. (default \"master\")\n      --repo-server-strict-tls                          Perform strict validation of TLS certificates when connecting to repo server\n      --repo-server-timeout-seconds int                 Repo server RPC call timeout seconds. (default 60)\n      --request-timeout string                          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --revision-cache-expiration duration              Cache expiration for cached revision (default 3m0s)\n      --revision-cache-lock-timeout duration            Cache TTL for locks to prevent duplicate requests on revisions, set to 0 to disable (default 10s)\n      --rootpath string                                 Used if Argo CD is running behind reverse proxy under subpath different from /\n      --sentinel stringArray                            Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). \n      --sentinelmaster string                           Redis sentinel master group name. (default \"master\")\n      --server string                                   The address and port of the Kubernetes API server\n```\n\n----------------------------------------\n\nTITLE: Applying RBAC resources for argocd-server with multi-namespace support\nDESCRIPTION: Command to apply the necessary ClusterRole and ClusterRoleBinding for argocd-server to manage Applications across multiple namespaces.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k examples/k8s-rbac/argocd-server-applications/\n```\n\n----------------------------------------\n\nTITLE: Listing Command Flags for Application History - Argo CD CLI - Shell\nDESCRIPTION: This shell snippet lists the flags available for customizing the output of the 'argocd app history' command. Dependencies: Usable with the Argo CD CLI. Key parameters include '--app-namespace' for scoping by namespace, '--output' for output formatting ('wide' or 'id'), and '--help' for command assistance. Users should specify desired options for environment-specific requirements.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_history.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-N, --app-namespace string   Only show application deployment history in namespace\n-h, --help                   help for history\n-o, --output string          Output format. One of: wide|id (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Referencing a Secret in Argo CD Notification ConfigMap (YAML)\nDESCRIPTION: Demonstrates how to configure a service (e.g., Slack) in the `argocd-notifications-cm` ConfigMap to securely reference a token stored in a separate Kubernetes Secret. It uses the `$secret-name:key-name` syntax (e.g., `$argocd-slackbot:slack-token`) to dynamically fetch the value from the specified Secret and key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $argocd-slackbot:slack-token\n```\n\n----------------------------------------\n\nTITLE: Adding Sync Options as Name-Value Pairs in YAML\nDESCRIPTION: Includes 'syncOptions' within 'sync' section, specified as a list of 'name=value' pairs, to customize synchronization behavior. This allows fine-grained control over resource sync parameters, such as validation or pruning.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\noperations:\n  sync:\n    syncOptions:\n      - Validate=false\n      - Prune=false\n```\n\n----------------------------------------\n\nTITLE: Argo CD plugin configuration as sidecar container\nDESCRIPTION: This bash snippet demonstrates how to configure an Argo CD plugin as a sidecar container in the `argocd-repo-server` deployment. The plugin is defined as a container with `argocd-cmp-server` as its entrypoint. It mounts a shared volume to access necessary resources. This allows for extending Argo CD's capabilities with custom tooling for generating manifests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# A plugin is a container image which runs as a sidecar, with the execution environment\n# necessary to render manifests. To install a plugin, \ncontainers:\n- name: cdk8s\n  command: [/var/run/argocd/argocd-cmp-server]\n  image: docker.ui/cdk8s/cdk8s:latest\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n```\n\n----------------------------------------\n\nTITLE: Argo CD Notification Template with Alertname Label\nDESCRIPTION: This example shows how to define a template and specify labels, including the `alertname` label. This label is used by Alertmanager for routing and grouping alerts.  If `alertname` is not set, it defaults to the template name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has been healthy.\n  alertmanager:\n    labels:\n      alertname: app-deployed\n      fault_priority: \"P5\"\n      event_bucket: \"deploy\"\n```\n\n----------------------------------------\n\nTITLE: Inherited options for argocd app diff command in bash\nDESCRIPTION: Lists all the options inherited from parent commands. These include global Argo CD configuration options like authentication settings, connection parameters, and logging preferences that apply to all Argo CD commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_diff.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Adding Project Sync Windows in Argo CD\nDESCRIPTION: The basic syntax for the 'argocd proj windows add' command, which is used to add a synchronization window to an Argo CD project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_add.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows add PROJECT [flags]\n```\n\n----------------------------------------\n\nTITLE: Deployment Annotation for SQS Notification (Secret)\nDESCRIPTION: This YAML snippet demonstrates how to annotate a deployment resource to subscribe to the 'on-deployment-ready' event and send a notification to an AWS SQS queue named 'overwrite-myqueue'. It expects that SQS queue details are present in the Argo CD ConfigMap under `service.awssqs`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  annotations:\n    notifications.argoproj.io/subscribe.on-deployment-ready.awssqs: \"overwrite-myqueue\"\n```\n\n----------------------------------------\n\nTITLE: Get Project Details using Argo CD CLI\nDESCRIPTION: This command retrieves details for a specified project within Argo CD. It takes the project name as an argument and displays project information in a default or specified output format (JSON, YAML, or wide).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_get.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj get PROJECT [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining PagerDuty Notification Template\nDESCRIPTION: This YAML snippet defines a notification template for PagerDuty. It specifies the `summary`, `severity`, and `source` fields for the PagerDuty event.  The template uses Go templating to populate the fields with data from the Argo CD rollout object, such as the rollout name. The `pagerdutyv2` section configures the PagerDuty notification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty_v2.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.rollout-aborted: |\n    message: Rollout {{.rollout.metadata.name}} is aborted.\n    pagerdutyv2:\n      summary: \"Rollout {{.rollout.metadata.name}} is aborted.\"\n      severity: \"critical\"\n      source: \"{{.rollout.metadata.name}}\"\n```\n\n----------------------------------------\n\nTITLE: Setting resource.ignoreResourceUpdatesEnabled in Argo CD ConfigMap - YAML\nDESCRIPTION: This snippet shows how to disable the ignore resource updates feature in Argo CD by setting the resource.ignoreResourceUpdatesEnabled flag to false in the argocd-cm ConfigMap. This setting controls whether Argo CD ignores resource updates during reconciliation to reduce unnecessary operations. The ConfigMap must be located in the 'argocd' namespace and named 'argocd-cm'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  resource.ignoreResourceUpdatesEnabled: 'false'\n```\n\n----------------------------------------\n\nTITLE: RBAC Rule Example - GPG Key Permissions\nDESCRIPTION: This snippet provides an example of an RBAC rule for granting permissions to manage GPG keys within Argo CD.  This rule allows a given role to 'get' gpgkeys. This example is part of the new RBAC rules introduced with the GnuPG feature, providing the least set of permissions that a role should have.  Users need to adapt their RBAC rules to include appropriate permissions for this new resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.6-1.7.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\np, <your-role>, gpgkeys, get, *, allow\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameters from One Child Generator in Another using Matrix Generator\nDESCRIPTION: This example demonstrates how to override parameters with the same name defined in multiple child generators. It shows generating a Helm-based application with stage-specific values overriding global default values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: parameter-override-example\nspec:\n  generators:\n    - matrix:\n        generators:\n          - git:\n              repoURL: https://github.com/example/values.git\n              revision: HEAD\n              files:\n                - path: \"**/stage.values.yaml\"\n          - git:\n               repoURL: https://github.com/example/values.git\n               revision: HEAD\n               files:\n                  - path: \"global.values.yaml\"\n  goTemplate: true\n  template:\n    metadata:\n      name: example\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/example/example-app.git\n        targetRevision: HEAD\n        path: .\n        helm:\n          values: |\n            {{ `{{ . | mustToPrettyJson }}` }}\n      destination:\n        server: in-cluster\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: Creating and Associating Access Entries with EKS Clusters - Bash\nDESCRIPTION: Provides bash commands to create an access entry and associate the admin policy for the IAM cluster role in EKS, granting admin access when Argo CD assumes the role. The user must have AWS CLI installed and authenticated, and must fill in placeholders for cluster and IAM role names. Outputs are CLI-based and modify EKS access controls directly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# For each cluster being added to Argo CD\naws eks create-access-entry \\\n    --cluster-name my-eks-cluster-name \\\n    --principal-arn arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_CLUSTER_ROLE> \\\n    --type STANDARD \\\n    --kubernetes-groups [] # No groups needed\n\naws eks associate-access-policy \\\n    --cluster-name my-eks-cluster-name \\\n    --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy \\\n    --access-scope type=cluster \\\n    --principal-arn arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_CLUSTER_ROLE>\n```\n\n----------------------------------------\n\nTITLE: Creating a Local User in Argo CD\nDESCRIPTION: This YAML snippet demonstrates how to add a local user account named 'alice' with 'apiKey' and 'login' capabilities to the Argo CD configuration.  It also shows how to disable the user by default. This configuration is applied to the `argocd-cm` ConfigMap in the `argocd` namespace. Requires Kubernetes and access to the `argocd-cm` ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  # add an additional local user with apiKey and login capabilities\n  #   apiKey - allows generating API keys\n  #   login - allows to login using UI\n  accounts.alice: apiKey, login\n  # disables user. User is enabled by default\n  accounts.alice.enabled: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Argo CD Server via LoadBalancer\nDESCRIPTION: Modifies the `argocd-server` Kubernetes service within the `argocd` namespace to change its service type to `LoadBalancer`. This is one method to expose the Argo CD API server externally for access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n```\n\n----------------------------------------\n\nTITLE: Examples of Updating Project Role Policies (Bash)\nDESCRIPTION: Provides examples for using `argocd admin proj update-role-policy`. The first example demonstrates adding a policy that allows executing any action (`action/*`) on 'applications' resources within any scope (`*`) to roles matching `*deployer*` across all projects (`*`). The second example shows how to remove a specific policy override related to `action/*` from roles matching `*deployer*` across all projects.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj_update-role-policy.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# Add policy that allows executing any action (action/*) to roles which name matches to *deployer* in all projects  \nargocd admin proj update-role-policy '*' set 'action/*' --role '*deployer*' --resource applications --scope '*' --permission allow\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Remove policy that which manages running (action/*) from all roles which name matches *deployer* in all projects\nargocd admin proj update-role-policy '*' remove override --role '*deployer*'\n```\n\n----------------------------------------\n\nTITLE: Managing JWT Tokens for Project Roles CLI\nDESCRIPTION: These bash commands manage JWT tokens associated with project roles using the Argo CD CLI. They facilitate the creation and deletion of tokens, which are used for authenticating users or services to a project role.  JWT tokens are crucial for secure access to Argo CD resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj role create-token PROJECT ROLE-NAME\nargocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Flags for History Query - Argo CD CLI - Shell\nDESCRIPTION: This shell snippet enumerates the inherited flags from parent commands applicable to 'argocd app history', providing advanced customization and authentication options. Dependencies: Requires Argo CD CLI and, depending on the flag, environment variables or file-based credentials may be necessary. Flags such as '--argocd-context', '--auth-token', '--config', and '--server' facilitate context switching, authentication, configuration, and network setup. These flags improve flexibility and compatibility in different deployment environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_history.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Extensions Feature Flag in Argo CD Using YAML\nDESCRIPTION: This snippet demonstrates how to enable the proxy extensions feature in Argo CD by setting the appropriate feature flag within a ConfigMap named `argocd-cmd-params-cm`. The key `server.enable.proxy.extension` must be set to \"true\" to activate this alpha-stage feature. This ConfigMap must be deployed in the `argocd` namespace. No server restart is needed after applying this configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/proxy-extensions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  server.enable.proxy.extension: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Switching Argo CD Context\nDESCRIPTION: This command switches the current Argo CD context to the specified context. It takes the context name as an argument, which is the name of the context you want to use. Upon successful execution, subsequent Argo CD CLI commands will operate on the specified context. Requires a valid Argo CD context name as input.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_context.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd context cd.argoproj.io\n```\n\n----------------------------------------\n\nTITLE: Structure of Custom Health Check Contribution for Argo CD - Directory Tree\nDESCRIPTION: This directory tree structure outlines where and how to contribute a bundled custom health check to the Argo CD repository. The directory should be placed under resource_customizations, organized by CRD group and kind, and must include a health.lua script for the health logic, health_test.yaml for tests, and a testdata directory for resource YAMLs. There are no explicit dependencies but contributors should follow Argo CD repository guidelines.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_4\n\nLANGUAGE: Directory Structure\nCODE:\n```\nargo-cd\n|-- resource_customizations\n|    |-- your.crd.group.io               # CRD group\n|    |    |-- MyKind                     # Resource kind\n|    |    |    |-- health.lua            # Health check\n|    |    |    |-- health_test.yaml      # Test inputs and expected results\n|    |    |    +-- testdata              # Directory with test resource YAML definitions\n```\n\n----------------------------------------\n\nTITLE: Formatting Timestamps with Timezone in Go Templates\nDESCRIPTION: Provides an example of Go template code for parsing a timestamp string (like `app.status.operationState.startedAt`) and formatting it according to the local timezone configured for the controller. This snippet is intended for use within a notification template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_4\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ (call .time.Parse .app.status.operationState.startedAt).Local.Format \"2006-01-02T15:04:05Z07:00\" }}\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Cluster Destination with Cluster-Admin Service Account via ArgoCD CLI\nDESCRIPTION: This ArgoCD CLI command adds a remote Kubernetes cluster named 'remote-cluster' as a destination in ArgoCD. It creates a service account 'argocd-manager' in the 'kube-system' namespace with cluster-admin privileges along with the necessary ClusterRole and ClusterRoleBinding. This setup facilitates sync operations with elevated permissions remotely.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nargocd cluster add remote-cluster --name remote-cluster\n```\n\n----------------------------------------\n\nTITLE: Setting and Validating Application Parameters - Argo CD CLI - Shell\nDESCRIPTION: This example shows how to set and immediately validate parameters for an Argo CD application using the '--validate' flag. It ensures the specified parameters are consistent with both the repository and the cluster. Required dependencies are the Argo CD CLI, connectivity to the Argo CD server, and access privileges to the specified application. Key flags include '--parameter' to set key-value pairs and '--validate' to trigger validation. Inputs are the application name and parameter values; output is an updated, validated application. Constraints include potential failure if validation detects inconsistencies.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_set.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd app set my-app --parameter key1=value1 --parameter key2=value2 --validate\n```\n\n----------------------------------------\n\nTITLE: Passing Plugin Parameters via Application Spec - YAML\nDESCRIPTION: This YAML snippet illustrates defining parameters for a plugin within an Argo CD Application manifest. Parameters can be arrays or maps, and are available as a JSON string in the ARGOCD_APP_PARAMETERS environment variable for the plugin, or as individually named environment variables. Only parameters explicitly set in the spec are sent. Prerequisites include compatible Argo CD version and plugin support for such parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n source:\n   plugin:\n     parameters:\n       - name: values-files\n         array: [values-dev.yaml]\n       - name: helm-parameters\n         map:\n           image.tag: v1.2.3\n```\n\n----------------------------------------\n\nTITLE: AppProject configuration with sourceNamespaces for project-two\nDESCRIPTION: Example of an AppProject resource that allows Applications to be created in namespace-two using this project. This demonstrates how different projects can allow different namespaces.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: project-two\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - namespace-two\n```\n\n----------------------------------------\n\nTITLE: Combined Include and Exclude Patterns in CLI\nDESCRIPTION: Demonstrates how to combine include and exclude patterns to finely control which files are part of the application, including nested directories and specific file types.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app set guestbook --directory-include \"*.yaml\" --directory-exclude \"{config.json,env-usw2/*}\"\n```\n\n----------------------------------------\n\nTITLE: Show Basic Usage of argocd app Command (CLI)\nDESCRIPTION: Displays the fundamental syntax for the `argocd app` command in the Argo CD CLI. This snippet shows that the command can accept various flags to modify its behavior. It is the entry point for managing applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nargocd app [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating and Optionally Purging Minio Buckets in Shell Script\nDESCRIPTION: Defines the createBucket function, accepting a bucket name, policy, and purge flag. If purge is explicitly 'true' and the bucket exists, it executes a forced removal using 'mc rm'; otherwise, it ensures the bucket's existence by creating it if missing. The function then sets the specified access policy on the bucket. Dependencies include the Minio Client, target host config, and valid arguments. Inputs: bucket name, access policy, and 'purge' boolean; outputs status messages and performs required Minio operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/_helper_create_bucket.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      /usr/bin/mc rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    /usr/bin/mc mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  /usr/bin/mc policy $POLICY myminio/$BUCKET\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Source Application Specification in Argo CD (YAML)\nDESCRIPTION: Shows an example `spec` section of an Argo CD Application manifest configured with multiple sources using the `sources` array. This structure requires adjustments in notification templates that default to single-source paths.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sources:  # <- multiple sources\n  - repoURL: https://github.com/exampleOrg/first.git\n    path: sources/example\n  - repoURL: https://github.com/exampleOrg/second.git\n    targetRevision: \"{{branch}}\"\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Value Types from Application Spec (YAML)\nDESCRIPTION: In this example, the Application spec (in YAML) provides both 'array' and 'map' fields for a parameter, but the downstream CMP should select the appropriate field based on its own configuration and ignore the others. This pattern clarifies the contract between the Application and the CMP on multi-typed parameter input.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    plugin:\n      parameters:\n      - name: images\n        array:  # this gets sent to the CMP, but the CMP should ignore it\n        - ubuntu:latest=docker.example.com/proxy/ubuntu:latest\n        - guestbook:v0.1=docker.example.com/proxy/guestbook:v0.1\n        map:\n          ubuntu:latest: docker.example.com/proxy/ubuntu:latest\n          guestbook:v0.1: docker.example.com/proxy/guestbook:v0.1\n```\n\n----------------------------------------\n\nTITLE: Using the `argocd admin proj update-role-policy` Command (Bash)\nDESCRIPTION: Shows the basic syntax for the `argocd admin proj update-role-policy` command. It requires a project glob pattern (`PROJECT_GLOB`), a modification type (`MODIFICATION` - 'set' or 'remove'), and an action pattern (`ACTION`). Optional flags can further refine the update target and policy details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj_update-role-policy.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nargocd admin proj update-role-policy PROJECT_GLOB MODIFICATION ACTION [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Scoped RBAC with AppProject (Declarative)\nDESCRIPTION: Shows how to define a project-specific RBAC role within an `AppProject` Kubernetes resource. The example creates a 'read-only' role with a policy that grants 'get' permissions on applications within the 'my-project' project and binds this role to the 'my-oidc-group' group.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\nspec:\n  roles:\n  # A role which provides read-only access to all applications in the project\n  - name: read-only\n    description: Read-only privileges to my-project\n    policies:\n    - p, proj:my-project:read-only, applications, get, my-project/*, allow\n    groups:\n    - my-oidc-group\n```\n\n----------------------------------------\n\nTITLE: Deploying a Helm Chart from OCI Registry with Argo CD\nDESCRIPTION: Example of an Argo CD Application that deploys an NGINX Helm chart from a public OCI registry. Note that the OCI URL syntax is simplified and doesn't include the 'oci://' prefix.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: nginx\nspec:\n  project: default\n  source:\n    chart: nginx\n    repoURL: registry-1.docker.io/bitnamicharts  # note: the oci:// syntax is not included.\n    targetRevision: 15.9.0\n  destination:\n    name: \"in-cluster\"\n    namespace: nginx\n```\n\n----------------------------------------\n\nTITLE: Building Custom Argo CD Repo-Server with Additional Dependencies Using Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to build a customized Argo CD repo-server image by starting from the official base image and installing extra dependencies such as curl, awscli, gpg, and sops. It switches to the root user to enable package installation, updates the package cache, installs the required tools, cleans up caches and temporary files for a smaller image size, downloads the 'sops' binary, and finally switches back to the non-root user for security. This approach allows including tools necessary for secret decryption, manifest rendering, and other advanced tooling needs that can't be addressed by simple binary replacement.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom_tools.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM argoproj/argocd:v2.5.4 # Replace tag with the appropriate argo version\n\n# Switch to root for the ability to perform install\nUSER root\n\n# Install tools needed for your repo-server to retrieve & decrypt secrets, render manifests \n# (e.g. curl, awscli, gpg, sops)\nRUN apt-get update && \\\n    apt-get install -y \\\n        curl \\\n        awscli \\\n        gpg && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    curl -o /usr/local/bin/sops -L https://github.com/mozilla/sops/releases/download/3.2.0/sops-3.2.0.linux && \\\n    chmod +x /usr/local/bin/sops\n\n# Switch back to non-root user\nUSER $ARGOCD_USER_ID\n```\n\n----------------------------------------\n\nTITLE: Argo CD RBAC ConfigMap with OIDC Scopes - YAML\nDESCRIPTION: This ConfigMap configures RBAC in Argo CD and specifies which OIDC scopes to use for RBAC enforcement, including 'groups' and 'email'. It also contains example policies and roles.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-rbac-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  policy.csv: |\n    p, my-org:team-alpha, applications, sync, my-project/*, allow\n    g, my-org:team-beta, role:admin\n    g, user@example.org, role:admin\n  policy.default: role:readonly\n  scopes: '[groups, email]'\n```\n\n----------------------------------------\n\nTITLE: Setting Argo CD Server Address via Environment Variable (Shell)\nDESCRIPTION: Demonstrates how to set the `ARGOCD_SERVER` environment variable to specify the Argo CD server address, eliminating the need for the `--server` flag in `argocd` commands. The value should be the server address without the `https://` prefix, typically a DNS name if served via ingress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/environment-variables.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nARGOCD_SERVER=argocd.example.com\n```\n\n----------------------------------------\n\nTITLE: Example Argo CD Application Parameters Structure (JSON)\nDESCRIPTION: An illustrative JSON object representing the structure and content of the `$ARGOCD_APP_PARAMETERS` environment variable passed to CMP scripts. It shows how parameters like `values-files` (as an array) and `helm-parameters` (as a map) are represented.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"values-files\",\n    \"array\": [\"a.yaml\", \"b.yaml\"]\n  },\n  {\n    \"name\": \"helm-parameters\",\n    \"map\": {\n      \"image.repo\": \"alpine\",\n      \"image.tag\": \"latest\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Credentials with SSH Key\nDESCRIPTION: This example shows how to add credentials using an SSH private key for authentication. It specifies the repository URL and uses the `--ssh-private-key-path` flag, providing the path to the private key file. It allows Argo CD to authenticate with a git repository using SSH keys.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_3\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with SSH private key authentication to use for all repositories under ssh://git@git.example.com/repos\n  argocd repocreds add ssh://git@git.example.com/repos/ --ssh-private-key-path ~/.ssh/id_rsa\n```\n\n----------------------------------------\n\nTITLE: Using argocd appset Command\nDESCRIPTION: The base command for interacting with ApplicationSets in Argo CD. This provides the foundation for all ApplicationSet operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd appset [flags]\n```\n\n----------------------------------------\n\nTITLE: Tidying Go Module Dependencies\nDESCRIPTION: Cleans up the Go module files (`go.mod`, `go.sum`) by adding missing dependencies and removing unused ones after updating a dependency like `gitops-engine`. Run this command after `go get` to ensure module consistency.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/dependencies.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationListStats (Go)\nDESCRIPTION: This Go snippet defines the `ApplicationListStats` struct, which holds additional information about the list of applications, including counts for various statuses and related metadata.  It includes fields for total application count, counts grouped by sync status and health status, and counts for autosync enabled applications, along with related lists of destinations, namespaces, and labels. Dependencies are standard Go libraries and protobuf. It's used to provide stats in the API response. The expected output is a structure holding the aggregation of the application list.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/server-side-pagination.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// ApplicationListStats holds additional information about the list of applications\ntype ApplicationListStats struct {\n\tTotal                int64                             `json:\"total\" protobuf:\"bytes,1,opt,name=total\"`\n\tTotalBySyncStatus    map[SyncStatusCode]int64          `json:\"totalBySyncStatus,omitempty\" protobuf:\"bytes,2,opt,name=totalBySyncStatus\"`\n\tTotalByHealthStatus  map[health.HealthStatusCode]int64 `json:\"totalByHealthStatus,omitempty\" protobuf:\"bytes,3,opt,name=totalByHealthStatus\"`\n\tAutoSyncEnabledCount int64                             `json:\"autoSyncEnabledCount\" protobuf:\"bytes,4,opt,name=autoSyncEnabledCount\"`\n\tDestinations         []ApplicationDestination          `json:\"destinations\" protobuf:\"bytes,5,opt,name=destinations\"`\n\tNamespaces           []string                          `json:\"namespaces\" protobuf:\"bytes,6,opt,name=namespaces\"`\n\tLabels               []ApplicationLabelStats           `json:\"labels,omitempty\" protobuf:\"bytes,7,opt,name=labels\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Rocket.Chat Notification Template with Attachments (YAML)\nDESCRIPTION: This YAML defines a custom template (app-sync-status) for Rocket.Chat notifications, including structured message attachments. It utilizes Argo CD notification variables ({{.app...}}, {{.context...}}) and formats the attachments according to the Rocket.Chat/Slack attachment structure.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/rocketchat.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-status: |\n  message: |\n    Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}.\n    Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  rocketchat:\n    attachments: |\n      [{\n        \"title\": \"{{.app.metadata.name}}\",\n        \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n        \"color\": \"#18be52\",\n        \"fields\": [{\n          \"title\": \"Sync Status\",\n          \"value\": \"{{.app.status.sync.status}}\",\n          \"short\": true\n        }, {\n          \"title\": \"Repository\",\n          \"value\": \"{{.app.spec.source.repoURL}}\",\n          \"short\": true\n        }]\n      }]\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Line Options from Parent Commands for 'argocd version' in Bash\nDESCRIPTION: This snippet enumerates additional inherited flags from the parent Argo CD commands that affect authentication, server connectivity, logging configuration, TLS settings, and integration with Kubernetes clusters. These options provide extended control over the CLI behavior beyond version retrieval.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_version.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Listing and explaining Argo CD CLI global options\nDESCRIPTION: This snippet enumerates all global command-line options for the Argo CD CLI, including connection details, authentication, TLS, Kubernetes context, logging, port forwarding, and Redis settings. It aids users in understanding how to configure their CLI environment for various operational needs and deployment scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_add-source.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Color in Teams Templates\nDESCRIPTION: This YAML snippet demonstrates how to set the `themeColor` for a Teams notification using a hex string, enabling visual customization of the notification's appearance.  This simplifies the color scheme and provides a better user experience within Teams. Requires a Teams notification setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  teams:\n    themeColor: \"#000080\"\n```\n\n----------------------------------------\n\nTITLE: Command Options for `update-role-policy` (Bash)\nDESCRIPTION: Details the command-line flags available for `argocd admin proj update-role-policy`. This includes specific options for this subcommand (like impersonation `--as`, policy details `--permission`, `--resource`, `--role`, `--scope`, and execution control `--dry-run`) and general options inherited from parent `argocd` commands (like context selection, authentication, connection settings, logging, and targeting specific Kubernetes contexts or Argo CD components).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj_update-role-policy.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n      --dry-run                        Dry run (default true)\n  -h, --help                           help for update-role-policy\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --permission string              Action permission\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --resource string                Resource e.g. 'applications'\n      --role string                    Role name pattern e.g. '*deployer*' (default \"*\")\n      --scope string                   Resource scope e.g. '*'\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\nLANGUAGE: Bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Get Project Details Example - Argo CD CLI\nDESCRIPTION: This example demonstrates how to retrieve details of a project named 'PROJECT' using the `argocd proj get` command. The first command retrieves the details in the default format, while the second command retrieves the details in YAML format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_get.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Get details from project PROJECT\n  argocd proj get PROJECT\n  \n  # Get details from project PROJECT in yaml format\n  argocd proj get PROJECT -o yaml\n```\n\n----------------------------------------\n\nTITLE: Running argocd admin proj generate-spec Command to Generate Project Configurations in Shell\nDESCRIPTION: Demonstrates usage of the 'argocd admin proj generate-spec' command to create declarative specifications for Argo CD projects in YAML or JSON formats. Includes examples of generating specs for specific projects, outputting to files, and inline file updates. Requires that Argo CD CLI is installed and configured with access to the target Argo CD server. Inputs include project names and command flags such as --output, --file, and --inline. Outputs are project configuration manifests suitable for version control or automated deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj_generate-spec.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin proj generate-spec PROJECT [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\n  # Generate a YAML configuration for a project named \"myproject\"\n  argocd admin proj generate-spec myproject\n```\n\nLANGUAGE: shell\nCODE:\n```\n  # Generate a JSON configuration for a project named \"anotherproject\" and specify an output file\n  argocd admin proj generate-spec anotherproject --output json --file config.json\n```\n\nLANGUAGE: shell\nCODE:\n```\n  # Generate a YAML configuration for a project named \"someproject\" and write it back to the input file\n  argocd admin proj generate-spec someproject --inline\n```\n\n----------------------------------------\n\nTITLE: Adding Project Destination Service Account Example in Argo CD CLI\nDESCRIPTION: This example demonstrates adding a service account to a project destination using the Argo CD CLI.  It shows how to specify the project name, server URL, namespace, and service account name.  It also shows how to specify the service account namespace if the account resides in a different namespace from the deployment target. The command adds the specified service account to the project, giving it the necessary permissions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-destination-service-account.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  # Add project destination service account (SERVICE_ACCOUNT) for a server URL (SERVER) in the specified namespace (NAMESPACE) on the project with name PROJECT\n  argocd proj add-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT\n```\n\nLANGUAGE: shell\nCODE:\n```\n  # Add project destination service account (SERVICE_ACCOUNT) from a different namespace\n  argocd proj add-destination PROJECT SERVER NAMESPACE SERVICE_ACCOUNT --service-account-namespace <service_account_namespace>\n```\n\n----------------------------------------\n\nTITLE: Declarative Destination Management YAML\nDESCRIPTION: This YAML snippet demonstrates declarative management of destinations. It uses a list of destination patterns, including negations, to control where applications can be deployed. The order of rules matters for evaluation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  destinations:\n  # Do not allow any app to be installed in `kube-system`  \n  - namespace: '!kube-system'\n    server: '*'\n  # Or any cluster that has a URL of `team1-*`   \n  - namespace: '*'\n    server: '!https://team1-*'\n    # Any other namespace or server is fine though.\n  - namespace: '*'\n    server: '*'\n```\n\n----------------------------------------\n\nTITLE: Exposing Argo CD Application Labels as Prometheus Metrics Using YAML\nDESCRIPTION: This snippet shows how to enable exposure of specific Argo CD Application labels as Prometheus metrics by adding the `--metrics-application-labels` flags with label names to the argocd-application-controller container command. It requires modifying the controller's container spec usually in a Kubernetes manifest or Helm chart. The snippet demonstrates enabling labels `team-name` and `business-unit`, allowing these labels to appear as metric dimensions in Prometheus queries for fine-grained monitoring.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- command:\n  - argocd-application-controller\n  - --metrics-application-labels\n  - team-name\n  - --metrics-application-labels\n  - business-unit\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Path Manifest Generation Paths in Argo CD Application\nDESCRIPTION: YAML configuration for an Argo CD Application using an absolute path in the manifest-generate-paths annotation, allowing precise control over which repository paths trigger a reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  annotations:\n    argocd.argoproj.io/manifest-generate-paths: /guestbook\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n# ...\n```\n\n----------------------------------------\n\nTITLE: Partial Update with Server-Side Apply in Argo CD\nDESCRIPTION: Example of a partial YAML that can be used with server-side apply to update only the number of replicas in a Deployment without providing the complete manifest.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n```\n\n----------------------------------------\n\nTITLE: Generating Project Allow List - Command Usage\nDESCRIPTION: This snippet demonstrates the basic usage of the `argocd admin proj generate-allow-list` command.  It takes the path to a clusterRole YAML file and the project name as input. The output is the generated project allow list.  Dependencies include a correctly formatted clusterRole YAML file and a valid project name within the Argo CD context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj_generate-allow-list.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nargocd admin proj generate-allow-list CLUSTERROLE_PATH PROJ_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining a GitHub Notification Template in Argo CD (YAML)\nDESCRIPTION: Provides an example YAML template named `template.app-deployed` for customizing GitHub notifications triggered by Argo CD. It defines the notification message and configures various GitHub integration points like commit status updates, deployment creation, pull request comments, and check runs, using Go templating syntax (`{{.app...}}`, `{{.context...}}`) to insert dynamic application and context data.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/github.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-deployed: |\n  message: |\n    Application {{.app.metadata.name}} is now running new version of deployments manifests.\n  github:\n    repoURLPath: \"{{.app.spec.source.repoURL}}\"\n    revisionPath: \"{{.app.status.operationState.syncResult.revision}}\"\n    status:\n      state: success\n      label: \"continuous-delivery/{{.app.metadata.name}}\"\n      targetURL: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n    deployment:\n      state: success\n      environment: production\n      environmentURL: \"https://{{.app.metadata.name}}.example.com\"\n      logURL: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      requiredContexts: []\n      autoMerge: true\n      transientEnvironment: false\n      reference: v1.0.0\n    pullRequestComment:\n      content: |\n        Application {{.app.metadata.name}} is now running new version of deployments manifests.\n        See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\n    checkRun:\n      name: \"continuous-delivery/{{.app.metadata.name}}\"\n      details_url: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      status: completed\n      conclusion: success\n      started_at: \"YYYY-MM-DDTHH:MM:SSZ\"\n      completed_at: \"YYYY-MM-DDTHH:MM:SSZ\"\n      output:\n        title: \"Deployment of {{.app.metadata.name}} on ArgoCD\"\n        summary: \"Application {{.app.metadata.name}} is now running new version of deployments manifests.\"\n        text: |\n          Application {{.app.metadata.name}} is now running new version of deployments manifests.\n          See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\n```\n\n----------------------------------------\n\nTITLE: Listing Clusters in YAML Format (Shell)\nDESCRIPTION: Demonstrates fetching the cluster list in YAML format via the `-o yaml` flag. The `--server` flag can be used to specify the target Argo CD instance. Replace `<ARGOCD_SERVER_ADDRESS>` with the actual server address.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster list -o yaml --server <ARGOCD_SERVER_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Application Resource Definition in Alternative Namespace (barns)\nDESCRIPTION: Example of an Application resource with the same name but in a different namespace 'barns'. This would be uniquely identified as 'barns/some-app' to avoid naming conflicts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: barns\nspec:\n  project: some-project\n```\n\n----------------------------------------\n\nTITLE: Example YAML configuration for Argo CD RBAC ConfigMap\nDESCRIPTION: This snippet contains an example of an Argo CD RBAC configuration file in YAML format, referencing an external document. It also notes that comment lines in CSV policy files are ignored, which helps in managing inline comments within policy definitions. Dependencies include the YAML syntax and Argo CD RBAC policy structure.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-rbac-cm-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/argocd-rbac-cm.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Executing Application Patch using Argo CD CLI - Bash\nDESCRIPTION: This snippet demonstrates the general syntax to patch an application managed by Argo CD using the CLI. It shows how to specify the application name and optional flags for patching. The command manipulates the application's manifest by applying a patch expressed in JSON or merge formats. Dependencies include a working Argo CD CLI installation and correct context or authentication to the Argo CD server. Input is the target application name and patch details; output is the updated application state as acknowledged by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_patch.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app patch APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD Binaries Download Buttons\nDESCRIPTION: This snippet shows how to configure custom download buttons for different OS architectures within the Argo CD UI. This is achieved by adding key-value pairs to the `argocd-cm` ConfigMap, specifying the path or URL for each binary.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.2-2.3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  help.download.linux-arm64: \"path-or-url-to-download\"\n  help.download.darwin-amd64: \"path-or-url-to-download\"\n  help.download.darwin-arm64: \"path-or-url-to-download\"\n  help.download.windows-amd64: \"path-or-url-to-download\"\n```\n\n----------------------------------------\n\nTITLE: `argocd cert list` Command Options\nDESCRIPTION: Lists the specific command-line options available for the `argocd cert list` command. These flags allow filtering certificates by type (`--cert-type`), hostname pattern (`--hostname-pattern`), controlling the output format (`-o`, `--output`), and sorting the results (`--sort`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_list.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --cert-type string          Only list certificates of given type, valid: 'ssh','https'\n  -h, --help                      help for list\n      --hostname-pattern string   Only list certificates for hosts matching given glob-pattern\n  -o, --output string             Output format. One of: json|yaml|wide (default \"wide\")\n      --sort string               Set display sort order for output format wide. One of: hostname|type\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tracking Label in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML snippet configures the Argo CD ConfigMap (`argocd-cm`) to specify a custom label key for resource tracking when the `label` method is used. By setting `application.instanceLabelKey` under the `data` section, Argo CD will use the specified key (`argocd.argoproj.io/instance` in this example) instead of the default `app.kubernetes.io/instance` label to identify managed resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_tracking.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  application.instanceLabelKey: argocd.argoproj.io/instance\n```\n\n----------------------------------------\n\nTITLE: Fetching OIDC Group Claims via UserInfo Endpoint in Argo CD (YAML)\nDESCRIPTION: This YAML configuration snippet for `argocd-cm` under the `oidc.config` key enables Argo CD to fetch group membership information from the OIDC provider's UserInfo endpoint. This is typically used when groups aren't included in the ID token. It involves setting `enableUserInfoGroups` to true, specifying the `userInfoPath` (defaults to /userinfo if omitted), and optionally configuring the cache duration with `userInfoCacheExpiration`. Group info is cached based on the lesser of this value and the ID token expiry.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\noidc.config: |\n    enableUserInfoGroups: true\n    userInfoPath: /userinfo\n    userInfoCacheExpiration: \"5m\"\n```\n\n----------------------------------------\n\nTITLE: Parameter Output from Override Cluster Generator (YAML)\nDESCRIPTION: This snippet shows the example parameter set generated by the second `clusters` generator in the first ApplicationSet example, which uses a label selector (`use-kafka: 'false'`). Assuming the `staging` cluster has this label, it generates parameters for the `staging` cluster, providing an overriding `values.kafka` value of 'false'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'false'\n```\n\n----------------------------------------\n\nTITLE: String manipulation functions in Go\nDESCRIPTION: Includes functions for replacing all instances of a substring ('strings.ReplaceAll'), converting strings to uppercase ('strings.ToUpper'), and converting to lowercase ('strings.ToLower'). Dependency on Go's 'strings' package. Inputs are strings; outputs are modified strings with specified transformations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/functions.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nstrings.ReplaceAll(original, old, new) // Replaces all old with new in original string\n```\n\nLANGUAGE: Go\nCODE:\n```\nstrings.ToUpper(s) // Converts string s to uppercase\n```\n\nLANGUAGE: Go\nCODE:\n```\nstrings.ToLower(s) // Converts string s to lowercase\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Kustomize/Helm Proxy CMP (Dockerfile)\nDESCRIPTION: Defines a Docker image based on Ubuntu 20.04 for the Kustomize/Helm proxy CMP. It installs necessary tools (`jq`, `yq`, `helm`, `kustomize`) and adds the `get-parameters.sh` script to the image, making it available for the CMP to execute.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_22\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:20.04\n\nRUN apt install jq yq helm kustomize -y\n\nADD get-parameters.sh /home/argocd/get-parameters.sh\n```\n\n----------------------------------------\n\nTITLE: Logging out of argocd\nDESCRIPTION: This command logs out the user from Argo CD. It's helpful for security reasons or when switching between different Argo CD contexts or accounts. No specific dependencies are required, but the Argo CD CLI must be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_logout.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ argocd logout\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Project Commands in Argo CD\nDESCRIPTION: The complete list of global options inherited from parent commands that can be used with the 'proj delete' command, including authentication, connection, and logging options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_delete.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Options for 'argocd app remove-source' Command in Bash CLI\nDESCRIPTION: Lists and describes command line options supported by the 'argocd app remove-source' command and its parent commands. Key options include '-N/--app-namespace' for specifying the namespace of the target application, '--source-name' for removing a source by its name, and '--source-position' to remove by position (with 1-based counting). Additional inherited global flags provide configuration of Argo CD context, authentication, TLS, logging, and server connection preferences. This snippet outlines the configurable parameters needed to correctly target and authenticate the operation, highlighting default values and environment variable overrides where applicable.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_remove-source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -N, --app-namespace string   Namespace of the target application where the source will be appended\n  -h, --help                   help for remove-source\n      --source-name string     Name of the source from the list of sources of the app.\n      --source-position int    Position of the source from the list of sources of the app. Counting starts at 1. (default -1)\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configurable Status Format YAML Example\nDESCRIPTION: This YAML snippet demonstrates a common status format for ArgoCD clusters. It shows how the `clusters` field is used to list cluster names within the `status` section. This format helps the generator identify and retrieve cluster information from different resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/applicationset/examples/clusterDecisionResource/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstatus:\n  clusters:\n  - name: cluster-01\n  - name: cluster-02\n```\n\n----------------------------------------\n\nTITLE: Kustomize ConfigMap Generator with IgnoreExtraneous - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Kustomize `configMapGenerator` to automatically add the `argocd.argoproj.io/compare-options: IgnoreExtraneous` annotation to generated ConfigMaps.  This will cause Argo CD to ignore changes to the ConfigMap during sync status comparisons. It requires Kustomize and Argo CD to be properly configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/compare-options.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigMapGenerator:\n  - name: my-map\n    literals:\n      - foo=bar\ngeneratorOptions:\n  annotations:\n    argocd.argoproj.io/compare-options: IgnoreExtraneous\nkind: Kustomization\n```\n\n----------------------------------------\n\nTITLE: Example argocd-repositories.yaml Configuration\nDESCRIPTION: This YAML snippet demonstrates the structure of an `argocd-repositories.yaml` file. This file is used by Argo CD to define external Git repositories, including their URLs, types, and potentially credentials or other connection details, allowing Argo CD to access application manifests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-repositories-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/argocd-repositories.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Template Arguments from CMP Parameters (Shell)\nDESCRIPTION: A shell script (`generate.sh`) for the simple Helm CMP that processes parameters provided by Argo CD via the `$ARGOCD_APP_PARAMETERS` environment variable. It extracts parameters named `values-files` (array) and `helm-parameters` (map) and formats them into command-line arguments (`--values=...`, `--set=...`) for the `helm template` command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# Convert the values-files parameter value to a newline-delimited list of Helm CLI arguments.\nARGUMENTS=$(echo \"$ARGOCD_APP_PARAMETERS\" | jq -r '.[] | select(.name == \"values-files\").array | .[] | \"--values=\" + .')\n# Convert JSON parameters to comma-delimited k=v pairs.\nPARAMETERS=$(echo \"$ARGOCD_APP_PARAMETERS\" | jq -r '.[] | select(.name == \"helm-parameters\").map | to_entries | map(\"\\(.key)=\\(.value)\") | .[] | \"--set=\" + .')\n# Add parameters to the arguments variable.\nARGUMENTS=\"$ARGUMENTS\\n$PARAMETERS\"\necho \"$ARGUMENTS\" | xargs helm template .\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD Admin Dashboard via CLI - Shell\nDESCRIPTION: These shell command snippets demonstrate how to start the Argo CD Web UI locally using the argocd CLI, specifying custom port, address, and enabling GZip compression. No additional dependencies are required beyond the Argo CD CLI installed and authenticated with appropriate cluster permissions. Key flags include --port, --address, and --redis-compress; inputs are CLI flags and outputs are running dashboard components accessible via web browser. These commands are intended for interactive terminal use and should be run from a system with network access to the relevant Argo CD deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_dashboard.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin dashboard\n```\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin dashboard --port 8080 --address 127.0.0.1\n```\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin dashboard --redis-compress gzip\n```\n\n----------------------------------------\n\nTITLE: Creating a kind cluster for local development\nDESCRIPTION: Creates a kind Kubernetes cluster and configures kubectl to use it for local Argo CD development.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkind create cluster --kubeconfig ~/.kube/config-kind\n\n# The started services assume you are running in the namespace where Argo CD is\n# installed. Set the current context default namespace.\nexport KUBECONFIG=~/.kube/config-kind\nkubectl config set-context --current --namespace=argocd\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD with Podman\nDESCRIPTION: This command starts the local Argo CD instance using `make start-local` with Podman instead of Docker. This is achieved by setting the `DOCKER` environment variable to `podman` before running the `make` command. It also disables GPG.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd argo-cd\nDOCKER=podman make start-local ARGOCD_GPG_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Extensions RBAC in Argo CD - Policy Rules (Plaintext)\nDESCRIPTION: Defines basic RBAC policy rules for Argo CD extensions where permissions are scoped per project and extension. The policy format `p, <subject>, <resource>, <action>, <object>, <access>` is used, with examples showing how to allow roles to access specific extensions in specific projects, all extensions in a project, or all extensions in all projects. These rules are intended for administrators to enforce access on extensions within Argo CD without namespace granularity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/proxy-extensions.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\np, role:allow-extensions, extensions, *, some-project/some-extension, allow\n```\n\nLANGUAGE: plaintext\nCODE:\n```\np, role:allow-extensions, extensions, *, */some-extension, allow\n```\n\nLANGUAGE: plaintext\nCODE:\n```\np, role:allow-extensions, extensions, *, */*, allow\n```\n\n----------------------------------------\n\nTITLE: Example Environment Variables Generated from Parameters (Shell)\nDESCRIPTION: Lists the environment variables that Argo CD would generate based on the parameters defined in the third YAML snippet. It demonstrates the naming convention (`PARAM_{escaped(name)}`, `PARAM_{escaped(name_{index})}`, `PARAM_{escaped(name_key)}`) used for string, array, and map parameters respectively, after uppercasing and replacing non-alphanumeric characters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"$PARAM_VALUES\"\necho \"$PARAM_VALUES_FILES_0\"\necho \"$PARAM_HELM_PARAMETERS_IMAGE_REPOSITORY\"\necho \"$PARAM_HELM_PARAMETERS_IMAGE_TAG\"\n```\n\n----------------------------------------\n\nTITLE: Related commands for application resource management\nDESCRIPTION: These references point to additional commands for managing applications and their actions within Argo CD, including listing available actions and executing specific actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* [argocd app](argocd_app.md) - Manage applications\n* [argocd app actions list](argocd_app_actions_list.md) - Lists available actions on a resource\n* [argocd app actions run](argocd_app_actions_run.md) - Runs an available action on resource(s)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Minio Configuration Using Helm - Bash\nDESCRIPTION: Updates an existing Minio Helm release by applying configuration overrides defined in a YAML file. Requires an already deployed Minio release, Helm installed, and edit access to the values file. Uses the helm upgrade -f argument to supply the config. Outputs updated configuration, requiring Minio server restart for changes to take effect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -f config.yaml stable/minio\n```\n\n----------------------------------------\n\nTITLE: Confirm Application Deletion with Argo CD CLI\nDESCRIPTION: This command confirms the deletion/pruning of resources associated with an application in Argo CD.  It requires the application name as an argument.  Optional flags can specify the application namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_confirm-deletion.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nargocd app confirm-deletion APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Argo CD Application\nDESCRIPTION: This YAML snippet represents an Argo CD `Application` resource generated by the ApplicationSet controller based on the parameters provided by the `List` generator.  This specific example shows how one `Application` is created from the `ApplicationSet` template and generator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/index.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: engineering-dev-guestbook\nspec:\n  source:\n    repoURL: https://github.com/infra-team/cluster-deployments.git\n    targetRevision: HEAD\n    path: guestbook/engineering-dev\n  destination:\n    server: https://1.2.3.4\n    namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Registering a Webhook Service in Argo CD ConfigMap (YAML)\nDESCRIPTION: Defines a webhook service entry in the `argocd-notifications-cm` ConfigMap. It specifies the target `url`, optional `headers`, optional `basicAuth` credentials, and an option to skip TLS verification (`insecureSkipVerify`). This configuration is referenced by notification templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    url: https://<hostname>/<optional-path>\n    headers: #optional headers\n    - name: <header-name>\n      value: <header-value>\n    basicAuth: #optional username password\n      username: <username>\n      password: <api-key>\n    insecureSkipVerify: true #optional bool\n```\n\n----------------------------------------\n\nTITLE: Previewing ApplicationSet changes in dry-run mode\nDESCRIPTION: Shell command to preview changes that the ApplicationSet controller would make to Applications using dry-run mode, which helps to understand the impact before applying changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nargocd appset create --dry-run ./appset.yaml -o json | jq -r '.status.resources[].name'\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Source Repository Secret (YAML)\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes Secret to store credentials for a Google Cloud Source repository.  It requires the `argocd.argoproj.io/secret-type: repository` label, `url`, and a `gcpServiceAccountKey` field containing a service account key in JSON format. The secret is used to authenticate to Google Cloud Source repositories.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Secret\nmetadata:\n  name: github-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://source.developers.google.com/p/my-google-project/r/my-repo\n  gcpServiceAccountKey: |\n    {\n      \"type\": \"service_account\",\n      \"project_id\": \"my-google-project\",\n      \"private_key_id\": \"REDACTED\",\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nREDACTED\\n-----END PRIVATE KEY-----\\n\",\n      \"client_email\": \"argocd-service-account@my-google-project.iam.gserviceaccount.com\",\n      \"client_id\": \"REDACTED\",\n      \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n      \"token_uri\": \"https://oauth2.googleapis.com/token\",\n      \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n      \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/argocd-service-account%40my-google-project.iam.gserviceaccount.com\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Webhooks in Argo CD Subscriptions (YAML)\nDESCRIPTION: This snippet shows how to configure webhook-based subscriptions within Argo CD. It requires defining a service of type webhook and then referencing its name as a recipient in the subscription configuration. Dependencies include a running Argo CD instance, the Argo CD Notifications controller, and a webhook service. The `service.webhook.<webhook-name>` entry in the ConfigMap stores the webhook details and `subscriptions` uses the name of that service to send the notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/subscriptions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    (snip)\n  subscriptions: |\n    - recipients:\n      - <webhook-name>\n      triggers:\n      - on-sync-status-unknown\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Secrets for Azure Workload Identity in YAML\nDESCRIPTION: This snippet defines Kubernetes Secret resources for storing repository credentials, enabling Argo CD to access private Helm and Git repositories with Azure Workload Identity enabled. It specifies types, URLs, and identity flags, functioning as secure configuration objects.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: helm-private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: helm\n  url: contoso.azurecr.io/charts\n  name: contosocharts\n  enableOCI: \"true\"\n  useAzureWorkloadIdentity: \"true\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: git-private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://contoso@dev.azure.com/my-projectcollection/my-project/_git/my-repo\n  useAzureWorkloadIdentity: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Including Specific Files Using CLI in Argo CD\nDESCRIPTION: Specifies a glob pattern to include only certain files (e.g., YAML files) in the directory application, restricting deployment to matching files. Quotes are necessary to prevent shell expansion.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app set guestbook --directory-include \"*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Kubernetes Cluster using Argo CD CLI\nDESCRIPTION: This snippet shows how to remove a previously added cluster from Argo CD by executing the `argocd cluster rm` command with the target context name. Removing the cluster disassociates it from Argo CD management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-management.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster rm context-name\n```\n\n----------------------------------------\n\nTITLE: Storing Grafana API Key in Kubernetes Secret (YAML)\nDESCRIPTION: Demonstrates creating a Kubernetes Secret to securely store the Grafana API key. The `stringData` field allows storing the key directly as a string. The key named `grafana-api-key` holds the actual API key value, which is referenced by the `argocd-notifications-cm` ConfigMap. Replace `<secret-name>` with the desired Secret name and `api-key` with the actual Grafana API key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/grafana.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  grafana-api-key: api-key\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Authentication Token for Argo CD API\nDESCRIPTION: This snippet demonstrates how to obtain a JWT bearer token by authenticating with the Argo CD server using admin credentials. The returned token can be used for subsequent API calls.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/api-docs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl $ARGOCD_SERVER/api/v1/session -d $'{\"username\":\"admin\",\"password\":\"password\"}'\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1Njc4MTIzODcsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTU2NzgxMjM4Nywic3ViIjoiYWRtaW4ifQ.ejyTgFxLhuY9mOBtKhcnvobg3QZXJ4_RusN_KIdVwao\"}\n```\n\n----------------------------------------\n\nTITLE: Application example disallowed by sourceNamespaces in YAML\nDESCRIPTION: This YAML snippet shows an example Application resource that is *not* allowed to associate with the AppProject defined above because it resides in the 'other-ns' namespace, which is *not* listed in the AppProject's `sourceNamespaces`. It demonstrates an invalid association between an Application and an AppProject.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: other-app\n  namespace: other-ns\nspec:\n  project: some-project\n```\n\n----------------------------------------\n\nTITLE: Parameters After First Merge Step (YAML)\nDESCRIPTION: This snippet displays the intermediate state of parameters after merging the output from the base `clusters` generator and the override `clusters` generator from the first example. The `values.kafka` parameter for the `staging` cluster is now 'false' due to the override, while the `production` cluster parameters remain unchanged.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'false'\n  values.redis: 'false'\n\n- name: production\n  server: https://2.4.6.8\n  values.kafka: 'true'\n  values.redis: 'false'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Text Message Template for Google Chat (YAML)\nDESCRIPTION: This snippet defines a simple text message template for Google Chat notifications. It includes a message that is sent to the Google Chat space when the template is triggered, in this case, on application sync success.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/googlechat.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  message: The app {{ .app.metadata.name }} has successfully synced!\n```\n\n----------------------------------------\n\nTITLE: API Call Example to Fetch Branch-specific Parameters for ApplicationSet\nDESCRIPTION: This shell command demonstrates how to invoke the plugin API to retrieve image digest parameters for a specific branch, such as 'feature-branch-1' or 'feature-branch-2'. The API call includes authorization headers and JSON payload specifying the application set name and branch parameter, returning digest information necessary for dynamic image tagging.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:4355/api/v1/getparams.execute -H \"Authorization: Bearer strong-password\" -d \\\n'{\n  \"applicationSetName\": \"fb-matrix\",\n  \"input\": {\n    \"parameters\": {\n      \"branch\": \"feature-branch-1\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Getting Notification Triggers in Argo CD\nDESCRIPTION: Command to retrieve information about configured notification triggers in Argo CD. Supports different output formats including JSON, YAML, wide, and name with examples showing how to list all triggers or get specific trigger details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications trigger get [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# prints all triggers\nargocd admin notifications trigger get\n# print YAML formatted on-sync-failed trigger definition\nargocd admin notifications trigger get on-sync-failed -o=yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of:json|yaml|wide|name (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Managing Destinations CLI\nDESCRIPTION: These bash commands manage permitted destination clusters and namespaces for a specific project using the Argo CD CLI. The `add-destination` command adds a destination, while the `remove-destination` command removes one. Negation using `!` is also supported to disallow specific destinations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-destination <PROJECT> <CLUSTER>,<NAMESPACE>\nargocd proj remove-destination <PROJECT> <CLUSTER>,<NAMESPACE>\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-destination <PROJECT> !<CLUSTER>,!<NAMESPACE>\nargocd proj remove-destination <PROJECT> !<CLUSTER>,!<NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Application Access in Any Namespace (CSV)\nDESCRIPTION: This snippet shows how to restrict access to logs for a specific application within a project when applications can exist in any namespace. The object is specified as `<app-project>/<app-ns>/<app-name>` and it grants permission to get application logs in a specific namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, get, */app-namespace/*, allow\np, example-user, logs, get, example-project/app-namespace/my-app, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Server as SCM Provider in ApplicationSet\nDESCRIPTION: YAML configuration to set up a Bitbucket Server connection for an ApplicationSet generator. Provides options for project selection, API URL, branch scanning, authentication methods (Basic Auth or Bearer Token), and TLS certificate handling.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      bitbucketServer:\n        project: myproject\n        # URL of the Bitbucket Server. Required.\n        api: https://mycompany.bitbucket.org\n        # If true, scan every branch of every repository. If false, scan only the default branch. Defaults to false.\n        allBranches: true\n        # Credentials for Basic authentication (App Password). Either basicAuth or bearerToken\n        # authentication is required to access private repositories\n        basicAuth:\n          # The username to authenticate with\n          username: myuser\n          # Reference to a Secret containing the password or personal access token.\n          passwordRef:\n            secretName: mypassword\n            key: password\n        # Credentials for Bearer Token (App Token) authentication. Either basicAuth or bearerToken\n        # authentication is required to access private repositories\n        bearerToken:\n          # Reference to a Secret containing the bearer token.\n          tokenRef:\n            secretName: repotoken\n            key: token\n        # If true, skips validating the SCM provider's TLS certificate - useful for self-signed certificates.\n        insecure: true\n        # Reference to a ConfigMap containing trusted CA certs - useful for self-signed certificates. (optional)\n        caRef:\n          configMapName: argocd-tls-certs-cm\n          key: bitbucket-ca\n        # Support for filtering by labels is TODO. Bitbucket server labels are not supported for PRs, but they are for repos\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD resources in Kubernetes cluster\nDESCRIPTION: Creates the argocd namespace and applies the installation manifest to deploy Argo CD resources to the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace argocd\nkubectl apply -n argocd --force -f manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret for AWS Credentials\nDESCRIPTION: This YAML snippet defines a Kubernetes Secret to store AWS access key and secret key. The keys `awsaccess_key` and `awsaccess_secret` are used to provide credentials to the AWS SQS service in Argo CD.  These values are referenced by the Argo CD ConfigMap configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  awsaccess_key: test\n  awsaccess_secret: test\n```\n\n----------------------------------------\n\nTITLE: Executing argocd admin cluster shards\nDESCRIPTION: This code snippet demonstrates the basic usage of the `argocd admin cluster shards` command to print information about controller shards. It relies on the Argo CD CLI being installed and configured correctly to communicate with the Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_shards.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin cluster shards [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Argo CD Login Command\nDESCRIPTION: The basic syntax for the 'argocd login' command which requires a SERVER parameter.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_login.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd login SERVER [flags]\n```\n\n----------------------------------------\n\nTITLE: Detecting Field Changes with Kubernetes CLI and diff Command - Shell\nDESCRIPTION: This shell snippet provides a method to identify frequently changing fields in Kubernetes resources by retrieving the resource YAML at two different times and comparing them using diff. This helps users determine which resource fields should be ignored during reconciliation to optimize performance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get <resource> -o yaml > /tmp/before.yaml\n# Wait a minute or two.\nkubectl get <resource> -o yaml > /tmp/after.yaml\ndiff /tmp/before.yaml /tmp/after\n```\n\n----------------------------------------\n\nTITLE: Common Options for Argo CD Notification Commands\nDESCRIPTION: Common options inherited from parent commands that apply to all notification-related commands in Argo CD. These include connection, authentication, and configuration options for interacting with the Argo CD API server and repository server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Deleting ArgoCD Application with kubectl (Cascade)\nDESCRIPTION: Deletes an ArgoCD application with cascading deletion using `kubectl`. It patches the application to include the `resources-finalizer.argocd.argoproj.io` finalizer which triggers a cascading delete.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/app_deletion.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch app APPNAME  -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge\nkubectl delete app APPNAME\n```\n\n----------------------------------------\n\nTITLE: Serving Argo CD Docs Locally (Bash)\nDESCRIPTION: Use this command to serve the locally built documentation website for preview. It starts a local web server, typically accessible at `http://127.0.0.1:8000/`, allowing you to view changes directly. Requires local Python, pip, `mkdocs`, dependencies, and the project's Makefile.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/docs-site.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmake serve-docs-local\n```\n\n----------------------------------------\n\nTITLE: VSCode Launch Configuration for Running ArgoCD Server (Go, JSON)\nDESCRIPTION: Defines a VSCode debug launch configuration to run the ArgoCD server in Go. Loads environment variables from the remote environment file for seamless integration with the remote cluster. Requires VSCode with Go extension, access to the workspace, and properly set paths. Key parameters include the program entrypoint, environment variables, and the remote KUBECONFIG path. On execution, starts 'argocd-server' locally with production-like environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Launch argocd-server\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"auto\",\n    \"program\": \"${workspaceFolder}/cmd/main.go\",\n    \"envFile\": [\n        \"${workspaceFolder}/.envrc.remote\"\n    ],\n    \"env\": {\n        \"ARGOCD_BINARY_NAME\": \"argocd-server\",\n        \"CGO_ENABLED\": \"0\",\n        \"KUBECONFIG\": \"/path/to/kube/config\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an ApplicationSet with Plugin Generator in YAML\nDESCRIPTION: Example YAML configuration for an ApplicationSet using a custom plugin generator. This demonstrates how to reference a plugin ConfigMap, pass parameters, and use the generated values in the template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myplugin\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - plugin:\n        # Specify the configMap where the plugin configuration is located.\n        configMapRef:\n          name: my-plugin\n        # You can pass arbitrary parameters to the plugin. `input.parameters` is a map, but values may be any type.\n        # These parameters will also be available on the generator's output under the `generator.input.parameters` key.\n        input:\n          parameters:\n            key1: \"value1\"\n            key2: \"value2\"\n            list: [\"list\", \"of\", \"values\"]\n            boolean: true\n            map:\n              key1: \"value1\"\n              key2: \"value2\"\n              key3: \"value3\"\n\n        # You can also attach arbitrary values to the generator's output under the `values` key. These values will be\n        # available in templates under the `values` key.\n        values:\n          value1: something\n\n        # When using a Plugin generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n        requeueAfterSeconds: 30\n  template:\n    metadata:\n      name: myplugin\n      annotations:\n        example.from.input.parameters: \"{{ index .generator.input.parameters.map \\\"key1\\\" }}\"\n        example.from.values: \"{{ .values.value1 }}\"\n        # The plugin determines what else it produces.\n        example.from.plugin.output: \"{{ .something.from.the.plugin }}\"\n```\n\n----------------------------------------\n\nTITLE: Adding HTTPS Repo with TLS Client Certs using Argo CD CLI (Bash)\nDESCRIPTION: Configures a private HTTPS Git repository in Argo CD that requires TLS client certificate authentication. This command uses `--tls-client-cert-path` and `--tls-client-cert-key-path` to specify the paths to the client certificate and its corresponding unencrypted key file on the local system. Certificates and keys must be in PEM format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo add https://repo.example.com/repo.git --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n```\n\n----------------------------------------\n\nTITLE: Querying Argo CD Managed Resources via Kubectl Label Selector (Bash)\nDESCRIPTION: This snippet shows how to use the `kubectl` command with a label selector (`-l`) to retrieve all Kubernetes deployments associated with a specific Argo CD application instance. It queries across all namespaces using `--all-namespaces`. This command is dependent on the `app.kubernetes.io/instance` label being present on the resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Defining a Directory-Type Application in YAML\nDESCRIPTION: Defines a directory application in YAML specifying the source repository, path, and target revision. It enables Argo CD to automatically detect and deploy manifests from the specified directory, with specific settings for namespace, server, and project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  destination:\n    namespace: default\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitation: Cross-Field Control Keywords (YAML)\nDESCRIPTION: Highlights a limitation where Go template control keywords like `range` and `end` cannot span across different YAML fields within Helm parameters. Each string field is evaluated as an independent template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  template:\n    spec:\n      source:\n        helm:\n          parameters:\n          # Each of these fields is evaluated as an independent template, so the first one will fail with an error.\n          - name: \"{{range .parameters}}\"\n          - name: \"{{.name}}\"\n            value: \"{{.value}}\"\n          - name: throw-away\n            value: \"{{end}}\"\n```\n\n----------------------------------------\n\nTITLE: Example Command to Render Ignored Fields in a Resource YAML\nDESCRIPTION: Demonstrates executing the command with specific resource and ConfigMap YAML paths to visualize ignored fields, useful for troubleshooting resource update exclusions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings resource-overrides ignore-resource-updates ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker and Podman Privileges via Environment Variables in Shell\nDESCRIPTION: Shell snippets demonstrate setting environment variables to manage Docker CLI usage with appropriate privileges, such as using sudo to interact with the Docker daemon without running all build scripts as root. It also shows how to switch to Podman as a rootless container engine by changing the DOCKER environment variable prior to build commands. These commands must be executed from a Unix shell and assume that Docker or Podman are installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nSUDO=sudo make sometarget\n```\n\nLANGUAGE: Shell\nCODE:\n```\nexport SUDO=sudo\n```\n\nLANGUAGE: Shell\nCODE:\n```\nDOCKER=podman make start\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd proj role` Commands\nDESCRIPTION: Lists the command-line options inherited from parent `argocd` commands, applicable to `argocd proj role remove-group`. These options control aspects like server connection, authentication, context, logging, and interaction with Kubernetes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_remove-group.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Argo CD Global Command Options\nDESCRIPTION: Global command-line options inherited from parent commands that can be used with the 'argocd login' command, including connection configuration, authentication, and logging options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_login.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Argo CD Update Password Command Synopsis\nDESCRIPTION: The snippet defines the general syntax for the `argocd account update-password` command using flags. It shows the basic structure of how the command should be invoked from the command line.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_update-password.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd account update-password [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart (Production)\nDESCRIPTION: This command installs the stable/redis Helm chart with a production configuration using a values-production.yaml file. It customizes the Redis deployment for a production environment using specified configuration values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Production configuration\n$ helm install stable/redis --values values-production.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgoCD Notifications for Unknown Application Sync Status in YAML\nDESCRIPTION: This template defines the structure and content for notifications sent when an application's sync status becomes 'Unknown'. It provides formatted alerts for email, Slack, and Microsoft Teams with application details, condition messages, and action links.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/catalog.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemail:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n        \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }},\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": {{- if .app.spec.source }} \"Repository\" {{- else if .app.spec.sources }} \"Repositories\" {{- end }},\n      \"value\": {{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n    }\n    {{range $index, $c := .app.status.conditions}}\n      ,\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":{{- if .app.spec.source }} \":arrow_heading_up: {{ .app.spec.source.repoURL }}\" {{- else if .app.spec.sources }} \"{{- range $index, $source := .app.spec.sources }}{{ if $index }}\\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}\" {{- end }}\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'\n\n```\n\n----------------------------------------\n\nTITLE: Get ApplicationSet via CLI - Shell\nDESCRIPTION: This command shows how to retrieve an ApplicationSet using the Argo CD CLI when the ApplicationSet resides in a namespace other than the control plane's namespace. The format `foo/bar` is used, where `foo` is the name and `bar` is the namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nargocd appset get foo/bar\n```\n\n----------------------------------------\n\nTITLE: Examples of Listing Argo CD Projects\nDESCRIPTION: Provides practical examples of how to use the `argocd proj list` command. The first example lists all projects in the default 'wide' format, while the second example demonstrates listing projects in YAML format using the `-o yaml` flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_list.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # List all available projects\n  argocd proj list\n  \n  # List all available projects in yaml format\n  argocd proj list -o yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Kustomize/Helm Proxy CMP Configuration (YAML)\nDESCRIPTION: Configures an Argo CD Config Management Plugin that acts as a proxy for Kustomize and Helm. It defines the commands for discovering applications and generating manifests, and specifies both static and dynamic parameters the plugin should expose, extracting dynamic parameters via the `get-parameters.sh` script.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: kustomize-helm-proxy-cmp\nspec:\n  version: v1.0\n  generate:\n    command: [/home/argocd/generate.sh]\n  discover:\n    fileName: \"./kustomization.yaml\"\n  parameters:\n    static:\n      - name: version\n        title: VERSION\n        string: v4.3.0\n      - name: name-prefix\n        title: NAME PREFIX\n      - name: name-suffix\n        title: NAME SUFFIX\n    dynamic:\n      command: [/home/argocd/get-parameters.sh]\n```\n\n----------------------------------------\n\nTITLE: Enabling Recursive Resource Detection Declaratively in YAML\nDESCRIPTION: Sets the `recurse` property to true within the application's source configuration in YAML, enabling deep scanning of directories for manifest files, which is essential for managing nested resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    directory:\n      recurse: true\n```\n\n----------------------------------------\n\nTITLE: Update argocd-cm Dex Configuration with Transitive Group Membership\nDESCRIPTION: Updates the `argocd-cm` configmap with the Dex configuration for Google authentication, enabling transitive group membership fetching. This configuration includes the `redirectURI`, `clientID`, `clientSecret`, `serviceAccountFilePath`, and `adminEmail`. `fetchTransitiveGroupMembership` is set to `True`. Replace the placeholder values with your actual Google OAuth credentials and Argo CD domain.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndex.config: |\n  connectors:\n  - config:\n      redirectURI: https://argocd.example.com/api/dex/callback\n      clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n      clientSecret: XXXXXXXXXXXXX\n      serviceAccountFilePath: /tmp/oidc/googleAuth.json\n      adminEmail: admin-email@example.com\n      fetchTransitiveGroupMembership: True\n    type: google\n    id: google\n    name: Google\n```\n\n----------------------------------------\n\nTITLE: Argo CD repo-server init container configuration\nDESCRIPTION: This bash snippet configures an init container in the Argo CD repo-server deployment. The init container copies the `argocd` static binary into a shared volume so that the CMP server can become the entrypoint. The shared volume facilitates communication between the repo-server and the cmp-server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# An init container will copy the argocd static binary into the shared volume\n# so that the CMP server can become the entrypoint\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /var/run/argocd/argocd-cmp-server\n  image: quay.io/argoproj/argocd:latest\n  name: copyutil\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n \n# var-files is a shared volume between repo-server and cmp-server which holds:\n# 1) socket files that repo-server uses to communicate to each plugin\n# 2) git repositories cloned by repo-server\nvolumes:\n- emptyDir: {}\n  name: var-files\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policy for Group-Based Access in ArgoCD (YAML)\nDESCRIPTION: Creates a ConfigMap to specify RBAC policies in ArgoCD that assign roles based on user groups, especially handling groups with DNs containing commas by quoting them. This setup grants administrative privileges to designated groups, enabling role-based access control through OpenUnison's group claims.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/openunison.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.csv: |\n    g, \"CN=k8s_login_cluster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com\", role:admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD RBAC Policy with Keycloak Groups - YAML\nDESCRIPTION: This YAML snippet demonstrates how to modify the `argocd-rbac-cm` ConfigMap to define RBAC policies based on Keycloak group membership. It maps the `ArgoCDAdmins` group from Keycloak to the built-in `role:admin` in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/keycloak.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, ArgoCDAdmins, role:admin\n\n```\n\n----------------------------------------\n\nTITLE: RBAC Rules for Managing GnuPG Keys in ArgoCD Using Policy Rules\nDESCRIPTION: Defines example RBAC policy lines to allow roles to get, create, and delete GnuPG keys with resource notation `gpgkeys` in ArgoCD. These policies control who can manage GnuPG keys to enforce signature verification, and must be integrated into ArgoCD's RBAC configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\np, role:myrole, gpgkeys, get, *, allow\n```\n\nLANGUAGE: bash\nCODE:\n```\np, role:myrole, gpgkeys, create, *, allow\n```\n\nLANGUAGE: bash\nCODE:\n```\np, role:myrole, gpgkeys, delete, *, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD Repository with Proxy (YAML)\nDESCRIPTION: Defines a Kubernetes Secret for an Argo CD repository, specifying Git connection details (`type`, `url`, `username`, `password`) and proxy settings (`proxy`, `noProxy`). This allows Argo CD to access the repository through a specified proxy server while bypassing the proxy for internal domains/IPs listed in `noProxy`. Requires the `argocd.argoproj.io/secret-type: repository` label.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  type: git\n  url: https://github.com/argoproj/private-repo\n  proxy: https://proxy-server-url:8888\n  noProxy: \".internal.example.com,company.org,10.123.0.0/16\"\n  password: my-password\n  username: my-username\n```\n\n----------------------------------------\n\nTITLE: Configuring application namespaces in argocd-cmd-params-cm ConfigMap\nDESCRIPTION: Example of how to configure allowed namespaces for Application resources using the argocd-cmd-params-cm ConfigMap. This method keeps settings in sync between argocd-server and argocd-application-controller components.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  application.namespaces: app-team-one, app-team-two\n```\n\n----------------------------------------\n\nTITLE: Detailed CLI options for configuring 'argocd proj remove-source'\nDESCRIPTION: This snippet lists various CLI options inherited from parent commands, allowing users to customize server context, authentication tokens, certificate files, connection parameters, logging levels, and environment-specific settings such as namespace and port forwarding. These options facilitate flexible and secure execution of the command in different environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-source.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--argocd-context string\\n--auth-token string\\n--client-crt string\\n--client-crt-key string\\n--config string\\n--controller-name string\\n--core\\n--grpc-web\\n--grpc-web-root-path string\\n-H, --header strings\\n--http-retry-max int\\n--insecure\\n--kube-context string\\n--logformat string\\n--loglevel string\\n--plaintext\\n--port-forward\\n--port-forward-namespace string\\n--prompts-enabled\\n--redis-compress string\\n--redis-haproxy-name string\\n--redis-name string\\n--repo-server-name string\\n--server string\\n--server-crt string\\n--server-name string\n```\n\n----------------------------------------\n\nTITLE: Removing a source repository from an Argo CD project using 'argocd proj remove-source'\nDESCRIPTION: This snippet demonstrates how to execute the 'argocd proj remove-source' command with positional parameters, specifying the project name and the URL of the repository to remove. The command is used to disassociate a source repository from an existing project in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj remove-source PROJECT_URL PROJECT_URL\n```\n\n----------------------------------------\n\nTITLE: Options for argocd admin notifications trigger run\nDESCRIPTION: Lists the specific command-line options available for the `argocd admin notifications trigger run` subcommand, primarily the help flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for run\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Deployment with Argo CD Tracking Annotation (YAML)\nDESCRIPTION: This YAML snippet provides a complete example of a Kubernetes Deployment manifest demonstrating the proposed `app.kubernetes.io/instance` annotation format. The annotation value includes the application name (`my-application`) and the resource identifier (`apps/Deployment/default/my-deployment`), separated by a semicolon, enabling annotation-based resource tracking by Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  annotations:\n    app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment\n```\n\n----------------------------------------\n\nTITLE: Options for Filtering Exported Data by Namespace and ApplicationSet\nDESCRIPTION: These flags allow users to specify namespace glob patterns for exporting applications and ApplicationSets in addition to the default control plane namespace. Defaults are explained, including retrieval from ConfigMap if flags are not specified. These options enable targeted exports for specific namespace groups.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_export.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--application-namespaces strings\n--applicationset-namespaces strings\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet with Multiple Projects - YAML\nDESCRIPTION: This ApplicationSet demonstrates how to use multiple projects. The ApplicationSet generates two applications, `infra-escalation` and `team-two-escalation`. As the target namespaces are not `argocd`, `sourceNamespaces` must be defined in AppProject definition.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: team-one-product-one\n  namespace: team-one-cd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    list:\n    - name: infra\n      project: infra-project\n    - name: team-two\n      project: team-two-project\n  template:\n    metadata:\n      name: '{{.name}}-escalation'\n    spec:\n      project: \"{{.project}}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Argo CD Server Service for GKE Ingress (YAML)\nDESCRIPTION: Defines a Kubernetes ClusterIP Service for the Argo CD server within the 'argocd' namespace. This service uses Google Cloud annotations to integrate with GKE Ingress and optionally utilizes a Network Endpoint Group (NEG) for direct pod traffic routing. It exposes port 80 and targets port 8080 on pods labeled 'app.kubernetes.io/name: argocd-server'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: argocd-server\n  namespace: argocd\n  annotations:\n    cloud.google.com/neg: '{\"ingress\": true}'\n    cloud.google.com/backend-config: '{\"ports\": {\"http\":\"argocd-backend-config\"}}'\nspec:\n  type: ClusterIP\n  ports:\n  - name: http\n    port: 80\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: argocd-server\n```\n\n----------------------------------------\n\nTITLE: Delete Argo CD Project Role\nDESCRIPTION: This command deletes a role from an Argo CD project. It requires the project name and the role name as input.  Ensure you have the necessary permissions to modify the project roles.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role delete PROJECT ROLE-NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Argo CD Project Commands\nDESCRIPTION: Lists all options inherited from parent commands. These include various connection, authentication, and configuration options that can be used with any Argo CD command including the project role list command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Using the argocd admin settings command\nDESCRIPTION: Basic usage syntax for the argocd admin settings command to access settings validation and troubleshooting functionality.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings [flags]\n```\n\n----------------------------------------\n\nTITLE: Application Resource Definition in Non-Control Plane Namespace (foons)\nDESCRIPTION: Example of an Application resource defined in a namespace named 'foons'. Under the proposed design, this application would be uniquely identified as 'foons/some-app'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: foons\nspec:\n  project: some-project\n```\n\n----------------------------------------\n\nTITLE: ConfigManagementPlugin Metadata Specification - Plugin Example - YAML\nDESCRIPTION: This snippet provides an example ConfigManagementPlugin manifest in YAML defining how the plugin executes its initialization, generation, and discovery routines. The file specifies plugin version, commands to run (init/generate/discovery), and pattern matching logic for tool detection. No external dependencies are required beyond the plugin container image already containing relevant binaries. Inputs are command arrays and glob patterns; outputs are plugin initialization and manifest generation. The file should reside in a well-known path and is not a Kubernetes CRD, only following similar conventions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# metadata file is in the root and shell executor knows about it\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: cdk8s\nspec:\n  version: v1.0\n  init:\n    command: [cdk8s, init]\n  generate:\n    command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"]\n  discovery:\n    find:\n    - command: [find . -name main.ts]\n      glob: \"**/*/main.ts\"\n    check:\n    - command: [-f ./main.ts]\n      glob: \"main.ts\"\n```\n\n----------------------------------------\n\nTITLE: Contour HTTPProxy CRD for Single Hostname Handling gRPC and REST in YAML\nDESCRIPTION: Defines a Contour HTTPProxy Custom Resource that allows serving both gRPC and REST traffic on the same hostname with TLS termination. Routes distinguish traffic based on Content-Type header to use HTTP/2 cleartext (h2c) for gRPC and normal HTTP for REST. TLS is configured with a wildcard secret. This enables unified hostname routing overcoming Contour's single-protocol per ingress limitation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: projectcontour.io/v1\nkind: HTTPProxy\nmetadata:\n  name: argocd-server\n  namespace: argocd\nspec:\n  ingressClassName: contour\n  virtualhost:\n    fqdn: path.to.argocd.io\n    tls:\n      secretName: wildcard-tls\n  routes:\n    - conditions:\n        - prefix: /\n        - header:\n            name: Content-Type\n            contains: application/grpc\n      services:\n        - name: argocd-server\n          port: 80\n          protocol: h2c # allows for unencrypted http2 connections\n      timeoutPolicy:\n        response: 1h\n        idle: 600s\n        idleConnection: 600s\n    - conditions:\n        - prefix: /\n      services:\n        - name: argocd-server\n          port: 80\n```\n\n----------------------------------------\n\nTITLE: Using REST API to Access Applications in Different Namespaces\nDESCRIPTION: Example REST API request showing how to use the appNamespace query parameter to access an Application resource in a namespace other than the control plane.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/v1/applications/foo?appNamespace=bar\n```\n\n----------------------------------------\n\nTITLE: Retriggering CI Pipeline with Empty Commit in Bash\nDESCRIPTION: Commands to create an empty commit and push to your branch to retrigger the CI pipeline without code changes. Uses the -s flag for signed commits and --allow-empty to permit commits with no content changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/ci.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -s --allow-empty -m \"Retrigger CI pipeline\"\ngit push origin <yourbranch>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Server Pull Request Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Explains how to set up the `pullRequest` generator for Bitbucket Server. It involves specifying the project (`project`), repository (`repo`), Bitbucket Server API URL (`api`), authentication details (either `basicAuth` with username/passwordRef or `bearerToken` with tokenRef for private repos), options for self-signed certificates (`insecure`, `caRef`), and optional branch filtering (`filters.branchMatch`) since labels are not supported. Requires an Argo CD ApplicationSet and Kubernetes Secrets for authentication credentials and optionally a ConfigMap for CA certificates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      bitbucketServer:\n        project: myproject\n        repo: myrepository\n        # URL of the Bitbucket Server. Required.\n        api: https://mycompany.bitbucket.org\n        # Credentials for Basic authentication (App Password). Either basicAuth or bearerToken\n        # authentication is required to access private repositories\n        basicAuth:\n          # The username to authenticate with\n          username: myuser\n          # Reference to a Secret containing the password or personal access token.\n          passwordRef:\n            secretName: mypassword\n            key: password\n        # Credentials for Bearer Token (App Token) authentication. Either basicAuth or bearerToken\n        # authentication is required to access private repositories\n        bearerToken:\n          # Reference to a Secret containing the bearer token.\n          tokenRef:\n            secretName: repotoken\n            key: token\n        # If true, skips validating the SCM provider's TLS certificate - useful for self-signed certificates.\n        insecure: true\n        # Reference to a ConfigMap containing trusted CA certs - useful for self-signed certificates. (optional)\n        caRef:\n          configMapName: argocd-tls-certs-cm\n          key: bitbucket-ca\n      # Labels are not supported by Bitbucket Server, so filtering by label is not possible.\n      # Filter PRs using the source branch name. (optional)\n      filters:\n      - branchMatch: \".*-argocd\"\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Logout with Redirect Back to Argo CD (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the `logoutURL` in `argocd-cm`'s `oidc.config` key to first log the user out at the OIDC provider and then redirect them back to the Argo CD instance. It uses the `{{token}}` placeholder for the ID token hint and the `{{logoutRedirectURL}}` placeholder for the automatically generated Argo CD redirect URL. The post-logout redirect URI might need whitelisting at the OIDC provider.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n...\n    logoutURL: https://example-OIDC-provider.example.com/logout?id_token_hint={{token}}&post_logout_redirect_uri={{logoutRedirectURL}}\n```\n\n----------------------------------------\n\nTITLE: Adding Credentials with Username/Password\nDESCRIPTION: This example demonstrates adding credentials with username and password authentication. It specifies the repository URL and uses the `--username` and `--password` flags. The command ensures the user is authenticated when accessing the git repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with user/pass authentication to use for all repositories under https://git.example.com/repos\n  argocd repocreds add https://git.example.com/repos/ --username git --password secret\n```\n\n----------------------------------------\n\nTITLE: Listing ArgoCD Applications by Label in Shell\nDESCRIPTION: This code snippet demonstrates how to filter Argo CD applications based on labels using the `-l` or `--selector` option with the `argocd app list` command.  It includes various label matching operators such as `=`, `!=`, `in`, `notin`, `exists`, and `not exists` for advanced filtering capabilities. The example demonstrates listing apps that are children of another app (aka app-of-apps).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_list.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app list -l app.kubernetes.io/instance=my-app\nargocd app list -l app.kubernetes.io/instance!=my-app\nargocd app list -l app.kubernetes.io/instance\nargocd app list -l '!app.kubernetes.io/instance'\nargocd app list -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n```\n\n----------------------------------------\n\nTITLE: Example: Add GnuPG Signature Key to Project via Argo CD CLI - Shell\nDESCRIPTION: Provides a concrete example of adding a GnuPG signature key to a project using the Argo CD CLI. The placeholder values should be replaced with the actual Argo CD project and GnuPG key ID. No output is produced on success; if there is an error (such as missing permissions or incorrect identifiers), the CLI will print an error message.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-signature-key.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj add-signature-key PROJECT KEY-ID\n```\n\n----------------------------------------\n\nTITLE: Examples of argocd repocreds list command with different output formats\nDESCRIPTION: Examples showing how to list repository credentials using various output formats including default, JSON, YAML, and URL formats.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_list.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all repo urls\nargocd repocreds list\n  \n# List all repo urls in json format\nargocd repocreds list -o json\n  \n# List all repo urls in yaml format\nargocd repocreds list -o yaml\n  \n# List all repo urls in url format\nargocd repocreds list -o url\n```\n\n----------------------------------------\n\nTITLE: Extracting Helm Parameters from values.yaml (Shell)\nDESCRIPTION: A shell script (`get-parameters.sh`) for the simple Helm CMP's dynamic parameter generation. It extracts key-value pairs from a local `values.yaml` file using `yq` and transforms them into a JSON array object formatted as a map parameter using `jq`, suitable for Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nyq e -o=p values.yaml | jq --slurp --raw-input '\n  [{\n    name: \"helm-parameters\", \n    title: \"Helm Parameters\",\n    collectionType: \"map\",\n    map: split(\"\\\\n\") | map(capture(\"(?<key>.*) = (?<value>.*)\")) | from_entries\n  }]'\n```\n\n----------------------------------------\n\nTITLE: Enabling NetworkPolicy Default Deny for Kubernetes v1.5-v1.6\nDESCRIPTION: Command to annotate the default namespace to enable NetworkPolicy with DefaultDeny rule. This will enforce policy for all pods in the namespace, limiting traffic to just port 9000 for Minio.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate namespace default \"net.beta.kubernetes.io/network-policy={\\\"ingress\\\":{\\\"isolation\\\":\\\"DefaultDeny\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD Core using kubectl\nDESCRIPTION: Commands to install Argo CD Core by creating a namespace and applying the core installation manifest file. This process requires setting the desired Argo CD version as an environment variable.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/core.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ARGOCD_VERSION=<desired argo cd release version (e.g. v2.7.0)>\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/$ARGOCD_VERSION/manifests/core-install.yaml\n```\n\n----------------------------------------\n\nTITLE: Git File Generator Path Example\nDESCRIPTION: This example shows a Git file generator path that is intended to target `values.yaml` files within specific subdirectories. It demonstrates how the original globbing implementation might incorrectly match files in deeper nested directories.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npath: cluster-charts/*/*/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Event Label Inclusion - YAML\nDESCRIPTION: This snippet shows how to configure Argo CD to include specific labels on Kubernetes events generated for Applications. The `resource.includeEventLabelKeys` key is used, taking a comma-separated list of `metadata.labels` keys. This allows for easier filtering and linking of events to applications. The use of wildcards is supported. This configuration is performed in the Argo CD configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n  resource.includeEventLabelKeys: team,env*\n```\n\n----------------------------------------\n\nTITLE: Creating AKS Cluster Secret Using ArgoCD-k8s-auth with Azure Workload Identity in YAML\nDESCRIPTION: This snippet provides a Kubernetes Secret manifest for configuring Argo CD integration with an AKS cluster using argocd-k8s-auth and Azure's federated workload identity login. It includes an execProviderConfig with the command, environment variables to specify Azure environment, client ID, tenant ID, federated token file location, authority host, and login method. This setup requires mounting a federated token file as a secret and configuring appropriate Azure federated identity credentials. The Secret manifests enable non-interactive authentication flows for AKS cluster API access from Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster.example.com\n  server: https://mycluster.example.com\n  config: |\n    {\n      \"execProviderConfig\": {\n        \"command\": \"argocd-k8s-auth\",\n        \"env\": {\n          \"AAD_ENVIRONMENT_NAME\": \"AzurePublicCloud\",\n          \"AZURE_CLIENT_ID\": \"fill in client id\",\n          \"AZURE_TENANT_ID\": \"fill in tenant id\", # optional, injected by workload identity mutating admission webhook if enabled\n          \"AZURE_FEDERATED_TOKEN_FILE\": \"/opt/path/to/federated_file.json\", # optional, injected by workload identity mutating admission webhook if enabled\n          \"AZURE_AUTHORITY_HOST\": \"https://login.microsoftonline.com/\", # optional, injected by workload identity mutating admission webhook if enabled\n          \"AAD_LOGIN_METHOD\": \"workloadidentity\"\n        },\n        \"args\": [\"azure\"],\n        \"apiVersion\": \"client.authentication.k8s.io/v1beta1\"\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Listing Argo CD Projects\nDESCRIPTION: Shows the fundamental command structure for listing Argo CD projects using the `argocd` CLI. It accepts optional flags to modify its behavior, such as specifying output format or filtering.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj list [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Adding Cluster-Scoped Resource to Project Allow List\nDESCRIPTION: Illustrates a common use case of the `argocd proj allow-cluster-resource` command, demonstrating how to add a specific cluster-scoped API resource (identified by GROUP and KIND) to the allow list for a designated Argo CD project (PROJECT). This command adds the resource to the allow list by default and removes it from the deny list.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_allow-cluster-resource.md#_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\n  # Adds a cluster-scoped API resource with specified GROUP and KIND to the allow list and removes it from deny list for project PROJECT\n  argocd proj allow-cluster-resource PROJECT GROUP KIND\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Parameters in Application Spec (YAML)\nDESCRIPTION: Demonstrates how to set a plugin parameter (`ignore-helm-charts` as an array) within an Argo CD `Application` resource's `spec.source.plugin.parameters` section. This allows passing configuration values to the associated ConfigManagementPlugin.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    plugin:\n      parameters:\n      - name: ignore-helm-charts\n        array: [chart-a, chart-b]\n```\n\n----------------------------------------\n\nTITLE: Configuring execProviderConfig args with Role ARN for EKS Auth - YAML\nDESCRIPTION: Illustrates how to append a --role-arn argument to the execProviderConfig 'args' array for specifying the IAM role to assume when generating EKS auth tokens. This is an extension to the previous execProviderConfig-based Secret, allowing flexibility in role delegation. The snippet should be used alongside a complete Argo CD cluster Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n...\n    \"args\": [\"aws\", \"--cluster-name\", \"my-eks-cluster\", \"--role-arn\", \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_ROLE_NAME>\"],\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying External Value Files for Helm Charts in Argo CD\nDESCRIPTION: Configuration that demonstrates how to reference external value files for a Helm chart deployment. This allows customizing Helm chart parameters through separate YAML files stored in the same repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  helm:\n    valueFiles:\n    - values-production.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Serialized Parameters in CMP via Environment Variable (Shell)\nDESCRIPTION: Shows how a ConfigManagementPlugin script can access the parameters passed by Argo CD via the `ARGOCD_APP_PARAMETERS` environment variable, parsing the JSON content using `jq`. This variable contains a JSON array representing the parameters set in the Application spec.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \"$ARGOCD_APP_PARAMETERS\" | jq\n```\n\n----------------------------------------\n\nTITLE: Overriding Source by Name in Multi-Source Application - Argo CD CLI - Shell\nDESCRIPTION: This snippet updates source configuration in a multi-source Argo CD application by referencing the source using its name with '--source-name'. This is effective for named sources rather than positional ones. Requires the application to define sources with names and uses '--repo' to provide the new repository URL. Inputs are the application name, source name, and repository URL; output is a changed source entry for the app. The command assumes the named source exists in the application's spec.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_set.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nargocd app set my-app --source-name test --repo https://github.com/argoproj/argocd-example-apps.git\n```\n\n----------------------------------------\n\nTITLE: Add Argo CD Project Destination with Server Name\nDESCRIPTION: This example demonstrates how to add a project destination using a server name (NAME) in the specified namespace (NAMESPACE) on the project with name PROJECT.  It requires the project name, server name, and namespace, along with the `--name` flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-destination.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj add-destination PROJECT NAME NAMESPACE --name\n```\n\n----------------------------------------\n\nTITLE: Getting Argo CD Application Status via CLI\nDESCRIPTION: Displays the current status and configuration of the `guestbook` application using the `argocd app get` command. The output shows details like the source repository, destination cluster and namespace, and the sync and health status of the associated Kubernetes resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ argocd app get guestbook\nName:               guestbook\nServer:             https://kubernetes.default.svc\nNamespace:          default\nURL:                https://10.97.164.88/applications/guestbook\nRepo:               https://github.com/argoproj/argocd-example-apps.git\nTarget:\nPath:               guestbook\nSync Policy:        <none>\nSync Status:        OutOfSync from  (1ff8a67)\nHealth Status:      Missing\n\nGROUP  KIND        NAMESPACE  NAME          STATUS     HEALTH\napps   Deployment  default    guestbook-ui  OutOfSync  Missing\n       Service     default    guestbook-ui  OutOfSync  Missing\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD\nDESCRIPTION: This command starts the local Argo CD instance using `make start-local`. It assumes that all prerequisites are installed.  It navigates to the argo-cd directory before running the command. The  `ARGOCD_GPG_ENABLED=false` disables GPG.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd argo-cd\nmake start-local ARGOCD_GPG_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'argocd proj edit' Command\nDESCRIPTION: Demonstrates how to invoke the command to edit a specific project by replacing 'PROJECT' with the project name; this example shows a simple invocation for editing project details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_edit.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Edit the information on project with name PROJECT\n  argocd proj edit PROJECT\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Tracking using Default Label (YAML)\nDESCRIPTION: This snippet illustrates a Kubernetes Deployment manifest configured for tracking using the default `label` method. It sets the `app.kubernetes.io/instance` label in the metadata, with its value typically being the name of the Argo CD Application managing the resource. This is compatible with other Kubernetes tools but subject to label constraints (63 chars).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_tracking.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  labels:\n    app.kubernetes.io/instance: some-application\n```\n\n----------------------------------------\n\nTITLE: Getting Help for `argocd admin repo`\nDESCRIPTION: Displays the help message for the `argocd admin repo` command, detailing its purpose, usage syntax, and available options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_repo.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for repo\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectService - Protobuf\nDESCRIPTION: This snippet defines the ProjectService in Protocol Buffers, exposing a single RPC method, ListLinks, to retrieve deep links associated with a project.  The `option (google.api.http).get` statement maps the RPC to an HTTP GET endpoint.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/deep-links.md#_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nservice ProjectService {\n  \n  rpc ListLinks(google.protobuf.Empty) returns (LinksResponse) {\n    option (google.api.http).get = \"/api/v1/projects/{name}/links\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Pruning via Resource Annotation (YAML)\nDESCRIPTION: Applies the `argocd.argoproj.io/sync-options: PruneLast=true` annotation to an individual resource's metadata. This flags the specific resource to be pruned only during the final wave of the sync operation, after other resources are healthy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: PruneLast=true\n```\n\n----------------------------------------\n\nTITLE: Enabling application sync impersonation in Argo CD via ConfigMap\nDESCRIPTION: Defines the YAML configuration to enable impersonation feature by setting 'application.sync.impersonation.enabled' to 'true' in the 'argocd-cm' ConfigMap. This change allows Argo CD to perform application syncs with specified impersonated service accounts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-sync-using-impersonation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  application.sync.impersonation.enabled: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD Server and UI Root Path (YAML)\nDESCRIPTION: Shows a partial Kubernetes Deployment manifest for 'argocd-server', modifying the container command to include the `--rootpath` flag (e.g., `--rootpath /argo-cd`). This configures both the Argo CD API server and the UI to be served under the specified non-root path.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      name: argocd-server\n      containers:\n      - command:\n        - /argocd-server\n        - --repo-server\n        - argocd-repo-server:8081\n        - --rootpath\n        - /argo-cd\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitation: Templating Boolean Fields (YAML)\nDESCRIPTION: Shows an example of what is *not* possible with Go templates in ApplicationSet: attempting to template the boolean `useCredentials` field in Helm source configuration. Go templates can only be applied to string fields.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  template:\n    spec:\n      source:\n        helm:\n          useCredentials: \"{{.useCredentials}}\"  # This field may NOT be templated, because it is a boolean field.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific ApplicationSet Example - Shell\nDESCRIPTION: This shell command demonstrates deleting a specific ApplicationSet by directly specifying its name(s). It is an example of how the 'argocd appset delete' command is used interactively in real-world scenarios. Requires Argo CD CLI and appropriate authentication to the Argo CD server. The 'APPSETNAME' placeholder should be replaced with the actual name(s) of the ApplicationSet(s) to be deleted. This operation will prompt for confirmation unless the '-y' flag is appended.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_delete.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd appset delete APPSETNAME (APPSETNAME...)\n```\n\n----------------------------------------\n\nTITLE: Managing Project Roles CLI\nDESCRIPTION: These bash commands manage project roles using the Argo CD CLI. They allow listing, getting, creating, deleting roles, and adding or removing policies associated with the roles. These commands are fundamental to managing RBAC in Argo CD projects.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj role list\nargocd proj role get\nargocd proj role create\nargocd proj role delete\nargocd proj role add-policy\nargocd proj role remove-policy\n```\n\n----------------------------------------\n\nTITLE: Ignoring Orphaned Resources in Argo CD (YAML)\nDESCRIPTION: This snippet demonstrates how to configure Argo CD to ignore specific resources by providing a list of resource Group, Kind, and Name. This ignores resources that match these criteria. The `ignore` section within the `orphanedResources` section allows you to specify resources that shouldn't be considered orphaned. This approach is useful to prevent false positives or suppress warnings for resources you know are managed outside of Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/orphaned-resources.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\nspec:\n  orphanedResources:\n    ignore:\n    - kind: ConfigMap\n      name: orphaned-but-ignored-configmap\n```\n```\n\n----------------------------------------\n\nTITLE: Example argocd proj deny-namespace-resource Command (Shell)\nDESCRIPTION: Provides a basic example of using the `argocd proj deny-namespace-resource` command. It demonstrates adding or removing a specified namespaced resource (identified by GROUP and KIND) for a particular project (PROJECT) using the default list type (deny list).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_deny-namespace-resource.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj deny-namespace-resource PROJECT GROUP KIND\n```\n\n----------------------------------------\n\nTITLE: Add Argo CD Project Destination\nDESCRIPTION: This command adds a destination to an Argo CD project, allowing deployments to a specified server or cluster name and namespace. The SERVER argument can be a server URL or a name, controlled by the `--name` flag. The command requires the PROJECT name, SERVER or NAME, and NAMESPACE as input.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-destination.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj add-destination PROJECT SERVER/NAME NAMESPACE [flags]\n```\n\n----------------------------------------\n\nTITLE: Passing key-value pairs via `values` field in Argo CD\nDESCRIPTION: This example demonstrates how to pass additional key-value pairs using the `values` field of the cluster generator in Argo CD.  It uses `goTemplate` and `goTemplateOptions` to substitute values into the `targetRevision` field based on the cluster's type (staging or production).  The `values.` prefix must be used when referencing these values in the template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          type: 'staging'\n      # A key-value map for arbitrary parameters\n      values:\n        revision: HEAD # staging clusters use HEAD branch\n  - clusters:\n      selector:\n        matchLabels:\n          type: 'production'\n      values:\n        # production uses a different revision value, for 'stable' branch\n        revision: stable\n  template:\n    metadata:\n      name: '{{.name}}-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        # The cluster values field for each generator will be substituted here:\n        targetRevision: '{{.values.revision}}'\n        path: guestbook\n      destination:\n        server: '{{.server}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Sidecar Containers in Argo CD Repo Server - YAML Manifest - bash\nDESCRIPTION: This snippet demonstrates how to configure Argo CD to install a plugin as a sidecar container in the repo-server deployment for manifest rendering. The key section is under the 'containers' array: the plugin container (e.g., cdk8s) is specified by image, command, and required shared volume mounts. Prerequisites include building a container image with the necessary plugin tooling. Inputs are the plugin image and paths; expected outputs are successful sidecar integration. The plugin executable must be present in the container, and the shared volume is used for inter-container communication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# A plugin is a container image which runs as a sidecar, with the execution environment\n# necessary to render manifests. To install a plugin, \ncontainers:\n- name: cdk8s\n  command: [/var/run/argocd/argocd-cmp-server]\n  image: docker.ui/cdk8s/cdk8s:latest\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n```\n\n----------------------------------------\n\nTITLE: Verifying CLI Artifact with SLSA\nDESCRIPTION: This bash script verifies a CLI artifact using slsa-verifier. It utilizes `--provenance-path` to specify the attestation file and `--source-uri` and `--source-tag` to specify the source repository and tag. This validates the authenticity of CLI binaries. Requires `slsa-verifier`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nslsa-verifier verify-artifact argocd-linux-amd64 \\\n  --provenance-path argocd-cli.intoto.jsonl \\\n  --source-uri github.com/argoproj/argo-cd \\\n  --source-tag v2.7.0\n```\n\n----------------------------------------\n\nTITLE: Synopsis for ignore-differences Command\nDESCRIPTION: This snippet shows the basic syntax for the `argocd admin settings resource-overrides ignore-differences` command. It requires the path to the resource YAML file as a mandatory argument and accepts various optional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings resource-overrides ignore-differences RESOURCE_YAML_PATH [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Credentials with Github App\nDESCRIPTION: This example adds credentials using a GitHub App.  It uses the `--github-app-id`, `--github-app-installation-id`, and `--github-app-private-key-path` flags to configure the application and uses `--github-app-enterprise-base-url` for GitHub Enterprise. This configures Argo CD to access the repository using the provided Github App credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_4\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with GitHub App authentication to use for all repositories under https://github.com/repos\n  argocd repocreds add https://github.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with GitHub App authentication to use for all repositories under https://ghe.example.com/repos\n  argocd repocreds add https://ghe.example.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3\n```\n\n----------------------------------------\n\nTITLE: Serving Argo CD Docs with Docker (Bash)\nDESCRIPTION: Use this command to build and serve the documentation website locally within a Docker container. This allows live preview at `http://0.0.0.0:8000/` with automatic refresh on changes. Requires Docker and the project's Makefile.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/docs-site.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmake serve-docs\n```\n\n----------------------------------------\n\nTITLE: Listing Cluster Server Addresses (Shell)\nDESCRIPTION: Shows how to list only the server addresses of the configured clusters using the `-o server` output format. The `--server` flag specifies the Argo CD instance to query. Replace `<ARGOCD_SERVER_ADDRESS>` with the actual server address.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster list -o server <ARGOCD_SERVER_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Getting Notification Templates in Argo CD\nDESCRIPTION: Command to retrieve information about configured notification templates in Argo CD. Supports different output formats including JSON, YAML, wide, and name with examples showing how to list all templates or get specific template details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications template get [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# prints all templates\nargocd admin notifications template get\n# print YAML formatted app-sync-succeeded template definition\nargocd admin notifications template get app-sync-succeeded -o=yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of:json|yaml|wide|name (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Options for `argocd proj role remove-group` Command\nDESCRIPTION: Provides the specific command-line option available for the `argocd proj role remove-group` subcommand.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_remove-group.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for remove-group\n```\n\n----------------------------------------\n\nTITLE: Example Slack Service Configuration in ConfigMap\nDESCRIPTION: This snippet demonstrates configuring a Slack notification service in the `argocd-notifications-cm` ConfigMap using a token reference from a secret. The 'service.slack' key holds the service configuration, with placeholders for secret references. The 'slack' service defaults to the name 'slack' if no custom name is provided.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/overview.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  service.slack: |\n    token: $slack-token\n```\n\n----------------------------------------\n\nTITLE: Enabling New Git File Globbing - Environment Variable\nDESCRIPTION: This snippet shows how to enable the new Git file globbing by setting an environment variable for the ApplicationSet controller. This option is an alternative way to activate the improved globbing behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Custom CSS URL in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Argo CD to load custom UI styles from a remote URL. It involves setting the `ui.cssurl` key within the `data` section of the `argocd-cm` ConfigMap to the desired external CSS file URL. This allows overriding default styles without modifying the Argo CD server container directly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom-styles.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n  ui.cssurl: \"https://www.example.com/my-styles.css\"\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Kustomize CMP Configuration (YAML)\nDESCRIPTION: Configures a basic Argo CD Config Management Plugin for Kustomize. It defines static parameters like `version`, `name-prefix`, and `name-suffix`, and specifies that dynamic parameters should be generated by executing the `generate-params.sh` script.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: kustomize\nspec:\n  parameters:\n    static:\n    - name: version\n      title: VERSION\n      string: v4.3.0\n    - name: name-prefix\n      title: NAME PREFIX\n    - name: name-suffix\n      title: NAME SUFFIX\n    dynamic:\n      command: [\"generate-params.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Storing OIDC Azure Client Secret in Argo CD - YAML\nDESCRIPTION: This YAML snippet demonstrates how to store the Azure OIDC client secret in the argocd-secret Secret resource, base64-encoded, which is referenced in the ConfigMap for authentication. The client secret used must be copied from the Azure portal and encoded with base64 before insertion. Input: a base64-encoded string of your Azure OIDC client secret. Output: a Kubernetes Secret resource containing the authentication secret necessary for OIDC logins where workload identity is not used.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nSecret -> argocd-secret\n\ndata:\n   oidc.azure.clientSecret: {client_secret | base64_encoded}\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaces, Service Accounts, Roles, and RoleBindings for Guestbook App in Remote Cluster Using Shell\nDESCRIPTION: This snippet creates the 'guestbook' namespace and the 'guestbook-deployer' service account, followed by roles and role bindings for managing pods, deployments, and services in the namespace. These RBAC configurations enable containerized applications to run with appropriate scoped permissions during ArgoCD sync operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ctx remote-cluster\nkubectl create namespace guestbook\nkubectl create serviceaccount guestbook-deployer\nkubectl create role guestbook-deployer-role --verb get,list,update,delete --resource pods,deployment,service\nkubectl create rolebinding guestbook-deployer-rb --serviceaccount guestbook-deployer --role guestbook-deployer-role\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Cluster (kind)\nDESCRIPTION: This command creates a local Kubernetes cluster using kind.  It creates a new cluster that can be used to deploy and test Argo CD.  Kind must be installed before running this command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Building Argo CD Builder Image in Bash\nDESCRIPTION: Make command to build the Argo CD builder image with specified namespace and tag parameters. Used for creating custom builder images for the CI process.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/ci.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake builder-image IMAGE_NAMESPACE=argoproj IMAGE_TAG=v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Command Line Options for allow-namespace-resource (Argo CD CLI, Bash)\nDESCRIPTION: This snippet lists available flags and their purposes for the 'argocd proj allow-namespace-resource' command. The '-h' or '--help' flag provides help information, and '-l' or '--list' specifies if the action targets the 'allow' or 'deny' list (default is 'deny'). Prerequisites include access to the Argo CD CLI. Adjust arguments as needed for your use case.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_allow-namespace-resource.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help          help for allow-namespace-resource\n-l, --list string   Use deny list or allow list. This can only be 'allow' or 'deny' (default \"deny\")\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocs Dependencies Locally (Bash)\nDESCRIPTION: This command installs all necessary dependencies for the documentation build, as specified by `mkdocs get-deps`, using pip. It ensures all required plugins and themes, like `mkdocs-material`, are available locally. Requires Python, pip, and `mkdocs` installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/docs-site.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npip install $(mkdocs get-deps)\n```\n\n----------------------------------------\n\nTITLE: Listing Parent Command Flags for argocd proj role get in Shell\nDESCRIPTION: This snippet documents the inherited CLI options available to argocd proj role get from its parent commands, allowing custom configuration of the CLI environment, authentication, and context selection. Users may specify options such as --argocd-context, --auth-token, --config, --core, --grpc-web, --header, etc. These flags accept various types of input including strings, booleans, and integers; consult Argo CD documentation for configuration constraints.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_get.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Argo CD ApplicationSet YAML with matrix and pull request generators\nDESCRIPTION: This YAML configuration defines an Argo CD ApplicationSet that uses matrix and pull request generators to create application deployments for multiple branches. The configuration includes plugin parameters, Helm values referencing dynamically fetched image digests, and API call examples to gather branch-specific data. It provides a comprehensive template for automating multi-branch deployment pipelines.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: fb-matrix\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - matrix:\n        generators:\n          - pullRequest:\n              github: ...\n              requeueAfterSeconds: 30\n          - plugin:\n              configMapRef:\n                name: cm-plugin\n              input:\n                parameters:\n                  branch: \"{{.branch}}\"\n              values:\n                branchLink: \"https://git.example.com/org/repo/tree/{{.branch}}\"\n  template:\n    metadata:\n      name: \"fb-matrix-{{.branch}}\"\n    spec:\n      source:\n        repoURL: \"https://github.com/myorg/myrepo.git\"\n        targetRevision: \"HEAD\"\n        path: charts/my-chart\n        helm:\n          releaseName: fb-matrix-{{.branch}}\n          valueFiles:\n            - values.yaml\n          values: |\n            front:\n              image: myregistry:{{.branch}}@{{ .digestFront }}\n            back:\n              image: myregistry:{{.branch}}@{{ .digestBack }}\n      project: default\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n          - CreateNamespace=true\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: \"{{.branch}}\"\n      info:\n        - name: Link to the Application's branch\n          value: \"{{values.branchLink}}\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Plugin Generator Reconciliation Flow Mermaid\nDESCRIPTION: A Mermaid diagram illustrating the sequence of operations for the 'plugin' generator. It shows how the generator retrieves configuration from Kubernetes, makes an authenticated RPC call to the external plugin endpoint with parameters, and receives the generated parameter list in response.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/applicationset-plugin-generator.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    alt generator is plugin\n    Generator->>K8S: Get configmap {configMapRef}\n    K8S-->>Generator: (url,token)\n    Generator->>Plugin endpoint: POST {url}/v1/generator.getParams<br/>Authorization: Bearer {token}<br/>Content-Type: application/json<br/>{params}\n    Plugin endpoint-->>Generator: []map{string}interface{}\n    end\n```\n\n----------------------------------------\n\nTITLE: Argo CD CLI Global Options\nDESCRIPTION: These options are inherited from parent commands and affect the behavior of the Argo CD CLI. They control aspects such as authentication, server connection, logging, and Kubernetes context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_set.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Getting Argo CD Application Details with Token (Example Failure)\nDESCRIPTION: Demonstrates the command-line interface (CLI) usage of `argocd app get` with an authentication token. The surrounding text indicates this specific command is expected to fail due to the token being invalid or deleted. This serves as context for security considerations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app get $APP --auth-token $JWT\n```\n\n----------------------------------------\n\nTITLE: Parameter Output from List Generator (YAML)\nDESCRIPTION: This snippet shows the parameter set generated by the `list` generator in the first ApplicationSet example. It specifically targets the cluster with the server address `https://2.4.6.8` (the `production` cluster) and provides an overriding `values.redis` value of 'true'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- server: https://2.4.6.8\n  values.redis: 'true'\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Ingress for Argo CD (1.21.3-gke.1600+) (YAML)\nDESCRIPTION: Defines a Kubernetes Ingress resource for Argo CD on GKE clusters running version 1.21.3-gke.1600 or later. It uses the 'argocd-frontend-config' for HTTPS redirect, references the 'secret-example-com' TLS secret, and routes traffic for 'argocd.example.com' to the 'argocd-server' service using `pathType: Prefix` and path `/`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd\n  namespace: argocd\n  annotations:\n    networking.gke.io/v1beta1.FrontendConfig: argocd-frontend-config\nspec:\n  tls:\n    - secretName: secret-example-com\n  rules:\n    - host: argocd.example.com\n      http:\n        paths:\n        - pathType: Prefix\n          path: \"/\"\n          backend:\n            service:\n              name: argocd-server\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring PagerDuty Service in ConfigMap\nDESCRIPTION: This YAML snippet configures the PagerDuty service within the Argo CD notifications ConfigMap.  The `serviceKeys` property maps a service name (`my-service`) to a reference to the secret containing the PagerDuty integration key (`$pagerduty-key-my-service`). Ensure the secret name matches the one created in the previous step.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty_v2.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerdutyv2: |\n    serviceKeys:\n      my-service: $pagerduty-key-my-service\n```\n\n----------------------------------------\n\nTITLE: Executing ArgoCD App Reconcile Results Command\nDESCRIPTION: This command reconciles all ArgoCD applications and saves the reconciliation summary to a specified path. It offers various options for authentication, server configuration, and output formatting. The PATH argument specifies where the reconciliation results will be stored.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_app_get-reconcile-results.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd admin app get-reconcile-results PATH [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for SAML Authentication with Google - YAML\nDESCRIPTION: This YAML snippet configures Dex within the argocd-cm ConfigMap to enable SAML-based authentication using Google as the Identity Provider. Parameters such as ssoURL, entityIssuer, caData (base64-encoded certificate), and redirectURI must be filled with values from your Google SAML App setup. The config supports mapping username and email SAML attributes for Dex. Replace example placeholders with actual environment-specific values; CA data must be properly base64-encoded.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n  url: https://argocd.example.com\n  dex.config: |\n    connectors:\n    - type: saml\n      id: saml\n      name: saml\n      config:\n        ssoURL: https://sso-url (e.g. https://accounts.google.com/o/saml2/idp?idpid=Abcde0)\n        entityIssuer: https://argocd.example.com/api/dex/callback\n        caData: |\n          BASE64-ENCODED-CERTIFICATE-DATA\n        redirectURI: https://argocd.example.com/api/dex/callback\n        usernameAttr: name\n        emailAttr: email\n        # optional\n        ssoIssuer: https://google-entity-id (e.g. https://accounts.google.com/o/saml2?idpid=Abcde0)\n\n```\n\n----------------------------------------\n\nTITLE: Setting debug log level for ApplicationSet controller\nDESCRIPTION: YAML configuration for the argocd-cmd-params-cm ConfigMap to enable debug logging for the ApplicationSet controller to troubleshoot unexpected changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  applicationsetcontroller.log.level: debug\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription for Google Chat Notifications (YAML)\nDESCRIPTION: This snippet demonstrates how to create a subscription for Google Chat notifications based on application sync status. It uses the `notifications.argoproj.io/subscribe.on-sync-succeeded.googlechat` annotation to trigger a notification to the specified Google Chat space when an application syncs successfully.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/googlechat.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.googlechat: spaceName\n```\n\n----------------------------------------\n\nTITLE: Argo CD Admin Import Command\nDESCRIPTION: This command imports Argo CD data from a specified source, which can be either a file path or standard input (denoted by `-`).  It allows administrators to import resources like Applications, ApplicationSets, Projects, and Secrets into Argo CD. The import process can be customized using flags to control namespace access, conflict resolution, and resource filtering.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin import SOURCE [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring NewRelic Integration - Secret\nDESCRIPTION: This YAML snippet defines a Secret. It's intended to store the NewRelic API key securely, referenced by the ConfigMap.  The `stringData` section contains the `newrelic-apiKey` and its value, identified as `apiKey`. The `<secret-name>` needs to be replaced with the actual secret's name. This secret is then referenced in the ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/newrelic.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  newrelic-apiKey: apiKey\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocs Locally (Bash)\nDESCRIPTION: Use the pip package manager to install the core `mkdocs` tool directly onto your local system. This is the first step for setting up a local documentation build environment without using Docker. Requires Python and pip installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/docs-site.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npip install mkdocs\n```\n\n----------------------------------------\n\nTITLE: Assessing Resource Health with argocd admin (bash)\nDESCRIPTION: Executes the `argocd admin settings resource-overrides health` command to evaluate the health status of resources defined in the target file (`./deploy.yaml`). It utilizes custom health assessment Lua scripts configured in the `resource.customizations` field of the specified Argo CD ConfigMap file (`--argocd-cm-path ./argocd-cm.yaml`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Removing Signature Key - Command Syntax (argocd)\nDESCRIPTION: This snippet shows the basic syntax of the `argocd proj remove-signature-key` command. It takes the project name and the key ID as required arguments. This command is used to remove a GnuPG signature key from a specific project within Argo CD. The output is the removal action performed on the project's signature key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-signature-key.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj remove-signature-key PROJECT KEY-ID [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD in a Kubernetes Cluster\nDESCRIPTION: Shell commands to install Argo CD in the 'argocd' namespace using the official installation manifest.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml -n argocd\n```\n\n----------------------------------------\n\nTITLE: Deleting Project Example\nDESCRIPTION: This command deletes an existing Argo CD project. The `PROJECT` argument is mandatory, and it identifies the project to be deleted. Deleting a project removes it from Argo CD's configuration, and all associated resources will be affected.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  # Delete the project with name PROJECT\n  argocd proj delete PROJECT\n```\n\n----------------------------------------\n\nTITLE: Overview and Options for 'argocd admin notifications trigger' Command in Argo CD\nDESCRIPTION: This snippet describes the 'argocd admin notifications trigger' command, outlining its primary purpose as managing notification triggers in Argo CD. It includes the command syntax, help option, inherited global options, and specific flags for customization, enabling users to execute, configure, or query notification triggers effectively.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_trigger.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd admin notifications trigger [flags]\n\n# Options include:\n  -h, --help   help for trigger\n\n# Inherited global options and flags include:\n  --argocd-context string           The name of the Argo-CD server context to use\n  --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n  --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n  --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n  --as string                       Username to impersonate for the operation\n  --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n  --as-uid string                   UID to impersonate for the operation\n  --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n  --certificate-authority string    Path to a cert file for the certificate authority\n  --client-certificate string       Path to a client certificate file for TLS\n  --client-crt string               Client certificate file\n  --client-crt-key string           Client certificate key file\n  --client-key string               Path to a client key file for TLS\n  --cluster string                  The name of the kubeconfig cluster to use\n  --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n  --config-map string               argocd-notifications-cm.yaml file path\n  --context string                  The name of the kubeconfig context to use\n  --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n  --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n  --disable-compression             If true, opt-out of response compression for all requests to the server\n  --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n  --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings              Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n  --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n  --insecure                        Skip server certificate and domain verification\n  --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  --kube-context string             Directs the command to the given kube-context\n  --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  --logformat string                Set the logging format. One of: json|text (default \"json\")\n  --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string            If present, the namespace scope for this CLI request\n  --password string                 Password for basic authentication to the API server\n  --plaintext                       Disable TLS\n  --port-forward                    Connect to a random argocd-server port using port forwarding\n  --port-forward-namespace string   Namespace name which should be used for port forwarding\n  --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n  --proxy-url string                If provided, this URL will be used to connect via proxy\n  --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n  --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n  --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n  --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n  --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n  --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n  --server string                   The address and port of the Kubernetes API server\n  --server-crt string               Server certificate file\n  --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n  --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n  --token string                    Bearer token for authentication to the API server\n  --user string                     The name of the kubeconfig user to use\n  --username string                 Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ALB Service for Argo CD gRPC Traffic - YAML\nDESCRIPTION: This Kubernetes Service YAML defines a NodePort service to enable AWS Application Load Balancer (ALB) to route gRPC traffic for Argo CD. It includes an annotation specifying 'alb.ingress.kubernetes.io/backend-protocol-version: GRPC' to instruct AWS ALB to use GRPC protocol for backend communications. The service listens on port 443, targets port 8080, and selects pods labeled 'app.kubernetes.io/name: argocd-server'. This service is a prerequisite for routing gRPC traffic separately in AWS ALB ingress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    alb.ingress.kubernetes.io/backend-protocol-version: GRPC # This tells AWS to send traffic from the ALB using GRPC. Plain HTTP2 can be used, but the health checks wont be available because argo currently downgrade non-grpc calls to HTTP1\n  labels:\n    app: argogrpc\n  name: argogrpc\n  namespace: argocd\nspec:\n  ports:\n  - name: \"443\"\n    port: 443\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: argocd-server\n  sessionAffinity: None\n  type: NodePort\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options from Parent Commands in Argo CD CLI\nDESCRIPTION: List of global options inherited from parent commands that can be used with 'argocd proj windows add', including authentication, connection, and logging parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_add.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ArgoCD Commands\nDESCRIPTION: Options inherited from parent commands that can be used with the ArgoCD admin cluster stats command, including authentication settings, logging configurations, and connection parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_stats.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Repository Filtering Conditions for ApplicationSet\nDESCRIPTION: This YAML snippet defines filters to select repositories based on name patterns, directory existence, labels, and other criteria. These filters determine which repositories to process when generating applications, supporting complex boolean logic with multiple conditions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      filters:\n      # Include repositories starting with \"myapp\" AND containing a Kustomize config AND labeled with \"deploy-ok\" ...\n      - repositoryMatch: ^myapp\n        pathsExist: [kubernetes/kustomization.yaml]\n        labelMatch: deploy-ok\n      # OR include repositories starting with \"otherapp\" AND having a Helm folder and NOT containing \"disabledrepo.txt\".\n      - repositoryMatch: ^otherapp\n        pathsExist: [helm]\n        pathsDoNotExist: [disabledrepo.txt]\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Listing GPG keys in YAML format\nDESCRIPTION: This command lists all configured GPG public keys and outputs them in YAML format. The `-o yaml` option specifies the output format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg_list.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nargocd gpg list -o yaml\n```\n\n----------------------------------------\n\nTITLE: Executing argocd proj role Command\nDESCRIPTION: This snippet shows the basic structure of the `argocd proj role` command. It's used to manage roles associated with Argo CD projects. This command requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nargocd proj role [flags]\n```\n\n----------------------------------------\n\nTITLE: Overriding Application Parameters Using Argo CD CLI - Bash\nDESCRIPTION: These bash commands demonstrate the use of the Argo CD CLI to override application parameters by specifying key-value pairs, enabling ad-hoc customization of application manifests during deployment or updates. Dependencies include having Argo CD CLI installed and configured with appropriate access to your Argo CD instance. Parameters like 'image' and 'ingress.enabled' are set dynamically via '-p PARAM=VALUE', and a sync command is run to apply changes. This approach affects only the deployed application, not the Git repository. Key inputs are the application name and parameter assignments, while outputs are the updated application deployment state. Suitable for development or testing environments, not for production usage.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/parameters.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set guestbook -p image=example/guestbook:abcd123\nargocd app sync guestbook\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-metrics ServiceMonitor in YAML\nDESCRIPTION: This YAML snippet defines a ServiceMonitor for the argocd-metrics service, enabling Prometheus Operator to scrape metrics. The `metadata` section specifies the name and labels. The `spec` section defines the selector to match the service and endpoint details.  Requires Prometheus Operator installed and running in the cluster, and the `app.kubernetes.io/name` label must match the target service.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-metrics\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-metrics\n  endpoints:\n  - port: metrics\n```\n```\n\n----------------------------------------\n\nTITLE: Global Options Inherited by the enable-manual-sync Command in Argo CD\nDESCRIPTION: The global options inherited from parent commands that can be used with the enable-manual-sync command, including authentication, connection, and logging options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_enable-manual-sync.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Rocket.Chat Service in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML configures the Rocket.Chat notification service within the argocd-notifications-cm. It references the email and password stored in a Kubernetes Secret using environment variable-like syntax ($rocketchat-email, $rocketchat-password). This tells Argo CD how to authenticate with Rocket.Chat.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/rocketchat.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.rocketchat: |\n    email: $rocketchat-email\n    password: $rocketchat-password\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Port forwarding\nDESCRIPTION: Establishes port forwarding to connect to the Argo CD server in environments where direct access isn't available.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n```\n\n----------------------------------------\n\nTITLE: Define Sync Policy Termination Settings in Application CRD\nDESCRIPTION: This YAML snippet demonstrates the proposed extension to the `Application` CRD for Argo CD. It introduces the `syncPolicy.terminate` field, which allows users to define a global timeout for the sync operation and specify resources to monitor for specific health states. If a resource remains in the specified health status for longer than its defined timeout, the sync operation can be terminated.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/sync-timeout.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  ... # standard application spec\n\n  syncPolicy:\n    terminate:\n      timeout: 10m # timeout for the sync operation\n      resources:\n        - kind: Deployment\n          name: guestbook-ui\n          timeout: 5m # timeout for the resource\n          health: Progressing # health status of the resource\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for argocd cluster list\nDESCRIPTION: Displays the fundamental structure of the `argocd cluster list` command, indicating that optional flags can be appended to modify its behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster list [flags]\n```\n\n----------------------------------------\n\nTITLE: Accessing the argocd-application-controller Pod with kubectl (bash)\nDESCRIPTION: Executes a `kubectl exec` command to open an interactive bash shell session within the running `argocd-application-controller` pod in the `argocd` namespace. This is required for running subsequent `argocd admin cluster` commands for troubleshooting connectivity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -n argocd -it \\\n  $(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{.items[0].metadata.name}') bash\n```\n\n----------------------------------------\n\nTITLE: Examples of Using `argocd app manifests` (Bash)\nDESCRIPTION: Demonstrates various ways to use `argocd app manifests`. Examples include fetching manifests for a specific revision using `--revision`, and handling multi-source applications by specifying revisions and source names/positions using `--revisions`, `--source-names`, and `--source-positions`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_manifests.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Get manifests for an application\n  argocd app manifests my-app\n  \n  # Get manifests for an application at a specific revision\n  argocd app manifests my-app --revision 0.0.1\n  \n  # Get manifests for a multi-source application at specific revisions for specific sources\n  argocd app manifests my-app --revisions 0.0.1 --source-names src-base --revisions 0.0.2 --source-names src-values\n  \n  # Get manifests for a multi-source application at specific revisions for specific sources\n  argocd app manifests my-app --revisions 0.0.1 --source-positions 1 --revisions 0.0.2 --source-positions 2\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Banners in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML snippet demonstrates configuring UI notification banners in Argo CD via the `argocd-cm` ConfigMap. It sets the banner's text content using `ui.bannercontent`, provides an optional URL link with `ui.bannerurl`, makes the banner persistent across sessions by setting `ui.bannerpermanent` to `\"true\"`, and controls its position (e.g., `\"bottom\"`) using `ui.bannerposition`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom-styles.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n    ui.bannercontent: \"Banner message linked to a URL\"\n    ui.bannerurl: \"www.bannerlink.com\"\n    ui.bannerpermanent: \"true\"\n    ui.bannerposition: \"bottom\"\n```\n\n----------------------------------------\n\nTITLE: Options for `argocd proj list` Command\nDESCRIPTION: Lists the specific options available solely for the `argocd proj list` command. The `-h` or `--help` flag displays help information for the command. The `-o` or `--output` flag specifies the desired output format (options: json, yaml, wide, name), with 'wide' being the default.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_list.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for list\n  -o, --output string   Output format. One of: json|yaml|wide|name (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Options: Common Argo CD CLI Flags CLI\nDESCRIPTION: Details common flags inherited from parent commands in the Argo CD CLI hierarchy. These options configure connection settings, authentication methods, logging behavior, and other global parameters affecting how the CLI interacts with the Argo CD system.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the Argo CD Release Trigger Script\nDESCRIPTION: Provides a concrete example of how to execute the `hack/trigger-release.sh` script. This command triggers the release process for version `v2.7.2` using the git remote named `upstream`. Ensure the release branch is checked out and the prerequisites (CHANGELOG update, initial PR merge) are met before running.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/releasing.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./hack/trigger-release.sh v2.7.2 upstream\n```\n\n----------------------------------------\n\nTITLE: Namespace Isolation Command for Argo CD\nDESCRIPTION: This command enables namespace isolation by adding specific namespaces to an Argo CD managed cluster. It allows users to grant access only to selected namespaces, improving security and performance when full cluster permissions are not needed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster add <mycluster> --namespace <mynamespace1> --namespace <mynamespace2>\n```\n\n----------------------------------------\n\nTITLE: Defining ArgoCDExtension Resource for UI Extension Backend - YAML\nDESCRIPTION: This YAML snippet defines an ArgoCDExtension custom resource, specifying both the extension’s source (via Git) and a backend service with a designated endpoint. The configuration attaches a finalizer and details how the extension backend should be accessed, serving as the contract for extension lifecycle and backend connectivity. Required dependencies include Argo CD and its extension CRDs, and the snippet expects administrators to provide the appropriate Git repository and backend service details. Inputs: Extension name, Git repo URL, backend service name and endpoint. Outputs: Extension resource registered for use by Argo CD. Limitations: This does not implement networking or business logic and is not included in the earliest version of the reverse proxy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/proxy-extensions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCDExtension\nmetadata:\n  name: my-cool-extention\n  finalizers:\n    - extensions-finalizer.argocd.argoproj.io\nspec:\n  sources:\n    - git:\n        url: https://github.com/some-org/my-cool-extension.git\n  backend:\n    serviceName: some-backend-svc\n    endpoint: /some-backend\n\n```\n\n----------------------------------------\n\nTITLE: Removing Repository Credentials with Argo CD CLI - Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'argocd repo rm' command to remove repository credentials from Argo CD. It accepts the repository identifier as the main argument, with additional support for various flags such as --project to specify the project context. The command requires Argo CD CLI to be installed and authenticated prior to use, and may depend on configuration files or environmental variables for server/context/database access. Expected input is the repository URL or name; the command executes in-place and does not return explicit output unless an error occurs. Some arguments and flags may be required based on user environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_rm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo rm REPO [flags]\n```\n\n----------------------------------------\n\nTITLE: AppProject for Infra - YAML\nDESCRIPTION: Defines an AppProject named `infra-project` allowing applications to be deployed to any namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: infra-project\n  namespace: argocd\nspec:\n  destinations:\n    - namespace: '*'\n```\n\n----------------------------------------\n\nTITLE: Custom Action UI Appearance in Lua\nDESCRIPTION: This Lua snippet demonstrates how to customize the display name and icon of a custom action within the Argo CD UI. It sets the `iconClass` and `displayName` keys for the `create-workflow` action. The `iconClass` uses a FontAwesome icon class, and the `displayName` provides a user-friendly name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/resource_actions.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal actions = {}\nactions[\"create-workflow\"] = {\n  [\"iconClass\"] = \"fa fa-fw fa-play\",\n  [\"displayName\"] = \"Create Workflow\"\n}\nreturn actions\n```\n\n----------------------------------------\n\nTITLE: Listing Clusters in JSON Format (Shell)\nDESCRIPTION: Illustrates how to retrieve the list of configured clusters in JSON format using the `-o json` flag, optionally targeting a specific server with `--server`. Replace `<ARGOCD_SERVER_ADDRESS>` with the actual server address.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster list -o json --server <ARGOCD_SERVER_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Migrating Git Generator: Before Go Templates (YAML)\nDESCRIPTION: Example ApplicationSet manifest using the Git generator with default templating syntax (e.g., `{{path.basename}}`, `{{path}}`) before enabling Go Templates. This serves as the starting point for the migration example.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\nspec:\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path.basename}}'\n```\n\n----------------------------------------\n\nTITLE: Terminating Running Application Operation Using Argo CD CLI (bash)\nDESCRIPTION: This snippet demonstrates the usage of the 'argocd app terminate-op' command to terminate a currently running operation for a specified Argo CD application. The essential parameter is APPNAME, which specifies the target application. The snippet includes basic usage syntax and the '-h' or '--help' flag to display help information. The command interacts with the Argo CD API or Kubernetes directly based on inherited options and supports various flags to customize authentication, context, logging, and connection settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_terminate-op.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app terminate-op APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing all available flags and options for 'argocd app add-source'\nDESCRIPTION: Provides a detailed list of command-line options and flags available for configuring the source addition process, including repository settings, Helm options, Kustomize configurations, environment variables, and sync policies. These options enable fine-grained control over how sources are added and managed in an Argo CD application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_add-source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# All options and flags for 'argocd app add-source' command are listed here as part of the help documentation.\n```\n\n----------------------------------------\n\nTITLE: Adding a Kubernetes Cluster using Argo CD CLI\nDESCRIPTION: This snippet demonstrates how to add a Kubernetes cluster to Argo CD for management by running the `argocd cluster add` command with the specified context name. It requires privileged access to the cluster and helps in connecting Argo CD to the target cluster by installing necessary resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-management.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster add context-name\n```\n\n----------------------------------------\n\nTITLE: Disabling manual sync for default project with ID zero\nDESCRIPTION: Example showing how to disable manual sync for the default project with the default window ID 0, illustrating a typical use case directly affecting the main deployment project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_disable-manual-sync.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows disable-manual-sync default 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Opsgenie Notification Service and Template in YAML for Argo CD\nDESCRIPTION: Defines a Kubernetes ConfigMap containing the Opsgenie service configuration with API URLs and API keys, as well as a detailed notification template for Opsgenie alerts. The template uses Argo CD application metadata and status fields to generate alert messages, descriptions, priority levels, tags, and responder visibility. Includes actions and custom details fields. Required dependencies include Argo CD notifications controller and an Opsgenie API integration with appropriate permissions. Inputs are application state variables; output is a structured Opsgenie alert.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/opsgenie.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.opsgenie: |\n    apiUrl: <api-url>\n    apiKeys:\n      <your-team>: <integration-api-key>\n  template.opsgenie: |\n    message: |\n      [Argo CD] Application {{.app.metadata.name}} has a problem.\n    opsgenie:\n      description: |\n        Application: {{.app.metadata.name}}\n        Health Status: {{.app.status.health.status}}\n        Operation State Phase: {{.app.status.operationState.phase}}\n        Sync Status: {{.app.status.sync.status}}\n      priority: P1\n      alias: {{.app.metadata.name}}\n      note: Error from Argo CD!\n      actions:\n        - Restart\n        - AnExampleAction\n      tags:\n        - OverwriteQuietHours\n        - Critical\n      visibleTo:\n        - Id: \"{{.app.metadata.responderId}}\"\n          Type: \"team\"\n        - Name: \"rocket_team\"\n          Type: \"team\"\n        - Id: \"{{.app.metadata.responderUserId}}\"\n          Type: \"user\"\n        - Username: \"trinity@opsgenie.com\"\n          Type: \"user\"\n      details:\n        environment: production\n        service: web\n      entity: Argo CD Application\n      user: John Doe\n  trigger.on-a-problem: |\n    - description: Application has a problem.\n      send:\n      - opsgenie\n      when: app.status.health.status == 'Degraded' or app.status.operationState.phase in ['Error', 'Failed'] or app.status.sync.status == 'Unknown'\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for argocd appset get\nDESCRIPTION: The available options specific to the 'appset get' command, including help flag, output format selection, and parameter display options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_get.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n      --show-params     Show ApplicationSet parameters and overrides\n```\n\n----------------------------------------\n\nTITLE: Getting latest Argo CD CLI version for Mac\nDESCRIPTION: Command to get the latest version tag of Argo CD from GitHub API, useful for Mac installation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=$(curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n```\n\n----------------------------------------\n\nTITLE: Generating dex configuration with 'argocd-dex rundex' command\nDESCRIPTION: This snippet demonstrates how to run the 'argocd-dex rundex' command, which generates a dex configuration by utilizing settings from the Argo CD configmap and secret. It includes the command syntax and available flags to customize behavior such as impersonation, TLS options, logging, and API server connection details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-dex_rundex.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd-dex rundex [flags]\n\n```\n\n----------------------------------------\n\nTITLE: Simplified Renovate Configuration Using a Central Preset (JSON)\nDESCRIPTION: Illustrates a simplified `renovate.json` configuration file that references a single, centralized preset hosted in a potential dedicated repository (`argoproj/renovate-presets`). This approach centralizes rule management, requiring minimal changes to individual repository configurations. It includes the schema definition and an empty `packageRules` array.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/renovate-presets/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"github>argoproj/renovate-presets//argoproj/argo-cd/renovate.json5\"\n  ],\n  // rules are empty and this file won't need to be modified again.\n  \"packageRules\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Test Manifest Skipping in Argo CD via CLI\nDESCRIPTION: This snippet illustrates how to instruct Argo CD to skip installing Helm test manifests using the CLI command with the '--helm-skip-tests' flag. It helps prevent execution of Helm test hooks during deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set helm-guestbook --helm-skip-tests\n```\n\n----------------------------------------\n\nTITLE: Using allow-namespace-resource with Argo CD CLI (Bash)\nDESCRIPTION: This snippet demonstrates invoking the 'argocd proj allow-namespace-resource' command to add or remove a namespaced API resource from an allow or deny list in a specified Argo CD project. Dependencies include the Argo CD CLI installed and configured, as well as access to the relevant Argo CD server and Kubernetes cluster. The command requires parameters: PROJECT (the project name), GROUP (the API group), and KIND (the resource kind). The expected output is the adjustment of project access controls for specified resources; errors may occur if the project or resource definitions are incorrect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_allow-namespace-resource.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj allow-namespace-resource PROJECT GROUP KIND [flags]\n```\n\n----------------------------------------\n\nTITLE: Get Role Info - Argo CD CLI\nDESCRIPTION: Retrieves information about a specific role within a project using the Argo CD CLI. This includes the role name, description, policies, and JWT tokens. Requires the project name and role name as arguments. This command is used to verify the token's details, including the 'ISSUED-AT' timestamp needed for the delete-token command. The CLI must be properly configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete-token.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n$ argocd proj role get test-project test-role\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Resources Warning in Argo CD (YAML)\nDESCRIPTION: This YAML snippet shows how to disable the warning feature for orphaned resources. This configuration disables the warning messages in the Argo CD UI, but users can still view orphaned resources in the UI.  This configuration uses the `AppProject` custom resource. Setting `warn: false` ensures that no warnings are triggered for detected orphaned resources, allowing users to view them without warnings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/orphaned-resources.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\nspec:\n  orphanedResources:\n    warn: false # Disable warning\n```\n```\n\n----------------------------------------\n\nTITLE: ArgoCD App Unset Usage Examples\nDESCRIPTION: Examples showing different ways to use the 'argocd app unset' command, including unsetting kustomize overrides, namesuffix for different sources, and parameter overrides.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_unset.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Unset kustomize override kustomize image\nargocd app unset my-app --kustomize-image=alpine\n\n# Unset kustomize override suffix\nargocd app unset my-app --namesuffix\n\n# Unset kustomize override suffix for source at position 1 under spec.sources of app my-app. source-position starts at 1.\nargocd app unset my-app --source-position 1 --namesuffix\n\n# Unset kustomize override suffix for source named \"test\" under spec.sources of app my-app.\nargocd app unset my-app --source-name test --namesuffix\n\n# Unset parameter override\nargocd app unset my-app -p COMPONENT=PARAM\n```\n\n----------------------------------------\n\nTITLE: Application example allowed by sourceNamespaces in YAML\nDESCRIPTION: This YAML snippet shows an example Application resource that is allowed to associate with the AppProject defined above because it resides in the 'bar-ns' namespace, which is listed in the AppProject's `sourceNamespaces`. It demonstrates a valid association between an Application and an AppProject.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: bar-ns\nspec:\n  project: some-project\n```\n\n----------------------------------------\n\nTITLE: Sample NetworkPolicy for Redis HA and Haproxy Component (TCP ports 6379, 26379) and DNS (UDP/TCP 53)\nDESCRIPTION: This snippet configures a NetworkPolicy for the 'argocd-redis-ha-haproxy' that allows egress access to Redis and HAProxy management ports (6379 and 26379) and DNS ports (53 UDP/TCP). It restricts outgoing traffic to specific ports and pods with label 'app.kubernetes.io/name: argocd-redis-ha', maintaining necessary network restrictions for Redis high-availability setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.10-2.11.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n  - Egress\n  egress:\n  - ports:\n    - port: 6379\n      protocol: TCP\n    - port: 26379\n      protocol: TCP\n    to:\n    - podSelector:\n        matchLabels:\n          app.kubernetes.io/name: argocd-redis-ha\n  - ports:\n    - port: 53\n      protocol: UDP\n    - port: 53\n      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Connector in Argo CD with Dex\nDESCRIPTION: This YAML snippet configures the OIDC connector in Argo CD using Dex. It defines the issuer URL, client ID, and client secret for the OIDC provider. Replace placeholders for `issuer`, `clientID` and `clientSecret` with your actual values. This configuration is part of the `dex.config` in the `argocd-cm` ConfigMap. The secret can be referenced from a Kubernetes secret using the `$dex.oidc.clientSecret` syntax.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  url: \"https://argocd.example.com\"\n  dex.config: |\n    connectors:\n      # OIDC\n      - type: oidc\n        id: oidc\n        name: OIDC\n        config:\n          issuer: https://example-OIDC-provider.example.com\n          clientID: aaaabbbbccccddddeee\n          clientSecret: $dex.oidc.clientSecret\n```\n\n----------------------------------------\n\nTITLE: Granting sts:AssumeRole Permission in AWS IAM Policy - JSON\nDESCRIPTION: Defines an IAM permission policy that allows the Argo CD management role to assume the IAM cluster role for each EKS cluster added to Argo CD. This snippet must be attached to the Argo CD management IAM role and requires appropriate values for AWS account and role names. When properly configured, it enables Argo CD to assume per-cluster roles and manage permissions accordingly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\" : \"2012-10-17\",\n    \"Statement\" : {\n      \"Effect\" : \"Allow\",\n      \"Action\" : \"sts:AssumeRole\",\n      \"Resource\" : [\n        \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_CLUSTER_ROLE>\"\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Repo-Server Memory Limit for Directory Apps in Argo CD (YAML)\nDESCRIPTION: Shows how to set the `reposerver.max.combined.directory.manifests.size` parameter within the `argocd-cmd-params-cm` ConfigMap. This limits the combined size of JSON/YAML manifests for individual directory-type applications, preventing excessive memory consumption in the repo-server. This specific example sets the limit to 3MB per application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/security.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  reposerver.max.combined.directory.manifests.size: '3M'\n```\n\n----------------------------------------\n\nTITLE: Using Multiple List Generators in ApplicationSet YAML\nDESCRIPTION: This YAML snippet illustrates how an ApplicationSet specification can include an array containing multiple generators, in this case, multiple 'list' generators. This allows combining different sets of explicit parameters or sources within a single ApplicationSet resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  generators:\n  - list: \n    # (...)\n  - list:\n    # (...)\n  - list:\n    # (...)   \n```\n\n----------------------------------------\n\nTITLE: Using Value Interpolation in Merge Generator (YAML)\nDESCRIPTION: This YAML defines an Argo CD `ApplicationSet` demonstrating the use of value interpolation within a `merge` generator. It combines parameters from a `clusters` generator and a `git` generator. The `mergeKeys` field uses `values.selector`, which is dynamically populated in each child generator using Go template interpolation (`{{index .metadata.labels \"location\"}}` for clusters and `{{.path.path}}` for git directories). This allows merging based on matching cluster location labels and Git directory names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # merge 'parent' generator:\n    # Use the selector set by both child generators to combine them.\n    - merge:\n        mergeKeys:\n          # Note that this would not work with goTemplate enabled,\n          # nested merge keys are not supported there.\n          - values.selector\n        generators:\n          # Assuming, all configured clusters have a label for their location:\n          # Set the selector to this location.\n          - clusters:\n              values:\n                selector: '{{index .metadata.labels \"location\"}}'\n          # The git repo may have different directories which correspond to the\n          # cluster locations, using these as a selector.\n          - git:\n              repoURL: https://github.com/argoproj/argocd-example-apps/\n              revision: HEAD\n              directories:\n              - path: '*'\n              values:\n                selector: '{{.path.path}}'\n  template:\n    metadata:\n      name: '{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        # The cluster values field for each generator will be substituted here:\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: '{{.server}}'\n        namespace: default\n```\n\n----------------------------------------\n\nTITLE: Creating Project Example\nDESCRIPTION: This command creates a new Argo CD project. The `PROJECT` argument is mandatory and specifies the name of the new project. The project will be created with default settings unless further configuration changes are made via other commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Create a new project with name PROJECT\n  argocd proj create PROJECT\n```\n\n----------------------------------------\n\nTITLE: Example YAML for dynamic element generation\nDESCRIPTION: This YAML snippet represents an example `list-elementsYaml-example.yaml` file.  It contains a list of component definitions, including their names, charts, versions, release names, repository URLs, and namespaces. It is used by the matrix generator and list generator to dynamically create applications. This file must be present in the Git repository specified in the matrix generator's configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-List.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkey:\n  components:\n    - name: component1\n      chart: podinfo\n      version: \"6.3.2\"\n      releaseName: component1\n      repoUrl: \"https://stefanprodan.github.io/podinfo\"\n      namespace: component1\n    - name: component2\n      chart: podinfo\n      version: \"6.3.3\"\n      releaseName: component2\n      repoUrl: \"ghcr.io/stefanprodan/charts\"\n      namespace: component2\n```\n\n----------------------------------------\n\nTITLE: AppProject for Team One - YAML\nDESCRIPTION: Defines an AppProject named `team-one-project` which restricts applications to be sourced from the `team-one-cd` namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: team-one-project\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - team-one-cd\n```\n\n----------------------------------------\n\nTITLE: Argo CD ConfigMap for SQS Service (Env)\nDESCRIPTION: This YAML snippet configures the Argo CD ConfigMap for the SQS service, using environment variables for authentication. It defines the queue name. It also specifies the message template and trigger for the notification. The ConfigMap defines the `service.awssqs` service definition, `template.deployment-ready` template, and `trigger.on-deployment-ready` trigger.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.awssqs: |\n    queue: \"myqueue\"\n\n  template.deployment-ready: |\n    message: |\n      Deployment {{.obj.metadata.name}} is ready!\n\n  trigger.on-deployment-ready: |\n    - when: any(obj.status.conditions, {.type == 'Available' && .status == 'True'})\n      send: [deployment-ready]\n    - oncePer: obj.metadata.annotations[\"generation\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Help Option for Group Claim Addition (Shell)\nDESCRIPTION: This snippet shows how to display help information for the 'argocd proj role add-group' command. It requires the 'argocd' CLI tool and provides details on usage, required arguments, and available flags. Inputs are optional and limited to the '--help' or '-h' parameter, with the output consisting of help text displayed in the terminal. This approach is limited to information retrieval and does not impact actual configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-group.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role add-group --help\n```\n\n----------------------------------------\n\nTITLE: Listing Command-Line Options for 'argocd proj add-signature-key' - Shell\nDESCRIPTION: Lists the available options and flags for the 'argocd proj add-signature-key' command. These flags provide additional control over authentication, endpoints, logging, and behavior of the CLI tool. Users should review these flags to customize the execution context (e.g., selecting a specific server, using TLS settings, customizing authentication, or choosing a kube-context). Some flags require additional environment configuration or prerequisite files, as indicated in the documentation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-signature-key.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for add-signature-key\n```\n\nLANGUAGE: shell\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Note on In-Cluster Management Disabling\nDESCRIPTION: This note explains that the `in-cluster` cluster cannot be removed via CLI commands. To disable in-cluster configuration, update the `argocd-cm` ConfigMap by setting `cluster.inClusterEnabled` to \"false\", requiring manual configuration change.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-management.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Using Facts Field in Teams Templates\nDESCRIPTION: This YAML snippet shows an alternative way to structure information in the Teams notification using the `facts` field, containing key-value pairs. This snippet provides an alternative to the `sections` field used in the primary template example. Dependencies involve a Teams notification setup and context from the Argo CD application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  teams:\n    facts: |\n      [{\n        \"name\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\"\n      },\n      {\n        \"name\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\"\n      }]\n```\n\n----------------------------------------\n\nTITLE: Kustomization File for Patching Argo CD Install with Istio Support - YAML\nDESCRIPTION: This YAML defines a Kustomize configuration that uses the downloaded 'install.yaml' as a base resource and applies an overlay patch named 'patch.yml'. This setup is used to customize the Argo CD deployment for running behind Istio with a subpath configuration. Kustomize manages the resource and patch application to facilitate easier customization and rollout.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- ./install.yaml\n\npatches:\n- path: ./patch.yml\n```\n\n----------------------------------------\n\nTITLE: `argocd account` Command Options (Bash)\nDESCRIPTION: Lists the command-line options specifically available for the `argocd account` command and its subcommands. These flags allow customization such as user impersonation (`--as`, `--as-group`), specifying Kubernetes cluster/context, configuring TLS/SSL settings (`--certificate-authority`, `--insecure-skip-tls-verify`), providing authentication credentials (`--password`, `--token`), and setting network parameters like proxy URLs and request timeouts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for account\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Example: Creating an Argo CD Project (bash)\nDESCRIPTION: This example demonstrates the simplest way to create a new Argo CD project using the command line. It only requires specifying the desired project name as an argument.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_create.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj create PROJECT\n```\n\n----------------------------------------\n\nTITLE: Checking ConfigMap Repositories\nDESCRIPTION: This shell command retrieves data from the argocd-cm ConfigMap, specifically looking for configured repositories, `repository.credentials`, and `helm.repositories`. This command is used to check if any repositories are configured within the argocd-cm ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get cm argocd-cm -o=jsonpath=\"[{.data.repositories}, {.data['repository.credentials']}, {.data['helm.repositories']}]\"\n```\n\n----------------------------------------\n\nTITLE: Querying Account Information with Argo CD CLI - shell\nDESCRIPTION: This CLI command retrieves Argo CD account details for either the currently authenticated user or a specific account by name using the `--account` flag. Dependencies include an installed and configured `argocd` CLI with valid connection details to an operational Argo CD instance. Key parameters are `--account` (the account name), `--output` (format), and authentication tokens if required; outputs can be presented in formats like json, yaml, wide, or name. Inputs are optional flags and account name, and outputs are the account data printed to standard output. The command assumes configured network and security settings such as certificates if connecting to a secured server. Limitations: the user must have sufficient permission to query account data, and some output fields may depend on role permissions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_get.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd account get [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Get the currently logged in account details\nargocd account get\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Get details for an account by name\nargocd account get --account <account-name>\n```\n\n----------------------------------------\n\nTITLE: Setting logs RBAC in ConfigMap\nDESCRIPTION: This YAML snippet demonstrates the configuration of the `server.rbac.log.enforce.enable` setting in the Argo CD ConfigMap to enable logs RBAC enforcement.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver.rbac.log.enforce.enable: 'true'\n```\n\n----------------------------------------\n\nTITLE: Removing Cluster Credentials argocd CLI\nDESCRIPTION: This snippet demonstrates the basic usage of the `argocd cluster rm` command. It removes cluster credentials, taking either the server address or a cluster name as input. It removes cluster credentials using the specified server address or cluster name from the Argo CD configuration.  No specific dependencies are required beyond a properly installed Argo CD CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_rm.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nargocd cluster rm SERVER/NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Health Check for a Child Resource in Argo CD Application - YAML\nDESCRIPTION: This YAML snippet shows how to ignore a child resource's health check in an Argo CD Application by adding the argocd.argoproj.io/ignore-healthcheck: \"true\" annotation to the resource's metadata. This prevents the child's health state from affecting the parent application's health assessment. It is compatible with any resource supporting annotations and is most commonly used on Deployment or similar objects.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    argocd.argoproj.io/ignore-healthcheck: \"true\"\n```\n\n----------------------------------------\n\nTITLE: argocd appset generate Command Syntax - Shell\nDESCRIPTION: This snippet shows the base command syntax for 'argocd appset generate'. It is used to invoke the generation process for ApplicationSet templates, optionally providing various flags for modification. The user must supply the relevant YAML file(s) or URL(s) to ApplicationSet specifications as arguments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_generate.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd appset generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Argo CD Notification Template for Alertmanager\nDESCRIPTION: This snippet shows how to define a template for Argo CD notifications, specifically for sending alerts to Alertmanager. It includes settings for labels and annotations, which can be used for routing and displaying information in Alertmanager.  The template leverages context variables and repo metadata.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncontext: |\n  argocdUrl: https://example.com/argocd\n\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has been healthy.\n  alertmanager:\n    labels:\n      fault_priority: \"P5\"\n      event_bucket: \"deploy\"\n      event_status: \"succeed\"\n      recipient: \"{{.recipient}}\"\n    annotations:\n      application: '<a href=\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\">{{.app.metadata.name}}</a>'\n      author: \"{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"\n      message: \"{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}\"\n```\n\n----------------------------------------\n\nTITLE: Example Hydrator Metadata File Content\nDESCRIPTION: Illustrates the JSON structure and content of the `hydrator.metadata` file, which stores key information about the hydration process. This data is available for the README template and can be used by external systems for tasks like generating contextual information or facilitating PR-based promotion systems.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commands\": [\"kustomize edit set image my-app:v0.0.2\", \"kustomize build .\"],\n  \"drySHA\": \"ab2382f\",\n  \"commitAuthor\": \"Michael Crenshaw <michael@example.com>\",\n  \"commitMessage\": \"chore: bump Helm dependency chart to 32.1.12\",\n  \"repoURL\": \"https://github.com/argoproj/argocd-example-apps\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Argo CD CLI on Windows with PowerShell\nDESCRIPTION: PowerShell commands to download the Argo CD CLI executable for Windows using Invoke-WebRequest.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$url = \"https://github.com/argoproj/argo-cd/releases/download/\" + $version + \"/argocd-windows-amd64.exe\"\n$output = \"argocd.exe\"\n\nInvoke-WebRequest -Uri $url -OutFile $output\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace and Service Account for Application Deployment\nDESCRIPTION: Shell commands to create a namespace called 'guestbook' and a service account called 'guestbook-deployer' for application deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace guestbook\nkubectl create serviceaccount guestbook-deployer\n```\n\n----------------------------------------\n\nTITLE: See Also - Related Commands\nDESCRIPTION: Provides reference to related documentation, specifically the 'argocd app' command for application management, indicating broader context for application resource management within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_resources.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* [argocd app](argocd_app.md) - Manage applications\n```\n\n----------------------------------------\n\nTITLE: Sample File Structure and JSON Content for Argo CD Git Generators\nDESCRIPTION: This snippet provides an example file directory layout and sample JSON content that the two Git generators reference. The 'apps' directory contains JSON files defining applications with an 'appName' attribute, and the 'targets' directory contains nested directories per app with JSON files indicating deployment regions and cluster names. This structured file system is necessary for the Git generators to retrieve parameter data to be combined via the matrix generator. It exemplifies expected organization and content format for proper functioning of the ApplicationSet generators configured in the previous snippet.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n├── apps\n│   ├── app-one.json\n│   │   { \"appName\": \"app-one\" }\n│   └── app-two.json\n│       { \"appName\": \"app-two\" }\n└── targets\n    ├── app-one\n    │   ├── east-cluster-one.json\n    │   │   { \"region\": \"east\", \"clusterName\": \"cluster-one\" }\n    │   └── east-cluster-two.json\n    │       { \"region\": \"east\", \"clusterName\": \"cluster-two\" }\n    └── app-two\n        ├── east-cluster-one.json\n        │   { \"region\": \"east\", \"clusterName\": \"cluster-one\" }\n        └── west-cluster-three.json\n            { \"region\": \"west\", \"clusterName\": \"cluster-three\" }\n```\n\n----------------------------------------\n\nTITLE: Application CR Without Persisted Health - YAML - yaml\nDESCRIPTION: Provides an example YAML status section for an Application CR where resource health is not persisted directly, after Argo CD 3.0 migration. The `resourceHealthSource: appTree` indicates health is managed externally. This demonstrates the result of the new default configuration, helpful for identifying the migration's impact.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  health:\n    status: Healthy\n    lastTransitionTime: \"2025-01-01T00:00:00Z\"\n  resourceHealthSource: appTree\n  resources:\n    - group: apps\n      kind: Deployment\n      name: my-app\n      namespace: foo\n      status: OutOfSync\n      version: v1\n  sync:\n    status: OutOfSync\n\n```\n\n----------------------------------------\n\nTITLE: Querying Health Persistence Setting in Argo CD - Shell - sh\nDESCRIPTION: Shows a kubectl command that checks the `controller.resource.health.persist` setting in the `argocd-cmd-params-cm` ConfigMap to determine if health status is persisted inside the Application custom resource. This command is used to identify post-upgrade status behavior and requires `kubectl` access with permission to read config maps in the `argocd` namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get cm argocd-cmd-params-cm -n argocd -o jsonpath='{.data.controller\\.resource\\.health\\.persist}'\n```\n\n----------------------------------------\n\nTITLE: Creating AKS Cluster Secret Using ArgoCD-k8s-auth with Azure Service Principal Flow in YAML\nDESCRIPTION: This snippet shows a Kubernetes Secret manifest example for configuring Argo CD with an AKS cluster using argocd-k8s-auth with the Azure service principal name (spn) authentication flow. The execProviderConfig contains environment variables for tenant ID, service principal client ID and secret, Azure environment, and login method (spn). This configuration allows Argo CD to authenticate with AKS using service principal credentials securely. TLS client configuration contains the base64-encoded certificate to verify the API server's identity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster.example.com\n  server: https://mycluster.example.com\n  config: |\n    {\n      \"execProviderConfig\": {\n        \"command\": \"argocd-k8s-auth\",\n        \"env\": {\n          \"AAD_ENVIRONMENT_NAME\": \"AzurePublicCloud\",\n          \"AAD_SERVICE_PRINCIPAL_CLIENT_SECRET\": \"fill in your service principal client secret\",\n          \"AZURE_TENANT_ID\": \"fill in tenant id\",\n          \"AAD_SERVICE_PRINCIPAL_CLIENT_ID\": \"fill in your service principal client id\",\n          \"AAD_LOGIN_METHOD\": \"spn\"\n        },\n        \"args\": [\"azure\"],\n        \"apiVersion\": \"client.authentication.k8s.io/v1beta1\"\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Workqueue Rate Limiter Bucket in Argo CD (Go)\nDESCRIPTION: This snippet configures the Workqueue Rate Limiter Bucket's QPS (Queries Per Second) and bucket size. The `--wq-bucket-qps` flag sets the maximum queries per second, defaulting to a very high value that effectively disables the limiter. The `--wq-bucket-size` flag sets the maximum size of the bucket, controlling the bursts of requests. Requires the installation and proper set up of the Argo CD system.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-application-controller.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n      --wq-bucket-qps float                                       Set Workqueue Rate Limiter Bucket QPS, default set to MaxFloat64 which disables the bucket limiter (default 1.7976931348623157e+308)\n      --wq-bucket-size int                                        Set Workqueue Rate Limiter Bucket Size, default 500 (default 500)\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for ApplicationSet Creation - CSV\nDESCRIPTION: This policy restricts a user group to create ApplicationSets that can only create Applications within a specific project. It prevents the ApplicationSet from creating Applications in other projects, enforcing project-level restrictions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_8\n\nLANGUAGE: csv\nCODE:\n```\np, dev-group, applicationsets, *, dev-project/*, allow\n```\n\n----------------------------------------\n\nTITLE: Creating a Sync Succeeded Teams Template\nDESCRIPTION: This YAML snippet creates a template for successful sync events.  The template defines the theme color, sections with facts, potential actions, a title, a text description, and a summary to be displayed within the Teams message.  It leverages data from the application and context information, providing detailed sync results and links.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  teams:\n    themeColor: \"#000080\"\n    sections: |\n      [{\n        \"facts\": [\n          {\n            \"name\": \"Sync Status\",\n            \"value\": \"{{.app.status.sync.status}}\"\n          },\n          {\n            \"name\": \"Repository\",\n            \"value\": \"{{.app.spec.source.repoURL}}\"\n          }\n        ]\n      }]\n    potentialAction: |-\n      [{\n        \"@type\":\"OpenUri\",\n        \"name\":\"Operation Details\",\n        \"targets\":[{\n          \"os\":\"default\",\n          \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n        }]\n      }]\n    title: Application {{.app.metadata.name}} has been successfully synced\n    text: Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n    summary: \"{{.app.metadata.name}} sync succeeded\"\n```\n\n----------------------------------------\n\nTITLE: Options for Removing Certificates with Argo CD CLI (bash)\nDESCRIPTION: This snippet lists command-line flags specific to the 'argocd cert rm' command allowing users to specify certificate types and sub-types for removal. The --cert-type flag limits removal to SSH or HTTPS certificates, while --cert-sub-type further filters SSH certificates based on sub-type. The snippet also includes help (-h) as a standard option. These options enable fine-grained control during certificate cleanup operations for Argo CD repository servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_rm.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --cert-sub-type string   Only remove certs of given sub-type (only for ssh)\n      --cert-type string       Only remove certs of given type (ssh, https)\n  -h, --help                   help for rm\n```\n\n----------------------------------------\n\nTITLE: Starting Argo CD services using Docker toolchain\nDESCRIPTION: Starts all Argo CD services in a Docker container using the virtualized toolchain, exposing API server, UI server, and Helm registry ports.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake start\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex to Use UserInfo Endpoint for Claims in YAML\nDESCRIPTION: This YAML snippet demonstrates configuring the Dex connector in `argocd-cm`'s `dex.config` key to fetch claims from the OIDC provider's UserInfo endpoint. This is useful when claims like 'groups' are not included in the ID token. It involves setting both `insecureEnableGroups` and `getUserInfo` to `true` within the OIDC connector configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  url: \"https://argocd.example.com\"\n  dex.config: |\n    connectors:\n      # OIDC\n      - type: oidc\n        id: oidc\n        name: OIDC\n        config:\n          issuer: https://example-OIDC-provider.example.com\n          clientID: aaaabbbbccccddddeee\n          clientSecret: $dex.oidc.clientSecret\n          insecureEnableGroups: true\n          scopes:\n          - profile\n          - email\n          - groups\n          getUserInfo: true\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster (Bash)\nDESCRIPTION: This command creates a new Kubernetes cluster named `argocd-cluster` using Kind. It requires Kind to be installed on the system. The command uses the `kind create cluster` command with the `--name` flag to specify the cluster name. The output is the creation of the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/try_argo_cd_locally.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --name argocd-cluster\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with Custom Release Name - Helm Bash\nDESCRIPTION: Installs the Minio Helm chart and assigns a custom release name for identification in the cluster. Prerequisites are the same as the default install. Passes the --name flag to set the release identifier. Outputs a uniquely named Helm release.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release stable/minio\n```\n\n----------------------------------------\n\nTITLE: Kustomization with Git Tag Ref (YAML)\nDESCRIPTION: This YAML snippet presents a kustomization file using a remote base referencing a specific Git tag (v0.11.1) of the Argo CD repository. This is the recommended approach because it ensures manifest immutability. By using a specific tag or commit SHA, the application's definition remains consistent over time. No dependencies beyond standard Kubernetes and Kustomize.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/best_practices.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbases:\n- github.com/argoproj/argo-cd//manifests/cluster-install?ref=v0.11.1\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Initial Password Command in Argo CD\nDESCRIPTION: This command ensures that a Redis password exists and creates a new one if one doesn't exist. It provides flags for authentication, impersonation, TLS configuration, and namespace specification. It inherits options from parent commands, including authentication tokens, server details, and configuration paths.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_redis-initial-password.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin redis-initial-password [flags]\n```\n\n----------------------------------------\n\nTITLE: Options Specific to `argocd-server version` (Text)\nDESCRIPTION: Lists the command-line options specifically available for the `argocd-server version` command. The `--help` flag displays usage information, and the `--short` flag prints only the version number.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-server_version.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help    help for version\n      --short   print just the version number\n```\n\n----------------------------------------\n\nTITLE: Running Isolated Go E2E Tests by Name - Shell\nDESCRIPTION: This snippet illustrates how to run a specific Go test (e.g., 'MyTestName') against the e2e test suite via the test harness wrapper. The command runs go test with a -run filter for the test name and outputs verbose results. Useful for debugging or selective test execution, and requires both the wrapper script and a working Go toolchain.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n./test/remote/run-e2e-remote.sh go test -v github.com/argoproj/argo-cd/test/e2e -run ^MyTestName$^\n\n```\n\n----------------------------------------\n\nTITLE: Logging into Argo CD CLI\nDESCRIPTION: This command logs into the Argo CD CLI using the admin username and the password obtained from the secret.  It requires that the Argo CD server is running and accessible on localhost:8080.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndist/argocd login localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Example: Get on-sync-failed Trigger - Argo CD CLI\nDESCRIPTION: This example shows how to retrieve the definition of the `on-sync-failed` trigger in YAML format using the `argocd admin notifications trigger get` command with the `-o` or `--output` flag. The command specifies the trigger name and desired output format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_trigger_get.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nargocd admin notifications trigger get on-sync-failed -o=yaml\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options in Argo CD CLI (Shell)\nDESCRIPTION: This snippet lists the CLI flags inherited from parent commands when running 'argocd proj role add-group'. These options allow customization of client-server context, authentication, TLS, logging, and interaction with Kubernetes clusters. Prerequisites include proper CLI installation and a configured operating environment. Inputs are provided as flags alongside the main command; outputs influence connection handling, security, and request metadata. Constraints include compatibility with Argo CD server and cluster configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-group.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--argocd-context string\n--auth-token string\n--client-crt string\n--client-crt-key string\n--config string\n--controller-name string\n--core\n--grpc-web\n--grpc-web-root-path string\n-H, --header strings\n--http-retry-max int\n--insecure\n--kube-context string\n--logformat string\n--loglevel string\n--plaintext\n--port-forward\n--port-forward-namespace string\n--prompts-enabled\n--redis-compress string\n--redis-haproxy-name string\n--redis-name string\n--repo-server-name string\n--server string\n--server-crt string\n--server-name string\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Command Parameters ConfigMap YAML\nDESCRIPTION: This YAML snippet exemplifies the structure of the argocd-cmd-params-cm.yaml file, which configures command parameters for the Argo CD operator through a Kubernetes ConfigMap. It requires Kubernetes cluster context and assumes Argo CD operator installation. The snippet's primary input is the YAML structure specifying the command parameter keys and values. The output is a ConfigMap object recognized by Argo CD that adjusts command-line argument defaults or behavior accordingly. Limitations include adherence to Argo CD supported parameters and proper YAML formatting.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{!docs/operator-manual/argocd-cmd-params-cm.yaml!}\n```\n\n----------------------------------------\n\nTITLE: Init Container Copying argocd-cmp-server Binary for Plugin Sidecars - YAML Manifest - bash\nDESCRIPTION: This snippet shows a Kubernetes init container definition that copies the argocd-cmp-server binary into a shared volume so that plugin sidecars can use it as their entrypoint. Dependencies include access to the argocd binary in the source image and an init container running before plugin start. Key parameters: path mappings, image references, and volume mounts. Input is the argocd binary; output is the presence of argocd-cmp-server in the shared volume. Volumes configuration ensures that plugins and repo-server share the same file system context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# An init container will copy the argocd static binary into the shared volume\n# so that the CMP server can become the entrypoint\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /var/run/argocd/argocd-cmp-server\n  image: quay.io/argoproj/argocd:latest\n  name: copyutil\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n \n# var-files is a shared volume between repo-server and cmp-server which holds:\n# 1) socket files that repo-server uses to communicate to each plugin\n# 2) git repositories cloned by repo-server\nvolumes:\n- emptyDir: {}\n  name: var-files\n```\n\n----------------------------------------\n\nTITLE: Filtering Applications with matchExpressions in List Generator\nDESCRIPTION: Utilizes matchExpressions for more flexible filtering, specifically filtering applications where the 'env' key has values included in the list (e.g., 'staging'). It provides advanced selector capabilities beyond matchLabels.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Post-Selector.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchExpressions:\n        - key: env\n          operator: In\n          values:\n            - staging\n```\n\n----------------------------------------\n\nTITLE: Deleting Argo CD Context\nDESCRIPTION: This command deletes the specified Argo CD context. It takes the context name as an argument and the `--delete` flag. It removes the specified context from the configuration, effectively removing its configuration. Requires a valid Argo CD context name as input.  This action is irreversible, so careful consideration should be given before deletion.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_context.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd context cd.argoproj.io --delete\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD Application with sourceHydrator (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define an Argo CD Application resource utilizing the new 'spec.sourceHydrator' field. The configuration specifies mutually exclusive source fields for dry source, sync destination, and an optional hydrateTo staging branch. Key parameters include 'repoURL', 'targetRevision', and 'path' for both dry and sync sources. The hydrateTo branch is optional and allows for staged commits. No external files are required beyond the Application CR and referenced repositories. Expected input is an Application CR YAML; output is correct sync and hydration behavior in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: example\nspec:\n  # The sourceHydrator field is mutually-exclusive with `source` and with `sources`. If this field is configured, we \n  # should either throw an error or ignore the other two.\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      # This assumes the Application's environments are modeled as directories.\n      path: environments/e2e\n    syncSource:\n      targetBranch: environments/e2e\n      path: .\n    # The hydrateTo field is optional. If specified, Argo CD will write hydrated manifests to this branch instead of the\n    # syncSource.targetBranch. This allows the user to \"stage\" a hydrated commit before actually deploying the changes\n    # by merging them into the syncSource branch. A complete change promotion system can be built around this feature. \n    hydrateTo:\n      targetBranch: environments/e2e-next\n      # The path is assumed to be the same as that in syncSource.\n```\n\n----------------------------------------\n\nTITLE: Example: Remove Namespace from Project\nDESCRIPTION: This is an example of how to use the `argocd proj remove-source-namespace` command. It demonstrates removing a source namespace in the named PROJECT. The exact PROJECT and NAMESPACE values would need to be substituted for this to function.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-source-namespace.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  # Remove source NAMESPACE in PROJECT\n  argocd proj remove-source-namespace PROJECT NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Get repository configuration syntax (CLI)\nDESCRIPTION: Displays the basic command syntax for retrieving details of a configured repository using the Argo CD CLI. It requires specifying the repository URL implicitly (by context or argument, though the URL argument is not explicitly shown in this generic syntax) and accepts various flags to modify behavior or output.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_get.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd repo get [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Cluster Secret Metadata and Data Fields in YAML\nDESCRIPTION: This YAML snippet defines the structure of an Argo CD cluster Secret resource, including metadata labels and data fields such as the cluster name and API server URL. Data fields are base64 encoded in Kubernetes but are shown decoded here for clarity. The secret includes identifying labels like 'argocd.argoproj.io/secret-type: cluster' to mark it as a cluster resource. These fields are used by Argo CD's Cluster generator to extract parameters for application deployments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Secret\ndata:\n  # Within Kubernetes these fields are actually encoded in Base64; they are decoded here for convenience.\n  # (They are likewise decoded when passed as parameters by the Cluster generator)\n  config: \"{'tlsClientConfig':{'insecure':false}}\"\n  name: \"in-cluster2\"\n  server: \"https://kubernetes.default.svc\"\nmetadata:\n  labels:\n    argocd.argoproj.io/secret-type: cluster\n# (...)\n```\n\n----------------------------------------\n\nTITLE: Executing resource-overrides command\nDESCRIPTION: This snippet demonstrates the basic usage of the `argocd admin settings resource-overrides` command. It serves as the entry point for troubleshooting resource overrides within the Argo CD environment. The command utilizes flags for configuration and interaction.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nargocd admin settings resource-overrides [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Apply for Individual Resource in Argo CD\nDESCRIPTION: Add an annotation to enable server-side apply for a specific Kubernetes resource while leaving other resources in the application to use the default sync method.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: ServerSideApply=true\n```\n\n----------------------------------------\n\nTITLE: Resource After Sync with Current Argo CD Version\nDESCRIPTION: The same Secret resource after being synced by the current version of Argo CD. The application instance label has been injected to track resource ownership.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  labels:\n    app.kubernetes.io/instance: some-application\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables to Skip Specific E2E Test Classes - Shell\nDESCRIPTION: This snippet sets environment variables to selectively skip groups of tests (GPG, OpenShift-specific, Helm) in the e2e suite. Each variable defaults to 'false' unless set, and is useful when the corresponding feature is disabled or not supported in your installation. Requires correct shell variable substitution and export support.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_E2E_SKIP_GPG=${ARGOCD_E2E_SKIP_GPG:-false}\nexport ARGOCD_E2E_SKIP_OPENSHIFT=${ARGOCD_E2E_SKIP_OPENSHIFT:-false}\nexport ARGOCD_E2E_SKIP_HELM=${ARGOCD_E2E_SKIP_HELM:-false}\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Sync Window Schedule - argocd CLI\nDESCRIPTION: This command updates the schedule of an existing sync window within an Argo CD project. It requires specifying the project name and the ID of the sync window to be updated. The `--schedule` flag defines the new schedule using cron format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_update.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj windows update PROJECT ID \\\n    --schedule \"0 20 * * *\"\n```\n\n----------------------------------------\n\nTITLE: Patching Argo CD Application for Synchronization with YAML\nDESCRIPTION: Defines a patch file to modify the 'operation' field of an existing Application resource, particularly updating 'initiatedBy' and 'sync' parameters. Use 'kubectl patch' with '--patch-file' to apply the patch, enabling updates without recreating the resource. Validates patching strategy considerations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  initiatedBy:\n    username: <username>\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD Notification Administration Commands - Shell\nDESCRIPTION: This shell snippet demonstrates the core usage of the 'argocd admin notifications' CLI command with customizable flags for managing Argo CD notification settings. Dependencies include Argo CD CLI installed and access to the configured Argo CD instance. The command supports various flags such as setting the repo server address, managing TLS/security, impersonating users/groups, configuring Kubernetes context, specifying notification secret/config-map files, and fine-tuning client-server interactions. Inputs are flag options that tailor the command to specific administration tasks, with outputs being direct CLI feedback or updates to Argo CD's state. Regular use requires proper authentication and network access, and some flags (such as --insecure) may lower security, so use with care.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin notifications [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD Application Controller Replicas for Sharding - YAML\nDESCRIPTION: This YAML snippet shows how to configure the `argocd-application-controller` StatefulSet to enable sharding by increasing the number of replicas. It also sets the `ARGOCD_CONTROLLER_REPLICAS` environment variable within the container spec to inform the controller about the total number of replicas.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: argocd-application-controller\nspec:\n  replicas: 2\n  template:\n    spec:\n      containers:\n      - name: argocd-application-controller\n        env:\n        - name: ARGOCD_CONTROLLER_REPLICAS\n          value: \"2\"\n```\n\n----------------------------------------\n\nTITLE: Updating Password Examples using Argo CD CLI\nDESCRIPTION: Demonstrates how to use the `argocd account update-password` command to update the current user's password and update password for the specified account.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_update-password.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\t# Update the current user's password\n\targocd account update-password\n\n\t# Update the password for user foobar\n\targocd account update-password --account foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD Controller RBAC - YAML\nDESCRIPTION: This snippet showcases the configuration of the `resource.respectRBAC` key within an Argo CD ConfigMap to control how the controller interacts with RBAC. The key takes values like 'strict', 'normal', or is left unset/empty (default). The 'strict' mode requires controller to have rbac permission to `create` a `SelfSubjectAccessReview` resource for more security; 'normal' mode is for minimizing api calls and the default disables the feature. The configuration modifies the Argo CD ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.respectRBAC: \"strict\"\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Cluster Secret with execProviderConfig for EKS Auth - YAML\nDESCRIPTION: Declares a Kubernetes Secret containing Argo CD cluster configuration using execProviderConfig to obtain AWS credentials from environment variables and execute 'argocd-k8s-auth'. The config enables dynamic token generation for EKS clusters and supports TLS configuration. Credentials must be securely supplied to avoid exposure of secrets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster\n  server: https://mycluster.example.com\n  namespaces: \"my,managed,namespaces\"\n  clusterResources: \"true\"\n  config: |\n    {\n      \"execProviderConfig\": {\n        \"command\": \"argocd-k8s-auth\",\n        \"args\": [\"aws\", \"--cluster-name\", \"my-eks-cluster\"],\n        \"apiVersion\": \"client.authentication.k8s.io/v1beta1\",\n        \"env\": {\n          \"AWS_REGION\": \"xx-east-1\",\n          \"AWS_ACCESS_KEY_ID\": \"{{ .aws_key_id }}\",\n          \"AWS_SECRET_ACCESS_KEY\": \"{{ .aws_key_secret }}\",\n          \"AWS_SESSION_TOKEN\": \"{{ .aws_token }}\"\n        }\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"{{ .cluster_cert }}\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Teams Notifications (Application)\nDESCRIPTION: This YAML snippet defines a Kubernetes Application resource to subscribe to Teams notifications. The `notifications.argoproj.io/subscribe.on-sync-succeeded.teams` annotation specifies that notifications should be sent to the `channelName` team when a sync operation succeeds.  This relies on Argo CD's notification system and the previously defined ConfigMap and Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.teams: channelName\n```\n\n----------------------------------------\n\nTITLE: Including a Specific Directory with Pattern in CLI\nDESCRIPTION: Includes only files within a specific subdirectory by specifying a pattern that matches the directory content, useful for narrowing deployment scope.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app set guestbook --directory-include \"some-directory/*\"\n```\n\n----------------------------------------\n\nTITLE: Announcing Mutability of Collection Types in YAML Parameters\nDESCRIPTION: This snippet shows how specifying 'collectionType: map' allows the UI and user tooling to add further entries to the map. New items are always allowed when using map/array types, unless authors declare each item as a standalone parameter. It demonstrates the extensibility and recommended granularity of parameter definitions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- name: images\n  collectionType: map  # users will be allowed to add new items, because this is a map\n  map:\n    ubuntu:latest: docker.example.com/proxy/ubuntu:latest\n    guestbook:v0.1: docker.example.com/proxy/guestbook:v0.1\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Host Key Algorithm Support (Shell)\nDESCRIPTION: Tests an SSH connection to a specified host ('user@host') while explicitly disabling the 'ssh-rsa' host key algorithm via the '-oHostKeyAlgorithms=-ssh-rsa' option. This command helps determine if the remote server supports newer algorithms compatible with OpenSSH 8.8+ and Argo CD 2.2.12+.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.1-2.2.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -oHostKeyAlgorithms=-ssh-rsa user@host\n```\n\n----------------------------------------\n\nTITLE: Plugin Discovery Command\nDESCRIPTION: This YAML snippet demonstrates the use of a `discover.find.command` to determine if an application repository is supported by the plugin. The command executes a `find` command and the plugin supports the application if the command exists with status code 0 and produces output to standard out.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  discover:\n    find:\n      command: [sh, -c, find . -name env.yaml]\n```\n\n----------------------------------------\n\nTITLE: Defining elements for List generator\nDESCRIPTION: This YAML snippet shows how the list generator can be configured in v0.1.0 and v0.2.0.  The v0.1.0 form requires `cluster` and `url` keys, while v0.2.0+ supports any key/value pairs.  It highlights the evolution of the ApplicationSet feature and its backwards compatibility.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-List.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  generators:\n  - list:\n      elements:\n        # v0.1.0 form - requires cluster/url keys:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          values:\n            additional: value\n        # v0.2.0+ form - does not require cluster/URL keys\n        # (but they are still supported).\n        - staging: \"true\"\n          gitRepo: https://kubernetes.default.svc\n```\n\n----------------------------------------\n\nTITLE: Options for 'ignore-resource-updates' Command\nDESCRIPTION: Lists command options including help flag and timeout configuration, allowing users to customize execution behavior such as setting JQ execution timeout.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                                              help for ignore-resource-updates\n      --ignore-normalizer-jq-execution-timeout duration   Set ignore normalizer JQ execution timeout (default 1s)\n```\n\n----------------------------------------\n\nTITLE: Installing Minio in NAS Gateway Mode with Helm\nDESCRIPTION: Command to install Minio in NAS gateway mode using Helm chart. This enables Minio to create multiple instances backed by a single persistent volume in ReadWriteMany mode.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set nasgateway.enabled=true stable/minio\n```\n\n----------------------------------------\n\nTITLE: Processing Git Repository Root with Directory Generator (YAML)\nDESCRIPTION: Demonstrates configuring the Git Directory Generator to scan the root of a Git repository by setting `path: '*`'. It also shows how to exclude specific directories (e.g., `donotdeploy`) directly by name when processing the root.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/example/example-repo.git\n      revision: HEAD\n      directories:\n      - path: '*'\n      - path: donotdeploy\n        exclude: true\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/example/example-repo.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n```\n\n----------------------------------------\n\nTITLE: Trigger for Sync Operation Changes (YAML)\nDESCRIPTION: This YAML example defines a trigger within a `argocd-notifications-cm` ConfigMap that covers different stages of the sync operation. It illustrates the use of multiple conditions with distinct template assignments, enabling different notifications depending on the application's sync status.  It relies on the `antonmedv/expr` library for condition parsing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  trigger.sync-operation-change: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [github-commit-status]\n    - when: app.status.operationState.phase in ['Running']\n      send: [github-commit-status]\n    - when: app.status.operationState.phase in ['Error', 'Failed']\n      send: [app-sync-failed, github-commit-status]\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Clusters in Default Wide Format (Shell)\nDESCRIPTION: Demonstrates the simplest usage of `argocd cluster list` to display configured clusters using the default 'wide' output format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster list\n```\n\n----------------------------------------\n\nTITLE: Declaring Project Dependencies (requirements.txt)\nDESCRIPTION: This snippet lists the required Python packages and their versions for the project. These dependencies are used to build the project documentation and support code execution. The versions are pinned to ensure consistent behavior and to prevent unexpected issues from updates. It also includes comments indicating certain dependencies have constraints on the version, depending on their usage.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/requirements.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmkdocs==1.6.1\n# Strict mode has been disabled in latest versions of mkdocs-material.\n# Thus pointing to the older version of mkdocs-material.\nmkdocs-material==7.1.8\nmarkdown_include==0.8.1\npygments==2.19.1\njinja2==3.1.6\nmarkdown==3.8\npymdown-extensions==10.14.3\n```\n\n----------------------------------------\n\nTITLE: Disabling ignoreDifferencesOnResourceUpdates Feature - YAML - yaml\nDESCRIPTION: Shows how to explicitly disable the new default that ignores differences on resource updates by adding `ignoreDifferencesOnResourceUpdates: false` within the `resource.compareoptions` field of the `argocd-cm` ConfigMap. This restores prior behavior where all differences (even ignored ones) are considered during reconciliation. This configuration is intended for advanced users seeking to maintain legacy diff behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.compareoptions: |\n    ignoreDifferencesOnResourceUpdates: false\n\n```\n\n----------------------------------------\n\nTITLE: Referencing argocd-secret Values in argocd-cm for OIDC (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to reference a secret stored in the `argocd-secret` Kubernetes Secret from within the `argocd-cm` ConfigMap. The `clientSecret` field within the `oidc.config` key uses the syntax `$oidc.auth0.clientSecret` to retrieve the corresponding base64-decoded value from the `argocd-secret` Secret at runtime.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  ...\n  oidc.config: |\n    name: Auth0\n    clientID: aabbccddeeff00112233\n\n    # Reference key in argocd-secret\n    clientSecret: $oidc.auth0.clientSecret\n  ...\n```\n\n----------------------------------------\n\nTITLE: Adding a Finalizer for Cascading Deletion (YAML)\nDESCRIPTION: YAML snippet demonstrating how to add the `resources-finalizer.argocd.argoproj.io` finalizer to an Argo CD Application's metadata. This finalizer ensures that when the Application resource itself is deleted, Argo CD will first delete all the Kubernetes resources managed by this application before removing the Application resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n ...\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Plugins using InitContainers in Argo CD (YAML)\nDESCRIPTION: Shows how to configure the `repoServer` deployment within the official Argo CD Helm chart to use an `initContainer`. This init container installs the `helm-gcs` plugin and adds a GCS-based Helm repository before the main `repoServer` starts. This method avoids building a custom Argo CD image and utilizes volume mounts for shared state and credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nrepoServer:\n  volumes:\n    - name: gcp-credentials\n      secret:\n        secretName: my-gcp-credentials\n  volumeMounts:\n    - name: gcp-credentials\n      mountPath: /gcp\n  env:\n    - name: HELM_CACHE_HOME\n      value: /helm-working-dir\n    - name: HELM_CONFIG_HOME\n      value: /helm-working-dir\n    - name: HELM_DATA_HOME\n      value: /helm-working-dir\n  initContainers:\n    - name: helm-gcp-authentication\n      image: alpine/helm:3.16.1\n      volumeMounts:\n        - name: helm-working-dir\n          mountPath: /helm-working-dir\n        - name: gcp-credentials\n          mountPath: /gcp\n      env:\n        - name: HELM_CACHE_HOME\n          value: /helm-working-dir\n        - name: HELM_CONFIG_HOME\n          value: /helm-working-dir\n        - name: HELM_DATA_HOME\n          value: /helm-working-dir\n      command: [ \"/bin/sh\", \"-c\" ]\n      args:\n        - apk --no-cache add curl;\n          helm plugin install https://github.com/hayorov/helm-gcs.git;\n          helm repo add my-gcs-repo gs://my-private-helm-gcs-repository;\n          chmod -R 777 $HELM_DATA_HOME;\n```\n\n----------------------------------------\n\nTITLE: Using enable-manual-sync Command Syntax in Argo CD\nDESCRIPTION: The basic syntax for the enable-manual-sync command, which requires a PROJECT name and a sync window ID as parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_enable-manual-sync.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows enable-manual-sync PROJECT ID [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Custom CSS Path in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML snippet shows how to configure Argo CD to use a custom CSS file mounted locally onto the `argocd-server` container. The `ui.cssurl` key in the `argocd-cm` ConfigMap is set to a path relative to the container's `/shared/app` directory (e.g., `./custom/my-styles.css`), pointing to where the custom CSS file will be mounted.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom-styles.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n  ui.cssurl: \"./custom/my-styles.css\"\n```\n\n----------------------------------------\n\nTITLE: Example Custom Resource for Cluster Decision (YAML)\nDESCRIPTION: Provides an example of a custom resource (`mallard.io/v1beta1`, kind `Duck`, name `quak`) that the `clusterDecisionResource` generator monitors. The generator specifically looks at the `status.decisions` list within this resource, which contains objects identifying target Argo CD clusters (e.g., `cluster-01`, `cluster-02`) via the `clusterName` key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Cluster-Decision-Resource.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: mallard.io/v1beta1\nkind: Duck\nmetadata:\n  name: quak\nspec: {}\nstatus:\n  # Duck-typing ignores all other aspects of the resource except \n  # the \"decisions\" list\n  decisions:\n  - clusterName: cluster-01\n  - clusterName: cluster-02\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Log configuration\nDESCRIPTION: Sets the logging format and level for CLI output, aiding in troubleshooting and verbosity control.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Resources to Sync via YAML List\nDESCRIPTION: Defines a list of specific resources ('kind', 'name') to be synchronized, with optional 'group' and 'namespace' fields. This targeted approach allows selective synchronization when multiple resources are involved.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  sync:\n    resources:\n      - kind: Namespace\n        name: namespace-name\n      - kind: ServiceAccount\n        name: service-account-name\n        namespace: namespace-name\n      - group: networking.k8s.io\n        kind: NetworkPolicy\n        name: network-policy-name\n        namespace: namespace-name\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart (Testing)\nDESCRIPTION: This command installs the stable/redis Helm chart with the default configuration, suitable for testing environments. It deploys Redis on the Kubernetes cluster using the Helm package manager.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Testing configuration\n$ helm install stable/redis\n```\n\n----------------------------------------\n\nTITLE: Finding Host IP Address for Kubernetes Cluster Configuration in Shell\nDESCRIPTION: These shell commands are used to retrieve the host machine's IP address on macOS and Linux systems by parsing network interface configuration outputs. This IP is used to replace default Kubernetes API server IPs to enable connectivity from Kubernetes clusters running inside Docker containers (like k3d). The commands rely on standard Unix utilities such as ifconfig, grep, awk, and standard environment variable assignment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nIP=`ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'`\necho $IP\n```\n\nLANGUAGE: Shell\nCODE:\n```\nIP=`ifconfig eth0 | grep inet | grep -v inet6 | awk '{print $2}'`\necho $IP\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitea Pull Request Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Details the configuration of the `pullRequest` generator for Gitea. It requires specifying the owner (`owner`), repository (`repo`), Gitea instance URL (`api`), an optional authentication token (`tokenRef`), and an option to allow insecure connections (`insecure`) often needed for self-signed certificates. Requires an Argo CD ApplicationSet and optionally a Kubernetes Secret for the token.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      gitea:\n        # The Gitea organization or user.\n        owner: myorg\n        # The Gitea repository\n        repo: myrepository\n        # The Gitea url to use\n        api: https://gitea.mydomain.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: gitea-token\n          key: token\n        # many gitea deployments use TLS, but many are self-hosted and self-signed certificates\n        insecure: true\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Adding a GPG Public Key to Argo CD Server Keyring using Shell Command\nDESCRIPTION: This shell command uses the 'argocd gpg add' CLI to add a GPG public key from a specified file path to the Argo CD server's keyring. The '--from' flag accepts the path to the key file, and additional inherited options allow for authentication, configuration, and network setup. Dependencies include the Argo CD CLI (argocd), proper authentication credentials, and a valid key file. The input is the file specified via '--from', and on success, the command imports the key to the server keyring; errors will be reported if input or network parameters are invalid.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg_add.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd gpg add --from /path/to/keyfile\n```\n\n----------------------------------------\n\nTITLE: Function Example in Trigger Condition (YAML)\nDESCRIPTION: This YAML snippet demonstrates the use of built-in functions within a trigger condition.  It shows an example of utilizing functions to evaluate time-based conditions for triggering notifications. This snippet relies on the built-in functions available in the Argo CD notification system and the `antonmedv/expr` library.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nwhen: time.Now().Sub(time.Parse(app.status.operationState.startedAt)).Minutes() >= 5\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a resource with name pattern to the ignore list for a specific project\nDESCRIPTION: This code snippet shows how to incorporate the '--name' option to filter resources by name pattern when adding them to the orphaned ignore list in a specific project. The command includes placeholders for PROJECT, GROUP, KIND, and the NAME pattern, enabling targeted resource ignoring based on naming conventions. It relies on Argo CD CLI and proper API server context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-orphaned-ignore.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-orphaned-ignore PROJECT GROUP KIND --name NAME\n```\n\n----------------------------------------\n\nTITLE: Excluding Multiple Patterns Declaratively in YAML\nDESCRIPTION: Specifies multiple exclude patterns in YAML format, allowing exclusion of multiple files or directories simultaneously, enhancing flexible filtering.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    directory:\n      exclude: '{config.yaml,env-use2/*}'\n      include: '*.yaml'\n```\n\n----------------------------------------\n\nTITLE: Removing Destination Service Account Using Argo CD CLI - Shell\nDESCRIPTION: This shell snippet demonstrates the syntax for removing a destination service account from an Argo CD project. It requires the Argo CD CLI tool to be installed and authenticated. The command accepts four positional arguments: PROJECT (the project name), SERVER (Kubernetes API URL), NAMESPACE (destination namespace), and SERVICE_ACCOUNT (service account name). When executed, it removes the specified service account from the destination of the given project. Optional flags can be used for further authentication, context, or configuration, as documented in the options section.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-destination-service-account.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj remove-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of `argocd admin cluster` (Shell)\nDESCRIPTION: Displays the fundamental syntax for the `argocd admin cluster` command. This command serves as the entry point for various cluster management operations within Argo CD and requires specific subcommands and flags for execution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin cluster [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik IngressRoute for Argo CD with gRPC Support - YAML\nDESCRIPTION: This YAML snippet defines a Traefik IngressRoute Custom Resource for Argo CD allowing TLS termination and routing of both HTTP and gRPC traffic on the same hostname and port. It illustrates use of entryPoints 'websecure', routing rules by host and HTTP header to distinguish normal HTTP traffic from gRPC traffic using the 'scheme: h2c' for gRPC. TLS termination is configured via 'certResolver: default'. This configuration requires Traefik v3.0 or higher with support for IngressRoute CRD and HTTP/2 cleartext (h2c) handling.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: argocd-server\n  namespace: argocd\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`argocd.example.com`)\n      priority: 10\n      services:\n        - name: argocd-server\n          port: 80\n    - kind: Rule\n      match: Host(`argocd.example.com`) && Header(`Content-Type`, `application/grpc`)\n      priority: 11\n      services:\n        - name: argocd-server\n          port: 80\n          scheme: h2c\n  tls:\n    certResolver: default\n```\n\n----------------------------------------\n\nTITLE: Patching Argo CD Secret with bcrypt Hash\nDESCRIPTION: This `kubectl` command patches the `argocd-secret` secret in the `argocd` namespace with a new bcrypt hash for the admin password and updates the password modification time. It's required to reset the admin password after generating a new hash.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# bcrypt(password)=$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\nkubectl -n argocd patch secret argocd-secret \\\n  -p '{\"stringData\": {\n    \"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\n    \"admin.passwordMtime\": \"'$(date +%FT%T%Z)'\" \n  }}'\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Lua Standard Libraries for cert-manager.io/Certificate Health Check - YAML\nDESCRIPTION: This YAML snippet enables access to the Lua standard libraries for a cert-manager.io/Certificate health check script by setting resource.customizations.useOpenLibs.cert-manager.io_Certificate: true in argocd-cm's data section. This override is necessary if the Lua health script requires functions from standard libraries, which are disabled by default for security. Dependencies are Argo CD v1.8+ and the cert-manager CRD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n  resource.customizations.useOpenLibs.cert-manager.io_Certificate: true\n  resource.customizations.health.cert-manager.io_Certificate: |\n    # Lua standard libraries are enabled for this script\n```\n\n----------------------------------------\n\nTITLE: Helm Values for Mounting AWS Profile Secret in Argo CD - YAML\nDESCRIPTION: Specifies Helm values configuration to mount an AWS credentials profile as a secret into both the Argo CD controller and server pods. This setup is necessary for enabling profile-based AWS authentication in Argo CD, as defined in previous secret examples. The volume mount must be read-only and aligned with the secret/file path referenced in the cluster Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  extraVolumes:\n    - name: my-profile-volume\n      secret:\n        secretName: my-aws-profile\n        items:\n          - key: my-profile-file\n            path: my-profile-file\n  extraVolumeMounts:\n    - name: my-profile-mount\n      mountPath: /mount/path/to\n      readOnly: true\n\nserver:\n  extraVolumes:\n    - name: my-profile-volume\n      secret:\n        secretName: my-aws-profile\n        items:\n          - key: my-profile-file\n            path: my-profile-file\n  extraVolumeMounts:\n    - name: my-profile-mount\n      mountPath: /mount/path/to\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Defining Service Account Based Impersonation in Argo CD AppProject - YAML\nDESCRIPTION: This YAML snippet illustrates the proposed extension to the AppProject Custom Resource Definition (CRD) in Argo CD by adding a destinationServiceAccounts list. Each entry associates a Kubernetes API server URL and namespace with a service account that Argo CD should impersonate during application sync. This mechanism enables fine-grained privilege separation by allowing application syncs to run with the permissions of the specified service accounts rather than the global control plane account. Dependencies include Argo CD with the impersonation feature enabled and Kubernetes clusters pre-configured with the appropriate service accounts per namespace. Key parameters are server (target cluster API URL), namespace (target namespace), and defaultServiceAccount (service account to use). Outputs are Argo CD syncing applications using the mapped service account credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  destinations:\n    - '*'\n  destinationServiceAccounts:\n    - server: https://kubernetes.default.svc\n      namespace: guestbook\n      defaultServiceAccount: guestbook-deployer\n    - server: https://kubernetes.default.svc\n      namespace: guestbook-dev\n      defaultServiceAccount: guestbook-dev-deployer\n    - server: https://kubernetes.default.svc\n      namespace: guestbook-stage\n      defaultServiceAccount: guestbook-stage-deployer\n    - server: '*'\n      namespace: '*'\n      defaultServiceAccount: default # catch all service account to be used when all other matches fail.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of `argocd account bcrypt`\nDESCRIPTION: Provides the basic syntax for the `argocd account bcrypt` command, indicating that it accepts flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_bcrypt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd account bcrypt [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for 'remove-policy' command in Argo CD CLI\nDESCRIPTION: Lists and explains the various flags and options available for the 'remove-policy' command, including specifying actions, objects, and permissions, as well as inherited connection and context options such as server address, TLS configurations, and token authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_remove-policy.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --action string       Action to grant/deny permission on (e.g. get, create, list, update, delete)\n  -h, --help                help for remove-policy\n  -o, --object string       Object within the project to grant/deny access.  Use '*' for a wildcard. Will want access to '<project>/<object>'\n  -p, --permission string   Whether to allow or deny access to object with the action.  This can only be 'allow' or 'deny' (default \"allow\")\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Illustrating Directory Exclusion Rule Precedence (YAML)\nDESCRIPTION: Demonstrates the precedence of exclusion rules in the Git Directory Generator. It first shows an incorrect configuration where a specific include (`/d/e`) is overridden by a broader exclude (`/d/*`). It then provides two correct ways to include `/d/e` while excluding `/d/f` and `/d/g`: either by explicitly excluding `f` and `g` after the wildcard include, or by using path matching (`[fg]`) for the exclusion.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# Directory structure:\n.\n└── d\n    ├── e\n    ├── f\n    └── g\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Incorrect attempt:\n- path: /d/e\n  exclude: false\n- path: /d/*\n  exclude: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Correct way 1:\n- path: /d/*\n- path: /d/f\n  exclude: true\n- path: /d/g\n  exclude: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Correct way 2 (shorter):\n- path: /d/*\n- path: /d/[fg]\n  exclude: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Secret for Argo CD Notification Credentials (YAML)\nDESCRIPTION: Shows an example Kubernetes Secret manifest for storing credentials (e.g., a Slack token) used by Argo CD notifications. Requires placing the Secret in the same namespace as Argo CD, adding the `app.kubernetes.io/part-of: argocd` label, and base64 encoding the credential value.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-slackbot\n  namespace: <the namespace where argocd is installed>\n  labels:\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  slack-token: <base64encryptedtoken>\n```\n\n----------------------------------------\n\nTITLE: Listing Command Flags and Options for 'argocd account can-i' - Shell\nDESCRIPTION: This snippet enumerates the available options and flags for the 'argocd account can-i' command including help flag '-h'. It also lists inherited options from the parent Argo CD command related to authentication, server configuration, logging, and Kubernetes context specification. These flags enable customizing the command execution environment and controlling connections to the Argo CD API server or Kubernetes directly. Users must ensure appropriate configuration files and environment variables are set for successful authentication and server interaction.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_can-i.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for can-i\n```\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Standard Argo CD App Rollback Options (Bash)\nDESCRIPTION: Lists the options specific to the `argocd app rollback` command. These flags control aspects like the target namespace, output format, pruning behavior, and operation timeout.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_rollback.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-N, --app-namespace string   Rollback application in namespace\n  -h, --help                   help for rollback\n  -o, --output string          Output format. One of: json|yaml|wide|tree|tree=detailed (default \"wide\")\n      --prune                  Allow deleting unexpected resources\n      --timeout uint           Time out after this many seconds\n```\n\n----------------------------------------\n\nTITLE: Add Volume Mount to argocd-dex-server Deployment\nDESCRIPTION: Adds a volume mount for the Google authentication JSON file to the `argocd-dex-server` deployment. This mount allows the Dex server to access the Google service account credentials. The `mountPath` is set to `/tmp/oidc` and the `name` is set to `google-json`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n- mountPath: /shared\n  name: static-files\n- mountPath: /tmp\n  name: dexconfig\n- mountPath: /tmp/oidc\n  name: google-json\n  readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Fetching GPG Public Key using Argo CD CLI in Bash\nDESCRIPTION: This snippet shows the basic usage of the 'argocd gpg get' command to obtain a GPG public key with a specified KEYID from the Argo CD server. It supports output in default wide format, JSON, or YAML. The command requires a connection to a configured Argo CD server and may leverage authentication tokens or client certificates. Key parameters include KEYID (the identifier of the GPG key to fetch) and the optional output format flag '-o'. The output is the details of the public key in the requested format. Additional global flags allow configuration of server context, authentication, and connection options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg_get.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd gpg get KEYID [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get a GPG public key with the specified KEYID in wide format (default).\n  argocd gpg get KEYID\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get a GPG public key with the specified KEYID in JSON format.\n  argocd gpg get KEYID -o json\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get a GPG public key with the specified KEYID in YAML format.\n  argocd gpg get KEYID -o yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Repository Write Secret for the Source Hydrator\nDESCRIPTION: This YAML snippet defines a Secret of type `Opaque` with the label `argocd.argoproj.io/secret-type: repository-write`.  This label indicates that Argo CD should use this Secret for pushing manifests to git. The secret contains the repository URL, type, GitHub App ID, GitHub App Installation ID, and the GitHub App Private Key. This secret is used for authentication when the source hydrator commits changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/source-hydrator.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-push-secret\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository-write\ntype: Opaque\nstringData:\n  url: \"https://github.com\"\n  type: \"git\"\n  githubAppID: \"<your app ID here>\"\n  githubAppInstallationID: \"<your installation ID here>\"\n  githubAppPrivateKey: |\n    <your private key here>\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Config file path\nDESCRIPTION: Sets the path to the Argo CD configuration file, defaulting to the user's home directory.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n```\n\n----------------------------------------\n\nTITLE: Shell: Retrieve Redis Password from Kubernetes Secret\nDESCRIPTION: Provides a shell command using `kubectl` to retrieve the Redis password stored in a Kubernetes secret. It accesses the secret named after the Helm release (`{{ template \"redis.fullname\" . }}`), extracts the base64 encoded password from the `redis-password` key using `jsonpath`, decodes it using `base64 --decode`, and exports it as an environment variable `REDIS_PASSWORD`. This command is intended to be shown only if `.Values.usePassword` is true.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport REDIS_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template \"redis.fullname\" . }} -o jsonpath=\"{.data.redis-password}\" | base64 --decode)\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with Custom Persistent Volume Size - Helm Bash\nDESCRIPTION: Deploys Minio Helm chart setting the persistent volume size to 100Gi instead of the default. Requires Helm, active Kubernetes cluster, and storage provisioner. Passes persistence.size explicitly via --set to allocate more disk storage. Outputs a release with larger storage backing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release \\\n  --set persistence.size=100Gi \\\n    stable/minio\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Elements via Matrix Generator\nDESCRIPTION: This YAML snippet demonstrates dynamically generating elements for the List generator using a matrix generator. It combines a git generator (to fetch a YAML file) with the list generator.  The content of the YAML file from git is then passed as input to the `elementsYaml` field.  It requires Argo CD, a git repository, and a YAML file that defines elements for the list generator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-List.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: elements-yaml\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - matrix:\n      generators:\n      - git:\n          repoURL: https://github.com/argoproj/argo-cd.git\n          revision: HEAD\n          files:\n          - path: applicationset/examples/list-generator/list-elementsYaml-example.yaml\n      - list:\n          elementsYaml: \"{{ .key.components | toJson }}\"\n  template:\n    metadata:\n      name: '{{.name}}'\n    spec:\n      project: default\n      syncPolicy:\n        automated:\n          selfHeal: true    \n        syncOptions:\n        - CreateNamespace=true        \n      sources:\n        - chart: '{{.chart}}'\n          repoURL: '{{.repoUrl}}'\n          targetRevision: '{{.version}}'\n          helm:\n            releaseName: '{{.releaseName}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.namespace}}'\n```\n\n----------------------------------------\n\nTITLE: Adding Filtering Fields to ApplicationQuery (Proto)\nDESCRIPTION: This snippet defines the addition of filtering fields (`repos`, `clusters`, `namespaces`, `autoSyncEnabled`, `syncStatuses`, `healthStatuses`, `search`) to the `ApplicationQuery` message. These fields will be used for server-side filtering of applications, reducing the amount of data transferred and improving performance. The dependencies are the existing proto definitions.  The output is the definition of the fields within the proto file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/server-side-pagination.md#_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nmessage ApplicationQuery { \n  // ... existing fields\n  //\tNew proto fields for server side filtering\n\t// the repos filter\n\trepeated string repos = 11;\n\t// the clusters filter\n\trepeated string clusters = 12;\n\t// the namespaces filter\n\trepeated string namespaces = 13;\n\t// the auth sync filter\n\toptional bool autoSyncEnabled = 14;\n\t// the sync status filter\n\trepeated string syncStatuses = 15;\n\t// the health status filter\n\trepeated string healthStatuses = 16;\n\t// search\n\toptional string search = 17;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Sockets for Discovery - File System Directory Layout - bash\nDESCRIPTION: This snippet illustrates the directory structure where plugin sidecars register themselves by placing named socket files in a shared directory. Each .sock file corresponds to an active plugin (e.g., cdk8s.sock, jkcfg.sock, pulumi.sock). No external dependencies. Input is the creation of the socket file; output is the repo-server's automatic discovery of available plugins via filesystem listing. The layout ensures that gRPC communication can be established over Unix sockets for manifest generation and queries.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/home/argocd/plugins/\n                        cdk8s.sock\n                        jkcfg.sock\n                        pulumi.sock\n```\n\n----------------------------------------\n\nTITLE: Syntax for `argocd proj role add-policy`\nDESCRIPTION: Defines the basic command structure for adding a policy to a specific role within an Argo CD project. Requires the project name and role name as arguments, with optional flags to define the policy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-policy.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj role add-policy PROJECT ROLE-NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Options for Argo CD Project Sync Windows\nDESCRIPTION: List of available options and flags for the 'argocd proj windows add' command, including parameters to specify applications, clusters, duration, window type, and scheduling options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_add.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --applications strings   Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website)\n      --clusters strings       Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging)\n      --duration string        Sync window duration. (e.g. --duration 1h)\n  -h, --help                   help for add\n  -k, --kind string            Sync window kind, either allow or deny\n      --manual-sync            Allow manual syncs for both deny and allow windows\n      --namespaces strings     Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod)\n      --schedule string        Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\")\n      --time-zone string       Time zone of the sync window (default \"UTC\")\n      --use-and-operator       Use AND operator for matching applications, namespaces and clusters instead of the default OR operator\n```\n\n----------------------------------------\n\nTITLE: Parameter Announcement Missing Required 'name' Field (YAML)\nDESCRIPTION: Illustrates a validation error scenario where a parameter announcement is missing the mandatory 'name' field. The plugin server or controller should throw an error, fail validation, and refuse to use this parameter, marking Application as unhealthy.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# needs a `name` field\n- title: Parameter Overrides\n  collectionType: map\n  map:\n    global.image.repository: quay.io/argoproj/argocd\n```\n\n----------------------------------------\n\nTITLE: Register Resource Tab Extension\nDESCRIPTION: This JavaScript snippet demonstrates how to register a resource tab extension using `extensionsAPI.registerResourceExtension`.  It defines a simple React component that displays \"Hello World\" within the tab. The extension is registered to apply to all resource groups and kinds, denoted by the `*` wildcard parameters. The extension's tab title is set to \"Nice extension\". It runs immediately by wrapping it in an immediately invoked function expression (IIFE).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n((window) => {\n  const component = () => {\n    return React.createElement(\"div\", {}, \"Hello World\");\n  };\n  window.extensionsAPI.registerResourceExtension(\n    component,\n    \"*\",\n    \"*\",\n    \"Nice extension\"\n  );\n})(window);\n```\n\n----------------------------------------\n\nTITLE: Argo CD Application with Generic Service Account for All Namespaces\nDESCRIPTION: YAML configuration for an Argo CD Application and AppProject that specifies a generic service account for application sync across all namespaces using glob pattern.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  project: my-project\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n---\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  destinations:\n    - namespace: '*'\n      server: https://kubernetes.default.svc\n  destinationServiceAccounts:\n    - namespace: '*'\n      server: https://kubernetes.default.svc \n      defaultServiceAccount: generic-deployer\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Patterns Declaratively in YAML\nDESCRIPTION: Uses brace expansion syntax in YAML to include multiple file patterns, such as `.yml` and `.yaml`, providing flexible control over included manifest files.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    directory:\n      include: '{*.yml,*.yaml}'\n```\n\n----------------------------------------\n\nTITLE: argocd appset generate Available Flags - Shell\nDESCRIPTION: This snippet lists available flags for the 'argocd appset generate' command, including core flags like --output for specifying format (json, yaml, wide) and composite flags inherited from parent commands. The flags allow authentication, server selection, TLS/session configuration, Kubernetes context selection, logging options, and control over Redis and repository servers. Many flags accept string values or toggle features on and off; defaults are shown where relevant. Flags must be appended to the command-line call as needed for custom scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_generate.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help            help for generate\n-o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: ArgoCD App Unset Command Options\nDESCRIPTION: Available flags and options specific to the 'argocd app unset' command, including namespace options, kustomize-related settings, and parameter controls.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_unset.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-N, --app-namespace string            Unset application parameters in namespace\n-h, --help                            help for unset\n    --ignore-missing-components       Unset the kustomize ignore-missing-components option (revert to false)\n    --ignore-missing-value-files      Unset the helm ignore-missing-value-files option (revert to false)\n    --kustomize-image stringArray     Kustomize images name (e.g. --kustomize-image node --kustomize-image mysql)\n    --kustomize-namespace             Kustomize namespace\n    --kustomize-replica stringArray   Kustomize replicas name (e.g. --kustomize-replica my-deployment --kustomize-replica my-statefulset)\n    --kustomize-version               Kustomize version\n    --nameprefix                      Kustomize nameprefix\n    --namesuffix                      Kustomize namesuffix\n-p, --parameter stringArray           Unset a parameter override (e.g. -p guestbook=image)\n    --pass-credentials                Unset passCredentials\n    --plugin-env stringArray          Unset plugin env variables (e.g --plugin-env name)\n    --ref                             Unset ref on the source\n    --source-position int             Position of the source from the list of sources of the app. Counting starts at 1. (default -1)\n    --values stringArray              Unset one or more Helm values files\n    --values-literal                  Unset literal Helm values block\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource with Argo CD CLI - Bash\nDESCRIPTION: This command deletes a specified resource from an Argo CD application using the CLI. It requires the application name as a parameter and can be extended with various optional flags to control deletion behavior, authentication, server context, and output formatting. Typical inputs include the application name and desired flags (e.g., --kind, --namespace, --resource-name), while outputs are standard CLI responses or error messages based on API interaction. Dependencies include Argo CD CLI installed and configured, as well as network access to the relevant Argo CD server. Limitations may include necessary permissions for deletion and the existence of the specified application/resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_delete-resource.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app delete-resource APPNAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD CMP to Access Git Credentials\nDESCRIPTION: This `ConfigManagementPlugin` definition shows how to enable Git credential sharing by setting `provideGitCreds` to `true` in the `spec`. This allows the plugin to request Git credentials from the Argo CD repo-server using the `ASKPASS` mechanism when needed for operations like cloning additional repositories. This should only be enabled for trusted plugins as it grants access to potentially sensitive credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: pluginName\nspec:\n  init:\n    command: [\"sample command\"]\n    args: [\"sample args\"]\n  generate:\n    command: [\"sample command\"]\n    args: [\"sample args\"]\n  provideGitCreds: true\n```\n\n----------------------------------------\n\nTITLE: Invoking argocd-dex Shell\nDESCRIPTION: This snippet shows the basic command-line syntax for executing the main `argocd-dex` command. The `[flags]` placeholder indicates that various global options can be provided to modify the command's behavior. This is the entry point for using the `argocd-dex` utility.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-dex.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd-dex [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Known Host Entries - ArgoCD\nDESCRIPTION: This command adds SSH known host entries for a server to the ArgoCD configuration. It uses `ssh-keyscan` to retrieve the server's SSH key and pipes it to the `argocd cert add-ssh` command. The `--batch` flag is used to suppress interactive prompts from ssh-keyscan.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nssh-keyscan cd.example.com | argocd cert add-ssh --batch\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets with MinIO Client - Shell\nDESCRIPTION: This command lists the buckets on the MinIO server using the configured MinIO client (mc). It uses the host alias (`{{ template \"minio.fullname\" . }}-local`) that was configured in the previous step. This command verifies that the MinIO client is properly configured and can connect to the MinIO server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmc ls {{ template \"minio.fullname\" . }}-local\n```\n\n----------------------------------------\n\nTITLE: Generating Project Allow List - Example Usage\nDESCRIPTION: This example showcases how to use the `argocd admin proj generate-allow-list` command to generate a project allow list from a specific clusterRole file. It takes the file path and project name as arguments. This command requires that the specified clusterRole file exists and is accessible.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj_generate-allow-list.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nargocd admin proj generate-allow-list /path/to/clusterrole.yaml my-project\n```\n\n----------------------------------------\n\nTITLE: Using argocd admin app to Manage Argo CD Applications - Shell\nDESCRIPTION: This snippet shows usage and examples for the argocd admin app CLI command, which manages Argo CD application configurations. Dependencies include a configured Argo CD CLI and access to the required Kubernetes contexts. Inputs include app names and flags; outputs vary per subcommand, including comparison diffs, declarative config YAML, or reconciliation summaries. Examples highlight diffing reconciliation results, generating app specs, and fetching reconciliation data. Some operations may require specific permissions or context configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_app.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin app [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Compare results of two reconciliations and print diff\nargocd admin app diff-reconcile-results APPNAME [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Generate declarative config for an application\nargocd admin app generate-spec APPNAME\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Reconcile all applications and store reconciliation summary in the specified file\nargocd admin app get-reconcile-results APPNAME\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Fine-Grained Pod Deletion (CSV)\nDESCRIPTION: This snippet demonstrates how to grant a user permission to delete Pods within a specific application while restricting deletion of the application itself. It uses the `applications` resource with a specific `<action>` format for resource deletion.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, delete/*/Pod/*/*, default/prod-app, allow\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub SCM Provider Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Provides a YAML configuration for using the GitHub SCM provider in an Argo CD ApplicationSet generator. The snippet showcases required and optional fields, including organization, GitHub Enterprise API URL, branch scanning options, authentication via Secret or GitHub App, and other provider-specific parameters. Dependencies include an accessible GitHub API and required Secrets for authentication if accessing private repositories.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      github:\n        # The GitHub organization to scan.\n        organization: myorg\n        # For GitHub Enterprise:\n        api: https://git.example.com/\n        # If true, scan every branch of every repository. If false, scan only the default branch. Defaults to false.\n        allBranches: true\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: github-token\n          key: token\n        # (optional) use a GitHub App to access the API instead of a PAT.\n        appSecretName: gh-app-repo-creds\n  template:\n  # ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for SAML Authentication in Argo CD (YAML)\nDESCRIPTION: This YAML snippet configures Dex for SAML authentication using Entra ID. It sets up the SAML connector with essential parameters like the entity issuer, SSO URL, CA data, redirect URI, and attributes for username, email, and groups. It requires a base64 encoded certificate from the Entra ID App and needs values for `my-argo-cd-url` and `my-login-url`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ndata:\n  url: https://my-argo-cd-url\n  dex.config: |\n    logger:\n      level: debug\n      format: json\n    connectors:\n    - type: saml\n      id: saml\n      name: saml\n      config:\n        entityIssuer: https://my-argo-cd-url/api/dex/callback\n        ssoURL: https://my-login-url (e.g. https://login.microsoftonline.com/xxxxx/a/saml2)\n        caData: |\n           MY-BASE64-ENCODED-CERTIFICATE-DATA\n        redirectURI: https://my-argo-cd-url/api/dex/callback\n        usernameAttr: email\n        emailAttr: email\n        groupsAttr: Group\n```\n\n----------------------------------------\n\nTITLE: Listing Projects Example\nDESCRIPTION: This command lists all available projects within Argo CD.  It does not take any arguments, and its output will vary based on existing projects.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  # List all available projects\n  argocd proj list\n```\n\n----------------------------------------\n\nTITLE: Scaling down Argo CD deployments in cluster\nDESCRIPTION: Scales down all Argo CD components in the development cluster to prevent conflicts with locally running instances.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd scale statefulset/argocd-application-controller --replicas 0\nkubectl -n argocd scale deployment/argocd-dex-server --replicas 0\nkubectl -n argocd scale deployment/argocd-repo-server --replicas 0\nkubectl -n argocd scale deployment/argocd-server --replicas 0\nkubectl -n argocd scale deployment/argocd-redis --replicas 0\nkubectl -n argocd scale deployment/argocd-applicationset-controller --replicas 0\nkubectl -n argocd scale deployment/argocd-notifications-controller --replicas 0\n```\n\n----------------------------------------\n\nTITLE: Should Display Callback Example (TypeScript)\nDESCRIPTION: This TypeScript snippet provides an example of the `shouldDisplay` callback function used to determine whether a Top Bar Action Menu extension should be displayed.  It checks if the application has a specific label ('application.environmentLabelKey') with the value 'prd' in its metadata. This allows the extension to only appear for applications in the 'prd' environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst shouldDisplay = (app: Application) => {\n  return application.metadata?.labels?.['application.environmentLabelKey'] === \"prd\";\n};\n```\n\n----------------------------------------\n\nTITLE: Delete Command Options in Argo CD CLI\nDESCRIPTION: The specific options available for the 'proj delete' command, which includes only help flag in this case.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_delete.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace and Service Account in Remote Cluster Using Shell\nDESCRIPTION: These shell commands switch kubectl context to the 'remote-cluster', create a new namespace 'guestbook', and create a service account 'guestbook-deployer' within that namespace. These are prerequisites for setting up scoped RBAC permissions for sync operations via ArgoCD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ctx remote-cluster\nkubectl create namespace guestbook\nkubectl create serviceaccount guestbook-deployer\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project CLI\nDESCRIPTION: This bash command creates a new project named `myproject` using the Argo CD CLI. It specifies the permitted destination cluster and namespace, as well as the permitted Git source repository.  The command requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj create myproject -d https://kubernetes.default.svc,mynamespace -s https://github.com/argoproj/argocd-example-apps.git\n```\n\n----------------------------------------\n\nTITLE: Setting ARGOCD_SERVER Endpoint Using OpenShift Route - Shell\nDESCRIPTION: This snippet sets the ARGOCD_SERVER environment variable by extracting the external route host created for the Argo CD API server via 'oc'. It is essential when accessing Argo CD externally on OpenShift clusters managed by the Operator. Requires the 'oc' CLI and a configured route.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_SERVER=$(oc -n argocd-e2e get routes argocd-test-server -o jsonpath='{.spec.host}')\n\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to MinIO Pod - Kubernetes\nDESCRIPTION: This command forwards traffic from the local machine's port 9000 to the MinIO pod's port 9000 within the specified Kubernetes namespace. This enables local access to the MinIO service, typically via `localhost:9000`. The `POD_NAME` variable, obtained in the previous step, specifies the target pod.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward $POD_NAME 9000 --namespace {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Pushing Hydrated Manifests to a Staging Branch\nDESCRIPTION: This YAML snippet shows how to use the `hydrateTo` field within `spec.sourceHydrator` to push hydrated manifests to a staging branch. The `drySource` specifies the location of the unhydrated manifests, `syncSource` defines the target branch for the final synced manifests, and `hydrateTo` sets the staging branch where the hydrated manifests will be pushed initially. CI/CD actions can then move the hydrated manifests from the staging branch to the final `syncSource` branch.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/source-hydrator.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  project: my-project\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      path: helm-guestbook\n      targetRevision: HEAD\n    syncSource:\n      targetBranch: environments/dev\n      path: helm-guestbook\n    hydrateTo:\n      targetBranch: environments/dev-next\n```\n\n----------------------------------------\n\nTITLE: Helm: Display Security Warning for Exposed Redis\nDESCRIPTION: This Helm template snippet checks if the Redis service is exposed via a LoadBalancer without a password (`.Values.master.service.type` contains \"LoadBalancer\" and `.Values.usePassword` is false). If these conditions are met, and network policy doesn't restrict external access, it displays a prominent warning advising the user to switch to ClusterIP/NodePort or enable password authentication for security reasons.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: Helm\nCODE:\n```\n{{- if contains .Values.master.service.type \"LoadBalancer\" }}\n{{- if not .Values.usePassword }}\n{{ if and (not .Values.networkPolicy.enabled) (.Values.networkPolicy.allowExternal) }}\n\n-------------------------------------------------------------------------------\n WARNING\n\n    By specifying \"master.service.type=LoadBalancer\" and \"usePassword=false\" you have\n    most likely exposed the Redis service externally without any authentication\n    mechanism.\n\n    For security reasons, we strongly suggest that you switch to \"ClusterIP\" or\n    \"NodePort\". As alternative, you can also switch to \"usePassword=true\"\n    providing a valid password on \"password\" parameter.\n\n-------------------------------------------------------------------------------\n{{- end }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Referencing Git-Hosted Helm Values in Argo CD Application - YAML\nDESCRIPTION: This snippet illustrates configuring an Argo CD Application to deploy a public Helm chart while sourcing its value files from a separate Git repository. The `helm.valueFiles` field in the Helm source can reference files from another source within the `sources` array using the `$ref` syntax, where `ref` matches the value in the other source's `ref` field. This allows separating chart definition from custom configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/multiple_sources.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  sources:\n  - repoURL: 'https://prometheus-community.github.io/helm-charts'\n    chart: prometheus\n    targetRevision: 15.7.1\n    helm:\n      valueFiles:\n      - $values/charts/prometheus/values.yaml\n  - repoURL: 'https://git.example.com/org/value-files.git'\n    targetRevision: dev\n    ref: values\n\n```\n\n----------------------------------------\n\nTITLE: Adding Repository Credentials Shell\nDESCRIPTION: This example demonstrates how to add new credential templates for repositories using username and password authentication. It requires specifying the repository URL, username, and password as parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Add credentials with user/pass authentication to use for all repositories under the specified URL\nargocd repocreds add URL --username USERNAME --password PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Context Names with kubectl\nDESCRIPTION: Displays a list of the names of all available Kubernetes contexts defined in the current user's kubeconfig file using the `kubectl` command. This helps identify potential clusters to register with Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config get-contexts -o name\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Deletion Algorithm\nDESCRIPTION: This algorithm details how a user is allowed to delete an ApplicationSet.  It checks if the user has delete permissions for all Applications managed by the ApplicationSet, using the ApplicationSet controller via a GRPC request from the API server. If permissions are insufficient, the operation fails; otherwise, the ApplicationSet resource is deleted.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA user is only able to delete an ApplicationSet if they have permissions to delete all of the Applications managed by the ApplicationSet. This check is performed in ApplicationSet controller, on receiving a delete request via GRPC from API server.\n\n* For each application owned by the ApplicationSet that the user is attempting to delete:\n    * Check if the user has delete permission on the Application\n    * Check if the user has delete permission within the project (?)\n* If the user does NOT have permission on least one of these, the operation should fail.\n* On pass, ApplicationController server deletes (ie kubectl delete) the ApplicationSet resource.\n```\n\n----------------------------------------\n\nTITLE: Validating Diffing Customization with argocd admin (bash)\nDESCRIPTION: Uses the `argocd admin settings resource-overrides ignore-differences` command to display fields that will be ignored during the diffing process for resources defined in the target file (`./deploy.yaml`). The diffing customization rules are loaded from the `resource.customizations` field within the specified Argo CD ConfigMap file (`--argocd-cm-path ./argocd-cm.yaml`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Removing a GnuPG Public Key Using ArgoCD CLI in Bash\nDESCRIPTION: Removes a previously configured GnuPG public key from ArgoCD's verification configuration via CLI. Requires the key ID to identify the key to remove and appropriate RBAC permissions for deleting gpgkeys resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd gpg rm <key-id>\n```\n\n----------------------------------------\n\nTITLE: Command Usage for Argo CD Notifications Template Notify - Shell\nDESCRIPTION: This snippet shows the shell command syntax for invoking the 'argocd admin notifications template notify' command, used to generate and send notifications based on specified templates and resources. It requires the 'NAME' of the notification template and the 'RESOURCE_NAME' to target, with optional flags for recipients and other configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template_notify.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin notifications template notify NAME RESOURCE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Build Environment Variables in Helm Value File Paths (YAML)\nDESCRIPTION: Configures an Argo CD Application manifest (`spec.source.helm.valueFiles`) to dynamically construct Helm values file paths. This example uses build environment variables (`$ARGOCD_APP_NAME`, `$ARGOCD_APP_REVISION`) to specify a remote values file location, potentially in a structured repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  spec:\n    source:\n      helm:\n        valueFiles:\n        - values.yaml\n        - myprotocol://somepath/$ARGOCD_APP_NAME/$ARGOCD_APP_REVISION\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Sync Status and Windows (Bash)\nDESCRIPTION: Shows how to use the `argocd app get` command to retrieve the sync status of a specific Argo CD application (APP). The output includes details about the application's configuration and current state, including whether syncs are currently allowed or denied due to Sync Windows, and lists the assigned windows.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app get APP\n```\n\nLANGUAGE: text\nCODE:\n```\nName:               guestbook\nProject:            default\nServer:             in-cluster\nNamespace:          default\nURL:                http://localhost:8080/applications/guestbook\nRepo:               https://github.com/argoproj/argocd-example-apps.git\nTarget:\nPath:               guestbook\nSyncWindow:         Sync Denied\nAssigned Windows:   deny:0 2 * * *:1h,allow:0 2 3 3 3:1h\nSync Policy:        Automated\nSync Status:        Synced to  (5c2d89b)\nHealth Status:      Healthy\n```\n\n----------------------------------------\n\nTITLE: Removing Nested Selectors in ApplicationSet - Diff Patch - diff\nDESCRIPTION: Shows how to remove a nested selector from an ApplicationSet YAML manifest when migrating to Argo CD 3.0. This diff-based snippet demonstrates exactly which lines to delete to comply with the breaking change around `applyNestedSelectors`. No external dependencies are required, and this is applied as a patch to the manifest. The main modification is removing the `selector` field from the ApplicationSet spec; failing to do so may result in failed upgrades if `applyNestedSelectors` remains false.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - matrix:\n      mergeKeys: ['test-key']\n      generators:\n      - list:\n          elements:\n          - test-key: 'test-value'\n            cluster: staging\n          - test-key: 'test-value'\n            cluster: production\n      - merge:\n          generators:\n          - list:\n              elements:\n              - another-key: 'another-value'\n          - cluster: {}\n-           selector:\n-             matchLabels:\n-               app: guestbook\n\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Path Manifest Generation Paths in Argo CD Application\nDESCRIPTION: YAML configuration for an Argo CD Application that uses a relative path in the manifest-generate-paths annotation. This optimizes caching by limiting which path changes trigger a reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  annotations:\n    # resolves to the 'guestbook' directory\n    argocd.argoproj.io/manifest-generate-paths: .\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n# ...\n```\n\n----------------------------------------\n\nTITLE: Shell: Connect Externally via LoadBalancer\nDESCRIPTION: Provides shell commands to connect to Redis from outside the cluster when the service type is set to LoadBalancer (`.Values.master.service.type` contains \"LoadBalancer\"). It includes a note that the LoadBalancer IP might take time to become available. It retrieves the external IP address assigned by the LoadBalancer using `kubectl get svc` and `jsonpath`. Then, it uses `redis-cli` with the obtained Service IP and the service port (`.Values.master.service.nodePort`), conditionally including the password (`-a $REDIS_PASSWORD`) if `.Values.usePassword` is true.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nNOTE: It may take a few minutes for the LoadBalancer IP to be available.\n      Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ template \"redis.fullname\" . }}'\n\nexport SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"redis.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\nredis-cli -h $SERVICE_IP -p {{ .Values.master.service.nodePort }} {{- if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Allowed GnuPG Signature Keys for an ArgoCD Project Using CLI in Bash\nDESCRIPTION: Shows the configuration details of a given ArgoCD project including the list of allowed GnuPG signature key IDs. Facilitates verification of which keys are currently enforced for commit signature verification within the project. Requires project name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ argocd proj get gpg\nName:                        gpg\nDescription:                 GnuPG verification\nDestinations:                *,*\nRepositories:                *\nAllowed Cluster Resources:   */*\nDenied Namespaced Resources: <none>\nSignature keys:              4AEE18F83AFDEB23, 07E34825A909B250\nOrphaned Resources:          disabled\n```\n\n----------------------------------------\n\nTITLE: Defining Commit Manifests Response (Protobuf)\nDESCRIPTION: This Protobuf message, `CommitManifestsResponse`, is the response message returned after the commit manifests request is processed. It currently has no fields, which indicates a simple acknowledgement or success signal, but it allows for the possibility of adding information in the future.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator/commit-server/README.md#_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CommitManifestsResponse {\n}\n```\n\n----------------------------------------\n\nTITLE: Create Project - Argo CD CLI\nDESCRIPTION: Creates a project within Argo CD using the CLI. This command is a prerequisite for the subsequent steps, like creating and deleting tokens. The command takes the project name as an argument. Requires Argo CD CLI installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete-token.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n$ argocd proj create test-project\n```\n\n----------------------------------------\n\nTITLE: Applying Synchronization Configuration with kubectl CLI\nDESCRIPTION: Executes 'kubectl apply' to create or update the Application resource with the specified synchronization operation. It requires the configuration file in YAML format and is used to initiate the sync operation in Argo CD. Dependencies are standard kubectl setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ kubectl apply -f <apply-file>\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy for Any Actions on Applications (CSV)\nDESCRIPTION: This snippet allows a user to perform any custom action on any applications. It uses the wildcard character `*` for the action to represent any possible action.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\np, example-user, applications, action/*, default/*, allow\n```\n\n----------------------------------------\n\nTITLE: Validate RBAC Policy from Local ConfigMap YAML File (Argo CD CLI)\nDESCRIPTION: Illustrates validating an RBAC policy contained within a local file formatted as a Kubernetes ConfigMap YAML, specifically targeting a file named `argocd-rbac-cm.yaml`. The `--policy-file` flag points to this file, which is expected to contain the policy data under keys like `policy.csv`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_validate.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Policy file can also be K8s config map with data keys like argocd-rbac-cm,\n# i.e. 'policy.csv' and (optionally) 'policy.default'\nargocd admin settings rbac validate --policy-file argocd-rbac-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Register System Level Extension\nDESCRIPTION: This JavaScript snippet showcases how to register a system level extension, which adds a new item to the Argo CD sidebar. It uses `extensionsAPI.registerSystemLevelExtension` to register a React component that displays \"Hello World\" with some padding. The component will be rendered when the new sidebar item is clicked. The example shows the use of inline styles to apply minimal styling. It runs immediately by wrapping it in an immediately invoked function expression (IIFE).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n((window) => {\n  const component = () => {\n    return React.createElement(\n      \"div\",\n      { style: { padding: \"10px\" } },\n      \"Hello World\"\n    );\n  };\n  window.extensionsAPI.registerSystemLevelExtension(\n    component,\n    \"Test Ext\",\n    \"/hello\",\n    \"fa-flask\"\n  );\n})(window);\n```\n\n----------------------------------------\n\nTITLE: Combined Include and Exclude Patterns Declaratively in YAML\nDESCRIPTION: Shows YAML configuration to include all `.yaml` files while excluding specific files and directories, facilitating precise resource management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    directory:\n      include: '*.yaml'\n      exclude: '{config.json,env-usw2/*}'\n```\n\n----------------------------------------\n\nTITLE: Generating ApplicationSets with Argo CD CLI - Shell\nDESCRIPTION: This snippet demonstrates how to run the 'argocd appset generate' command to generate apps from ApplicationSet rendered templates. No prior coding dependencies are required, but the Argo CD CLI must be installed and configured. Replace <filename or URL> with the path to your ApplicationSet YAML(s) or a URL; multiple files or URLs may be supplied as arguments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_generate.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd appset generate <filename or URL> (<filename or URL>...)\n```\n\n----------------------------------------\n\nTITLE: Parameter Announcement Types Definition Using Go\nDESCRIPTION: This Go snippet defines the core data types used by Argo CD to describe acceptable configuration parameters for CMPs, including typed values and collection support (array, map, string). Go struct tags specify JSON serialization. This file is a reference for implementers extending or validating parameter announcements. It covers typed collections, validation constraints, and the general list structure for reporting parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage cmp\n\n// ParameterItemType is the primitive data type of each of the parameter's value (or each of its values, if it's an array or\n// a map).\ntype ParameterItemType string\n\n// Anything besides \"number\" and \"boolean\" is treated as string.\nconst (\n\tParameterItemTypeNumber  ParameterItemType = \"number\"\n\tParameterItemTypeBoolean ParameterItemType = \"boolean\"\n)\n\n// ParameterCollectionType is a parameter's value's type - a single value (like a string) or a collection (like an array or a\n// map).\ntype ParameterCollectionType string\n\n// Anything besides \"number\" and \"boolean\" is treated as string.\nconst (\n\tParameterCollectionTypeMap    ParameterCollectionType = \"map\"\n\tParameterCollectionTypeArray  ParameterCollectionType = \"array\"\n)\n\n// ParameterAnnouncement represents a CMP's announcement of one acceptable parameter (though that parameter may contain\n// multiple elements, if the value holds an array or a map).\ntype ParameterAnnouncement struct {\n\t// Name is the name identifying a parameter. (required)\n\tName string                            `json:\"name,omitempty\"`\n\t// Title is a human-readable text of the parameter name. (optional)\n\tTitle    string                        `json:\"title,omitempty\"`\n\t// Tooltip is a human-readable description of the parameter. (optional)\n\tTooltip  string                        `json:\"tooltip,omitempty\"`\n\t// Required defines if this given parameter is mandatory. (optional: default false)\n\tRequired bool                          `json:\"required,omitempty\"`\n\t// ItemType determines the primitive data type represented by the parameter. Parameters are always encoded as\n\t// strings, but ParameterTypes lets them be interpreted as other primitive types.\n\tItemType ParameterItemType             `json:\"itemType,omitempty\"`\n\t// CollectionType is the type of value this parameter holds - either a single value (a string) or a collection (array or map).\n\t// If Type is set, only the field with that type will be used. If Type is not set, `string` is the default. If Type\n\t// is set to an invalid value, a validation error is thrown.\n\tCollectionType ParameterCollectionType `json:\"collectionType,omitempty\"`\n\tString         string                  `json:\"string,omitempty\"`\n\tMap            map[string]string       `json:\"map,omitempty\"`\n\tArray          []string                `json:\"array,omitempty\"`\n}\n\n// ParametersAnnouncement is a list of announcements. This list represents all the parameters which a CMP is able to \n// accept.\ntype ParametersAnnouncement []ParameterAnnouncement\n```\n\n----------------------------------------\n\nTITLE: Installing ArgoCD via kubectl and curl on Kubernetes (Shell)\nDESCRIPTION: Installs ArgoCD in the 'argocd' namespace of a Kubernetes cluster by first creating the namespace with kubectl and then applying the official ArgoCD manifests fetched via curl. Requires access to a Kubernetes cluster, kubectl, and curl installed locally. No input parameters required; the output is a deployed ArgoCD instance in the specified namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create ns argocd\ncurl -sSfL https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml | kubectl apply -n argocd -f -\n```\n\n----------------------------------------\n\nTITLE: Removing Signature Key - Example (argocd)\nDESCRIPTION: This example demonstrates how to use the `argocd proj remove-signature-key` command to remove a signature key. It shows a practical usage scenario of the command, where `PROJECT` is the name of the project and `KEY-ID` is the ID of the key to be removed. The command relies on the Argo CD CLI tool being properly configured to communicate with the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-signature-key.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Remove GnuPG signature key KEY-ID from project PROJECT\n  argocd proj remove-signature-key PROJECT KEY-ID\n```\n\n----------------------------------------\n\nTITLE: Generating bcrypt Hash\nDESCRIPTION: This shell command is used to generate a bcrypt hash of a given password for Argo CD's admin user. The hash is then used to update the `admin.password` field in the `argocd-secret` secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nargocd account bcrypt --password <YOUR-PASSWORD-HERE>\n```\n```\n\n----------------------------------------\n\nTITLE: Granting Additional RBAC and Applying Permissions - Shell\nDESCRIPTION: This snippet shows how to export the target namespace as an environment variable, optionally set a name prefix, and pipe the output of a permission generation script into 'kubectl apply' to establish the necessary RBAC permissions for the Argo CD e2e test environment. The commands require access to the test/remote/generate-permissions.sh script and 'kubectl'. Adjust 'NAMESPACE' and 'ARGOCD_E2E_NAME_PREFIX' as needed for custom installs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport NAMESPACE=argocd-e2e\n# export ARGOCD_E2E_NAME_PREFIX=argocd-cluster\n./test/remote/generate-permissions.sh | kubectl apply -f -\n\n```\n\n----------------------------------------\n\nTITLE: Passing CLI Options via Environment Variable (Shell)\nDESCRIPTION: Shows how to use the `ARGOCD_OPTS` environment variable to pass additional command-line options directly to the `argocd` CLI. This example demonstrates passing the `--grpc-web` flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/environment-variables.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nARGOCD_OPTS=\"--grpc-web\"\n```\n\n----------------------------------------\n\nTITLE: Tearing Down the Argo CD E2E Namespace - Shell\nDESCRIPTION: This command deletes the 'argocd-e2e' namespace from the Kubernetes cluster, cleaning up all resources created for the test. Requires 'kubectl' with cluster-admin or appropriate namespace deletion privileges. Run this after tests and validation are complete to avoid leaking cloud or cluster resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete ns argocd-e2e\n\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage for Specific Argo CD Module in Bash\nDESCRIPTION: This bash snippet demonstrates how to execute Go unit tests for a specific Argo CD module with coverage reporting. It requires a properly configured Go environment and Argo CD source code checked out in the expected Go workspace. The TEST_MODULE environment variable specifies the fully qualified module name, and the test command outputs results along with statement coverage percentage. This approach helps developers verify test coverage impact of their code changes at a granular module level.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n make test TEST_MODULE=github.com/argoproj/argo-cd/server/cache\n...\nok      github.com/argoproj/argo-cd/server/cache        0.029s  coverage: 89.3% of statements\n```\n\n----------------------------------------\n\nTITLE: Requesting Specific ID Token Claims for OIDC in Argo CD (YAML)\nDESCRIPTION: This YAML snippet focuses on the `requestedIDTokenClaims` section within the `oidc.config` of `argocd-cm`. It demonstrates how to request specific claims like 'email', 'groups', and 'acr' in the ID token from the OIDC provider, specifying whether they are 'essential' and optionally providing required 'values' or a specific 'value'. This is used when providers require explicit claim requests beyond standard scopes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  oidc.config: |\n    requestedIDTokenClaims:\n      email:\n        essential: true\n      groups:\n        essential: true\n        value: org:myorg\n      acr:\n        essential: true\n        values:\n        - urn:mace:incommon:iap:silver\n        - urn:mace:incommon:iap:bronze\n```\n\n----------------------------------------\n\nTITLE: Validating RBAC Configuration Using Argo CD CLI Shell Command\nDESCRIPTION: This snippet shows the usage of the `argocd admin settings rbac` command which validates and tests RBAC configurations in Argo CD. It requires an environment with the Argo CD CLI installed and configured. Users can customize behavior through various flags for authentication, kubeconfig context, TLS certificates, and connection options. The command outputs validation results indicating whether the RBAC policies are correctly configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings rbac [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling New Git File Globbing - Controller Args\nDESCRIPTION: This snippet shows how to enable the new Git file globbing by passing a command-line argument to the ApplicationSet controller. This option is one way to activate the improved globbing behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--enable-new-git-file-globbing\n```\n\n----------------------------------------\n\nTITLE: Applying custom Argo CD manifests to Kubernetes cluster\nDESCRIPTION: Applies the custom manifests with image references to the Kubernetes cluster to deploy the custom Argo CD build.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -n argocd --force -f manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Webhook Service in Argo CD ConfigMap (YAML)\nDESCRIPTION: Defines a webhook service named `github` in the `argocd-notifications-cm` ConfigMap. It sets the base `url` to the GitHub API endpoint and includes an `Authorization` header using a token variable (`$github-token`) for authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.github: |\n    url: https://api.github.com\n    headers: #optional headers\n    - name: Authorization\n      value: token $github-token\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of `argocd cert list`\nDESCRIPTION: Demonstrates the basic syntax for executing the `argocd cert list` command. This command is used to display configured certificates known to Argo CD, potentially applying flags for filtering or formatting.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cert list [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling DefaultDeny NetworkPolicy for Namespace (kubectl)\nDESCRIPTION: Annotates the 'default' namespace using `kubectl` to enforce a default deny ingress policy via NetworkPolicy. This step is mentioned as necessary for Kubernetes v1.5 & v1.6 when enabling the chart's NetworkPolicy feature and affects all pods within the target namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate namespace default \"net.beta.kubernetes.io/network-policy={\\\"ingress\\\":{\\\"isolation\\\":\\\"DefaultDeny\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Creating GKE FrontendConfig for HTTP to HTTPS Redirect (YAML)\nDESCRIPTION: Defines a GKE FrontendConfig resource named 'argocd-frontend-config' in the 'argocd' namespace. This configuration is associated with the Ingress resource to enforce automatic redirection of HTTP traffic to HTTPS for the Argo CD endpoint.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.gke.io/v1beta1\nkind: FrontendConfig\nmetadata:\n  name: argocd-frontend-config\n  namespace: argocd\nspec:\n  redirectToHttps:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Adding Private Git Repository via GitHub App Authentication - Argo CD CLI Shell Example\nDESCRIPTION: This shell example adds a private Git repository using the GitHub App authentication flow. Requires argocd CLI, GitHub App credentials (ID, installation ID), and the App's private key file. The command utilizes '--github-app-id', '--github-app-installation-id', and '--github-app-private-key-path' for authentication. Inputs are repository URL and App details; output is a repository configured for GitHub App-based auth in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://git.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\n----------------------------------------\n\nTITLE: Example Application Targeting Non-Project Cluster (Default Behavior)\nDESCRIPTION: Provides an example of an Argo CD Application resource where the destination cluster (`server`) is not necessarily within the same project (`foo-project`) as the application itself. This demonstrates the default Argo CD behavior, which can be restricted by project settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: \"some-ns\"\nspec:\n  destination:\n    # This destination might not actually be a cluster which belongs to `foo-project`\n    server: https://some-k8s-server/\n    namespace: \"some-ns\"\n  project: foo-project\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with an Existing PersistentVolumeClaim\nDESCRIPTION: Command to install Minio using an existing PersistentVolumeClaim rather than creating a new one. This requires that you've already created the PV and PVC before installation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set persistence.existingClaim=PVC_NAME stable/minio\n```\n\n----------------------------------------\n\nTITLE: Listing Argo CD Accounts via CLI Command in Shell\nDESCRIPTION: This snippet shows the basic syntax and example usage of the 'argocd account list' command in the shell. It lists Argo CD user accounts. The snippet requires the Argo CD CLI to be installed and configured with access to an Argo CD server. It outputs the account list in the default or user-specified format and supports various flags for customizing output verbosity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_list.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd account list [flags]\n```\n\nLANGUAGE: shell\nCODE:\n```\nargocd account list\n```\n\n----------------------------------------\n\nTITLE: Configuring Respect Ignore Differences in Argo CD\nDESCRIPTION: Configure an application to respect the ignoreDifferences settings during sync operations, not just during diff calculations. This example ignores replicas field in Deployments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n\n  ignoreDifferences:\n  - group: \"apps\"\n    kind: \"Deployment\"\n    jsonPointers:\n    - /spec/replicas\n\n  syncPolicy:\n    syncOptions:\n    - RespectIgnoreDifferences=true\n```\n\n----------------------------------------\n\nTITLE: Defining a Card Message Template for Google Chat (YAML)\nDESCRIPTION: This snippet defines a card message template for Google Chat notifications. It includes various widgets and sections to display information about the application, repository, revision, and author, enabling more detailed notifications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/googlechat.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  googlechat:\n    cardsV2: |\n      - header:\n          title: ArgoCD Bot Notification\n        sections:\n          - widgets:\n              - decoratedText:\n                  text: The app {{ .app.metadata.name }} has successfully synced!\n          - widgets:\n              - decoratedText:\n                  topLabel: Repository\n                  text: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}\n              - decoratedText:\n                  topLabel: Revision\n                  text: {{ .app.spec.source.targetRevision }}\n              - decoratedText:\n                  topLabel: Author\n                  text: {{ (call .repo.GetCommitMetadata .app.status.sync.revision).Author }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Kubectl Validation with Argo CD Annotation (YAML)\nDESCRIPTION: Uses the `argocd.argoproj.io/sync-options: Validate=false` annotation in a resource's metadata. This instructs Argo CD to apply the resource using `kubectl apply --validate=false`, which is necessary for certain Kubernetes types using `RawExtension`, like those found in ServiceCatalog.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Validate=false\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD Health Check Example (Shell)\nDESCRIPTION: Provides a concrete example of using the `argocd admin settings resource-overrides health` command. It specifies the resource file ('./deploy.yaml') and explicitly provides the path to the Argo CD ConfigMap ('./argocd-cm.yaml') containing the health check override configuration. This demonstrates a common usage pattern for local testing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_health.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\nargocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationSet Resource\nDESCRIPTION: This YAML snippet defines an ApplicationSet resource named `guestbook`. It leverages the `List` generator to target multiple Kubernetes clusters specified in the `elements` section.  The `template` section defines the structure of the Argo CD `Application` resources that will be created.  It uses goTemplate for parameter substitution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Ingress Resource for Argo CD with NGINX Ingress Controller Using SSL Passthrough in YAML\nDESCRIPTION: Kubernetes Ingress resource configured for ingress-nginx controller to enable SSL passthrough. This bypasses TLS termination at nginx allowing Argo CD API server to terminate TLS and correctly handle multiple protocols on port 443. Requires nginx ingress controller to be started with --enable-ssl-passthrough flag. Includes annotation to force SSL redirect by nginx ingress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-ingress\n  namespace: argocd\n  annotations:\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/ssl-passthrough: \"true\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: argocd.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: https\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Extensions RBAC in Argo CD - Namespace and Project Granularity (Plaintext)\nDESCRIPTION: Illustrates advanced RBAC policy configurations for Argo CD extensions to allow permissions scoped by project, namespace, and extension. Three approaches are shown involving either extending the `<object>` field with a namespace section, using the `<action>` field to include extension and namespace, or splitting the `<resource>` field by extension type and name. These patterns enable refined access control for complex multi-tenant environments within Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/proxy-extensions.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\np, dev, extensions, *, some-project/some-namespace/some-extension, allow\n```\n\nLANGUAGE: plaintext\nCODE:\n```\np, dev, extensions, some-extension/some-namespace, some-project/some-application, allow\n```\n\nLANGUAGE: plaintext\nCODE:\n```\np, dev, extensions/some-extension, *, some-project/some-application, allow\n```\n\n----------------------------------------\n\nTITLE: Adding a resource to the orphaned ignore list using Argo CD CLI\nDESCRIPTION: This code snippet illustrates the usage of the 'argocd proj add-orphaned-ignore' command to add specific resources, identified by their GROUP and KIND, to the project’s orphaned ignore list. It demonstrates the basic command structure with placeholders for PROJECT, GROUP, and KIND, and an optional '--name' flag to match resource names based on a pattern. This command requires dependencies like the Argo CD CLI tool and assumes proper authentication and context setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-orphaned-ignore.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj add-orphaned-ignore PROJECT GROUP KIND\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Cluster (minikube with Podman Driver)\nDESCRIPTION: This command starts a local Kubernetes cluster using minikube, specifying Podman as the driver. Podman must be installed before running this command. This allows the use of podman instead of docker.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nminikube start --driver=podman\n```\n\n----------------------------------------\n\nTITLE: Listing Command-Specific and Inherited Options for 'argocd repo rm' - Bash\nDESCRIPTION: This snippet lists both the specific and inherited flags available for the 'argocd repo rm' command, indicating the parameters that can be supplied to adjust authentication, project context, network, and client settings. Running the command with '-h' or '--help' returns this options menu, which guides users in customizing CLI behavior. Dependency is on the Argo CD CLI being installed and accessible from the command line.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_rm.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for rm\n      --project string   project of the repository\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Application in control plane namespace example in YAML\nDESCRIPTION: This YAML snippet illustrates that Applications created in the control plane's namespace (e.g., `argocd`) are considered to be created by a super-user and are therefore allowed to associate with any AppProject, regardless of the `sourceNamespaces` configuration.  This provides administrative override capability.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: superuser-app\n  namespace: argocd\nspec:\n  project: some-project\n```\n\n----------------------------------------\n\nTITLE: Inline Helm Values Using values String in Argo CD\nDESCRIPTION: An alternative approach to specify Helm values as a YAML string using the values field. This method provides a text-based way to define the same configuration as valuesObject.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  helm:\n    values: |\n      ingress:\n        enabled: true\n        path: /\n        hosts:\n          - mydomain.example.com\n        annotations:\n          kubernetes.io/ingress.class: nginx\n          kubernetes.io/tls-acme: \"true\"\n        labels: {}\n        tls:\n          - secretName: mydomain-tls\n            hosts:\n              - mydomain.example.com\n```\n\n----------------------------------------\n\nTITLE: Istio Patch for Argo CD Deployment to Enable Subpath and Insecure Mode - YAML\nDESCRIPTION: This patch YAML modifies the 'argocd-server' Deployment to add command line arguments enabling insecure mode and configuring Argo CD to serve assets under the '/argocd' base path and root path. It also adds an environment variable to adjust maximum concurrent login request count. These changes facilitate running Argo CD behind an Istio ingress with URL subpath rewriting. The patch disables Argo CD internal TLS because TLS termination will be handled by Istio ingress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# Use --insecure so Ingress can send traffic with HTTP\n# --bashref /argocd is the subpath like https://IP/argocd\n# env was added because of https://github.com/argoproj/argo-cd/issues/3572 error\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: argocd-server\nspec:\n template:\n   spec:\n     containers:\n     - args:\n       - /usr/local/bin/argocd-server\n       - --staticassets\n       - /shared/app\n       - --redis\n       - argocd-redis:6379\n       - --insecure\n       - --basehref\n       - /argocd\n       - --rootpath\n       - /argocd\n       name: argocd-server\n       env:\n       - name: ARGOCD_MAX_CONCURRENT_LOGIN_REQUESTS_COUNT\n         value: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Argo CD App Events via Annotation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to subscribe to Argo CD application events.  It uses the `notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient>` annotation within the `metadata` section of an `Application` resource. The example subscribes two Slack channels to notifications triggered by a successful synchronization event.  Dependencies include a running Argo CD instance and the Argo CD Notifications controller.  The annotation key is composed of trigger name, notification service, and recipient list.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/subscriptions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n```\n\n----------------------------------------\n\nTITLE: Granting Privileged Security Context on OpenShift - Shell\nDESCRIPTION: This command grants the default service account in the 'argocd-e2e' namespace access to the 'privileged' SecurityContextConstraint, which is required for the test container to run as root on OpenShift. The operation must be executed by a cluster administrator using the 'oc' command-line tool, and is necessary only when testing on OpenShift clusters. Failure to grant this may result in pod deployment errors.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\noc -n argocd-e2e adm policy add-scc-to-user privileged -z default\n\n```\n\n----------------------------------------\n\nTITLE: Include Mutation Webhook Changes in Diff (Argo CD Annotation) - YAML\nDESCRIPTION: Configures the Server-Side Diff calculation for this Argo CD Application to include modifications made by Kubernetes mutation admission webhooks by adding the `argocd.argoproj.io/compare-options: IncludeMutationWebhook=true` annotation. This ensures that changes introduced by webhooks are reflected in the Argo CD diff. This option is only applicable when Server-Side Diff is enabled.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diff-strategies.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: IncludeMutationWebhook=true\n...\n```\n\n----------------------------------------\n\nTITLE: Help option for 'argocd proj remove-source' command\nDESCRIPTION: This snippet shows how to invoke help information for the 'remove-source' command using the '-h' or '--help' flags, providing details on usage, options, and examples for the command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj remove-source -h\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationService - Protobuf\nDESCRIPTION: This snippet defines the ApplicationService in Protocol Buffers. It exposes two RPC methods, ListLinks and ListResourceLinks, to retrieve deep links related to applications and their resources, respectively. The `option (google.api.http).get` statements specify the HTTP endpoints for these API calls.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/deep-links.md#_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice ApplicationService {\n  rpc ListLinks(google.protobuf.Empty) returns (LinksResponse) {\n    option (google.api.http).get = \"/api/v1/applications/{name}/links\";\n  }\n\n  rpc ListResourceLinks(ApplicationResourceRequest) returns (LinksResponse) {\n    option (google.api.http).get = \"/api/v1/applications/{name}/resource/links\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppProject configuration with sourceNamespaces in YAML\nDESCRIPTION: This YAML snippet demonstrates the proposed modification to the AppProject resource, introducing the `sourceNamespaces` field. This field specifies the namespaces from which Application resources are allowed to reference this AppProject.  It allows Application resources in 'foo-ns' or 'bar-ns' to associate with this project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: some-project\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - foo-ns\n  - bar-ns\n```\n\n----------------------------------------\n\nTITLE: Setting ApplicationSet Policy with create-update flag (Shell)\nDESCRIPTION: This command line snippet demonstrates how to set the ApplicationSet's `policy` to `create-update` with command line argument. It requires the argocd applicationset controller to be deployed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n--policy create-update\n```\n\n----------------------------------------\n\nTITLE: Configuring Jsonnet Build Environment via Argo CD CLI (Bash)\nDESCRIPTION: Demonstrates using the `argocd app create` command to set Jsonnet external variables (`--jsonnet-ext-var-str`), top-level arguments (`--jsonnet-tla-str`), and shared libraries (`--jsonnet-libs`) for an Argo CD application named APPNAME. It utilizes standard Argo CD environment variables `${ARGOCD_APP_NAME}` and `${ARGOCD_APP_NAMESPACE}` for dynamic configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/jsonnet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create APPNAME \\\n  --jsonnet-ext-var-str 'app=${ARGOCD_APP_NAME}' \\\n  --jsonnet-tla-str 'ns=${ARGOCD_APP_NAMESPACE}' \\\n  --jsonnet-libs 'vendor'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex to Request Additional OIDC Scopes in YAML\nDESCRIPTION: This YAML snippet shows how to configure the Dex connector within the `argocd-cm` ConfigMap's `dex.config` key to request additional scopes, specifically 'groups', from the upstream OIDC provider. It requires setting `insecureEnableGroups` to true and lists 'profile', 'email', and 'groups' under the `scopes` key. Note that group information is only refreshed upon re-authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  url: \"https://argocd.example.com\"\n  dex.config: |\n    connectors:\n      # OIDC\n      - type: oidc\n        id: oidc\n        name: OIDC\n        config:\n          issuer: https://example-OIDC-provider.example.com\n          clientID: aaaabbbbccccddddeee\n          clientSecret: $dex.oidc.clientSecret\n          insecureEnableGroups: true\n          scopes:\n          - profile\n          - email\n          - groups\n```\n\n----------------------------------------\n\nTITLE: Defining Trust Policy for Argo CD EKS Management Role (JSON)\nDESCRIPTION: Shows an example AWS IAM trust policy (in JSON format) for the Argo CD management role required for EKS integration with IRSA. It allows specific Argo CD service accounts (`argocd-application-controller`, `argocd-applicationset-controller`, `argocd-server`) to assume this role via web identity federation (OIDC) based on the EKS cluster's OIDC provider. It also includes a statement allowing the role to assume itself, which might be necessary for certain chained assumption scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"ExplicitSelfRoleAssumption\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"sts:AssumeRole\",\n            \"Condition\": {\n                \"ArnLike\": {\n                  \"aws:PrincipalArn\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ARGO_CD_MANAGEMENT_IAM_ROLE_NAME>\"\n                }\n            }\n        },\n        {\n            \"Sid\": \"ServiceAccountRoleAssumption\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:oidc-provider/oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:sub\": [\n                        \"system:serviceaccount:argocd:argocd-application-controller\",\n                        \"system:serviceaccount:argocd:argocd-applicationset-controller\",\n                        \"system:serviceaccount:argocd:argocd-server\"\n                    ],\n                    \"oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:aud\": \"sts.amazonaws.com\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Removing Repository Credentials\nDESCRIPTION: Demonstrates how to use the `argocd repocreds rm` command to remove credentials associated with the repository URL `https://git.example.com/repos/`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_rm.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove credentials for the repositories with URL https://git.example.com/repos\nargocd repocreds rm https://git.example.com/repos/\n```\n\n----------------------------------------\n\nTITLE: Accessing Revision in Multi-Source Application Templates for Argo CD Notifications (YAML)\nDESCRIPTION: Provides a template snippet showing how to access the revision for the first source in a multi-source application using the `index` function (`{{index .app.status.operationState.syncResult.revisions 0}}`) within Argo CD notification templates. This adapts the template to handle the `revisions` array present in multi-source application statuses, addressing errors like `404 Not Found` when posting statuses.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.example: |\n  github:\n    revisionPath: \"{{index .app.status.operationState.syncResult.revisions 0}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Chat Webhook URL in ConfigMap (YAML)\nDESCRIPTION: This ConfigMap stores the mapping between a space name and its corresponding Google Chat webhook URL, allowing Argo CD to send notifications to specific chat spaces. The webhook URL is retrieved from a Kubernetes secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/googlechat.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.googlechat: |\n    webhooks:\n      spaceName: $space-webhook-url\n```\n\n----------------------------------------\n\nTITLE: Application Annotation Example (YAML)\nDESCRIPTION: This YAML snippet showcases an example of using application annotations to leverage the `oncePer` field. It showcases how to trigger notifications only once when a field value changes. It also depends on the `antonmedv/expr` library.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    example.com/version: v0.1\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ignore-differences Command\nDESCRIPTION: This example demonstrates how to use the `argocd admin settings resource-overrides ignore-differences` command. It applies the command to a specific YAML file (`./deploy.yaml`) and explicitly provides the path to the Argo CD ConfigMap (`./argocd-cm.yaml`) to load the ignore differences configuration from a local file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: RBAC Rule Example\nDESCRIPTION: This code snippet provides an example of RBAC (Role-Based Access Control) rules. The example demonstrates rules necessary for administrators to permit developers to manage project-scoped repositories. It uses the `<projectName>/<name>` pattern to define permissions. This configuration allows users, identified by the role 'proj:my-project:admin', to create, delete, and update project-scoped repositories within the 'my-project' project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/project-repos-and-clusters.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```\np, proj:my-project:admin, repositories, create, my-project/*, allow\np, proj:my-project:admin, repositories, delete, my-project/*, allow\np, proj:my-project:admin, repositories, update, my-project/*, allow\n```\n```\n\n----------------------------------------\n\nTITLE: Go Type Definitions for CMP Parameters (Go)\nDESCRIPTION: Defines the Go structs (`Parameter` and `Parameters`) used internally by Argo CD to represent the parameters passed to ConfigManagementPlugins. This shows the underlying data structure corresponding to the JSON serialization format, where each parameter has a name and a value stored in either the `String`, `Map`, or `Array` field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage cmp\n\n// Parameter represents a single parameter name and its value. One of Value, Map, or Array must be set.\ntype Parameter struct {\n\t// Name is the name identifying a parameter. (required)\n\tName  string                     `json:\"name,omitempty\"`\n\tString         string            `json:\"string,omitempty\"`\n\tMap            map[string]string `json:\"map,omitempty\"`\n\tArray          []string          `json:\"array,omitempty\"`\n}\n\n// Parameters is a list of parameters to be sent to a CMP for manifest generation.\ntype Parameters []Parameter\n```\n\n----------------------------------------\n\nTITLE: Complete ApplicationSet Example with List Generator and Selector\nDESCRIPTION: Provides a full example YAML of an ApplicationSet resource that uses a list generator filtered by matchLabels, with specified template for deploying guestbook application instances per filtered cluster, including source repository, target revision, and destination details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Post-Selector.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchLabels:\n        env: staging\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj-labs/applicationset.git\n        targetRevision: HEAD\n        path: examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n----------------------------------------\n\nTITLE: Removing a Source from an Argo CD Application Using Bash CLI\nDESCRIPTION: This snippet demonstrates the usage pattern of the 'argocd app remove-source' CLI command, which removes a source from an application's multiple sources. The command requires the application name and supports flags such as '--source-position' to specify the index of the source to remove (1-based) or '--source-name' to specify the source by its name. The snippet also includes example commands illustrating both removal methods. Dependencies include having the Argo CD CLI installed and configured. Inputs are the target application name and source identifier (position or name). Outputs are updated application source configurations with the specified source removed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_remove-source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app remove-source APPNAME [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Remove the source at position 1 from application's sources. Counting starts at 1.\n  argocd app remove-source myapplication --source-position 1\n  \n  # Remove the source named \"test\" from application's sources.\n  argocd app remove-source myapplication --source-name test\n```\n\n----------------------------------------\n\nTITLE: Removing TLS Certificates - ArgoCD\nDESCRIPTION: This command removes all TLS certificates associated with a specified server. The `--cert-type https` flag specifies that only HTTPS certificates should be removed.  The server name (cd.example.com) is passed as an argument.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nargocd cert rm --cert-type https cd.example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Commit Manifests RPC Messages in Protobuf\nDESCRIPTION: Specifies the Protocol Buffer messages (`CommitManifests` and `CommitPathDetails`) used for the RPC call to the CommitManifests service. This service is responsible for pushing the hydrated Kubernetes manifests and associated README/metadata files to a specified Git repository and branch.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n// CommitManifests represents the caller's request for some Kubernetes manifests to be pushed to a git repository.\nmessage CommitManifests {\n  // repoURL is the URL of the repo we're pushing to. HTTPS or SSH URLs are acceptable.\n  required string repoURL = 1;\n  // targetBranch is the name of the branch we're pushing to.\n  required string targetBranch = 2;\n  // drySHA is the full SHA256 hash of the \"dry commit\" from which the manifests were hydrated.\n  required string drySHA = 3;\n  // commitAuthor is the name of the author of the dry commit.\n  required string commitAuthor = 4;\n  // commitMessage is the short commit message from the dry commit.\n  required string commitMessage = 5;\n  // commitTime is the dry commit timestamp.\n  required string commitTime = 6;\n  // details holds the information about the actual hydrated manifests.\n  repeated CommitPathDetails details = 7;\n}\n\n// CommitManifestDetails represents the details about a \nmessage CommitPathDetails {\n  // path is the path to the directory to which these manifests should be written.\n  required string path = 1;\n  // manifests is a list of JSON documents representing the Kubernetes manifests.\n  repeated string manifests = 2;\n  // readme is a string which will be written to a README.md alongside the manifest. \n  required string readme = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Links Template Update (Old)\nDESCRIPTION: This is an example of the old deep link configuration using `.metadata.name`.  It demonstrates how links to external resources can be created based on Argo CD resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.6-2.7.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresource.links: |\n  - url: https://mycompany.splunk.com?search={{.metadata.name}}\n    title: Splunk\n    if: kind == \"Pod\" || kind == \"Deployment\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Dex Sub Claim\nDESCRIPTION: This shell command decodes a base64 encoded string representing a Dex subject claim. This is used to determine the correct user ID for RBAC policies when using Dex SSO authentication in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"ChdleGFtcGxlQGFyZ29wcm9qLmlvEgJkZXhfY29ubl9pZA\" | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Argo CD Project Role Commands (Shell)\nDESCRIPTION: Displays common options inherited from parent Argo CD CLI commands that can be used with `argocd proj role list-tokens`. These options configure aspects like server connection details, authentication methods (token, client certificates), Kubernetes context, logging levels, TLS settings, and component names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list-tokens.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Restarting specific Argo CD service after code changes\nDESCRIPTION: Restarts a specific Argo CD service using goreman after making code changes to apply the updates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Example for working on the repo server Go code, see other service names in `Procfile`\ngoreman run restart repo-server\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for Dynamic Parameter Announcement (Helm Parameters)\nDESCRIPTION: This JSON array exemplifies a parameter announcement generated by the CMP for a Helm chart, including a map of default image values. This is an example output that may be sent to the UI to describe available overrides for the chart. The announcement includes tooltip and collection details; keys in 'map' correspond to override-able values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"helm-parameters\",\n    \"collectionType\": \"map\",\n    \"title\": \"Helm Parameters\",\n    \"tooltip\": \"Parameters to override when generating manifests with Helm\",\n    \"map\": {\n      \"image.repository\": \"my.example.com/gcr-proxy/heptio-images/ks-guestbook-demo\",\n      \"image.tag\": \"0.1\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Selective Sync via Application Spec (YAML)\nDESCRIPTION: Adds the `ApplyOutOfSyncOnly=true` option to the `spec.syncPolicy.syncOptions` array in an Argo CD Application manifest. This optimizes the synchronization process by ensuring that Argo CD only attempts to apply resources that are currently detected as being OutOfSync, reducing load on the Kubernetes API server for large applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - ApplyOutOfSyncOnly=true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Root CA for OIDC Provider TLS Verification in Argo CD (YAML)\nDESCRIPTION: This YAML snippet illustrates how to add a custom root CA certificate within the `oidc.config` key of `argocd-cm`. This is necessary when Argo CD needs to communicate with an OIDC provider whose TLS certificate is signed by an internal or custom certificate authority. The PEM-encoded certificate is placed under the `rootCA` key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n  oidc.config: |\n    ...\n    rootCA: |\n      -----BEGIN CERTIFICATE-----\n      ... encoded certificate data here ...\n      -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Sourcing Bash Completion Directly (Shell)\nDESCRIPTION: This command demonstrates how to source the generated bash completion script directly into the current shell session. This requires bash completions to be installed and enabled in the environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_completion.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ source <(argocd completion bash)\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Image with SLSA (Minor Version)\nDESCRIPTION: This shell script verifies the SLSA provenance of a container image using slsa-verifier with semantic versioning for the source tag. It uses `--source-versioned-tag` to verify up to the major or minor version. The script leverages the same prerequisites and structure as the previous verification, with a modified flag for semantic versioning.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nslsa-verifier verify-image \"$IMAGE\" \\\n    --source-uri github.com/argoproj/argo-cd \\\n    --source-versioned-tag v2 # Note: May use v2.7 for minor version verification.\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Application Health Assessment\nDESCRIPTION: This Lua script defines how Argo CD calculates the health status of an Application resource. It extracts the status and message from the Application's `status.health` field, defaulting to \"Progressing\" if the health field is not present.  It is configured as part of the argocd-cm ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.7-1.8.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nhs = {}\nhs.status = \"Progressing\"\nhs.message = \"\"\nif obj.status ~= nil then\n  if obj.status.health ~= nil then\n    hs.status = obj.status.health.status\n    if obj.status.health.message ~= nil then\n      hs.message = obj.status.health.message\n    end\n  end\nend\nreturn hs\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD CLI using Homebrew\nDESCRIPTION: A command to install the Argo CD CLI using the Homebrew package manager, which works on both Linux/WSL and macOS.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install argocd\n```\n\n----------------------------------------\n\nTITLE: Example RBAC Policies\nDESCRIPTION: This code block provides example RBAC policies. The first set of policies shows incorrect policies based on the Dex sub claim and the second set shows the correct policies based on `federated_claims.user_id`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Policies based on the Dex sub claim (wrong)\n- g, ChdleGFtcGxlQGFyZ29wcm9qLmlvEgJkZXhfY29ubl9pZA, role:example\n- p, ChdleGFtcGxlQGFyZ29wcm9qLmlvEgJkZXhfY29ubl9pZA, applications, *, *, allow\n\n# Policies now based on federated_claims.user_id claim (correct)\n- g, example@argoproj.io, role:example\n- p, example@argoproj.io, applications, *, *, allow\n```\n\n----------------------------------------\n\nTITLE: Examples of argocd account delete-token Usage\nDESCRIPTION: Example commands showing how to delete tokens for the current logged-in account and for a specific named account.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_delete-token.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete token of the currently logged in account\nargocd account delete-token ID\n\n# Delete token of the account with the specified name\nargocd account delete-token --account <account-name> ID\n```\n\n----------------------------------------\n\nTITLE: Running Full E2E Test Suite with Remote Wrapper Script - Shell\nDESCRIPTION: This command uses a shell wrapper script to execute the local test suite against the cluster. It is designed to be run after all environment variables are set, and will invoke 'make test-local' inside the testing environment. Dependencies include the test/remote/run-e2e-remote.sh script, 'make', and the test Docker image/workload deployed in previous steps.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./test/remote/run-e2e-remote.sh make test-local\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeCommit as SCM Provider in ApplicationSet (Alpha)\nDESCRIPTION: YAML configuration to set up AWS CodeCommit as an SCM provider for ApplicationSet generator. Includes region selection, IAM role assumption, tag-based repository filtering, and branch scanning options. Requires specific AWS IAM permissions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-SCM-Provider.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n    - scmProvider:\n        awsCodeCommit:\n          # AWS region to scan repos.\n          # default to the environmental region from ApplicationSet controller.\n          region: us-east-1\n          # AWS role to assume to scan repos.\n          # default to the environmental role from ApplicationSet controller.\n          role: arn:aws:iam::111111111111:role/argocd-application-set-discovery\n          # If true, scan every branch of every repository. If false, scan only the main branch. Defaults to false.\n          allBranches: true\n          # AWS resource tags to filter repos with.\n          # see https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-TagFilters for details\n          # default to no tagFilters, to include all repos in the region.\n          tagFilters:\n            - key: organization\n              value: platform-engineering\n            - key: argo-ready\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Manually Assigning Cluster Shard in Argo CD Secret - YAML\nDESCRIPTION: This YAML snippet demonstrates how to manually assign a specific shard number to a registered cluster by patching its Kubernetes Secret. Setting the `shard` field in the `stringData` section forces the `argocd-application-controller` to process applications for this cluster on the specified shard.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  shard: 1\n  name: mycluster.example.com\n  server: https://mycluster.example.com\n  config: |\n    {\n      \"bearerToken\": \"<authentication token>\",\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Generate Bcrypt Hash Example\nDESCRIPTION: Demonstrates how to use the `argocd account bcrypt` command to generate a bcrypt hash for a specific password provided via the `--password` flag. Replace `YOUR_PASSWORD` with the actual password.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_bcrypt.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generate bcrypt hash for any password \nargocd account bcrypt --password YOUR_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `argocd proj remove-destination`\nDESCRIPTION: Demonstrates how to use the command to remove a specific destination, identified by its server address (SERVER) and namespace (NAMESPACE), from the project named PROJECT.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-destination.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove the destination (SERVER) from the specified namespace (NAMESPACE) on the project with name PROJECT\nargocd proj remove-destination PROJECT SERVER NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Argo CD Template Configuration for FIFO SQS Queue\nDESCRIPTION: This YAML snippet configures the message template for a FIFO SQS queue.  It adds the `messageGroupId` field to the template. The `messageGroupId` ensures that messages are processed in order within the SQS queue.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/awssqs.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.deployment-ready: |\n  message: |\n    Deployment {{.obj.metadata.name}} is ready!\n  messageGroupId: {{.obj.metadata.name}}-deployment\n```\n\n----------------------------------------\n\nTITLE: Old RBAC Policy Configuration for Broad Resource Privileges in Argo CD (CSV)\nDESCRIPTION: This CSV snippet shows a deprecated RBAC policy granting the 'org-admin' role broad create privileges across all resources in Argo CD by using wildcards. The 'resource' and 'action' fields are set to '*', resulting in access to any newly introduced resource types (e.g., applicationsets). No external dependencies are required; must be placed in the appropriate RBAC policy configuration. Key parameters: role ID, resource ('*'), action ('create'), object ('*'), and effect ('allow'). Input: RBAC policy definition. Output: intializes catch-all permissions, which may be too broad after upgrades.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.4-2.5.md#_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, role:org-admin, *, create, *, allow\n\n```\n\n----------------------------------------\n\nTITLE: Exposing Argo CD API Server (Bash)\nDESCRIPTION: This command exposes the Argo CD API server for local access using `kubectl port-forward`. It forwards port 8080 on the local machine to port 443 of the `argocd-server` service within the `argocd` namespace.  This allows access to the Argo CD UI from the local machine. The output is a running port-forwarding process.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/try_argo_cd_locally.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Enabling the Source Hydrator\nDESCRIPTION: This YAML snippet demonstrates how to enable the source hydrator by setting the `hydrator.enabled` field to `true` in the `argocd-cmd-params-cm` ConfigMap. This configuration must be applied and the Argo CD controller and API server must be restarted for the changes to take effect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/source-hydrator.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  hydrator.enabled: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trust Object for ArgoCD in OpenUnison (YAML)\nDESCRIPTION: Defines a Trust resource in OpenUnison to establish an OIDC trust relationship with ArgoCD, specifying URLs, token settings, and callback endpoints. Dependencies include deploying this Trust in the openunison namespace aligned with the ArgoCD hostname. This configuration facilitates SSO integration and token management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/openunison.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: openunison.tremolo.io/v1\nkind: Trust\nmetadata:\n  name: argocd\n  namespace: openunison\nspec:\n  accessTokenSkewMillis: 120000\n  accessTokenTimeToLive: 1200000\n  authChainName: login-service\n  clientId: argocd\n  codeLastMileKeyName: lastmile-oidc\n  codeTokenSkewMilis: 60000\n  publicEndpoint: true\n  redirectURI:\n  - https://argocd.apps.domain.com/auth/callback\n  - http://localhost:8085/auth/callback\n  signedUserInfo: true\n  verifyRedirect: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Secret for Argo CD Notifications (YAML)\nDESCRIPTION: Illustrates the creation of a Kubernetes Secret named `argocd-notifications-secret`. This Secret stores sensitive data (like `sampleWebhookToken`) that can be securely accessed within notification templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-notifications-secret\nstringData:\n  sampleWebhookToken: secret-token\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Docker Image Configuration for Plugin\nDESCRIPTION: This Dockerfile snippet illustrates how to add the plugin configuration file directly into a custom sidecar image for Argo CD. This allows for easy customization and deployment of the config management plugin. The plugin.yaml file must be placed at /home/argocd/cmp-server/config/ within the image.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /home/argocd/cmp-server/config/\nCOPY plugin.yaml ./\n```\n\n----------------------------------------\n\nTITLE: Verifying CLI Artifact with SLSA (Minor Version)\nDESCRIPTION: This shell script verifies the SLSA provenance of a CLI artifact and uses semantic versioning for the source tag. It uses `--source-versioned-tag` to verify up to the major or minor version. This offers the same functionality of CLI verification but with a focus on semantic versioning for greater flexibility.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nslsa-verifier verify-artifact argocd-linux-amd64 \\\n  --provenance-path argocd-cli.intoto.jsonl \\\n  --source-uri github.com/argoproj/argo-cd \\\n  --source-versioned-tag v2 # Note: May use v2.7 for minor version verification.\n```\n\n----------------------------------------\n\nTITLE: Create Secret for Google Auth JSON (kubectl)\nDESCRIPTION: Creates a Kubernetes secret named `argocd-google-groups-json` in the `argocd` namespace. This secret stores the base64 encoded Google authentication JSON file under the key `googleAuth.json`. The `JSON_FILE_BASE64_ENCODED` placeholder should be replaced with the actual base64 encoded string.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-google-groups-json\n  namespace: argocd\ndata:\n  googleAuth.json: JSON_FILE_BASE64_ENCODED\n```\n\n----------------------------------------\n\nTITLE: Deep Links Template Update (New)\nDESCRIPTION: This is an example of the updated deep link configuration, showing how to access other values like `project` to improve the links and inject metadata. The new template now uses `.resource.metadata.name` and `.project.metadata.label.env`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.6-2.7.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresource.links: |\n  - url: https://mycompany.splunk.com?search={{.resource.metadata.name}}&env={{.project.metadata.label.env}}\n    title: Splunk\n    if: resource.kind == \"Pod\" || resource.kind == \"Deployment\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Argo CD Notification Template in YAML\nDESCRIPTION: This snippet demonstrates how to define a basic notification template within the `argocd-notifications-cm` ConfigMap. It uses Go template syntax to access application metadata (`.app.metadata.name`) and status (`.app.status.sync.status`), along with context variables like the Argo CD URL (`.context.argocdUrl`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.my-custom-template-slack-template: |\n    message: |\n      Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}.\n      Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n```\n\n----------------------------------------\n\nTITLE: Adding Private Git Repository via HTTPS with Insecure TLS Verification - Argo CD CLI Shell Example\nDESCRIPTION: This snippet adds a private Git repository over HTTPS with username/password credentials but skips verification of the server's TLS certificate. Requires argocd CLI and repository credentials. The '--insecure-skip-server-verification' flag disables certificate verification, which can expose connections to security risks. Input is repository URL and credentials; output is a repository added to Argo CD without strict TLS checks.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo_add.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nargocd repo add https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification\n```\n\n----------------------------------------\n\nTITLE: Retrieving Argo CD Admin Password (Bash)\nDESCRIPTION: This command retrieves the initial admin password for Argo CD from the Kubernetes cluster. It uses `kubectl` to get the secret named `argocd-initial-admin-secret`, extracts the base64 encoded password from the `data.password` field, and then decodes it using `base64 -d`.  Requires a running Kubernetes cluster with Argo CD installed. The output is the admin password, which can be used to log in to the Argo CD UI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/try_argo_cd_locally.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Patching Role for Namespaced Argo (kubectl)\nDESCRIPTION: This command patches the `argocd-server` Role to allow it to `exec` into pods within a namespaced Argo CD setup.  It adds a rule granting the `create` verb on the `pods/exec` resource.  Requires `kubectl` with appropriate permissions.  The command targets the role identified by `<argocd-server-role-name>` in the `argocd` namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/web_based_terminal.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl patch role <argocd-server-role-name> -n argocd - type='json' -p='[{\"op\": \"add\", \"path\": \"/rules/-\", \"value\": {\"apiGroups\": [\"*\"], \"resources\": [\"pods/exec\"], \"verbs\": [\"create\"]}}]'\n```\n\n----------------------------------------\n\nTITLE: Escaping variables in Argo CD commands\nDESCRIPTION: This code snippet shows how to escape a variable in an Argo CD command to prevent interpolation. By using `$$` instead of `$`, the variable will be treated as a literal string.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/build-environment.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncommand:\n  - sh\n  - -c\n  - |\n    echo $$FOO\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Connection with Disabled Algorithm\nDESCRIPTION: This snippet shows how to test an SSH connection with the `ssh-rsa` algorithm disabled. This is a diagnostic step to check if a server still uses this algorithm, which is no longer supported by recent versions of OpenSSH (used by Argo CD).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.2-2.3.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nssh -oHostKeyAlgorithms=-ssh-rsa user@host\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for `argocd proj remove-destination`\nDESCRIPTION: Lists the options available specifically for the `remove-destination` subcommand. The primary option is `-h` or `--help` to display help information.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-destination.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for remove-destination\n```\n\n----------------------------------------\n\nTITLE: Extracting Argo CD Admin Password for Remote/OpenShift Installations - Shell\nDESCRIPTION: This snippet reads and decodes the admin password from the 'argocd-test-cluster' secret in the 'argocd-e2e' namespace using the 'oc' tool, specifically for OpenShift installations managed by Argo CD Operator. Requires 'oc' and 'base64', and the secret name may vary with different install configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_E2E_ADMIN_PASSWORD=$(oc -n argocd-e2e get secrets argocd-test-cluster -o jsonpath='{.data.admin\\.password}' | base64 -d)\n\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationLabelStats (Go)\nDESCRIPTION: This Go snippet defines the `ApplicationLabelStats` struct, which is used to represent statistics about application labels. It includes the `Key` and `Values` fields, providing a way to aggregate information about application labels. The dependencies are the standard Go libraries. The expected input is a list of applications, and the output is a structured representation of application label statistics.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/server-side-pagination.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype ApplicationLabelStats struct {\n\tKey    string   `json:\"key\" protobuf:\"bytes,1,opt,name=key\"`\n\tValues []string `json:\"values\" protobuf:\"bytes,2,opt,name=values\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Argo CD Install Manifest for Istio Setup - Bash\nDESCRIPTION: A Bash command that downloads the latest stable Argo CD install.yaml manifest from the official GitHub repository. This manifest is used as the base configuration for deploying Argo CD before applying Istio-specific customizations. The command uses curl options: '-k' to ignore SSL certificate errors, '-L' to follow redirects, and '-s' for silent output.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -kLs -o install.yaml https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing the argocd Command (Shell)\nDESCRIPTION: Shows the basic syntax for executing the `argocd` command. This is the main entry point for the Argo CD CLI, accepting various flags to control its behavior and subcommands to perform specific actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd [flags]\n```\n\n----------------------------------------\n\nTITLE: Examples of Using argocd admin notifications trigger run\nDESCRIPTION: Demonstrates how to execute the 'on-sync-status-unknown' trigger for a sample application defined in './sample-app.yaml'. The second example shows overriding the default ConfigMap ('argocd-notifications-cm') with a custom one ('./my-config-map.yaml') using the `--config-map` flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Execute trigger configured in 'argocd-notification-cm' ConfigMap\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml\n\n# Execute trigger using my-config-map.yaml instead of 'argocd-notifications-cm' ConfigMap\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml \\\n    --config-map ./my-config-map.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client (mc) with External IP - Shell\nDESCRIPTION: This command configures the MinIO client (mc) to connect to the MinIO server using the external IP address when the service is exposed as a LoadBalancer. It adds a new host alias (`{{ template \"minio.fullname\" . }}-local`) that points to the MinIO server's external address and port. It also provides the access key and secret key for authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/NOTES.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmc config host add {{ template \"minio.fullname\" . }}-local http://<External-IP>:{{ .Values.service.port }} {{ .Values.accessKey }} {{ .Values.secretKey }} S3v4\n```\n\n----------------------------------------\n\nTITLE: Querying Application Resource Health Source - Shell - sh\nDESCRIPTION: Provides a shell command to extract the `resourceHealthSource` field from a specific Application CR to verify where health status is tracked. If the value is blank, health status is stored in the Application resource. The command requires replacing `<my app>` with the application's name and `kubectl` access to the Argo CD namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get applications.argoproj.io <my app> -n argocd -o jsonpath='{.status.resourceHealthSource}'\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Credentials Profile Secret for Argo CD - YAML\nDESCRIPTION: Declares a Kubernetes Secret of type Opaque containing an AWS credentials profile file. The file provides the region and all necessary access keys, enabling Argo CD components to authenticate using the mounted profile. The secret must match volume mount and file name expectations of previous configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-aws-profile\ntype: Opaque\nstringData:\n  my-profile-file: |\n    [default]\n    region = <aws_region>\n    aws_access_key_id = <aws_access_key_id>\n    aws_secret_access_key = <aws_secret_access_key>\n    aws_session_token = <aws_session_token>\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for BYOI (Build Your Own Image) with new runtime user in Argo CD v2.1\nDESCRIPTION: Example Dockerfile showing how to correctly set the runtime user when building a custom Argo CD image. The user has changed from 'argocd' to numeric user ID '999'. The snippet includes installing custom dependencies and proper user switching.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.0-2.1.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM argoproj/argocd:latest\n\n# Switch to root for the ability to perform install\nUSER root\n\n# Something custom here\nRUN apt-get update\n\n# Switch back to non-root user\n\n# deprecated: USER argocd\nUSER 999\n```\n\n----------------------------------------\n\nTITLE: Generating SSH known_hosts File with ssh-keyscan and ssh-keygen Using Bash\nDESCRIPTION: This Bash snippet demonstrates how to generate and hash an SSH known_hosts file for a Git repository hosted on a custom port. The commands first scan the SSH public key of the specified Git server (`git.repo.com`) on port 1234, then hash the generated known_hosts file to obfuscate hostnames before displaying its content. This ensures SSH host keys are correctly recorded for secure SSH connections. Dependencies include having ssh-keyscan and ssh-keygen installed and accessible.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/examples/known-hosts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keyscan -p 1234 git.repo.com > known_hosts\nssh-keygen -Hf known_hosts\ncat known_hosts\n```\n\n----------------------------------------\n\nTITLE: Send Alertmanager Notification with Custom API Path\nDESCRIPTION: This ConfigMap configures the Argo CD notifications controller to send alerts to an Alertmanager instance with a custom API path over HTTPS. It specifies the target, scheme, API path, and disables SSL verification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:443\n    scheme: https\n    apiPath: /api/events\n    insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: CLI flag to bypass certificate verification\nDESCRIPTION: This command-line flag is used with the Argo CD CLI to bypass TLS certificate verification. This is useful in testing environments where a valid certificate has not been installed, however should NOT be used in production.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nargocd ... --insecure\n```\n```\n\n----------------------------------------\n\nTITLE: Querying a Test Role in a Test Project Using Argo CD CLI in Shell\nDESCRIPTION: This example demonstrates using the argocd proj role get command to retrieve the test-role from the test-project, displaying role metadata and active JWT tokens. Requires that the user has permission to interact with the specified Argo CD project and role via the CLI. Output includes the role name, description, associated policy definitions, and any issued JWT token information; adjust the project and role names as needed for actual usage.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_get.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                  EXPIRES-AT\n1696774900  2023-10-08T15:21:40+01:00 (4 minutes ago)  <none>\n1696759698  2023-10-08T11:08:18+01:00 (4 hours ago)    <none>\n```\n\n----------------------------------------\n\nTITLE: Application Source with ref field\nDESCRIPTION: This YAML snippet shows the use of the `ref` field in an `ApplicationSource`.  This allows referencing files from one source within another, creating dependencies between different sources.  It creates a named reference to a repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/multiple-sources-for-applications.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sources:\n    - repoURL: https://github.com/my-org/my-repo  # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"myRepo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n```\n\n----------------------------------------\n\nTITLE: Global options inherited from parent commands for argocd repocreds list\nDESCRIPTION: Global options that can be used with the 'argocd repocreds list' command, inherited from parent commands. These include authentication, connection, and configuration options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_list.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Building Argo CD Docs with Docker (Bash)\nDESCRIPTION: Execute this command to build the documentation site within a Docker container without serving it. This is primarily used to verify the build process and check for errors before submitting changes. Requires Docker and the project's Makefile.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/docs-site.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmake build-docs\n```\n\n----------------------------------------\n\nTITLE: Example: Get All Triggers - Argo CD CLI\nDESCRIPTION: This example shows how to retrieve all configured triggers using the `argocd admin notifications trigger get` command. It takes no specific parameters, and it uses the default output format, which is wide.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_trigger_get.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nargocd admin notifications trigger get\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD UI Base Path (YAML)\nDESCRIPTION: Shows a partial Kubernetes Deployment manifest for 'argocd-server', modifying the container command to include the `--basehref` flag (e.g., `--basehref /argo-cd`). This configures only the Argo CD UI base URL, while the API remains at the root. Requires a reverse proxy with URL rewriting.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      name: argocd-server\n      containers:\n      - command:\n        - /argocd-server\n        - --repo-server\n        - argocd-repo-server:8081\n        - --basehref\n        - /argo-cd\n```\n\n----------------------------------------\n\nTITLE: Printing SLSA Provenance for CLI Artifact\nDESCRIPTION: This bash script verifies a CLI artifact and prints its provenance using `jq`. Similar to container image provenance verification, this script uses `slsa-verifier verify-artifact` with the `--print-provenance` option to show the encoded payload. It requires slsa-verifier and jq.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/signed-release-assets.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nslsa-verifier verify-artifact argocd-linux-amd64 \\\n  --provenance-path argocd-cli.intoto.jsonl \\\n  --source-uri github.com/argoproj/argo-cd \\\n  --source-tag v2.7.0 \\\n  --print-provenance | jq\n```\n\n----------------------------------------\n\nTITLE: Using argocd repocreds list command with basic syntax\nDESCRIPTION: Basic command for listing all configured repository credentials in Argo CD with default output format (wide).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd repocreds list [flags]\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch with Upstream Main\nDESCRIPTION: This set of commands fetches changes from the upstream repository and then integrates them into the current branch, ensuring it's up-to-date with the latest changes.  It requires that the upstream remote has been added.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Cloning Argo CD Repository\nDESCRIPTION: This command clones the forked Argo CD repository to the local machine.  It requires that the user has already forked the Argo CD repository on their GitHub account.  The output will be the local directory of the repository.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/argo-cd.git\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of argocd admin settings validate\nDESCRIPTION: Provides the basic syntax for the 'argocd admin settings validate' command, used to validate settings in 'argocd-cm' ConfigMap and 'argocd-secret' Secret. Flags can be appended to customize validation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_validate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings validate [flags]\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Resources Bash Example\nDESCRIPTION: This Bash example demonstrates the application of Kubernetes resources using `kubectl apply`. The user is instructed to apply `placementdecision.yaml`, `configMap.yaml`, and `ducktype-example.yaml`. These files should contain necessary resources for the Cluster Decision Resource generator to function.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/applicationset/examples/clusterDecisionResource/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl apply -f ./placementdecision.yaml\nkubectl apply -f ./configMap.yaml\nkubectl apply -f ./ducktype-example.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Pull Request Generator in Argo CD ApplicationSet (YAML)\nDESCRIPTION: Shows how to configure the `pullRequest` generator specifically for GitHub. It includes parameters for specifying the organization (`owner`), repository (`repo`), optional GitHub Enterprise API URL (`api`), authentication token (`tokenRef` or `appSecretName`), and filtering by labels (`labels`). Requires an Argo CD ApplicationSet and optionally a Kubernetes Secret for the token or GitHub App credentials.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      github:\n        # The GitHub organization or user.\n        owner: myorg\n        # The Github repository\n        repo: myrepository\n        # For GitHub Enterprise (optional)\n        api: https://git.example.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: github-token\n          key: token\n        # (optional) use a GitHub App to access the API instead of a PAT.\n        appSecretName: github-app-repo-creds\n        # Labels is used to filter the PRs that you want to target. (optional)\n        labels:\n        - preview\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Subscribing Argo CD Application to Grafana Notifications (YAML)\nDESCRIPTION: Shows how to annotate an Argo CD Application resource to subscribe to Grafana notifications for specific triggers. The annotation key `notifications.argoproj.io/subscribe.<trigger-name>.grafana` links a trigger (replace `<trigger-name>`) to the configured Grafana service. The value can optionally contain a list of tags (e.g., `tag1|tag2`) separated by '|' to be added to the Grafana annotation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/grafana.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.grafana: tag1|tag2 # list of tags separated with |\n```\n\n----------------------------------------\n\nTITLE: Customizing Health Status for SealedSecret Resources - YAML\nDESCRIPTION: This YAML snippet demonstrates how to customize the health status check for SealedSecret resources in Argo CD's `argocd-cm` ConfigMap.  It configures Argo CD to report a healthy status and a custom message indicating the controller doesn't report the resource status, effectively disabling status condition checking for older SealedSecret controllers.  This avoids issues caused by missing status updates in older versions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nresource.customizations.health.bitnami.com_SealedSecret: |\n  hs = {}\n  hs.status = \"Healthy\"\n  hs.message = \"Controller doesn't report resource status\"\n  return hs\n```\n\n----------------------------------------\n\nTITLE: Configuring Kustomize Build Options\nDESCRIPTION: This YAML snippet shows how to configure Kustomize build options in the `argocd-cm` ConfigMap. It uses the `kustomize.buildOptions` and `kustomize.buildOptions.<version>` fields to pass options like `--load-restrictor LoadRestrictionsNone` and `--output /tmp` to the `kustomize build` command. Requires modifying and restarting Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n    kustomize.buildOptions: --load-restrictor LoadRestrictionsNone\n    kustomize.buildOptions.v4.4.0: --output /tmp\n```\n\n----------------------------------------\n\nTITLE: Send Alertmanager Notification without Auth\nDESCRIPTION: This ConfigMap configures the Argo CD notifications controller to send alerts to an Alertmanager instance without authentication. It defines the Alertmanager service target in the `service.alertmanager` data field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:9093\n```\n\n----------------------------------------\n\nTITLE: Repository URL and metadata functions in Go\nDESCRIPTION: Offers functions to convert Git URLs to HTTPS ('repo.RepoURLToHTTPS'), derive full repository names ('repo.FullNameByRepoURL'), escape query strings ('repo.QueryEscape'), and fetch commit metadata ('repo.GetCommitMetadata'), as well as get app details ('repo.GetAppDetails'). Dependencies include URL handling and repository schemas. Inputs are URLs or commit shas; outputs are formatted URLs, strings, or metadata structures.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/functions.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nrepo.RepoURLToHTTPS(url string) string // Converts repo URL to HTTPS format\n```\n\nLANGUAGE: Go\nCODE:\n```\nrepo.FullNameByRepoURL(url string) string // Extracts owner/repo name from URL\n```\n\nLANGUAGE: Go\nCODE:\n```\nrepo.QueryEscape(s string) string // Escapes string for URL query parameters\n```\n\nLANGUAGE: Go\nCODE:\n```\nrepo.GetCommitMetadata(sha string) CommitMetadata // Retrieves commit message, author, date, tags\n```\n\nLANGUAGE: Go\nCODE:\n```\nrepo.GetAppDetails() AppDetail // Returns detailed application info including helm, kustomize, directory specs\n```\n\n----------------------------------------\n\nTITLE: Example Hydrated Manifest README Output\nDESCRIPTION: Shows an example of the rendered output of the Go template for the `README.md` file. It includes the application name, a link to the manifest file, commit details, and command-line steps required to reproduce the manifest hydration process using Git and Kustomize.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# dev-west Manifests\n\n[manifest.yaml](./manifest.yaml) contains the hydrated manifests for the dev-west application.\n\nThese are the details of the most recent change;\n* Author: Michael Crenshaw <michael@example.com>\n* Message: chore: bumped image tag to v0.0.2\n* Time: 2024-03-27 10:32:04 UTC\n\nTo reproduce the manifest hydration, do the following:\n\n```\ngit clone https://github.com/argoproj/argocd-example-apps\ncd argocd-example-apps\ngit checkout ab2382f\nkustomize edit set image my-app:v0.0.2\nkustomize build environments/dev/west\n```\n```\n\n----------------------------------------\n\nTITLE: Installing prerequisites for local development on macOS\nDESCRIPTION: Installs goreman for process management and kind for local Kubernetes using Homebrew on macOS.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# goreman is used to start all needed processes to get a working Argo CD development\n# environment (defined in `Procfile`)\nbrew install goreman\n\n# You can use `kind` to run Kubernetes inside Docker. But pointing to any other\n# development cluster works fine as well as long as Argo CD can reach it.\nbrew install kind\n```\n\n----------------------------------------\n\nTITLE: Example JSON Serialization of Application Parameters (JSON)\nDESCRIPTION: Illustrates the JSON format used to serialize parameters passed to a ConfigManagementPlugin via the `ARGOCD_APP_PARAMETERS` environment variable. This example corresponds to the parameters defined in the third YAML snippet, showing how string, array, and map types are represented.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"values\",\n    \"string\": \"resources:\\n  cpu: 100m\\n  memory: 128Mi\"\n  },\n  {\n    \"name\": \"values-files\",\n    \"array\": [\"values.yaml\"]\n  },\n  {\n    \"name\": \"helm-parameters\",\n    \"map\": {\n      \"image.repository\": \"my.example.com/gcr-proxy/heptio-images/ks-guestbook-demo\",\n      \"image.tag\": \"0.1\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Notification Commands - Shell\nDESCRIPTION: This shell snippet lists command options for 'argocd admin notifications' that are inherited from parent Argo CD CLI commands. These parameters allow further customization, including specifying Argo CD contexts, authentication tokens, controller and server names (for advanced/HA deployments), TLS key/certificate management, logging preferences, proxy support, and Redis configuration. Critical for users requiring advanced configuration or dealing with custom/Helm-driven Argo CD installations. These options generally require knowledge of the organization's Argo CD/Kubernetes infrastructure and may depend on environmental variables or additional installed components.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Certificate via Stdin - ArgoCD\nDESCRIPTION: This command adds a TLS certificate for a given server to the ArgoCD certificate store. It reads the certificate data from standard input (stdin). This approach is useful for piping certificate content directly into the command. The server name (cd.example.com) is passed as an argument.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat ~/mycert.pem | argocd cert add-tls cd.example.com\n```\n\n----------------------------------------\n\nTITLE: Component-specific prefixes for Argo CD configuration in argocd-cmd-params-cm.yaml\nDESCRIPTION: Demonstrates the specific prefixes used for each Argo CD component when configuring them in the argocd-cmd-params-cm.yaml ConfigMap. The prefixes map to each component and are used as a namespace for component-specific settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/additional-configuration-method.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nargocd-server                 --> server\nargocd-repo-server            --> reposerver\nargocd-application-controller --> controller\n```\n\n----------------------------------------\n\nTITLE: Configuring PagerDuty Service Argo CD ConfigMap\nDESCRIPTION: Defines the PagerDuty notification service configuration within the `argocd-notifications-cm` ConfigMap. It specifies the `token` (referencing the Secret) and the `from` email address required for API calls. Depends on a Kubernetes cluster and the `argocd-notifications-cm` ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerduty: |\n    token: $pagerdutyToken\n    from: <emailid>\n```\n\n----------------------------------------\n\nTITLE: Using slugify Function in ApplicationSet Metadata (YAML)\nDESCRIPTION: Demonstrates using the custom `slugify` Go template function within an ApplicationSet template's metadata name and annotations. It shows variations with different arguments for maximum length and smart truncation enabled/disabled. Requires `goTemplate: true` to be set.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: test-appset\nspec:\n  ... \n  template:\n    metadata:\n      name: 'hellos3-{{.name}}-{{ cat .branch | slugify 23 }}'\n      annotations:\n        label-1: '{{ cat .branch | slugify }}'\n        label-2: '{{ cat .branch | slugify 23 }}'\n        label-3: '{{ cat .branch | slugify 50 false }}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Redis Password in a Helm Chart (YAML)\nDESCRIPTION: Example Helm template snippet for a Kubernetes Secret, demonstrating conditional password definition. If `.Values.password` is not set, it generates a random 10-character alphanumeric string using `randAlphaNum`. This pattern can cause Argo CD `OutOfSync` issues because the random value changes on each comparison.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  {{- if .Values.password }}\n  redis-password: {{ .Values.password | b64enc | quote }}\n  {{- else }}\n  redis-password: {{ randAlphaNum 10 | b64enc | quote }}\n  {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Examples of Running argocd-server in Bash\nDESCRIPTION: Usage examples for the argocd-server command, including starting with default settings and starting with custom configuration such as port and tracing settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-server.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start the Argo CD API server with default settings\n$ argocd-server\n  \n# Start the Argo CD API server on a custom port and enable tracing\n$ argocd-server --port 8888 --otlp-address localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Accessing the Argo CD Dashboard via CLI - shell\nDESCRIPTION: This example shows how to launch the Argo CD web UI locally using the 'argocd admin dashboard' command. Prerequisite: Argo CD CLI must be installed and properly configured with access to the cluster. No additional parameters are required. Running this command starts the dashboard service and typically opens the Argo CD UI in your default browser.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin dashboard\n```\n\n----------------------------------------\n\nTITLE: Application Resource with Notification Subscription\nDESCRIPTION: Adds an annotation to the Argo CD Application resource to subscribe to the 'on-sync-succeeded' event via Pushover. When the application sync succeeds, a notification is sent to the specified user key, enabling real-time status updates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pushover.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.pushover: uumy8u4owy7bgkapp6mc5mvhfsvpcd\n```\n\n----------------------------------------\n\nTITLE: Store Alertmanager Credentials in a Secret\nDESCRIPTION: This Secret stores the username, password, and bearer token for authenticating with an Alertmanager instance.  These values can then be referenced in a ConfigMap to configure the Argo CD notifications controller.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  alertmanager-username: <username>\n  alertmanager-password: <password>\n  alertmanager-bearer-token: <token>\n```\n\n----------------------------------------\n\nTITLE: Configure ArgoCD RBAC for OneLogin User Roles\nDESCRIPTION: This YAML snippet configures the ArgoCD RBAC ConfigMap (argocd-rbac-cm) to assign permissions based on OneLogin user roles passed in the 'groups' claim of the OIDC token. It defines a default read-only role and an 'org-admin' role, mapping the 'TestEngineering' OneLogin user role to the 'org-admin' role in ArgoCD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/onelogin.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  policy.default: role:readonly\n  policy.csv: |\n    p, role:org-admin, applications, *, */*, allow\n    p, role:org-admin, clusters, get, *, allow\n    p, role:org-admin, repositories, get, *, allow\n    p, role:org-admin, repositories, create, *, allow\n    p, role:org-admin, repositories, update, *, allow\n    p, role:org-admin, repositories, delete, *, allow\n\n    g, TestEngineering, role:org-admin\n```\n\n----------------------------------------\n\nTITLE: Updating Egress NetworkPolicy for argocd-redis\nDESCRIPTION: Diff showing how to add Egress rules to the argocd-redis NetworkPolicy to allow DNS resolution via ports 53/TCP and 53/UDP while maintaining security restrictions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.8-2.9.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Running Custom Resource Actions with argocd admin (bash)\nDESCRIPTION: Invokes the `argocd admin settings resource-overrides run-action` command to execute a named resource action (`restart`) on the resources defined in the target file (`/tmp/deploy.yaml`). The action logic is defined by a Lua script configured within the specified Argo CD ConfigMap file (`--argocd-cm-path /private/tmp/argocd-cm.yaml`). The command outputs the modifications applied by the action.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings resource-overrides run-action /tmp/deploy.yaml restart --argocd-cm-path /private/tmp/argocd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Impersonation Feature in ArgoCD Using Shell\nDESCRIPTION: This shell command patches the ConfigMap 'argocd-cm' in the 'argocd' namespace to enable the impersonation feature for application synchronization. The patch adds a JSON patch operation to set 'application.sync.impersonation.enabled' to 'true', allowing ArgoCD to impersonate service accounts during sync operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch cm argocd-cm -n argocd --type json --patch '[{ \"op\": \"add\", \"path\": \"/data/application.sync.impersonation.enabled\", \"value\": \"true\" }]'\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgoCD SSO via ConfigMap (YAML)\nDESCRIPTION: Modifies the argocd-cm ConfigMap to enable OpenUnison as an OIDC provider for ArgoCD. Contains the issuer URL, portal base URL, and scope definitions necessary for effective 3rd-party authentication. Dependencies include accessing the ArgoCD namespace and applying this ConfigMap to enable SSO.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/openunison.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  url: https://argocd.apps.domain.com\n  oidc.config: |-\n    name: OpenUnison\n    issuer: https://k8sou.apps.192-168-2-144.nip.io/auth/idp/k8sIdp\n    clientID: argocd\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\n----------------------------------------\n\nTITLE: Ingress Resource for Argo CD with NGINX Ingress Controller Using SSL Passthrough and cert-manager in YAML\nDESCRIPTION: Defines a Kubernetes Ingress for ingress-nginx with SSL passthrough enabled plus cert-manager annotations for Let's Encrypt certificate management. Annotation nginx.ingress.kubernetes.io/backend-protocol is set to HTTPS to avoid potential redirect loops. This setup allows TLS passthrough with automated certificate issuance and renewals. TLS uses a secret named argocd-server-tls.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-ingress\n  namespace: argocd\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/ssl-passthrough: \"true\"\n    # If you encounter a redirect loop or are getting a 307 response code\n    # then you need to force the nginx ingress to connect to the backend using HTTPS.\n    #\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: argocd.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: https\n  tls:\n  - hosts:\n    - argocd.example.com\n    secretName: argocd-server-tls # as expected by argocd-server\n```\n\n----------------------------------------\n\nTITLE: Specifying a Telegram Thread ID in Application Subscription\nDESCRIPTION: This YAML configuration demonstrates how to specify a thread within a private Telegram chat by appending a thread ID after the chat ID with a '|' separator. It allows targeted notifications to specific threads when multiple conversation streams exist within the chat.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/telegram.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: -1000000000000|2\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD with SAML via Dex - SAML Connectors in dex.config\nDESCRIPTION: Defines the Dex connector for SAML authentication with Okta, including URLs, CA certificates, and user attributes. Enables Okta SAML SSO in Argo CD with proper security and group mapping.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/okta.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndex.config: |\n  logger:\n    level: debug\n    format: json\n  connectors:\n  - type: saml\n    id: okta\n    name: Okta\n    config:\n      ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml\n      caData: |\n        <CA cert passed through base64 encoding>\n      ca: /path/to/ca.pem\n      redirectURI: https://ui.argocd.yourorganization.net/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: group\n```\n\n----------------------------------------\n\nTITLE: Upgrading Argo CD v0.11 to v0.12 with kubectl\nDESCRIPTION: Provides a sequence of `kubectl` commands to perform a downtime-free upgrade from Argo CD v0.11 to v0.12. It addresses changes in Kubernetes label selectors by deleting old deployments without cascading deletion to pods, applying new manifests, waiting for rollout, and then deleting old replicasets and the renamed dex-server deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# delete the deployments with cascade=false. this orphan the replicasets, but leaves the pods running\nkubectl delete deploy --cascade=false argocd-server argocd-repo-server argocd-application-controller\n```\n\nLANGUAGE: Shell\nCODE:\n```\n# apply the new manifests and wait for them to finish rolling out\nkubectl apply <new install manifests>\nkubectl rollout status deploy/argocd-application-controller\nkubectl rollout status deploy/argocd-repo-server\nkubectl rollout status deploy/argocd-application-controller\n```\n\nLANGUAGE: Shell\nCODE:\n```\n# delete old replicasets which are using the legacy label\nkubectl delete rs -l app=argocd-server\nkubectl delete rs -l app=argocd-repo-server\nkubectl delete rs -l app=argocd-application-controller\n```\n\nLANGUAGE: Shell\nCODE:\n```\n# delete the legacy dex-server which was renamed\nkubectl delete deploy dex-server\n```\n\n----------------------------------------\n\nTITLE: Example Matrix Generator Configuration in ApplicationSet YAML\nDESCRIPTION: This YAML snippet shows the structure for configuring a 'matrix' generator within an ApplicationSet specification. The matrix generator combines parameters generated by nested generators (in this case, a Git directory generator and a cluster generator based on labels) to produce a comprehensive set of applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  generators:\n  - matrix:\n      generators:\n        - git:\n            name: cluster-deployments\t\n            repoURL: https://github.com/argoproj-labs/applicationset.git\n            revision: HEAD\n            directories:\n            - path: examples/proposal/matrix/cluster-addons/*\n        - clusters:\n            selector:\n              matchLabels:\n                argocd.argoproj.io/secret-type: cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Notifications with Annotation (YAML)\nDESCRIPTION: This snippet shows how to subscribe a specific Argo CD application to notifications using Kubernetes annotations. The annotation `notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2` directs the 'on-sync-succeeded' trigger notifications to two specified Slack channels, 'my-channel1' and 'my-channel2', for this application. This requires the Argo CD Notifications controller and a configured Slack notification service.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/subscriptions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands in Argo CD CLI\nDESCRIPTION: Enumerates additional global options that influence how the CLI communicates with the Argo CD server and Kubernetes clusters. Includes settings for context, authentication, connection protocols, logging, and server endpoints.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_create.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Doublestar Directory Structure\nDESCRIPTION: This example directory structure is used to illustrate how the `doublestar` package (used by the new globbing) works. It shows how to use patterns to match files and directories recursively.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngrandparent\n`-- parent\n    |-- child1\n    `-- child2\n```\n\n----------------------------------------\n\nTITLE: Updating GitOps Engine Dependency in Go\nDESCRIPTION: Updates the Argo CD project's Go modules to use a specific commit SHA from the `gitops-engine` repository. This command fetches the specified version of the dependency. Run this from the `argo-cd` project root after a corresponding GitOps Engine PR is merged.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/dependencies.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/argoproj/gitops-engine@<git-commit-sha>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sync Window from Default Project - Shell Example\nDESCRIPTION: Demonstrates how to delete the sync window with ID 0 from the \"default\" Argo CD project. Assumes user has proper permissions and a configured CLI session. Output depends on the existence of the specified window ID in the project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_delete.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj windows delete default 0\n```\n\n----------------------------------------\n\nTITLE: Installing ArgoCD in Kubernetes Namespace Using Shell\nDESCRIPTION: This shell snippet installs ArgoCD into the Kubernetes cluster's 'argocd' namespace by applying the official installation manifest from the ArgoCD GitHub repository. It is a prerequisite step for configuring ArgoCD remote cluster destinations and enabling impersonation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml -n argocd\n```\n\n----------------------------------------\n\nTITLE: Send Alertmanager HA Cluster with BasicAuth\nDESCRIPTION: This ConfigMap configures the Argo CD notifications controller to send alerts to a high-availability Alertmanager cluster using basic authentication.  It defines multiple targets, enables HTTPS, skips SSL verification, and references the username and password stored in a Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/alertmanager.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:19093\n    - 10.5.39.39:29093\n    - 10.5.39.39:39093\n    scheme: https\n    apiPath: /api/v2/alerts\n    insecureSkipVerify: true\n    basicAuth:\n      username: $alertmanager-username\n      password: $alertmanager-password   \n```\n\n----------------------------------------\n\nTITLE: Forcing Resource Re-creation on Sync via Annotation (YAML)\nDESCRIPTION: Applies the `argocd.argoproj.io/sync-options: Force=true,Replace=true` annotation to a resource's metadata. This combination forces Argo CD to delete and then recreate the resource on every sync operation. This is a destructive action suitable for resources like Jobs that need to run anew each time, but it can cause outages.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-options: Force=true,Replace=true\n```\n\n----------------------------------------\n\nTITLE: Enabling High Availability for ApplicationSet Controller in YAML\nDESCRIPTION: This YAML snippet shows the modification needed within the ApplicationSet controller's deployment manifest (`manifests/install.yaml`) to enable high availability. Adding the `--enable-leader-election=true` flag to the container's command arguments enables leader election. This change, combined with increasing the replica count, allows the controller to operate in HA mode.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Getting-Started.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n    spec:\n      containers:\n      - command:\n        - entrypoint.sh\n        - argocd-applicationset-controller\n        - --enable-leader-election=true\n```\n\n----------------------------------------\n\nTITLE: Specific Options for `argocd proj role list-tokens` (Shell)\nDESCRIPTION: Lists the command-specific options available for `argocd proj role list-tokens`. The `-h` or `--help` flag displays help information, and the `-u` or `--unixtime` flag formats timestamps as Unix time, which is useful for piping output to other commands like `delete-token`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list-tokens.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n  -h, --help       help for list-tokens\n  -u, --unixtime   Print timestamps as Unix time instead of converting. Useful for piping into delete-token.\n```\n\n----------------------------------------\n\nTITLE: Adding Group Claims Using Argo CD CLI (Shell)\nDESCRIPTION: This snippet demonstrates the syntax for adding a group claim to a project role in Argo CD using the command line interface. Dependencies include an installed and configured 'argocd' CLI tool and access to a running Argo CD instance. Required parameters are the project name, role name, and the group claim to add; optional flags allow customization of context, authentication, server connections, and logging. The command accepts project and role identifiers as input and does not produce output unless errors occur. Limitations include requiring correct permissions and environment setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-group.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role add-group PROJECT ROLE-NAME GROUP-CLAIM [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage: argocd admin proj Command CLI\nDESCRIPTION: Provides the basic command syntax for interacting with Argo CD project administration features via the CLI. This command serves as the root for various project management operations, accepting different flags to modify behavior or specify subcommands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_proj.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nargocd admin proj [flags]\n```\n\n----------------------------------------\n\nTITLE: Another Status Format YAML Example\nDESCRIPTION: This YAML snippet shows an alternative status format. It uses a `decisions` list, each containing `clusterName` and `namespace`. This demonstrates flexibility in handling different resource structures for cluster information.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/applicationset/examples/clusterDecisionResource/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstatus:\n  decisions:\n  - clusterName: cluster-01\n    namespace: cluster-01\n  - clusterName: cluster-02\n    namespace: cluster-02\n```\n\n----------------------------------------\n\nTITLE: Original Resource in Git Repository Before Argo CD Sync\nDESCRIPTION: Example YAML configuration of a Secret resource as it appears in Git before being processed by Argo CD. The resource has no Argo CD-specific labels or annotations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n```\n\n----------------------------------------\n\nTITLE: Listing Project Sync Windows Using Argo CD CLI - Bash\nDESCRIPTION: Executes the 'argocd proj windows list' command to retrieve and display synchronization windows for a specified Argo CD project. Supports output formatting through the '-o' flag, which can be set to json, yaml, or wide. Requires a valid project name parameter and optionally authentication or context parameters depending on environment setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows list PROJECT [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n#List project windows\nargocd proj windows list PROJECT\n```\n\nLANGUAGE: bash\nCODE:\n```\n#List project windows in yaml format\nargocd proj windows list PROJECT -o yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n#List project windows info for a project name (test-project)\nargocd proj windows list test-project\n```\n\n----------------------------------------\n\nTITLE: Example of Multiple Destination Service Account Matches With Namespace Glob Patterns Using YAML\nDESCRIPTION: This snippet defines an AppProject with multiple `destinationServiceAccounts` entries using specific namespace names and glob patterns to select the appropriate default service account for impersonation. It illustrates precedence rules where the first match found is used based on namespace matching criteria, supporting more granular control over service account usage per destination namespace pattern.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  destinationServiceAccounts:\n    - server: https://kubernetes.default.svc\n      namespace: guestbook-prod\n      defaultServiceAccount: guestbook-prod-deployer\n    - server: https://kubernetes.default.svc\n      namespace: 'guestbook-*'\n      defaultServiceAccount: guestbook-generic-deployer\n    - server: https://kubernetes.default.svc\n      namespace: '*'\n      defaultServiceAccount: generic-deployer\n  ...\n```\n\n----------------------------------------\n\nTITLE: Sample API Response Containing Image Digests\nDESCRIPTION: This JSON object shows the structure of the API response containing the image digest parameters for a branch. It includes 'digestFront' and 'digestBack' fields with SHA-256 hashes, which are used for dynamic image tagging within the ApplicationSet templates to ensure accurate image versions tied to successful builds.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"parameters\": [\n      {\n        \"digestFront\": \"sha256:a3f18c17771cc1051b790b453a0217b585723b37f14b413ad7c5b12d4534d411\",\n        \"digestBack\": \"sha256:4411417d614d5b1b479933b7420079671facd434fd42db196dc1f4cc55ba13ce\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Annotations to Ignore Resource Updates for Untracked Kubernetes Resources - YAML\nDESCRIPTION: This snippet demonstrates how to annotate a Kubernetes CronJob and its pod templates to apply the ignoreResourceUpdates behavior to untracked resources in Argo CD. The annotation 'argocd.argoproj.io/ignore-resource-updates: true' is added to metadata annotations of dependent resources so that Argo CD ignores updates to them, preventing unnecessary application reconciles.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/reconcile.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: hello\n  namespace: test-cronjob\nspec:\n  schedule: '* * * * *'\n  jobTemplate:\n    metadata:\n      annotations:\n        argocd.argoproj.io/ignore-resource-updates: 'true'\n    spec:\n      template:\n        metadata:\n          annotations:\n            argocd.argoproj.io/ignore-resource-updates: 'true'\n        spec:\n          containers:\n            - name: hello\n              image: busybox:1.28\n              imagePullPolicy: IfNotPresent\n              command:\n                - /bin/sh\n                - -c\n                - date; echo Hello from the Kubernetes cluster\n          restartPolicy: OnFailure\n```\n\n----------------------------------------\n\nTITLE: Storing GitHub App Private Key in Kubernetes Secret (YAML)\nDESCRIPTION: Demonstrates how to store the GitHub App's private key within a Kubernetes Secret using the `stringData` field. This allows the private key to be securely managed and referenced by the `argocd-notifications-cm` ConfigMap. Replace `<secret-name>` with the desired name for the Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/github.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  github-privateKey: |\n    -----BEGIN RSA PRIVATE KEY-----\n    (snip)\n    -----END RSA PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Overriding Source by Position in Multi-Source Application - Argo CD CLI - Shell\nDESCRIPTION: This snippet demonstrates overriding source configuration in an application with multiple sources by specifying the source's position using '--source-position'. It is useful for applications with complex source arrangements. Dependencies include multi-source support in the application spec and correct source positioning. Requires '--repo' to indicate the new source repository. Input is the application name, target position, and repository URL; output is the updated source at that position. Only positions starting at 1 are valid.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_set.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd app set my-app --source-position 1 --repo https://github.com/argoproj/argocd-example-apps.git\n```\n\n----------------------------------------\n\nTITLE: Configuring disable-namespaced-mode Command Options (Text)\nDESCRIPTION: Lists the specific command-line flags available for the `disable-namespaced-mode` subcommand. These options allow for customization such as user impersonation (`--as`, `--as-group`), Kubernetes cluster connection details (`--certificate-authority`, `--client-certificate`, `--kubeconfig`, etc.), TLS verification (`--insecure-skip-tls-verify`), and performing a dry run (`--dry-run`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n      --dry-run                        Print what will be performed (default true)\n  -h, --help                           help for disable-namespaced-mode\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitation: Templating Object Fields (YAML)\nDESCRIPTION: Demonstrates a limitation of Go templates in ApplicationSet where an object field (`syncPolicy`) cannot be directly templated. Templating is restricted to string fields only.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  template:\n    spec:\n      syncPolicy: \"{{.syncPolicy}}\"  # This field may NOT be templated, because it is an object field.\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Slack Services with Custom Names\nDESCRIPTION: This snippet shows configuration of multiple instances of the Slack service with custom names, such as 'workspace1' and 'workspace2'. Each service references different secret keys for tokens, allowing isolated notifications per workspace or group. These configurations enable multiple service instances for the same service type.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/overview.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  service.slack.workspace1: |\n    token: $slack-token-workspace1\n  service.slack.workspace2: |\n    token: $slack-token-workspace2\n```\n\n----------------------------------------\n\nTITLE: Deploying Generated E2E Manifests to Kubernetes - Shell\nDESCRIPTION: This command applies the previously generated repository manifests to the 'argocd-e2e' namespace, deploying the E2E test resources. The file '/tmp/e2e-repositories.yaml' must contain a valid manifest for the test workload, and 'kubectl' must have access to the proper cluster context. This step is essential to start the e2e test workload.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd-e2e apply -f /tmp/e2e-repositories.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Creating PortalUrl Badge YAML for OpenUnison (YAML)\nDESCRIPTION: Provides a YAML template for a PortalUrl resource to add a badge linking to the ArgoCD portal within OpenUnison. The URL must be updated to match the specific ArgoCD instance. This badge allows users to access ArgoCD directly from the OpenUnison portal interface.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/openunison.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n<Content of ../../assets/openunison-argocd-url.yaml> (Update the url field accordingly)\n```\n\n----------------------------------------\n\nTITLE: Available options for argocd admin settings\nDESCRIPTION: List of all available command-line options for the argocd admin settings command, including paths to configuration files, authentication options, and connection settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-cm-path string          Path to local argocd-cm.yaml file\n      --argocd-secret-path string      Path to local argocd-secret.yaml file\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for settings\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings          Indicates that config map and secret should be loaded from cluster unless local file path is provided\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Kinds CLI\nDESCRIPTION: These bash commands manage permitted destination Kubernetes resource kinds for a specific project using the Argo CD CLI. Cluster-scoped resources are managed using allow lists, while namespace-scoped resources are managed using deny lists. These commands offer granular control over what resources can be deployed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj allow-cluster-resource <PROJECT> <GROUP> <KIND>\nargocd proj allow-namespace-resource <PROJECT> <GROUP> <KIND>\nargocd proj deny-cluster-resource <PROJECT> <GROUP> <KIND>\nargocd proj deny-namespace-resource <PROJECT> <GROUP> <KIND>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Styles in a ConfigMap (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap named `argocd-styles-cm` which holds the custom CSS rules. The CSS content is stored as a string value under the `my-styles.css` key within the `data` section. This ConfigMap is intended to be mounted as a volume into the `argocd-server` pod to make the styles accessible.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom-styles.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-styles-cm\ndata:\n  my-styles.css: |\n    .sidebar {\n      background: linear-gradient(to bottom, #999, #777, #333, #222, #111);\n    }\n```\n\n----------------------------------------\n\nTITLE: Options for Argo CD Application Sync Command - Bash\nDESCRIPTION: This snippet lists all available command-line flags for the 'argocd app sync' command, detailing how to customize sync operations such as filtering applications, selecting specific resources, setting sync strategies, and manipulating output. It also includes inherited options from parent commands relating to authentication, server contexts, logging, and network settings. Dependencies include understanding of Argo CD concepts and permissions to modify cluster state. Key parameters control synchronization behavior (e.g., --force, --prune), output formatting, retry/backoff policies, dry-run previews, and resource scoping by namespace or labels. These flags expect inputs such as strings, booleans, durations, and arrays as appropriate. Users must ensure parameters conform to expected types and values to achieve desired sync control. Limitations are primarily from API and cluster permissions and correct flag usage.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_sync.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -N, --app-namespace string                              Only sync an application in namespace\n      --apply-out-of-sync-only                            Sync only out-of-sync resources\n      --assumeYes                                         Assume yes as answer for all user queries or prompts\n      --async                                             Do not wait for application to sync before continuing\n      --dry-run                                           Preview apply without affecting cluster\n      --force                                             Use a force apply\n  -h, --help                                              help for sync\n      --ignore-normalizer-jq-execution-timeout duration   Set ignore normalizer JQ execution timeout (default 1s)\n      --info stringArray                                  A list of key-value pairs during sync process. These infos will be persisted in app.\n      --label stringArray                                 Sync only specific resources with a label. This option may be specified repeatedly.\n      --local string                                      Path to a local directory. When this flag is present no git queries will be made\n      --local-repo-root string                            Path to the repository root. Used together with --local allows setting the repository root (default \"/\")\n  -o, --output string                                     Output format. One of: json|yaml|wide|tree|tree=detailed (default \"wide\")\n      --preview-changes                                   Preview difference against the target and live state before syncing app and wait for user confirmation\n      --project stringArray                               Sync apps that belong to the specified projects. This option may be specified repeatedly.\n      --prune                                             Allow deleting unexpected resources\n      --replace                                           Use a kubectl create/replace instead apply\n      --resource stringArray                              Sync only specific resources as GROUP:KIND:NAME or !GROUP:KIND:NAME. Fields may be blank and '*' can be used. This option may be specified repeatedly\n      --retry-backoff-duration duration                   Retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s)\n      --retry-backoff-factor int                          Factor multiplies the base duration after each failed retry (default 2)\n      --retry-backoff-max-duration duration               Max retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s)\n      --retry-limit int                                   Max number of allowed sync retries\n      --revision string                                   Sync to a specific revision. Preserves parameter overrides\n      --revisions stringArray                             Show manifests at specific revisions for source position in source-positions\n  -l, --selector string                                   Sync apps that match this label. Supports '=', '==', '!=', in, notin, exists & not exists. Matching apps must satisfy all of the specified label constraints.\n      --server-side                                       Use server-side apply while syncing the application\n      --source-names stringArray                          List of source names. Default is an empty array.\n      --source-positions int64Slice                       List of source positions. Default is empty array. Counting start at 1. (default [])\n      --strategy string                                   Sync strategy (one of: apply|hook)\n      --timeout uint                                      Time out after this many seconds\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Duration for Argo CD App Sync Retry Flags (Bash)\nDESCRIPTION: Illustrates the required format change for app sync retry duration flags (`--retry-backoff-duration`, `--retry-backoff-max-duration`) in Argo CD v2.0. Previously accepting strings, these flags now strictly require duration values with time units (e.g., '10s' for 10 seconds). Omitting the unit is no longer valid.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.8-2.0.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEXAMPLE: \nargocd app sync <app-name> --retry-backoff-duration=10 -> invalid\nargocd app sync <app-name> --retry-backoff-duration=10s -> valid\n```\n\n----------------------------------------\n\nTITLE: Adding Credentials with Bearer Token\nDESCRIPTION: This snippet shows how to add credentials using a bearer token.  It targets BitBucket repositories under a specific URL and uses the `--bearer-token` flag to provide the token.  This approach is suitable for authenticating with services that use bearer token-based authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_2\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with bearer token authentication to use for all BitBucket Data Center repositories under https://bitbucket.example.com/scm\n  argocd repocreds add https://bitbucket.example.com/scm/ --bearer-token secret-token\n```\n\n----------------------------------------\n\nTITLE: Filtering Applications with matchLabels in List Generator\nDESCRIPTION: Defines a list generator with elements representing different clusters and environments, filtered using matchLabels to select only applications where env is 'staging'. The result is a single filtered application set used for deployment configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Post-Selector.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchLabels:\n        env: staging\n```\n\n----------------------------------------\n\nTITLE: ArgoCD appset CLI commands\nDESCRIPTION: These commands are for interacting with ApplicationSets using the Argo CD CLI. They allow for creating, deleting, and applying ApplicationSet configurations from YAML files.  The `argocd appset` commands will fail if the ApplicationSet controller is not installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd appset create \"(filename.yaml)\"\nargocd appset delete \"(applicationset resource name)\"\nargocd appset apply  \"(filename.yaml)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Service Token in Argo CD Notifications ConfigMap\nDESCRIPTION: This snippet defines a Kubernetes ConfigMap that stores the Telegram bot token, which is required for sending notifications via Telegram. It links the token stored in a secret to the notification service configuration, enabling secure communication. Dependencies include Kubernetes and the secret containing the Telegram token, and the key 'service.telegram' holds the token reference.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/telegram.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.telegram: |\n    token: $telegram-token\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Hiding in Argo CD ConfigMap (YAML)\nDESCRIPTION: This YAML snippet shows the proposed configuration within the `argocd-cm` ConfigMap. It adds the `hide.secret.annotations` key, taking a multi-line string representing a list of annotation keys (e.g., `openshift.io/token-secret.value`) to be hidden from display in the Argo CD web UI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/feature-bounties/hide-annotations.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhide.secret.annotations: |\n- openshift.io/token-secret.value\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Sync Override for a Window (Bash)\nDESCRIPTION: Explains how to use the `argocd proj windows enable-manual-sync` command to configure a specific Sync Window (identified by PROJECT and ID) to allow manual synchronizations even when the window's schedule would normally deny them.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync_windows.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj windows enable-manual-sync PROJECT ID\n```\n\n----------------------------------------\n\nTITLE: Enabling Force Option for Apply and Hook Strategies in YAML\nDESCRIPTION: Adds 'force: true' to 'syncStrategy' to enable force deletion or overwrite if conflicts occur, specifically after multiple retries. Used with either 'apply' or 'hook' strategies to ensure resource reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  sync:\n    syncStrategy:\n      apply:\n        force: true\n```\n\nLANGUAGE: YAML\nCODE:\n```\noperation:\n  sync:\n    syncStrategy:\n      hook:\n        force: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrate Getting Argo CD Notification Templates (Bash)\nDESCRIPTION: Provides practical examples of using the command. The first example lists all configured notification templates, while the second retrieves a specific template (`app-sync-succeeded`) and outputs its definition in YAML format.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template_get.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# prints all templates\nargocd admin notifications template get\n```\n\nLANGUAGE: bash\nCODE:\n```\n# print YAML formatted app-sync-succeeded template definition\nargocd admin notifications template get app-sync-succeeded -o=yaml\n```\n\n----------------------------------------\n\nTITLE: Options for 'argocd proj role create' Command\nDESCRIPTION: Lists all command-line flags available for customizing the role creation process, including setting descriptions and other configuration options inherited from parent commands. Essential for tailoring role creation to specific environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_create.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --description string   Project description\n  -h, --help                 help for create\n```\n\n----------------------------------------\n\nTITLE: Hypothetical CMP Script Using Parameter Environment Variable (Shell)\nDESCRIPTION: Provides a hypothetical example of how a CMP script might use an environment variable derived from an Application parameter (e.g., `$VALUES`) to configure a tool like Helm. Parameters are also passed individually via `PARAM_` prefixed environment variables following specific naming rules.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho \"$VALUES\" > /tmp/values.yaml\nhelm template --values /tmp/values.yaml .\n```\n\n----------------------------------------\n\nTITLE: Adding Egress Rules to Redis NetworkPolicy\nDESCRIPTION: Modifications to the argocd-redis-network-policy NetworkPolicy to add Egress rules that allow DNS resolution via port 53. This maintains security restrictions after the 2.10.11 update removed Egress restrictions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.9-2.10.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Add: Project Sync Window with argocd CLI (Shell)\nDESCRIPTION: Demonstrates how to add a sync window to a specific Argo CD project using the `argocd proj windows add` subcommand. It includes examples of setting a schedule (`--schedule`), duration (`--duration`), and enabling pruning (`--prune`) within the window.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#Add a sync window to a project\nargocd proj windows add my-project \\\n--schedule \"0 0 * * 1-5\" \\\n--duration 3600 \\\n--prune\n```\n\n----------------------------------------\n\nTITLE: Running Argo CD UI Pre-commit Lint Checks (Shell)\nDESCRIPTION: Executes ESLint checks on the UI codebase using Yarn. The '--fix' flag automatically corrects fixable linting errors. This command is typically run as part of a pre-commit workflow to maintain code quality and consistency.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Options: argocd proj windows Command (Shell)\nDESCRIPTION: Lists the command-line options specifically available for the `argocd proj windows` subcommand. Currently, only the standard help flag (`-h`, `--help`) is listed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n  -h, --help   help for windows\n```\n\n----------------------------------------\n\nTITLE: Adding HTTPS Repo with Username/Password using Argo CD CLI (Bash)\nDESCRIPTION: Adds a private HTTPS Git repository to Argo CD using a username and password via the command line interface. Replace `<username>` and `<password>` with your Git credentials. This method is suitable for repositories accessed over HTTPS requiring basic authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd repo add https://github.com/argoproj/argocd-example-apps --username <username> --password <password>\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Argo CD Notification Templates (YAML)\nDESCRIPTION: Demonstrates how to reference sensitive data stored in `argocd-notifications-secret` within a notification template defined in `argocd-notifications-cm`. The example shows using `.secrets.sampleWebhookToken` to include a secret token in a webhook notification body.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.trigger-webhook: |\n      webhook:\n        sample-webhook:\n          method: POST\n          path: 'webhook/endpoint/with/auth'\n          body: 'token={{ .secrets.sampleWebhookToken }}&variables[APP_SOURCE_PATH]={{ .app.spec.source.path }}'\n```\n\n----------------------------------------\n\nTITLE: Create Token - Argo CD CLI\nDESCRIPTION: Creates a JWT token associated with a project role. Requires the project name and role name. The token's ID, issued-at, expires-at, and the token itself are generated. The Argo CD CLI needs to be configured to interact with the Argo CD server and should be run by a user with appropriate permissions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete-token.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n$ argocd proj role create-token test-project test-role\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Certificate for SAML Integration - Shell\nDESCRIPTION: This shell command base64-encodes a downloaded SAML Signing Certificate from Azure for use in Dex or Argo CD configurations. The command takes a certificate file as input and outputs a base64-encoded string suitable for embedding in configuration files. Required dependencies: Linux/Unix shell and base64 utility. Input: path to the .cer certificate file. Output: base64-encoded certificate. Limitation: ensure correct file paths and permissions before encoding.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ cat ArgoCD.cer | base64\n```\n\n----------------------------------------\n\nTITLE: Parameters Announcement with Combined Static and Dynamic Parameters (JSON)\nDESCRIPTION: This JSON snippet illustrates how the CMP server combines static and dynamic parameter announcements before sending them to the UI, in accordance with CMP protocol. The output shows both array and map-typed parameters, listing names, titles, tooltips, and default map values where applicable.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"values-files\",\n    \"title\": \"Values Files\",\n    \"collectionType\": \"array\"\n  },\n  {\n    \"name\": \"helm-parameters\",\n    \"collectionType\": \"map\",\n    \"title\": \"Helm Parameters\",\n    \"tooltip\": \"Parameters to override when generating manifests with Helm\",\n    \"map\": {\n      \"image.repository\": \"my.example.com/gcr-proxy/heptio-images/ks-guestbook-demo\",\n      \"image.tag\": \"0.1\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Application Namespace Option for Argo CD CLI\nDESCRIPTION: This option allows specifying the namespace of the target application.  It is used with commands like `argocd app confirm-deletion` to indicate the namespace where the application resides. It expects a string value representing the namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_confirm-deletion.md#_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\n-N, --app-namespace string   Namespace of the target application where the source will be appended\n```\n\n----------------------------------------\n\nTITLE: Connecting to ArgoCD Service using Telepresence v2 (Shell)\nDESCRIPTION: Configures the Kubernetes context to use the 'argocd' namespace, installs Telepresence via Helm, connects to the cluster, and intercepts the 'argocd-server' service for local debugging. Requires kubectl, Helm, Telepresence v2, and an existing ArgoCD deployment. Parameters include Kubernetes namespace and ports to forward. Outputs a locally running intercept on port 8080.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl config set-context --current --namespace argocd\ntelepresence helm install --set agent.securityContext={}\ntelepresence connect\ntelepresence intercept argocd-server --port 8080:http --env-file .envrc.remote\n```\n\n----------------------------------------\n\nTITLE: Related Manage Projects Command Reference\nDESCRIPTION: References the primary command for managing projects within Argo CD, providing a link to the full documentation for project management tasks.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_edit.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* [argocd proj](argocd_proj.md) - Manage projects\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Argo CD Namespace in Kubernetes - Shell\nDESCRIPTION: This snippet demonstrates how to create a dedicated namespace ('argocd-e2e') in Kubernetes using 'kubectl', and then apply Argo CD installation manifests into that namespace. The commands require 'kubectl' installed and configured with appropriate cluster access, and the user must substitute '<your Argo CD installation manifests>' with the actual path or URL to the Argo CD YAML manifests. These steps ensure isolation for e2e testing and prevent interfering with production deployments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create ns argocd-e2e\nkubectl -n argocd-e2e apply -f <your Argo CD installation manifests>\n\n```\n\n----------------------------------------\n\nTITLE: Removing a resource from orphaned ignore list using Argo CD CLI\nDESCRIPTION: This code snippet demonstrates the syntax for executing the 'remove-orphaned-ignore' command, which removes a specified resource from the orphaned ignore list within a given project, based on project name, resource group, and kind.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj remove-orphaned-ignore PROJECT GROUP KIND [flags]\n```\n\n----------------------------------------\n\nTITLE: Validate RBAC Policy Syntax (Argo CD CLI)\nDESCRIPTION: Displays the basic syntax for the `argocd admin settings rbac validate` command. It shows the primary arguments for specifying the policy source: either a local file path using `--policy-file` or a Kubernetes namespace using `--namespace` to fetch the default ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_validate.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings rbac validate [--policy-file POLICYFILE] [--namespace NAMESPACE] [flags]\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Example with SCM Provider - YAML\nDESCRIPTION: This YAML snippet demonstrates an ApplicationSet configuration using an SCM provider. It shows how a malicious user could potentially exfiltrate secrets by manipulating the `api` field to point to a malicious service and referencing an existing secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\n  namespace: appNs\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - scmProvider:\n      gitea:\n        # The Gitea owner to scan.\n        owner: myorg\n        # With this malicious setting, user can send all request to a Pod that will log incoming requests including headers with tokens\n        api: http://my-service.appNs.svc.cluster.local\n        # If true, scan every branch of every repository. If false, scan only the default branch. Defaults to false.\n        allBranches: true\n        # By changing this token reference, user can exfiltrate any secrets\n        tokenRef:\n          secretName: gitea-token\n          key: token\n  template:\n```\n\n----------------------------------------\n\nTITLE: Example argocd app create command\nDESCRIPTION: This is an example of using the argocd app create command with multiple parameters, demonstrating an alternative to the YAML-based approach proposed for ApplicationSets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nargocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Python Plugin HTTP Server\nDESCRIPTION: Python implementation of a basic HTTP server that responds to plugin API requests. It authenticates requests using a token and provides parameter data in response to the getparams.execute API endpoint.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nwith open(\"/var/run/argo/token\") as f:\n    plugin_token = f.read().strip()\n\n\nclass Plugin(BaseHTTPRequestHandler):\n\n    def args(self):\n        return json.loads(self.rfile.read(int(self.headers.get('Content-Length'))))\n\n    def reply(self, reply):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(json.dumps(reply).encode(\"UTF-8\"))\n\n    def forbidden(self):\n        self.send_response(403)\n        self.end_headers()\n\n    def unsupported(self):\n        self.send_response(404)\n        self.end_headers()\n\n    def do_POST(self):\n        if self.headers.get(\"Authorization\") != \"Bearer \" + plugin_token:\n            self.forbidden()\n\n        if self.path == '/api/v1/getparams.execute':\n            args = self.args()\n            self.reply({\n                \"output\": {\n                    \"parameters\": [\n                        {\n                            \"key1\": \"val1\",\n                            \"key2\": \"val2\"\n                        },\n                        {\n                            \"key1\": \"val2\",\n                            \"key2\": \"val2\"\n                        }\n                    ]\n                }\n            })\n        else:\n            self.unsupported()\n\n\nif __name__ == '__main__':\n    httpd = HTTPServer(('', 4355), Plugin)\n    httpd.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Valid and Invalid Symlink Structure in Helm Chart Directory (Text Diagram)\nDESCRIPTION: This text diagram shows a sample Helm chart directory tree with both permitted and blocked symbolic links, used to illustrate Argo CD's out-of-bounds symlink detection. Symlinks that leave the repository root (relative or absolute) are flagged and blocked; internal links are allowed. While there are no programming dependencies, the chart is evaluated by Argo CD at fetch time. Input: directory structure. Output: security enforcement on symlink validity; violations may fail repository processing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.4-2.5.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nchart\n├── Chart.yaml\n├── values\n│   └── values.yaml\n├── bad-link.yaml   -> ../out-of-bounds.yaml       # Blocked\n├── bad-link-2.yaml -> ../chart/values/values.yaml # Blocked because it leaves the root\n├── bad-link-3.yaml -> /absolute/link.yaml         # Blocked\n└── good-link.yaml  -> values/values.yaml          # OK\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sync Window from a Named Project - Shell Example\nDESCRIPTION: Illustrates removing a sync window with ID 1 from the \"new-project\" Argo CD project. Requires CLI authentication and permission for the specified resource. Only the window with ID 1 in the given project will be affected by this command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_delete.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj windows delete new-project 1\n```\n\n----------------------------------------\n\nTITLE: Deferring Pruning via Application Spec (YAML)\nDESCRIPTION: Configures the `PruneLast=true` sync option in the `spec.syncPolicy.syncOptions` of an Application manifest. This ensures that resource pruning only occurs as the final step of a sync operation, after all other resources have been deployed and reported healthy, and all sync waves have completed successfully.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  syncPolicy:\n    syncOptions:\n    - PruneLast=true\n```\n\n----------------------------------------\n\nTITLE: Subscribing to PagerDuty Notifications with Annotation\nDESCRIPTION: This YAML snippet demonstrates how to subscribe to PagerDuty notifications using annotations. The annotation `notifications.argoproj.io/subscribe.on-rollout-aborted.pagerdutyv2` associates the `on-rollout-aborted` event with the `pagerdutyv2` service, using the specified service ID. Replace `<serviceID for PagerDuty>` with the actual service ID configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty_v2.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-rollout-aborted.pagerdutyv2: \"<serviceID for PagerDuty>\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'argocd version' Command in Bash\nDESCRIPTION: Examples demonstrate common usages of the 'argocd version' command including printing full version of client and server, client-only version, JSON and YAML formatted output, and abbreviated version output. These illustrate typical invocation patterns and flag combinations for retrieving version information.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_version.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Print the full version of client and server to stdout\n  argocd version\n\n  # Print only full version of the client - no connection to server will be made\n  argocd version --client\n\n  # Print the full version of client and server in JSON format\n  argocd version -o json\n\n  # Print only client and server core version strings in YAML format\n  argocd version --short -o yaml\n```\n\n----------------------------------------\n\nTITLE: Example argocd-cm.yaml Deep Link Configuration\nDESCRIPTION: This snippet provides an example of how to configure deep links in the `argocd-cm.yaml` ConfigMap.  It shows configurations for project, application and resource levels. This example includes templating using application, project or resource data, optional conditional expressions, and the use of annotations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/deep-links.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  # project level links\n  project.links: |\n    - url: https://myaudit-system.com?project={{proj.metadata.name}}\n      title: Audit\n  # application level links\n  application.links: |\n    - url: https://mycompany.splunk.com?search={{app.spec.destination.namespace}}\n      title: Splunk\n    # conditionally show link e.g. for specific project\n    - url: https://mycompany.splunk.com?search={{app.spec.destination.namespace}}\n      title: Splunk\n      if: app.spec.proj == \"abc\"\n    - url: https://{{project.metadata.annotations.splunkhost}}?search={{app.spec.destination.namespace}}\n      title: Splunk\n      if: project.metadata.annotations.splunkhost\n    \n  # resource level links\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{res.metadata.namespace}}\n      title: Splunk\n      if: res.kind == \"Pod\" || res.kind == \"Deployment\"\n```\n\n----------------------------------------\n\nTITLE: Mapping CRD for Path-based Routing with Ambassador Ingress Controller in YAML\nDESCRIPTION: An Ambassador Mapping CRD example to route the Argo CD API server traffic under a non-root base path (e.g., /argo-cd). Requires modifying the argocd-server deployment to include the --rootpath flag. This approach rewrites traffic prefixed with /argo-cd to the Argo CD server service at HTTPS port 443. Additionally, a ConfigMap snippet shows how to set server.basehref and server.rootpath to /argo-cd to support reverse proxy scenarios. Login commands require the --grpc-web-root-path flag for CLI access under non-root paths.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: getambassador.io/v2\nkind: Mapping\nmetadata:\n  name: argocd-server\n  namespace: argocd\nspec:\n  prefix: /argo-cd\n  rewrite: /argo-cd\n  service: https://argocd-server:443\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cmd-params-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  ## Server properties\n  # Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from / (default \"/\")\n  server.basehref: \"/argo-cd\"\n  # Used if Argo CD is running behind reverse proxy under subpath different from /\n  server.rootpath: \"/argo-cd\"\n```\n\n----------------------------------------\n\nTITLE: Private HTTP/HTTPS Ingress for Argo CD with Contour Ingress Controller in YAML\nDESCRIPTION: A Kubernetes Ingress resource using Contour ingress class marked as contour-internal to expose the Argo CD API server via HTTP/HTTPS for private/internal access. TLS termination uses a specified Kubernetes secret. The ingress includes a forced SSL redirect annotation. Requires argocd-server to run with --insecure flag or server.insecure set to true for TLS to be terminated by Contour.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-http\n  annotations:\n    kubernetes.io/ingress.class: contour-internal\n    ingress.kubernetes.io/force-ssl-redirect: \"true\"\nspec:\n  rules:\n  - host: internal.path.to.argocd.io\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: http\n  tls:\n  - hosts:\n    - internal.path.to.argocd.io\n    secretName: your-certificate-name\n```\n\n----------------------------------------\n\nTITLE: Listing Argo CD Contexts\nDESCRIPTION: This command lists the available Argo CD contexts. It requires no specific parameters and displays a list of configured contexts, allowing the user to identify and select a specific context for subsequent Argo CD CLI operations. The output is a simple list of context names. There are no dependencies beyond having the Argo CD CLI installed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_context.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd context\n```\n\n----------------------------------------\n\nTITLE: ConfigMap Definition YAML\nDESCRIPTION: This YAML snippet defines a ConfigMap used to configure the resource to read status of generated ArgoCD clusters from. It specifies parameters like `apiVersion`, `kind`, `statusListKey`, and `matchKey` to extract and match cluster names for the template.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/applicationset/examples/clusterDecisionResource/README.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\ndata:\n  apiVersion: group.io/v1\n  kind: mykinds\n  statusListKey: clusters\n  matchKey: name\n```\n\n----------------------------------------\n\nTITLE: Time-related functions and constants in Go\nDESCRIPTION: Provides functions for obtaining current time ('time.Now'), parsing time strings ('time.Parse'), and predefined duration and timestamp constants for formatting and calculations. Dependencies include Go's 'time' package. Inputs are time values or format strings; outputs are 'Time' objects or time layout strings for formatting.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/functions.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntime.Now() // Returns current local time as a Time object\n```\n\nLANGUAGE: Go\nCODE:\n```\ntime.Parse(val string) // Parses a string as RFC3339 time, returns Time object\n```\n\nLANGUAGE: Go\nCODE:\n```\ntime.Nanosecond = 1\n\t\nto\n\ntime.RFC3339 = \"2006-01-02T15:04:05Z07:00\" // Time layout string for RFC3339 format\n```\n\nLANGUAGE: Go\nCODE:\n```\ntime.Duration constants:\n  Nanosecond = 1\n  Microsecond = 1000 * Nanosecond\n  Millisecond = 1000 * Microsecond\n  Second = 1000 * Millisecond\n  Minute = 60 * Second\n  Hour = 60 * Minute\n```\n\n----------------------------------------\n\nTITLE: Adding OCI Registry Credentials\nDESCRIPTION: This example sets up credentials for a Helm OCI registry. It uses the `--enable-oci` flag to enable OCI support and the `--type helm` flag. This configuration enables Argo CD to access and manage Helm charts from the specified OCI registry.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_add.md#_snippet_5\n\nLANGUAGE: CLI\nCODE:\n```\n  # Add credentials with helm oci registry so that these oci registry urls do not need to be added as repos individually.\n  argocd repocreds add localhost:5000/myrepo --enable-oci --type helm\n```\n\n----------------------------------------\n\nTITLE: Understanding the `argocd cluster get` command syntax and purpose\nDESCRIPTION: This section explains the basic syntax and purpose of the `argocd cluster get` command, which retrieves information about a specified Kubernetes cluster managed by Argo CD. It provides the command format with parameters: SERVER/NAME and optional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_get.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster get SERVER/NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Editing ApplicationSet install manifest using Git\nDESCRIPTION: Series of commands to clone, checkout, and modify the ApplicationSet installation YAML directly from the repository for versions less than 0.4.0.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Controlling-Resource-Modification.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\n\ngit clone https://github.com/argoproj/applicationset\n\n# Checkout the version that corresponds to the one you have installed.\ngit checkout \"(version of applicationset)\"\n# example: git checkout \"0.1.0\"\n\ncd applicationset/manifests\n\n# open 'install.yaml' in a text editor, make the same modifications to Deployment \n# as described in the previous section.\n\n# Apply the change to the cluster\nkubectl apply -n argocd -f install.yaml\n```\n\n----------------------------------------\n\nTITLE: Install Go Dependencies - Shell\nDESCRIPTION: This shell script downloads and vendors the required Go dependencies for the Argo CD project.  It uses `make mod-download-local` to pull the dependencies and then uses `make mod-vendor-local` to vendor them. This ensures that the build environment has the necessary Go packages for the project to function correctly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake mod-download-local\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake mod-vendor-local\n```\n\n----------------------------------------\n\nTITLE: Helm: Display Network Policy Connection Note\nDESCRIPTION: This Helm template snippet checks if NetworkPolicy is enabled (`.Values.networkPolicy.enabled`) and external access is disallowed (`not .Values.networkPolicy.allowExternal`). If true, it displays a note informing the user that only pods with the specific label '{{ template \"redis.fullname\" . }}-client=true' will be able to connect to Redis.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_5\n\nLANGUAGE: Helm\nCODE:\n```\n{{ if and (.Values.networkPolicy.enabled) (not .Values.networkPolicy.allowExternal) }}\nNote: Since NetworkPolicy is enabled, only pods with label\n{{ template \"redis.fullname\" . }}-client=true\"\nwill be able to connect to redis.\n{{- else -}}\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with Helm Values File - Bash\nDESCRIPTION: Deploys Minio with configuration parameters sourced from a provided values.yaml file. Requires values.yaml to be present with valid YAML structure and Helm installed. Uses -f to pass custom configuration at installation. Outputs a Helm release honoring all parameter values from the file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release -f values.yaml stable/minio\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of argocd cluster Command (Shell)\nDESCRIPTION: Shows the basic syntax for the `argocd cluster` command, which serves as the entry point for managing cluster credentials in Argo CD. It requires subcommands (like add, list, rm, get, set) and flags to perform specific actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd cluster [flags]\n```\n\n----------------------------------------\n\nTITLE: Install Argo CD with Kustomize\nDESCRIPTION: This command installs Argo CD using Kustomize. It builds the Kustomize project, replaces the image pull policy to 'Never', and applies the generated manifests to the Kubernetes cluster using kubectl.  This allows for testing with locally built images.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/manifests/cmp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build ./test/manifests/cmp | sed 's/imagePullPolicy: Always/imagePullPolicy: Never/g' | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Ignoring drift in 'rules' of Aggregated ClusterRoles via 'ignoreAggregatedRoles'\nDESCRIPTION: Configures Argo CD to ignore changes in 'rules' of aggregated ClusterRoles, preventing false drift detection for RBAC policies that are managed externally, by setting 'ignoreAggregatedRoles' to true in the ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  data:\n    resource.compareoptions: |\n      ignoreAggregatedRoles: true\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Child Applications via CLI using Labels (Bash)\nDESCRIPTION: Argo CD CLI command to synchronize multiple applications based on a label selector. This command targets all applications with the label `app.kubernetes.io/instance=apps`, typically used here to sync the child applications created by the parent 'apps' application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nargocd app sync -l app.kubernetes.io/instance=apps\n```\n\n----------------------------------------\n\nTITLE: Delete Project Role Token - Argo CD\nDESCRIPTION: Deletes a token associated with a project role using the Argo CD CLI. Requires the project name, role name, and the issued-at timestamp of the token. The issued-at timestamp is used to identify the specific token to delete. Ensure you have the necessary permissions and the Argo CD CLI installed and configured to interact with the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_delete-token.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nargocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin ConfigMap in YAML\nDESCRIPTION: ConfigMap definition that configures access to the plugin service. It specifies the authentication token, base URL for the service, and request timeout settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-plugin\n  namespace: argocd\ndata:\n  token: \"$plugin.myplugin.token\" # Alternatively $<some_K8S_secret>:plugin.myplugin.token\n  baseUrl: \"http://myplugin.plugin-ns.svc.cluster.local.\"\n  requestTimeout: \"60\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application Details using Argo CD CLI - Bash\nDESCRIPTION: This snippet demonstrates various usage examples of the 'argocd app get' command to fetch application details from Argo CD. It shows multiple output formats including wide, yaml, json, and tree, along with options to refresh application data and display operational or parameter information. The snippet is reliant on having Argo CD CLI installed and configured with access to an Argo CD server. Inputs include the application name and optional flags that control output verbosity, format, and refresh behavior. Outputs vary by format but typically return detailed application metadata and state information.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_get.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app get APPNAME [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get basic details about the application \"my-app\" in wide format\n  argocd app get my-app -o wide\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get detailed information about the application \"my-app\" in YAML format\n  argocd app get my-app -o yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get details of the application \"my-app\" in JSON format\n  argocd get my-app -o json\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get application details and include information about the current operation\n  argocd app get my-app --show-operation\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Show application parameters and overrides\n  argocd app get my-app --show-params\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Show application parameters and overrides for a source at position 1 under spec.sources of app my-app\n  argocd app get my-app --show-params --source-position 1\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Show application parameters and overrides for a source named \"test\"\n  argocd app get my-app --show-params --source-name test\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Refresh application data when retrieving\n  argocd app get my-app --refresh\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Perform a hard refresh, including refreshing application data and target manifests cache\n  argocd app get my-app --hard-refresh\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get application details and display them in a tree format\n  argocd app get my-app --output tree\n```\n\nLANGUAGE: bash\nCODE:\n```\n  # Get application details and display them in a detailed tree format\n  argocd app get my-app --output tree=detailed\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd app manifests` (Text)\nDESCRIPTION: Details the command-line options inherited from parent Argo CD commands, applicable to `argocd app manifests`. These cover aspects like specifying the Argo CD server context (`--argocd-context`), authentication (`--auth-token`), connection settings (`--server`, `--insecure`, `--grpc-web`), Kubernetes context (`--kube-context`), logging (`--logformat`, `--loglevel`), and other global configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_manifests.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: ArgoCD cert add-ssh command options\nDESCRIPTION: Command-specific options for the 'argocd cert add-ssh' command including batch processing, input file specification, and upsert functionality for replacing existing keys.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_add-ssh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --batch         Perform batch processing by reading in SSH known hosts data (mandatory flag)\n      --from string   Read SSH known hosts data from file (default is to read from stdin)\n  -h, --help          help for add-ssh\n      --upsert        Replace existing SSH server public host keys if key is different in input\n```\n\n----------------------------------------\n\nTITLE: Removing SSH Known Hosts from ArgoCD Using CLI with Bash\nDESCRIPTION: This snippet shows how to remove SSH known host entries from ArgoCD using the CLI. Basic removal uses `argocd cert rm` with the hostname and `--cert-type ssh`. For finer control, you can specify the key sub-type with `--cert-sub-type` to remove a specific SSH key type when multiple subtypes exist for the same host. It requires an operational `argocd` CLI and permissions to modify certificates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/private-repositories.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nargocd cert rm bitbucket.org --cert-type ssh\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd cert rm gitlab.com --cert-type ssh --cert-sub-type ssh-ed25519\n```\n\n----------------------------------------\n\nTITLE: Generating manifests for custom Argo CD images\nDESCRIPTION: Creates installation manifests that reference the custom Argo CD images instead of the default ones.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake manifests\n```\n\n----------------------------------------\n\nTITLE: DEV, TEST, PROD Applications using sourceHydrator in Argo CD (YAML)\nDESCRIPTION: This set of YAML snippets provides concrete Argo CD Application manifests for DEV, TEST, and PROD environments, each leveraging the 'spec.sourceHydrator' configuration with unique dry and sync source settings. Applications specify their source repository, revision, and environment- or region-specific manifest paths. The examples cover distinct target branches for each environment, demonstrate grouping behavior, and illustrate typical multienvironment lifecycles. Inputs are environment-specific Application YAMLs and required repos; outputs are hydrated manifests commited to correct branches upon dry source updates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n### DEV APPS ###\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: dev-west\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      path: environments/dev/west\n    syncSource:\n      targetBranch: environments/dev\n      path: west\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: dev-east\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      path: environments/dev/east\n    syncSource:\n      targetBranch: environments/dev\n      path: east\n---\n### TEST APPS ###\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: test-west\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      path: environments/test/west\n    syncSource:\n      targetBranch: environments/test\n      path: west\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: test-east\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      path: environments/test/east\n    syncSource:\n      targetBranch: environments/prod\n      path: east\n---\n### PROD APPS ###\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: prod-west\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      path: environments/prod/west\n    syncSource:\n      targetBranch: environments/prod\n      path: west\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: prod-east\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      targetRevision: main\n      path: environments/prod/east\n    syncSource:\n      targetBranch: environments/prod\n      path: east\n---\n```\n\n----------------------------------------\n\nTITLE: Role for ApplicationSet Service Account YAML\nDESCRIPTION: This YAML snippet defines the Role for the ApplicationSet service account. It grants the service account permissions to `list` `placementdecisions` resources from the specified API group. This is a crucial step to allow the controller to access the required resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/applicationset/examples/clusterDecisionResource/README.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- apiGroups:\n  - \"cluster.open-cluster-management.io/v1alpha1\"\n  resources:\n  - placementdecisions\n  verbs:\n  - list\n```\n\n----------------------------------------\n\nTITLE: Example: Listing policies before and after removal in Argo CD CLI\nDESCRIPTION: Provides example commands demonstrating how to view a role's policies before removal, execute the removal of a specific policy, and then verify the change by listing policies again. Highlights the use of 'argocd proj role get' and 'argocd proj role remove-policy' commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_remove-policy.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\np, proj:test-project:test-role, applications, update, test-project/project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (3 hours ago)  <none>\n\n# Remove the policy to allow update to objects\n$ argocd proj role remove-policy test-project test-role -a update -p allow -o project\n\n# The role should be removed now.\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (4 hours ago)  <none>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local User in Argo CD (Secret)\nDESCRIPTION: This bash command removes the password entry for the 'alice' user account from the `argocd-secret` Secret in the `argocd` namespace. It uses `kubectl patch` with a JSON patch to delete the `accounts.alice.password` entry.  This step is recommended after removing the user from the ConfigMap. Requires `kubectl` and access to the `argocd-secret` Secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n argocd secrets argocd-secret --type='json' -p='[{\"op\": \"remove\", \"path\": \"/data/accounts.alice.password\"}]'\n```\n\n----------------------------------------\n\nTITLE: Accessing repoURL in Multi-Source Application Templates for Argo CD Notifications (YAML)\nDESCRIPTION: Provides a template snippet demonstrating how to correctly reference the `repoURL` for the first source in a multi-source application using the `index` function (`{{ (index .app.spec.sources 0).repoURL }}`) within Argo CD notification templates. This avoids errors caused by the default single-source path `{{.app.spec.source.repoURL}}`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.example: |\n  github:\n    repoURLPath: \"{{ (index .app.spec.sources 0).repoURL }}\"\n```\n\n----------------------------------------\n\nTITLE: Remove Namespace from Project with argocd CLI\nDESCRIPTION: This command removes a specified source namespace from a given Argo CD AppProject. It requires the project name and the namespace to be removed as input. The command modifies the AppProject configuration, and its output is the command's success or failure. It uses the Argo CD CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-source-namespace.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nargocd proj remove-source-namespace PROJECT NAMESPACE [flags]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling (Deleting) a Minio Helm Release - Bash\nDESCRIPTION: Removes a Minio Helm release from the Kubernetes cluster, deleting all associated components. Requires Helm and the name of the deployed release. Uses helm delete command. Outputs deletion status; persistent volumes may persist depending on cluster setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete my-release\n```\n\n----------------------------------------\n\nTITLE: Disable Server-Side Diff Per Application (Argo CD Annotation) - YAML\nDESCRIPTION: Explicitly disables the Server-Side Diff strategy for this Argo CD Application by adding the `argocd.argoproj.io/compare-options: ServerSideDiff=false` annotation to its metadata. This allows opting out of the global Server-Side Diff setting for a specific application.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diff-strategies.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=false\n...\n```\n\n----------------------------------------\n\nTITLE: Skipping Helm CRD Installation via Argo CD CLI (Bash)\nDESCRIPTION: Shows the use of `argocd app set` with the `--helm-skip-crds` flag for the `helm-guestbook` application. This instructs Argo CD to bypass the installation of any Custom Resource Definitions found in the `crds` directory of the Helm chart.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nargocd app set helm-guestbook --helm-skip-crds\n```\n\n----------------------------------------\n\nTITLE: Related Documentation for 'argocd app delete' Command in Bash\nDESCRIPTION: References additional resources for managing applications with 'argocd app' commands, providing further context and advanced usage options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_delete.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n* [argocd app](argocd_app.md)  - Manage applications\n```\n\n----------------------------------------\n\nTITLE: Authentication and Proxy Settings\nDESCRIPTION: These flags facilitate API server authentication via username/password or token, specify proxy URLs, and set request timeouts. They enable flexible secured communication for export operations, especially in restricted or complex network environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_export.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--password string\n--proxy-url string\n--request-timeout string\n```\n\n----------------------------------------\n\nTITLE: Example usage of 'argocd app add-source' to append a source to an application\nDESCRIPTION: Shows a practical example of how to add a new source to an application named 'guestbook' by specifying repository URL, path, and source name, demonstrating the command's application in real scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_add-source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app add-source guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --source-name guestbook\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Mattermost Notification Template in Argo CD Notifications (YAML)\nDESCRIPTION: This YAML snippet defines a custom notification template `app-deployed` specifically for Mattermost. It includes a main message and uses a nested structure for Mattermost attachments, following the Slack attachment format to display details like Sync Status, Repository, and links to the application in Argo CD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/mattermost.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ntemplate.app-deployed: |\n  message: |\n    Application {{.app.metadata.name}} is now running new version of deployments manifests.\n  mattermost:\n    attachments: |\n      [{\n        \"title\": \"{{.app.metadata.name}}\",\n        \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n        \"color\": \"#18be52\",\n        \"fields\": [{\n          \"title\": \"Sync Status\",\n          \"value\": \"{{.app.status.sync.status}}\",\n          \"short\": true\n        }, {\n          \"title\": \"Repository\",\n          \"value\": \"{{.app.spec.source.repoURL}}\",\n          \"short\": true\n        }]\n      }]\n\n```\n\n----------------------------------------\n\nTITLE: Listing ApplicationSets using ArgoCD CLI\nDESCRIPTION: This command lists all ApplicationSets managed by ArgoCD. It retrieves the ApplicationSet resources and displays them in the default output format (wide).  No specific filtering or formatting options are used in this basic example.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd appset list\n```\n\n----------------------------------------\n\nTITLE: API Call Example for Second Branch to Retrieve Image Digests\nDESCRIPTION: This shell command illustrates requesting digest parameters for another branch, such as 'feature-branch-2'. It uses the same API endpoint, authorization header, and JSON payload structure to obtain unique digest data used for constructing branch-specific deployment images.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:4355/api/v1/getparams.execute -H \"Authorization: Bearer strong-password\" -d \\\n'{\n  \"applicationSetName\": \"fb-matrix\",\n  \"input\": {\n    \"parameters\": {\n      \"branch\": \"feature-branch-2\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Kustomize Patch for RBAC ConfigMap - YAML\nDESCRIPTION: This Kustomize patch demonstrates how to add additional RBAC policies to an existing `argocd-rbac-cm` ConfigMap. It appends the policies defined in `policy.tester-overlay.csv` to the existing policies.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.tester-overlay.csv: |\n    p, role:tester, applications, *, */*, allow\n    p, role:tester, projects, *, *, allow\n    g, my-org:team-qa, role:tester\n```\n\n----------------------------------------\n\nTITLE: Configuring GnuPG Signature Keys in ArgoCD Project Manifest Using YAML\nDESCRIPTION: Declaratively specifies the GnuPG public key IDs required for signature verification in an ArgoCD AppProject manifest. The `signatureKeys` field is an array where each item is an object containing a `keyID`. This config enables the project to enforce commit signature verification for the given keys when syncing apps.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: gpg\n  namespace: argocd\nspec:\n  clusterResourceWhitelist:\n  - group: '*'\n    kind: '*'\n  description: GnuPG verification\n  destinations:\n  - namespace: '*'\n    server: '*'\n  namespaceResourceWhitelist:\n  - group: '*'\n    kind: '*'\n  signatureKeys:\n  - keyID: 4AEE18F83AFDEB23\n  sourceRepos:\n  - '*'\n```\n\n----------------------------------------\n\nTITLE: Querying Resource Tracking Method in Argo CD - Shell - sh\nDESCRIPTION: Provides a shell command to extract the `application.resourceTrackingMethod` setting from the `argocd-cm` ConfigMap using `kubectl`. This allows users to determine if their environment is set up with label-based or annotation-based resource tracking prior to upgrading. The command requires `kubectl` access with permissions to read the config map in the `argocd` namespace. The output reveals the current tracking method configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get cm argocd-cm -n argocd -o jsonpath='{.data.application\\.resourceTrackingMethod}'\n```\n\n----------------------------------------\n\nTITLE: Example configuration for setting log format in argocd-cmd-params-cm.yaml\nDESCRIPTION: Shows how to configure the log format for the argocd-application-controller component by adding an entry to the argocd-cmd-params-cm.yaml ConfigMap. This example sets the log format to JSON.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/additional-configuration-method.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    controller.log.format: \"json\"\n```\n\n----------------------------------------\n\nTITLE: Setting custom image tag for Argo CD builds\nDESCRIPTION: Configures a custom image tag for the Argo CD Docker images instead of using the default ':latest' tag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport IMAGE_TAG=1.5.0-myrc\n```\n\n----------------------------------------\n\nTITLE: Configuring the info field in Argo CD Application manifest\nDESCRIPTION: This YAML snippet demonstrates how to add additional information to an Argo CD Application using the 'info' field. The example includes project configuration, source repository details, destination settings, and a custom info entry that adds a clickable URL to the Application details page.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/extra_info.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject: argo-demo\nsource:\n  repoURL: 'https://demo'\n  path: argo-demo\ndestination:\n  server: https://demo\n  namespace: argo-demo\ninfo:\n  - name: Example:\n    value: >-\n      https://example.com\n```\n\n----------------------------------------\n\nTITLE: Templating ApplicationSet with Plugin Parameters YAML\nDESCRIPTION: Shows how to use the parameters generated by the plugin (e.g., `{{ .digestFront }}`, `{{ .digestBack }}`) and other generators (e.g., `{{.branch}}`) within the ApplicationSet `template` section. This allows dynamic configuration of application manifests based on data retrieved by the generators.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/applicationset-plugin-generator.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  template:\n    metadata:\n      name: \"fb-matrix-{{.branch}}\"\n    spec:\n      source:\n        repoURL: \"git@github.com:binboum/argo-test.git\"\n        targetRevision: \"HEAD\"\n        path: charts/app-client\n        helm:\n          releaseName: feature-test-matrix-{{.branch}}\n          valueFiles:\n            - values.yaml\n          values: |\n            front:\n              image: registry.my/argo-test/front:{{.branch}}@{{ .digestFront }}\n            back:\n              image: registry.my/argo-test/back:{{.branch}}@{{ .digestBack }}\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: \"{{.branch}}\"\n```\n\n----------------------------------------\n\nTITLE: Removing GPG Key with Argo CD CLI (argocd gpg rm)\nDESCRIPTION: This snippet demonstrates the basic syntax for removing a GPG key. It takes the KEYID as an argument, which is the ID of the key to be removed.  It relies on the Argo CD CLI being installed and configured correctly. It outputs information related to the removal process and may require proper authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg_rm.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nargocd gpg rm KEYID [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Redis Secret - Bash\nDESCRIPTION: This bash command deletes the `argocd-redis` secret from the specified namespace. This is a step in rotating the Redis secret used by Argo CD.  The user needs to replace `<argocd namesapce>` with the actual namespace where Argo CD is installed. This will force Argo CD to generate a new secret.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete secret argocd-redis -n <argocd namesapce>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Kubectl Namespace to argocd (App Creation Setup)\nDESCRIPTION: Configures the current `kubectl` context to use the `argocd` namespace by default, specifically noted here as a prerequisite before creating applications using the `argocd` CLI commands that follow.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-context --current --namespace=argocd\n```\n\n----------------------------------------\n\nTITLE: Example: Creating a Project Role with Description\nDESCRIPTION: Provides a practical example of creating a project role called \"my-role\" within the \"my-project\" project, including a description for the role. Demonstrates usage of the command and --description flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_create.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # Create a project role in the \"my-project\" project with the name \"my-role\".\n  argocd proj role create my-project my-role --description \"My project role description\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Argo CD Application Source Configuration (YAML)\nDESCRIPTION: Illustrates the deprecation of the `spec.source.componentParameterOverrides` field in Argo CD Application specs and its replacement with source-specific configuration fields, using Helm parameters as an example. This change requires updating declarative application YAMLs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  source:\n    componentParameterOverrides:\n    - name: image.tag\n      value: v1.2\n```\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  source:\n    helm:\n      parameters:\n      - name: image.tag\n        value: v1.2\n```\n\n----------------------------------------\n\nTITLE: Sample API Response Containing Another Set of Image Digests\nDESCRIPTION: This JSON response illustrates digests for a different branch, corresponding to a second API call. The data includes unique SHA-256 hashes for the front and back images, allowing automated updates of deployments only after successful build confirmations, avoiding reliance on commit hashes alone.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Plugin.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"parameters\": [\n      {\n        \"digestFront\": \"sha256:7c20b927946805124f67a0cb8848a8fb1344d16b4d0425d63aaa3f2427c20497\",\n        \"digestBack\": \"sha256:e55e7e40700bbab9e542aba56c593cb87d680cefdfba3dd2ab9cfcb27ec384c2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote for Rebasing\nDESCRIPTION: This command adds the upstream remote to allow fetching changes from the main Argo CD repository.  This is necessary for rebasing the forked repository with the latest upstream changes.  The remote is added with the name `upstream`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd argo-cd\ngit remote add upstream https://github.com/argoproj/argo-cd.git\n```\n\n----------------------------------------\n\nTITLE: Command syntax for removing a policy from a role in Argo CD\nDESCRIPTION: Defines the basic command structure to remove a policy from a specified role within a project. The command requires specifying the project name, role name, and optional flags such as action, object, and permission.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_remove-policy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj role remove-policy PROJECT ROLE-NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Certificate from File - ArgoCD\nDESCRIPTION: This command adds a TLS certificate for a given server to the ArgoCD certificate store. It reads the certificate from a specified file. The server name (cd.example.com) is passed as an argument, and the `--from` flag specifies the path to the certificate file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd cert add-tls --from ~/mycert.pem cd.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Sync Hooks in Argo CD using YAML\nDESCRIPTION: This code snippet demonstrates how to configure a pre-sync hook in Argo CD using a YAML annotation. The `argocd.argoproj.io/hook: PreSync` annotation signifies that the resource should be executed before the main sync operation. This allows for tasks such as database migrations or schema updates to occur before deploying the main application resources. Requires the Argo CD controller to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-waves.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n```\n\n----------------------------------------\n\nTITLE: Shell: Connect Externally via ClusterIP (Port Forwarding)\nDESCRIPTION: Provides shell commands to connect to Redis from outside the cluster when the service type is ClusterIP (`.Values.master.service.type` contains \"ClusterIP\"). It first finds the name of a Redis pod using `kubectl get pods` with a label selector. Then, it uses `kubectl port-forward` to forward a local port (e.g., `{{ .Values.master.port }}`) to the Redis port on that pod. Finally, it uses `redis-cli` to connect to `127.0.0.1` on the forwarded local port, conditionally including the password (`-a $REDIS_PASSWORD`) if `.Values.usePassword` is true.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app={{ template \"redis.name\" . }}\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl port-forward --namespace {{ .Release.Namespace }} $POD_NAME {{ .Values.master.port }}:{{ .Values.master.port }}\nredis-cli -h 127.0.0.1 -p {{ .Values.master.port }} {{- if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Argo CD with UI Base Path (Nginx)\nDESCRIPTION: Provides an example Nginx configuration for proxying requests to an Argo CD instance configured with `--basehref` (e.g., '/argo-cd'). It includes a rewrite rule within the location block to strip the '/argo-cd' prefix before proxying the request to the Argo CD server, as the API server still expects requests at the root path.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_30\n\nLANGUAGE: nginx\nCODE:\n```\nworker_processes 1;\n\nevents { worker_connections 1024; }\n\nhttp {\n\n    sendfile on;\n\n    server {\n        listen 443;\n\n        location /argo-cd {\n            rewrite /argo-cd/(.*) /$1  break;\n            proxy_pass         https://localhost:8080;\n            proxy_redirect     off;\n            proxy_set_header   Host $host;\n            proxy_set_header   X-Real-IP $remote_addr;\n            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header   X-Forwarded-Host $server_name;\n            # buffering should be disabled for api/v1/stream/applications to support chunked response\n            proxy_buffering off;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tracking Annotation for External Resources - YAML - yaml\nDESCRIPTION: Demonstrates the structure and expected syntax for manually applying a tracking annotation to a Kubernetes resource for Argo CD resource tracking. This snippet shows the required format and placeholder values within the `argocd.argoproj.io/tracking-id` annotation. Users must manually substitute `<app name>`, `<resource group>`, `<resource kind>`, `<resource namespace>`, and `<resource name>`. This snippet is intended for advanced scenarios where manual resource tracking is needed, though this practice is not officially supported.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nargocd.argoproj.io/tracking-id: <app name>:<resource group>/<resource kind>:<resource namespace>/<resource name>\n```\n\n----------------------------------------\n\nTITLE: Handling slash '/' characters in JSON pointers within 'ignoreDifferences'\nDESCRIPTION: Replaces '/' with '~1' in JSON pointers to correctly reference nested fields, addressing escaped character requirements in Kubernetes JSONPath syntax within the ignoreDifferences configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ignoreDifferences:\n    - kind: Node\n      jsonPointers:\n        - /metadata/labels/node-role.kubernetes.io~1worker\n```\n\n----------------------------------------\n\nTITLE: Application Annotation for Default Triggers (YAML)\nDESCRIPTION: This YAML snippet displays the usage of application annotations to subscribe to default triggers defined in the ConfigMap.  It demonstrates how to apply default trigger configurations to individual applications. The annotations specify destinations (e.g., slack, mattermost) for the default triggers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/triggers.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.slack: my-channel\n    notifications.argoproj.io/subscribe.mattermost: my-mattermost-channel\n```\n```\n\n----------------------------------------\n\nTITLE: Example: Remove resource by project, group, and kind\nDESCRIPTION: This example shows how to remove a resource of a specific group and kind from the orphaned ignore list for a project named PROJECT, without using a name pattern.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj remove-orphaned-ignore PROJECT GROUP KIND\n```\n\n----------------------------------------\n\nTITLE: Defining Git Repository Write Secret Structure\nDESCRIPTION: Details the required structure for a Kubernetes Secret used to provide Git write credentials to the hydrator component. This secret is labeled `argocd.argoproj.io/secret-type: repository-write` and contains connection details and credentials like GitHub App ID, Installation ID, and private key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    argocd.argoproj.io/secret-type: repository-write\nstringData:\n  url: 'https://github.com/argoproj/argocd-example-apps'\n  githubAppID: '123456'\n  githubInstallationID: '123456'\n  githubAppPrivateKey: |\n    -----\n```\n\n----------------------------------------\n\nTITLE: Register Top Bar Action Menu Extension with Flyout and Condition\nDESCRIPTION: This JavaScript snippet shows how to register a top bar action menu extension using `extensionsAPI.registerTopBarActionMenuExt`, which adds a button to the application's top action menu.  The extension renders \"Toolbar Extension Test\". Clicking the button triggers the flyout component, which displays \"This is a flyout\". The `shouldDisplay` function determines whether the extension is displayed, though this is a stub in this example. It runs immediately by wrapping it in an immediately invoked function expression (IIFE).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n((window) => {\n  const shouldDisplay = () => {\n    return true;\n  };\n  const flyout = () => {\n    return React.createElement(\n            \"div\",\n            { style: { padding: \"10px\" } },\n            \"This is a flyout\"\n    );\n  };\n  const component = () => {\n    return React.createElement(\n            \"div\",\n            {\n              onClick: () => flyout()\n            },\n            \"Toolbar Extension Test\"\n    );\n  };\n  window.extensionsAPI.registerTopBarActionMenuExt(\n          component,\n          \"Toolbar Extension Test\",\n          \"Toolbar_Extension_Test\",\n          flyout,\n          shouldDisplay,\n          '',\n          true\n  );\n})(window);\n```\n\n----------------------------------------\n\nTITLE: Listing TLS Certificates - ArgoCD\nDESCRIPTION: This command lists all known TLS certificates stored in ArgoCD. The `--cert-type https` flag filters the output to only show HTTPS certificates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nargocd cert list --cert-type https\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-redis-haproxy ServiceMonitor in YAML\nDESCRIPTION: This ServiceMonitor configures Prometheus to scrape metrics from the redis-haproxy service within Argo CD. It targets the service using the label `app.kubernetes.io/name: argocd-redis-ha-haproxy` and specifies `http-exporter-port` as the endpoint. This necessitates a running redis-haproxy instance and Prometheus Operator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-redis-haproxy-metrics\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-redis-ha-haproxy\n  endpoints:\n  - port: http-exporter-port\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Extension Individually in Argo CD Using Dedicated YAML Key\nDESCRIPTION: This example illustrates how to configure a proxy extension named `httpbin` individually via a dedicated key `extension.config.httpbin` inside the Argo CD ConfigMap (`argocd-cm`). The YAML defines connection and idle timeout settings, maximum idle connections, and backend service details including URL, header injection (supporting secret references), and optional cluster association. This configuration style simplifies GitOps operations by separating extensions into distinct keys.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/proxy-extensions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  extension.config.httpbin: |\n    connectionTimeout: 2s\n    keepAlive: 15s\n    idleConnectionTimeout: 60s\n    maxIdleConnections: 30\n    services:\n    - url: http://httpbin.org\n      headers:\n      - name: some-header\n        value: '$some.argocd.secret.key'\n      cluster:\n        name: some-cluster\n        server: https://some-cluster\n```\n\n----------------------------------------\n\nTITLE: Removing Allowed GnuPG Signature Key from ArgoCD Project Using CLI in Bash\nDESCRIPTION: Removes a specified GnuPG public key ID from the list of allowed signature keys in an ArgoCD project, disabling enforcement of commit signature verification with that key. Requires project name and key ID. After removal, commits signed only by this key will not be validated for the project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/gpg-verification.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj remove-signature-key myproj 4AEE18F83AFDEB23\n```\n\n----------------------------------------\n\nTITLE: Generating Dex Configuration via argocd-dex gendexcfg - Shell\nDESCRIPTION: This snippet demonstrates the syntax for invoking the 'argocd-dex gendexcfg' CLI command to generate a Dex configuration from current Argo CD settings. The command accepts optional flags for user impersonation, Kubernetes context, TLS credentials, output configuration, authentication, logging, and timeouts. Inputs include various flags such as '--kubeconfig', '--namespace', '--out', and more, depending on the intended environment and security needs. Outputs the generated config either to stdout or a specified file; dependencies include a working 'argocd-dex' binary and access to an Argo CD instance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-dex_gendexcfg.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd-dex gendexcfg [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Application URLs with Helm Templating and Shell for Kubernetes Ingress and Services\nDESCRIPTION: This snippet generates the access URL for a Kubernetes application by conditionally inspecting Helm chart values for ingress or service types such as NodePort, LoadBalancer, and ClusterIP. It requires a Helm chart context with ingress and service configuration under .Values, plus kubectl access to the Kubernetes cluster namespace specified by .Release.Namespace. The snippet outputs the formatted HTTP/HTTPS URL by extracting host info for ingress or retrieving IP/port details using kubectl commands. It supports port-forwarding for ClusterIP services, enabling local access. Key inputs include ingress.enabled, ingress.hosts, service.type, and service.port. Outputs include the full application address for user access. Dependencies include Helm templating engine and kubectl command line tool with cluster access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: Helm Templating + Shell\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range .Values.ingress.hosts }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ . }}{{ $.Values.ingress.path }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"helm-guestbook.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get svc -w {{ template \"helm-guestbook.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template \"helm-guestbook.fullname\" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app={{ template \"helm-guestbook.name\" . }},release={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl port-forward $POD_NAME 8080:80\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with emptyDir Instead of Persistent Storage\nDESCRIPTION: Command to deploy Minio without persistent storage using emptyDir volume type. Note that data will be deleted when the pod is removed from the node.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set persistence.enabled=false stable/minio\n```\n\n----------------------------------------\n\nTITLE: Setting Default Kubectl Namespace to argocd\nDESCRIPTION: Configures the current `kubectl` context to use the `argocd` namespace by default for subsequent commands that do not explicitly specify a namespace. This simplifies administration tasks within the Argo CD namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-context --current --namespace=argocd\n```\n\n----------------------------------------\n\nTITLE: Setting 'ignoreResourceStatusField' for specific resource types\nDESCRIPTION: Allows selective ignoring of the 'status' field for resource types like CRDs, enabling controlled suppression of status differences where appropriate.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.compareoptions: |\n    # disables status field diffing in specified resource types\n    ignoreResourceStatusField: crd\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Files Using CLI in Argo CD\nDESCRIPTION: Defines a pattern to exclude certain files or directories from being processed as part of the application, which is useful for ignoring non-relevant manifests or configs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app set guestbook --directory-exclude \"config.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Functions (Sprig) in Argo CD Templates (YAML)\nDESCRIPTION: Illustrates how to use built-in functions, including those from the Sprig library, within notification templates. This example uses the `call` function to invoke the `repo.GetCommitMetadata` function with the application's sync revision and then accesses the `Author` field of the result.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/templates.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.my-custom-template-slack-template: |\n    message: \"Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests to Argo CD API\nDESCRIPTION: This snippet shows how to make an authenticated request to the Argo CD API using a bearer token in the Authorization header. The example retrieves applications from the API.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/api-docs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl $ARGOCD_SERVER/api/v1/applications -H \"Authorization: Bearer $ARGOCD_TOKEN\" \n{\"metadata\":{\"selfLink\":\"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\",\"resourceVersion\":\"37755\"},\"items\":...}\n```\n\n----------------------------------------\n\nTITLE: Editing Project Example\nDESCRIPTION: This command allows editing of the configuration details of an existing Argo CD project.  The `PROJECT` argument is required, specifying the project to be edited. The specific edits are made using other flags or configuration settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  # Edit the information on project with name PROJECT\n  argocd proj edit PROJECT\n```\n\n----------------------------------------\n\nTITLE: Setting kubectl Context\nDESCRIPTION: Sets the default Kubernetes namespace for `kubectl` commands to `argocd`. This simplifies subsequent commands by avoiding the need to specify the namespace each time.  This assumes the `argocd` namespace exists.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl config set-context --current --namespace=argocd\n```\n\n----------------------------------------\n\nTITLE: Restarting HA Redis components - Bash\nDESCRIPTION: These bash commands restart the HA Redis components in Argo CD. This is required after deleting the `argocd-redis` secret during Redis secret rotation. This ensures the new secret is used by the Redis deployment and statefulset.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment argocd-redis-ha-haproxy\nkubectl rollout restart statefulset argocd-redis-ha-server\n```\n\n----------------------------------------\n\nTITLE: Restarting Argo CD Server Deployment - Bash\nDESCRIPTION: This command is provided as a troubleshooting step to restart the `argocd-server` deployment. Restarting the server pod ensures that any configuration changes made to Secrets or ConfigMaps are applied.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/keycloak.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl rollout restart deployment argocd-server -n argocd\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Redis configuration\nDESCRIPTION: Configures Redis-related settings, such as compression, HA proxy, and deployment name, for optimized backend operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy\n      --redis-name string               Name of the Redis deployment\n```\n\n----------------------------------------\n\nTITLE: Storing PagerDuty API Token Kubernetes Secret\nDESCRIPTION: Defines a Kubernetes Secret to securely store the PagerDuty API token (`pagerdutyToken`). This Secret is referenced by the Argo CD Notifications controller to authenticate with the PagerDuty API. Requires a Kubernetes cluster and permissions to create Secrets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pagerduty.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pagerdutyToken: <pd-api-token>\n```\n\n----------------------------------------\n\nTITLE: Checking RBAC permissions using a local policy file - argocd\nDESCRIPTION: This example demonstrates how to check if a role has permission to create an application within a specified project, using a local policy file. The `--policy-file` flag is used to specify the path to the policy file. This command requires the `argocd` CLI tool and access to a local policy file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_can.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings rbac can some:role create application 'default/app' --policy-file policy.csv\n```\n\n----------------------------------------\n\nTITLE: Applying Helm plugin with Kustomize and Kubectl\nDESCRIPTION: This shell command builds the Helm plugin example using `kustomize` and then applies it to the Argo CD namespace using `kubectl`.  It deploys the plugin resources to the `argocd` namespace. The Kustomize configuration is located in the `examples/plugins/helm/` directory.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/examples/plugins/helm/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkustomize build examples/plugins/helm/ | kubectl apply -n argocd -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Paths for Manifest Generation in Argo CD Application\nDESCRIPTION: YAML configuration for an Argo CD Application that specifies multiple paths in the manifest-generate-paths annotation, separated by semicolons, to monitor both application-specific and shared resources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  annotations:\n    # resolves to 'my-application' and 'shared'\n    argocd.argoproj.io/manifest-generate-paths: .;../shared\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: my-application\n# ...\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD CLI binary on Mac (Intel)\nDESCRIPTION: Commands to install the downloaded Argo CD CLI binary on Mac Intel and clean up temporary files.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo install -m 555 argocd-darwin-amd64 /usr/local/bin/argocd\nrm argocd-darwin-amd64\n```\n\n----------------------------------------\n\nTITLE: Defining LinkInfo Message - Protobuf\nDESCRIPTION: This snippet defines the structure of a LinkInfo message using Protocol Buffers. The message encapsulates the necessary information for a deep link, including its name, URL, description, and an optional icon class. This message is used in API responses to convey link data.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/deep-links.md#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage LinkInfo {\n  required string name = 1;\n  required string url = 2;\n  optional string description = 3;\n  optional string iconClass = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription for Webhook Notifications (YAML)\nDESCRIPTION: Establishes an Application resource annotation to subscribe to deployment triggers, enabling webhook notifications upon sync events and successful app health, facilitating external integrations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/examples.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-deployed-trigger.on-deployed-webhook: \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Thread Key for Google Chat Messages (YAML)\nDESCRIPTION: This snippet shows how to define a thread key for Google Chat messages, allowing related notifications to be grouped in a single thread. The thread key uses the application name, ensuring that notifications for the same application are grouped together.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/googlechat.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  message: The app {{ .app.metadata.name }} has successfully synced!\n  googlechat:\n    threadKey: {{ .app.metadata.name }}\n```\n\n----------------------------------------\n\nTITLE: Using ApplicationSet Templates in Helm Charts\nDESCRIPTION: Example showing how to escape ApplicationSet template variables when deploying them as part of a Helm chart to prevent Helm from trying to process the ApplicationSet template variables.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Template.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n      name: '{{`{{ .nameNormalized }}`}}-guestbook'\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Namespace Metadata in Argo CD\nDESCRIPTION: Configure an application to set resource tracking on a namespace without adding custom labels or annotations by providing empty metadata maps.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-options.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: test\nspec:\n  syncPolicy:\n    managedNamespaceMetadata:\n      labels: # The labels to set on the application namespace\n      annotations: # The annotations to set on the application namespace\n    syncOptions:\n    - CreateNamespace=true\n```\n\n----------------------------------------\n\nTITLE: Defining an ArgoCDExtension CRD in YAML\nDESCRIPTION: Example YAML for the proposed ArgoCDExtension Custom Resource Definition that points to a Git repository containing extension code for Argo Rollouts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/002-ui-extensions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ArgoCDExtension\nmetadata:\n  name: argo-rollouts\nspec:\n  repository: https://github.com/argoproj-labs/rollout-extension\n  revision: HEAD\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart with Custom Password (Bash)\nDESCRIPTION: Installs the stable/redis Helm chart named 'my-release', setting the Redis server password to 'secretpassword' using the '--set' argument. This demonstrates a common method for overriding default chart values directly on the command line.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release \\\n  --set password=secretpassword \\\n    stable/redis\n```\n\n----------------------------------------\n\nTITLE: Declarative Application Management in Custom Namespace\nDESCRIPTION: YAML manifest showing how to declaratively create an Argo CD Application in a namespace other than the control plane. The application is defined with a specific project that must allow the target namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Application\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: some-app\n  namespace: some-namespace\nspec:\n  project: some-project\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Labels for Prometheus in ArgoCD\nDESCRIPTION: Kubernetes container configuration example showing how to enable and specify which cluster labels should be exposed as Prometheus metrics using the --metrics-cluster-labels flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncontainers:\n- command:\n  - argocd-application-controller\n  - --metrics-cluster-labels\n  - team-name\n  - --metrics-cluster-labels\n  - environment\n```\n\n----------------------------------------\n\nTITLE: Passing Build Environment Variables to Helm Declaratively (YAML)\nDESCRIPTION: Defines an Argo CD Application manifest snippet (`spec.source.helm.parameters`) to pass a build environment variable (`$ARGOCD_APP_NAME`) as a parameter (`app`) to the associated Helm chart. This achieves the same result as the CLI method but uses declarative syntax.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/helm.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  spec:\n    source:\n      helm:\n        parameters:\n        - name: app\n          value: $ARGOCD_APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Project Deletion Example in Argo CD\nDESCRIPTION: An example demonstrating how to delete a project named 'PROJECT' using the Argo CD CLI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_delete.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete the project with name PROJECT\nargocd proj delete PROJECT\n```\n\n----------------------------------------\n\nTITLE: Correcting YAML Syntax for Slack Notification Service in Argo CD ConfigMap (YAML)\nDESCRIPTION: Demonstrates the correct and incorrect YAML syntax for defining a Slack notification service within the `argocd-notifications-cm` ConfigMap. The key difference is quoting the emoji value for the `icon` key to prevent YAML parsing errors.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-errors.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Incorrect:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: :rocket:\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Correct:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: \":rocket:\" # <- diff here\n```\n\n----------------------------------------\n\nTITLE: Removing a Group Claim from an Argo CD Project Role via CLI\nDESCRIPTION: This command removes a specified group claim from a role within a designated Argo CD project. It requires the project name, the role name, and the group claim to be removed as arguments. Various flags can be used to configure connection details, authentication, and other operational parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_remove-group.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role remove-group PROJECT ROLE-NAME GROUP-CLAIM [flags]\n```\n\n----------------------------------------\n\nTITLE: Argocd repo inherited parent command options - Shell\nDESCRIPTION: This snippet describes options inherited from Argo CD parent commands that apply to 'argocd repo'. These include settings for Argo CD server context, authentication tokens, TLS certificates, logging, proxy configuration, Redis and Repo server naming, and port forwarding. They provide advanced customization for communication with the Argo CD environment and influence CLI behavior globally or per command invocation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repo.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Register Status Panel Extension with Flyout\nDESCRIPTION: This JavaScript snippet illustrates how to create a status panel extension with an associated flyout widget using `extensionsAPI.registerStatusPanelExtension`. The main component includes an `openFlyout` prop that triggers the display of the flyout panel when the component is clicked. The flyout component simply renders \"This is a flyout\". It runs immediately by wrapping it in an immediately invoked function expression (IIFE).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n((window) => {\n  const component = (props: {\n    openFlyout: () => any\n  }) => {\n    return React.createElement(\n            \"div\",\n            {\n              style: { padding: \"10px\" },\n              onClick: () => props.openFlyout()\n            },\n            \"Hello World\"\n    );\n  };\n  const flyout = () => {\n    return React.createElement(\n            \"div\",\n            { style: { padding: \"10px\" } },\n            \"This is a flyout\"\n    );\n  };\n  window.extensionsAPI.registerStatusPanelExtension(\n          component,\n          \"My Extension\",\n          \"my_extension\",\n          flyout\n  );\n})(window);\n```\n\n----------------------------------------\n\nTITLE: Example: Remove resource with name pattern from orphaned ignore list\nDESCRIPTION: This example demonstrates removing resources matching a name pattern from the orphaned ignore list, by specifying the --name flag along with project, group, and kind.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj remove-orphaned-ignore PROJECT GROUP KIND --name NAME\n```\n\n----------------------------------------\n\nTITLE: Doublestar Pattern Examples\nDESCRIPTION: This snippet presents examples of `doublestar` patterns. These patterns demonstrate how to match files and directories recursively using various wildcards, providing insight into how the new globbing implementation functions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\n**/child*\ngrandparent/**/child?\n**/parent/*\n**\n```\n\n----------------------------------------\n\nTITLE: Configuring Glob Pattern Paths for Manifest Generation in Argo CD Application\nDESCRIPTION: YAML configuration for an Argo CD Application using glob pattern matching in the manifest-generate-paths annotation to monitor specific file patterns that would trigger reconciliation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  annotations:\n    # resolves to any file matching the pattern of *-secret.yaml in the top level shared folder\n    argocd.argoproj.io/manifest-generate-paths: \"/shared/*-secret.yaml\"\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Job Trigger Webhook Service in Argo CD (YAML)\nDESCRIPTION: Defines a webhook service named `jenkins` in the `argocd-notifications-cm` ConfigMap. It specifies the Jenkins job build `url` including the job name and token, and sets up `basicAuth` with username and password/API key for authentication. Note the `type: Opaque` is part of the ConfigMap definition, not the service configuration itself, but included for context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/webhook.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.jenkins: |\n    url: http://<jenkins-host>/job/<job-name>/build?token=<job-secret>\n    basicAuth:\n      username: <username>\n      password: <api-key>\n\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: RBAC Policy Example (Old)\nDESCRIPTION: This example shows the old RBAC policy that grants all privileges using '*' in the resource and action fields. This policy needs to be updated for Argo CD v2.7 to control access to the new `extensions` resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.6-2.7.md#_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, role:org-admin, *, *, *, allow\n```\n\n----------------------------------------\n\nTITLE: Adding Egress Rules to Redis HA HAProxy NetworkPolicy\nDESCRIPTION: Modifications to the argocd-redis-ha-haproxy NetworkPolicy to add Egress rules that allow Redis access on ports 6379/26379 and DNS resolution. This provides equivalent security as pre-2.10.11 while enabling necessary connectivity.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.9-2.10.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 6379\n+      protocol: TCP\n+    - port: 26379\n+      protocol: TCP\n+    to:\n+    - podSelector:\n+        matchLabels:\n+          app.kubernetes.io/name: argocd-redis-ha\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD CLI environment variables\nDESCRIPTION: Sets environment variables to connect the Argo CD CLI to the local development server without needing to specify connection options with each command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport ARGOCD_SERVER=127.0.0.1:8080\nexport ARGOCD_OPTS=\"--plaintext --insecure\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Argo CD ApplicationSet using CLI Parameters\nDESCRIPTION: This shell command demonstrates creating the same 'cluster-addons' ApplicationSet directly via Argo CD CLI parameters, without using a YAML file. It illustrates the verbosity required, specifying generator details, template metadata, source, and destination information through numerous flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nappset create --name cluster-addons --gitGeneratorRepoURL \"repo url\" --gitGeneratorRevision \"HEAD\" --gitGeneratorDirectory \"examples/git-generator-directory/cluster-addons/*\" --templateMetadataName \"{{path.basename}}\" --templateProject \"default\" --templateSrcRepoURL \"https://github.com/argoproj-labs/applicationset.git\" --templateSrcRevision \"HEAD\" --templateSrcPath \"{{path}}\" --templateDestServer \"https://kubernetes.default.svc\" --templateDestNamespace \"{{path.basename}}\"\n```\n\n----------------------------------------\n\nTITLE: Application Source with missing path/chart field\nDESCRIPTION: This YAML snippet demonstrates how the `path` field can be omitted from an `ApplicationSource`. If `path` is missing, the controller will not attempt to generate manifests for that source. The example also includes a `ref` to be used by other sources.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/multiple-sources-for-applications.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sources:\n    - repoURL: https://github.com/my-org/my-repo # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"myRepo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Generator Output JSON\nDESCRIPTION: Provides an example of the JSON data structure returned by the external plugin service to the ApplicationSet controller. It's a list of objects, where each object represents a set of parameters generated by the plugin, such as image digests in this example.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/applicationset-plugin-generator.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"digestFront\": \"xxxxxxxx\",\n    \"digestBack\": \"xxxxxxxx\",\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Syntax for Editing a Project with 'argocd proj edit'\nDESCRIPTION: Provides the basic command structure for editing an existing project in Argo CD, specifying the project name and optional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_edit.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj edit PROJECT [flags]\n```\n\n----------------------------------------\n\nTITLE: Restarting Argo CD workloads after configuration changes\nDESCRIPTION: Commands to restart the argocd-server and argocd-application-controller workloads after updating the configuration in argocd-cmd-params-cm ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart -n argocd deployment argocd-server\nkubectl rollout restart -n argocd statefulset argocd-application-controller\n```\n\n----------------------------------------\n\nTITLE: Ignoring specific list items within 'spec.template.spec.initContainers' using JQ path expressions\nDESCRIPTION: Instructs Argo CD to ignore differences for init containers with a specific name using a JQ path expression, facilitating fine-grained control over list item diffing based on content rather than position.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ignoreDifferences:\n    - group: apps\n      kind: Deployment\n      jqPathExpressions:\n        - .spec.template.spec.initContainers[] | select(.name == \"injected-init-container\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Helm Parameters from Kustomization (Shell)\nDESCRIPTION: A shell script (`get-parameters.sh`) intended for the Kustomize/Helm proxy CMP's dynamic parameter generation. It builds the kustomization, then identifies included Helm charts from the kustomization.yaml. For each chart, it extracts parameters from its default values.yaml using `yq` and formats them into a JSON array using `jq`, suitable for Argo CD's dynamic parameter announcement.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkustomize build . --enable-helm > /dev/null\n\nget_parameters() {\nwhile read -r chart; do  \n  yq e -o=p \"charts/$chart/values.yaml\" | jq --arg chart \"$chart\" --slurp --raw-input '\n    {\n      name: \"\\($chart)-helm-parameters\",\n      title: \"\\($chart) Helm parameters\",\n      tooltip: \"Parameter overrides for the \\($chart) Helm chart.\",\n      collectionType: \"map\",\n      map: split(\"\\\\n\") | map(capture(\"(?<key>.*) = (?<value>.*)\")) | from_entries\n    }'\ndone << EOF\n$(yq e '.helmCharts[].name' kustomization.yaml)\nEOF\n}\n\n# Collect the parameters generated for each chart into one array.\nget_parameters | jq --slurp\n```\n\n----------------------------------------\n\nTITLE: Default Values for Helm App of Apps Chart (YAML)\nDESCRIPTION: Defines the default values in `values.yaml` for the App of Apps Helm chart. This example specifies the default Kubernetes API server URL (`https://kubernetes.default.svc`) for the `spec.destination.server` parameter used in child application templates.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/cluster-bootstrapping.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  destination:\n    server: https://kubernetes.default.svc\n```\n\n----------------------------------------\n\nTITLE: Passing Empty Environment Variables to Plugins - YAML - yaml\nDESCRIPTION: Demonstrates how Argo CD 3.0 passes empty environment variables to plugins via the `env` list in the Application source plugin spec. This snippet includes both a filled and an empty variable definition, showing that `value: ''` will set the corresponding environment variable to an empty string. It's important to note that config management plugins may need to tolerate empty environment values after upgrading.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    plugin:\n      name: example-plugin\n      env:\n        - name: VERSION\n          value: '1.2.3'\n        - name: DATA # Even though this is empty, it will be passed to the plugin as ARGOCD_ENV_DATA=\"\".\n          value: ''\n\n```\n\n----------------------------------------\n\nTITLE: Defining Health Check Test Cases for Custom Resources - YAML\nDESCRIPTION: This YAML snippet provides the required structure for writing health_check test cases for a custom Argo CD resource. Each entry maps an expected healthStatus (with status and optional message) to an input resource definition, referenced by path. This file, health_test.yaml, is necessary for automated testing of each health.lua logic, and the inputPath must refer to a relevant test resource YAML in the testdata directory.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/health.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ntests:\n- healthStatus:\n    status: ExpectedStatus\n    message: Expected message\n  inputPath: testdata/test-resource-definition.yaml\n```\n\n----------------------------------------\n\nTITLE: ArgoCD global command options\nDESCRIPTION: Inherited options from parent commands that can be used with 'argocd cert add-ssh', including authentication, connection, and configuration options for interacting with the ArgoCD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_add-ssh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for argocd account delete-token\nDESCRIPTION: The available flags specific to the delete-token command, including account specification and help options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_delete-token.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -a, --account string   Account name. Defaults to the current account.\n  -h, --help             help for delete-token\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependency Replacements for Argo CD\nDESCRIPTION: This code snippet shows the `replace` section that needs to be added to your `go.mod` file to resolve dependency issues when importing Argo CD packages. Specifically, it addresses \"unknown revision v0.0.0\" errors caused by Kubernetes dependencies. The code replaces multiple Kubernetes and other dependency versions with specific, known versions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/import.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nreplace (\n    // https://github.com/golang/go/issues/33546#issuecomment-519656923\n    github.com/go-check/check => github.com/go-check/check v0.0.0-20180628173108-788fd7840127\n\n    github.com/golang/protobuf => github.com/golang/protobuf v1.4.2\n    github.com/gorilla/websocket => github.com/gorilla/websocket v1.4.2\n    github.com/grpc-ecosystem/grpc-gateway => github.com/grpc-ecosystem/grpc-gateway v1.16.0\n    github.com/improbable-eng/grpc-web => github.com/improbable-eng/grpc-web v0.0.0-20181111100011-16092bd1d58a\n\n    // Avoid CVE-2022-28948\n    gopkg.in/yaml.v3 => gopkg.in/yaml.v3 v3.0.1\n\n    // https://github.com/kubernetes/kubernetes/issues/79384#issuecomment-505627280\n    k8s.io/api => k8s.io/api v0.23.1\n    k8s.io/apiextensions-apiserver => k8s.io/apiextensions-apiserver v0.23.1\n    k8s.io/apimachinery => k8s.io/apimachinery v0.23.1\n    k8s.io/apiserver => k8s.io/apiserver v0.23.1\n    k8s.io/cli-runtime => k8s.io/cli-runtime v0.23.1\n    k8s.io/client-go => k8s.io/client-go v0.23.1\n    k8s.io/cloud-provider => k8s.io/cloud-provider v0.23.1\n    k8s.io/cluster-bootstrap => k8s.io/cluster-bootstrap v0.23.1\n    k8s.io/code-generator => k8s.io/code-generator v0.23.1\n    k8s.io/component-base => k8s.io/component-base v0.23.1\n    k8s.io/component-helpers => k8s.io/component-helpers v0.23.1\n    k8s.io/controller-manager => k8s.io/controller-manager v0.23.1\n    k8s.io/cri-api => k8s.io/cri-api v0.23.1\n    k8s.io/csi-translation-lib => k8s.io/csi-translation-lib v0.23.1\n    k8s.io/kube-aggregator => k8s.io/kube-aggregator v0.23.1\n    k8s.io/kube-controller-manager => k8s.io/kube-controller-manager v0.23.1\n    k8s.io/kube-proxy => k8s.io/kube-proxy v0.23.1\n    k8s.io/kube-scheduler => k8s.io/kube-scheduler v0.23.1\n    k8s.io/kubectl => k8s.io/kubectl v0.23.1\n    k8s.io/kubelet => k8s.io/kubelet v0.23.1\n    k8s.io/legacy-cloud-providers => k8s.io/legacy-cloud-providers v0.23.1\n    k8s.io/metrics => k8s.io/metrics v0.23.1\n    k8s.io/mount-utils => k8s.io/mount-utils v0.23.1\n    k8s.io/pod-security-admission => k8s.io/pod-security-admission v0.23.1\n    k8s.io/sample-apiserver => k8s.io/sample-apiserver v0.23.1\n)\n```\n\n----------------------------------------\n\nTITLE: Istio Gateway and VirtualService Configuration for Argo CD - YAML\nDESCRIPTION: This YAML snippet configures an Istio Gateway and VirtualService resource for exposing Argo CD safely with HTTPS/TLS support. The gateway defines two listeners, one for HTTP with automatic HTTPS redirection and one for HTTPS with TLS configured using a Kubernetes secret named 'argocd-server-tls'. TLS settings include allowed cipher suites and TLS version constraints. The VirtualService routes any requests with path prefix '/argocd' to the 'argocd-server' service on port 80. Together, they enable secure access to Argo CD through Istio ingress.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: argocd-gateway\n  namespace: argocd\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n    tls:\n     httpsRedirect: true\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    hosts:\n    - \"*\"\n    tls:\n      credentialName: argocd-server-tls\n      maxProtocolVersion: TLSV1_3\n      minProtocolVersion: TLSV1_2\n      mode: SIMPLE\n      cipherSuites:\n        - ECDHE-ECDSA-AES128-GCM-SHA256\n        - ECDHE-RSA-AES128-GCM-SHA256\n        - ECDHE-ECDSA-AES128-SHA\n        - AES128-GCM-SHA256\n        - AES128-SHA\n        - ECDHE-ECDSA-AES256-GCM-SHA384\n        - ECDHE-RSA-AES256-GCM-SHA384\n        - ECDHE-ECDSA-AES256-SHA\n        - AES256-GCM-SHA384\n        - AES256-SHA\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: argocd-virtualservice\n  namespace: argocd\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - argocd-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /argocd\n    route:\n    - destination:\n        host: argocd-server\n        port:\n          number: 80\n```\n\n----------------------------------------\n\nTITLE: Connection and Output Customization Flags\nDESCRIPTION: These options control connection parameters such as kubeconfig path, context, namespace scope, output file, timeout, and server address. They also allow toggling response compression and skipping TLS verification to adapt the command for various environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_export.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-h\n--help\n--disable-compression\n--insecure-skip-tls-verify\n--kubeconfig string\n -n, --namespace string\n -o, --out string\n--request-timeout string\n--server string\n```\n\n----------------------------------------\n\nTITLE: `argocd admin cluster` Command Options (Shell)\nDESCRIPTION: Shows the specific option available directly under the `argocd admin cluster` command. The `-h` or `--help` flag provides usage information and help text for the command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for cluster\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Project Role List Command in Argo CD\nDESCRIPTION: Examples showing how to list roles in an Argo CD project. The first example shows the default table format, while the second demonstrates using the --output flag to specify alternative output formats.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# This command will list all the roles in argocd-project in a default table format.\nargocd proj role list PROJECT\n  \n# List the roles in the project in formats like json, yaml, wide, or name.\nargocd proj role list PROJECT --output json\n```\n\n----------------------------------------\n\nTITLE: Resulting Parameter Outputs from the Argo CD Matrix Generator Combining Two Git Generators\nDESCRIPTION: This YAML snippet illustrates the combined parameter outputs generated by the ApplicationSet matrix generator from the two Git generators with pathParamPrefix applied. Each entry merges application-level parameters ('appName' and prefixed path data) with deployment target parameters ('region', 'clusterName', and prefixed path data), yielding multiple deployment permutations. This output format is essential for templating the final Argo CD Application manifests and demonstrates how pathParamPrefix avoids key collisions by namespacing path fields per generator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Matrix.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- appName: app-one\n  app.path: /apps\n  app.path.filename: app-one.json\n  # plus additional path-related parameters from the first child generator, all\n  # prefixed with \"app\".\n  region: east\n  clusterName: cluster-one\n  target.path: /targets/app-one\n  target.path.filename: east-cluster-one.json\n  # plus additional path-related parameters from the second child generator, all\n  # prefixed with \"target\".\n\n- appName: app-one\n  app.path: /apps\n  app.path.filename: app-one.json\n  region: east\n  clusterName: cluster-two\n  target.path: /targets/app-one\n  target.path.filename: east-cluster-two.json\n\n- appName: app-two\n  app.path: /apps\n  app.path.filename: app-two.json\n  region: east\n  clusterName: cluster-one\n  target.path: /targets/app-two\n  target.path.filename: east-cluster-one.json\n\n- appName: app-two\n  app.path: /apps\n  app.path.filename: app-two.json\n  region: west\n  clusterName: cluster-three\n  target.path: /targets/app-two\n  target.path.filename: west-cluster-three.json\n```\n\n----------------------------------------\n\nTITLE: Enabling Recursive Resource Detection via CLI in Argo CD\nDESCRIPTION: By executing this command, you enable recursive detection of resources within subdirectories of the repository for the specified application, allowing nested manifest files to be included in deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/directory.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app set guestbook --directory-recurse\n```\n\n----------------------------------------\n\nTITLE: Inherited Context and Authentication Options in Bash for 'argocd app delete'\nDESCRIPTION: Lists additional configuration flags inherited from parent commands, including server context, authentication, TLS options, and other connection settings, necessary for establishing communication with Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_delete.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; default \"argocd-application-controller\"\n--core                            If set to true then CLI talks directly to Kubernetes instead of Argo CD API server\n--grpc-web                        Enables gRPC-web protocol\n--grpc-web-root-path string       Web root for gRPC-web\n-H, --header strings              Additional HTTP headers for requests\n--http-retry-max int              Max retries for HTTP connection\n--insecure                        Skip server certificate verification\n--kube-context string             Target kube-context\n--logformat string                Logging format\n--loglevel string                 Logging level\n--plaintext                       Disable TLS\n--port-forward                    Use port forwarding\n--port-forward-namespace string Namespace for port forwarding\n--prompts-enabled                 Enable/disable interactive prompts\n--redis-compress string           Redis compression setting\n--redis-haproxy-name string       Redis HA Proxy name\n--redis-name string               Redis deployment name\n--repo-server-name string         Repo server name\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Argo CD API server name\n```\n\n----------------------------------------\n\nTITLE: Syncing local application manifests with Argo CD CLI\nDESCRIPTION: Example command for uploading local manifests directly to Argo CD for development purposes. This approach requires a user with 'override' permission (typically an admin) as it bypasses the GitOps workflow.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/application_sources.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ argocd app sync APPNAME --local /path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD CLI binary on Mac M1\nDESCRIPTION: Commands to install the downloaded Argo CD CLI binary on Mac M1 and clean up temporary files.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo install -m 555 argocd-darwin-arm64 /usr/local/bin/argocd\nrm argocd-darwin-arm64\n```\n\n----------------------------------------\n\nTITLE: Overriding Helm Binary Using Volume Mounts in Argo CD Repo-Server (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to replace the default Helm binary bundled with the Argo CD repo-server by using an init container to download a specific version of Helm into an emptyDir volume. The volume is then mounted into the repo-server container, overriding the existing Helm binary path. Key parts include the definition of the emptyDir volume to hold the custom binaries, the init container that downloads and extracts the Helm binary, and the volumeMount in the main repo-server container to override the binary. This approach requires Kubernetes cluster support for init containers and volume mounts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/custom_tools.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    spec:\n      # 1. Define an emptyDir volume which will hold the custom binaries\n      volumes:\n      - name: custom-tools\n        emptyDir: {}\n      # 2. Use an init container to download/copy custom binaries into the emptyDir\n      initContainers:\n      - name: download-tools\n        image: alpine:3.8\n        command: [sh, -c]\n        args:\n        - wget -qO- https://get.helm.sh/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - &&\n          mv linux-amd64/helm /custom-tools/\n        volumeMounts:\n        - mountPath: /custom-tools\n          name: custom-tools\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\n      containers:\n      - name: argocd-repo-server\n        volumeMounts:\n        - mountPath: /usr/local/bin/helm\n          name: custom-tools\n          subPath: helm\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Service Account\nDESCRIPTION: Shell commands to create Role and RoleBinding for the service account with permissions to manage pods, deployments, and services.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create role guestbook-deployer-role --verb get,list,update,delete --resource pods,deployment,service\nkubectl create rolebinding guestbook-deployer-rb --serviceaccount guestbook-deployer --role guestbook-deployer-role\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding SAML Certificate for Dex Configuration - Shell\nDESCRIPTION: This shell command demonstrates how to base64-encode a Google SAML certificate for use in Dex configuration. The input certificate file (ArgoCD.cer) should be in PEM format. The resulting base64 output must be copied into the caData field of the Dex SAML connector configuration. Requires OpenSSL or compatible tools for formatting if necessary.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/google.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ cat ArgoCD.cer | base64\n\n```\n\n----------------------------------------\n\nTITLE: Scaling up Argo CD deployments in cluster\nDESCRIPTION: Scales up all Argo CD components in the development cluster after completing local testing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n argocd scale statefulset/argocd-application-controller --replicas 1\nkubectl -n argocd scale deployment/argocd-dex-server --replicas 1\nkubectl -n argocd scale deployment/argocd-repo-server --replicas 1\nkubectl -n argocd scale deployment/argocd-server --replicas 1\nkubectl -n argocd scale deployment/argocd-redis --replicas 1\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Kubernetes context\nDESCRIPTION: Directs the CLI to a specific kube-context for cluster operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n      --kube-context string             Directs the command to the given kube-context\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ArgoCD Project Add-Source Command\nDESCRIPTION: Demonstrates how to add a source repository URL to a project named PROJECT.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add a source repository (URL) to the project with name PROJECT\nargocd proj add-source PROJECT URL\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client (mc) - Shell\nDESCRIPTION: This command configures the MinIO client (mc) to connect to the MinIO server. It adds a new host alias (`{{ template \"minio.fullname\" . }}-local`) that points to the MinIO server's address (`http://localhost:9000` or `http://<External-IP>:{{ .Values.service.port }}`). It also provides the access key and secret key for authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmc config host add {{ template \"minio.fullname\" . }}-local http://localhost:9000 {{ .Values.accessKey }} {{ .Values.secretKey }} S3v4\n```\n\n----------------------------------------\n\nTITLE: Defining a Project-Scoped Cluster (Declarative)\nDESCRIPTION: Illustrates the declarative method for defining a Kubernetes cluster resource that is scoped to an Argo CD project using a Kubernetes Secret. Similar to repositories, the `stringData.project` field links the cluster (`my-project1`) to a specific project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/projects.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster.example.com\n  project: my-project1 # Project scoped \n  server: https://mycluster.example.com\n  config: |\n    {\n      \"bearerToken\": \"<authentication token>\",\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Argo CD Application Configuration via YAML\nDESCRIPTION: Defines an Argo CD Application resource with an 'operation' section for synchronization setup, including 'initiatedBy' and 'sync' parameters. This YAML can be applied with 'kubectl apply' to create or update the application with specified sync operation details. Dependencies include the Argo CD CRD specification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/sync-kubectl.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: <app-name>\n  namespace: <namespace>\nspec:\n  ...\noperation:\n  initiatedBy:\n    username: <username>\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n----------------------------------------\n\nTITLE: Options specific to argocd repocreds list command\nDESCRIPTION: Command-specific options for the 'argocd repocreds list' command, including help flag and output format selection.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_list.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help            help for list\n-o, --output string   Output format. One of: json|yaml|wide|url (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Configuration context\nDESCRIPTION: Specifies which Argo CD server context to use, allowing targeting different environments or clusters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n```\n\n----------------------------------------\n\nTITLE: Example Merged Output with Interpolation (YAML)\nDESCRIPTION: This snippet illustrates a potential merged output for the value interpolation example. It assumes a cluster named `germany01` with label `location=Germany` and a git directory named `Germany`. The `merge` generator combines parameters from both the `clusters` and `git` generators based on the matching interpolated `values.selector` ('Germany'), resulting in a unified parameter set containing cluster details (`name`, `server`) and git details (`path`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# From the cluster generator\n- name: germany01\n  server: https://1.2.3.4\n  # From the git generator\n  path: Germany\n  # Combining selector with the merge generator\n  values.selector: 'Germany'\n  # More values from cluster & git generator\n  # […]\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Flags for Context and Authentication\nDESCRIPTION: Enumerates inherited options from parent commands for specifying Argo CD context, configuration paths, impersonation, authentication tokens, TLS settings, and cluster connections, enabling flexible and secure command execution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing the Test Image via Make and Shell - Shell\nDESCRIPTION: This sequence of shell commands builds the testing container image ('argocd-e2e-cluster') and pushes it to a container registry. It sets an environment variable for the registry namespace, uses 'make' targets for building and pushing, and then generates test manifests using 'kustomize'. Dependencies include GNU 'make', 'kustomize', the relevant Docker/OCI tooling, and access to a writeable repository. The generated manifest should be referenced in subsequent deployment steps.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd test/remote\nexport IMAGE_NAMESPACE=quay.io/{YOUR USERNAME HERE}\nmake image\nmake image-push\nmake manifests > /tmp/e2e-repositories.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Tracking using Annotation (YAML)\nDESCRIPTION: This snippet shows a Kubernetes Deployment manifest configured to be tracked by Argo CD using the `annotation` method. It applies the `argocd.argoproj.io/tracking-id` annotation to the resource's metadata, allowing Argo CD to identify and manage it based on this unique ID. The value typically includes application details and resource identity (kind, namespace, name).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/resource_tracking.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  annotations:\n    argocd.argoproj.io/tracking-id: my-app:apps/Deployment:default/my-deployment\n```\n\n----------------------------------------\n\nTITLE: Listing Available Resource Actions with argocd admin (bash)\nDESCRIPTION: Uses the `argocd admin settings resource-overrides list-actions` command to display the names of custom resource actions available for the resources defined in the target file (`/tmp/deploy.yaml`). The available actions are determined by the Lua scripts configured within the specified Argo CD ConfigMap file (`--argocd-cm-path /private/tmp/argocd-cm.yaml`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings resource-overrides list-actions /tmp/deploy.yaml --argocd-cm-path /private/tmp/argocd-cm.yaml\n```\n\n----------------------------------------\n\nTITLE: Logging into Argo CD via CLI\nDESCRIPTION: This command logs a user into Argo CD using the CLI and the `--sso` flag, enabling Single Sign-On. It uses the provided `<my-argo-cd-url>`. It opens a browser for authentication using the configured identity provider (e.g., Microsoft Entra ID) and then authenticates the user based on credentials from the browser.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/microsoft.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nargocd login <my-argo-cd-url> --grpc-web-root-path / --sso\n```\n\n----------------------------------------\n\nTITLE: Using CLI to Get Application in a Different Namespace\nDESCRIPTION: CLI command to retrieve an Argo CD Application named 'foo' in the namespace 'bar' using the namespace/name syntax.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-any-namespace.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nargocd app get foo/bar\n```\n\n----------------------------------------\n\nTITLE: Final Merged Parameter Output (YAML)\nDESCRIPTION: This snippet presents the final parameter sets produced by the top-level `merge` generator in the first example after processing all child generators. The `staging` cluster has `values.kafka` set to 'false', and the `production` cluster has `values.redis` set to 'true', reflecting the applied overrides from the second and third generators.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Merge.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'false'\n  values.redis: 'false'\n\n- name: production\n  server: https://2.4.6.8\n  values.kafka: 'true'\n  values.redis: 'true'\n```\n\n----------------------------------------\n\nTITLE: Specific Options for `argocd proj role add-policy`\nDESCRIPTION: Lists the command-line flags specifically available for the `add-policy` subcommand. These options allow specifying the action (`--action`), the target object (`--object`), the permission type (`--permission`, either 'allow' or 'deny'), and accessing help (`--help`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_add-policy.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n  -a, --action string       Action to grant/deny permission on (e.g. get, create, list, update, delete)\n  -h, --help                help for add-policy\n  -o, --object string       Object within the project to grant/deny access.  Use '*' for a wildcard. Will want access to '<project>/<object>'\n  -p, --permission string   Whether to allow or deny access to object with the action.  This can only be 'allow' or 'deny' (default \"allow\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Inherited Argo CD Global Options (Bash)\nDESCRIPTION: Lists global options inherited from parent `argocd` commands. These options configure client-server communication, authentication, logging, and other general CLI settings applicable to `argocd app rollback`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_rollback.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Defining Commit Manifests gRPC Message (Protobuf)\nDESCRIPTION: This Protobuf message, `CommitManifests`, is used to represent the request for pushing Kubernetes manifests to a git repository. It includes details such as the repository URL, target branch, the SHA of the dry commit, commit author, message, timestamp, and details regarding the hydrated manifests to be pushed. It's required for the commit operation, enabling communication between the client and the server with necessary information to perform git operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator/commit-server/README.md#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// CommitManifests represents the caller's request for some Kubernetes manifests to be pushed to a git repository.\nmessage CommitManifests {\n  // repoURL is the URL of the repo we're pushing to. HTTPS or SSH URLs are acceptable.\n  required string repoURL = 1;\n  // targetBranch is the name of the branch we're pushing to.\n  required string targetBranch = 2;\n  // drySHA is the full SHA256 hash of the \"dry commit\" from which the manifests were hydrated.\n  required string drySHA = 3;\n  // commitAuthor is the name of the author of the dry commit.\n  required string commitAuthor = 4;\n  // commitMessage is the short commit message from the dry commit.\n  required string commitMessage = 5;\n  // commitTime is the dry commit timestamp.\n  required string commitTime = 6;\n  // details holds the information about the actual hydrated manifests.\n  repeated CommitPathDetails details = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster-wide Resources Allowance in Argo CD CLI\nDESCRIPTION: CLI commands to allow cluster-wide resources in default project and match previous behavior when upgrading from v0.8 to v0.9. Specifically, the commands enable cluster resource deployment permissions, maintaining compatibility with v0.8 behaviors.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nargocd project allow-cluster-resource default '*' '*'\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj allow-cluster-resource default '*' '*'\n```\n\n----------------------------------------\n\nTITLE: System-level configuration to ignore 'caBundle' in MutatingWebhookConfiguration\nDESCRIPTION: Customizes the system-wide diffing behavior to ignore differences in the 'caBundle' field within webhook configurations, preventing false positives due to non-critical modifications at the API object level.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/diffing.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |\n    jqPathExpressions:\n    - '.webhooks[]?.clientConfig.caBundle'\n```\n\n----------------------------------------\n\nTITLE: Basic ArgoCD Cluster Stats Command Syntax\nDESCRIPTION: Basic command structure for running the ArgoCD admin cluster stats command to print information about cluster statistics and inferred shard number.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_stats.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin cluster stats [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Triggers Locally (Bash)\nDESCRIPTION: This command retrieves the list of configured notification triggers using a local ConfigMap file (`argocd-notifications-cm.yaml`) and an explicitly empty secret. It avoids using the Kubernetes cluster configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications trigger get \\\n  --config-map ./argocd-notifications-cm.yaml --secret :empty\n```\n\n----------------------------------------\n\nTITLE: Flags and Options for 'argocd app terminate-op' Command (bash)\nDESCRIPTION: This snippet lists the available command line options and flags for the 'argocd app terminate-op' command in Argo CD CLI. It includes the help flag '-h, --help' and multiple inherited flags from parent commands that control authentication (such as '--auth-token'), server connection parameters (including '--server', '--insecure', '--grpc-web'), logging ('--loglevel', '--logformat'), Kubernetes context selection ('--kube-context'), TLS and certificate settings, port forwarding, and Redis configuration among others. These options allow detailed customization of command execution and connectivity to Argo CD server or Kubernetes cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_terminate-op.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for terminate-op\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \\\"/home/user/.config/argocd/config\\\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-application-controller\\\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \\\"json\\\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \\\"info\\\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \\\"gzip\\\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-redis-ha-haproxy\\\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-redis\\\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-repo-server\\\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \\\"argocd-server\\\")\n```\n\n----------------------------------------\n\nTITLE: Example Dynamic Kustomize Parameter Output (YAML)\nDESCRIPTION: An example YAML structure representing the expected output from the dynamic parameter generation script (`generate-params.sh`) for the simple Kustomize CMP. It shows how a parameter named `images` is defined as a map to allow overriding image values.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n[\n  {\n    \"name\": \"images\",\n    \"title\": \"Image Overrides\",\n    \"collectionType\": \"map\",\n    \"map\": {\n      \"quay.io/argoproj/argocd\": \"docker.example.com/proxy/argoproj/argocd\",\n      \"ubuntu:latest\": \"docker.example.com/proxy/argoproj/argocd\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Argo CD User Password\nDESCRIPTION: This bash command updates the password for a specified user account in Argo CD. It requires the current user's password (`<current-user-password>`) and the desired new password (`<new-user-password>`). Replace `<name>` with the target user's username. If managing users as the admin user, `<current-user-password>` should be the current admin password. Requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# if you are managing users as the admin user, <current-user-password> should be the current admin password.\nargocd account update-password \\\n  --account <name> \\\n  --current-password <current-user-password> \\\n  --new-password <new-user-password>\n```\n\n----------------------------------------\n\nTITLE: Multi-Cluster Extension Backend Service Configuration in argocd-cm.yaml - YAML\nDESCRIPTION: This YAML snippet illustrates configuring multiple backend services for a single UI extension ('some-extension') in a multi-cluster Argo CD deployment. Each service entry specifies a backend URL and the associated cluster name, allowing Argo CD to route API traffic to the appropriate service based on the Application’s destination cluster. Pre-requisites: Argo CD is deployed across multiple clusters, and each backend is deployed and accessible per cluster. Inputs: extension name, cluster service URLs, clusterName fields. Outputs: Flexible, cluster-aware routing for extension backends. Limitation: The Application must supply its name via the 'Argocd-Application-Name' header for correct cluster resolution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/proxy-extensions.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextension.config: |\n  extensions:\n    - name: some-extension\n      enabled: true\n      backend:\n        idleConnTimeout: 10s\n        services:\n          - url: http://extension-name.com:8080\n            clusterName: kubernetes.local\n          - url: https://extension-name.ppd.cluster.k8s.local:8080\n            clusterName: admins@ppd.cluster.k8s.local\n\n```\n\n----------------------------------------\n\nTITLE: Sample NetworkPolicy for Redis Egress Access (UDP/TCP 53)\nDESCRIPTION: This snippet defines a NetworkPolicy to allow egress DNS traffic (ports 53 UDP/TCP) from Redis pods, ensuring Redis can resolve domain names. It applies to the 'argocd-redis-network-policy'. This policy is necessary to restrict Redis access while enabling DNS resolution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.10-2.11.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n  - Egress\n  egress:\n  - ports:\n    - port: 53\n      protocol: UDP\n    - port: 53\n      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Sync utility function for retrieving App info in Go\nDESCRIPTION: Provides 'sync.GetInfoItem' function which retrieves the 'info' item value for a given key from an Argo CD application sync operation stored in a map. Depends on the application's specific data structure. Inputs are the application map and key string; output is the value associated with 'info' for that key.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/functions.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nsync.GetInfoItem(app map, name string) string // Retrieves the info item value by name\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Ingress for Argo CD (pre-1.21.3-gke.1600) (YAML)\nDESCRIPTION: Defines a Kubernetes Ingress resource for Argo CD on GKE clusters running versions earlier than 1.21.3-gke.1600. It uses the 'argocd-frontend-config' for HTTPS redirect, references the 'secret-example-com' TLS secret, and routes traffic for 'argocd.example.com' to the 'argocd-server' service using `pathType: ImplementationSpecific` and path `\"/*\"`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd\n  namespace: argocd\n  annotations:\n    networking.gke.io/v1beta1.FrontendConfig: argocd-frontend-config\nspec:\n  tls:\n    - secretName: secret-example-com\n  rules:\n    - host: argocd.example.com\n      http:\n        paths:\n        - pathType: ImplementationSpecific\n          path: \"/*\"   # \"*\" is needed. Without this, the UI Javascript and CSS will not load properly\n          backend:\n            service:\n              name: argocd-server\n              port:\n                number: 80\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Argo CD Commands\nDESCRIPTION: Lists the command-line flags inherited from parent Argo CD commands, applicable to `argocd app wait`. These options control aspects like authentication (token, certificates), connection settings (server address, context, insecure, gRPC-web), Kubernetes context, logging levels, output formats, and connection details for internal components like Redis and various Argo CD controllers/servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_wait.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    --argocd-context string           The name of the Argo-CD server context to use\n    --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n    --client-crt string               Client certificate file\n    --client-crt-key string           Client certificate key file\n    --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n    --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n    --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n    --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n    --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n    --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n    --insecure                        Skip server certificate and domain verification\n    --kube-context string             Directs the command to the given kube-context\n    --logformat string                Set the logging format. One of: json|text (default \"json\")\n    --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n    --plaintext                       Disable TLS\n    --port-forward                    Connect to a random argocd-server port using port forwarding\n    --port-forward-namespace string   Namespace name which should be used for port forwarding\n    --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n    --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n    --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n    --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n    --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n    --server string                   Argo CD server address\n    --server-crt string               Server certificate file\n    --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Command Syntax for Creating a Role Token in Argo CD CLI (Shell Command)\nDESCRIPTION: This snippet provides the general syntax for the 'argocd proj role create-token' command. It requires the specification of the Argo CD project and role name, with optional flags for further customization. Useful as a template, this syntax forms the basis for building command line invocations to automate token generation for different environments. The snippet assumes the Argo CD CLI is properly configured and the user has sufficient privileges.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_create-token.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj role create-token PROJECT ROLE-NAME [flags]\n\n```\n\n----------------------------------------\n\nTITLE: Disabling application sync impersonation in Argo CD via ConfigMap\nDESCRIPTION: Defines the YAML configuration to disable impersonation feature by setting 'application.sync.impersonation.enabled' to 'false' in the 'argocd-cm' ConfigMap. Disabling this feature prevents use of impersonation for application syncs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/app-sync-using-impersonation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  application.sync.impersonation.enabled: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm API Versions in Application Spec\nDESCRIPTION: Shows how to specify a list of supported Kubernetes API versions directly within the `spec.source.helm.apiVersions` field of an Argo CD Application resource. This list is used when running `helm template` to simulate cluster capabilities and adjust manifest output dynamically.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Application\nspec:\n  source:\n    helm:\n      apiVersions:\n        - admissionregistration.k8s.io/v1/MutatingWebhookConfiguration\n        - admissionregistration.k8s.io/v1/ValidatingWebhookConfiguration\n        - ... etc.\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding Argo CD API Server Service for Remote Non-OpenShift Cluster - Shell\nDESCRIPTION: This command tunnels traffic from local port 4443 to the remote Argo CD server service's port 443 in the 'argocd-e2e' namespace. Used for remote cluster access not running OpenShift and when you need to authenticate or test the API locally. 'kubectl' and free local port 4443 are required.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd-e2e port-forward svc/argocd-server 4443:443\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Parameters via Shell Script in CMP Config (YAML/Shell)\nDESCRIPTION: This snippet demonstrates use of a shell command (using 'sh', 'yq', and 'jq') in the CMP config to dynamically announce parameters by parsing a values.yaml file. The dynamic parameter generator script provides a parameter announcement in JSON, allowing dynamic discovery of possible fields for the plugin. Required tools: yq and jq must be available in the plugin environment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: helm\nspec:\n  parameters:\n    dynamic:\n      command: \n      - sh\n      - -c\n      - |\n        # Use yq to generate a list of parameters. Then use jq to convert that list of parameters to a parameters\n        # announcement list.\n        yq e -o=p values.yaml | jq -nR '\n          [{\n            name: \"helm-parameters\",\n            title: \"Helm Parameters\",\n            tooltip: \"Parameters to override when generating manifests with Helm\",\n            collectionType: \"map\",\n            map: (inputs | capture(\"(?<key>.*) = (?<value>.*)\") | from_entries)\n          }]'\n```\n\n----------------------------------------\n\nTITLE: ConfigMap for Pushover Service Token\nDESCRIPTION: Defines a ConfigMap named `argocd-notifications-cm` that specifies the Pushover service token under `service.pushover`. This allows Argo CD notifications to access the API token securely and send notifications via Pushover. Requires prior creation of the Pushover app to obtain the token.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/pushover.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pushover: |\n    token: $pushover-token\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for argocd admin settings validate\nDESCRIPTION: Details the options inherited from parent 'argocd' commands that can be used with 'argocd admin settings validate'. These options control aspects like connecting to the Argo CD instance (e.g., --server, --auth-token, --kubeconfig), specifying local configuration files (--argocd-cm-path, --argocd-secret-path), impersonation (--as), logging (--loglevel), and other global settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_validate.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Connecting to Minio Server Using Shell Script\nDESCRIPTION: Defines the connectToMinio function, which attempts to establish a connection to a specified Minio server using credentials read from /config/accesskey and /config/secretkey. The function implements a retry loop (up to 30 attempts) with a sleep interval after failed attempts, and uses the Minio Client (mc) for adding the target host. Required dependencies include 'mc', valid access credentials, and environment variables MINIO_ENDPOINT and MINIO_PORT. Outputs connection status and aborts after exceeding the limit of consecutive failures.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/_helper_create_bucket.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconnectToMinio() {\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Removing Cluster by Name\nDESCRIPTION: This provides an example of how to use the `argocd cluster rm` command with a cluster name. It demonstrates removing a cluster by its name, which should be defined within the Argo CD configuration.  The user must replace `cluster-name` with the appropriate cluster name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_rm.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nargocd cluster rm cluster-name\n```\n\n----------------------------------------\n\nTITLE: CLI flag for HTTP2 proxy\nDESCRIPTION: This command-line flag is used with the Argo CD CLI when the client is behind a proxy that does not support HTTP/2. Using `--grpc-web` forces the CLI to use gRPC-Web, which is compatible with HTTP/1.1 proxies.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/faq.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nargocd ... --grpc-web\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart with Values File (Bash)\nDESCRIPTION: Installs the stable/redis Helm chart named 'my-release', using a YAML file named 'values.yaml' to specify configuration parameters via the '-f' flag. This method is suitable for providing multiple or complex configuration overrides.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release -f values.yaml stable/redis\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Parameters in CMP Config File Using YAML\nDESCRIPTION: This YAML snippet shows how a ConfigManagementPlugin (CMP) configuration can declare a static parameter ('values-files') to be used by the plugin. This is directly written in the plugin's config and illustrates specifying an array-type parameter. The parameter can be referenced by the UI and tooling to understand allowed configuration options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: helm\nspec:\n  parameters:\n    static:\n    - name: values-files\n      title: Values Files\n      collectionType: array\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD for Private Deployment with SAML\nDESCRIPTION: Adjusts the dex.config for a deployment where Okta callback URL is external, allowing private Argo CD instances to authenticate via Okta with external callback URL.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/okta.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ndex.config: |\n  logger:\n    level: debug\n  connectors:\n  - type: saml\n    id: okta\n    name: Okta\n    config:\n      ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml\n      caData: |\n        <CA cert passed through base64 encoding>\n      ca: /path/to/ca.pem\n      redirectURI: https://external.path.to.argocd.io/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: group\n```\n\n----------------------------------------\n\nTITLE: Helm: Display Internal Redis Access Information\nDESCRIPTION: This Helm template snippet displays the internal DNS names for accessing the deployed Redis instance. If clustering is enabled (`.Values.cluster.enabled`), it shows separate DNS names for master (read/write) and slave (read-only) services. Otherwise, it shows a single DNS name for the service. It uses the `redis.fullname` template and `.Release.Namespace` for constructing the FQDNs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: Helm\nCODE:\n```\n{{- if .Values.cluster.enabled }}\nRedis can be accessed via port {{ .Values.master.port }} on the following DNS names from within your cluster:\n\n{{ template \"redis.fullname\" . }}-master.{{ .Release.Namespace }}.svc.cluster.local for read/write operations\n{{ template \"redis.fullname\" . }}-slave.{{ .Release.Namespace }}.svc.cluster.local for read-only operations\n\n{{- else }}\nRedis can be accessed via port {{ .Values.master.port }} on the following DNS name from within your cluster:\n\n{{ template \"redis.fullname\" . }}.{{ .Release.Namespace }}.svc.cluster.local\n\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Project Parameters with Denied Namespaced Resources - CLI\nDESCRIPTION: This command sets project parameters, including denied namespaced resources, for a specified Argo CD project. The `--deny-namespaced-resource` flag accepts a comma-separated list of namespaced resource names. Replace `PROJECT` with the name of the Argo CD project.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_set.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nargocd proj set PROJECT ---deny-namespaced-resource [RES1,RES2,...]\n```\n\n----------------------------------------\n\nTITLE: Overriding the default role - argocd\nDESCRIPTION: This example demonstrates how to override the possibly configured default role for RBAC permission checks. The `--default-role` flag is used to specify an alternative role to use during the permission check. The `argocd` CLI tool is needed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac_can.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin settings rbac can someuser create application 'default/app' --default-role role:readonly\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD\nDESCRIPTION: This command installs Argo CD within a Kubernetes cluster. It creates the `argocd` namespace and applies the Argo CD installation manifest from the upstream repository, and sets the current kubectl context.  Requires kubectl to be configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace argocd &&\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Command Options for argocd admin cluster kubeconfig\nDESCRIPTION: Lists all available command-specific options for the kubeconfig command, including authentication parameters, TLS settings, timeouts, and other configuration options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_kubeconfig.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for kubeconfig\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Getting Service External IP - Kubernetes\nDESCRIPTION: This command retrieves the external IP address of the MinIO service within the specified Kubernetes namespace.  This external IP allows access to the MinIO instance from outside the Kubernetes cluster, specifically when the service is of type LoadBalancer.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/NOTES.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get svc --namespace {{ .Release.Namespace }} -l app={{ template \"minio.fullname\" . }}\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Parameters with Individual Items in YAML\nDESCRIPTION: Shows the technique of declaring each entry as a separate parameter, making the set of items immutable and not extensible by array/map growth. Each item uses its own 'name' and 'string' value, providing fine-grained control for immutable parameterization.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ubuntu:latest\n  string: docker.example.com/proxy/ubuntu:latest\n- name: guestbook:v0.1\n  string: docker.example.com/proxy/guestbook:v0.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Deployment Template\nDESCRIPTION: This YAML snippet defines a deployment template named `template.app-deployed`. It specifies the message to send for application deployments, along with related fields. The `message` shows the message for successful deployments. The `newrelic` section provides descriptive information for integration with NewRelic, particularly `description` field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/newrelic.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ncontext: |\n  argocdUrl: https://example.com/argocd\n\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has successfully deployed.\n  newrelic:\n    description: Application {{.app.metadata.name}} has successfully deployed\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD Instance via Operator Manifests - YAML\nDESCRIPTION: This YAML manifest provisions an ArgoCD custom resource in the 'argocd-e2e' namespace, with the server route enabled. It is intended for use with clusters utilizing the Argo CD Operator or OpenShift GitOps Operator. Dependencies include a functioning Kubernetes cluster, the Argo CD Operator installed, and proper RBAC permissions. The manifest configures metadata and a server route to support external access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCD\nmetadata:\n  name: argocd-test\n  namespace: argocd-e2e\nspec:\n  server:\n    route:\n      enabled: true\n\n```\n\n----------------------------------------\n\nTITLE: Persisting Health Status in Application CR - YAML - yaml\nDESCRIPTION: Shows an example of the `status` field of an Application custom resource (CR) that persists health status internally. This YAML snippet visualizes the format of stored health, including status details for resources managed by the application. Useful for understanding the difference in storage approach before and after the 3.0 migration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  health:\n    status: Healthy\n    lastTransitionTime: \"2025-01-01T00:00:00Z\"\n  resources:\n    - group: apps\n      health:\n        status: Healthy\n      kind: Deployment\n      name: my-app\n      namespace: foo\n      status: OutOfSync\n      version: v1\n  sync:\n    status: OutOfSync\n\n```\n\n----------------------------------------\n\nTITLE: Annotating Argo CD Application YAML to Enable Opsgenie Notifications\nDESCRIPTION: Shows how to add an annotation to an Argo CD Application manifest YAML that subscribes the application to notifications on the defined Opsgenie problem trigger. The annotation key follows the pattern 'notifications.argoproj.io/subscribe.<trigger>.<service>' and maps to the Opsgenie team name. This snippet requires an existing Argo CD application and subscription configured in Argo CD notifications. Input is the YAML manifest annotation, enabling alerts to be sent via Opsgenie when defined conditions occur.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/opsgenie.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-a-problem.opsgenie: <your-team>\n```\n\n----------------------------------------\n\nTITLE: Cleaning up the kind cluster\nDESCRIPTION: Deletes the kind cluster and removes the corresponding kubeconfig file when finished with local development.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkind delete cluster; rm -f ~/.kube/config-kind\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: TLS disable\nDESCRIPTION: Disables TLS encryption, used in insecure environments or testing scenarios.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n      --plaintext                       Disable TLS\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Listing Project Roles in Argo CD\nDESCRIPTION: The basic command syntax for listing all roles in an Argo CD project. This command requires a PROJECT name argument and can take optional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj role list PROJECT [flags]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Telepresence from Kubernetes Cluster (Shell)\nDESCRIPTION: Removes Telepresence Helm deployment from the connected Kubernetes cluster, cleaning up all related resources. Requires Helm and Telepresence set up, and access to the correct cluster context. No parameters required; on success, Telepresence is uninstalled.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntelepresence helm uninstall\n```\n\n----------------------------------------\n\nTITLE: Command Options for ArgoCD Cluster Stats\nDESCRIPTION: Available command-line options for the ArgoCD admin cluster stats command including cache settings, authentication configurations, and Redis-related parameters.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_stats.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --app-state-cache-expiration duration   Cache expiration for app state (default 1h0m0s)\n      --as string                             Username to impersonate for the operation\n      --as-group stringArray                  Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                         UID to impersonate for the operation\n      --certificate-authority string          Path to a cert file for the certificate authority\n      --client-certificate string             Path to a client certificate file for TLS\n      --client-key string                     Path to a client key file for TLS\n      --cluster string                        The name of the kubeconfig cluster to use\n      --context string                        The name of the kubeconfig context to use\n      --default-cache-expiration duration     Cache expiration default (default 24h0m0s)\n      --disable-compression                   If true, opt-out of response compression for all requests to the server\n  -h, --help                                  help for stats\n      --insecure-skip-tls-verify              If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                     Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                      If present, the namespace scope for this CLI request\n      --password string                       Password for basic authentication to the API server\n      --port-forward-redis                    Automatically port-forward ha proxy redis from current namespace? (default true)\n      --proxy-url string                      If provided, this URL will be used to connect via proxy\n      --redis string                          Redis server hostname and port (e.g. argocd-redis:6379). \n      --redis-ca-certificate string           Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --redis-client-certificate string       Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --redis-client-key string               Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --redis-compress string                 Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --redis-insecure-skip-tls-verify        Skip Redis server certificate validation.\n      --redis-use-tls                         Use TLS when connecting to Redis. \n      --redisdb int                           Redis database.\n      --replicas int                          Application controller replicas count. Inferred from number of running controller pods if not specified\n      --request-timeout string                The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --sentinel stringArray                  Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379). \n      --sentinelmaster string                 Redis sentinel master group name. (default \"master\")\n      --server string                         The address and port of the Kubernetes API server\n      --shard int                             Cluster shard filter (default -1)\n      --sharding-method string                Sharding method. Defaults: legacy. Supported sharding methods are : [legacy, round-robin, consistent-hashing]  (default \"legacy\")\n      --tls-server-name string                If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                          Bearer token for authentication to the API server\n      --user string                           The name of the kubeconfig user to use\n      --username string                       Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Recording and Resuming E2E Test Progress via Environment Variable - Shell\nDESCRIPTION: This command instructs the test harness to record successfully executed tests to a file, allowing for resumption at the point of failure if a test run is interrupted. The ARGOCD_E2E_RECORD environment variable specifies the file to persist test results. This is especially useful on flaky clusters or during network failures. The feature depends on a compatible test harness script.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n./test/remote/run-e2e-remote.sh make test-e2e-local ARGOCD_E2E_RECORD=/tmp/mytests\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitation: Templating Project Field (YAML)\nDESCRIPTION: Shows templating the `spec.project` field using Go templates. It notes a limitation where signature verification is unsupported for a templated project field when using the Git generator.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/GoTemplate.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  goTemplate: true\n  template:\n    spec:\n      project: {{.project}}\n```\n\n----------------------------------------\n\nTITLE: Options: Inherited from Parent Commands (Shell)\nDESCRIPTION: Documents command-line options that are inherited from parent commands like `argocd` and `argocd proj` and are available for use with `argocd proj windows`. These options control various aspects like server connection, authentication, logging, and Kubernetes context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Example REST API GET request for ApplicationSet in specific namespace\nDESCRIPTION: Demonstrates how to retrieve an ApplicationSet named 'foo' in the 'bar' namespace using the GET method. The 'appsetNamespace' query parameter specifies the namespace of the ApplicationSet resource. This method is suitable when working with specific ApplicationSets across namespaces.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/v1/applicationsets/foo?appsetNamespace=bar\n```\n\n----------------------------------------\n\nTITLE: Executing the disable-namespaced-mode Command (Shell)\nDESCRIPTION: Basic syntax for executing the `argocd admin cluster namespaces disable-namespaced-mode` command. It requires a `PATTERN` argument to specify which cluster names should have namespaced mode disabled. Optional flags can be appended.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin cluster namespaces disable-namespaced-mode PATTERN [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic ArgoCD App Unset Command Syntax\nDESCRIPTION: The basic syntax for using the 'argocd app unset' command to unset application parameters in ArgoCD.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_unset.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app unset APPNAME parameters [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Global CLI Options for Argo CD Commands (bash)\nDESCRIPTION: This snippet enumerates the common global flags inherited by the 'argocd cert rm' command from its parent Argo CD CLI commands. These options configure connection details such as server address (--server), authentication tokens (--auth-token), client certificates, Kubernetes context, logging preferences, and port forwarding behavior. They provide extensive customization for how the CLI interacts with the Argo CD API server or Kubernetes directly. Proper usage ensures secure and context-aware command execution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_rm.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Argo CD User Details\nDESCRIPTION: This bash command retrieves details for a specific user account in Argo CD using the Argo CD CLI. Replace `<username>` with the target user's username. Requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nargocd account get --account <username>\n```\n\n----------------------------------------\n\nTITLE: Configure Argo CD ConfigMap for Application Health Assessment (YAML)\nDESCRIPTION: This YAML snippet configures the `argocd-cm` ConfigMap to restore the health assessment of `argoproj.io/Application` CRD. It defines the `resource.customizations` data, including a Lua script for calculating the health status based on the Application's health field.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.7-1.8.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations: |\n    argoproj.io/Application:\n      health.lua: |\n        hs = {}\n        hs.status = \"Progressing\"\n        hs.message = \"\"\n        if obj.status ~= nil then\n          if obj.status.health ~= nil then\n            hs.status = obj.status.health.status\n            if obj.status.health.message ~= nil then\n              hs.message = obj.status.health.message\n            end\n          end\n        end\n        return hs\n```\n\n----------------------------------------\n\nTITLE: Detecting impacted ApplicationSets\nDESCRIPTION: This JSON command is used to identify ApplicationSets that are impacted by the change in behavior related to the `applyNestedSelectors` field. The command filters ApplicationSets based on their `spec.applyNestedSelectors` value and nested selectors.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.14-3.0.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nkubectl get appsets -o=json | jq -r '.items[] | select(\n    .spec.applyNestedSelectors != true and\n    .spec.generators[][].generators[][].generators[].selector != null\n  ) | .metadata.name'\n```\n\n----------------------------------------\n\nTITLE: Export Argo CD Data Using 'argocd admin export' Command\nDESCRIPTION: This snippet illustrates the syntax for exporting Argo CD data, showing how to invoke the command with optional flags. It serves as a template for executing exports, enabling administrators to specify data scope, output options, and security parameters. The command outputs data to stdout or a specified file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_export.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin export [flags]\n```\n\n----------------------------------------\n\nTITLE: Profiling Argo CD with go tool pprof\nDESCRIPTION: This example demonstrates how to use `go tool pprof` to collect CPU and memory profiles from an Argo CD component. It requires port-forwarding to expose the profiling endpoint and utilizes the `pprof` tool to access and analyze the profiling data.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/high_availability.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl port-forward svc/argocd-metrics 8082:8082\n$ go tool pprof http://localhost:8082/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Collection Types in Parameter Announcement (YAML)\nDESCRIPTION: This YAML snippet demonstrates the correct and incorrect way to specify both 'array' and 'map' values in a single parameter announcement. Only the field specified in 'collectionType' (here, 'map') will be considered, and the array will be ignored. This helps illustrate validation rules enforced in the CMP server when parsing parameter announcements.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/parameterized-config-management-plugins.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: images\n  collectionType: map\n  array:  # this gets ignored because collectionType is 'map'\n  - ubuntu:latest=docker.example.com/proxy/ubuntu:latest\n  - guestbook:v0.1=docker.example.com/proxy/guestbook:v0.1\n  map:\n    ubuntu:latest: docker.example.com/proxy/ubuntu:latest\n    guestbook:v0.1: docker.example.com/proxy/guestbook:v0.1\n```\n\n----------------------------------------\n\nTITLE: Inherited Flags for Argo CD CLI Notification Commands - Shell\nDESCRIPTION: This snippet details inherited CLI flags available for commands under the 'argocd admin notifications template' namespace, including specifying Argo CD and Kubernetes contexts, authentication credentials, TLS and security options, logging configurations, and proxy settings, which control how the CLI connects to Argo CD and Kubernetes API servers.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template_notify.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Running the argocd-repo-server Command\nDESCRIPTION: This snippet demonstrates how to start the ArgoCD Repository Server in the foreground using the command `argocd-repo-server [flags]`. It includes optional flags for network configurations, caching, TLS, metrics, and integrations with Redis and OpenTelemetry for tracing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-repo-server.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd-repo-server [flags]\n```\n\n----------------------------------------\n\nTITLE: Empty Plugin Section in Argo CD Application - YAML\nDESCRIPTION: This YAML snippet demonstrates how to declare an empty plugin section in the Argo CD Application manifest when no specific environment variables or parameters need to be set for the plugin. This instructs Argo CD to apply plugin discovery logic without additional configuration. It is valid when only the default or auto-matched plugin settings are required. The field is left as an empty map.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/config-management-plugins.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nplugin: {}\n```\n\n----------------------------------------\n\nTITLE: Syntax for Generating Shell Completion Code (Shell)\nDESCRIPTION: This snippet shows the basic syntax for the `argocd completion` command. It requires specifying the target shell (SHELL) for which to generate the completion code, and optionally accepts flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_completion.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd completion SHELL [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Commit Path Details gRPC Message (Protobuf)\nDESCRIPTION: This Protobuf message, `CommitPathDetails`, provides details about a specific set of Kubernetes manifests that should be written to a given path within the git repository. It includes the path to the directory, a list of JSON documents representing the Kubernetes manifests themselves, and a `README.md` file content. This message is part of the `CommitManifests` and provides detailed manifest information.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator/commit-server/README.md#_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// CommitManifestDetails represents the details about a \nmessage CommitPathDetails {\n  // path is the path to the directory to which these manifests should be written.\n  required string path = 1;\n  // manifests is a list of JSON documents representing the Kubernetes manifests.\n  repeated string manifests = 2;\n  // readme is a string which will be written to a README.md alongside the manifest.yaml. \n  required string readme = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd proj remove-destination`\nDESCRIPTION: Details the global options inherited from parent `argocd` commands that can be used with `proj remove-destination`. These include flags for context switching, authentication, connection settings (like TLS, gRPC-web), configuration paths, logging levels, and overriding default component names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-destination.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Examples of Using enable-manual-sync Command in Argo CD\nDESCRIPTION: Various examples demonstrating how to use the enable-manual-sync command, including basic usage, enabling it for a window in the default project, and using it with a custom message.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_enable-manual-sync.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#Enabling manual sync for a general case\nargocd proj windows enable-manual-sync PROJECT ID \n\n#Enabling manual sync for a windows set on the default project with Id 2\nargocd proj windows enable-manual-sync default 2\n\n#Enabling manual sync with a custom message\nargocd proj windows enable-manual-sync my-app-project --message \"Manual sync initiated by admin\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Application controller name\nDESCRIPTION: Specifies the name of the Argo CD Application controller, which may differ in custom deployments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Fields to ApplicationQuery (Proto)\nDESCRIPTION: This snippet defines the addition of `minName`, `maxName`, `offset`, and `limit` fields to the `ApplicationQuery` message in the proto file. These fields are used for server-side pagination in the Applications List and Watch APIs.  `minName` and `maxName` are used to specify the range of application names for pagination with `offset` and `limit` providing the standard offset and limit functionality. No dependencies are required for this code. The output is the definition of the fields within the proto file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/server-side-pagination.md#_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage ApplicationQuery { \n  // ... existing fields\n  //\tNew proto fields for server side pagination\n\t// the application name to start from (app with min name is included in response)\n\toptional string minName = 9;\n\t// the application name to end at (app with max name is included in response)\n\toptional string maxName = 10;\n  \t// offset\n\toptional int64 offset = 18;\n\t// limit\n\toptional int64 limit = 19;\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd account` (Bash)\nDESCRIPTION: Details the global options inherited from parent commands (like the base `argocd` command) that can also be used with `argocd account`. These options control aspects like specifying the Argo CD server context (`--argocd-context`), providing authentication tokens (`--auth-token`), configuring client certificates, setting the Argo CD config file path, adjusting logging levels (`--loglevel`), managing connection security (`--insecure`, `--plaintext`), and specifying target server addresses and component names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Backends for Argo CD Proxy Extension (YAML)\nDESCRIPTION: This YAML snippet demonstrates configuring an Argo CD extension to use multiple backend services, each associated with a different Kubernetes cluster. Dependencies include Argo CD with the proxy-extension enabled. The key parameters are the 'name' of the extension, an array of 'services', each with a 'url' and 'cluster' specification (either by name or server address). Inputs are the extension name and list of service definitions with correct cluster identifiers; outputs are proxy rules enabling Argo CD to route traffic to the correct backend based on cluster membership. Constraints include ensuring all clusters are accessible and correctly identified in the config.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/proxy-extensions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextension.config: |\n  extensions:\n  - name: some-extension\n    backend:\n      services:\n      - url: http://extension-name.com:8080\n        cluster\n          name: kubernetes.local\n      - url: https://extension-name.ppd.cluster.k8s.local:8080\n        cluster\n          server: user@ppd.cluster.k8s.local\n```\n\n----------------------------------------\n\nTITLE: Webpack externals configuration\nDESCRIPTION: This configuration snippet demonstrates how to configure Webpack to use the global `React` variable instead of bundling the React library within the extension. This is crucial for keeping extension bundle sizes small and preventing version conflicts with Argo CD's React dependency. The `externals` setting maps the `react` import to the global `React` variable.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexternals: {\n  react: \"React\";\n}\n```\n\n----------------------------------------\n\nTITLE: Executing command with specific UID/GID in Go\nDESCRIPTION: This Go snippet demonstrates how to execute a command with a specific user ID (UID) and group ID (GID). It uses the `syscall` package to set the credentials of the process before executing the command. This prevents the command from accessing files outside of its intended scope.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/config-management-plugin-v2.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncmd := exec.Command(command, args...)\ncmd.SysProcAttr = &syscall.SysProcAttr{}\ncmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Scoped Repository/Cluster in YAML\nDESCRIPTION: This YAML snippet demonstrates the addition of a 'project' field to a Kubernetes Secret of type 'repository'. This addition designates the repository as project-scoped, associating it with a specific Argo CD project. The snippet shows the expected data structure, indicating how project affiliation is encoded within the repository configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/project-repos-and-clusters.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    argocd.argoproj.io/secret-type: repository\ntype: Opaque\nstringData:\n  project: my-project1                                     # new project field\n  name: argocd-example-apps\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: ****\n  password: ****\n```\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration File Example\nDESCRIPTION: This JSON snippet provides an example configuration file structure. It showcases how cluster information like account, cluster name, and address is stored.  The Git generator will parse these files and convert them to parameters for use within ApplicationSets.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aws_account\": \"123456\",\n  \"asset_id\": \"11223344\",\n  \"cluster\": {\n    \"owner\": \"cluster-admin@company.com\",\n    \"name\": \"engineering-dev\",\n    \"address\": \"https://1.2.3.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax for argocd admin notifications trigger run Command\nDESCRIPTION: Defines the basic command structure for evaluating a specified notification trigger condition using `argocd admin notifications trigger run`. Requires the trigger `NAME` and the `RESOURCE_NAME` (often a path to a manifest file) as arguments, along with optional flags.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting-commands.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications trigger run NAME RESOURCE_NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Minio with Custom Access/Secret Keys - Helm Bash\nDESCRIPTION: Deploys Minio with user-defined accessKey and secretKey values instead of auto-generated credentials. Requires Helm, an active Kubernetes cluster, and relevant permissions. Passes accessKey and secretKey as --set parameters to override defaults. Keys must adhere to Minio's required length constraints. Outputs a Helm release with specified authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set accessKey=myaccesskey,secretKey=mysecretkey \\\n    stable/minio\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Argo CD Server\nDESCRIPTION: Establishes a local port forward using `kubectl` from the local machine's port 8080 to port 443 (the default HTTPS port) of the `argocd-server` service in the `argocd` namespace. This enables local access to the Argo CD API server for testing or temporary use.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Additional options inherited from parent commands that apply to all ApplicationSet operations, including server connection settings, authentication, and logging configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Available Options for ArgoCD Project Add-Source Command\nDESCRIPTION: Lists the command-specific options available for the add-source command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_add-source.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for add-source\n```\n\n----------------------------------------\n\nTITLE: Inherited options for `argocd cluster get` command\nDESCRIPTION: This section describes additional flags inherited from parent commands, controlling aspects such as connection context, authentication, TLS settings, kubeconfig, logging, port forwarding, Redis and server configurations, and more, providing comprehensive control over the command execution.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_get.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-hapo\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Resource Tracking Annotation Format (YAML)\nDESCRIPTION: This YAML snippet shows the proposed structure for the `app.kubernetes.io/instance` annotation when using annotation-based tracking. The value includes the application name, followed by a semicolon, and then the resource identifier (`group/kind/namespace/name`). This format is intended to prevent tracking confusion if the annotation is accidentally copied.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nannotations:\n    app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name>\n```\n\n----------------------------------------\n\nTITLE: Enabling New Git File Globbing - ConfigMap Setting\nDESCRIPTION: This snippet shows how to enable the new Git file globbing by setting a key-value pair in the `argocd-cmd-params-cm` ConfigMap. This configuration provides another option to enable the improved globbing behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napplicationsetcontroller.enable.new.git.file.globbing: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Summary Field in Teams Templates\nDESCRIPTION: This YAML snippet sets a `summary` field in the Teams notification, providing a concise overview that is shown in notification feeds and activity logs. Requires an existing Teams notification setup and provides a more user-friendly experience by clearly identifying the notification's main topic.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/services/teams.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate.app-sync-succeeded: |\n  teams:\n    summary: \"Sync Succeeded\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ApplicationSet Plugin Generator YAML\nDESCRIPTION: Defines an ApplicationSet resource that uses the proposed 'plugin' generator. It specifies the ConfigMap reference for plugin configuration, the plugin name, custom parameters to be sent to the plugin, and the reconciliation frequency.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/applicationset-plugin-generator.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: fb-plugin\n  namespace: argo-system\nspec:\n  generators:\n    - plugin:\n        configMapRef: fb-plugin\n        name: feature-branch-plugin\n        params:\n          repo: \"my-repo\"\n          branch: \"my-branch\"\n        requeueAfterSeconds: 10\n  template:\n...\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd admin repo`\nDESCRIPTION: Lists common options inherited from parent `argocd` commands that can be used with `argocd admin repo`. These flags control various aspects like server connection details (address, certificates, insecure), authentication (token), Kubernetes context, logging level/format, and specific component names (controller, repo-server, redis).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_repo.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Running Notifications CLI via Docker (Bash)\nDESCRIPTION: This command executes the `argocd admin notifications trigger get` command using the official Argo CD Docker image (`quay.io/argoproj/argocd`). It mounts the current host directory (`$(pwd)`) into the container's `/src` directory and sets it as the working directory (`-w /src`), allowing the command inside the container to access local files specified by `--config-map` and `--secret`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/notifications/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -w /src -v $(pwd):/src \\\n  quay.io/argoproj/argocd:<version> \\\n  /app/argocd admin notifications trigger get \\\n  --config-map ./argocd-notifications-cm.yaml --secret :empty\n```\n\n----------------------------------------\n\nTITLE: Triggering Argo CD Release Workflow via Shell Script\nDESCRIPTION: This script, located at `hack/trigger-release.sh`, is executed from the checked-out release branch to initiate the main release publishing workflow. It requires the target version (e.g., `v2.7.2`) and the upstream remote name (e.g., `upstream`) as arguments. Successful execution pushes a tag formatted as `v<MAJOR>.<MINOR>.<PATCH>` or `v<MAJOR>.<MINOR>.<PATCH>-rc<RC#>` which triggers the `Publish ArgoCD Release` GitHub Action.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/releasing.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./hack/trigger-release.sh <version> <remote name>\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Renovate Shared Presets (Shell)\nDESCRIPTION: Shows an example directory structure for organizing shared Renovate presets in a dedicated repository. It includes common presets, fixes, custom managers, and organization/repository-specific configurations, promoting modularity and maintainability.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/renovate-presets/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── README.md\n├── .github/CODEOWNERS\n├── common.json5       # common presets for all repositories\n├── fix/\n│   └── openssf-merge-confidence-columns.json5\n├── custom-managers/\n│   ├── bash.json5\n│   └── yaml.json5\n└── argoproj/ # organization\n    ├── argo-cd/ # repository\n    │   ├── devtools.json5 # rules specific to the devtool (CI and dev environment...)\n    │   ├── docs.json5 # rules specific to the docs folder.\n    │   ├── # etc...\n    │   └── renovate.json5 # this is the single preset referenced from the repository argopro/argo-cd.\n    └── argo-rollouts/ # repository\n        └── renovate.json5\n```\n\n----------------------------------------\n\nTITLE: Kustomization with Remote Base (YAML)\nDESCRIPTION: This YAML snippet shows a kustomization file using a remote base at the HEAD revision of the Argo CD repository. This is discouraged because changes in the upstream repository can alter the application's meaning without any changes to the local repository, leading to unpredictable deployments. No dependencies beyond standard Kubernetes and Kustomize.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/best_practices.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n- github.com/argoproj/argo-cd//manifests/cluster-install\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `argocd repocreds rm`\nDESCRIPTION: Provides the basic command structure for removing repository credentials using the Argo CD CLI. Requires the URL of the credentials (`CREDSURL`) to be removed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds_rm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd repocreds rm CREDSURL [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration ConfigMap YAML\nDESCRIPTION: Creates a Kubernetes ConfigMap to store configuration details for the ApplicationSet plugin generator. It includes the `baseUrl` for the external plugin service and an optional `token` for authentication, supporting sensitive data references. This ConfigMap is referenced by the ApplicationSet resource.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/applicationset-plugin-generator.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fb-plugin\n  namespace: argo-system\ndata:\n  token: $plugin.myplugin.token # Alternatively $<some_K8S_secret>:plugin.myplugin.token\n  baseUrl: http://myplugin.plugin.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Information Using Argo CD CLI - Bash\nDESCRIPTION: These snippets show how to invoke 'argocd cluster set' from the command line to update cluster metadata, set a new cluster name, and specify namespaces for cluster management. The examples require the Argo CD CLI to be installed and configured, and the user must have appropriate permissions to modify clusters. Parameters such as '--name' update the cluster's display name, and one or more '--namespace' flags restrict or allow namespace-level management. The commands must be run in a terminal environment with network access to the Argo CD API server. Output and effects depend on cluster state and user access.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_set.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster set CLUSTER_NAME --name new-cluster-name --namespace '*'\n```\n\nLANGUAGE: bash\nCODE:\n```\nargocd cluster set CLUSTER_NAME --name new-cluster-name --namespace namespace-one --namespace namespace-two\n```\n\n----------------------------------------\n\nTITLE: View Argo CD Notification Template Usage (Bash)\nDESCRIPTION: Presents the command-line interface usage syntax for the `argocd admin notifications template get` command, showing that it accepts various flags to modify behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template_get.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin notifications template get [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Upgrade History for a Helm Release - Bash\nDESCRIPTION: Displays the upgrade history and revisions of a specified Minio Helm release. Requires an existing release and cluster admin access. Uses helm history with the release name as an argument. Outputs a list of upgrade operations and their statuses.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm history my-release\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Command Options\nDESCRIPTION: Available options and flags for customizing the behavior of ApplicationSet commands, including authentication, connection parameters, and request timeouts.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for appset\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart with Release Name\nDESCRIPTION: This command installs the stable/redis Helm chart and assigns it the release name 'my-release'. It deploys Redis on the Kubernetes cluster and allows for managing the release with the specified name.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --name my-release stable/redis\n```\n\n----------------------------------------\n\nTITLE: Get Argo CD Server Version - Bash\nDESCRIPTION: This snippet retrieves the Argo CD server version using the `argocd version` command and extracts the version string using `grep`.  The output is then used to set the `VERSION` environment variable. Requires `argocd` CLI to be installed and configured, as well as `grep`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/disaster_recovery.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd version | grep server\n# ...\nexport VERSION=v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for argocd app wait\nDESCRIPTION: Defines the basic command structure for `argocd app wait`. It shows that the command requires either one or more application names or a label selector (`-l`) to identify the target applications. Flags can be appended for further customization.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_wait.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd app wait [APPNAME.. | -l selector] [flags]\n```\n\n----------------------------------------\n\nTITLE: ArgoCD Cluster Add Command Options\nDESCRIPTION: Comprehensive list of available options for the 'argocd cluster add' command, including settings for authentication, metadata, namespace management, and connection configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_add.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --annotation stringArray             Set metadata annotations (e.g. --annotation key=value)\n      --aws-cluster-name string            AWS Cluster name if set then aws cli eks token command will be used to access cluster\n      --aws-profile string                 Optional AWS profile. If set then AWS IAM Authenticator uses this profile to perform cluster operations instead of the default AWS credential provider chain.\n      --aws-role-arn string                Optional AWS role arn. If set then AWS IAM Authenticator assumes a role to perform cluster operations instead of the default AWS credential provider chain.\n      --cluster-endpoint string            Cluster endpoint to use. Can be one of the following: 'kubeconfig', 'kube-public', or 'internal'.\n      --cluster-resources                  Indicates if cluster level resources should be managed. The setting is used only if list of managed namespaces is not empty.\n      --disable-compression                Bypasses automatic GZip compression requests to the server\n      --exec-command string                Command to run to provide client credentials to the cluster. You may need to build a custom ArgoCD image to ensure the command is available at runtime.\n      --exec-command-api-version string    Preferred input version of the ExecInfo for the --exec-command executable\n      --exec-command-args stringArray      Arguments to supply to the --exec-command executable\n      --exec-command-env stringToString    Environment vars to set when running the --exec-command executable (default [])\n      --exec-command-install-hint string   Text shown to the user when the --exec-command executable doesn't seem to be present\n  -h, --help                               help for add\n      --in-cluster                         Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname (kubernetes.default.svc)\n      --kubeconfig string                  use a particular kubeconfig file\n      --label stringArray                  Set metadata labels (e.g. --label key=value)\n      --name string                        Overwrite the cluster name\n      --namespace stringArray              List of namespaces which are allowed to manage\n      --project string                     project of the cluster\n      --proxy-url string                   use proxy to connect cluster\n      --service-account string             System namespace service account to use for kubernetes resource management. If not set then default \"argocd-manager\" SA will be created\n      --shard int                          Cluster shard number; inferred from hostname if not set (default -1)\n      --system-namespace string            Use different system namespace (default \"kube-system\")\n      --upsert                             Override an existing cluster with the same name even if the spec differs\n  -y, --yes                                Skip explicit confirmation\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Project Scoped Repository\nDESCRIPTION: This snippet exemplifies a CLI (Command-Line Interface) command that facilitates the addition of a project-scoped repository.  It showcases the `--project` flag, which when specified, signals to Argo CD that the added repository should be associated with the designated project. This allows developers to add a repository and associate with a specific project, streamlining self-service onboarding.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/project-repos-and-clusters.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```\nargocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project\n```\n```\n\n----------------------------------------\n\nTITLE: Shell: Connect to Redis Internally using redis-cli\nDESCRIPTION: Provides `redis-cli` commands to connect to the Redis instance(s) from within the cluster, typically run from the client pod created previously. If clustering is enabled (`.Values.cluster.enabled`), it shows commands for both the master and slave services. Otherwise, it shows a command for the single service. It uses the `-h` flag to specify the service DNS name (`{{ template \"redis.fullname\" . }}`) and conditionally includes the `-a` flag with the password if `.Values.usePassword` is true.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/templates/NOTES.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n{{- if .Values.cluster.enabled }}\n   redis-cli -h {{ template \"redis.fullname\" . }}-master{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n   redis-cli -h {{ template \"redis.fullname\" . }}-slave{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n{{- else }}\n   redis-cli -h {{ template \"redis.fullname\" . }}{{ if .Values.usePassword }} -a $REDIS_PASSWORD{{ end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Argo CD Operator Deployment in OpenShift - Shell\nDESCRIPTION: This 'oc' command scales the Argo CD Operator deployment to zero replicas in the 'openshift-operators' namespace. Disabling the operator prevents it from interfering with the test (e.g., by reverting changes made to resources during e2e tests). Requires cluster-admin privileges and is necessary when using Operator-based installs.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\noc -n openshift-operators scale deployment --replicas=0 argocd-operator\n\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Child in Lua\nDESCRIPTION: This Lua snippet demonstrates how to create a new resource independent of the source resource. It sets the `app.kubernetes.io/instance` label to connect the resource to the application and sets `Prune=false` annotation to prevent automatic deletion.  Also, sets `IgnoreExtraneous` annotation to treat resource as synced.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/resource_actions.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- ...\nnewObj = {}\nnewObj.metadata = {}\nnewObj.metadata.labels = {}\nnewObj.metadata.labels[\"app.kubernetes.io/instance\"] = obj.metadata.labels[\"app.kubernetes.io/instance\"]\n-- ...\nnewObj.metadata.annotations = {}\nnewObj.metadata.annotations[\"argocd.argoproj.io/sync-options\"] = \"Prune=false\"\n-- ...\nnewObj.metadata.annotations[\"argocd.argoproj.io/compare-options\"] = \"IgnoreExtraneous\"\n-- ...\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Checks\nDESCRIPTION: This command runs pre-commit checks to ensure the code adheres to the project's coding standards and best practices before submitting a pull request.  It uses `make pre-commit-local` target.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmake pre-commit-local\n```\n\n----------------------------------------\n\nTITLE: Adding Argo CD CLI to PATH on Windows\nDESCRIPTION: PowerShell command to add the Argo CD CLI executable to the user's PATH environment variable on Windows.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n[Environment]::SetEnvironmentVariable(\"Path\", \"$env:Path;C:\\Path\\To\\ArgoCD-CLI\", \"User\")\n```\n\n----------------------------------------\n\nTITLE: Register Status Panel Extension\nDESCRIPTION: This JavaScript snippet demonstrates how to register an extension for the Argo CD Application status panel using `extensionsAPI.registerStatusPanelExtension`.  The registered React component renders \"Hello World\" with padding.  The extension is assigned the title \"My Extension\" and ID \"my_extension\". The extension appears at the top of the application view, specifically on the status bar. It runs immediately by wrapping it in an immediately invoked function expression (IIFE).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/extensions/ui-extensions.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n((window) => {\n  const component = () => {\n    return React.createElement(\n      \"div\",\n      { style: { padding: \"10px\" } },\n      \"Hello World\"\n    );\n  };\n  window.extensionsAPI.registerStatusPanelExtension(\n    component,\n    \"My Extension\",\n    \"my_extension\"\n  );\n})(window);\n```\n\n----------------------------------------\n\nTITLE: Checking Telepresence Status (Shell)\nDESCRIPTION: Displays the current status of Telepresence connections and intercepts in the local environment. Requires Telepresence installed locally. No input parameters. Outputs human-readable Telepresence status details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntelepresence status\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools (Local)\nDESCRIPTION: These commands install development tools required for building and testing Argo CD locally. It utilizes the `make` utility to execute build commands, automating the installation process.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/contributors-quickstart.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake install-go-tools-local\nmake install-codegen-tools-local\n```\n\n----------------------------------------\n\nTITLE: argocd proj command\nDESCRIPTION: This command is the entrypoint for managing Argo CD projects. It serves as a base command, with various subcommands like `list`, `create`, `delete`, and `edit` for performing project-related operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nargocd proj [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing the argocd-server version Command (Shell)\nDESCRIPTION: Shows the basic syntax for executing the `argocd-server version` command. This command prints version information about the Argo CD server. Optional flags can be appended.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-server_version.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd-server version [flags]\n```\n\n----------------------------------------\n\nTITLE: Example ConfigMap YAML - Multiline String Handling\nDESCRIPTION: This YAML snippet demonstrates a ConfigMap manifest. It showcases how multiline strings are handled, particularly highlighting the block chomping indicator '|+'.  Argo CD v1.7 modifies the handling of multiline strings, potentially causing out-of-sync issues for manifests using this format after the upgrade. Resolving this often involves triggering synchronization after the upgrade.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/1.6-1.7.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config-map\ndata:\n  value: |+ # block chomping indicator is dropped by Argo CD v1.7 ( same as kubectl apply)\n  hello\n```\n```\n\n----------------------------------------\n\nTITLE: Using argocd repocreds Base Command Shell\nDESCRIPTION: This snippet shows the basic syntax for invoking the `argocd repocreds` command in the shell. It indicates that the command accepts various flags to modify its behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_repocreds.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd repocreds [flags]\n```\n\n----------------------------------------\n\nTITLE: Stopping Telepresence Intercept on ArgoCD Server (Shell)\nDESCRIPTION: Removes the active Telepresence intercept for the 'argocd-server-argocd' session. Requires an active Telepresence session. No input parameters. Effectively stops local traffic redirection to the ArgoCD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/debugging-remote-environment.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntelepresence leave argocd-server-argocd\n```\n\n----------------------------------------\n\nTITLE: Invoking the Argo CD Admin CLI - shell\nDESCRIPTION: This snippet demonstrates how to invoke the 'argocd admin' command using the CLI, including placeholders for command flags. Dependencies: The Argo CD CLI must be installed and configured, and the user must have direct Kubernetes access. Customize the [flags] placeholder to adjust logging, authentication, and operation parameters as needed. Expected output depends on the specific subcommand and flags supplied.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Argo CD Docs Locally (Bash)\nDESCRIPTION: This command builds the documentation site using the locally installed `mkdocs` and dependencies. It compiles the documentation into static files on your local machine without using a Docker container. Requires local Python, pip, `mkdocs`, dependencies, and the project's Makefile.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/docs-site.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmake build-docs-local\n```\n\n----------------------------------------\n\nTITLE: Implication of namespace parameter in POST and PUT requests\nDESCRIPTION: Indicates that for creating or updating ApplicationSet resources via POST and PUT methods, the 'appNamespace' must be included within the request payload. This is necessary for specifying the namespace for the resource and ensuring proper resource management.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/v1/applicationsets\n{\n  \"metadata\": {\n    \"name\": \"foo\",\n    \"namespace\": \"bar\"\n  },\n  \"spec\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Flags and Options for argocd admin notifications template notify Command - Shell\nDESCRIPTION: This snippet lists the command-specific flags, including --recipient for specifying notification recipients, and the inherited flags providing extensive options for authentication, connection configuration, TLS settings, logging, and Kubernetes context. These flags enable customization of the notification generation process and permissions context.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template_notify.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help                    help for notify\n      --recipient stringArray   List of recipients (default [console:stdout])\n```\n\n----------------------------------------\n\nTITLE: Extracting Argo CD Admin Password from Kubernetes Secret - Shell\nDESCRIPTION: This command reads the Argo CD initial admin password from the Kubernetes secret and decodes it from base64. It must be executed after the relevant secret ('argocd-initial-admin-secret') is created in the 'argocd-e2e' namespace. 'kubectl' and 'base64' are required. The password is stored in the 'ARGOCD_E2E_ADMIN_PASSWORD' environment variable for later test authentication.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_E2E_ADMIN_PASSWORD=$(kubectl -n argocd-e2e get secrets argocd-initial-admin-secret -o jsonpath='{.data.password}'|base64 -d)\n\n```\n\n----------------------------------------\n\nTITLE: Building and pushing custom Argo CD Docker images\nDESCRIPTION: Builds custom Argo CD Docker images and pushes them to the specified Docker namespace in one step.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_PUSH=true make image\n```\n\n----------------------------------------\n\nTITLE: Using the Argo CD admin cluster namespaces command in Bash\nDESCRIPTION: Basic syntax for using the 'argocd admin cluster namespaces' command to print information about namespaces managed by Argo CD in each cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin cluster namespaces [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting ARGOCD_SERVER Endpoint for Local Cluster - Shell\nDESCRIPTION: This command sets the ARGOCD_SERVER environment variable to the clusterIP of the 'argocd-server' Kubernetes service, enabling local processes to interact with the Argo CD API. 'kubectl' is used to query resource details via JSONPath, and this variable must be set before running CLI-based tests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport ARGOCD_SERVER=$(kubectl -n argocd-e2e get svc argocd-server -o jsonpath='{.spec.clusterIP}')\n\n```\n\n----------------------------------------\n\nTITLE: Updating Argo UI Dependency using Yarn\nDESCRIPTION: Updates the Argo UI dependency within the Argo CD project's UI component by fetching the latest version directly from the master branch of the `argo-ui` GitHub repository using Yarn. Run this command in the `ui/` directory after an Argo UI PR is merged and before committing the updated `yarn.lock` file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/dependencies.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add git+https://github.com/argoproj/argo-ui.git\n```\n\n----------------------------------------\n\nTITLE: Defining LinksResponse Message - Protobuf\nDESCRIPTION: This snippet defines the LinksResponse message, also using Protocol Buffers. This message encapsulates a list of LinkInfo messages. It's used by the API to return multiple deep links to the caller, typically the Argo CD UI.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/deep-links.md#_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage LinksResponse {\n  repeated LinkInfo items = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Namespace Finalizers\nDESCRIPTION: This bash command allows the user to edit a namespace and remove `/spec/finalizers`. This is necessary if the tests are failing to delete namespaces.  This helps in resolving issues where namespaces are not being correctly removed after test execution, preventing resource leaks and test interference. It is executed with the `kubectl edit ns` command followed by the namespace name. Ensure to replace `argocd-e2e-ns-*` with the actual namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/test-e2e.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit ns argocd-e2e-ns-*\n```\n\n----------------------------------------\n\nTITLE: Removing Repository Server Certificates Using Argo CD CLI (bash)\nDESCRIPTION: This snippet demonstrates the CLI command 'argocd cert rm' used to remove certificates of a specified type from the Argo CD repository server. It allows removal based on certificate type (ssh or https) and optional sub-type for SSH certificates. It supports various flags for authentication, server context, and connection configuration inherited from the parent Argo CD CLI commands. Key parameters include REPOSERVER as the target repository server and options such as --cert-type and --cert-sub-type to filter certificates to remove. The command outputs success or error messages depending on certificate removal status and requires access to an Argo CD server instance.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_rm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd cert rm REPOSERVER [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd-server` Commands (Text)\nDESCRIPTION: Details the common command-line options inherited from parent `argocd-server` commands. These flags manage aspects such as impersonation (`--as`, `--as-group`, `--as-uid`), Kubernetes cluster connection (`--certificate-authority`, `--client-certificate`, `--client-key`, `--cluster`, `--context`, `--kubeconfig`, `--server`), TLS settings (`--insecure-skip-tls-verify`, `--tls-server-name`), authentication (`--password`, `--token`, `--username`), network settings (`--disable-compression`, `--proxy-url`, `--request-timeout`), and namespace scoping (`--namespace`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-server_version.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n----------------------------------------\n\nTITLE: Handling ApplicationSet resources in the control plane namespace\nDESCRIPTION: Notes that when ApplicationSet resources are managed within the control plane namespace, the 'appNamespace' parameter can be omitted from API calls, simplifying the request process for cluster administration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Appset-Any-Namespace.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/v1/applicationsets\n{\n  \"metadata\": {\n    \"name\": \"foo\"\n  },\n  \"spec\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GKE Ingress IP Address (Shell)\nDESCRIPTION: Uses kubectl to describe the 'argocd' Ingress resource within the 'argocd' namespace and filters the output using grep to display the line containing the external IP address assigned by the Google Cloud Load Balancer.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/ingress.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd describe ingresses argocd | grep Address\n```\n\n----------------------------------------\n\nTITLE: Checking SSH Version in Shell\nDESCRIPTION: This code snippet demonstrates how to check the OpenSSH version installed on the system, a prerequisite for verifying SSH key algorithm compatibility with Argo CD 2.3.7 and later.  It provides the command to display the version details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.2-2.3.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh -V\n```\n\n----------------------------------------\n\nTITLE: Enabling CoreDNS in MicroK8s\nDESCRIPTION: Enables the CoreDNS add-on within a microk8s Kubernetes cluster, which is a prerequisite for Argo CD. The commands stop and restart the microk8s service to ensure the DNS configuration is applied correctly.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/getting_started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmicrok8s enable dns && microk8s stop && microk8s start\n```\n\n----------------------------------------\n\nTITLE: Resetting Initial Admin Password with Argo CD CLI - shell\nDESCRIPTION: This snippet demonstrates the command used to reset the initial admin password in Argo CD, which is required for situations where password rotation or recovery is necessary. Dependencies: The Argo CD CLI and sufficient privileges to access and configure the Argo CD system. No input parameters are required for the default reset behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin initial-password reset\n```\n\n----------------------------------------\n\nTITLE: Executing the `argocd admin repo` Command\nDESCRIPTION: Basic syntax for the `argocd admin repo` command, which serves as the entry point for managing repository configurations in Argo CD. It requires additional flags or subcommands to perform specific actions.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_repo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin repo [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Flags for 'argocd app resources' Command\nDESCRIPTION: Enumerates the environment and context-related options inherited from parent commands, such as server context, authentication token, TLS settings, kube configuration, logging, port forwarding, and specific resource names. These flags facilitate flexible and secure command execution across different environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_resources.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Using argocd gpg base command syntax (Shell)\nDESCRIPTION: This snippet shows the basic syntax for invoking the `argocd gpg` command. The `[flags]` placeholder indicates that various options can be appended to the command to control its behavior, authentication, and connection details to the Argo CD server or Kubernetes API. This command is typically used with subcommands for specific GPG operations like `add`, `list`, `get`, or `rm`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_gpg.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd gpg [flags]\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Flux Resources Custom Actions Support\nDESCRIPTION: A markdown table listing Flux custom resources and their supported actions in Argo CD v2.13. The table shows which resources support Suspend, Resume, and Reconcile operations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.12-2.13.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Custom Resource       | Supported Actions                |\n|-----------------------|----------------------------------|\n| HelmRelease           | `Suspend`, `Resume`, `Reconcile` |\n| ImageRepository       | `Suspend`, `Resume`, `Reconcile` |\n| ImageUpdateAutomation | `Suspend`, `Resume`, `Reconcile` |\n| Kustomization         | `Suspend`, `Resume`, `Reconcile` |\n| Alert                 | `Suspend`, `Resume`              |\n| Provider              | `Suspend`, `Resume`              |\n| Receiver              | `Suspend`, `Resume`, `Reconcile` |\n| Bucket                | `Suspend`, `Resume`, `Reconcile` |\n| GitRepository         | `Suspend`, `Resume`, `Reconcile` |\n| HelmChart             | `Suspend`, `Resume`, `Reconcile` |\n| HelmRepository        | `Suspend`, `Resume`, `Reconcile` |\n| OCIRepository         | `Suspend`, `Resume`, `Reconcile` |\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Authentication token\nDESCRIPTION: Provides an authentication token for secure access. Can be set directly or via environment variable.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options for ArgoCD App Unset\nDESCRIPTION: Options that are inherited from parent commands when using 'argocd app unset', including authentication, connection, and logging settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_unset.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    --argocd-context string           The name of the Argo-CD server context to use\n    --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n    --client-crt string               Client certificate file\n    --client-crt-key string           Client certificate key file\n    --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n    --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n    --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n    --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n    --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n    --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n    --insecure                        Skip server certificate and domain verification\n    --kube-context string             Directs the command to the given kube-context\n    --logformat string                Set the logging format. One of: json|text (default \"json\")\n    --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n    --plaintext                       Disable TLS\n    --port-forward                    Connect to a random argocd-server port using port forwarding\n    --port-forward-namespace string   Namespace name which should be used for port forwarding\n    --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n    --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n    --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n    --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n    --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n    --server string                   Argo CD server address\n    --server-crt string               Server certificate file\n    --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode ESLint for Argo CD UI (JSON)\nDESCRIPTION: This JSON configuration is placed in '.vscode/settings.json' to integrate ESLint within VSCode for the Argo CD UI project. It enables ESLint formatting, automatically fixes issues on save, sets the working directory to './ui', and enables the experimental flat config feature. Requires the 'dbaeumer.vscode-eslint' VSCode extension.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/ui/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslint.format.enable\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": \"always\"\n    },\n    \"eslint.workingDirectories\": [\n        {\n            \"directory\": \"./ui\",\n            \"!cwd\": false\n        }\n    ],\n    \"eslint.experimental.useFlatConfig\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local User in Argo CD (ConfigMap)\nDESCRIPTION: This bash command removes the 'alice' user account from the `argocd-cm` ConfigMap in the `argocd` namespace. It utilizes `kubectl patch` with a JSON patch to delete the `accounts.alice` entry. Requires `kubectl` and access to the `argocd-cm` ConfigMap.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/user-management/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch -n argocd cm argocd-cm --type='json' -p='[{\"op\": \"remove\", \"path\": \"/data/accounts.alice\"}]'\n```\n\n----------------------------------------\n\nTITLE: Referencing a Specific Renovate Preset in JSON\nDESCRIPTION: This JSON snippet demonstrates how to extend a specific Renovate preset file (`bash.json5`) located within the `argoproj/argo-cd` repository's `renovate-presets/custom-managers` directory using the `extends` array in a `renovate.json` configuration file.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/renovate-presets/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"github>argoproj/argo-cd//renovate-presets/custom-managers/bash.json5\"\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for argocd account delete-token\nDESCRIPTION: Global options inherited from parent commands that can be used with the delete-token command, including authentication, connection, and logging options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_delete-token.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Rancher Desktop for Volume Sharing\nDESCRIPTION: This YAML snippet configures Rancher Desktop to enable volume sharing for the e2e container. It adds the `/private/tmp` directory to the mounts, making it writable. This allows the e2e container to access the testdata directory. It's important for tests that rely on local file access. It is necessary to add this to the `override.yaml` configuration file and restart Rancher Desktop for the changes to take effect.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/test-e2e.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmounts:\n- location: /private/tmp\n  writable: true\n```\n\n----------------------------------------\n\nTITLE: Defining Assume Role Trust Policy for aws-auth Access - JSON\nDESCRIPTION: Example IAM trust policy for an EKS cluster's IAM role, allowing it to be assumed by the Argo CD management role as part of aws-auth integration. This policy is required for legacy setups using the deprecated aws-auth config map. Replace placeholders with correct AWS account IDs and role names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/declarative-setup.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\" : \"2012-10-17\",\n    \"Statement\" : {\n      \"Effect\" : \"Allow\",\n      \"Action\" : \"sts:AssumeRole\",\n      \"Principal\" : {\n        \"AWS\" : \"<arn:aws:iam::<AWS_ACCOUNT_ID>:role/<ARGO_CD_MANAGEMENT_IAM_ROLE_NAME>\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests - Shell\nDESCRIPTION: This shell command runs the unit tests for the Argo CD project.  It uses the command `make test-local`. It checks to see that dependencies like Helm, Kustomize, Git, GnuPG, are installed and working correctly. The output verifies that the unit tests pass without error.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake test-local\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure\nDESCRIPTION: This example illustrates a directory structure with nested charts and subcharts, showcasing a potential scenario where the original Git file generator's globbing behavior might lead to incorrect `values.yaml` file selection.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git-File-Globbing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n└── cluster-charts/\n    ├── cluster1\n    │   ├── mychart/\n    │   │   ├── charts/\n    │   │   │    └── mysubchart/\n    │   │   │        ├── values.yaml\n    │   │   │        └── etc…\n    │   │   ├── values.yaml\n    │   │   └── etc…\n    │   └── myotherchart/\n    │       ├── values.yaml\n    │       └── etc…\n    └── cluster2\n        └── etc…\n```\n\n----------------------------------------\n\nTITLE: Downloading Argo CD CLI for Mac M1\nDESCRIPTION: Command to download the Argo CD CLI binary specifically for Mac M1 (ARM64) architecture.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL -o argocd-darwin-arm64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-arm64\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for Advanced Use\nDESCRIPTION: These options allow direct control over the underlying Kubernetes context, logging, TLS, port forwarding, and other low-level configurations. They provide advanced customization for executing the export command within complex Kubernetes setups or behind proxies.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_export.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--argocd-context string\n--auth-token string\n--client-crt string\n--client-crt-key string\n--config string\n--controller-name string\n--core\n--grpc-web\n--grpc-web-root-path string\n--header strings\n--http-retry-max int\n--insecure\n--kube-context string\n--logformat string\n--loglevel string\n--plaintext\n--port-forward\n--port-forward-namespace string\n--prompts-enabled\n--redis-compress string\n--redis-haproxy-name string\n--redis-name string\n--repo-server-name string\n--server-crt string\n--server-name string\n```\n\n----------------------------------------\n\nTITLE: Installing ApplicationSet Controller v0.4.0 (Pre-Argo CD v2.3) using Bash\nDESCRIPTION: This command uses `kubectl` to apply the ApplicationSet controller manifests (v0.4.0) from a remote URL to the specified `argocd` namespace. This method is applicable only for Argo CD versions prior to v2.3.0, as later versions bundle the ApplicationSet controller. It requires `kubectl`, a configured `kubeconfig`, and an existing Argo CD installation in the `argocd` namespace.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Getting-Started.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/applicationset/v0.4.0/manifests/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Interactive Prompts\nDESCRIPTION: This snippet demonstrates how to enable or disable interactive prompts using the `--prompts-enabled` flag. When enabled, the command interacts with the user for input. When disabled, prompts are suppressed. The flags are boolean, and their value can be set to `true` or `false` for enabling or disabling, respectively.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_configure.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nargocd configure --prompts-enabled\nargocd configure --prompts-enabled=true\nargocd configure --prompts-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Displaying Help and Supported Flags for appset delete - Shell\nDESCRIPTION: This snippet shows available command-line options and flags for the 'argocd appset delete' command. It details supported parameters such as '--help' for additional documentation and '--yes' to force cascaded deletion without confirmation. No execution is shown; this serves as a reference for CLI parameters, their types, and brief descriptions. The options ensure flexibility, security, and compatibility with different deployment environments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_appset_delete.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for delete\n-y, --yes    Turn off prompting to confirm cascaded deletion of Application resources\n```\n\n----------------------------------------\n\nTITLE: Available Options for Argo CD Project Role List Command\nDESCRIPTION: Lists the command-specific options for 'argocd proj role list'. These include help flag and output format specification.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help            help for list\n-o, --output string   Output format. One of: json|yaml|wide|name (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Redis Helm Chart\nDESCRIPTION: This command uninstalls the Helm chart release named 'my-release', removing all associated Kubernetes components. It deletes the deployed Redis instance and related resources from the cluster.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ helm delete my-release\n```\n\n----------------------------------------\n\nTITLE: Configuring Workqueue Per Item Rate Limiter in Argo CD (Go)\nDESCRIPTION: This configuration sets the cooldown and maximum delay durations for the Workqueue Per Item Rate Limiter.  The `--wq-cooldown-ns` flag defines the cooldown period in nanoseconds. Setting this to zero disables per-item rate limiting. The `--wq-maxdelay-ns` flag sets the maximum delay duration in nanoseconds, controlling the maximum time an item can be delayed due to rate limiting. Requires Argo CD setup.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/server-commands/argocd-application-controller.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n      --wq-cooldown-ns duration                                   Set Workqueue Per Item Rate Limiter Cooldown duration in ns, default 0(per item rate limiter disabled)\n      --wq-maxdelay-ns duration                                   Set Workqueue Per Item Rate Limiter Max Delay duration in nanoseconds, default 1000000000 (1s) (default 1s)\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Update Algorithm\nDESCRIPTION: The ApplicationSet update algorithm ensures that a user has permission to create, update, and delete all Applications currently owned by the ApplicationSet before allowing an update. The controller validates user permissions against existing Applications and generated Applications after template rendering. Upon successful validation, the API server applies the requested changes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/backend-support-appset.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nA user can only update an ApplicationSet if the user has permission to create, update, delete all of the Applications currently owned by the ApplicationSet.\n\n* When the user makes a change to an ApplicationSet, we assume that it's possible that the change might affect any or all of the Applications, and thus we require the user to have write access to all of those Applications.\n* We likewise check that the resulting generated Applications are also compliant with the user's permissions.\n\nAlgorithm is, if the user attempts to update an ApplicationSet via Web UI/CLI:\n\n* ApplicationSet controller receives a request to update an ApplicationSet from API server\n* The ApplicationSetController looks at all the Applications owned by the ApplicationSet (via ownerref or annotation):\n    Verify that the user has permission to act on all of the Applications currently managed by the ApplicationSet\n* If the above precondition is met, proceed to the next step, otherwise fail.\n* The ApplicationSet is generated and rendered into a template\n  * Look at the generated Applications, and make sure the user has appropriate privileges\n    * All the same checks done by the Create workflow, described above, are done here (user can access repo, cluster, etc\n* Finally, on success, the API server applies (kubectl apply) the requested change to the ApplicationSet (and the Applications).\n```\n\n----------------------------------------\n\nTITLE: Command Options for Listing Project Sync Windows in Argo CD CLI - Text\nDESCRIPTION: Describes the specific and inherited CLI flags available for the 'argocd proj windows list' command. Options include '-h' for help, '-o' to specify output format, and multiple inherited options for authentication, context selection, TLS/custom certificate handling, logging, port forwarding, and retry behavior. These flags enable customization and secure connectivity to the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_list.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help            help for list\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n```\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for argocd cluster Command (Shell)\nDESCRIPTION: Details the command-line flags inherited from parent commands (like `argocd`) that apply to `argocd cluster`. These global options configure the Argo CD context, authentication token, client/server certificates, config file path, controller/server names, connection modes (direct Kubernetes vs API server, gRPC-web), headers, retry attempts, TLS settings, logging, port-forwarding, and Redis settings.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server string                   Argo CD server address\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Argo CD CLI Commands\nDESCRIPTION: Details the global options inherited from parent `argocd` commands that can be used with `argocd proj list`. These options configure aspects like server connection details (server address, context, certificates, insecure), authentication (token), Kubernetes context, logging levels/format, and overrides for component names (controller, redis, repo-server, etc.).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_list.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Global Options for argocd CLI (Text)\nDESCRIPTION: Lists the global command-line options inherited from parent `argocd` commands, applicable to `cluster list` as well. These options configure aspects like Argo CD context, authentication tokens, certificates, config file paths, controller names, direct Kubernetes interaction, gRPC-web settings, custom headers, connection retries, security verification skipping, Kubernetes context, logging format/level, TLS disabling, port forwarding, prompt enabling, Redis settings, and server addresses/names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Helm Chart with Existing PVC (Bash)\nDESCRIPTION: Installs the stable/redis Helm chart, configuring it to use a pre-existing PersistentVolumeClaim (PVC) named 'PVC_NAME' for data persistence. This is achieved by setting the 'persistence.existingClaim' parameter via the '--set' flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/redis/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set persistence.existingClaim=PVC_NAME stable/redis\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for enable-manual-sync in Argo CD\nDESCRIPTION: The specific options available for the enable-manual-sync command, which currently only includes the help flag.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_windows_enable-manual-sync.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for enable-manual-sync\n```\n\n----------------------------------------\n\nTITLE: Starting Argo CD services directly on local machine\nDESCRIPTION: Starts all Argo CD services directly on the local machine without using Docker containers, using goreman to manage the processes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Ensure you point to the correct Kubernetes cluster as shown above. For example:\nexport KUBECONFIG=~/.kube/config-kind\n\nmake start-local\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for `argocd cert list`\nDESCRIPTION: Details the options inherited from parent Argo CD commands that can be used with `argocd cert list`. These include flags for specifying context, authentication, connection settings (like TLS, gRPC-web), configuration paths, logging levels, and interacting directly with Kubernetes.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cert_list.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Details the global options inherited from parent `argocd` commands that can be used with `argocd account bcrypt`. These options configure aspects like server connection, authentication, Kubernetes context, logging, and other general CLI behaviors.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_bcrypt.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Options for argocd cluster list Subcommand (Text)\nDESCRIPTION: Details the command-line options specific to the `argocd cluster list` subcommand. The `-h` or `--help` flag displays help information, and the `-o` or `--output` flag specifies the output format (json, yaml, wide, or server), defaulting to 'wide'.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_cluster_list.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n  -h, --help            help for list\n  -o, --output string   Output format. One of: json|yaml|wide|server (default \"wide\")\n```\n\n----------------------------------------\n\nTITLE: Impersonation Configuration - YAML\nDESCRIPTION: Demonstrates an alternative configuration allowing user impersonation within an AppProject. It shows how to configure an AppProject to impersonate a specific user, UID, and groups. This approach gives fine-grained control over the identity used for deploying resources but may introduce security risks if not properly managed. This snippet illustrates an alternative for user impersonation using `ImpersonationConfig`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\nspec:\n  description: Example Project\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n  - '*'\n  destinations:\n  - namespace: '*'\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n    impersonate:\n      user: system:serviceaccount:dev_ns:admin\n      uid: 1234\n      groups:\n        - admin\n        - view\n        - edit\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Options with disable-namespaced-mode (Text)\nDESCRIPTION: Details the common options inherited from parent `argocd` commands that can also be used with `disable-namespaced-mode`. These cover broader settings like specifying the Argo CD context (`--argocd-context`), authentication (`--auth-token`, `--username`), connection parameters (`--server`, `--insecure`, `--plaintext`), logging (`--loglevel`), and overriding default names for Argo CD components (`--controller-name`, `--repo-server-name`).\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Defining Hydrated Manifest README Template\nDESCRIPTION: Provides a Go template used to generate the `README.md` file placed alongside the hydrated manifests. It includes logic to handle single or multiple applications, lists the applications, and embeds commit details like author, message, time, repository URL, and commands to reproduce the hydration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_5\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ if eq (len .applications) 1 }}\n{{ $appName := (index .applications 0).metadata.name }}\n# {{ $appName }} Manifests\n\n[manifest.yaml](./manifest.yaml) contains the hydrated manifests for the {{ $appName }} application.\n{{ end }}\n{{ if gt (len .applications) 1 }}\n{{ $appName := (index .applications 0).metadata.name }}\n# Manifests for {{ len .applications }} Applications\n\n[manifest.yaml](./manifest.yaml) contains the hydrated manifests for these applications:\n{{ range $i, $app := .applications }}\n- {{ $app.name }}\n{{ end }}\n{{ end }}\n\nThese are the details of the most recent change;\n* Author: {{ .commitAuthor }}\n* Message: {{ .commitMessage }}\n* Time: {{ .commitTime }}\n\nTo reproduce the manifest hydration, do the following:\n\n```\ngit clone {{ .repoURL }}\ncd {{ .repoName }}\ngit checkout {{ .dryShortSHA }}\n{{ range $i, $command := .commands }}\n{{ $command }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Application Resource Definition in Control Plane Namespace\nDESCRIPTION: Example of an Application resource in the Argo CD control plane namespace 'argocd'. For backward compatibility, this application would retain its original name 'some-app' without namespace prefixing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/003-applications-outside-argocd-namespace.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: argocd\nspec:\n  project: some-project\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes context namespace for Argo CD\nDESCRIPTION: Sets the current Kubernetes context to use the argocd namespace by default for all commands.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-context --current --namespace=argocd\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: Server configuration\nDESCRIPTION: Specifies the Argo CD API server address and related certificate files, essential for communication and validation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server\n```\n\n----------------------------------------\n\nTITLE: ApplicationSet Matrix Generator Configuration YAML\nDESCRIPTION: This YAML snippet demonstrates a configuration for an ApplicationSet using a matrix generator with nested generators. It highlights a bug in Argo CD 2.6.5 where the nested git files generator produces no parameters when it is the second generator nested under a matrix, potentially causing the deletion of Applications.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/upgrading/2.5-2.6.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - matrix:\n      generators:\n        - clusters: {}\n        - git:\n            repoURL: https://git.example.com/org/repo.git\n            revision: HEAD\n            files:\n              - path: \"defaults/*.yaml\"\n  template:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Example ArgoCD ApplicationSet Labels Metric\nDESCRIPTION: Example of how the ApplicationSet labels metric would appear in Prometheus when enabled. It shows how application set labels are exposed with the prefix 'label_' appended to normalized label names.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_2\n\nLANGUAGE: prometheus\nCODE:\n```\n# TYPE argocd_app_labels gauge\nargocd_cluster_labels{label_environment=\"dev\",label_team_name=\"team1\",name=\"cluster1\",server=\"server1\"} 1\nargocd_cluster_labels{label_environment=\"staging\",label_team_name=\"team2\",name=\"cluster2\",server=\"server2\"} 1\nargocd_cluster_labels{label_environment=\"production\",label_team_name=\"team3\",name=\"cluster3\",server=\"server3\"} 1\n```\n\n----------------------------------------\n\nTITLE: Adding Argo CD Installation ID Annotation to Resource (YAML)\nDESCRIPTION: This YAML snippet shows how a Kubernetes resource's metadata would include the proposed `argo-cd.argoproj.io/installation-id` annotation. This annotation, containing a unique GUID for the Argo CD instance, is intended to help distinguish resources managed by different Argo CD instances on the same cluster, especially in multi-instance deployments. It is shown alongside the `app.kubernetes.io/instance` annotation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nKind: Secret\nmetadata:\n    name: some-secret\n    namespace: some-namespace\n    annotations:\n      app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret\n      argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd\n```\n\n----------------------------------------\n\nTITLE: Run End-to-End Tests - Shell\nDESCRIPTION: This command starts the end-to-end tests for Argo CD. It uses the command `make start-e2e-local`, which will spawn several processes and services. After starting the server, the tests are executed using `make test-e2e-local`.  The `TEST_FLAGS` variable allows you to run a single test via `TEST_FLAGS=\"-run TestName\" make test-e2e-local`.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/toolchain-guide.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake start-e2e-local\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake test-e2e-local\n```\n\nLANGUAGE: shell\nCODE:\n```\nTEST_FLAGS=\"-run TestName\" make test-e2e-local\n```\n\n----------------------------------------\n\nTITLE: Example Git Repository Structure for Directory Generator\nDESCRIPTION: Illustrates a sample Git repository layout with directories containing Kubernetes manifests (Kustomize and Helm). The Git Directory Generator can process this structure to create Argo CD Applications for each top-level directory.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Git.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── argo-workflows\n│   ├── kustomization.yaml\n│   └── namespace-install.yaml\n└── prometheus-operator\n    ├── Chart.yaml\n    ├── README.md\n    ├── requirements.yaml\n    └── values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring argocd-server-metrics ServiceMonitor in YAML\nDESCRIPTION: This ServiceMonitor configuration is specifically for the argocd-server-metrics service. It allows Prometheus to scrape metrics from the Argo CD server component. The `metadata` and `spec` sections configure how Prometheus identifies and retrieves these metrics. Prerequisites include Prometheus Operator and proper labeling of Argo CD server components.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/metrics.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n```yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: argocd-server-metrics\n  labels:\n    release: prometheus-operator\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: argocd-server-metrics\n  endpoints:\n  - port: metrics\n```\n```\n\n----------------------------------------\n\nTITLE: Option: Resource name pattern for filtering\nDESCRIPTION: Specifies a string pattern to match resource names. Useful for removing multiple resources matching the pattern.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n      --name string   Resource name pattern\n```\n\n----------------------------------------\n\nTITLE: Inherited Option: TLS configuration\nDESCRIPTION: Specifies client and server certificate files for secure communication with the Argo CD server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --server-crt string               Server certificate file\n```\n\n----------------------------------------\n\nTITLE: Authentication and TLS Configuration Options\nDESCRIPTION: These flags provide options for impersonation, token-based authentication, and TLS settings, including client certificates, server name validation, and insecure connection modes. They facilitate secure API server communication and impersonation scenarios, enabling flexible access control.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_export.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--as string\n--as-group stringArray\n--as-uid string\n--certificate-authority string\n--client-certificate string\n--client-key string\n--server string\n--tls-server-name string\n--token string\n--username string\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Rollout Status - Shell\nDESCRIPTION: This command waits for the 'argocd-e2e-cluster' deployment to successfully roll out in the 'argocd-e2e' namespace. It requires 'kubectl', and will output the status or block until the rollout completes or a failure occurs. Use this to confirm that the test workload is running before proceeding with tests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd-e2e rollout status deployment argocd-e2e-cluster\n\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Hub for custom image publishing\nDESCRIPTION: Authenticates with Docker Hub to enable pushing custom Argo CD images.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n```\n\n----------------------------------------\n\nTITLE: Initializing Minio Setup for Argo CD via Shell Script\nDESCRIPTION: Runs the main entrypoint workflow by sequentially calling connectToMinio and createBucket with templated values for bucket configuration. This drives the Minio connectivity and bucket assurance steps intended for automated Argo CD startup. Assumes all required functions are defined and ENV/template variables are set; no direct user input is required at runtime.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/templates/_helper_create_bucket.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nconnectToMinio\ncreateBucket {{ .Values.defaultBucket.name }} {{ .Values.defaultBucket.policy }} {{ .Values.defaultBucket.purge }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Distributed Mode for Minio via Helm - Bash\nDESCRIPTION: Installs Minio in distributed mode by setting the mode parameter to 'distributed'. Requires Kubernetes 1.5+ and appropriate cluster resources. Uses --set mode=distributed to configure the release for high-availability with 4 Minio nodes by default. Result is a distributed object storage deployment.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set mode=distributed stable/minio\n```\n\n----------------------------------------\n\nTITLE: Option: Help flag for 'remove-orphaned-ignore' command\nDESCRIPTION: Provides help information for the 'remove-orphaned-ignore' command, displaying usage instructions and available options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_remove-orphaned-ignore.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n  -h, --help          help for remove-orphaned-ignore\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands for argocd admin cluster namespaces in Bash\nDESCRIPTION: List of options inherited from parent commands that can be used with the 'argocd admin cluster namespaces' command, including configuration paths, authentication settings, and logging options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_namespaces.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Running E2E Test Suite with OpenShift Skips Enabled - Shell\nDESCRIPTION: This command runs the remote e2e test suite with OpenShift-specific tests skipped by setting an environment variable. Use this variant to avoid known incompatibilities with OpenShift's default configurations.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/test/remote/README.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./test/remote/run-e2e-remote.sh make test-local ARGOCD_E2E_SKIP_OPENSHIFT=true\n\n```\n\n----------------------------------------\n\nTITLE: Renaming TLS Certificate Keys in Argo CD secret for Ingress/Cert-Manager Integration\nDESCRIPTION: Guidance for renaming TLS certificate keys in the argocd-secret from 'server.crt'/'server.key' to 'tls.crt'/'tls.key' to improve Ingress and cert-manager compatibility after upgrading to v0.9.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Lists all options inherited from parent commands, including Argo CD server configurations, authentication settings, connection parameters, and logging options.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_cluster_kubeconfig.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Options for 'argocd app resources' Command\nDESCRIPTION: Details the command-line options available to customize the output, including help, filtering orphaned resources, setting output format, and specifying the application project. These flags enhance the command's functionality for tailored resource listing.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_resources.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for resources\n      --orphaned         Lists only orphaned resources\n      --output string    Provides the tree view of the resources\n      --project string   The name of the application's project - specifying this allows the command to report \"not found\" instead of \"permission denied\" if the app does not exist\n```\n\n----------------------------------------\n\nTITLE: Setting Docker image namespace for custom builds\nDESCRIPTION: Configures the Docker namespace to use when building and pushing custom Argo CD images.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/running-locally.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport IMAGE_NAMESPACE=youraccount\n```\n\n----------------------------------------\n\nTITLE: Viewing Help Options for argocd proj role get Command in Shell\nDESCRIPTION: This snippet displays the available command-line flags for the argocd proj role get command, offering help information to users. The -h or --help flag can be used to print usage guidance, descriptions of supported options, and invocation syntax. No input other than the help flag is required; output is help documentation to the terminal.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_get.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for get\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting kubectl api-resources\nDESCRIPTION: This shell snippet addresses issues related to the metrics server during E2E test failures, specifically if the `kubectl api-resources` command exits with a non-zero status code. It attempts to delete the `v1beta1.metrics.k8s.io` API service.  It can be used when there are problems with the metrics server which could prevent the proper running of tests.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/test-e2e.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl api-resources\n```\n\n----------------------------------------\n\nTITLE: Listing Argo CD Project Role Tokens Syntax (Shell)\nDESCRIPTION: Basic command syntax for listing tokens associated with a specific role within a given Argo CD project. Requires the project name and role name as positional arguments.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_proj_role_list-tokens.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nargocd proj role list-tokens PROJECT ROLE-NAME [flags]\n```\n\n----------------------------------------\n\nTITLE: Argo CD Account List Command Options and Flags in Shell\nDESCRIPTION: This snippet lists the command-specific options for 'argocd account list', including help and output formatting flags. It also shows the extensive inherited global options that configure authentication, server context, TLS settings, logging, port forwarding, and Redis-specific parameters. These flags require knowledge of the Argo CD environment and Kubernetes contexts to properly control the command's behavior.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_account_list.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help            help for list\n  -o, --output string   Output format. One of: json|yaml|wide|name (default \"wide\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: json|text (default \"json\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Option for RBAC Command in Argo CD CLI Shell Command\nDESCRIPTION: This snippet shows the help flag usage for the `argocd admin settings rbac` command within the Argo CD CLI. Running this with the `-h` or `--help` option provides the user with usage information and available flags for the command.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_rbac.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for rbac\n```\n\n----------------------------------------\n\nTITLE: Argo CD Admin Notifications Template Command\nDESCRIPTION: The `argocd admin notifications template` command is used to manage notification templates within Argo CD. This command serves as a parent command for more specific actions, such as getting information about templates or sending notifications based on them. It requires the Argo CD CLI to be installed and configured.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_notifications_template.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nargocd admin notifications template [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Argo CD Admin Dashboard CLI Flags and Options - Shell\nDESCRIPTION: This shell snippet presents all available flags and options for configuring the argocd admin dashboard command, including authentication, security, port settings, timeouts, and inherited options from parent commands. While not an executable script, it provides a reference for possible command-line parameters, assisting users in constructing precise dashboard startup commands. Users must supply required parameter values and ensure matching configuration with their Argo CD deployment. The listed flags serve to customize the behavior, security, and network characteristics of the dashboard session.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_dashboard.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--address string                 Listen on given address (default \"localhost\")\n--as string                      Username to impersonate for the operation\n--as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n--as-uid string                  UID to impersonate for the operation\n--certificate-authority string   Path to a cert file for the certificate authority\n--client-certificate string      Path to a client certificate file for TLS\n--client-key string              Path to a client key file for TLS\n--cluster string                 The name of the kubeconfig cluster to use\n--context string                 The name of the kubeconfig context to use\n--disable-compression            If true, opt-out of response compression for all requests to the server\n-h, --help                       help for dashboard\n--insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n--kubeconfig string              Path to a kube config. Only required if out-of-cluster\n-n, --namespace string           If present, the namespace scope for this CLI request\n--password string                Password for basic authentication to the API server\n--port int                       Listen on given port (default 8080)\n--proxy-url string               If provided, this URL will be used to connect via proxy\n--request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n--server string                  The address and port of the Kubernetes API server\n--tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n--token string                   Bearer token for authentication to the API server\n--user string                    The name of the kubeconfig user to use\n--username string                Username for basic authentication to the API server\n```\n\nLANGUAGE: shell\nCODE:\n```\n--argocd-context string           The name of the Argo-CD server context to use\n--auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n--client-crt string               Client certificate file\n--client-crt-key string           Client certificate key file\n--config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n--controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n--core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n--grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n--grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings              Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n--http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n--insecure                        Skip server certificate and domain verification\n--kube-context string             Directs the command to the given kube-context\n--logformat string                Set the logging format. One of: json|text (default \"json\")\n--loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n--plaintext                       Disable TLS\n--port-forward                    Connect to a random argocd-server port using port forwarding\n--port-forward-namespace string   Namespace name which should be used for port forwarding\n--prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--redis-compress string           Enable this if the application controller is configured with redis compression enabled. (possible values: gzip, none) (default \"gzip\")\n--redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n--redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n--repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n--server-crt string               Server certificate file\n--server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Replicas for Minio NAS Gateway\nDESCRIPTION: Command to provision Minio NAS gateway with a custom number of instances (8 in this example) using Helm chart. This allows you to scale the number of Minio instances as needed.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/helm/testdata/minio/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ helm install --set nasgateway.enabled=true,nasgateway.replicas=8 stable/minio\n```\n\n----------------------------------------\n\nTITLE: Help Option for Argo CD CLI Commands\nDESCRIPTION: This option provides help information for the `argocd app confirm-deletion` command. It displays the command's usage, available options, and a brief description.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_confirm-deletion.md#_snippet_2\n\nLANGUAGE: CLI\nCODE:\n```\n-h, --help                   help for confirm-deletion\n```\n\n----------------------------------------\n\nTITLE: Displaying help information for `argocd app actions` command\nDESCRIPTION: This snippet provides the command to access help documentation for the `argocd app actions` command, including available flags like `-h` or `--help`, which display usage details.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app_actions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nargocd app actions -h\n```\n\n----------------------------------------\n\nTITLE: Generating and Sourcing Zsh Completion Script (Shell)\nDESCRIPTION: These commands show how to generate the zsh completion script to a file named `_argocd` and then source that file. This is an alternative method to sourcing directly, often used for persistent installation.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_completion.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ argocd completion zsh > _argocd\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ source _argocd\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for argocd admin resource-overrides ignore-resource-updates\nDESCRIPTION: Provides the command syntax for invoking the 'ignore-resource-updates' operation, requiring the path to a resource YAML file and optional flags for configuration.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargocd admin settings resource-overrides ignore-resource-updates RESOURCE_YAML_PATH [flags]\n```\n\n----------------------------------------\n\nTITLE: Grouping Applications by Dry and Sync Source in Argo CD Hydrator (Go)\nDESCRIPTION: This Go code defines data structures and a grouping map for organizing Argo CD Applications based on their dry and sync sources, as part of the hydration process. 'DrySource' and 'SyncSource' structs encapsulate the critical grouping fields, while the 'appGroups' variable groups applications first by dry source and then by sync source. Dependencies include the 'v1alpha1' Application API. Input consists of Application instances; output is categorized groups for processing. Limitations include reliance on proper struct population and mapping correctness.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/manifest-hydrator.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage hydrator\n\nimport \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n\ntype DrySource struct {\n\trepoURL        string\n\ttargetRevision string\n}\n\ntype SyncSource struct {\n\ttargetBranch string\n}\n\nvar appGroups map[DrySource]map[SyncSource][]v1alpha1.Application\n```\n\n----------------------------------------\n\nTITLE: Using Kubernetes Impersonation via kubectl CLI - Shell\nDESCRIPTION: Demonstrates how to use the kubectl CLI tool's impersonation feature to act as a different Kubernetes user or group by specifying the --as and --as-group flags. This is a built-in kubectl authentication feature enabling an authenticated user to issue requests on behalf of another user, useful for debugging and authorization testing. No additional dependencies beyond kubectl and appropriate permissions are required. Example inputs include the user and optionally a group to impersonate, and outputs are kubectl commands executed as that user.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/decouple-application-sync-user-using-impersonation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --as <user-to-impersonate> ...\nkubectl --as <user-to-impersonate> --as-group <group-to-impersonate> ...\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for an Argo CD Extension component that receives resource data and renders a UI component.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/002-ui-extensions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Extention {\n    ResourceTab: React.Component<{resource: any}>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Argo CD CLI on ArchLinux using pacman\nDESCRIPTION: A simple command to install the Argo CD CLI using the Arch Linux package manager pacman.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/cli_installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npacman -S argocd\n```\n\n----------------------------------------\n\nTITLE: Resource After Sync with Proposed Argo CD Enhancement\nDESCRIPTION: The Secret resource after being synced with the enhanced version of Argo CD implementing the proposal. It includes both the original label and new annotations for extended tracking capabilities.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/proposals/application-name-identifier.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  labels:\n    app.kubernetes.io/instance: some-application\n  annotations:\n    app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret\n    argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd\n```\n\n----------------------------------------\n\nTITLE: Deleting API Service for Metrics Server\nDESCRIPTION: This bash command is used to delete the API service for the metrics server. This is a potential resolution for failing tests when the metrics server is causing issues, potentially due to conflicting configurations. The command deletes the API service with the name 'v1beta1.metrics.k8s.io'. This action can help resolve errors in the test environment related to the metrics server.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/docs/developer-guide/test-e2e.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete apiservice v1beta1.metrics.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Verifying GitHub Web-Flow Commit Signature using GPG\nDESCRIPTION: Output from GPG signature verification showing details of a valid signature from GitHub's web-flow commit signing system, including the signature timestamp and the RSA key used.\nSOURCE: https://github.com/argoproj/argo-cd/blob/master/util/gpg/testdata/good_signature.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngpg: Signature made Wed Feb 26 23:22:34 2020 CET\ngpg:                using RSA key 4AEE18F83AFDEB23\ngpg: Good signature from \"GitHub (web-flow commit signing) <noreply@github.com>\" [ultimate]\n```"
  }
]