[
  {
    "owner": "livewire",
    "repo": "livewire",
    "content": "TITLE: Basic Livewire Component Class Structure\nDESCRIPTION: The PHP class file for a Livewire component that extends the base Component class. This file contains the component's logic and renders its view.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n\tpublic function render()\n\t{\n\t\treturn view('livewire.create-post');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Livewire Component with Artisan\nDESCRIPTION: Artisan command to generate a new Livewire counter component. This creates both the component class file and the corresponding Blade view template.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:livewire counter\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Component Blade Template\nDESCRIPTION: The Blade template file for a Livewire component. This file contains the component's HTML markup and Blade directives.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n\t{{-- ... --}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Counter Component in Livewire PHP\nDESCRIPTION: A simple Livewire component that displays a count and provides a button to increment it. The example demonstrates the basic structure of a Livewire component with a public property and an action method that can be triggered from the browser.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Counter extends Component\n{\n    public $count = 1;\n\n    public function increment()\n    {\n        $this->count++;\n    }\n\n    public function render()\n    {\n        return <<<'HTML'\n        <div>\n            Count: {{ $count }}\n\n            <button wire:click=\"increment\">+</button>\n        </div>\n        HTML;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Livewire Actions from Blade Templates\nDESCRIPTION: Use the wire:submit directive on a form to call a component action when the form is submitted. This triggers the action method in the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\"> <!-- [tl! highlight] -->\n    <label for=\"title\">Title:</label>\n\n    <input type=\"text\" id=\"title\" wire:model=\"title\">\n\n\t<button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with Properties\nDESCRIPTION: A component with a public property that can be accessed in both the component class and its view. Properties store data for the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public $title = 'Post title...';\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Validation with Livewire in Blade\nDESCRIPTION: This snippet demonstrates how to use wire:model.blur for real-time validation in a Livewire form. When a user types in the field and then tabs or clicks away, a network request is triggered with the updated value, and validation rules are applied.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model.blur=\"title\">\n\n    <!-- -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Validating Form Input in Blade Template\nDESCRIPTION: A Blade template that displays form inputs and validation error messages for the CreatePost component. It uses wire:submit to handle form submission and wire:model to bind inputs to component properties.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n\t<input type=\"text\" wire:model=\"title\">\n    <div>@error('title') {{ $message }} @enderror</div>\n\n\t<textarea wire:model=\"content\"></textarea>\n    <div>@error('content') {{ $message }} @enderror</div>\n\n\t<button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Locked properties in Livewire for security\nDESCRIPTION: A secure implementation using Livewire's Locked attribute to prevent property tampering. This prevents malicious users from changing the postId value through client-side manipulation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\nuse Livewire\\Attributes\\Locked;\n\nclass ShowPost extends Component\n{\n    #[Locked] // [tl! highlight]\n    public $postId;\n\n    public function mount($postId)\n    {\n        $this->postId = $postId;\n    }\n\n    public function delete()\n    {\n        $post = Post::find($this->postId);\n\n        $post->delete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying route-level middleware for Livewire authorization\nDESCRIPTION: An example of applying authorization middleware at the route level for a Livewire component. Livewire ensures this middleware is re-applied on subsequent requests.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/post/{post}', App\\Livewire\\UpdatePost::class)\n    ->middleware('can:update,post'); // [tl! highlight]\n```\n\n----------------------------------------\n\nTITLE: Creating Livewire Components via Artisan Command\nDESCRIPTION: Use the Artisan command to generate a new Livewire component. The command supports both camel-case and kebab-case naming conventions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:livewire CreatePost\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:livewire create-post\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Component Validation in PHP\nDESCRIPTION: A basic CreatePost component that demonstrates validation workflow in Livewire. It defines properties for title and content, validates them using the validate() method, and creates a Post record if validation passes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n\tpublic $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n        $validated = $this->validate([ // [tl! highlight:3]\n\t\t\t'title' => 'required|min:3',\n\t\t\t'content' => 'required|min:3',\n        ]);\n\n\t\tPost::create($validated);\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Securing post deletion with Laravel authorization\nDESCRIPTION: An improved implementation of the delete method that uses Laravel's authorization system. This method verifies the user's permission to delete the post before proceeding with the deletion.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function delete($id)\n{\n    $post = Post::find($id);\n\n    // If the user doesn't own the post,\n    // an AuthorizationException will be thrown...\n    $this->authorize('delete', $post); // [tl! highlight]\n\n    $post->delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Post Component with Livewire Actions in PHP\nDESCRIPTION: Example of a Livewire component class that handles post creation with title and content fields. The component includes a save action that creates a new post and redirects to the posts page.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n        Post::create([\n            'title' => $this->title,\n            'content' => $this->content,\n        ]);\n\n        return redirect()->to('/posts');\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Livewire Component for Form Handling in PHP\nDESCRIPTION: A PHP Livewire component class that handles form submission for creating a new post. It defines properties for the form fields and implements a save method that creates a Post record and redirects the user.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-submit.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n        Post::create([\n            'title' => $this->title,\n            'content' => $this->content,\n        ]);\n\n        $this->redirect('/posts');\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing actions with public properties\nDESCRIPTION: A secure implementation that authorizes post deletion in the action method even when using public properties. This protects against property manipulation by verifying authorization before performing the action.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public $postId;\n\n    public function mount($postId)\n    {\n        $this->postId = $postId;\n    }\n\n    public function delete()\n    {\n        $post = Post::find($this->postId);\n\n        $this->authorize('delete', $post); // [tl! highlight]\n\n        $post->delete();\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<button wire:click=\"delete\">Delete Post</button>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events from Livewire Components in PHP\nDESCRIPTION: Shows how to dispatch events from a Livewire component using the dispatch() method. The example demonstrates a CreatePost component dispatching a 'post-created' event when saving a post.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public function save()\n    {\n\t\t// ...\n\n\t\t$this->dispatch('post-created'); // [tl! highlight]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post deletion Policy in Laravel\nDESCRIPTION: A Laravel Policy implementation that defines authorization rules for post deletion. This policy only allows users to delete posts they own by comparing the user ID with the post's user_id.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\nclass PostPolicy\n{\n    /**\n     * Determine if the given post can be deleted by the user.\n     */\n    public function delete(?User $user, Post $post): bool\n    {\n        return $user?->id === $post->user_id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Handling in Livewire Component\nDESCRIPTION: Demonstrates a simple CreatePost component with form submission handling. Shows basic property binding and form submission using wire:model and wire:submit directives.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n        Post::create(\n            $this->only(['title', 'content'])\n        );\n\n        session()->flash('status', 'Post successfully updated.');\n\n        return $this->redirect('/posts');\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model=\"title\">\n\n    <input type=\"text\" wire:model=\"content\">\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing Livewire via Composer in Laravel\nDESCRIPTION: Command to install Livewire package using Composer in a Laravel application.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require livewire/livewire\n```\n\n----------------------------------------\n\nTITLE: Customizing Livewire Component Stubs\nDESCRIPTION: Generate custom stub files that Livewire will use when creating new components and their related files.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:stubs\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Livewire Components\nDESCRIPTION: Shows how to pass initial data to Livewire components using attributes on the component tag. It includes examples of passing static and dynamic values.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:create-post title=\"Initial Title\" />\n```\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:create-post :title=\"$initialTitle\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in Livewire Components\nDESCRIPTION: Create an action method in a Livewire component to handle user interactions. This example saves a post and redirects to a new page with a status message.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public $title;\n\n    public function save() // [tl! highlight:8]\n    {\n\t\tPost::create([\n\t\t\t'title' => $this->title\n\t\t]);\n\n\t\treturn redirect()->to('/posts')\n\t\t\t ->with('status', 'Post created!');\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules in Livewire Component\nDESCRIPTION: This PHP code shows how to define validation rules in a Livewire component using the #[Validate] attribute and a rules() method. It demonstrates real-time validation behavior for properties even when using the rules() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    #[Validate] // [tl! highlight]\n\tpublic $title = '';\n\n    public $content = '';\n\n    protected function rules()\n    {\n        return [\n            'title' => 'required|min:5',\n            'content' => 'required|min:5',\n        ];\n    }\n\n    public function save()\n    {\n        $validated = $this->validate();\n\n\t\tPost::create($validated);\n\n\t\treturn redirect()->to('/posts');\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Livewire Component with wire:model Binding\nDESCRIPTION: A simple PHP component class for creating posts with title and content properties that are bound to form inputs. This demonstrates the basic structure of a Livewire component with form binding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n\t\t$post = Post::create([\n\t\t\t'title' => $this->title\n\t\t\t'content' => $this->content\n\t\t]);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation Implementation\nDESCRIPTION: Shows how to add validation to form fields using #[Validate] attributes and display validation errors in the template.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    #[Validate('required')]\n    public $title = '';\n\n    #[Validate('required')]\n    public $content = '';\n\n    public function save()\n    {\n        $this->validate();\n\n        Post::create(\n            $this->only(['title', 'content'])\n        );\n\n        return $this->redirect('/posts');\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model=\"title\">\n    <div>\n        @error('title') <span class=\"error\">{{ $message }}</span> @enderror\n    </div>\n\n    <input type=\"text\" wire:model=\"content\">\n    <div>\n        @error('content') <span class=\"error\">{{ $message }}</span> @enderror\n    </div>\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Livewire Update Route with Middleware\nDESCRIPTION: Example of how to set up a custom update route for Livewire with specific middleware that will be applied to every Livewire network request.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nLivewire::setUpdateRoute(function ($handle) {\n\treturn Route::post('/livewire/update', $handle)\n        ->middleware(App\\Http\\Middleware\\LocalizeViewPaths::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form with wire:submit in Blade Template\nDESCRIPTION: A Blade template that creates a form with the wire:submit directive to handle submission. It includes text inputs bound to Livewire properties using wire:model and a submit button.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-submit.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\"> <!-- [tl! highlight] -->\n    <input type=\"text\" wire:model=\"title\">\n\n    <textarea wire:model=\"content\"></textarea>\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules with Rule Objects in Livewire Form\nDESCRIPTION: This snippet demonstrates how to use Laravel's Rule objects for more sophisticated validation scenarios in a Livewire Form class. It shows the implementation of a rules() method to declare validation rules, including a unique rule with ignore.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire\\Forms;\n\nuse Illuminate\\Validation\\Rule;\nuse App\\Models\\Post;\nuse Livewire\\Form;\n\nclass PostForm extends Form\n{\n    public ?Post $post;\n\n    public $title = '';\n\n    public $content = '';\n\n    protected function rules()\n    {\n        return [\n            'title' => [\n                'required',\n                Rule::unique('posts')->ignore($this->post),\n            ],\n            'content' => 'required|min:5',\n        ];\n    }\n\n    // ...\n\n    public function update()\n    {\n        $this->validate();\n\n        $this->post->update($this->only(['title', 'content']));\n\n        $this->reset();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Secured BrowsePosts Component in PHP\nDESCRIPTION: An improved version of the BrowsePosts component with proper server-side authorization for the deletePost action.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass BrowsePosts extends Component\n{\n    public function deletePost($id)\n    {\n        if (! Auth::user()->isAdmin) {\n            abort(403);\n        }\n\n        $post = Post::find($id);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.browse-posts', [\n            'posts' => Post::all(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Secured BrowsePosts Component with Protected Delete Method\nDESCRIPTION: An improved BrowsePosts component with a protected delete method to prevent direct client-side calls.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass BrowsePosts extends Component\n{\n    public function deletePost($id)\n    {\n        if (! Auth::user()->isAdmin) {\n            abort(403);\n        }\n\n        $this->delete($id);\n    }\n\n    protected function delete($postId)\n    {\n        $post = Post::find($postId);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.browse-posts', [\n            'posts' => Post::all(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Post Creation Form with Livewire Bindings\nDESCRIPTION: Blade template showing a form with Livewire model bindings and submit action for creating posts.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model=\"title\">\n\n    <textarea wire:model=\"content\"></textarea>\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Binding Text Input with wire:model\nDESCRIPTION: A basic example of binding a text input to a 'title' property in a Livewire component, which is the most common form of data binding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"text\" wire:model=\"title\">\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded Files in Livewire Component (PHP)\nDESCRIPTION: Examples of different ways to store uploaded files in a Livewire component, including storing in different directories, disks, and with custom filenames.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function save()\n{\n    // Store the file in the \"photos\" directory of the default filesystem disk\n    $this->photo->store(path: 'photos');\n\n    // Store the file in the \"photos\" directory in a configured \"s3\" disk\n    $this->photo->store(path: 'photos', options: 's3');\n\n    // Store the file in the \"photos\" directory with the filename \"avatar.png\"\n    $this->photo->storeAs(path: 'photos', name: 'avatar');\n\n    // Store the file in the \"photos\" directory in a configured \"s3\" disk with the filename \"avatar.png\"\n    $this->photo->storeAs(path: 'photos', name: 'avatar', options: 's3');\n\n    // Store the file in the \"photos\" directory, with \"public\" visibility in a configured \"s3\" disk\n    $this->photo->storePublicly(path: 'photos', options: 's3');\n\n    // Store the file in the \"photos\" directory, with the name \"avatar.png\", with \"public\" visibility in a configured \"s3\" disk\n    $this->photo->storePubliclyAs(path: 'photos', name: 'avatar', options: 's3');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Computed Properties in Livewire Components\nDESCRIPTION: This example demonstrates how to create a basic computed property in a Livewire component using the #[Computed] attribute to access a User model based on a userId property.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\nuse App\\Models\\User;\n\nclass ShowUser extends Component\n{\n    public $userId;\n\n    #[Computed]\n    public function user()\n    {\n        return User::find($this->userId);\n    }\n\n    public function follow()\n    {\n        Auth::user()->follow($this->user);\n    }\n\n    public function render()\n    {\n        return view('livewire.show-user');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Rule Objects for Advanced Validation in Livewire\nDESCRIPTION: This example demonstrates how to use Laravel Rule objects in conjunction with Livewire's rules() method to achieve more sophisticated validation, including unique constraints with exceptions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Validation\\Rule;\nuse App\\Models\\Post;\nuse Livewire\\Form;\n\nclass UpdatePost extends Form\n{\n    public ?Post $post;\n\n    public $title = '';\n\n    public $content = '';\n\n    protected function rules()\n    {\n        return [\n            'title' => [\n                'required',\n                Rule::unique('posts')->ignore($this->post), // [tl! highlight]\n            ],\n            'content' => 'required|min:5',\n        ];\n    }\n\n    public function mount()\n    {\n        $this->title = $this->post->title;\n        $this->content = $this->post->content;\n    }\n\n    public function update()\n    {\n        $this->validate(); // [tl! highlight]\n\n        $this->post->update($this->all());\n\n        $this->reset();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination in Livewire Component (PHP)\nDESCRIPTION: Demonstrates how to set up basic pagination in a Livewire component using the WithPagination trait and Laravel's paginate() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\WithPagination;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    use WithPagination;\n\n    public function render()\n    {\n        return view('show-posts', [\n            'posts' => Post::paginate(10),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Validation Timing with onUpdate Parameter\nDESCRIPTION: A Livewire component that disables automatic validation on property updates by setting onUpdate: false in the #[Validate] attribute. This gives more control over when validation occurs.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    #[Validate('required|min:3', onUpdate: false)]\n\tpublic $title = '';\n\n    #[Validate('required|min:3', onUpdate: false)]\n    public $content = '';\n\n    public function save()\n    {\n        $validated = $this->validate();\n\n\t\tPost::create($validated);\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Secured ShowPosts Component in PHP\nDESCRIPTION: An improved version of the ShowPosts component with proper authorization for the delete action.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    public function delete($id)\n    {\n        $post = Post::find($id);\n\n        $this->authorize('delete', $post);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.show-posts', [\n            'posts' => Auth::user()->posts,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response and Redirect Assertions in Livewire Tests\nDESCRIPTION: Methods for testing redirects, view data, file downloads, and HTTP response status codes in Livewire components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nassertRedirect()\nassertRedirect('/posts')\nassertRedirect(ShowPosts::class)\nassertRedirectToRoute('name', ['parameters'])\nassertNoRedirect()\nassertViewHas('posts')\nassertViewHas('postCount', 3)\nassertViewIs('livewire.show-posts')\nassertFileDownloaded()\nassertFileDownloaded($filename)\nassertNoFileDownloaded()\nassertUnauthorized()\nassertForbidden()\nassertStatus(500)\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules, Messages, and Attributes Methods in Livewire\nDESCRIPTION: This code demonstrates how to define rules(), messages(), and validationAttributes() methods in a Livewire component for more complex validation scenarios, including the use of Laravel Rule objects.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\nuse Illuminate\\Validation\\Rule;\n\nclass CreatePost extends Component\n{\n\tpublic $title = '';\n\n    public $content = '';\n\n    protected function rules() // [tl! highlight:6]\n    {\n        return [\n            'title' => Rule::exists('posts', 'title'),\n            'content' => 'required|min:3',\n        ];\n    }\n\n    protected function messages() // [tl! highlight:6]\n    {\n        return [\n            'content.required' => 'The :attribute are missing.',\n            'content.min' => 'The :attribute is too short.',\n        ];\n    }\n\n    protected function validationAttributes() // [tl! highlight:6]\n    {\n        return [\n            'content' => 'description',\n        ];\n    }\n\n    public function save()\n    {\n        $this->validate();\n\n\t\tPost::create([\n            'title' => $this->title,\n            'content' => $this->content,\n\t\t]);\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Template Component with Computed Property\nDESCRIPTION: Complete Livewire component using computed property with an inline template implementation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    #[Computed]\n    public function posts()\n    {\n        return Post::all();\n    }\n\n    public function render()\n    {\n        return <<<HTML\n        <div>\n            @foreach ($this->posts as $post)\n                <!-- ... -->\n            @endforeach\n        </div>\n        HTML;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Binding in Livewire with wire:model\nDESCRIPTION: Bind an input element to a component property using the wire:model directive. This creates two-way data binding between the input and the property.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<form>\n    <label for=\"title\">Title:</label>\n\n    <input type=\"text\" id=\"title\" wire:model=\"title\"> <!-- [tl! highlight] -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using #[Validate] Attribute with rules() Method in Livewire Form\nDESCRIPTION: This code snippet shows how to use the #[Validate] attribute without provided rules in combination with a rules() method. This approach allows for real-time validation of specific fields after every request.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire\\Forms;\n\nuse Livewire\\Attributes\\Validate;\nuse Illuminate\\Validation\\Rule;\nuse App\\Models\\Post;\nuse Livewire\\Form;\n\nclass PostForm extends Form\n{\n    public ?Post $post;\n\n    #[Validate]\n    public $title = '';\n\n    public $content = '';\n\n    protected function rules()\n    {\n        return [\n            'title' => [\n                'required',\n                Rule::unique('posts')->ignore($this->post),\n            ],\n            'content' => 'required|min:5',\n        ];\n    }\n\n    // ...\n\n    public function update()\n    {\n        $this->validate();\n\n        $this->post->update($this->only(['title', 'content']));\n\n        $this->reset();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using wire:navigate.hover for Page Prefetching in Blade\nDESCRIPTION: This example shows how to use the .hover modifier with wire:navigate. When a user hovers over the link, Livewire will pre-fetch the page, ensuring it's already downloaded when the user clicks, further improving navigation speed.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-navigate.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<a href=\"/\" wire:navigate.hover>Dashboard</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Prefetching with wire:navigate\nDESCRIPTION: Example of using the .hover modifier with wire:navigate to prefetch pages when a user hovers over a link. This improves perceived performance by loading pages before the user clicks.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<a href=\"/posts\" wire:navigate.hover>Posts</a>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events Directly to Specific Components\nDESCRIPTION: Demonstrates how to dispatch events directly to a specific component. The example shows using the to() modifier to send an event directly to a Dashboard component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public function save()\n    {\n\t\t// ...\n\n\t\t$this->dispatch('post-created')->to(Dashboard::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Livewire Component (PHP)\nDESCRIPTION: A basic Livewire component that handles uploading a photo. It uses the WithFileUploads trait and includes validation for the uploaded image.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Livewire\\WithFileUploads;\nuse Livewire\\Attributes\\Validate;\n\nclass UploadPhoto extends Component\n{\n    use WithFileUploads;\n\n    #[Validate('image|max:1024')] // 1MB Max\n    public $photo;\n\n    public function save()\n    {\n        $this->photo->store(path: 'photos');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Blade View Template for Counter Component\nDESCRIPTION: Blade template that displays the counter value and buttons to increment and decrement it. The template uses Livewire's wire:click directive to bind button clicks to component methods.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>{{ $count }}</h1>\n\n    <button wire:click=\"increment\">+</button>\n\n    <button wire:click=\"decrement\">-</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Additional Data in Livewire\nDESCRIPTION: Demonstrates how to pass additional data when dispatching an event. The example shows sending the post title as a parameter with the 'post-created' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatch('post-created', title: $post->title);\n```\n\n----------------------------------------\n\nTITLE: Rendering Paginated Results in Blade Template (Blade)\nDESCRIPTION: Shows how to display paginated results and navigation links in a Blade template using Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <div>\n        @foreach ($posts as $post)\n            <!-- ... -->\n        @endforeach\n    </div>\n\n    {{ $posts->links() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in Livewire Component (PHP)\nDESCRIPTION: A Livewire component that handles multiple file uploads. It uses an array property for photos and includes validation for each uploaded image.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Livewire\\WithFileUploads;\nuse Livewire\\Attributes\\Validate;\n\nclass UploadPhotos extends Component\n{\n    use WithFileUploads;\n\n    #[Validate(['photos.*' => 'image|max:1024'])]\n    public $photos = [];\n\n    public function save()\n    {\n        foreach ($this->photos as $photo) {\n            $photo->store(path: 'photos');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing wire:navigate in Navigation Links\nDESCRIPTION: Example of adding wire:navigate to navigation links to enable SPA-like page transitions. This prevents full page reloads when navigating between pages.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/\" wire:navigate>Dashboard</a>\n    <a href=\"/posts\" wire:navigate>Posts</a>\n    <a href=\"/users\" wire:navigate>Users</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Generating Livewire Component with Test File\nDESCRIPTION: Command to create a Livewire component along with a test file using Artisan.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:livewire create-post --test\n```\n\n----------------------------------------\n\nTITLE: Component Auto-Refresh Using $wire\nDESCRIPTION: Example of using $wire object within @script to implement component auto-refresh functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@script\n<script>\n    setInterval(() => {\n        $wire.$refresh()\n    }, 2000)\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Parameters in Livewire Component Methods\nDESCRIPTION: Shows how to access parameters passed with events in a Livewire component method. The example demonstrates receiving the refreshPosts parameter in a handleNewPost method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\On;\n\n// ...\n\n#[On('post-created')]\npublic function handleNewPost($refreshPosts = false)\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ChatBot Component with Livewire Streaming in PHP\nDESCRIPTION: This snippet showcases a ChatBot component using Livewire's wire:stream API. It demonstrates how to stream chat-bot responses as they are received from an API, creating a ChatGPT-like interface.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-stream.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass ChatBot extends Component\n{\n    public $prompt = '';\n\n    public $question = '';\n\n    public $answer = '';\n\n    function submitPrompt()\n    {\n        $this->question = $this->prompt;\n\n        $this->prompt = '';\n\n        $this->js('$wire.ask()');\n    }\n\n    function ask()\n    {\n        $this->answer = OpenAI::ask($this->question, function ($partial) {\n            $this->stream(to: 'answer', content: $partial); // [tl! highlight]\n        });\n    }\n\n    public function render()\n    {\n        return <<<'HTML'\n        <div>\n            <section>\n                <div>ChatBot</div>\n\n                @if ($question)\n                    <article>\n                        <hgroup>\n                            <h3>User</h3>\n                            <p>{{ $question }}</p>\n                        </hgroup>\n\n                        <hgroup>\n                            <h3>ChatBot</h3>\n                            <p wire:stream=\"answer\">{{ $answer }}</p> <!-- [tl! highlight] -->\n                        </hgroup>\n                    </article>\n                @endif\n            </section>\n\n            <form wire:submit=\"submitPrompt\">\n                <input wire:model=\"prompt\" type=\"text\" placeholder=\"Send a message\" autofocus>\n            </form>\n        </div>\n        HTML;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading External Assets in Livewire\nDESCRIPTION: Demonstrates loading external JavaScript and CSS assets with Pikaday date picker initialization\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_31\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <input type=\"text\" data-picker>\n</div>\n\n@assets\n<script src=\"https://cdn.jsdelivr.net/npm/pikaday/pikaday.js\" defer></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css\">\n@endassets\n\n@script\n<script>\n    new Pikaday({ field: $wire.$el.querySelector('[data-picker]') });\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Mount Method with Parameter Injection in PHP\nDESCRIPTION: Demonstrates mount() method receiving data through dependency injection, initializing title and content from a Post model.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass UpdatePost extends Component\n{\n    public $title;\n\n    public $content;\n\n    public function mount(Post $post)\n    {\n        $this->title = $post->title;\n\n        $this->content = $post->content;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Livewire with model properties\nDESCRIPTION: A secure implementation that stores the entire Post model as a property instead of just the ID. This prevents tampering because Livewire ensures model integrity across requests.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public function mount($postId)\n    {\n        $this->post = Post::find($postId);\n    }\n\n    public function delete()\n    {\n        $this->post->delete();\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<button wire:click=\"delete\">Delete Post</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Updates with wire:model.live Modifier\nDESCRIPTION: Example of using the .live modifier with wire:model to send property updates to the server as a user types into an input field, instead of waiting for an action to be performed.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" wire:model.live=\"title\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Scroll Behavior in Livewire Pagination (Blade)\nDESCRIPTION: Shows how to customize scroll behavior after page changes by passing parameters to the links() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n{{ $posts->links(data: ['scrollTo' => false]) }}\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component with Authenticated User\nDESCRIPTION: Test a Livewire component's behavior with an authenticated user using the actingAs() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\ShowPosts;\nuse Livewire\\Livewire;\nuse App\\Models\\User;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass ShowPostsTest extends TestCase\n{\n    public function test_user_only_sees_their_own_posts()\n    {\n        $user = User::factory()\n            ->has(Post::factory()->count(3))\n            ->create();\n\n        $stranger = User::factory()\n            ->has(Post::factory()->count(2))\n            ->create();\n\n        Livewire::actingAs($user)\n            ->test(ShowPosts::class)\n            ->assertViewHas('posts', function ($posts) {\n                return count($posts) == 3;\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Livewire Methods from AlpineJS\nDESCRIPTION: An example of passing a post ID parameter to a Livewire method from AlpineJS. This demonstrates how to call Livewire methods with arguments using the $wire object.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" x-on:click=\"$wire.deletePost(1)\">\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoList Parent Component with Modelable Child\nDESCRIPTION: A TodoList component that demonstrates parent-child data binding using wire:model and the Modelable feature. Handles todo creation and listing functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Todo;\n\nclass TodoList extends Component\n{\n    public $todo = '';\n\n    public function add()\n    {\n        Todo::create([\n            'content' => $this->pull('todo'),\n        ]);\n    }\n\n    public function render()\n    {\n        return view('livewire.todo-list', [\n            'todos' => Auth::user()->todos,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Preview in Livewire Component (PHP)\nDESCRIPTION: A Livewire component that handles file upload with image preview functionality. It uses the WithFileUploads trait and includes validation for the uploaded image.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Livewire\\WithFileUploads;\nuse Livewire\\Attributes\\Validate;\n\nclass UploadPhoto extends Component\n{\n    use WithFileUploads;\n\n    #[Validate('image|max:1024')]\n    public $photo;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Events in Livewire Components\nDESCRIPTION: Examples of testing event dispatching and handling between Livewire components using assertDispatched() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\PostCountBadge;\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass PostCountBadgeTest extends TestCase\n{\n    public function test_post_count_is_updated_when_event_is_dispatched()\n    {\n        $badge = Livewire::test(PostCountBadge::class)\n            ->assertSee(\"0\");\n\n        Livewire::test(CreatePost::class)\n            ->set('title', 'Tear-free: the greatest lie ever told')\n            ->set('content', '...')\n            ->call('save')\n            ->assertDispatched('post-created');\n\n        $badge->dispatch('post-created')\n            ->assertSee(\"1\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Object Implementation\nDESCRIPTION: Demonstrates how to extract form logic into a separate Form class for better code organization and reusability.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:form PostForm\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire\\Forms;\n\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Form;\n\nclass PostForm extends Form\n{\n    #[Validate('required|min:5')]\n    public $title = '';\n\n    #[Validate('required|min:5')]\n    public $content = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Redirect in Livewire Component\nDESCRIPTION: A complete Livewire component example that creates a new post and redirects the user to the posts page after successful submission.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n\tpublic $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n\t\tPost::create([\n\t\t\t'title' => $this->title,\n\t\t\t'content' => $this->content,\n\t\t]);\n\n\t\t$this->redirect('/posts'); // [tl! highlight]\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Property Updates with Loading Indicators in Livewire\nDESCRIPTION: Shows how to make loading indicators respond to specific property updates. This example displays a message while checking username availability in real-time.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model.live=\"username\">\n    @error('username') <span>{{ $message }}</span> @enderror\n\n    <div wire:loading wire:target=\"username\"> <!-- [tl! highlight:2] -->\n        Checking availability of username...\n    </div>\n\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing wire:navigate in Blade Navigation Links\nDESCRIPTION: This snippet demonstrates how to add the wire:navigate directive to navigation links in a Blade template. When these links are clicked, Livewire intercepts the click and fetches the page in the background, resulting in faster and smoother navigation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-navigate.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/\" wire:navigate>Dashboard</a>\n    <a href=\"/posts\" wire:navigate>Posts</a>\n    <a href=\"/users\" wire:navigate>Users</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Livewire Components\nDESCRIPTION: Inline components contain their view template directly in the render() method instead of in a separate file. This is useful for smaller components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n\tpublic function render()\n\t{\n\t\treturn <<<'HTML'\n\t\t<div>\n\t\t    {{-- Your Blade template goes here... --}}\n\t\t</div>\n\t\tHTML;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Validation with Form Objects in Livewire\nDESCRIPTION: Shows how to manually validate a form object by calling its validate() method, which returns the validated data that can be used directly for database operations.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function save()\n{\n    Post::create(\n        $this->form->validate()\n    );\n\n    return redirect()->to('/posts');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Validation Rules with Array Syntax in Livewire\nDESCRIPTION: This snippet demonstrates how to use the #[Validate] attribute's array syntax to specify custom attributes and messages for more complex validation scenarios, including array validation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\n\n#[Validate([\n    'titles' => 'required',\n    'titles.*' => 'required|min:5',\n], message: [\n    'required' => 'The :attribute is missing.',\n    'titles.required' => 'The :attribute are missing.',\n    'min' => 'The :attribute is too short.',\n], attribute: [\n    'titles.*' => 'title',\n])]\npublic $titles = [];\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Livewire Actions\nDESCRIPTION: Example of using Laravel's dependency injection in Livewire component actions by type-hinting parameters.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Repositories\\PostRepository;\n\nclass ShowPosts extends Component\n{\n    public function delete(PostRepository $posts, $postId)\n    {\n        $posts->deletePost($postId);\n    }\n\n    public function render()\n    {\n        return view('livewire.show-posts', [\n            'posts' => Auth::user()->posts,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Form Saving in Livewire Component\nDESCRIPTION: This PHP snippet shows how to implement real-time form saving using Livewire's updated() hook. It automatically saves the form as the user fills it out, without waiting for a submit action.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass UpdatePost extends Component\n{\n    public Post $post;\n\n    #[Validate('required')]\n    public $title = '';\n\n    #[Validate('required')]\n    public $content = '';\n\n    public function mount(Post $post)\n    {\n        $this->post = $post;\n        $this->title = $post->title;\n        $this->content = $post->content;\n    }\n\n    public function updated($name, $value)\n    {\n        $this->post->update([\n            $name => $value,\n        ]);\n    }\n\n    public function render()\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Value Assertions in Livewire Tests\nDESCRIPTION: Methods for asserting property values and states in Livewire components. Includes basic equality checks, strict comparisons, and snapshot testing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nassertSet('title', '...')\nassertNotSet('title', '...')\nassertSetStrict('title', '...')\nassertNotSetStrict('title', '...')\nassertCount('posts', 3)\nassertSnapshotSet('date', '08/26/1990')\nassertSnapshotNotSet('date', '08/26/1990')\n```\n\n----------------------------------------\n\nTITLE: Hydrate and Dehydrate Lifecycle Implementation\nDESCRIPTION: Complete example showing the use of mount(), hydrate(), and dehydrate() hooks for managing custom data transfer objects.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public $post;\n\n    public function mount($title, $content)\n    {\n        // Runs at the beginning of the first initial request...\n\n        $this->post = new PostDto([\n            'title' => $title,\n            'content' => $content,\n        ]);\n    }\n\n    public function hydrate()\n    {\n        // Runs at the beginning of every \"subsequent\" request...\n        // This doesn't run on the initial request (\"mount\" does)...\n\n        $this->post = new PostDto($this->post);\n    }\n\n    public function dehydrate()\n    {\n        // Runs at the end of every single request...\n\n        $this->post = $this->post->toArray();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Object for Livewire Validation\nDESCRIPTION: Defines a dedicated Form class that extends Livewire\\Form to encapsulate properties and validation rules, keeping the component cleaner and enabling code reuse.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire\\Forms;\n\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Form;\n\nclass PostForm extends Form\n{\n    #[Validate('required|min:3')]\n\tpublic $title = '';\n\n    #[Validate('required|min:3')]\n    public $content = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entangled Dropdown UI with Livewire and Alpine.js in Blade\nDESCRIPTION: This Blade template creates a dropdown UI using Alpine.js, with its state entangled with a Livewire component. It demonstrates how to use $wire.entangle to sync state between Livewire and Alpine.js.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ open: $wire.entangle('showDropdown') }\">\n    <button x-on:click=\"open = true\">Show More...</button>\n\n    <ul x-show=\"open\" x-on:click.outside=\"open = false\">\n        <li><button wire:click=\"archive\">Archive</button></li>\n\n        <li><button wire:click=\"delete\">Delete</button></li>\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using wire:click on Anchor Tags with Prevent Modifier in HTML\nDESCRIPTION: An HTML example demonstrating how to use wire:click on an anchor tag with the prevent modifier to stop default browser navigation behavior when triggering a Livewire action.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-click.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\" wire:click.prevent=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of #[Session] Attribute in a Livewire Component\nDESCRIPTION: A ShowPosts component that demonstrates how to use the #[Session] attribute to persist a search filter across page refreshes. The component queries posts based on the search value and renders them in a view.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/session-properties.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Livewire\\Attributes\\Session;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    #[Session] // [tl! highlight]\n    public $search;\n\n    protected function posts()\n    {\n        return $this->search === ''\n            ? Post::all()\n            : Post::where('title', 'like', '%'.$this->search.'%');\n    }\n\n    public function render()\n    {\n        return view('livewire.show-posts', [\n            'posts' => $this->posts(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Debounce Time with wire:model.live.debounce\nDESCRIPTION: Example showing how to customize the debounce timing for live updates to 250 milliseconds, which controls how long Livewire waits after typing stops before sending a request.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" wire:model.live.debounce.250ms=\"title\">\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Livewire Components\nDESCRIPTION: Use namespace syntax or dot-notation to create components in sub-directories. This helps organize components in larger applications.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:livewire Posts\\\\CreatePost\nphp artisan make:livewire posts.create-post\n```\n\n----------------------------------------\n\nTITLE: Interacting with Livewire Components in PHP Tests\nDESCRIPTION: These methods are used to interact with Livewire components during testing. They include setting property values, toggling boolean properties, calling component methods, refreshing the component, and dispatching events.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nset('title', '...')\n```\n\nLANGUAGE: php\nCODE:\n```\nset(['title' => '...', ...])\n```\n\nLANGUAGE: php\nCODE:\n```\ntoggle('sortAsc')\n```\n\nLANGUAGE: php\nCODE:\n```\ncall('save')\n```\n\nLANGUAGE: php\nCODE:\n```\ncall('remove', $post->id)\n```\n\nLANGUAGE: php\nCODE:\n```\nrefresh()\n```\n\nLANGUAGE: php\nCODE:\n```\ndispatch('post-created')\n```\n\nLANGUAGE: php\nCODE:\n```\ndispatch('post-created', postId: $post->id)\n```\n\n----------------------------------------\n\nTITLE: Image Preview in Livewire Component Form (Blade)\nDESCRIPTION: A Blade template for file upload with image preview in a Livewire component. It includes conditional rendering of the image preview, file input, error handling, and a submit button.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    @if ($photo)\n        <img src=\"{{ $photo->temporaryUrl() }}\">\n    @endif\n\n    <input type=\"file\" wire:model=\"photo\">\n\n    @error('photo') <span class=\"error\">{{ $message }}</span> @enderror\n\n    <button type=\"submit\">Save photo</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Passing Data from Parent to Child Component in PHP\nDESCRIPTION: A TodoList parent component that fetches todos and passes them to a child component. This example shows how to prepare data in the parent component's render method to be passed to children.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\n\nclass TodoList extends Component\n{\n    public function render()\n    {\n        return view('livewire.todo-list', [\n            'todos' => Auth::user()->todos,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Event Parameters to Parent Methods in Blade\nDESCRIPTION: Demonstrates how to forward parameters from a child component's event to a method in the parent component. The example shows passing a postId parameter to the parent's close method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:edit-post @saved=\"close($event.detail.postId)\">\n```\n\n----------------------------------------\n\nTITLE: Testing Volt Components\nDESCRIPTION: Examples of testing Volt components using the testing API, including regular and nested components\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Volt\\Volt;\n\nit('increments the counter', function () {\n    Volt::test('counter')\n        ->assertSee('0')\n        ->call('increment')\n        ->assertSee('1');\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing Additional Data with Livewire Views\nDESCRIPTION: Use the with() method to pass extra data to the component's view without storing it as a property. Useful for data that doesn't need reactive behavior.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public $title;\n\n    public function render()\n    {\n        return view('livewire.create-post')->with([\n\t        'author' => Auth::user()->name,\n\t    ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Select Dropdowns with Livewire in Blade\nDESCRIPTION: This snippet demonstrates how to create two select menus where the second (cities) depends on the first (states). It uses wire:model.live for real-time updates and includes a crucial wire:key directive on the dependent select to ensure proper value resetting.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<!-- States select menu... -->\n<select wire:model.live=\"selectedState\">\n    @foreach (State::all() as $state)\n        <option value=\"{{ $state->id }}\">{{ $state->label }}</option>\n    @endforeach\n</select>\n\n<!-- Cities dependent select menu... -->\n<select wire:model.live=\"selectedCity\" wire:key=\"{{ $selectedState }}\"> <!-- [tl! highlight] -->\n    @foreach (City::whereStateId($selectedState->id)->get() as $city)\n        <option value=\"{{ $city->id }}\">{{ $city->label }}</option>\n    @endforeach\n</select>\n```\n\n----------------------------------------\n\nTITLE: Binding Dynamic Select Dropdown with wire:model\nDESCRIPTION: Example of binding a select dropdown with dynamically generated options from a database query, common for data-driven applications.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<select wire:model=\"state\">\n    @foreach (\\App\\Models\\State::all() as $state)\n        <option value=\"{{ $state->id }}\">{{ $state->label }}</option>\n    @endforeach\n</select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File Download Component in PHP\nDESCRIPTION: Shows how to create a Livewire component for downloading invoice PDFs. Demonstrates component setup with mount method and download functionality using Laravel's response helper.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/downloads.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Invoice;\n\nclass ShowInvoice extends Component\n{\n    public Invoice $invoice;\n\n    public function mount(Invoice $invoice)\n    {\n        $this->invoice = $invoice;\n    }\n\n    public function download()\n    {\n        return response()->download(\n            $this->invoice->file_path, 'invoice.pdf'\n        );\n    }\n\n    public function render()\n    {\n        return view('livewire.show-invoice');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Paginators in Livewire Component (PHP)\nDESCRIPTION: Demonstrates how to use multiple paginators in a single Livewire component by specifying different page names.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\WithPagination;\nuse Livewire\\Component;\nuse App\\Models\\Invoices;\n\nclass ShowInvoices extends Component\n{\n    use WithPagination;\n\n    public function render()\n    {\n        return view('show-invoices', [\n            'invoices' => Invoice::paginate(10, pageName: 'invoices-page'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @teleport in Livewire\nDESCRIPTION: Example showing how to use the @teleport directive to render a modal dialog's contents at the end of the body element. This allows modal content to escape nested component structures, avoiding z-index inheritance issues.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/teleport.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <!-- Modal -->\n    <div x-data=\"{ open: false }\">\n        <button @click=\"open = ! open\">Toggle Modal</button>\n\n        @teleport('body')\n            <div x-show=\"open\">\n                Modal contents...\n            </div>\n        @endteleport\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Parameters with Events in JavaScript\nDESCRIPTION: Demonstrates how to pass additional parameters when dispatching events from JavaScript. The example shows dispatching a 'post-created' event with a refreshPosts parameter.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n@script\n<script>\n    $wire.dispatch('post-created', { refreshPosts: true });\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Attribute Names in Livewire\nDESCRIPTION: This snippet demonstrates how to customize the attribute name used in validation error messages using the 'as:' parameter in the #[Validate] attribute.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\n\n#[Validate('required', as: 'date of birth')]\npublic $dob = '';\n```\n\n----------------------------------------\n\nTITLE: Key Event Handling in Search Input\nDESCRIPTION: Example of handling specific key events in a search input using Livewire's key modifiers.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<input wire:model=\"query\" wire:keydown.enter=\"searchPosts\">\n```\n\n----------------------------------------\n\nTITLE: Multiple Custom Validation Messages for Different Rules\nDESCRIPTION: Demonstrates how to set different custom validation messages for different validation rules by using multiple #[Validate] attributes on the same property.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#[Validate('required', message: 'Please provide a post title')]\n#[Validate('min:3', message: 'This title is too short')]\npublic $title;\n```\n\n----------------------------------------\n\nTITLE: Optimized Computed Property Implementation\nDESCRIPTION: Implementation of a computed property for posts that only executes the database query when needed.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Computed;\nuse App\\Models\\Post;\n\n#[Computed]\npublic function posts()\n{\n    return Post::all();\n}\n\npublic function render()\n{\n    return view('livewire.show-posts');\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a Named Route in Livewire\nDESCRIPTION: Examples of using redirectRoute() method to redirect to a named route in Livewire, with optional parameter passing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    $this->redirectRoute('profile');\n```\n\nLANGUAGE: php\nCODE:\n```\n    $this->redirectRoute('profile', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Basic Script Execution in Livewire Component\nDESCRIPTION: Example of using @script directive to execute JavaScript within a Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    ...\n</div>\n\n@script\n<script>\n    // This Javascript will get executed every time this component is loaded onto the page...\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Reusable Input Text Component\nDESCRIPTION: Implementation of a reusable input text component with validation support and attribute forwarding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/views/components/input-text.blade.php -->\n\n@props(['name'])\n\n<input type=\"text\" name=\"{{ $name }}\" {{ $attributes }}>\n\n<div>\n    @error($name) <span class=\"error\">{{ $message }}</span> @enderror\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Component with Mount Method in PHP\nDESCRIPTION: Example showing how to initialize component properties using the mount() method to set name and email from authenticated user.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\n\nclass UpdateProfile extends Component\n{\n    public $name;\n\n    public $email;\n\n    public function mount()\n    {\n        $this->name = Auth::user()->name;\n\n        $this->email = Auth::user()->email;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Asset Injection with Pikaday\nDESCRIPTION: Example of injecting JavaScript and CSS assets for Pikaday date picker implementation. Uses UUID for unique element identification and demonstrates proper asset loading with @assets and @script directives.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/blade-components.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n@php $key = str()->uuid(); @endphp\n\n<div>\n    <input type=\"text\" id=\"{{ $key }}\">\n</div>\n\n@assets\n<script src=\"https://cdn.jsdelivr.net/npm/pikaday/pikaday.js\" defer></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css\">\n@endassets\n\n@script\n<script>\n    new Pikaday({ field: document.getElementById('{{ $key }}') });\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Forcing Child Component Re-render with Dynamic Key in Blade\nDESCRIPTION: This snippet demonstrates how to force a child Livewire component to re-render by using a dynamic key. The key is generated based on the content of the $todos collection, ensuring the component is re-initialized when the todos change.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <livewire:todo-count :todos=\"$todos\" :key=\"$todos->pluck('id')->join('-')\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Validating Array Properties with Custom Keys\nDESCRIPTION: Demonstrates how to validate both an array property and its individual elements by providing an array of key-value pairs to the #[Validate] attribute instead of a simple rule string.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n#[Validate([\n    'todos' => 'required',\n    'todos.*' => [\n        'required',\n        'min:3',\n        new Uppercase,\n    ],\n])]\npublic $todos = [];\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload Form in Livewire Component (Blade)\nDESCRIPTION: A Blade template for multiple file uploads in a Livewire component. It includes an input for multiple file selection, error handling, and a submit button.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"file\" wire:model=\"photos\" multiple>\n\n    @error('photos.*') <span class=\"error\">{{ $message }}</span> @enderror\n\n    <button type=\"submit\">Save photo</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Registering Livewire Component Hook in Service Provider\nDESCRIPTION: Shows how to register a Component Hook within a Laravel service provider, specifically in the AppServiceProvider boot method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/component-hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Livewire\\Livewire;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Livewire::componentHook(MyComponentHook::class);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Form with Component Extraction\nDESCRIPTION: Simplified form template using extracted reusable input components, showing cleaner and more maintainable code structure.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <x-input-text name=\"title\" wire:model=\"title\" />\n\n    <x-input-text name=\"content\" wire:model=\"content\" />\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Error Messages in Livewire\nDESCRIPTION: This code shows how to customize the entire validation error message using the 'message:' parameter in the #[Validate] attribute. It also demonstrates how to customize messages for multiple rules.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\n\n#[Validate('required', message: 'Please fill out your date of birth.')]\npublic $dob = '';\n\n#[Validate('required', message: 'Please enter a title.')]\n#[Validate('min:5', message: 'Your title is too short.')]\npublic $title = '';\n```\n\n----------------------------------------\n\nTITLE: Using Url Attribute for Query String Persistence (PHP)\nDESCRIPTION: This snippet shows how to use the #[Url] attribute to persist the search value in the URL's query string, allowing for page refresh and URL sharing functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\nuse App\\Models\\User;\n\nclass ShowUsers extends Component\n{\n    #[Url] // [tl! highlight]\n    public $search = '';\n\n    public function render()\n    {\n        return view('livewire.show-users', [\n            'posts' => User::search($this->search)->get(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Throttling in Livewire\nDESCRIPTION: Shows how to implement throttling on input fields to control the frequency of network requests during user typing. Uses a 150ms throttle interval.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"text\" wire:model.live.throttle.150ms=\"title\" >\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Form Template with wire:model Binding\nDESCRIPTION: A Blade template showing how to bind component properties to form inputs using wire:model. The form includes text input and textarea fields bound to title and content properties.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <label>\n        <span>Title</span>\n\n        <input type=\"text\" wire:model=\"title\"> <!-- [tl! highlight] -->\n    </label>\n\n    <label>\n        <span>Content</span>\n\n        <textarea wire:model=\"content\"></textarea> <!-- [tl! highlight] -->\n    </label>\n\n\t<button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using wire:cloak with Dynamic Content and wire:show\nDESCRIPTION: Demonstrates how to use wire:cloak in conjunction with wire:show to prevent users from seeing uninitialized dynamic content like toggle states.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-cloak.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <div wire:show=\"starred\" wire:cloak>\n        <!-- Yellow star icon... -->\n    </div>\n\n    <div wire:show=\"!starred\" wire:cloak>\n        <!-- Gray star icon... -->\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Loading State\nDESCRIPTION: Shows how to implement a form submission with automatic input disabling and loading state handling using wire:submit and wire:loading directives.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <textarea wire:model=\"content\"></textarea>\n\n    <button type=\"submit\">Save</button>\n\n    <span wire:loading>Saving...</span>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Resetting Page and Implementing Search in Livewire Component (PHP)\nDESCRIPTION: Demonstrates how to reset the page number and implement a search feature in a Livewire component with pagination.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\WithPagination;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass SearchPosts extends Component\n{\n    use WithPagination;\n\n    public $query = '';\n\n    public function search()\n    {\n        $this->resetPage();\n    }\n\n    public function render()\n    {\n        return view('show-posts', [\n            'posts' => Post::where('title', 'like', '%'.$this->query.'%')->paginate(10),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Checkboxes to an Array Property\nDESCRIPTION: Example showing how to bind multiple checkboxes to a single array property, allowing users to select multiple values that will be stored in the array.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"checkbox\" value=\"email\" wire:model=\"updateTypes\">\n<input type=\"checkbox\" value=\"sms\" wire:model=\"updateTypes\">\n<input type=\"checkbox\" value=\"notification\" wire:model=\"updateTypes\">\n```\n\n----------------------------------------\n\nTITLE: Basic Confirmation Dialog in Livewire\nDESCRIPTION: Shows how to add a basic confirmation dialog to a delete button using wire:confirm. When clicked, it triggers a browser confirmation alert before executing the delete action.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-confirm.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<button\n    type=\"button\"\n    wire:click=\"delete\"\n    wire:confirm=\"Are you sure you want to delete this post?\"\n>\n    Delete post\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Countdown Component with Livewire Streaming in PHP\nDESCRIPTION: This snippet demonstrates a basic CountDown component using Livewire's wire:stream API. It streams a countdown from 3 to 0, updating the browser every second while a single network request is ongoing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-stream.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CountDown extends Component\n{\n    public $start = 3;\n\n    public function begin()\n    {\n        while ($this->start >= 0) {\n            // Stream the current count to the browser...\n            $this->stream(  // [tl! highlight:4]\n                to: 'count',\n                content: $this->start,\n                replace: true,\n            );\n\n            // Pause for 1 second between numbers...\n            sleep(1);\n\n            // Decrement the counter...\n            $this->start = $this->start - 1;\n        };\n    }\n\n    public function render()\n    {\n        return <<<'HTML'\n        <div>\n            <button wire:click=\"begin\">Start count-down</button>\n\n            <h1>Count: <span wire:stream=\"count\">{{ $start }}</span></h1> <!-- [tl! highlight] -->\n        </div>\n        HTML;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline Detection with wire:offline Directive in Blade\nDESCRIPTION: This snippet demonstrates how to use the wire:offline directive in a Blade template to display an alert when the user's device loses internet connection. The element will be hidden by default and only appear when Livewire detects that the network connection is unavailable.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-offline.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<p class=\"alert alert-warning\" wire:offline>\n    Whoops, your device has lost connection. The web page you are viewing is offline.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Listening for Livewire Events in Component Scripts\nDESCRIPTION: Shows how to listen for Livewire events using JavaScript within a component's @script directive. The example demonstrates listening for the 'post-created' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n@script\n<script>\n    $wire.on('post-created', () => {\n        //\n    });\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: JavaScript Navigation Event Listeners for Livewire\nDESCRIPTION: Registering event listeners for Livewire's navigation lifecycle hooks. These hooks allow custom code execution during different phases of page navigation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('livewire:navigate', (event) => {\n    // Triggers when a navigation is triggered.\n\n    // Can be \"cancelled\" (prevent the navigate from actually being performed):\n    event.preventDefault()\n\n    // Contains helpful context about the navigation trigger:\n    let context = event.detail\n\n    // A URL object of the intended destination of the navigation...\n    context.url\n\n    // A boolean [true/false] indicating whether or not this navigation\n    // was triggered by a back/forward (history state) navigation...\n    context.history\n\n    // A boolean [true/false] indicating whether or not there is\n    // cached version of this page to be used instead of\n    // fetching a new one via a network round-trip...\n    context.cached\n})\n\ndocument.addEventListener('livewire:navigating', () => {\n    // Triggered when new HTML is about to swapped onto the page...\n\n    // This is a good place to mutate any HTML before the page\n    // is navigated away from...\n})\n\ndocument.addEventListener('livewire:navigated', () => {\n    // Triggered as the final step of any page navigation...\n\n    // Also triggered on page-load instead of \"DOMContentLoaded\"...\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Child Component in Blade Template\nDESCRIPTION: The Blade template for a TodoList component that passes the todos data to a TodoCount child component. This shows the syntax for passing dynamic data from parent to child components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <livewire:todo-count :todos=\"$todos\" />\n\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Receiving Data in Livewire Component Class\nDESCRIPTION: Demonstrates how to receive and process data passed to a Livewire component using the mount() method. It also shows an alternative approach without using mount().\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public $title;\n\n    public function mount($title = null)\n    {\n        $this->title = $title;\n    }\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public $title;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Select Dropdowns with Livewire in Blade\nDESCRIPTION: This snippet shows how to create a multi-select dropdown using Livewire. The selected states are added to or removed from the $states array property based on user selection. It uses the 'multiple' attribute on the select element.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<select wire:model=\"states\" multiple>\n    <option value=\"AL\">Alabama</option>\n    <option value=\"AK\">Alaska</option>\n    <option value=\"AZ\">Arizona</option>\n    ...\n</select>\n```\n\n----------------------------------------\n\nTITLE: Basic Loading Indicator Implementation in Livewire\nDESCRIPTION: Shows how to implement a basic loading indicator in a form using wire:loading directive. The \"Saving post...\" message appears while the form is being submitted.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <!-- ... -->\n\n    <button type=\"submit\">Save</button>\n\n    <div wire:loading> <!-- [tl! highlight:2] -->\n        Saving post...\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Listening for Events from Child Components in Blade Templates\nDESCRIPTION: Demonstrates how to listen for events directly from child components in a Blade template. The example shows how to refresh the parent component when a child component dispatches a 'saved' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <livewire:edit-post @saved=\"$refresh\">\n\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Eloquent Model Properties in PHP Livewire Component\nDESCRIPTION: This snippet shows a better approach for most cases where instead of storing just the model's ID and locking it, you store the entire Eloquent model in a public property. Livewire automatically ensures the model ID isn't tampered with in this approach.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/locked.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ShowPost extends Component\n{\n   public Post $post; // [tl! highlight]\n\n   public function mount($postId)\n   {\n       $this->post = Post::find($postId);\n   }\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dirty State Indication in Livewire Form\nDESCRIPTION: This snippet demonstrates how to use the wire:dirty directive to show an 'Unsaved changes' message when the form state diverges from the server state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-dirty.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"update\">\n    <input type=\"text\" wire:model=\"title\">\n\n    <!-- ... -->\n\n    <button type=\"submit\">Update</button>\n\n    <div wire:dirty>Unsaved changes...</div> <!-- [tl! highlight] -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: File Upload Form in Livewire Component (Blade)\nDESCRIPTION: A Blade template for the file upload form in a Livewire component. It includes an input for file selection, error handling, and a submit button.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"file\" wire:model=\"photo\">\n\n    @error('photo') <span class=\"error\">{{ $message }}</span> @enderror\n\n    <button type=\"submit\">Save photo</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Validate Attributes with Livewire Component\nDESCRIPTION: A Livewire component using the #[Validate] attribute to co-locate validation rules with component properties. This approach automatically runs validation rules before each property update.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    #[Validate('required|min:3')] // [tl! highlight]\n\tpublic $title = '';\n\n    #[Validate('required|min:3')] // [tl! highlight]\n    public $content = '';\n\n    public function save()\n    {\n        $this->validate();\n\n\t\tPost::create([\n            'title' => $this->title,\n            'content' => $this->content,\n\t\t]);\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using wire:replace.self with Alpine.js in Blade Templates\nDESCRIPTION: This example shows how to use wire:replace.self modifier to replace both the target element and all its children, ensuring that internal state (like the Alpine.js 'open' variable) is reset on each render.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-replace.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{open: false}\" wire:replace.self>\n  <!-- Ensure that the \"open\" state is reset to false on each render -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complete Livewire component with route-level authorization\nDESCRIPTION: A complete example of a Livewire component for updating posts that relies on route-level authorization middleware. This ensures users must have authorization to update the post for both initial page load and subsequent Livewire requests.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\nuse Livewire\\Attributes\\Validate;\n\nclass UpdatePost extends Component\n{\n    public Post $post;\n\n    #[Validate('required|min:5')]\n    public $title = '';\n\n    public $content = '';\n\n    public function mount()\n    {\n        $this->title = $this->post->title;\n        $this->content = $this->post->content;\n    }\n\n    public function update()\n    {\n        $this->post->update([\n            'title' => $this->title,\n            'content' => $this->content,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SubscriberCount Component in PHP for Livewire Polling\nDESCRIPTION: A PHP class that defines a Livewire component to display a user's subscriber count. The component renders a view with the current subscriber count for the authenticated user.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-poll.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\n\nclass SubscriberCount extends Component\n{\n    public function render()\n    {\n        return view('livewire.subscriber-count', [\n            'count' => Auth::user()->subscribers->count(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Input Component Definition\nDESCRIPTION: Component template for a reusable form input that accepts label and error props. Includes dynamic wire directive handling through attribute forwarding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/blade-components.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@props(['label', 'error'])\n\n<label>\n    <span>{{ $label }}</span>\n\n    <input type=\"text\" {{ $attributes->whereStartsWith('wire:') }}>\n\n    @if($error) <span>{{ $error }}</span> @endif\n</label>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Dynamic Event Names in Livewire\nDESCRIPTION: Demonstrates how to create dynamic event names using model IDs. The example shows how to dispatch an event specific to a particular post by including the post ID in the event name.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass UpdatePost extends Component\n{\n    public function update()\n    {\n        // ...\n\n        $this->dispatch(\"post-updated.{$post->id}\"); // [tl! highlight]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewport-based Polling in Blade Template\nDESCRIPTION: This snippet shows how to use the visible modifier with wire:poll to only poll when the component is visible in the viewport, reducing unnecessary server requests.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/polling.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll.visible>\n```\n\n----------------------------------------\n\nTITLE: Streaming Download Implementation in PHP\nDESCRIPTION: Shows how to implement streaming downloads in Livewire using Laravel's streamDownload response method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/downloads.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function download()\n{\n    return response()->streamDownload(function () {\n        echo '...'; // Echo download contents directly...\n    }, 'invoice.pdf');\n}\n```\n\n----------------------------------------\n\nTITLE: Including Livewire Component in Blade View\nDESCRIPTION: Demonstrates how to include a Livewire component within a Blade template using the <livewire:component-name /> syntax. It also shows how to reference nested components using dot notation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:create-post />\n```\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:editor-posts.create-post />\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Validation Errors in Livewire Component\nDESCRIPTION: This snippet shows how to manually add validation errors in a Livewire component by intercepting the internal validator. It demonstrates adding a custom validation rule to check if a title starts with quotations.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    #[Validate('required|min:3')]\n\tpublic $title = '';\n\n    #[Validate('required|min:3')]\n    public $content = '';\n\n    public function boot()\n    {\n        $this->withValidator(function ($validator) {\n            $validator->after(function ($validator) {\n                if (str($this->title)->startsWith('\"')) {\n                    $validator->errors()->add('title', 'Titles cannot start with quotations');\n                }\n            });\n        });\n    }\n\n    public function save()\n    {\n\t\tPost::create($this->all());\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validator in Livewire Component\nDESCRIPTION: Example of the CreatePost component using Laravel's Validator facade instead of Livewire's built-in validation. The component validates title and content fields before creating a new post record.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Validator;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n\tpublic $title = '';\n\n    public $content = '';\n\n    public function save()\n    {\n        $validated = Validator::make(\n            // Data to validate...\n            ['title' => $this->title, 'content' => $this->content],\n\n            // Validation rules to apply...\n            ['title' => 'required|min:3', 'content' => 'required|min:3'],\n\n            // Custom validation messages...\n            ['required' => 'The :attribute field is required'],\n         )->validate();\n\n\t\tPost::create($validated);\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Classes During Loading in Livewire\nDESCRIPTION: Shows how to toggle CSS classes during server requests by adding the .class modifier to the wire:loading directive. This example applies opacity-50 class to fade a button during submission.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:loading.class=\"opacity-50\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Props in Child Component\nDESCRIPTION: A TodoCount component using the #[Reactive] attribute to make the todos prop reactive to changes in the parent component. This allows the child component to automatically update when the parent's data changes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Reactive;\nuse Livewire\\Component;\nuse App\\Models\\Todo;\n\nclass TodoCount extends Component\n{\n    #[Reactive] // [tl! highlight]\n    public $todos;\n\n    public function render()\n    {\n        return view('livewire.todo-count', [\n            'count' => $this->todos->count(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Update Prevention Using Updating Hook\nDESCRIPTION: Example of using the updating() hook to prevent modification of specific properties through validation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Exception;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public $postId = 1;\n\n    public function updating($property, $value)\n    {\n        // $property: The name of the current property being updated\n        // $value: The value about to be set to the property\n\n        if ($property === 'postId') {\n            throw new Exception;\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Components in a Loop with Keys\nDESCRIPTION: A Blade template demonstrating how to render multiple child components in a loop with unique keys. This is essential for proper component tracking and updating when items are reordered.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>Todos</h1>\n\n    @foreach ($todos as $todo)\n        <livewire:todo-item :$todo :key=\"$todo->id\" />\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Livewire's Built-in Persist Parameter for Computed Properties\nDESCRIPTION: This example shows how to use the persist parameter with the #[Computed] attribute to automatically cache the computed property for the lifespan of the component without manual caching code.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Computed;\nuse App\\Models\\User;\n\n#[Computed(persist: true)]\npublic function user()\n{\n    return User::find($this->userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events in Livewire Components\nDESCRIPTION: Demonstrates how to listen for custom events dispatched from Alpine.js within Livewire components using wire:custom-event directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:custom-event=\"...\">\n\n    <!-- Deeply nested within this component: -->\n    <button x-on:click=\"$dispatch('custom-event')\">...</button>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Form with Pagination in Blade Template (Blade)\nDESCRIPTION: Shows how to create a search form and display paginated results in a Blade template using Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <form wire:submit=\"search\">\n        <input type=\"text\" wire:model=\"query\">\n\n        <button type=\"submit\">Search posts</button>\n    </form>\n\n    <div>\n        @foreach ($posts as $post)\n            <!-- ... -->\n        @endforeach\n    </div>\n\n    {{ $posts->links() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component for File Upload Testing (PHP)\nDESCRIPTION: A Livewire component used in the file upload test. It includes the WithFileUploads trait and a method for uploading the file to a specific disk and path.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Livewire\\WithFileUploads;\n\nclass UploadPhoto extends Component\n{\n    use WithFileUploads;\n\n    public $photo;\n\n    public function upload($name)\n    {\n        $this->photo->storeAs('/', $name, disk: 'avatars');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Alpine Component Event Handling\nDESCRIPTION: Example of managing Livewire event listeners in Alpine.js components with proper cleanup.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAlpine.data('MyComponent', () => ({\n    listeners: [],\n    init() {\n        this.listeners.push(\n            Livewire.on('post-created', (options) => {\n                // Do something...\n            })\n        );\n    },\n    destroy() {\n        this.listeners.forEach((listener) => {\n            listener();\n        });\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Session Key Generation with #[Session] Attribute\nDESCRIPTION: Demonstration of how to generate dynamic session keys based on component properties using curly brace notation. This example creates a unique session key for each author by incorporating the author's ID.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/session-properties.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Livewire\\Attributes\\Session;\nuse Livewire\\Component;\nuse App\\Models\\Author;\n\nclass ShowPosts extends Component\n{\n    public Author $author;\n\n    #[Session(key: 'search-{author.id}')] // [tl! highlight]\n    public $search;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Change Event with wire:model.change\nDESCRIPTION: Example showing how to use the .change modifier to send network requests as soon as a user changes a select input value, useful for immediate validation after selection.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<select wire:model.change=\"title\">\n    <!-- ... -->\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining Full-Page Livewire Component Route\nDESCRIPTION: Shows how to define a route for a full-page Livewire component in the routes/web.php file, mapping the component directly to a specific URL.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\CreatePost;\n\nRoute::get('/posts/create', CreatePost::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bookmark Post Component in PHP\nDESCRIPTION: Shows how to create a Livewire component for bookmarking posts with optimistic UI updates using JavaScript actions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public $bookmarked = false;\n\n    public function mount()\n    {\n        $this->bookmarked = $this->post->bookmarkedBy(auth()->user());\n    }\n\n    public function bookmarkPost()\n    {\n        $this->post->bookmark(auth()->user());\n\n        $this->bookmarked = $this->post->bookmarkedBy(auth()->user());\n    }\n\n    public function render()\n    {\n        return view('livewire.show-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Hooks in Livewire\nDESCRIPTION: Demonstrates the usage of request hooks in Livewire. These hooks allow interception of the entire HTTP request and response, providing access to raw HTTP data and the ability to customize error handling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('request', ({ url, options, payload, respond, succeed, fail }) => {\n    // Runs after commit payloads are compiled, but before a network request is sent...\n\n    respond(({ status, response }) => {\n        // Runs when the response is received...\n        // \"response\" is the raw HTTP response object\n        // before await response.text() is run...\n    })\n\n    succeed(({ status, json }) => {\n        // Runs when the response is received...\n        // \"json\" is the JSON response object...\n    })\n\n    fail(({ status, content, preventDefault }) => {\n        // Runs when the response has an error status code...\n        // \"preventDefault\" allows you to disable Livewire's\n        // default error handling...\n        // \"content\" is the raw response content...\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional View Data in Blade Template\nDESCRIPTION: Access both component properties and data passed via the with() method in the Blade template.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n\t<h1>Title: {{ $title }}</h1>\n\n\t<span>Author: {{ $author }}</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSV Download Support Hook\nDESCRIPTION: Shows how to implement a Component Hook that handles CSV file downloads across all components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/component-hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Livewire\\ComponentHook;\n\nclass SupportCsvDownloads extends ComponentHook\n{\n    public function call($method, $params, $returnEarly)\n    {\n        // Called before a method on the component is called...\n\n        return function ($returnValue) {\n            if ($returnValue instanceof Csv) {\n                // do something\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Form Implementation\nDESCRIPTION: A basic form implementation using Livewire's wire:submit and wire:model directives with error handling. Shows duplicate input fields for title with error message display.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/blade-components.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <label>\n        <span>Title</span>\n\n        <input type=\"text\" wire:model=\"title\">\n\n        @error('title') <span>{{ $message }}</span> @enderror\n    </label>\n\n    <label>\n        <span>Title</span>\n\n        <input type=\"text\" wire:model=\"title\">\n\n        @error('title') <span>{{ $message }}</span> @enderror\n    </label>\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Applying Locked Attribute to Prevent Property Tampering in PHP Livewire Component\nDESCRIPTION: This snippet demonstrates how to use the #[Locked] attribute on a public property in a Livewire component to prevent it from being modified on the frontend. The property stores a Post model's ID that should remain secure from tampering.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/locked.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Locked;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n\t#[Locked] // [tl! highlight]\n    public $id;\n\n    public function mount($postId)\n    {\n        $this->id = $postId;\n    }\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Key for Application-Wide Computed Properties\nDESCRIPTION: This example demonstrates how to set a custom cache key for an application-wide cached computed property, which enables more control when manually clearing the cache.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Computed;\nuse App\\Models\\Post;\n\n#[Computed(cache: true, key: 'homepage-posts')]\npublic function posts()\n{\n    return Post::all();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Properties in Livewire Volt\nDESCRIPTION: Demonstrates how to define and use computed properties in Livewire Volt components with optional caching functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\User;\nuse function Livewire\\Volt\\{computed};\n\n$count = computed(function () {\n    return User::count();\n});\n\n?>\n\n<div>\n    {{ $this->count }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Persisting Computed Properties Between Requests with Laravel Cache\nDESCRIPTION: This example demonstrates how to manually cache a computed property using Laravel's Cache utilities for the lifespan of a Livewire component rather than just for a single request.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Cache;\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\nuse App\\Models\\User;\n\nclass ShowUser extends Component\n{\n    public $userId;\n\n    #[Computed]\n    public function user()\n    {\n        $key = 'user'.$this->getId();\n        $seconds = 3600; // 1 hour...\n\n        return Cache::remember($key, $seconds, function () {\n            return User::find($this->userId);\n        });\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Component with Placeholder Loading State\nDESCRIPTION: Enhanced Revenue component implementation with a placeholder() method to show loading state while the component loads.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lazy.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Transaction;\n\nclass Revenue extends Component\n{\n    public $amount;\n\n    public function mount()\n    {\n        // Slow database query...\n        $this->amount = Transaction::monthToDate()->sum('amount');\n    }\n\n    public function placeholder()\n    {\n        return <<<'HTML'\n        <div>\n            <!-- Loading spinner... -->\n            <svg>...</svg>\n        </div>\n        HTML;\n    }\n\n    public function render()\n    {\n        return view('livewire.revenue');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Post Bookmark Template with JavaScript Action\nDESCRIPTION: Blade template implementing bookmark functionality with optimistic UI updates using JavaScript action and SVG icons.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button wire:click=\"$js.bookmark\" class=\"flex items-center gap-1\">\n        <svg wire:show=\"!bookmarked\" wire:cloak xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n        </svg>\n\n        <svg wire:show=\"bookmarked\" wire:cloak xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"size-6\">\n            <path fill-rule=\"evenodd\" d=\"M6.32 2.577a49.255 49.255 0 0 1 11.36 0c1.497.174 2.57 1.46 2.57 2.93V21a.75.75 0 0 1-1.085.67L12 18.089l-7.165 3.583A.75.75 0 0 1 3.75 21V5.507c0-1.47 1.073-2.756 2.57-2.93Z\" clip-rule=\"evenodd\" />\n        </svg>\n    </button>\n</div>\n\n@script\n<script>\n    $js('bookmark', () => {\n        $wire.bookmarked = !$wire.bookmarked\n\n        $wire.bookmarkPost()\n    })\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Toggling CSS Classes with wire:dirty.class\nDESCRIPTION: This example demonstrates how to toggle a CSS class on an input field when its state is dirty. The border-yellow-500 class is applied when the user modifies the input and is removed when the state is synchronized with the server using wire:model.blur.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/dirty.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<input wire:model.blur=\"title\" wire:dirty.class=\"border-yellow-500\">\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Layout for Livewire Components\nDESCRIPTION: Provides a basic Blade layout file template for Livewire components, including necessary HTML structure and a slot for component content.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_22\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n        <title>{{ $title ?? 'Page Title' }}</title>\n    </head>\n    <body>\n        {{ $slot }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Testing Validation in Livewire Component\nDESCRIPTION: A basic test case for validation that ensures the title field is required. Uses Livewire's test utilities to assert that validation errors are thrown when the title is not provided.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass CreatePostTest extends TestCase\n{\n    public function test_cant_create_post_without_title()\n    {\n        Livewire::test(CreatePost::class)\n            ->set('content', 'Sample content...')\n            ->call('save')\n            ->assertHasErrors('title');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Livewire Events in Alpine\nDESCRIPTION: Shows how to listen for Livewire events using Alpine's x-on directive. The example demonstrates listening for the 'post-created' event from child Livewire components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<div x-on:post-created=\"...\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using the Blur Event with wire:model.blur\nDESCRIPTION: Example of using the .blur modifier to only send network requests with property updates when a user clicks away from an input or tabs to the next input.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" wire:model.blur=\"title\">\n```\n\n----------------------------------------\n\nTITLE: Implementing the Counter Component Class in PHP\nDESCRIPTION: PHP class for the Counter component with functionality to increment and decrement a count property. The class extends Livewire's Component class and includes a render method to load the view.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass Counter extends Component\n{\n    public $count = 1;\n\n    public function increment()\n    {\n        $this->count++;\n    }\n\n    public function decrement()\n    {\n        $this->count--;\n    }\n\n    public function render()\n    {\n        return view('livewire.counter');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Property Updates with wire:dirty and wire:target\nDESCRIPTION: This example demonstrates how to show a dirty indication only for a specific property (title) when it has been changed.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-dirty.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"update\">\n    <input wire:model.blur=\"title\">\n\n    <div wire:dirty wire:target=\"title\">Unsaved title...</div> <!-- [tl! highlight] -->\n\n    <button type=\"submit\">Update</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using wire:dirty for Showing Unsaved Changes in Livewire\nDESCRIPTION: These Blade snippets demonstrate how to use wire:dirty to indicate unsaved changes in a form. It shows examples of adding a class to an input and toggling the visibility of an element based on the 'dirty' state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"text\" wire:model.blur=\"title\" wire:dirty.class=\"border-yellow\">\n\n<input type=\"text\" wire:model=\"title\">\n\n<div wire:dirty wire:target=\"title\">Unsaved...</div>\n```\n\n----------------------------------------\n\nTITLE: Delete Confirmation Dialog Implementation\nDESCRIPTION: Implementation of a delete button with confirmation dialog using wire:confirm directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<button\n    type=\"button\"\n    wire:click=\"delete\"\n    wire:confirm=\"Are you sure you want to delete this post?\"\n>\n    Delete post\n</button>\n```\n\n----------------------------------------\n\nTITLE: Viewport-Based Polling in Blade Template\nDESCRIPTION: A Blade template example demonstrating how to enable polling only when a component is visible in the viewport. This optimizes performance by only polling when users can see the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-poll.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll.visible>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Livewire Events from Alpine\nDESCRIPTION: Demonstrates how to dispatch events from Alpine that can be intercepted by Livewire components. The example shows dispatching the 'post-created' event when a button is clicked.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_19\n\nLANGUAGE: blade\nCODE:\n```\n<button @click=\"$dispatch('post-created')\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Hooks in Livewire Component\nDESCRIPTION: Shows how to implement rendering() and rendered() hooks in a Livewire component to intercept the view rendering process. The rendering() hook runs before view rendering while rendered() hook executes after the view is rendered.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    public function render()\n    {\n        return view('livewire.show-posts', [\n            'post' => Post::all(),\n        ])\n    }\n\n    public function rendering($view, $data)\n    {\n        // Runs BEFORE the provided view is rendered...\n        //\n        // $view: The view about to be rendered\n        // $data: The data provided to the view\n    }\n\n    public function rendered($view, $html)\n    {\n        // Runs AFTER the provided view is rendered...\n        //\n        // $view: The rendered view\n        // $html: The final, rendered HTML\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TodoInput Component with Modelable Property\nDESCRIPTION: Child component implementing the Modelable attribute to enable parent data binding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Livewire\\Attributes\\Modelable;\n\nclass TodoInput extends Component\n{\n    #[Modelable]\n    public $value = '';\n\n    public function render()\n    {\n        return view('livewire.todo-input');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination Links in Blade\nDESCRIPTION: Example of using a custom pagination view in a Blade template using the links() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n{{ $posts->links('custom-pagination-links') }}\n```\n\n----------------------------------------\n\nTITLE: Character Count Display Using $wire in AlpineJS\nDESCRIPTION: A form with character count functionality using AlpineJS to display the length of content being entered. This demonstrates how to access Livewire properties from Alpine using the $wire object.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form wire:submit=\"save\">\n    <!-- ... -->\n\n    <input wire:model=\"content\" type=\"text\">\n\n    <small>\n        Character count: <span x-text=\"$wire.content.length\"></span> <!-- [tl! highlight] -->\n    </small>\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with Livewire.navigate()\nDESCRIPTION: Using the Livewire.navigate() method to programmatically navigate to a new URL. This provides a way to trigger SPA-like navigation from JavaScript code.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    // ...\n\n    Livewire.navigate('/new/url')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Validation Errors in Livewire Component\nDESCRIPTION: Shows how to test for validation errors on multiple properties simultaneously. This example tests that both title and content are required fields.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function test_cant_create_post_without_title_and_content()\n{\n    Livewire::test(CreatePost::class)\n        ->call('save')\n        ->assertHasErrors(['title', 'content']);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Data in Alpine Event Listeners\nDESCRIPTION: Shows how to access additional data sent with Livewire events in Alpine event listeners. The example demonstrates accessing the event title via $event.detail.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<div x-on:post-created=\"notify('New post: ' + $event.detail.title)\"></div>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events from Component Scripts\nDESCRIPTION: Demonstrates how to dispatch Livewire events from JavaScript within a component's @script directive. The example shows dispatching a 'post-created' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n@script\n<script>\n    $wire.dispatch('post-created');\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component with Initialized Properties\nDESCRIPTION: Test a Livewire component by passing initial data to its mount() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\UpdatePost;\nuse Livewire\\Livewire;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass UpdatePostTest extends TestCase\n{\n    public function test_title_field_is_populated()\n    {\n        $post = Post::factory()->make([\n            'title' => 'Top ten bath bombs',\n        ]);\n\n        Livewire::test(UpdatePost::class, ['post' => $post])\n            ->assertSet('title', 'Top ten bath bombs');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Livewire Component with CSV Download\nDESCRIPTION: Demonstrates a Livewire component implementing a method that returns a CSV file for download.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/component-hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreateUser extends Component\n{\n    public $username = '';\n\n    public $email = '';\n\n    public function something()\n    {\n        return new Csv();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Livewire Component with Download Method in PHP\nDESCRIPTION: A PHP example of a Livewire component class that defines a download method to serve an invoice PDF file to the user. This method will be triggered via a wire:click directive from the frontend.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-click.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Invoice;\n\nclass ShowInvoice extends Component\n{\n    public Invoice $invoice;\n\n    public function download()\n    {\n        return response()->download(\n            $this->invoice->file_path, 'invoice.pdf'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Indicator to Submit Button in Livewire\nDESCRIPTION: This Blade snippet demonstrates how to add a loading spinner to a submit button using wire:loading. This provides visual feedback to the user when the form is being submitted.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<button type=\"submit\">\n    Save\n\n    <div wire:loading>\n        <svg>...</svg> <!-- SVG loading spinner -->\n    </div>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Commit Preparation Hook in Livewire\nDESCRIPTION: Demonstrates the usage of the commit.prepare hook in Livewire. This hook is triggered before a request is sent to the server, allowing for last-minute updates or actions to be added to the outgoing request.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('commit.prepare', ({ component }) => {\n    // Runs before commit payloads are collected and sent to the server...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Morph Hooks in Livewire\nDESCRIPTION: Demonstrates the usage of various DOM morph hooks in Livewire. These hooks are triggered during the DOM morphing phase after a network roundtrip. They provide access to elements being updated, removed, or added.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('morph.updating',  ({ el, component, toEl, skip, childrenOnly }) => {\n\t//\n})\n\nLivewire.hook('morph.updated', ({ el, component }) => {\n\t//\n})\n\nLivewire.hook('morph.removing', ({ el, component, skip }) => {\n\t//\n})\n\nLivewire.hook('morph.removed', ({ el, component }) => {\n\t//\n})\n\nLivewire.hook('morph.adding',  ({ el, component }) => {\n\t//\n})\n\nLivewire.hook('morph.added',  ({ el }) => {\n\t//\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create Post Modal with wire:show in Livewire (Blade)\nDESCRIPTION: This Blade template demonstrates the use of wire:show to toggle the visibility of a create post form. It includes a button to show the modal and a form for post creation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-show.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button x-on:click=\"$wire.showModal = true\">New Post</button>\n\n    <div wire:show=\"showModal\">\n        <form wire:submit=\"save\">\n            <textarea wire:model=\"content\"></textarea>\n\n            <button type=\"submit\">Save Post</button>\n        </form>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Validation for File Uploads in Livewire (PHP)\nDESCRIPTION: This PHP snippet shows how to customize the global validation rules for file uploads in Livewire's configuration file.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n'temporary_file_upload' => [\n    // ...\n    'rules' => 'file|mimes:png,jpg,pdf|max:102400', // (100MB max, and only accept PNGs, JPEGs, and PDFs)\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Livewire Component with Entangled State in PHP\nDESCRIPTION: This snippet demonstrates a Livewire component class that manages a dropdown state. It includes methods to archive and delete, both of which close the dropdown after execution.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass PostDropdown extends Component\n{\n    public $showDropdown = false;\n\n    public function archive()\n    {\n        // ...\n\n        $this->showDropdown = false;\n    }\n\n    public function delete()\n    {\n        // ...\n\n        $this->showDropdown = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Query String Parameters in Livewire Component (PHP)\nDESCRIPTION: This snippet demonstrates a ShowUsers component that allows searching users by name. It includes a public property for search and a render method to fetch and display users.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\nuse App\\Models\\User;\n\nclass ShowUsers extends Component\n{\n    public $search = '';\n\n    public function render()\n    {\n        return view('livewire.show-users', [\n            'users' => User::search($this->search)->get(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Livewire Methods on Blur with AlpineJS\nDESCRIPTION: An example showing how to trigger a Livewire method when an input loses focus. This demonstrates calling Livewire methods directly from Alpine using the $wire object.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form wire:submit=\"save\">\n    <input wire:model=\"title\" type=\"text\" x-on:blur=\"$wire.save()\">  <!-- [tl! highlight] -->\n\n    <!-- ... -->\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Polling with Custom Action in Blade Template\nDESCRIPTION: This snippet demonstrates how to specify a custom action to be fired on each polling interval using wire:poll. The refreshSubscribers method will be called every 2.5 seconds.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/polling.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll=\"refreshSubscribers\">\n    Subscribers: {{ $count }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Blade Template for Todos Component\nDESCRIPTION: The Blade template for the Todos component that renders the list of todos and provides an input field to add new items. Uses wire:submit for form submission and wire:model for data binding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"add\">\n    <ul>\n        @foreach ($todos as $item)\n            <li>{{ $item }}</li>\n        @endforeach\n    </ul>\n\n    <input wire:model=\"todo\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Combining wire:show with Alpine.js Transitions in Livewire (Blade)\nDESCRIPTION: This Blade template showcases how to combine Livewire's wire:show directive with Alpine.js transitions for smooth show/hide animations of a create post modal.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-show.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button x-on:click=\"$wire.showModal = true\">New Post</button>\n\n    <div wire:show=\"showModal\" x-transition.duration.500ms>\n        <form wire:submit=\"save\">\n            <textarea wire:model=\"content\"></textarea>\n            <button type=\"submit\">Save Post</button>\n        </form>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar for File Upload in Livewire (Blade)\nDESCRIPTION: This Blade snippet demonstrates how to create a progress bar for file uploads using Alpine.js and Livewire's upload events.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <div\n        x-data=\"{ uploading: false, progress: 0 }\"\n        x-on:livewire-upload-start=\"uploading = true\"\n        x-on:livewire-upload-finish=\"uploading = false\"\n        x-on:livewire-upload-cancel=\"uploading = false\"\n        x-on:livewire-upload-error=\"uploading = false\"\n        x-on:livewire-upload-progress=\"progress = $event.detail.progress\"\n    >\n        <!-- File Input -->\n        <input type=\"file\" wire:model=\"photo\">\n\n        <!-- Progress Bar -->\n        <div x-show=\"uploading\">\n            <progress max=\"100\" x-bind:value=\"progress\"></progress>\n        </div>\n    </div>\n\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in Livewire Components using Attributes\nDESCRIPTION: Shows how to listen for events in a Livewire component using the #[On] attribute. The example demonstrates a Dashboard component that listens for the 'post-created' event and updates its post list.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Livewire\\Attributes\\On; // [tl! highlight]\n\nclass Dashboard extends Component\n{\n\t#[On('post-created')] // [tl! highlight]\n    public function updatePostList($title)\n    {\n\t\t// ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling CSS Classes on Dirty State with wire:dirty.class\nDESCRIPTION: This snippet shows how to toggle a CSS class on an input field to indicate unsaved state when the user types, and remove it when the state is saved on the server.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-dirty.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<input wire:model.blur=\"title\" wire:dirty.class=\"border-yellow-500\">\n```\n\n----------------------------------------\n\nTITLE: Basic Volt Component Implementation in PHP\nDESCRIPTION: Demonstrates a simple counter component using Volt's functional API with state management and increment functionality\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Livewire\\Volt\\{state};\n\nstate(['count' => 0]);\n\n$increment = fn () => $this->count++;\n\n?>\n\n<div>\n    <h1>{{ $count }}</h1>\n    <button wire:click=\"increment\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Create Post Modal with wire:show in Livewire (PHP)\nDESCRIPTION: This PHP code defines a Livewire component for creating a new post. It manages the visibility of a modal and handles the post creation process.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-show.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public $showModal = false;\n\n    public $content = '';\n\n    public function save()\n    {\n        Post::create(['content' => $this->content]);\n\n        $this->reset('content');\n\n        $this->showModal = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Livewire Update Endpoint in Laravel\nDESCRIPTION: PHP code to set a custom update endpoint for Livewire components, useful for localization or multi-tenancy.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nLivewire::setUpdateRoute(function ($handle) {\n\treturn Route::post('/custom/livewire/update', $handle);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title for Livewire Component\nDESCRIPTION: Shows how to set a custom page title for a Livewire component using the #[Title] attribute or the fluent ->title() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Title;\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n\t// ...\n\n\t#[Title('Create Post')]\n\tpublic function render()\n\t{\n\t    return view('livewire.create-post');\n\t}\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return view('livewire.create-post')\n\t     ->title('Create Post');\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template for ShowUsers Component (Blade)\nDESCRIPTION: This Blade template renders the search input and list of users for the ShowUsers component. It uses wire:model.live for real-time updates and wire:key for list item optimization.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <input type=\"text\" wire:model.live=\"search\">\n\n    <ul>\n        @foreach ($users as $user)\n            <li wire:key=\"{{ $user->id }}\">{{ $user->name }}</li>\n        @endforeach\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggle Content Visibility with AlpineJS in a Livewire Component\nDESCRIPTION: A Livewire component that uses AlpineJS to implement a show/hide toggle for post content. This demonstrates using x-data for state management and x-show for conditional visibility.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <h1>{{ $post->title }}</h1>\n\n    <div x-data=\"{ expanded: false }\">\n        <button type=\"button\" x-on:click=\"expanded = ! expanded\">\n            <span x-show=\"! expanded\">Show post content...</span>\n            <span x-show=\"expanded\">Hide post content...</span>\n        </button>\n\n        <div x-show=\"expanded\">\n            {{ $post->content }}\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Attribute Name in Livewire\nDESCRIPTION: Demonstrates how to customize the attribute name used in validation error messages by using the 'as' parameter in the #[Validate] attribute.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\n\n#[Validate('required', as: 'date of birth')]\npublic $dob;\n```\n\n----------------------------------------\n\nTITLE: TodoList Blade Template with Child Component Binding\nDESCRIPTION: Blade template showing how to bind parent data to a child component using wire:model and rendering todo items.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>Todos</h1>\n\n    <livewire:todo-input wire:model=\"todo\" />\n\n    <button wire:click=\"add\">Add Todo</button>\n\n    <div>\n        @foreach ($todos as $todo)\n            <livewire:todo-item :$todo :key=\"$todo->id\" />\n        @endforeach\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Parent Dashboard Component in PHP\nDESCRIPTION: A basic Livewire parent component class that defines a Dashboard component which will contain nested components. It demonstrates the minimal structure needed for a component that will contain child components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass Dashboard extends Component\n{\n    public function render()\n    {\n        return view('livewire.dashboard');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forms with Livewire Volt\nDESCRIPTION: Shows how to integrate Livewire forms with validation and submission handling in Volt components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Livewire\\Forms\\PostForm;\nuse function Livewire\\Volt\\{form};\n\nform(PostForm::class);\n\n$save = function () {\n    $this->form->store();\n\n    // ...\n};\n\n?>\n\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model=\"form.title\">\n    @error('form.title') <span class=\"error\">{{ $message }}</span> @enderror\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Targeting Action Parameters with Loading Indicators in Livewire\nDESCRIPTION: Demonstrates how to scope loading indicators to specific action parameters. This example shows loading indicators only for the specific post being removed.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <div wire:key=\"{{ $post->id }}\">\n            <h2>{{ $post->title }}</h2>\n\n            <button wire:click=\"remove({{ $post->id }})\">Remove</button>\n\n            <div wire:loading wire:target=\"remove({{ $post->id }})\">  <!-- [tl! highlight:2] -->\n                Removing post...\n            </div>\n        </div>\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Session Key with #[Session] Attribute\nDESCRIPTION: Example showing how to specify a custom session key for a property using the key parameter in the #[Session] attribute. This gives you control over the exact key used in the session storage.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/session-properties.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Livewire\\Attributes\\Session;\nuse Livewire\\Component;\n\nclass ShowPosts extends Component\n{\n    #[Session(key: 'search')] // [tl! highlight]\n    public $search;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Props in Child Component with mount() Method\nDESCRIPTION: A TodoCount component that receives and processes todos data from its parent. This example demonstrates how to capture passed props in the mount() method and use them in the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Todo;\n\nclass TodoCount extends Component\n{\n    public $todos;\n\n    public function mount($todos)\n    {\n        $this->todos = $todos;\n    }\n\n    public function render()\n    {\n        return view('livewire.todo-count', [\n            'count' => $this->todos->count(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Boot Method Implementation in PHP\nDESCRIPTION: Shows how to use the boot() method to initialize protected properties on every request, with model initialization example.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Locked;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPost extends Component\n{\n    #[Locked]\n    public $postId = 1;\n\n    protected Post $post;\n\n    public function boot()\n    {\n        $this->post = Post::find($this->postId);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Traits\nDESCRIPTION: Shows how to implement Livewire lifecycle hooks within a trait using prefixed method names to avoid conflicts. Demonstrates a complete set of available hooks within a trait context.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    use HasPostForm;\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\ntrait HasPostForm\n{\n    public $title = '';\n\n    public $content = '';\n\n    public function mountHasPostForm()\n    {\n        // ...\n    }\n\n    public function hydrateHasPostForm()\n    {\n        // ...\n    }\n\n    public function bootHasPostForm()\n    {\n        // ...\n    }\n\n    public function updatingHasPostForm()\n    {\n        // ...\n    }\n\n    public function updatedHasPostForm()\n    {\n        // ...\n    }\n\n    public function renderingHasPostForm()\n    {\n        // ...\n    }\n\n    public function renderedHasPostForm()\n    {\n        // ...\n    }\n\n    public function dehydrateHasPostForm()\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Like Button UI with wire:text\nDESCRIPTION: Demonstrates the blade template implementation of a like button using wire:text for optimistic updates. Shows how to combine Alpine.js with Livewire for immediate UI feedback.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-text.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button x-on:click=\"$wire.likes++\" wire:click=\"like\">❤️ Like</button>\n\n    Likes: <span wire:text=\"likes\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Navigation in Livewire Components\nDESCRIPTION: Using the navigate parameter with the redirect method to perform navigation without a full page reload. This enables SPA-like redirects from within Livewire component methods.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->redirect('/posts', navigate: true);\n```\n\n----------------------------------------\n\nTITLE: Using Trait Hooks for Query String (PHP)\nDESCRIPTION: This example demonstrates how to use trait hooks for query strings, allowing for reusable query string configurations across multiple components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ntrait WithSorting\n{\n    // ...\n\n    protected function queryStringWithSorting()\n    {\n        return [\n            'sortBy' => ['as' => 'sort'],\n            'sortDirection' => ['as' => 'direction'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Upload API in Livewire (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use Livewire's JavaScript upload API for more control over file uploads, including multiple file uploads and progress tracking.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet file = $wire.el.querySelector('input[type=\"file\"]').files[0]\n\n// Upload a file...\n$wire.upload('photo', file, (uploadedFilename) => {\n    // Success callback...\n}, () => {\n    // Error callback...\n}, (event) => {\n    // Progress callback...\n    // event.detail.progress contains a number between 1 and 100 as the upload progresses\n}, () => {\n    // Cancelled callback...\n})\n\n// Upload multiple files...\n$wire.uploadMultiple('photos', [file], successCallback, errorCallback, progressCallback, cancelledCallback)\n\n// Remove single file from multiple uploaded files...\n$wire.removeUpload('photos', uploadedFilename, successCallback)\n\n// Cancel an upload...\n$wire.cancelUpload('photos')\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Volt Component\nDESCRIPTION: Demonstrates how to create an inline Volt component within a Blade template using the @volt directive\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Livewire\\Volt\\{state};\n\nstate(['count' => 0]);\n\n$increment = fn () => $this->count++;\n\n?>\n\n<x-app-layout>\n    <x-slot name=\"header\">\n        Counter\n    </x-slot>\n\n    @volt('counter')\n        <div>\n            <h1>{{ $count }}</h1>\n            <button wire:click=\"increment\">+</button>\n        </div>\n    @endvolt\n</x-app-layout>\n```\n\n----------------------------------------\n\nTITLE: Rendering Recursive Survey Questions in Blade Template\nDESCRIPTION: This Blade template snippet shows how to render a survey question and its sub-questions recursively. It uses a foreach loop to iterate through sub-questions and renders them using the same component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    Question: {{ $question->content }}\n\n    @foreach ($subQuestions as $subQuestion)\n        <livewire:survey-question :question=\"$subQuestion\" :key=\"$subQuestion->id\" />\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Targeting Multiple Actions with Loading Indicators in Livewire\nDESCRIPTION: Shows how to make loading indicators respond to multiple specific actions by providing comma-separated values to wire:target.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model.blur=\"title\">\n\n    <!-- ... -->\n\n    <button type=\"submit\">Save</button>\n\n    <button type=\"button\" wire:click=\"remove\">Remove</button>\n\n    <div wire:loading wire:target=\"save, remove\">  <!-- [tl! highlight:2] -->\n        Updating post...\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component Mounting Methods\nDESCRIPTION: Shows different ways to mount a Livewire component, including Blade directive and PHP method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:counter />\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php echo Livewire::mount('counter'); ?>\n```\n\n----------------------------------------\n\nTITLE: Continuous Background Polling in Blade Template\nDESCRIPTION: This snippet demonstrates how to use the keep-alive modifier with wire:poll to continue polling even when the browser tab is in the background, overriding the default throttling behavior.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/polling.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll.keep-alive>\n```\n\n----------------------------------------\n\nTITLE: Select Dropdown with Placeholder Option\nDESCRIPTION: Example of a select dropdown with a disabled placeholder option as the default selection, providing better user experience for required selections.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<select wire:model=\"state\">\n    <option disabled value=\"\">Select a state...</option>\n\n    @foreach (\\App\\Models\\State::all() as $state)\n        <option value=\"{{ $state->id }}\">{{ $state->label }}</option>\n    @endforeach\n</select>\n```\n\n----------------------------------------\n\nTITLE: Testing Actions in Livewire CreatePost Component\nDESCRIPTION: Demonstrates how to test Livewire actions using the call() method, including setting properties and verifying database changes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass CreatePostTest extends TestCase\n{\n    public function test_can_create_post()\n    {\n        $this->assertEquals(0, Post::count());\n\n        Livewire::test(CreatePost::class)\n            ->set('title', 'Wrinkly fingers? Try this one weird trick')\n            ->set('content', '...')\n            ->call('save');\n\n        $this->assertEquals(1, Post::count());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of wire:dirty Directive in Livewire\nDESCRIPTION: This snippet demonstrates how to use the wire:dirty directive to display an 'Unsaved changes...' indicator when a form has been modified but not yet saved to the server. The indicator appears when the client-side state differs from the server-side state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/dirty.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"update\">\n    <input type=\"text\" wire:model=\"title\">\n\n    <!-- ... -->\n\n    <button type=\"submit\">Update</button>\n\n    <div wire:dirty>Unsaved changes...</div> <!-- [tl! highlight] -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Indicator for File Upload in Livewire (Blade)\nDESCRIPTION: This Blade snippet shows how to display a loading indicator while a file is being uploaded using Livewire's wire:loading directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"file\" wire:model=\"photo\">\n\n<div wire:loading wire:target=\"photo\">Uploading...</div>\n```\n\n----------------------------------------\n\nTITLE: Binding Radio Buttons with wire:model\nDESCRIPTION: Example of binding radio buttons to a single property, allowing users to select one value from multiple options.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"radio\" value=\"yes\" wire:model=\"receiveUpdates\">\n<input type=\"radio\" value=\"no\" wire:model=\"receiveUpdates\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Computed Properties in Blade Templates\nDESCRIPTION: This example shows how to access computed properties within a Blade template using the $this syntax, displaying user information and providing a follow button.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>{{ $this->user->name }}</h1>\n\n    <span>{{ $this->user->email }}</span>\n\n    <button wire:click=\"follow\">Follow</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Anonymous Component Route\nDESCRIPTION: Shows how to pass data to a view containing an anonymous Volt component through a route\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nRoute::get('/counter', fn () => view('users.counter', [\n    'count' => User::count(),\n]));\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component View Content\nDESCRIPTION: Test to ensure that specific content is rendered in a Livewire component's view.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\ShowPosts;\nuse Livewire\\Livewire;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass ShowPostsTest extends TestCase\n{\n    public function test_displays_posts()\n    {\n        Post::factory()->make(['title' => 'On bathing well']);\n        Post::factory()->make(['title' => \"There's no time like bathtime\"]);\n\n        Livewire::test(ShowPosts::class)\n            ->assertSee('On bathing well')\n            ->assertSee(\"There's no time like bathtime\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Methods When Child Components Dispatch Events\nDESCRIPTION: Shows how to call a custom method in the parent component when a child component dispatches an event. The example demonstrates calling a 'close' method when an 'edit-post' component dispatches a 'saved' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:edit-post @saved=\"close\">\n```\n\n----------------------------------------\n\nTITLE: Listening for Livewire Events Globally in JavaScript\nDESCRIPTION: Shows how to listen for Livewire events globally from any JavaScript in your application. The example demonstrates using Livewire.on to listen for the 'post-created' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    document.addEventListener('livewire:init', () => {\n       Livewire.on('post-created', (event) => {\n           //\n       });\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing wire:ignore in Blade Template\nDESCRIPTION: Demonstrates how to wrap an input element in wire:ignore directive to prevent Livewire from modifying HTML generated by third-party libraries. This is commonly used for custom form inputs like date pickers.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-ignore.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form>\n    <!-- ... -->\n\n    <div wire:ignore>\n        <!-- This element would be reference by a -->\n        <!-- third-party library for initialization... -->\n        <input id=\"id-for-date-picker-library\">\n    </div>\n\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: String UUID Parameters in AlpineJS Event Handlers\nDESCRIPTION: An example showing how to properly pass string UUIDs as parameters to Livewire methods from AlpineJS. This demonstrates the importance of quoting string values in JavaScript expressions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    x-on:click=\"$wire.deletePost('{{ $post->uuid }}')\"\n>\n```\n\n----------------------------------------\n\nTITLE: Binding Single Checkbox with wire:model\nDESCRIPTION: Example of binding a single checkbox to a boolean property, which will toggle between true and false as the checkbox is checked and unchecked.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"checkbox\" wire:model=\"receiveUpdates\">\n```\n\n----------------------------------------\n\nTITLE: Defining Livewire Component Effects in JSON\nDESCRIPTION: This JSON structure represents the effects of a Livewire component update. It includes a snapshot of the component state, HTML updates, and any return values from the update operation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/the-livewire-protocol.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"snapshot\": {...},\n    \"effects\": {\n        \"html\": \"...\",\n        \"returns\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Keys for Nested Livewire Components in Loops\nDESCRIPTION: When rendering Livewire components within loops, use :key attribute or the key() function to provide unique keys for each component instance.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <livewire:post-item :$post :key=\"$post->id\">\n\n        @livewire(PostItem::class, ['post' => $post], key($post->id))\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with Route Parameter\nDESCRIPTION: Implements a Livewire component that accepts and processes a route parameter through the mount() method\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public function mount($id)\n    {\n        $this->post = Post::findOrFail($id);\n    }\n\n    public function render()\n    {\n        return view('livewire.show-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying Loading Indicators in Livewire\nDESCRIPTION: Shows how to delay the appearance of loading indicators to prevent them from flashing briefly on fast connections. The basic delay is 200ms.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:loading.delay>...</div>\n```\n\n----------------------------------------\n\nTITLE: Storage Facade Download Example in PHP\nDESCRIPTION: Demonstrates how to use Laravel's Storage facade to handle file downloads in a Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/downloads.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function download()\n{\n    return Storage::disk('invoices')->download('invoice.csv');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Counter Component with Livewire\nDESCRIPTION: Shows how to create a Livewire component that handles post likes with optimistic updates. The component manages a post's like count and provides a method to increment likes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-text.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public $likes;\n\n    public function mount()\n    {\n        $this->likes = $this->post->like_count;\n    }\n\n    public function like()\n    {\n        $this->post->like();\n\n        $this->likes = $this->post->fresh()->like_count;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fade-only Transition Example\nDESCRIPTION: Shows how to implement a fade-only transition without scaling effect.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-transition.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div wire:transition.opacity>\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Livewire Component with AlpineJS\nDESCRIPTION: An example of triggering a Livewire component refresh from AlpineJS. This demonstrates how to force a component to re-render by using the $wire.$refresh() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" x-on:click=\"$wire.$refresh()\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Livewire Component Hook Structure\nDESCRIPTION: Demonstrates the complete structure of a Component Hook class with all available lifecycle methods including mount, hydrate, boot, update, call, render, dehydrate, and exception handling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/component-hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\ComponentHook;\n\nclass MyComponentHook extends ComponentHook\n{\n    public static function provide()\n    {\n        // Runs once at application boot.\n        // Can be used to register any services you may need.\n    }\n\n    public function mount($params, $parent)\n    {\n        // Called when a component is \"mounted\"\n        // \n        // $params: Array of parameters passed into the component\n        // $parent: The parent component object if this is a nested component\n    }\n\n    public function hydrate($memo)\n    {\n        // Called when a component is \"hydrated\"\n        //\n        // $memo: An associative array of the \"dehydrated\" metadata for this component\n    }\n\n    public function boot()\n    {\n        // Called when the component boots\n    }\n\n    public function update($property, $path, $value)\n    {\n        // Called before the component updates...\n\n        return function () {\n            // Called after the component property has updated...\n        };\n    }\n\n    public function call($method, $params, $returnEarly)\n    {\n        // Called before a method on the component is called...\n\n        return function ($returnValue) {\n            // Called after a method is called\n        };\n    }\n\n    public function render($view, $data)\n    {\n        // Called after \"render\" is called but before the Blade has been rendered...\n        return function ($html) {\n            // Called after the component's view has been rendered\n        };\n    }\n\n    public function dehydrate($context)\n    {\n        // Called when a component \"dehydrates\"\n    }\n\n    public function exception($e, $stopPropagation)\n    {\n        // Called if an exception is thrown within a component...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Polling in Blade Template with Livewire\nDESCRIPTION: This Blade template snippet shows how to use wire:poll to automatically refresh a component every 2.5 seconds, keeping the subscriber count up-to-date without manual page refreshes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/polling.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll>\n    Subscribers: {{ $count }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Component Refresh Button Implementation\nDESCRIPTION: Example of implementing a refresh button using Livewire's built-in $refresh and $commit actions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<button type=\"button\" wire:click=\"$refresh\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Polling with Method Call in Blade Template\nDESCRIPTION: A Blade template snippet demonstrating how to specify a component method to be called on each polling interval. The refreshSubscribers method will be triggered every 2.5 seconds.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-poll.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll=\"refreshSubscribers\">\n    Subscribers: {{ $count }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Livewire Component for Survey Questions in PHP\nDESCRIPTION: This snippet demonstrates how to create a recursive Livewire component for survey questions. It includes a PHP class that renders a view with sub-questions, allowing for nested question structures.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Question;\n\nclass SurveyQuestion extends Component\n{\n    public Question $question;\n\n    public function render()\n    {\n        return view('livewire.survey-question', [\n            'subQuestions' => $this->question->subQuestions,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Layout for Livewire Component\nDESCRIPTION: Demonstrates how to set a custom layout for a specific Livewire component using the #[Layout] attribute or the fluent ->layout() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Layout;\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n\t// ...\n\n\t#[Layout('layouts.app')]\n\tpublic function render()\n\t{\n\t    return view('livewire.create-post');\n\t}\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return view('livewire.create-post')\n\t     ->layout('layouts.app');\n}\n```\n\n----------------------------------------\n\nTITLE: Route Model Binding in Livewire\nDESCRIPTION: Demonstrates route model binding implementation in a Livewire component with automatic model resolution\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public function mount(Post $post)\n    {\n        $this->post = $post;\n    }\n\n    public function render()\n    {\n        return view('livewire.show-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events to Self Only in Component Scripts\nDESCRIPTION: Shows how to dispatch events only to the current component without bubbling up to other components. The example uses dispatchSelf() to keep the event local to the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n$wire.dispatchSelf('post-created');\n```\n\n----------------------------------------\n\nTITLE: Using Flash Messages with Redirects in Livewire\nDESCRIPTION: Example of a Livewire component that uses Laravel's session flash functionality to display a success message after redirecting.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass UpdatePost extends Component\n{\n    // ...\n\n    public function update()\n    {\n        // ...\n\n        session()->flash('status', 'Post successfully updated.');\n\n        $this->redirect('/posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Livewire Component Data Structure in JSON\nDESCRIPTION: This JSON structure defines the data for a Livewire component, including todos, memo information, and a checksum. It represents the initial state or a snapshot of the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/the-livewire-protocol.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [\n        \"todos\": [[], [\"s\": \"array\"]],\n    ],\n    \"memo\": {\n        \"id\": \"...\",\n        \"name\": \"...\",\n        \"path\": \"...\",\n        \"method\": \"...\",\n        \"locale\": \"...\",\n        \"children\": \"...\"\n    },\n    \"checksum\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Attributes During Loading in Livewire\nDESCRIPTION: Shows how to toggle HTML attributes during server requests using the .attr modifier with wire:loading. This example disables a button while its action is processing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<button\n    type=\"button\"\n    wire:click=\"remove\"\n    wire:loading.attr=\"disabled\"\n>\n    Remove\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Component Test in PHP\nDESCRIPTION: A simple PHPUnit test class for a Livewire component, checking if it renders successfully.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass CreatePostTest extends TestCase\n{\n    public function test_renders_successfully()\n    {\n        Livewire::test(CreatePost::class)\n            ->assertStatus(200);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Classes During Loading in Livewire\nDESCRIPTION: Demonstrates removing CSS classes during server requests using the .class.remove modifier with wire:loading directive. This example removes the bg-blue-500 class from a button during loading.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<button class=\"bg-blue-500\" wire:loading.class.remove=\"bg-blue-500\">\n    Save\n</button>\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements During Loading with wire:loading.remove in Livewire\nDESCRIPTION: Demonstrates how to hide an element during server requests using the .remove modifier with wire:loading directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:loading.remove>...</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Passed Data in a Livewire Blade Template\nDESCRIPTION: This example shows how to access data that was passed to a Blade template from a Livewire component's render method using a foreach loop.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <!-- ... -->\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Layout Slots in Livewire Component\nDESCRIPTION: Demonstrates how to set additional named slots in a Livewire component's layout file, such as setting a custom language for the page.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_25\n\nLANGUAGE: blade\nCODE:\n```\n<x-slot:lang>fr</x-slot> // This component is in French\n\n<div>\n    // French content goes here...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Self-Dispatching Component Events in PHP\nDESCRIPTION: Demonstrates how to dispatch an event that only the originating component can receive using the dispatch()->self() modifier.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public function save()\n    {\n\t\t// ...\n\n\t\t$this->dispatch('post-created')->self();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Livewire Counter Component in PHP\nDESCRIPTION: Demonstrates the creation of a basic counter component class with increment functionality using Livewire framework. Includes state management and view rendering.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Livewire\\Component;\n\nclass Counter extends Component\n{\n    public $count = 1;\n\n    public function increment()\n    {\n        $this->count++;\n    }\n\n    public function render()\n    {\n        return view('livewire.counter');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Livewire Events with Data from Alpine\nDESCRIPTION: Shows how to dispatch events with additional data from Alpine. The example demonstrates including a title parameter when dispatching the 'post-created' event.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_20\n\nLANGUAGE: blade\nCODE:\n```\n<button @click=\"$dispatch('post-created', { title: 'Post Title' })\">...</button>\n```\n\n----------------------------------------\n\nTITLE: Form Object Template Integration in Blade\nDESCRIPTION: Shows how to use form objects in Blade templates by prepending 'form.' to property references in wire:model directives and error handling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n\t<input type=\"text\" wire:model=\"form.title\">\n    <div>@error('form.title') {{ $message }} @enderror</div>\n\n\t<textarea wire:model=\"form.content\"></textarea>\n    <div>@error('form.content') {{ $message }} @enderror</div>\n\n\t<button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Debouncing Input in Livewire\nDESCRIPTION: This Blade snippet shows how to use the .debounce modifier with wire:model.live to control how often network requests are sent when typing in a text input.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"text\" wire:model.live.debounce.150ms=\"title\" >\n```\n\n----------------------------------------\n\nTITLE: Using wire:dirty.remove to Hide Elements on Dirty State\nDESCRIPTION: This snippet shows how to use the wire:dirty.remove modifier to hide an element when the component has 'dirty' state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-dirty.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:dirty.remove>The data is in-sync...</div>\n```\n\n----------------------------------------\n\nTITLE: Prompted Confirmation Dialog in Livewire\nDESCRIPTION: Implements a more secure confirmation dialog that requires users to type a specific string ('DELETE') to confirm the action. Uses wire:confirm.prompt modifier for dangerous operations like account deletion.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-confirm.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<button\n    type=\"button\"\n    wire:click=\"delete\"\n    wire:confirm.prompt=\"Are you sure?\\n\\nType DELETE to confirm|DELETE\"\n>\n    Delete account\n</button>\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component View Data\nDESCRIPTION: Test to verify the data passed to a Livewire component's view.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\ShowPosts;\nuse Livewire\\Livewire;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass ShowPostsTest extends TestCase\n{\n    public function test_displays_all_posts()\n    {\n        Post::factory()->make(['title' => 'On bathing well']);\n        Post::factory()->make(['title' => 'The bathtub is my sanctuary']);\n\n        Livewire::test(ShowPosts::class)\n            ->assertViewHas('posts', function ($posts) {\n                return count($posts) == 2;\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Component with Database Query\nDESCRIPTION: Example of a Revenue component with a slow database query in mount() method that calculates monthly transaction amounts.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lazy.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Transaction;\n\nclass Revenue extends Component\n{\n    public $amount;\n\n    public function mount()\n    {\n        // Slow database query...\n        $this->amount = Transaction::monthToDate()->sum('amount');\n    }\n\n    public function render()\n    {\n        return view('livewire.revenue');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Polling Implementation in Blade Template\nDESCRIPTION: A Blade template snippet showing how to implement basic polling in a Livewire component using the wire:poll directive. This will refresh the component every 2.5 seconds.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-poll.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll> <!-- [tl! highlight] -->\n    Subscribers: {{ $count }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing wire:current for Active Link Styling in Blade\nDESCRIPTION: This snippet demonstrates how to use the wire:current directive in a Blade template to style active links in a navigation bar. It applies a bold font and specific text color to the currently active link.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-current.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/dashboard\" ... wire:current=\"font-bold text-zinc-800\">Dashboard</a>\n    <a href=\"/posts\" ... wire:current=\"font-bold text-zinc-800\">Posts</a>\n    <a href=\"/users\" ... wire:current=\"font-bold text-zinc-800\">Users</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Calling Parent Methods Directly in Blade\nDESCRIPTION: Shows an alternative to events for calling parent methods directly from child components. The example demonstrates using $parent to call a method on the parent component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:click=\"$parent.showCreatePostForm()\">Create Post</button>\n```\n\n----------------------------------------\n\nTITLE: Component-Based Livewire Form\nDESCRIPTION: Refactored form using custom x-input-text components for cleaner markup. Demonstrates component-based approach with error handling through props.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/blade-components.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <x-input-text label=\"Title\" wire:model=\"title\" :error=\"$error->first('title')\" />\n\n    <x-input-text label=\"Content\" wire:model=\"content\" :error=\"$error->first('content')\" />\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Duration for Persisted Computed Properties\nDESCRIPTION: This example demonstrates how to override the default cache duration for a persisted computed property by specifying the seconds parameter in the #[Computed] attribute.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[Computed(persist: true, seconds: 7200)]\n```\n\n----------------------------------------\n\nTITLE: Customizing Polling Interval in Blade Template\nDESCRIPTION: These snippets show how to manually control the polling interval by specifying a duration in seconds or milliseconds using wire:poll.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/polling.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll.15s> <!-- In seconds... -->\n\n<div wire:poll.15000ms> <!-- In milliseconds... -->\n```\n\n----------------------------------------\n\nTITLE: JavaScript Action Registration in Livewire\nDESCRIPTION: Demonstrates registering a JavaScript action that can be used within a Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button wire:click=\"$js.increment\">+</button>\n</div>\n\n@script\n<script>\n    $js('increment', () => {\n        console.log('increment')\n    })\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of Livewire Component with Properties\nDESCRIPTION: The HTML output resulting from rendering a Livewire component with properties shows how data from the component is displayed.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>Title: \"Post title...\"</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Publishing Livewire Configuration File in Laravel\nDESCRIPTION: Artisan command to publish Livewire's configuration file for customization.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:publish --config\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with URL-bound Property\nDESCRIPTION: Example of a Livewire component that uses the #[Url] attribute to bind a property to the URL query string.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Livewire\\Attributes\\Url;\nuse App\\Models\\Post;\n\nclass SearchPosts extends Component\n{\n    #[Url] // [tl! highlight]\n    public $search = '';\n\n    public function render()\n    {\n        return view('livewire.search-posts', [\n            'posts' => Post::search($this->search)->get(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transition Implementation in Blade Template\nDESCRIPTION: Demonstrates how to use wire:transition directive in a Blade template to smoothly show/hide comments.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-transition.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <!-- ... -->\n\n    <button wire:click=\"$set('showComments', true)\">Show comments</button>\n\n    @if ($showComments)\n        <div wire:transition> <!-- [tl! highlight] -->\n            @foreach ($post->comments as $comment)\n                <!-- ... -->\n            @endforeach\n        </div>\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with Custom Address Type\nDESCRIPTION: A Livewire component example that uses a custom Address class, demonstrating the need for a custom Synthesizer to handle complex object types.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass UpdateProperty extends Component\n{\n    public Address $address;\n\n    public function mount()\n    {\n        $this->address = new Address();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using wire:replace with Custom Web Components in Blade Templates\nDESCRIPTION: This example demonstrates how to wrap a custom web component with wire:replace directive to ensure Livewire completely replaces the element instead of performing DOM diffing, allowing the custom element to maintain its own lifecycle.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-replace.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<form>\n    <!-- ... -->\n\n    <div wire:replace>\n        <!-- This custom element would have its own internal state -->\n        <json-viewer>@json($someProperty)</json-viewer>\n    </div>\n\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Expiration Behavior in Livewire\nDESCRIPTION: Shows how to implement a custom page expiration behavior using the request hook in Livewire. This example overrides the default page expired dialog with a custom confirmation dialog.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('livewire:init', () => {\n    Livewire.hook('request', ({ fail }) => {\n        fail(({ status, preventDefault }) => {\n            if (status === 419) {\n                confirm('Your custom page expiration behavior...')\n\n                preventDefault()\n            }\n        })\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Parameters in JavaScript Event Listeners\nDESCRIPTION: Demonstrates how to access event parameters in JavaScript event listeners. The example shows accessing the refreshPosts parameter from the event's detail property.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n@script\n<script>\n    $wire.on('post-created', (event) => {\n        let refreshPosts = event.detail.refreshPosts\n\n        // ...\n    });\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Custom Counter Component Implementation\nDESCRIPTION: Complete implementation of a custom counter component with Alpine.js integration and model binding support.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<!-- resources/view/components/input-counter.blade.php -->\n\n<div x-data=\"{ count: 0 }\" x-modelable=\"count\" {{ $attributes}}>\n    <button x-on:click=\"count--\">-</button>\n\n    <span x-text=\"count\"></span>\n\n    <button x-on:click=\"count++\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Looping Through Posts and Passing IDs to Livewire Methods\nDESCRIPTION: A Blade loop that creates delete buttons for multiple posts, passing the corresponding post ID to a Livewire method. This demonstrates combining Blade templating with AlpineJS event handlers.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n@foreach ($posts as $post)\n    <button type=\"button\" x-on:click=\"$wire.deletePost({{ $post->id }})\">\n        Delete \"{{ $post->title }}\"\n    </button>\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes on Offline State\nDESCRIPTION: Illustrates how to add an HTML attribute to an element when the user goes offline using the attr modifier with wire:offline directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/offline.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:offline.attr=\"disabled\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events from Blade Templates\nDESCRIPTION: Shows how to trigger events directly from Blade templates using $dispatch and $dispatchTo JavaScript functions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_24\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:click=\"$dispatch('show-post-modal', { id: {{ $post->id }} })\">\n    EditPost\n</button>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:click=\"$dispatchTo('posts', 'show-post-modal', { id: {{ $post->id }} })\">\n    EditPost\n</button>\n```\n\n----------------------------------------\n\nTITLE: Isolating Component Requests in Livewire using #[Isolate] Attribute\nDESCRIPTION: This snippet demonstrates how to use the #[Isolate] class attribute in Livewire to mark a component as isolated. Isolated components attempt to separate their server roundtrips from other component requests, which can be useful for expensive updates that should be executed in parallel.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/bundling.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Isolate;\nuse Livewire\\Component;\n\n#[Isolate] // [tl! highlight]\nclass ShowPost extends Component\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Post Deletion in ShowPosts Component\nDESCRIPTION: Implementation of a ShowPosts component that handles post deletion with parameter passing and authorization checks.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    public function delete($id)\n    {\n        $post = Post::findOrFail($id);\n\n        $this->authorize('delete', $post);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.show-posts', [\n            'posts' => Auth::user()->posts,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listeners in Volt\nDESCRIPTION: Demonstrates setting up event listeners with dynamic names and component parameters.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse function Livewire\\Volt\\{on};\n\non(['eventName' => function () {\n    //\n}]);\n```\n\n----------------------------------------\n\nTITLE: Renderless Post View Counter Component\nDESCRIPTION: Demonstrates using the #[Renderless] attribute to skip re-rendering when incrementing post view count.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Attributes\\Renderless;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public function mount(Post $post)\n    {\n        $this->post = $post;\n    }\n\n    #[Renderless]\n    public function incrementViewCount()\n    {\n        $this->post->incrementViewCount();\n    }\n\n    public function render()\n    {\n        return view('livewire.show-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exact Matching with wire:current in Blade\nDESCRIPTION: This example shows how to use the .exact modifier with wire:current for exact path matching. It's useful when you want to prevent the directive from applying to subpaths of the specified route.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-current.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/\" wire:current.exact=\"font-bold\">Dashboard</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Output After @teleport\nDESCRIPTION: Shows the resulting HTML structure after the @teleport directive is processed. The modal content is moved to the end of the body element, demonstrating how teleportation affects the final DOM structure.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/teleport.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- ... -->\n\n    <div x-show=\"open\">\n        Modal contents...\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Parameter in Laravel\nDESCRIPTION: Sets up a Laravel route with an ID parameter for a Livewire component\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\ShowPost;\n\nRoute::get('/posts/{id}', ShowPost::class);\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Properties with Url Attribute (PHP)\nDESCRIPTION: This example demonstrates how to use nullable properties with the #[Url] attribute, allowing empty query string entries to be treated as null values.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\n\nclass ShowUsers extends Component\n{\n    #[Url]\n    public ?string $search; // [tl! highlight]\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Static Select Dropdown with wire:model\nDESCRIPTION: Example of binding a select dropdown with static options to a property, where selecting an option will set the property to the corresponding value.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<select wire:model=\"state\">\n    <option value=\"AL\">Alabama</option>\n    <option value=\"AK\">Alaska</option>\n    <option value=\"AZ\">Arizona</option>\n    ...\n</select>\n```\n\n----------------------------------------\n\nTITLE: Livewire Frontend Update Handler\nDESCRIPTION: JavaScript code for handling component updates and DOM manipulation after server response.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateComponent(el, component, action) {\n    fetch('/livewire/update', {\n        body: JSON.stringify({\n            \"snapshot\": snapshot,\n            \"calls\": [\n                [\"method\": action, \"params\": []],\n            ]\n        })\n    }).then(i => i.json()).then(response => {\n        let { html, snapshot } = response\n\n        component.snapshot = snapshot\n\n        el.outerHTML = html\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Replace vs. Append in Livewire Streaming\nDESCRIPTION: This snippet shows how to configure the stream method to either replace or append content when streaming. It demonstrates both server-side configuration using the 'replace' parameter and client-side configuration using the '.replace' modifier.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-stream.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Append contents...\n$this->stream(to: 'target', content: '...');\n\n// Replace contents...\n$this->stream(to: 'target', content: '...', replace: true);\n```\n\nLANGUAGE: html\nCODE:\n```\n// Append contents...\n<div wire:stream=\"target\">\n\n// Replace contents...\n<div wire:stream.replace=\"target\">\n```\n\n----------------------------------------\n\nTITLE: Importing Livewire and Alpine.js in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import Livewire and Alpine.js from the Livewire package when manually bundling. It also demonstrates how to start Livewire after configuration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Livewire, Alpine } from '../../vendor/livewire/livewire/dist/livewire.esm';\n\n// Register any Alpine directives, components, or plugins here...\n\nLivewire.start()\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component with URL Parameters\nDESCRIPTION: Test a Livewire component's behavior with specific URL query parameters using withQueryParams().\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\SearchPosts;\nuse Livewire\\Livewire;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass SearchPostsTest extends TestCase\n{\n    public function test_can_search_posts_via_url_query_string()\n    {\n        Post::factory()->create(['title' => 'Testing the first water-proof hair dryer']);\n        Post::factory()->create(['title' => 'Rubber duckies that actually float']);\n\n        Livewire::withQueryParams(['search' => 'hair'])\n            ->test(SearchPosts::class)\n            ->assertSee('Testing the first')\n            ->assertDontSee('Rubber duckies');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event-Based TodoList Component\nDESCRIPTION: TodoList component that listens for removal events from child components using the On attribute.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Todo;\nuse Livewire\\Attributes\\On;\n\nclass TodoList extends Component\n{\n    #[On('remove-todo')]\n    public function remove($todoId)\n    {\n        $todo = Todo::find($todoId);\n\n        $this->authorize('delete', $todo);\n\n        $todo->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.todo-list', [\n            'todos' => Auth::user()->todos,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Alpine.js Directive in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to register a custom Alpine.js directive called 'x-clipboard' when manually bundling Alpine.js with Livewire. It creates a clipboard functionality on click events.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Livewire, Alpine } from '../../vendor/livewire/livewire/dist/livewire.esm';\n\nAlpine.directive('clipboard', (el) => {\n    let text = el.textContent\n\n    el.addEventListener('click', () => {\n        navigator.clipboard.writeText(text)\n    })\n})\n\nLivewire.start()\n```\n\n----------------------------------------\n\nTITLE: Event and Validation Assertions in Livewire Tests\nDESCRIPTION: Methods for testing event dispatching and form validation results in Livewire components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nassertDispatched('post-created')\nassertNotDispatched('post-created')\nassertHasErrors('title')\nassertHasErrors(['title' => ['required', 'min:6']])\nassertHasNoErrors('title')\nassertHasNoErrors(['title' => ['required', 'min:6']])\n```\n\n----------------------------------------\n\nTITLE: Cancelling File Upload in Livewire (Blade)\nDESCRIPTION: This Blade snippet shows how to implement a cancel button for file uploads using Livewire's $cancelUpload() function.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <!-- File Input -->\n    <input type=\"file\" wire:model=\"photo\">\n\n    <!-- Cancel upload button -->\n    <button type=\"button\" wire:click=\"$cancelUpload('photo')\">Cancel Upload</button>\n\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Property-Specific Update Hook\nDESCRIPTION: Demonstrates using a property-specific update hook method for direct property targeting.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreateUser extends Component\n{\n    public $username = '';\n\n    public $email = '';\n\n    public function updatedUsername()\n    {\n        $this->username = strtolower($this->username);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Alias for Query String Parameter (PHP)\nDESCRIPTION: This snippet shows how to use an alias for the query string parameter, allowing you to use a different name in the URL than the property name in the component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\n\nclass ShowUsers extends Component\n{\n    #[Url(as: 'q')]\n    public $search = '';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Textarea Input with wire:model\nDESCRIPTION: Example of binding a textarea element to a 'content' property in a Livewire component, showing how to handle multi-line text inputs.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-model.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<textarea type=\"text\" wire:model=\"content\"></textarea>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with Collection Property\nDESCRIPTION: A more complex Livewire component example that uses a Laravel collection as a property. This demonstrates how Livewire handles more sophisticated property types beyond simple primitives.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Todos extends Component\n{\n    public $todos;\n\n    public function mount() {\n        $this->todos = collect([\n            'first',\n            'second',\n            'third',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hooking into Page Updates in Livewire Component (PHP)\nDESCRIPTION: Shows how to define methods that execute before and after a page is updated in a Livewire component with pagination.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\WithPagination;\n\nclass ShowPosts extends Component\n{\n    use WithPagination;\n\n    public function updatingPage($page)\n    {\n        // Runs before the page is updated for this component...\n    }\n\n    public function updatedPage($page)\n    {\n        // Runs after the page is updated for this component...\n    }\n\n    public function render()\n    {\n        return view('show-posts', [\n            'posts' => Post::paginate(10),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Livewire Navigation Progress Bar Configuration\nDESCRIPTION: PHP configuration options for customizing or disabling Livewire's navigation progress bar\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'navigate' => [\n    'show_progress_bar' => false,\n    'progress_bar_color' => '#2299dd',\n],\n```\n\n----------------------------------------\n\nTITLE: Testing Dispatched Events in Livewire\nDESCRIPTION: Demonstrates how to test event dispatching in Livewire components using assertDispatched() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\n\nclass CreatePostTest extends TestCase\n{\n    use RefreshDatabase;\n\n    public function test_it_dispatches_post_created_event()\n    {\n        Livewire::test(CreatePost::class)\n            ->call('save')\n            ->assertDispatched('post-created');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Livewire Components in Laravel\nDESCRIPTION: Example of setting up Laravel routes for Livewire components in routes/web.php file. This defines three different routes, each rendering a different Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\Dashboard;\nuse App\\Livewire\\ShowPosts;\nuse App\\Livewire\\ShowUsers;\n\nRoute::get('/', Dashboard::class);\n\nRoute::get('/posts', ShowPosts::class);\n\nRoute::get('/users', ShowUsers::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Posts Parent Component in PHP\nDESCRIPTION: A Livewire component that renders a list of posts with a configurable limit. Demonstrates parent component implementation with data fetching.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/understanding-nesting.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\n\nclass Posts extends Component\n{\n    public $postLimit = 2;\n\n    public function render()\n    {\n        return view('livewire.posts', [\n            'posts' => Auth::user()->posts()\n                ->limit($this->postLimit)->get(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Named Route in Laravel\nDESCRIPTION: An example of defining a named route in Laravel that can be referenced in Livewire redirects.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    Route::get('/user/profile', function () {\n        // ...\n    })->name('profile');\n```\n\n----------------------------------------\n\nTITLE: Using Live Modifier with $wire.entangle in Blade\nDESCRIPTION: This snippet shows how to use the .live modifier with $wire.entangle to update the server-side state immediately when the user interacts with the UI.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ open: $wire.entangle('showDropdown').live }\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Persisting Elements Across Page Visits with @persist\nDESCRIPTION: Using @persist directive to maintain element state across page navigation. This example shows how to keep an audio player playing continuously when navigating between pages.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n@persist('player')\n    <audio src=\"{{ $episode->file }}\" controls></audio>\n@endpersist\n```\n\n----------------------------------------\n\nTITLE: Excluding Certain Values from Query String (PHP)\nDESCRIPTION: This example demonstrates how to exclude certain values from appearing in the query string using the 'except' parameter in the #[Url] attribute.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\n\nclass ShowUsers extends Component\n{\n    #[Url(except: '')]\n    public $search = '';\n\n    public function mount() {\n        $this->search = auth()->user()->username;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Global Livewire Events in Alpine\nDESCRIPTION: Demonstrates how to listen for Livewire events from any component on the page using Alpine. The example shows using the .window modifier with x-on to listen globally.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<div x-on:post-created.window=\"...\"></div>\n```\n\n----------------------------------------\n\nTITLE: Blade Template for Invoice Download Component\nDESCRIPTION: Blade template showing the frontend implementation of the invoice download component with a download button using wire:click directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/downloads.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>{{ $invoice->title }}</h1>\n\n    <span>{{ $invoice->date }}</span>\n    <span>{{ $invoice->amount }}</span>\n\n    <button type=\"button\" wire:click=\"download\">Download</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Targets from Loading Indicators in Livewire\nDESCRIPTION: Demonstrates how to show loading indicators for all actions except specific ones using wire:target.except modifier.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:loading wire:target.except=\"download\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Malicious input element for manipulating postId\nDESCRIPTION: An example of how a malicious user could inject an HTML element to modify the postId property in an insecure Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" wire:model=\"postId\">\n```\n\n----------------------------------------\n\nTITLE: Livewire Method for Deleting Posts in PHP\nDESCRIPTION: A Livewire component method that handles post deletion. This method accepts a postId parameter, finds the corresponding post, performs authorization, and deletes it.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function deletePost($postId)\n{\n    $post = Post::find($postId);\n\n    // Authorize user can delete...\n    auth()->user()->can('update', $post);\n\n    $post->delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Livewire 3 Updated Lifecycle Hooks\nDESCRIPTION: Comprehensive comparison of lifecycle hooks between Livewire 2 and 3, showing the new syntax for component initialization, element handling, and message processing hooks.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('component.init', ({ component, cleanup }) => {})\n\nLivewire.hook('element.init', ({ el, component }) => {})\n\nLivewire.hook('morph.updating', ({ el, toEl, component }) => {})\n\nLivewire.hook('morph.updated', ({ el, component }) => {})\n\nLivewire.hook('morph.removed', ({ el, component }) => {})\n\nLivewire.hook('commit', ({ component, commit, respond, succeed, fail }) => {\n    // Equivalent of 'message.sent'\n\n    succeed(({ snapshot, effects }) => {\n        // Equivalent of 'message.received'\n\n        queueMicrotask(() => {\n            // Equivalent of 'message.processed'\n        })\n    })\n\n    fail(() => {\n        // Equivalent of 'message.failed'\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Route for the Livewire Component\nDESCRIPTION: PHP code to add a route for the counter component in Laravel's routes/web.php file. This maps the /counter URL to the Counter component class.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\Counter;\n\nRoute::get('/counter', Counter::class);\n```\n\n----------------------------------------\n\nTITLE: Custom Polling Interval in Blade Templates\nDESCRIPTION: Blade template examples showing how to customize polling intervals using seconds or milliseconds. These directives allow for controlling how frequently the component refreshes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-poll.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll.15s> <!-- In seconds... -->\n\n<div wire:poll.15000ms> <!-- In milliseconds... -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Component-level Morph Hooks in Livewire\nDESCRIPTION: Shows how to use component-level morph hooks in Livewire. These hooks are fired for each Livewire component, providing access to the component element before and after morphing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('morph',  ({ el, component }) => {\n\t// Runs just before the child elements in `component` are morphed\n})\n\nLivewire.hook('morphed',  ({ el, component }) => {\n    // Runs after all child elements in `component` are morphed\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing @persist in a Laravel Layout File\nDESCRIPTION: Example of placing a persisted audio player in a main layout file to make it available across all pages. The persisted element should be outside of Livewire components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- resources/views/components/layouts/app.blade.php -->\n\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n        <title>{{ $title ?? 'Page Title' }}</title>\n    </head>\n    <body>\n        <main>\n            {{ $slot }}\n        </main>\n\n        @persist('player') <!-- [tl! highlight:2] -->\n            <audio src=\"{{ $episode->file }}\" controls></audio>\n        @endpersist\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Storing Query String in Browser History (PHP)\nDESCRIPTION: This example demonstrates how to use the 'history' parameter in the #[Url] attribute to store query string changes in the browser's history, allowing for back-button functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\n\nclass ShowUsers extends Component\n{\n    #[Url(history: true)]\n    public $search = '';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Persistent Middleware in Service Provider\nDESCRIPTION: Example of how to add custom middleware to Livewire's persistent middleware list using a Service Provider. Shows the implementation in AppServiceProvider's boot method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse Livewire;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Livewire::addPersistentMiddleware([ // [tl! highlight:2]\n            App\\Http\\Middleware\\EnsureUserHasRole::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Delay Times for Loading Indicators in Livewire\nDESCRIPTION: Demonstrates how to use different predefined delay intervals for loading indicators in Livewire, ranging from 50ms to 1000ms.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:loading.delay.shortest>...</div> <!-- 50ms -->\n<div wire:loading.delay.shorter>...</div>  <!-- 100ms -->\n<div wire:loading.delay.short>...</div>    <!-- 150ms -->\n<div wire:loading.delay>...</div>          <!-- 200ms -->\n<div wire:loading.delay.long>...</div>     <!-- 300ms -->\n<div wire:loading.delay.longer>...</div>   <!-- 500ms -->\n<div wire:loading.delay.longest>...</div>  <!-- 1000ms -->\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Synthesizer in ServiceProvider\nDESCRIPTION: Code showing how to register a custom Synthesizer in a Laravel service provider to make it available throughout the application.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Livewire::propertySynthesizer(AddressSynth::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable ShowPosts Component in PHP\nDESCRIPTION: A Livewire component for showing and deleting posts without proper authorization, demonstrating a security vulnerability.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    public function delete($id)\n    {\n        $post = Post::find($id);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.show-posts', [\n            'posts' => Auth::user()->posts,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Livewire Event Listeners\nDESCRIPTION: Implementation of global Livewire event listeners for initialization events.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    document.addEventListener('livewire:init', () => {\n        // Runs after Livewire is loaded but before it's initialized\n        // on the page...\n    })\n\n    document.addEventListener('livewire:initialized', () => {\n        // Runs immediately after Livewire has finished initializing\n        // on the page...\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mutating Livewire Properties with $wire in AlpineJS\nDESCRIPTION: A form that demonstrates how to modify Livewire properties from AlpineJS. The example shows how to clear an input field without a server roundtrip using the $wire object.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form wire:submit=\"save\">\n    <input wire:model=\"title\" type=\"text\">\n\n    <button type=\"button\" x-on:click=\"$wire.title = ''\">Clear</button> <!-- [tl! highlight] -->\n\n    <!-- ... -->\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating wire:model Directives\nDESCRIPTION: Shows the required changes to wire:model directives when migrating to Livewire 3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<input wire:model=\"...\">\n<input wire:model.live=\"...\">\n\n<input wire:model.defer=\"...\">\n<input wire:model=\"...\">\n\n<input wire:model.lazy=\"...\">\n<input wire:model.blur=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Rendering a Nested Component in Blade Template\nDESCRIPTION: The Blade template for the Dashboard component showing how to include a nested Livewire component. This template demonstrates the basic syntax for rendering a child component within a parent.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>Dashboard</h1>\n\n    <livewire:todo-list /> <!-- [tl! highlight] -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with Stringable Property\nDESCRIPTION: A Livewire component that converts a string property to a Laravel Stringable object during initialization, demonstrating a more complex property type.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CreatePost extends Component\n{\n    public $title = '';\n\n    public function mount()\n    {\n        $this->title = str($this->title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with View-Based Placeholder\nDESCRIPTION: Example of implementing a placeholder using a dedicated view file for more complex loading states.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lazy.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function placeholder(array $params = [])\n{\n    return view('livewire.placeholders.skeleton', $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Pagination in Livewire Component (PHP)\nDESCRIPTION: Shows how to use Laravel's cursor pagination for improved performance with large datasets in a Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return view('show-posts', [\n        'posts' => Post::cursorPaginate(10),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Scroll Position with wire:scroll\nDESCRIPTION: Adding wire:scroll to a scrollable element to preserve its scroll position across page navigations. Used in combination with @persist to maintain both the element and its scroll state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n@persist('scrollbar')\n<div class=\"overflow-y-scroll\" wire:scroll> <!-- [tl! highlight] -->\n    <!-- ... -->\n</div>\n@endpersist\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Component with Props\nDESCRIPTION: Implementation showing how to pass and handle props in a lazy-loaded component with date range functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lazy.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<input type=\"date\" wire:model=\"start\">\n<input type=\"date\" wire:model=\"end\">\n\n<livewire:revenue lazy :$start :$end />\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Policy for Post authorization\nDESCRIPTION: Command to generate a Laravel Policy for the Post model, which will be used to authorize post deletion based on user ownership.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:policy PostPolicy --model=Post\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Tags with Navigation Tracking\nDESCRIPTION: Implementation of script tags with data-navigate-track attribute for detecting asset changes across page navigation\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Page one -->\n<head>\n    <script src=\"/app.js?id=123\" data-navigate-track></script>\n</head>\n\n<!-- Page two -->\n<head>\n    <script src=\"/app.js?id=456\" data-navigate-track></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Testing Cookie Handling in Livewire Cart Component\nDESCRIPTION: Example of a Livewire Cart component that loads a discount token from a cookie and its corresponding test case showing how to set cookies during testing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Livewire\\Attributes\\Url;\nuse App\\Models\\Post;\n\nclass Cart extends Component\n{\n    public $discountToken;\n\n    public mount()\n    {\n        $this->discountToken = request()->cookie('discountToken');\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\Cart;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass CartTest extends TestCase\n{\n    public function test_can_load_discount_token_from_a_cookie()\n    {\n        Livewire::withCookies(['discountToken' => 'CALEB2023'])\n            ->test(Cart::class)\n            ->assertSet('discountToken', 'CALEB2023');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing wire:init Directive in Blade Template for Livewire\nDESCRIPTION: This snippet demonstrates how to use the wire:init directive in a Blade template to trigger the loadPosts action immediately after the Livewire component is rendered. This approach is useful for loading data right after the page load without delaying the initial page rendering.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-init.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:init=\"loadPosts\">\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Class-based Volt Component Example\nDESCRIPTION: Example of a class-based Volt component implementation with state and methods\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<?php\n\nuse Livewire\\Volt\\Component;\n\nnew class extends Component {\n    public $count = 0;\n\n    public function increment()\n    {\n        $this->count++;\n    }\n} ?>\n\n<div>\n    <h1>{{ $count }}</h1>\n    <button wire:click=\"increment\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Directive Implementation\nDESCRIPTION: Implementation of a custom wire:confirm directive using Livewire.directive().\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.directive('confirm', ({ el, directive, component, cleanup }) => {\n    let content =  directive.expression\n\n    let onClick = e => {\n        if (! confirm(content)) {\n            e.preventDefault()\n            e.stopImmediatePropagation()\n        }\n    }\n\n    el.addEventListener('click', onClick, { capture: true })\n\n    cleanup(() => {\n        el.removeEventListener('click', onClick)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: StringableSynth Implementation\nDESCRIPTION: The implementation of Livewire's internal Synthesizer for handling Laravel Stringable objects, showing the match, dehydrate, and hydrate methods.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Stringable;\n\nclass StringableSynth extends Synth\n{\n    public static $key = 'str';\n\n    public static function match($target)\n    {\n        return $target instanceof Stringable;\n    }\n\n    public function dehydrate($target)\n    {\n        return [$target->__toString(), []];\n    }\n\n    public function hydrate($value)\n    {\n        return str($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Computed Properties Across All Components\nDESCRIPTION: This example shows how to cache a computed property's value across all components in the application using the cache parameter, making the cached value shared between all instances.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Computed;\nuse App\\Models\\Post;\n\n#[Computed(cache: true)]\npublic function posts()\n{\n    return Post::all();\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Actions with Loading Indicators in Livewire\nDESCRIPTION: Demonstrates how to scope loading indicators to specific actions using wire:target. This example shows a loading message only when the remove action is triggered.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <!-- ... -->\n\n    <button type=\"submit\">Save</button>\n\n    <button type=\"button\" wire:click=\"remove\">Remove</button>\n\n    <div wire:loading wire:target=\"remove\">  <!-- [tl! highlight:2] -->\n        Removing post...\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Page Expiration Behavior in Livewire 3\nDESCRIPTION: Shows how to handle page expiration in Livewire 3 using the request hook system instead of the previous onPageExpired method. The hook intercepts 419 status codes and allows custom handling of expired pages.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('request', ({ fail }) => {\n    fail(({ status, preventDefault }) => {\n        if (status === 419) {\n            preventDefault()\n\n            confirm('Your custom page expiration behavior...')\n        }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for Dynamic Event Names in Livewire\nDESCRIPTION: Shows how to listen for dynamically named events. The example demonstrates a component listening for a specific 'post-updated' event that includes the current post's ID in the event name.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse App\\Models\\Post;\nuse Livewire\\Attributes\\On; // [tl! highlight]\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n\t#[On('post-updated.{post.id}')] // [tl! highlight]\n    public function refreshPost()\n    {\n\t\t// ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Handler\nDESCRIPTION: Implementation of a multi-step form using dynamic component rendering in Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass Steps extends Component\n{\n    public $current = 'step-one';\n\n    protected $steps = [\n        'step-one',\n        'step-two',\n        'step-three',\n    ];\n\n    public function next()\n    {\n        $currentIndex = array_search($this->current, $this->steps);\n\n        $this->current = $this->steps[$currentIndex + 1];\n    }\n\n    public function render()\n    {\n        return view('livewire.todo-list');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Layout Template with Artisan\nDESCRIPTION: Artisan command to generate a default layout file for Livewire components. Creates a Blade layout that Livewire will automatically use for rendering components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:layout\n```\n\n----------------------------------------\n\nTITLE: Defining a Route for a Full-Page Livewire Component\nDESCRIPTION: Example of registering a Livewire component as a full-page component for a specific route in Laravel.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\ShowPosts;\n\nRoute::get('/posts', ShowPosts::class);\n```\n\n----------------------------------------\n\nTITLE: Using the wire:click Directive on a Button in HTML\nDESCRIPTION: An HTML example showing how to attach the wire:click directive to a button element to trigger the download method defined in the ShowInvoice component when clicked.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-click.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" wire:click=\"download\"> <!-- [tl! highlight] -->\n    Download Invoice\n</button>\n```\n\n----------------------------------------\n\nTITLE: Fade-out Transition Example\nDESCRIPTION: Demonstrates implementation of a fade-out transition with custom duration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-transition.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div wire:transition.out.opacity.duration.200ms>\n```\n\n----------------------------------------\n\nTITLE: Creating the Application Layout in Blade\nDESCRIPTION: Default Blade layout template for Livewire components. This HTML structure includes necessary meta tags and a slot for rendering the component content.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n        <title>{{ $title ?? 'Page Title' }}</title>\n    </head>\n    <body>\n        {{ $slot }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component with Nested Complex Types\nDESCRIPTION: A Livewire component that demonstrates nested complex types - a Laravel collection containing a Laravel Stringable object. This shows how Livewire handles deeply nested property types.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Todos extends Component\n{\n    public $todos;\n\n    public function mount() {\n        $this->todos = collect([\n            'first',\n            'second',\n            str('third'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Livewire Component with Omitted Render Method\nDESCRIPTION: A simplified component that omits the render() method. Livewire will automatically use the conventional view name for this component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Display Property for Loading Indicators in Livewire\nDESCRIPTION: Shows how to specify the CSS display property used when showing loading indicators. This example uses flex display instead of the default inline-block.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<div class=\"flex\" wire:loading.flex>...</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Query String on Page Load (PHP)\nDESCRIPTION: This snippet shows how to always include a value in the query string, even when it's empty, using the 'keep' parameter in the #[Url] attribute.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Url;\nuse Livewire\\Component;\n\nclass ShowUsers extends Component\n{\n    #[Url(keep: true)]\n    public $search = '';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Component Snapshot in HTML Output\nDESCRIPTION: How Livewire embeds the component snapshot as JSON in the wire:snapshot HTML attribute. This allows the JavaScript core to access the component's state directly from the DOM.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div wire:id=\"...\" wire:snapshot=\"{ state: {...}, memo: {...} }\">\n    Count: 1\n\n    <button wire:click=\"increment\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Simple Pagination in Livewire Component (PHP)\nDESCRIPTION: Demonstrates how to use Laravel's simplePaginate() method for faster and simpler pagination in a Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return view('show-posts', [\n        'posts' => Post::simplePaginate(10),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Serialized Component State in JSON Format\nDESCRIPTION: The JSON representation of a component's state after dehydration, showing how a simple string property is serialized.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nstate: { title: '' },\n```\n\n----------------------------------------\n\nTITLE: Livewire JavaScript Initialization\nDESCRIPTION: Frontend initialization code that sets up event listeners and handles component updates.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet el = document.querySelector('wire\\\\:id')\n\nlet id = el.getAttribute('wire:id')\nlet jsonSnapshot = el.getAttribute('wire:snapshot')\nlet snapshot = JSON.parse(jsonSnapshot)\n\nlet component = { id, snapshot }\n\nwalk(el, el => {\n    el.hasAttribute('wire:click') {\n        let action = el.getAttribute('wire:click')\n\n        el.addEventListener('click', e => {\n            updateComponent(el, component, action)\n        })\n    }\n})\n\nfunction updateComponent(el, component, action) {\n    let response fetch('/livewire/update', {\n        body: JSON.stringify({\n            \"snapshot\": snapshot,\n            \"calls\": [\n                [\"method\": action, \"params\": []],\n            ]\n        })\n    })\n\n    // To be continued...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Livewire's Upgrade Command in Laravel\nDESCRIPTION: Use the built-in Artisan command to automatically upgrade your Livewire 2 application to version 3. This command provides prompts to handle each breaking change.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:upgrade\n```\n\n----------------------------------------\n\nTITLE: Using wire:key in @foreach Loops\nDESCRIPTION: Add a unique wire:key attribute to elements within a @foreach loop to ensure proper DOM diffing and updates when the loop changes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <div wire:key=\"{{ $post->id }}\"> <!-- [tl! highlight] -->\n            <!-- ... -->\n        </div>\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Content Assertions in Livewire Tests\nDESCRIPTION: Methods for testing rendered HTML content, including text content, HTML structure, and ordered content assertions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nassertSee($post->title)\nassertDontSee($post->title)\nassertSeeHtml('<div>...</div>')\nassertDontSeeHtml('<div>...</div>')\nassertSeeText($post->title)\nassertDontSeeText($post->title)\nassertSeeInOrder(['...', '...'])\nassertSeeHtmlInOrder([$firstString, $secondString])\n```\n\n----------------------------------------\n\nTITLE: Using redirectIntended in Livewire Components\nDESCRIPTION: Example of using redirectIntended() method to redirect users back to their previous page with a fallback URL option.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    $this->redirectIntended('/default/url');\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Blade Templates in a Livewire Component's Render Method\nDESCRIPTION: This example shows the traditional approach of passing data to a Blade template in a Livewire component's render method, which can be improved by using computed properties in certain scenarios.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return view('livewire.show-posts', [\n        'posts' => Post::all(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Blade Template with Computed Property\nDESCRIPTION: Optimized Blade template using computed property that only retrieves posts when access is granted.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if (Auth::user()->can_see_posts)\n        @foreach ($this->posts as $post)\n            <!-- ... -->\n        @endforeach\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component Properties\nDESCRIPTION: Test setting and asserting Livewire component properties using the set() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass CreatePostTest extends TestCase\n{\n    public function test_can_set_title()\n    {\n        Livewire::test(CreatePost::class)\n            ->set('title', 'Confessions of a serial soaker')\n            ->assertSet('title', 'Confessions of a serial soaker');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using wire:dirty.remove to Hide Elements When Data Changes\nDESCRIPTION: This example shows the opposite behavior of wire:dirty by using the .remove modifier. The element is visible by default and only hides when the component's state becomes dirty, indicating that client and server data are no longer in sync.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/dirty.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:dirty.remove>The data is in-sync...</div>\n```\n\n----------------------------------------\n\nTITLE: Third-party Event Integration with Trix Editor\nDESCRIPTION: Example of integrating Livewire with the Trix rich text editor through custom event handling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <!-- ... -->\n\n    <trix-editor\n        wire:trix-change=\"setPostContent($event.target.value)\"\n    ></trix-editor>\n\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Installing Volt via Composer\nDESCRIPTION: Command to install Volt package using Composer package manager\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require livewire/volt\n```\n\n----------------------------------------\n\nTITLE: Example PHP Code for Hydrating a Collection Property\nDESCRIPTION: Simplified code showing how Livewire uses metadata to recreate a Laravel collection property from a JSON snapshot. It extracts both the data and metadata to instantiate the proper class.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[ $state, $metadata ] = request('snapshot.state.todos');\n\n$collection = new $metadata['class']($state);\n```\n\n----------------------------------------\n\nTITLE: Custom Address Synthesizer Implementation\nDESCRIPTION: A custom Synthesizer implementation for handling Address objects, showing how to properly dehydrate and hydrate a complex object type.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Dtos\\Address;\n\nclass AddressSynth extends Synth\n{\n    public static $key = 'address';\n\n    public static function match($target)\n    {\n        return $target instanceof Address;\n    }\n\n    public function dehydrate($target)\n    {\n        return [[\n            'street' => $target->street,\n            'city' => $target->city,\n            'state' => $target->state,\n            'zip' => $target->zip,\n        ], []];\n    }\n\n    public function hydrate($value)\n    {\n        $instance = new Address;\n\n        $instance->street = $value['street'];\n        $instance->city = $value['city'];\n        $instance->state = $value['state'];\n        $instance->zip = $value['zip'];\n\n        return $instance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Posts Component Blade Template\nDESCRIPTION: Blade template for the Posts component showing how to render nested ShowPost components with dynamic data binding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/understanding-nesting.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    Post Limit: <input type=\"number\" wire:model.live=\"postLimit\">\n\n    @foreach ($posts as $post)\n        <livewire:show-post :$post :key=\"$post->id\">\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Response Header in Livewire\nDESCRIPTION: Shows how to modify the response and set custom headers in a Livewire component\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Illuminate\\Http\\Response;\n\nclass ShowPost extends Component\n{\n    public function render()\n    {\n        return view('livewire.show-post')\n            ->response(function(Response $response) {\n                $response->header('X-Custom-Header', true);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Attributes in Volt Components\nDESCRIPTION: Example showing how to use class attributes with layout and title in Volt components\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<?php\n\nuse Livewire\\Attributes\\{Layout, Title};\nuse Livewire\\Volt\\Component;\n\nnew\n#[Layout('layouts.guest')]\n#[Title('Login')]\nclass extends Component\n{\n    public string $name = '';\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Livewire Component\nDESCRIPTION: Demonstrates how to implement the exception() hook to intercept and handle specific exceptions in a Livewire component. Shows usage of stopPropagation to prevent exception bubbling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public function mount() // [tl! highlight:3]\n    {\n        $this->post = Post::find($this->postId);\n    }\n\n    public function exception($e, $stopPropagation) {\n        if ($e instanceof NotFoundException) {\n            $this->notify('Post is not found');\n            $stopPropagation();\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Component Without Render Method\nDESCRIPTION: Streamlined component implementation using computed property without a render method, relying on Livewire's conventional view resolution.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPosts extends Component\n{\n    #[Computed]\n    public function posts()\n    {\n        return Post::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling URL Query String Tracking in Livewire Pagination (PHP)\nDESCRIPTION: Demonstrates how to disable URL query string tracking for pagination using the WithoutUrlPagination trait.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\WithoutUrlPagination;\nuse Livewire\\WithPagination;\nuse Livewire\\Component;\n\nclass ShowPosts extends Component\n{\n    use WithPagination, WithoutUrlPagination; // [tl! highlight]\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriber Count Component in PHP with Livewire\nDESCRIPTION: This snippet demonstrates a Livewire component class that renders a view with the current subscriber count for an authenticated user. It uses Eloquent relationships to fetch the count.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/polling.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\n\nclass SubscriberCount extends Component\n{\n    public function render()\n    {\n        return view('livewire.subscriber-count', [\n            'count' => Auth::user()->subscribers->count(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Origin-top Transition Example\nDESCRIPTION: Shows how to implement a transition with top origin scaling effect.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-transition.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div wire:transition.scale.origin.top>\n```\n\n----------------------------------------\n\nTITLE: Automatically Updating Livewire Assets in Composer\nDESCRIPTION: JSON configuration for Composer to automatically update Livewire assets after each update.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"post-update-cmd\": [\n            \"@php artisan vendor:publish --tag=livewire:assets --ansi --force\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Component with String Property\nDESCRIPTION: A simple Livewire component class defining a title property with an empty string value, representing the most basic case of property serialization.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CreatePost extends Component\n{\n    public $title = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in Volt Components\nDESCRIPTION: Shows how to implement form validation with custom rules, messages, and attributes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Livewire\\Volt\\{rules};\n\nrules(['name' => 'required|min:6', 'email' => 'required|email']);\n\n$submit = function () {\n    $this->validate();\n\n    // ...\n};\n\n?>\n\n<form wire:submit.prevent=\"submit\">\n    //\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handling in PHP\nDESCRIPTION: Demonstrates the new event handling syntax in Livewire 3 PHP components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// Dispatching...\nclass CreatePost extends Component\n{\n    public Post $post;\n\n    public function save()\n    {\n        $this->dispatch('post-created', postId: $this->post->id);\n    }\n}\n\n// Listening...\nclass Dashboard extends Component\n{\n    #[On('post-created')]\n    public function postAdded($postId)\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Component Declaration\nDESCRIPTION: Shows how to implement lazy loading for a Livewire component using the lazy parameter.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lazy.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<livewire:revenue lazy />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Traits and Interfaces\nDESCRIPTION: Shows how to include custom traits and interfaces in a Volt component using the uses function\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse function Livewire\\Volt\\{uses};\n\nuse App\\Contracts\\Sorting;\nuse App\\Concerns\\WithSorting;\n\nuses([Sorting::class, WithSorting::class]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware for File Uploads in Livewire (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to customize the middleware for Livewire's temporary file upload endpoint in the configuration file.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'temporary_file_upload' => [\n    // ...\n    'middleware' => 'throttle:5,1', // Only allow 5 uploads per user per minute\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Livewire Properties in Blade View\nDESCRIPTION: Demonstrate how to display a component property in the Blade template using standard Blade syntax.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>Title: \"{{ $title }}\"</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Upload Directory in Livewire (PHP)\nDESCRIPTION: This PHP snippet shows how to customize the temporary directory for file uploads in Livewire's configuration file.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'temporary_file_upload' => [\n    // ...\n    'directory' => 'tmp',\n],\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads in Livewire Component (PHP)\nDESCRIPTION: A PHPUnit test case for testing file uploads in a Livewire component. It uses Laravel's file upload testing helpers and Livewire's testing utilities.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nuse App\\Livewire\\UploadPhoto;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass UploadPhotoTest extends TestCase\n{\n    public function test_can_upload_photo()\n    {\n        Storage::fake('avatars');\n\n        $file = UploadedFile::fake()->image('avatar.png');\n\n        Livewire::test(UploadPhoto::class)\n            ->set('photo', $file)\n            ->call('upload', 'uploaded-avatar.png');\n\n        Storage::disk('avatars')->assertExists('uploaded-avatar.png');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Volt Component\nDESCRIPTION: Shows how to add pagination support to a Volt component using the usesPagination function and rendering paginated posts with navigation links\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Livewire\\Volt\\{with, usesPagination};\n\nusesPagination();\n\nwith(fn () => ['posts' => Post::paginate(10)]);\n\n?>\n\n<div>\n    @foreach ($posts as $post)\n        //\n    @endforeach\n\n    {{ $posts->links() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Livewire Documentation Structure in YAML\nDESCRIPTION: This YAML structure organizes the Livewire documentation into categorical sections with each entry containing a URI path and file location. The structure includes categories for Getting Started, Essentials, Features, HTML Directives, Concepts, Advanced, and Packages.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/__nav.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nGetting Started:\n    Quickstart: { uri: /docs/quickstart, file: /quickstart.md }\n    Installation: { uri: /docs/installation, file: /installation.md }\n    Upgrade Guide: { uri: /docs/upgrading, file: /upgrading.md }\nEssentials:\n    Components: { uri: /docs/components, file: /components.md }\n    Properties: { uri: /docs/properties, file: /properties.md }\n    Actions: { uri: /docs/actions, file: /actions.md }\n    Forms: { uri: /docs/forms, file: /forms.md }\n    Events: { uri: /docs/events, file: /events.md }\n    Lifecycle Hooks: { uri: /docs/lifecycle-hooks, file: /lifecycle-hooks.md }\n    Nesting Components: { uri: /docs/nesting, file: /nesting.md }\n    Testing: { uri: /docs/testing, file: /testing.md }\nFeatures:\n    Alpine: { uri: /docs/alpine, file: /alpine.md }\n    Navigate: { uri: /docs/navigate, file: /navigate.md }\n    Lazy Loading: { uri: /docs/lazy, file: /lazy.md }\n    Validation: { uri: /docs/validation, file: /validation.md }\n    File Uploads: { uri: /docs/uploads, file: /uploads.md }\n    Pagination: { uri: /docs/pagination, file: /pagination.md }\n    URL Query Parameters: { uri: /docs/url, file: /url.md }\n    Computed Properties: { uri: /docs/computed-properties, file: /computed-properties.md }\n    Session Properties: { uri: /docs/session-properties, file: /session-properties.md }\n    Redirecting: { uri: /docs/redirecting, file: /redirecting.md }\n    File Downloads: { uri: /docs/downloads, file: /downloads.md }\n    Locked Properties: { uri: /docs/locked, file: /locked.md }\n    Request Bundling: { uri: /docs/bundling, file: /bundling.md }\n    Offline States: { uri: /docs/offline, file: /offline.md }\n    Teleport: { uri: /docs/teleport, file: /teleport.md }\nHTML Directives:\n    wire:click: { uri: /docs/wire-click, file: /wire-click.md }\n    wire:submit: { uri: /docs/wire-submit, file: /wire-submit.md }\n    wire:model: { uri: /docs/wire-model, file: /wire-model.md }\n    wire:loading: { uri: /docs/wire-loading, file: /wire-loading.md }\n    wire:navigate: { uri: /docs/wire-navigate, file: /wire-navigate.md }\n    wire:current: { uri: /docs/wire-current, file: /wire-current.md }\n    wire:cloak: { uri: /docs/wire-cloak, file: /wire-cloak.md }\n    wire:dirty: { uri: /docs/wire-dirty, file: /wire-dirty.md }\n    wire:confirm: { uri: /docs/wire-confirm, file: /wire-confirm.md }\n    wire:transition: { uri: /docs/wire-transition, file: /wire-transition.md }\n    wire:init: { uri: /docs/wire-init, file: /wire-init.md }\n    wire:poll: { uri: /docs/wire-poll, file: /wire-poll.md }\n    wire:offline: { uri: /docs/wire-offline, file: /wire-offline.md }\n    wire:ignore: { uri: /docs/wire-ignore, file: /wire-ignore.md }\n    wire:replace: { uri: /docs/wire-replace, file: /wire-replace.md }\n    wire:show: { uri: /docs/wire-show, file: /wire-show.md }\n    wire:stream: { uri: /docs/wire-stream, file: /wire-stream.md }\n    wire:text: { uri: /docs/wire-text, file: /wire-text.md }\nConcepts:\n    Morphing: { uri: /docs/morphing, file: /morph.md }\n    Hydration: { uri: /docs/hydration, file: /hydration.md }\n    Nesting: { uri: /docs/understanding-nesting, file: /understanding-nesting.md }\nAdvanced:\n    Troubleshooting: { uri: /docs/troubleshooting, file: /troubleshooting.md }\n    Security: { uri: /docs/security, file: /security.md }\n    JavaScript: { uri: /docs/javascript, file: /javascript.md }\n    Synthesizers: { uri: /docs/synthesizers, file: /synthesizers.md }\n    Contribution Guide: { uri: /docs/contribution-guide, file: /contribution-guide.md }\nPackages:\n    Volt: { uri: /docs/volt, file: /volt.md }\n---\n```\n\n----------------------------------------\n\nTITLE: Using wire:ignore.self in Blade Template\nDESCRIPTION: Shows how to use wire:ignore.self directive to only ignore changes to the root element's attributes while still allowing updates to its contents.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-ignore.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:ignore.self>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Persisting Computed Properties with Cache\nDESCRIPTION: Shows how to persist computed property values in the application cache with custom duration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$count = computed(function () {\n    return User::count();\n})->persist(seconds: 10);\n```\n\n----------------------------------------\n\nTITLE: Basic Offline Message Display in Blade\nDESCRIPTION: Shows how to display a basic offline message using the wire:offline directive. The element will be hidden by default and only become visible when the user loses internet connection.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/offline.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:offline>\n    This device is currently offline.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Specifying Livewire Component Updates and Method Calls in JSON\nDESCRIPTION: This JSON structure defines updates to the component's data and method calls. It includes a snapshot, updates to specific properties, and an array of method calls with their parameters.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/the-livewire-protocol.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"snapshot\": {...},\n    \"updates\": {\n        \"todos.0\": \"hey\",\n    },\n    \"calls\": [\n        [\n            \"path\": \"\",\n            \"method\": \"add\",\n            \"params\": [],\n        ]    \n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Pagination Theme\nDESCRIPTION: Demonstrates how to set Bootstrap as the pagination theme instead of the default Tailwind theme\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nusesPagination(theme: 'bootstrap');\n```\n\n----------------------------------------\n\nTITLE: Blade Template with Livewire's Injected Morph Markers\nDESCRIPTION: The same form template but with Livewire's automatically injected HTML comments that mark conditional blocks to improve morphing accuracy.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <div>\n        <input wire:model=\"title\">\n    </div>\n\n    <!--[if BLOCK]><![endif]--> <!-- [tl! highlight] -->\n    @if ($errors->has('title'))\n        <div>Error: {{ $errors->first('title') }}</div>\n    @endif\n    <!--[if ENDBLOCK]><![endif]--> <!-- [tl! highlight] -->\n\n    <div>\n        <button>Save</button>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Post Listing Template with Delete Action\nDESCRIPTION: Blade template for displaying posts with delete functionality using wire:click directive to pass post ID as parameter.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <div wire:key=\"{{ $post->id }}\">\n            <h1>{{ $post->title }}</h1>\n            <span>{{ $post->content }}</span>\n\n            <button wire:click=\"delete({{ $post->id }})\">Delete</button>\n        </div>\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: PHP Component Class Definition for Todos Example\nDESCRIPTION: A simple Livewire component class that manages a todo list. It holds the current todo item and a list of todos, with a method to add new items to the list.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Todos extends Component\n{\n    public $todo = '';\n\n    public $todos = [\n        'first',\n        'second',\n    ];\n\n    public function add()\n    {\n        $this->todos[] = $this->todo;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Livewire Component Tests in PHP\nDESCRIPTION: These methods are used to set up and configure Livewire component tests. They include initializing component tests, setting authenticated users, and configuring test parameters.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nLivewire::test(CreatePost::class)\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::test(UpdatePost::class, ['post' => $post])\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::actingAs($user)\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::withQueryParams(['search' => '...'])\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::withCookie('color', 'blue')\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::withCookies(['color' => 'blue', 'name' => 'Taylor])\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::withHeaders(['X-COLOR' => 'blue', 'X-NAME' => 'Taylor])\n```\n\nLANGUAGE: php\nCODE:\n```\nLivewire::withoutLazyLoading()\n```\n\n----------------------------------------\n\nTITLE: Keep-Alive Polling in Blade Template\nDESCRIPTION: A Blade template example showing how to maintain continuous polling even when a browser tab is in the background. The keep-alive modifier prevents Livewire's default background throttling behavior.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-poll.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:poll.keep-alive>\n```\n\n----------------------------------------\n\nTITLE: Running Volt Installation Command\nDESCRIPTION: Artisan command to install Volt's service provider file\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan volt:install\n```\n\n----------------------------------------\n\nTITLE: Testing Event Listeners in Livewire\nDESCRIPTION: Shows how to test event listeners by dispatching events and asserting expected behaviors.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse App\\Livewire\\Dashboard;\nuse Livewire\\Livewire;\n\nclass DashboardTest extends TestCase\n{\n    use RefreshDatabase;\n\n    public function test_it_updates_post_count_when_a_post_is_created()\n    {\n        Livewire::test(Dashboard::class)\n            ->assertSee('Posts created: 0')\n            ->dispatch('post-created')\n            ->assertSee('Posts created: 1');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Volt Component via Artisan\nDESCRIPTION: Commands for generating Volt components with various options including test generation\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:volt counter\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:volt counter --test --pest\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:volt counter --class\n```\n\n----------------------------------------\n\nTITLE: ShowPost Component Blade Template\nDESCRIPTION: Template for displaying individual post content with refresh functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/understanding-nesting.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>{{ $post->title }}</h1>\n\n    <p>{{ $post->content }}</p>\n\n    <button wire:click=\"$refresh\">Refresh post</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: New Livewire 3 Configuration Options\nDESCRIPTION: New configuration options introduced in Livewire 3, including legacy model binding, asset injection, navigation features, and pagination theming.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'legacy_model_binding' => false,\n\n'inject_assets' => true,\n\n'inject_morph_markers' => true,\n\n'navigate' => false,\n\n'pagination_theme' => 'tailwind',\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Components with Artisan Command\nDESCRIPTION: Use the --inline flag with the make:livewire command to generate an inline component where the template is included in the render method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan make:livewire CreatePost --inline\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Components in Livewire to Disable Default Isolation\nDESCRIPTION: This code example shows how to disable the default isolation behavior for lazy components in Livewire. By passing 'isolate: false' to the #[Lazy] attribute, multiple instances of the component will have their updates bundled into a single network request.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/bundling.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Livewire\\Attributes\\Lazy;\n\n#[Lazy(isolate: false)] // [tl! highlight]\nclass Revenue extends Component\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Importing and Initializing Livewire and Alpine in JavaScript\nDESCRIPTION: JavaScript code to manually import Livewire and Alpine, register plugins, and initialize the framework.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { Livewire, Alpine } from '../../vendor/livewire/livewire/dist/livewire.esm';\nimport Clipboard from '@ryangjchandler/alpine-clipboard'\n\nAlpine.plugin(Clipboard)\n\nLivewire.start()\n```\n\n----------------------------------------\n\nTITLE: Disabling Validation Message Localization in Livewire\nDESCRIPTION: Shows how to opt out of automatic message translation by setting translate: false in the #[Validate] attribute, preventing Laravel from localizing the validation message.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[Validate('required', message: 'Please provide a post title', translate: false)]\npublic $title;\n```\n\n----------------------------------------\n\nTITLE: Property Value Formatting with Updated Hook\nDESCRIPTION: Shows how to use the updated() hook to format property values after they've been updated.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass CreateUser extends Component\n{\n    public $username = '';\n\n    public $email = '';\n\n    public function updated($property)\n    {\n        // $property: The name of the current property that was updated\n\n        if ($property === 'username') {\n            $this->username = strtolower($this->username);\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Laravel View Cache After Livewire Upgrade\nDESCRIPTION: Clear Laravel's view cache to ensure all Blade views are re-compiled for Livewire 3 compatibility.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan view:clear\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Matching with wire:current in Blade\nDESCRIPTION: This snippet demonstrates the use of the .strict modifier with wire:current. It enforces a strict path string comparison, including trailing slashes, which is useful for more precise route matching.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-current.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/posts/\" wire:current.strict=\"font-bold\">Dashboard</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Basic AlpineJS Counter Example in HTML\nDESCRIPTION: A simple counter implementation using AlpineJS. This demonstrates how to declare a JavaScript data object, render dynamic content, and handle click events to update state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Declare a JavaScript object of data... -->\n<div x-data=\"{ count: 0 }\">\n    <!-- Render the current \"count\" value inside an element... -->\n    <h2 x-text=\"count\"></h2>\n\n    <!-- Increment the \"count\" value by \"1\" when a click event is dispatched... -->\n    <button x-on:click=\"count++\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Original Form Template with Validation\nDESCRIPTION: Example of a form template with duplicate input field patterns including validation messages before extraction into components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <input type=\"text\" wire:model=\"title\">\n    <div>\n        @error('title') <span class=\"error\">{{ $message }}</span> @enderror\n    </div>\n\n    <input type=\"text\" wire:model=\"content\">\n    <div>\n        @error('content') <span class=\"error\">{{ $message }}</span> @enderror\n    </div>\n\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handling in Templates\nDESCRIPTION: Shows the changes required for event-related directives in HTML/Blade templates.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<button wire:click=\"$emit('post-created')\">...</button>\n<button wire:click=\"$dispatch('post-created')\">...</button>\n\n<button wire:click=\"$emit('post-created', 1)\">...</button>\n<button wire:click=\"$dispatch('post-created', { postId: 1 })\">...</button>\n\n<button wire:click=\"$emitTo('foo', post-created', 1)\">...</button>\n<button wire:click=\"$dispatchTo('foo', 'post-created', { postId: 1 })\">...</button>\n\n<button x-on:click=\"$wire.emit('post-created', 1)\">...</button>\n<button x-on:click=\"$dispatch('post-created', { postId: 1 })\">...</button>\n```\n\n----------------------------------------\n\nTITLE: One-time Event Listener for Navigation\nDESCRIPTION: Example of adding a one-time event listener for navigation to prevent duplicate event handlers. This prevents the event listener from persisting across multiple page navigations.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('livewire:navigated', () => {\n    // ...\n}, { once: true })\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Counter Component\nDESCRIPTION: The HTML output generated after Livewire renders the Counter component. This shows how the dynamic PHP data is converted to static HTML that will be sent to the browser.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    Count: 1\n\n    <button wire:click=\"increment\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using queryString Method for Dynamic Options (PHP)\nDESCRIPTION: This snippet shows how to use the queryString method to define query string options, which can be useful for dynamic property options.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/url.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass ShowUsers extends Component\n{\n    // ...\n\n    protected function queryString()\n    {\n        return [\n            'search' => [\n                'as' => 'q',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Livewire Class Namespace in Configuration\nDESCRIPTION: Change the default namespace from App\\Http\\Livewire to App\\Livewire to match Livewire 3's conventions.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'class_namespace' => 'App\\\\Http\\\\Livewire', // [tl! remove]\n'class_namespace' => 'App\\\\Livewire', // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Busting Computed Property Cache in Livewire\nDESCRIPTION: This example shows how to invalidate a computed property's cache using unset() when the underlying data changes, ensuring the computed property will be re-evaluated.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\n\nclass ShowPosts extends Component\n{\n    public function createPost()\n    {\n        if ($this->posts->count() > 10) {\n            throw new \\Exception('Maximum post count exceeded');\n        }\n\n        Auth::user()->posts()->create(...);\n\n        unset($this->posts); // [tl! highlight]\n    }\n\n    #[Computed]\n    public function posts()\n    {\n        return Auth::user()->posts;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding keys to nested Livewire components in loops\nDESCRIPTION: Example showing how to add keys to both the parent element and a nested Livewire component within a loop.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n@foreach($posts as $post)\n    <div wire:key=\"{{ $post->id }}\">\n        ...\n        <livewire:show-post :$post :key=\"$post->id\" /> <!-- [tl! highlight] -->\n        ...\n    </div>\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Counter Component Blade Template\nDESCRIPTION: Blade template for the counter component showing the increment button and count display with Livewire wire:click directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <button wire:click=\"increment\">Increment</button>\n\n    <span>{{ $count }}</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Livewire Asset URL in Laravel\nDESCRIPTION: PHP code to set a custom URL for serving Livewire's JavaScript assets, useful for applications with global route prefixes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nLivewire::setScriptRoute(function ($handle) {\n    return Route::get('/custom/livewire/livewire.js', $handle);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing File Download Failure in PHP\nDESCRIPTION: Example of testing unsuccessful file downloads in Livewire components using assertNoFileDownloaded method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/downloads.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Invoice;\n\npublic function test_does_not_download_invoice_if_unauthorised()\n{\n    $invoice = Invoice::factory();\n\n    Livewire::test(ShowInvoice::class)\n        ->call('download')\n        ->assertNoFileDownloaded();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized Update Routes in Livewire 3\nDESCRIPTION: Demonstrates how to configure custom update routes in Livewire 3 to support localized URIs, replacing the automatic locale prefix handling from Livewire 2.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['prefix' => LaravelLocalization::setLocale()], function ()\n{\n    // Your other localized routes...\n\n    Livewire::setUpdateRoute(function ($handle) {\n        return Route::post('/livewire/update', $handle);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Updated HTML Output After Adding a Todo\nDESCRIPTION: The HTML output after adding a new todo ('third') to the list, showing how only a new list item is added without replacing the entire component's HTML.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form wire:submit=\"add\">\n    <ul>\n        <li>first</li>\n\n        <li>second</li>\n\n        <li>third</li> <!-- [tl! add] -->\n    </ul>\n\n    <input wire:model=\"todo\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Livewire Component Snapshot JSON Structure\nDESCRIPTION: The JSON snapshot structure used by Livewire to capture component state. It includes state data (public properties) and memo data (component identification information) needed to reconstruct the component on subsequent requests.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    state: {\n        count: 1,\n    },\n\n    memo: {\n        name: 'counter',\n\n        id: '1526456',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Livewire Update Route in Laravel\nDESCRIPTION: PHP code to add custom middleware to Livewire's update route for additional request handling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nLivewire::setUpdateRoute(function ($handle) {\n\treturn Route::post('/custom/livewire/update', $handle)\n        ->middleware([...]);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Commit Hooks in Livewire\nDESCRIPTION: Shows how to use commit hooks in Livewire. These hooks provide methods for intercepting both the request and response of a Livewire commit, allowing for custom handling of component updates.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nLivewire.hook('commit', ({ component, commit, respond, succeed, fail }) => {\n    // Runs immediately before a commit's payload is sent to the server...\n\n    respond(() => {\n        // Runs after a response is received but before it's processed...\n    })\n\n    succeed(({ snapshot, effects }) => {\n        // Runs after a successful response is received and processed\n        // with a new snapshot and list of effects...\n    })\n\n    fail(() => {\n        // Runs if some part of the request failed...\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Including Livewire Assets Manually in Blade Template\nDESCRIPTION: Blade directives to manually include Livewire's JavaScript and CSS assets in a Laravel view.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<html>\n<head>\n\t...\n\t@livewireStyles\n</head>\n<body>\n\t...\n\t@livewireScripts\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Event Listener Migration for Page Navigation\nDESCRIPTION: Converting DOMContentLoaded event listener to Livewire's navigated event for handling page navigation in SPA context\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('livewire:navigated', () => {\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages in Blade Templates\nDESCRIPTION: A Blade template snippet that checks for and displays flash messages from the session after a redirect.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n@if (session('status'))\n    <div class=\"alert alert-success\">\n        {{ session('status') }}\n    </div>\n@endif\n```\n\n----------------------------------------\n\nTITLE: Adding Classes on Offline State\nDESCRIPTION: Demonstrates how to add a CSS class to an element when the user goes offline using the class modifier with wire:offline directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/offline.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:offline.class=\"bg-red-300\">\n```\n\n----------------------------------------\n\nTITLE: Defining Route for Counter Component\nDESCRIPTION: Example of a Laravel route definition that returns a view containing a Volt component\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/counter', fn () => view('pages/counter.blade.php'));\n```\n\n----------------------------------------\n\nTITLE: Disabling Livewire's Auto-injecting Asset Behavior\nDESCRIPTION: PHP configuration to disable Livewire's automatic asset injection in the Laravel config file.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'inject_assets' => false,\n```\n\n----------------------------------------\n\nTITLE: Initial HTML Output for Todos Component\nDESCRIPTION: The rendered HTML output of the Todos component on initial load, showing the form with the list of todos ('first' and 'second') and the input field.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form wire:submit=\"add\">\n    <ul>\n        <li>first</li>\n\n        <li>second</li>\n    </ul>\n\n    <input wire:model=\"todo\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: PHP Pseudo-code for Component Hydration\nDESCRIPTION: Demonstration of how Livewire recreates a component instance from a snapshot. It creates a new instance of the component and populates its properties from the snapshot state data.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$state = request('snapshot.state');\n$memo = request('snapshot.memo');\n\n$instance = Livewire::new($memo['name'], $memo['id']);\n\nforeach ($state as $property => $value) {\n    $instance[$property] = $value;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Tests for Livewire in PHP\nDESCRIPTION: Example of how to create a unit test class for Livewire features, extending the TestCase class and adding test methods to verify functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\TestCase;\n\nclass UnitTest extends TestCase\n{\n    public function test_livewire_can_run_action(): void\n    {\n       // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding wire:key to elements in Blade loops\nDESCRIPTION: Example of adding wire:key to elements within a foreach loop to help Livewire track dynamic elements.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@foreach($posts as $post)\n    <div wire:key=\"{{ $post->id }}\"> <!-- [tl! highlight] -->\n        ...\n    </div>\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Basic Livewire Component with Show/Hide Functionality\nDESCRIPTION: Shows implementation of a ShowPost component class with a toggle for showing comments.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-transition.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public $showComments = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Binding in Livewire Components\nDESCRIPTION: Example of direct Eloquent model binding in Livewire 2, which is disabled by default in Livewire 3 but can be re-enabled via configuration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic Post $post;\n\nprotected $rules = [\n    'post.title' => 'required',\n    'post.description' => 'required',\n];\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Properties with wire:dirty and wire:target\nDESCRIPTION: This snippet shows how to target a specific property with the wire:dirty directive by using wire:target. It displays an 'Unsaved title...' indicator only when the 'title' property has been modified but not yet synchronized with the server.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/dirty.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"update\">\n    <input wire:model.blur=\"title\">\n\n    <div wire:dirty wire:target=\"title\">Unsaved title...</div> <!-- [tl! highlight] -->\n\n    <button type=\"submit\">Update</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Blade Template for Revenue Component\nDESCRIPTION: Simple Blade template that displays the revenue amount calculated in the Revenue component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lazy.md#2025-04-20_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    Revenue this month: {{ $amount }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listing Livewire Component Names\nDESCRIPTION: Common component naming convention for a Laravel Livewire application showing CRUD operations for posts and todo list functionality\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/rules/examples.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* CreatePost\n* UpdatePost\n* ShowPosts\n* SearchPosts\n* TodoList\n```\n\n----------------------------------------\n\nTITLE: Component Auto-Refresh Script\nDESCRIPTION: Implements a JavaScript interval to refresh a Livewire component every 2 seconds using the @script directive\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/components.md#2025-04-20_snippet_30\n\nLANGUAGE: blade\nCODE:\n```\n@script\n<script>\n    setInterval(() => {\n        $wire.$refresh()\n    }, 2000)\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Counter Component Usage with Livewire\nDESCRIPTION: Example of using the custom counter component with Livewire model binding.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<x-input-counter wire:model=\"quantity\" />\n```\n\n----------------------------------------\n\nTITLE: Livewire Component Mount Implementation\nDESCRIPTION: Detailed implementation of the mount process including component instantiation, ID generation, and snapshot creation.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function mount($name)\n{\n    $class = Livewire::getComponentClassByName();\n\n    $component = new $class;\n\n    $id = str()->random(20);\n\n    $component->setId($id);\n\n    $data = $component->getData();\n\n    $view = $component->render();\n\n    $html = $view->render($data);\n\n    $snapshot = [\n        'data' => $data,\n        'memo' => [\n            'id' => $component->getId(),\n            'name' => $component->getName(),\n        ]\n    ];\n\n    return Livewire::embedSnapshotInsideHtml($html, $snapshot);\n}\n```\n\n----------------------------------------\n\nTITLE: Array Property Update Handling\nDESCRIPTION: Example showing how to handle updates to array properties with key tracking.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/lifecycle-hooks.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nclass UpdatePreferences extends Component\n{\n    public $preferences = [];\n\n    public function updatedPreferences($value, $key)\n    {\n        // $value = 'dark'\n        // $key   = 'theme'\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Download Success in PHP\nDESCRIPTION: Example of testing successful file downloads in Livewire components using assertFileDownloaded method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/downloads.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Invoice;\n\npublic function test_can_download_invoice()\n{\n    $invoice = Invoice::factory();\n\n    Livewire::test(ShowInvoice::class)\n        ->call('download')\n        ->assertFileDownloaded('invoice.pdf');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShowPost Child Component in PHP\nDESCRIPTION: Child component that displays individual post details. Shows how nested components handle their own state independently.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/understanding-nesting.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass ShowPost extends Component\n{\n    public Post $post;\n\n    public function render()\n    {\n        return view('livewire.show-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Layout File Path for Page Components\nDESCRIPTION: The path to the layout file used for full-page Livewire components has changed from layouts/app.blade.php to components/layouts/app.blade.php.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nresources/views/layouts/app.blade.php #[tl! remove]\nresources/views/components/layouts/app.blade.php #[tl! add]\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination View Methods in Component\nDESCRIPTION: Component methods to specify custom views for both standard and simple pagination.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function paginationView()\n{\n    return 'custom-pagination-links-view';\n}\n\npublic function paginationSimpleView()\n{\n    return 'custom-simple-pagination-links-view';\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Event Methods in PHP\nDESCRIPTION: Shows the changes required for event-related method calls in PHP components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$this->emit('post-created');\n$this->dispatch('post-created');\n\n$this->emitTo('foo', 'post-created');\n$this->dispatch('post-created')->to('foo');\n\n$this->emitSelf('post-created');\n$this->dispatch('post-created')->self();\n\n$this->emit('post-created', $post->id);\n$this->dispatch('post-created', postId: $post->id);\n\n$this->dispatchBrowserEvent('post-created');\n$this->dispatch('post-created');\n\n$this->dispatchBrowserEvent('post-created', ['postId' => $post->id]);\n$this->dispatch('post-created', postId: $post->id);\n```\n\n----------------------------------------\n\nTITLE: Updating Livewire Package to Version 3 Using Composer\nDESCRIPTION: Use Composer to update the Livewire package to version 3.0 or greater. This is the initial step in the upgrade process.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require livewire/livewire \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fathom Analytics Script with SPA Support\nDESCRIPTION: Implementation of Fathom Analytics script tag with SPA support using data-spa attribute for proper page tracking in Livewire applications\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<head>\n    <!-- ... -->\n\n    <!-- Fathom Analytics -->\n    @if (! config('app.debug'))\n        <script src=\"https://cdn.usefathom.com/script.js\" data-site=\"ABCDEFG\" data-spa=\"auto\" defer></script>\n    @endif\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Livewire Script in Blade Layout\nDESCRIPTION: This Blade layout demonstrates how to include the @livewireScriptConfig directive, which is necessary when manually bundling Alpine.js with Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/alpine.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<html>\n<head>\n    <!-- ... -->\n    @livewireStyles\n    @vite(['resources/js/app.js'])\n</head>\n<body>\n    {{ $slot }}\n\n    @livewireScriptConfig\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendered Livewire Component HTML\nDESCRIPTION: Example of rendered HTML output with Livewire attributes and snapshot data embedded.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:id=\"123456789\" wire:snapshot=\"{ data: { count: 0 }, memo: { 'id': '123456789', 'name': 'counter' }\">\n    <button wire:click=\"increment\">Increment</button>\n\n    <span>1</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Address Synthesizer with Data Binding Support\nDESCRIPTION: An extended version of the Address Synthesizer that adds get() and set() methods to support wire:model data binding directly to Address object properties.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Dtos\\Address;\n\nclass AddressSynth extends Synth\n{\n    public static $key = 'address';\n\n    public static function match($target)\n    {\n        return $target instanceof Address;\n    }\n\n    public function dehydrate($target)\n    {\n        return [[\n            'street' => $target->street,\n            'city' => $target->city,\n            'state' => $target->state,\n            'zip' => $target->zip,\n        ], []];\n    }\n\n    public function hydrate($value)\n    {\n        $instance = new Address;\n\n        $instance->street = $value['street'];\n        $instance->city = $value['city'];\n        $instance->state = $value['state'];\n        $instance->zip = $value['zip'];\n\n        return $instance;\n    }\n\n    public function get(&$target, $key) // [tl! highlight:8]\n    {\n        return $target->{$key};\n    }\n\n    public function set(&$target, $key, $value)\n    {\n        $target->{$key} = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing keys to avoid ID collisions\nDESCRIPTION: Example showing how to prefix keys to avoid ID collisions when using multiple loops with potentially duplicate IDs.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach($posts as $post)\n        <div wire:key=\"post-{{ $post->id }}\">...</div> <!-- [tl! highlight] -->\n    @endforeach\n\n    @foreach($authors as $author)\n        <div wire:key=\"author-{{ $author->id }}\">...</div> <!-- [tl! highlight] -->\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Livewire Component Existence on Page\nDESCRIPTION: Test to verify if a specific Livewire component is present on a given page.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\CreatePost;\nuse Tests\\TestCase;\n\nclass CreatePostTest extends TestCase\n{\n    public function test_component_exists_on_the_page()\n    {\n        $this->get('/posts/create')\n            ->assertSeeLivewire(CreatePost::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Loading with Pikaday Integration\nDESCRIPTION: Example of loading external assets and initializing a date picker library in a Livewire component.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <input type=\"text\" data-picker>\n</div>\n\n@assets\n<script src=\"https://cdn.jsdelivr.net/npm/pikaday/pikaday.js\" defer></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/pikaday/css/pikaday.css\">\n@endassets\n\n@script\n<script>\n    new Pikaday({ field: $wire.$el.querySelector('[data-picker]') });\n</script>\n@endscript\n```\n\n----------------------------------------\n\nTITLE: Improved Blade Template with Wrapper Element\nDESCRIPTION: A recommended approach to avoid morphing problems by wrapping conditional content in persistent container elements that are always present in the DOM.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <div>\n        <input wire:model=\"title\">\n    </div>\n\n    <div> <!-- [tl! highlight] -->\n        @if ($errors->has('title'))\n            <div>{{ $errors->first('title') }}</div>\n        @endif\n    </div> <!-- [tl! highlight] -->\n\n    <div>\n        <button>Save</button>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Blade Layout for Manual Livewire and Alpine Bundling\nDESCRIPTION: Blade template configuration to use manually bundled Livewire and Alpine.js, preventing automatic script injection.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<html>\n<head>\n    <!-- ... -->\n    @livewireStyles\n    @vite(['resources/js/app.js'])\n</head>\n<body>\n    {{ $slot }}\n\n    @livewireScriptConfig\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Traditional Active Link Highlighting in Blade\nDESCRIPTION: Example of highlighting active navigation links using server-side Blade conditionals. This approach doesn't work with persisted elements since they are reused between page loads.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/\" class=\"@if (request->is('/')) font-bold text-zinc-800 @endif\">Dashboard</a>\n    <a href=\"/posts\" class=\"@if (request->is('/posts')) font-bold text-zinc-800 @endif\">Posts</a>\n    <a href=\"/users\" class=\"@if (request->is('/users')) font-bold text-zinc-800 @endif\">Users</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Counter Component with Alpine Binding\nDESCRIPTION: Example showing how to use the counter component with Alpine.js model binding instead of Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-input-counter x-model=\"quantity\" />\n```\n\n----------------------------------------\n\nTITLE: Livewire Update Route Handler\nDESCRIPTION: Backend route handler for processing component updates and returning new state.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/how-livewire-works.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('/livewire/update', function () {\n    $snapshot = request('snapshot');\n    $calls = request('calls');\n\n    $component = Livewire::fromSnapshot($snapshot);\n\n    foreach ($calls as $call) {\n        $component->{$call['method']}(...$call['params']);\n    }\n\n    [$html, $snapshot] = Livewire::snapshot($component);\n\n    return [\n        'snapshot' => $snapshot,\n        'html' => $html,\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: TodoInput Blade Template\nDESCRIPTION: Simple input template that binds to the modelable value property.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/nesting.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <input type=\"text\" wire:model=\"value\" >\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sample Livewire Pagination View Template\nDESCRIPTION: Example of a basic unstyled pagination view template with previous/next navigation and Livewire click handlers.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if ($paginator->hasPages())\n        <nav role=\"navigation\" aria-label=\"Pagination Navigation\">\n            <span>\n                @if ($paginator->onFirstPage())\n                    <span>Previous</span>\n                @else\n                    <button wire:click=\"previousPage\" wire:loading.attr=\"disabled\" rel=\"prev\">Previous</button>\n                @endif\n            </span>\n\n            <span>\n                @if ($paginator->onLastPage())\n                    <span>Next</span>\n                @else\n                    <button wire:click=\"nextPage\" wire:loading.attr=\"disabled\" rel=\"next\">Next</button>\n                @endif\n            </span>\n        </nav>\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Livewire Actions with State\nDESCRIPTION: Demonstrates implementing Livewire actions with state management and event handling.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse function Livewire\\Volt\\{state};\n\nstate(['count' => 0]);\n\n$increment = fn () => $this->count++;\n\n?>\n\n<div>\n    <h1>{{ $count }}</h1>\n    <button wire:click=\"increment\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Server-Side JavaScript Evaluation in PHP\nDESCRIPTION: Demonstrates evaluating JavaScript expressions from PHP component code using js() method.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/javascript.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\n\nclass CreatePost extends Component\n{\n    public $title = '';\n\n    public function save()\n    {\n        // ...\n\n        $this->js(\"alert('Post saved!')\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Livewire Assets in Laravel\nDESCRIPTION: Artisan command to publish Livewire's assets for serving directly from the web server.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:publish --assets\n```\n\n----------------------------------------\n\nTITLE: Available Display Values for Loading Indicators in Livewire\nDESCRIPTION: Lists all the available CSS display property values that can be used with wire:loading directives in Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-loading.md#2025-04-20_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:loading.inline-flex>...</div>\n<div wire:loading.inline>...</div>\n<div wire:loading.block>...</div>\n<div wire:loading.table>...</div>\n<div wire:loading.flex>...</div>\n<div wire:loading.grid>...</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Authorization in Livewire Components\nDESCRIPTION: Examples of testing authorization and authentication checks in Livewire components using assertUnauthorized() and assertForbidden() methods.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\UpdatePost;\nuse Livewire\\Livewire;\nuse App\\Models\\User;\nuse App\\Models\\Post;\nuse Tests\\TestCase;\n\nclass UpdatePostTest extends TestCase\n{\n    public function test_cant_update_another_users_post()\n    {\n        $user = User::factory()->create();\n        $stranger = User::factory()->create();\n\n        $post = Post::factory()->for($stranger)->create();\n\n        Livewire::actingAs($user)\n            ->test(UpdatePost::class, ['post' => $post])\n            ->set('title', 'Living the lavender life')\n            ->call('save')\n            ->assertUnauthorized();\n\n        Livewire::actingAs($user)\n            ->test(UpdatePost::class, ['post' => $post])\n            ->set('title', 'Living the lavender life')\n            ->call('save')\n            ->assertForbidden();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Blade Template with Conditional Error Message\nDESCRIPTION: A Blade template for a form that conditionally shows validation errors. This pattern can cause morphing problems when the error message is displayed or hidden.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<form wire:submit=\"save\">\n    <div>\n        <input wire:model=\"title\">\n    </div>\n\n    @if ($errors->has('title'))\n        <div>{{ $errors->first('title') }}</div>\n    @endif\n\n    <div>\n        <button>Save</button>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Laravel Echo Event Broadcasting\nDESCRIPTION: Example of broadcasting events using Laravel Echo with proper channel configuration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\Order;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public Order $order;\n\n    public function broadcastOn()\n    {\n        return new Channel('orders');\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nEcho.channel('orders')\n    .listen('OrderShipped', e => {\n        console.log(e.order)\n    })\n```\n\n----------------------------------------\n\nTITLE: Vulnerable BrowsePosts Component in PHP\nDESCRIPTION: A Livewire component for browsing and deleting posts without proper server-side authorization.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass BrowsePosts extends Component\n{\n    public function deletePost($id)\n    {\n        $post = Post::find($id);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.browse-posts', [\n            'posts' => Post::all(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Model Binding in Livewire 3\nDESCRIPTION: Configuration option to enable the legacy Eloquent model binding behavior from Livewire 2 in your Livewire 3 application.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'legacy_model_binding' => true,\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of wire:cloak in Blade Templates\nDESCRIPTION: Shows how to add the wire:cloak directive to an element to hide it during page load until Livewire is fully initialized.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-cloak.md#2025-04-20_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<div wire:cloak>\n    This content will be hidden until Livewire is fully loaded\n</div>\n```\n\n----------------------------------------\n\nTITLE: Forcing Livewire Asset Injection in Laravel\nDESCRIPTION: PHP method to force Livewire to inject its assets on specific pages or routes.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/installation.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\\Livewire\\Livewire::forceAssetInjection();\n```\n\n----------------------------------------\n\nTITLE: Updating Livewire Script Configuration\nDESCRIPTION: Demonstrates how to replace @livewireScripts with @livewireScriptConfig in the application layout.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n    <!-- ... -->\n\n    @livewireScripts\n    @livewireScriptConfig\n</body>\n```\n\n----------------------------------------\n\nTITLE: Dehydrated JSON with Metadata Tuple for Stringable\nDESCRIPTION: The JSON representation showing how Livewire uses metadata tuples to represent complex property types like Stringables during dehydration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nstate: { title: ['', { s: 'str' }] },\n```\n\n----------------------------------------\n\nTITLE: Testing Validation in Livewire Components\nDESCRIPTION: Shows how to test validation errors in Livewire components using assertHasErrors() method with different validation scenarios.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/testing.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Feature\\Livewire;\n\nuse App\\Livewire\\CreatePost;\nuse Livewire\\Livewire;\nuse Tests\\TestCase;\n\nclass CreatePostTest extends TestCase\n{\n    public function test_title_field_is_required()\n    {\n        Livewire::test(CreatePost::class)\n            ->set('title', '')\n            ->call('save')\n            ->assertHasErrors('title');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Counter Example\nDESCRIPTION: Basic counter implementation using Alpine.js showing increment and decrement functionality.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/forms.md#2025-04-20_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ count: 0 }\">\n    <button x-on:click=\"count--\">-</button>\n\n    <span x-text=\"count\"></span>\n\n    <button x-on:click=\"count++\">+</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Form Objects in a Livewire Component\nDESCRIPTION: Demonstrates how to use a Form object in a Livewire component by defining it as a property and accessing its methods like all() to retrieve form data.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse App\\Livewire\\Forms\\PostForm;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass CreatePost extends Component\n{\n    public PostForm $form;\n\n    public function save()\n    {\n\t\tPost::create(\n    \t\t$this->form->all()\n    \t);\n\n\t\treturn redirect()->to('/posts');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default Persistent Middleware Configuration in Laravel Livewire\nDESCRIPTION: List of default middleware classes that Livewire automatically persists across network requests. These middleware are re-applied to future network requests if they were present in the initial page load.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n\\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n\\Laravel\\Jetstream\\Http\\Middleware\\AuthenticateSession::class,\n\\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n\\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n\\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n\\Illuminate\\Auth\\Middleware\\Authenticate::class,\n\\Illuminate\\Auth\\Middleware\\Authorize::class,\n```\n\n----------------------------------------\n\nTITLE: Blade Template for Minimal Component\nDESCRIPTION: Corresponding Blade template for the component without render method, accessing computed property directly.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($this->posts as $post)\n        <!-- ... -->\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Layout Path in Livewire Configuration\nDESCRIPTION: Configure Livewire to use a custom layout path instead of the default path in version 3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'layout' => 'layouts.app',\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Tests for Livewire in PHP\nDESCRIPTION: Example of how to create a browser test class for Livewire features, extending the BrowserTestCase class to test functionality in a real browser environment.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Tests\\BrowserTestCase;\n\nclass BrowserTest extends BrowserTestCase\n{\n    public function test_livewire_can_run_action()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable BrowsePosts Component with Public Delete Method\nDESCRIPTION: A BrowsePosts component with a public delete method, which can be called directly from the client-side.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Livewire\\Component;\nuse App\\Models\\Post;\n\nclass BrowsePosts extends Component\n{\n    public function deletePost($id)\n    {\n        if (! Auth::user()->isAdmin) {\n            abort(403);\n        }\n\n        $this->delete($id);\n    }\n\n    public function delete($postId)\n    {\n        $post = Post::find($postId);\n\n        $post->delete();\n    }\n\n    public function render()\n    {\n        return view('livewire.browse-posts', [\n            'posts' => Post::all(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component mismatch errors in Livewire\nDESCRIPTION: Common error messages displayed when Livewire components aren't properly tracked or initialized.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Component already initialized\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Snapshot missing on Livewire component with id: ...\n```\n\n----------------------------------------\n\nTITLE: Insecure implementation of post deletion in Livewire\nDESCRIPTION: An example of an insecure Livewire component that allows post deletion without proper authorization. This implementation is vulnerable because any user could modify the post ID parameter in the browser.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    // ...\n\n    public function delete($id)\n    {\n        // INSECURE!\n\n        $post = Post::find($id);\n\n        $post->delete();\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<button wire:click=\"delete({{ $post->id }})\">Delete Post</button>\n```\n\n----------------------------------------\n\nTITLE: Removing Global Event Listeners in JavaScript\nDESCRIPTION: Demonstrates how to remove global event listeners in JavaScript. The example shows storing the cleanup function returned by Livewire.on and calling it to remove the event listener.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/events.md#2025-04-20_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    document.addEventListener('livewire:init', () => {\n        let cleanup = Livewire.on('post-created', (event) => {\n            //\n        });\n\n        // Calling \"cleanup()\" will un-register the above event listener...\n        cleanup();\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Validation Rules in Livewire Component\nDESCRIPTION: Example test that checks a specific validation rule (min:3) on the title field. Demonstrates how to test more specific validation rules rather than just the presence of errors.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic function test_cant_create_post_with_title_shorter_than_3_characters()\n{\n    Livewire::test(CreatePost::class)\n        ->set('title', 'Sa')\n        ->set('content', 'Sample content...')\n        ->call('save')\n        ->assertHasErrors(['title' => ['min:3']]);\n}\n```\n\n----------------------------------------\n\nTITLE: Alpine.js multiple instances errors\nDESCRIPTION: Error messages that appear when multiple instances of Alpine.js are running on the same page with Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Detected multiple instances of Alpine running\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nAlpine Expression Error: $wire is not defined\n```\n\n----------------------------------------\n\nTITLE: Adding key to Livewire components in loops\nDESCRIPTION: Example showing how to add a key attribute to Livewire components within a foreach loop.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@foreach($posts as $post)\n    <livewire:show-post :$post :key=\"$post->id\" /> <!-- [tl! highlight] -->\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Upload Cleanup in Livewire (Shell)\nDESCRIPTION: This command configures S3 to automatically clean up temporary files older than 24 hours in Livewire's upload directory.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:configure-s3-upload-cleanup\n```\n\n----------------------------------------\n\nTITLE: Defining a Full-Page Livewire Component Route\nDESCRIPTION: Example of routing to a Livewire component as a full page. The layout used to render this has changed in Livewire 3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/posts', ShowPosts::class);\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested JSON Snapshot with Multiple Type Metadata\nDESCRIPTION: JSON representation of a deeply nested state object containing both a collection and a stringable. This demonstrates how Livewire recursively applies the tuple format to preserve type information at all levels.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntodos: [\n    [\n        'first',\n        'second',\n        [ 'third', { s: 'str' } ],\n    ],\n    { s: 'clctn', class: 'Illuminate\\\\Support\\\\Collection' },\n],\n```\n\n----------------------------------------\n\nTITLE: Setting up Alpine.js Environment with Shell Commands\nDESCRIPTION: Shell commands for setting up Alpine.js locally, including forking, cloning, installing dependencies, building packages, and linking them for use with Livewire development.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Fork and clone Alpine\ngh repo fork alpinejs/alpine --default-branch-only --clone=true --remote=false -- alpine\n\n# Switch the working directory to alpine\ncd alpine\n\n# Install all npm dependencies\nnpm install\n\n# Build all Alpine packages\nnpm run build\n\n# Link all Alpine packages locally\ncd packages/alpinejs && npm link && cd ../../\ncd packages/anchor && npm link && cd ../../\ncd packages/collapse && npm link && cd ../../\ncd packages/csp && npm link && cd ../../\ncd packages/docs && npm link && cd ../../\ncd packages/focus && npm link && cd ../../\ncd packages/history && npm link && cd ../../\ncd packages/intersect && npm link && cd ../../\ncd packages/mask && npm link && cd ../../\ncd packages/morph && npm link && cd ../../\ncd packages/navigate && npm link && cd ../../\ncd packages/persist && npm link && cd ../../\ncd packages/sort && npm link && cd ../../\ncd packages/ui && npm link && cd ../../\n\n# Switch the working directory back to livewire\ncd ../livewire\n\n# Link all packages\nnpm link alpinejs @alpinejs/anchor @alpinejs/collapse @alpinejs/csp @alpinejs/docs @alpinejs/focus @alpinejs/history @alpinejs/intersect @alpinejs/mask @alpinejs/morph @alpinejs/navigate @alpinejs/persist @alpinejs/sort @alpinejs/ui\n\n# Build Livewire\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Invalid Middleware Configuration Example\nDESCRIPTION: Demonstration of unsupported middleware argument syntax in Livewire persistent middleware configuration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Bad...\nLivewire::addPersistentMiddleware(AuthorizeResource::class.':admin');\n\n// Good...\nLivewire::addPersistentMiddleware(AuthorizeResource::class);\n```\n\n----------------------------------------\n\nTITLE: AJAX Payload for Triggering Component Updates\nDESCRIPTION: The JSON payload sent to the server when a component update is triggered. It includes both the method to call with parameters and the current snapshot of the component for hydration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    calls: [\n        { method: 'increment', params: [] },\n    ],\n\n    snapshot: {\n        state: {\n            count: 1,\n        },\n\n        memo: {\n            name: 'counter',\n\n            id: '1526456',\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a Full-Page Livewire Component\nDESCRIPTION: Example of redirecting to a Livewire component registered as a full-page component by providing the component class name.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/redirecting.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function save()\n{\n    // ...\n\n    $this->redirect(ShowPosts::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Alpine.js via JavaScript Bundle (Livewire 2 approach)\nDESCRIPTION: Example of including Alpine.js and plugins via a JavaScript bundle in Livewire 2, which should be removed in Livewire 3 as Alpine is included by default.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// Warning: this is a snippet of the Livewire 2 approach to including Alpine\n\nimport Alpine from 'alpinejs'\nimport intersect from '@alpinejs/intersect'\n\nAlpine.plugin(intersect)\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpine.js Integration in Livewire 3\nDESCRIPTION: Shows the new approach to importing and configuring Alpine.js and Livewire in version 3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Livewire, Alpine } from '../../vendor/livewire/livewire/dist/livewire.esm';\nimport customPlugin from './plugins/custom-plugin'\n\nAlpine.plugin(customPlugin)\n\nLivewire.start()\n```\n\n----------------------------------------\n\nTITLE: Updating Livewire Layout Path in Configuration\nDESCRIPTION: Change the default layout path from layouts.app to components.layouts.app to follow Livewire 3's preference for anonymous Blade components.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'layout' => 'layouts.app', // [tl! remove]\n'layout' => 'components.layouts.app', // [tl! add]\n```\n\n----------------------------------------\n\nTITLE: Setting Bootstrap Pagination Theme in Laravel Livewire\nDESCRIPTION: Configuration setting to use Bootstrap styled pagination instead of Tailwind in the Livewire config file.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'pagination_theme' => 'bootstrap',\n```\n\n----------------------------------------\n\nTITLE: Setting up Livewire Environment with Shell Commands\nDESCRIPTION: Commands for forking, cloning, and setting up the Livewire repository for local development. This includes installing composer dependencies and configuring Dusk for browser testing.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Fork and clone Livewire\ngh repo fork livewire/livewire --default-branch-only --clone=true --remote=false -- livewire\n\n# Switch the working directory to livewire\ncd livewire\n\n# Install all composer dependencies\ncomposer install\n\n# Ensure Dusk is correctly configured\nvendor/bin/dusk-updater detect --no-interaction\n```\n\n----------------------------------------\n\nTITLE: Removing Alpine.js from Laravel Breeze\nDESCRIPTION: Code modification to remove the Alpine.js import from Laravel Breeze's app.js file when using Livewire v3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport './bootstrap';\n\nimport Alpine from 'alpinejs'; // [tl! remove:4]\n\nwindow.Alpine = Alpine;\n\nAlpine.start();\n```\n\n----------------------------------------\n\nTITLE: Removing Classes on Offline State\nDESCRIPTION: Shows how to remove a CSS class from an element when the user goes offline using the class.remove modifier with wire:offline directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/offline.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div class=\"bg-green-300\" wire:offline.class.remove=\"bg-green-300\">\n```\n\n----------------------------------------\n\nTITLE: PHP Configuration to Disable Morph Markers\nDESCRIPTION: A configuration option that can be added to config/livewire.php to disable the automatic injection of morph markers if they cause issues in your application.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/morph.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'inject_morph_markers' => false,\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Validation Messages in Livewire\nDESCRIPTION: Shows how to provide custom validation error messages by using the 'message' parameter in the #[Validate] attribute, bypassing Laravel's default validation messages.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/validation.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Validate;\n\n#[Validate('required', message: 'Please provide a post title')]\npublic $title;\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpine.js Integration in Livewire 2\nDESCRIPTION: Shows the previous approach to including Alpine.js in Livewire 2 projects via JavaScript bundle.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport customPlugin from './plugins/custom-plugin'\n\nAlpine.plugin(customPlugin)\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Legacy Class Namespace in Livewire Configuration\nDESCRIPTION: Configure Livewire to use the previous namespace (App\\Http\\Livewire) if you don't want to move your components to the new location.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'class_namespace' => 'App\\\\Http\\\\Livewire',\n```\n\n----------------------------------------\n\nTITLE: Inefficient Conditional Data Access in Blade\nDESCRIPTION: Example showing problematic conditional data access where database queries are executed regardless of access permission.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/computed-properties.md#2025-04-20_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if (Auth::user()->can_see_posts)\n        @foreach ($posts as $post)\n            <!-- ... -->\n        @endforeach\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Structure Example\nDESCRIPTION: Example of the final HTML output showing how Livewire handles component nesting with wire:id and snapshots.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/understanding-nesting.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div wire:id=\"123\" wire:snapshot=\"...\">\n    Post Limit: <input type=\"number\" wire:model.live=\"postLimit\">\n\n    <div wire:id=\"456\" wire:snapshot=\"...\">\n        <h1>The first post</h1>\n\n        <p>Post content</p>\n\n        <button wire:click=\"$refresh\">Refresh post</button>\n    </div>\n\n    <div wire:id=\"789\" wire:snapshot=\"...\">\n        <h1>The second post</h1>\n\n        <p>Post content</p>\n\n        <button wire:click=\"$refresh\">Refresh post</button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding @alpinejs/ui plugin via CDN\nDESCRIPTION: HTML code showing how to add the @alpinejs/ui plugin via CDN when using Alpine components with Livewire.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n    ...\n    <script defer src=\"https://unpkg.com/@alpinejs/ui@3.13.7-beta.0/dist/cdn.min.js\"></script> <!-- [tl! add] -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Transition Usage Example\nDESCRIPTION: Shows an example of unsupported transition implementation in dynamic lists.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/wire-transition.md#2025-04-20_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Warning: The following is code that will not work properly -->\n<ul>\n    @foreach ($post->comments as $comment)\n        <li wire:transition wire:key=\"{{ $comment->id }}\">{{ $comment->content }}</li>\n    @endforeach\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch with Git for Livewire Contribution\nDESCRIPTION: Commands to create a new Git branch for your Livewire contribution and push it to your forked repository, preparing for a pull request submission.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-feature\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to a Remote Repository for Pull Request\nDESCRIPTION: Git command to push your changes to your forked repository, which is necessary before creating a pull request to the main Livewire repository.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-feature\n\nEnumerating objects: 13, done.\nCounting objects: 100% (13/13), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (6/6), done.\n\nTo github.com:Username/livewire.git\n * [new branch]        my-feature -> my-feature\n```\n\n----------------------------------------\n\nTITLE: Publishing Livewire Configuration Command\nDESCRIPTION: Artisan command to publish Livewire's configuration file to the application's config directory.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:publish --config\n```\n\n----------------------------------------\n\nTITLE: Address Class Definition\nDESCRIPTION: The definition of a simple Address data transfer object with properties for street, city, state, and zip code.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/synthesizers.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Dtos\\Address;\n\nclass Address\n{\n    public $street = '';\n    public $city = '';\n    public $state = '';\n    public $zip = '';\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Inputs Using Wire:Model with Eloquent Properties\nDESCRIPTION: Example of binding form inputs directly to Eloquent model properties using wire:model directive.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<input wire:model=\"post.title\">\n<input wire:model=\"post.description\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Alpine.js Global Object in Script Tags\nDESCRIPTION: Example of accessing the Alpine global object in script tags, which continues to work in Livewire 3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    document.addEventListener('alpine:init', () => {\n        Alpine.data(...)\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable ShowPosts Component Blade Template\nDESCRIPTION: The Blade template for the ShowPosts component, displaying posts and delete buttons.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <div wire:key=\"{{ $post->id }}\">\n            <h1>{{ $post->title }}</h1>\n            <span>{{ $post->content }}</span>\n\n            <button wire:click=\"delete({{ $post->id }})\">Delete</button>\n        </div>\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Removing Alpine.js CDN script\nDESCRIPTION: HTML modification to remove the Alpine.js CDN script tag that's no longer needed with Livewire v3.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n    ...\n    <script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script> <!-- [tl! remove] -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Advanced JSON Snapshot with Collection Metadata\nDESCRIPTION: The JSON representation of a state object containing a Laravel collection. Livewire uses a tuple format (array with data and metadata) to preserve type information for complex objects during dehydration and hydration.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/hydration.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstate: {\n    todos: [\n        [ 'first', 'second', 'third' ],\n        { s: 'clctn', class: 'Illuminate\\\\Support\\\\Collection' },\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Including Alpine.js via CDN (to be removed)\nDESCRIPTION: If you were previously including Alpine.js via a CDN script tag, you should remove it as Livewire 3 ships with Alpine.js built-in.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script> <!-- [tl! remove] -->\n```\n\n----------------------------------------\n\nTITLE: Livewire Features Directory Structure Example\nDESCRIPTION: Shows the directory structure of Livewire features, which helps contributors identify where to add their tests based on the feature they're working with.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/contribution-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsrc/Features/SupportAccessingParent\nsrc/Features/SupportAttributes\nsrc/Features/SupportAutoInjectedAssets\nsrc/Features/SupportBladeAttributes\nsrc/Features/SupportChecksumErrorDebugging\nsrc/Features/SupportComputed\nsrc/Features/SupportConsoleCommands\nsrc/Features/SupportDataBinding\n//...\n```\n\n----------------------------------------\n\nTITLE: Publishing Pagination Views Command\nDESCRIPTION: Artisan command to publish Livewire's pagination view files for customization.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/pagination.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan livewire:publish --pagination\n```\n\n----------------------------------------\n\nTITLE: Testing Nested Volt Components\nDESCRIPTION: Shows how to test nested Volt components using dot notation\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nVolt::test('users.stats')\n```\n\n----------------------------------------\n\nTITLE: Vulnerable BrowsePosts Component Blade Template\nDESCRIPTION: The Blade template for the BrowsePosts component, displaying posts and conditional delete buttons for administrators.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/actions.md#2025-04-20_snippet_18\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <div wire:key=\"{{ $post->id }}\">\n            <h1>{{ $post->title }}</h1>\n            <span>{{ $post->content }}</span>\n\n            @if (Auth::user()->isAdmin())\n                <button wire:click=\"deletePost({{ $post->id }})\">Delete</button>\n            @endif\n        </div>\n    @endforeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Livewire with Composer\nDESCRIPTION: Command to install the Livewire package using Composer in a Laravel application. This is the first step in setting up Livewire in your project.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/quickstart.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require livewire/livewire\n```\n\n----------------------------------------\n\nTITLE: Testing Anonymous Volt Components\nDESCRIPTION: Demonstrates how to test pages containing anonymous Volt components using assertSeeVolt\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/volt.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$this->get('/users')\n    ->assertSeeVolt('stats');\n```\n\n----------------------------------------\n\nTITLE: Insecure implementation using public properties\nDESCRIPTION: Another insecure implementation where the post ID is stored as a public property instead of being passed as an action parameter. This is vulnerable because public properties can be manipulated by users.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/security.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Models\\Post;\nuse Livewire\\Component;\n\nclass ShowPost extends Component\n{\n    public $postId;\n\n    public function mount($postId)\n    {\n        $this->postId = $postId;\n    }\n\n    public function delete()\n    {\n        // INSECURE!\n\n        $post = Post::find($this->postId);\n\n        $post->delete();\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<button wire:click=\"delete\">Delete Post</button>\n```\n\n----------------------------------------\n\nTITLE: Single Line Text Value\nDESCRIPTION: A text value consisting of the number 39 in quotation marks\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/Untitled 2.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n39\"\n```\n\n----------------------------------------\n\nTITLE: Including Alpine.js Plugins via CDN (to be removed)\nDESCRIPTION: Example of including Alpine.js plugins via CDN, which should be removed as Livewire 3 includes common plugins by default.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/upgrading.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/intersect@3.x.x/dist/cdn.min.js\"></script> <!-- [tl! remove:1] -->\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Repository Badges HTML Structure\nDESCRIPTION: HTML markup for displaying repository status badges including download count, version and license information from packagist.org. The code uses centered alignment and links to the package on Packagist.\nSOURCE: https://github.com/livewire/livewire/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://packagist.org/packages/livewire/livewire\">\n        <img src=\"https://poser.pugx.org/livewire/livewire/d/total.svg\" alt=\"Total Downloads\">\n    </a>\n    <a href=\"https://packagist.org/packages/livewire/livewire\">\n        <img src=\"https://poser.pugx.org/livewire/livewire/v/stable.svg\" alt=\"Latest Stable Version\">\n    </a>\n    <a href=\"https://packagist.org/packages/livewire/livewire\">\n        <img src=\"https://poser.pugx.org/livewire/livewire/license.svg\" alt=\"License\">\n    </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Active Links with wire:current\nDESCRIPTION: Using wire:current directive to highlight active navigation links in a persisted element. This works correctly with Livewire's navigation system, applying specified classes to the active link.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/navigate.md#2025-04-20_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<nav>\n    <a href=\"/dashboard\" ... wire:current=\"font-bold text-zinc-800\">Dashboard</a>\n    <a href=\"/posts\" ... wire:current=\"font-bold text-zinc-800\">Posts</a>\n    <a href=\"/users\" ... wire:current=\"font-bold text-zinc-800\">Users</a>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Missing @alpinejs/ui error\nDESCRIPTION: Error message displayed when using Alpine UI components without the required plugin.\nSOURCE: https://github.com/livewire/livewire/blob/main/docs/troubleshooting.md#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nUncaught Alpine: no element provided to x-anchor\n```"
  }
]