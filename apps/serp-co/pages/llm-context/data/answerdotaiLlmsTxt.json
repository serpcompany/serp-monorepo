[
  {
    "owner": "answerdotai",
    "repo": "llms-txt",
    "content": "TITLE: Complete llms.txt parser implementation in Python\nDESCRIPTION: A concise implementation of an llms.txt parser in less than 20 lines of Python code, using only the standard library. It includes helper functions for chunking iterables and a regex-based parsing function that extracts structured data from the text format.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nimport re,itertools\n\ndef chunked(it, chunk_sz):\n    it = iter(it)\n    return iter(lambda: list(itertools.islice(it, chunk_sz)), [])\n\ndef parse_llms_txt(txt):\n    \"Parse llms.txt file contents in `txt` to a `dict`\"\n    def _p(links):\n        link_pat = '-\\s*\\[(?P<title>[^\\]]+)\\]\\((?P<url>[^\\)]+)\\)(?:\\s*(?P<desc>.*))?'\n        return [re.search(link_pat, l).groupdict()\n                for l in re.split(r'\\n+', links.strip()) if l.strip()]\n\n    start,*rest = re.split(fr'^##\\s*(.*?$)', txt, flags=re.MULTILINE)\n    sects = {k: _p(v) for k,v in dict(chunked(rest, 2)).items()}\n    pat = '^#\\s*(?P<title>.+?$)\\n+(?:^>\\s*(?P<summary>.+?$)$)?\\n+(?P<info>.*)'\n    d = re.search(pat, start.strip(), (re.MULTILINE|re.DOTALL)).groupdict()\n    d['sections'] = sects\n    return d\n```\n\n----------------------------------------\n\nTITLE: Python llms-txt Parser Implementation\nDESCRIPTION: Complete implementation of an llms.txt file parser in Python with no dependencies. Includes utility functions for chunking iterables and parsing llms.txt format into a dictionary structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nimport re,itertools\n\ndef chunked(it, chunk_sz):\n    it = iter(it)\n    return iter(lambda: list(itertools.islice(it, chunk_sz)), [])\n\ndef parse_llms_txt(txt):\n    \"Parse llms.txt file contents in `txt` to a `dict`\"\n    def _p(links):\n        link_pat = '-\\s*\\[(?P<title>[^\\]]+)\\]\\((?P<url>[^\\)]+)\\)(?:\\s*(?P<desc>.*))?'\n        return [re.search(link_pat, l).groupdict()\n                for l in re.split(r'\\n+', links.strip()) if l.strip()]\n\n    start,*rest = re.split(fr'^##\\s*(.*?$)', txt, flags=re.MULTILINE)\n    sects = {k: _p(v) for k,v in dict(chunked(rest, 2)).items()}\n    pat = '^#\\s*(?P<title>.+?$)\\n+(?:^>\\s*(?P<summary>.+?$)$)?\\n+(?P<info>.*)'\n    d = re.search(pat, start.strip(), (re.MULTILINE|re.DOTALL)).groupdict()\n    d['sections'] = sects\n    return d\n```\n\n----------------------------------------\n\nTITLE: Implementing llms.txt Parser in Python\nDESCRIPTION: A complete implementation of an llms.txt parser in Python, demonstrating the simplicity of the format.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nimport re,itertools\n\ndef chunked(it, chunk_sz):\n    it = iter(it)\n    return iter(lambda: list(itertools.islice(it, chunk_sz)), [])\n\ndef parse_llms_txt(txt):\n    \"Parse llms.txt file contents in `txt` to a `dict`\"\n    def _p(links):\n        link_pat = '-\\s*\\[(?P<title>[^\\]]+)\\]\\((?P<url>[^\\)]+)\\)(?:\\s*(?P<desc>.*))?'\n        return [re.search(link_pat, l).groupdict()\n                for l in re.split(r'\\n+', links.strip()) if l.strip()]\n\n    start,*rest = re.split(fr'^##\\s*(.*?$)', txt, flags=re.MULTILINE)\n    sects = {k: _p(v) for k,v in dict(chunked(rest, 2)).items()}\n    pat = '^#\\s*(?P<title>.+?$)\\n+(?:^>\\s*(?P<summary>.+?$)$)?\\n+(?P<info>.*)'\n    d = re.search(pat, start.strip(), (re.MULTILINE|re.DOTALL)).groupdict()\n    d['sections'] = sects\n    return d\n```\n\n----------------------------------------\n\nTITLE: Basic LLMs.txt Template Structure\nDESCRIPTION: Demonstrates the basic required and optional sections of an llms.txt file using markdown format. Shows the minimal structure with placeholder content.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\n> Optional description goes here\n\nOptional details go here\n\n## Section name\n\n- [Link title](https://link_url): Optional link details\n\n## Optional\n\n- [Link title](https://link_url)\n```\n\n----------------------------------------\n\nTITLE: FastHTML LLMs.txt Example Implementation\nDESCRIPTION: A practical example of llms.txt implementation for the FastHTML project, showing how to structure project documentation with core information, documentation links, and optional resources.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# FastHTML\n\n> FastHTML is a python library which brings together Starlette, Uvicorn, HTMX, and fastcore's `FT` \"FastTags\" into a library for creating server-rendered hypermedia applications.\n\nImportant notes:\n\n- Although parts of its API are inspired by FastAPI, it is *not* compatible with FastAPI syntax and is not targeted at creating API services\n- FastHTML is compatible with JS-native web components and any vanilla JS library, but not with React, Vue, or Svelte.\n\n## Docs\n\n- [FastHTML quick start](https://answerdotai.github.io/fasthtml/tutorials/quickstart_for_web_devs.html.md): A brief overview of many FastHTML features\n- [HTMX reference](https://raw.githubusercontent.com/path/reference.md): Brief description of all HTMX attributes, CSS classes, headers, events, extensions, js lib methods, and config options\n\n## Examples\n\n- [Todo list application](https://raw.githubusercontent.com/path/adv_app.py): Detailed walk-thru of a complete CRUD app in FastHTML showing idiomatic use of FastHTML and HTMX patterns.\n\n## Optional\n\n- [Starlette full documentation](https://gist.githubusercontent.com/path/starlette-sml.md): A subset of the Starlette documentation useful for FastHTML development.\n```\n\n----------------------------------------\n\nTITLE: Example llms.txt file format\nDESCRIPTION: Demonstrates the expected format of an llms.txt file, showing how sections like title, summary, docs, examples, and optional sections should be structured.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# FastHTML\n\n> FastHTML is a python library which...\n\nWhen writing FastHTML apps remember to:\n\n- Thing to remember\n\n## Docs\n\n- [Surreal](https://host/README.md): Tiny jQuery alternative with Locality of Behavior\n- [FastHTML quick start](https://host/quickstart.html.md): An overview of FastHTML features\n\n## Examples\n\n- [Todo app](https://host/adv_app.py)\n\n## Optional\n\n- [Starlette docs](https://host/starlette-sml.md): A subset of the Starlette docs\n```\n\n----------------------------------------\n\nTITLE: Example llms.txt Format in Markdown\nDESCRIPTION: A template showing the basic structure of an llms.txt file in Markdown format. It demonstrates the required H1 title, optional description in blockquotes, optional details, and section headers with link lists.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\n> Optional description goes here\n\nOptional details go here\n\n## Section name\n\n- [Link title](https://link_url): Optional link details\n\n## Optional\n\n- [Link title](https://link_url)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic llms.txt Format Template in Markdown\nDESCRIPTION: A template showing the required and optional components of an llms.txt file, including the title, description, details, and section links. The format follows specific rules for structure and organization.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\n> Optional description goes here\n\nOptional details go here\n\n## Section name\n\n- [Link title](https://link_url): Optional link details\n\n## Optional\n\n- [Link title](https://link_url)\n```\n\n----------------------------------------\n\nTITLE: Sample FastHTML llms.txt Implementation in Markdown\nDESCRIPTION: A real-world example of an llms.txt file for the FastHTML project. It includes the project title, description, important notes, and organized sections with links to documentation and example resources.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# FastHTML\n\n> FastHTML is a python library which brings together Starlette, Uvicorn, HTMX, and fastcore's `FT` \"FastTags\" into a library for creating server-rendered hypermedia applications.\n\nImportant notes:\n\n- Although parts of its API are inspired by FastAPI, it is *not* compatible with FastAPI syntax and is not targeted at creating API services\n- FastHTML is compatible with JS-native web components and any vanilla JS library, but not with React, Vue, or Svelte.\n\n## Docs\n\n- [FastHTML quick start](https://docs.fastht.ml/tutorials/quickstart_for_web_devs.html.md): A brief overview of many FastHTML features\n- [HTMX reference](https://raw.githubusercontent.com/path/reference.md): Brief description of all HTMX attributes, CSS classes, headers, events, extensions, js lib methods, and config options\n\n## Examples\n\n- [Todo list application](https://raw.githubusercontent.com/path/adv_app.py): Detailed walk-thru of a complete CRUD app in FastHTML showing idiomatic use of FastHTML and HTMX patterns.\n\n## Optional\n\n- [Starlette full documentation](https://gist.githubusercontent.com/path/starlette-sml.md): A subset of the Starlette documentation useful for FastHTML development.\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of FastHTML llms.txt File in Markdown\nDESCRIPTION: A practical example of an llms.txt file for the FastHTML project, demonstrating how to structure project information, documentation links, examples, and optional resources following the proposed format.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# FastHTML\n\n> FastHTML is a python library which brings together Starlette, Uvicorn, HTMX, and fastcore's `FT` \"FastTags\" into a library for creating server-rendered hypermedia applications.\n\nImportant notes:\n\n- Although parts of its API are inspired by FastAPI, it is *not* compatible with FastAPI syntax and is not targeted at creating API services\n- FastHTML is compatible with JS-native web components and any vanilla JS library, but not with React, Vue, or Svelte.\n\n## Docs\n\n- [FastHTML quick start](https://docs.fastht.ml/tutorials/quickstart_for_web_devs.html.md): A brief overview of many FastHTML features\n- [HTMX reference](https://raw.githubusercontent.com/path/reference.md): Brief description of all HTMX attributes, CSS classes, headers, events, extensions, js lib methods, and config options\n\n## Examples\n\n- [Todo list application](https://raw.githubusercontent.com/path/adv_app.py): Detailed walk-thru of a complete CRUD app in FastHTML showing idiomatic use of FastHTML and HTMX patterns.\n\n## Optional\n\n- [Starlette full documentation](https://gist.githubusercontent.com/path/starlette-sml.md): A subset of the Starlette documentation useful for FastHTML development.\n```\n\n----------------------------------------\n\nTITLE: LLMs.txt File Parser\nDESCRIPTION: Main function to parse llms.txt files into a structured object with title, summary, info and sections.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/01_core.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef parse_llms_file(txt):\n    \"Parse llms.txt file contents in `txt` to an `AttrDict`\"\n    start,sects = _parse_llms(txt)\n    title = named_re('title', r'.+?$')\n    summ = named_re('summary', r'.+?$')\n    summ_pat = opt_re(fr\"^>\\s*{summ}$\")\n    info = named_re('info', '.*')\n    pat = fr'^#\\s*{title}\\n+{summ_pat}\\n+{info}'\n    d = search(pat, start, (re.MULTILINE|re.DOTALL))\n    d['sections'] = sects\n    return dict2obj(d)\n```\n\n----------------------------------------\n\nTITLE: XML Context Generation\nDESCRIPTION: Functions to convert parsed llms.txt content into XML format with proper structure and hierarchy.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/01_core.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_ctx(txt, optional=False, n_workers=None):\n    \"A `Project` with a `Section` for each H2 part in `txt`, optionally skipping the 'optional' section.\"\n    d = parse_llms_file(txt)\n    ctx = mk_ctx(d, optional=optional, n_workers=n_workers)\n    return to_xml(ctx, do_escape=False)\n```\n\n----------------------------------------\n\nTITLE: Parsing llms.txt file into a data structure\nDESCRIPTION: Uses the parse_llms_file function to convert the contents of an llms.txt file into a structured data object.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparsed = parse_llms_file(samp)\nlist(parsed)\n```\n\n----------------------------------------\n\nTITLE: Testing llms.txt with Claude using Python\nDESCRIPTION: A Python script that sets up a chat interface with Anthropic's Claude model to test an llms.txt file. It fetches the llms.txt content from a URL, creates a context using the llms_txt library, and establishes an interactive chat session.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/domains.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# requires-python = \">=3.8\"\n# dependencies = [\n#     \"claudette\",\n#     \"llms-txt\",\n#     \"requests\",\n# ]\n# ///\nfrom claudette import *\nfrom llms_txt import create_ctx\n\nimport requests\n\nmodel = models[1] # Sonnet 3.5\nchat = Chat(model, sp=\"\"\"You are a helpful and concise assistant.\"\"\")\n\nurl = 'your_url/llms.txt'\ntext = requests.get(url).text\nllm_ctx = create_ctx(text)\nchat(llm_ctx + '\\n\\nThe above is necessary context for the conversation.')\n\nwhile True:\n    msg = input('Your question about the site: ')\n    res = chat(msg)\n    print('From Claude:', contents(res))\n```\n\n----------------------------------------\n\nTITLE: Creating XML context from llms.txt file\nDESCRIPTION: Uses the create_ctx function to generate an XML context document from the contents of an llms.txt file, suitable for LLM systems like Claude.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nctx = create_ctx(samp)\n```\n\n----------------------------------------\n\nTITLE: Creating LLM Context from llms.txt\nDESCRIPTION: Using the create_ctx function to generate an LLM context file with XML sections from an llms.txt file.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nctx = create_ctx(samp)\nprint(ctx[:300])\n```\n\n----------------------------------------\n\nTITLE: Command Line Interface\nDESCRIPTION: CLI function to process llms.txt files and output XML context, with options for parallel processing and file saving.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/01_core.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@call_parse\ndef llms_txt2ctx(\n    fname:str, # File name to read\n    optional:bool_arg=False, # Include 'optional' section?\n    n_workers:int=None, # Number of threads to use for parallel downloading\n    save_nbdev_fname:str=None #save output to nbdev `{docs_path}` instead of emitting to stdout\n):\n    \"Print a `Project` with a `Section` for each H2 part in file read from `fname`, optionally skipping the 'optional' section.\"\n    ctx = create_ctx(Path(fname).read_text(), optional=optional, n_workers=n_workers)\n    if save_nbdev_fname and (cfg:=_get_config()):\n        (_local_docs_pth(cfg) / save_nbdev_fname).mk_write(ctx)\n    else: print(ctx)\n```\n\n----------------------------------------\n\nTITLE: Converting llms.txt to XML context with CLI\nDESCRIPTION: Shows how to use the command-line interface to convert an llms.txt file to XML context and save the output to llms.md.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nllms_txt2ctx llms.txt > llms.md\n```\n\n----------------------------------------\n\nTITLE: Converting llms.txt to XML Context\nDESCRIPTION: CLI command to convert an llms.txt file to XML context format and save to llms.md\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nllms_txt2ctx llms.txt > llms.md\n```\n\n----------------------------------------\n\nTITLE: Using llms_txt2ctx CLI\nDESCRIPTION: Examples of using the llms_txt2ctx command-line interface to get help and convert an llms.txt file to XML context.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nllms_txt2ctx -h\n```\n\nLANGUAGE: sh\nCODE:\n```\nllms_txt2ctx llms.txt > llms.md\n```\n\n----------------------------------------\n\nTITLE: Getting CLI help information\nDESCRIPTION: Demonstrates how to get help information for the llms_txt2ctx command-line interface tool.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nllms_txt2ctx -h\n```\n\n----------------------------------------\n\nTITLE: Using llms-txt CLI Help Command\nDESCRIPTION: Command to display help information for the llms_txt2ctx CLI tool\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nllms_txt2ctx -h\n```\n\n----------------------------------------\n\nTITLE: Sample Restaurant llms.txt Implementation\nDESCRIPTION: An example llms.txt file for a restaurant named 'Nate the Great's Grill'. It includes basic business information, operating hours, and links to different menus available on the website.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/domains.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Nate the Great's Grill\n\n> Nate the Great's Grill is a popular destination off of Sesame Street that has been serving the community for over 20 years. We offer the best BBQ for a great price.\n\nHere are our weekly hours:\n\n- Monday - Friday: 9am - 9pm\n- Saturday: 11am - 9pm\n- Sunday: Closed\n\n## Menus\n\n- [Lunch Menu](https://host/lunch.html.md): Our lunch menu served from 11am to 4pm every day.\n- [Dinner Menu](https://host/dinner.html.md): Our dinner menu served from 4pm to 9pm every day.\n\n## Optional\n\n- [Dessert Mneu](https://host/dessert.md): A subset of the Starlette docs\n```\n\n----------------------------------------\n\nTITLE: Reading sample llms.txt file in Python\nDESCRIPTION: Reads the contents of a sample llms.txt file into a string variable for processing.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsamp = Path('llms-sample.txt').read_text()\n```\n\n----------------------------------------\n\nTITLE: Reading llms.txt Sample File\nDESCRIPTION: Reading the contents of an llms.txt sample file using Python's Path module.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsamp = Path('llms-sample.txt').read_text()\n```\n\n----------------------------------------\n\nTITLE: Parsing llms.txt File\nDESCRIPTION: Using the parse_llms_file function to create a data structure from an llms.txt file content.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nparsed = parse_llms_file(samp)\nlist(parsed)\n```\n\n----------------------------------------\n\nTITLE: Importing the llms_txt Python module\nDESCRIPTION: Shows how to import all functionality from the llms_txt Python module.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom llms_txt import *\n```\n\n----------------------------------------\n\nTITLE: Importing llms_txt Python Module\nDESCRIPTION: Importing all functions from the llms_txt Python module.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom llms_txt import *\n```\n\n----------------------------------------\n\nTITLE: Accessing title and summary from parsed data\nDESCRIPTION: Shows how to access the title and summary attributes from the parsed llms.txt data structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nparsed.title,parsed.summary\n```\n\n----------------------------------------\n\nTITLE: Accessing Parsed llms.txt Data\nDESCRIPTION: Examples of accessing various parts of the parsed llms.txt data structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparsed.title,parsed.summary\n```\n\nLANGUAGE: python\nCODE:\n```\nlist(parsed.sections)\n```\n\nLANGUAGE: python\nCODE:\n```\nparsed.sections.Optional[0]\n```\n\n----------------------------------------\n\nTITLE: Listing sections from parsed llms.txt data\nDESCRIPTION: Demonstrates how to list all sections contained in the parsed llms.txt data structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlist(parsed.sections)\n```\n\n----------------------------------------\n\nTITLE: Accessing Optional section from parsed data\nDESCRIPTION: Shows how to access the first item in the Optional section from the parsed llms.txt data structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nparsed.sections.Optional[0]\n```\n\n----------------------------------------\n\nTITLE: Link Parser Implementation\nDESCRIPTION: Function to parse markdown links with optional descriptions into a dictionary structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/01_core.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef parse_link(txt):\n    \"Parse a link section from llms.txt\"\n    title = named_re('title', r'[^\\]]+') \n    url = named_re('url', r'[^\\)]+') \n    desc = named_re('desc', r'.*')\n    desc_pat = opt_re(fr\":\\s*{desc}\")\n    pat = fr'-\\s*\\[{title}\\]\\({url}\\){desc_pat}'\n    return re.search(pat, txt).groupdict()\n```\n\n----------------------------------------\n\nTITLE: Installing llms-txt via pip\nDESCRIPTION: Shows how to install the llms-txt package using pip, making the CLI and Python API available for use.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install llms-txt\n```\n\n----------------------------------------\n\nTITLE: Installing llms-txt Python Package\nDESCRIPTION: Command to install the llms-txt package using pip package manager\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install llms-txt\n```\n\n----------------------------------------\n\nTITLE: Installing llms-txt Python Library\nDESCRIPTION: Command to install the llms-txt Python library using pip.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install llms-txt\n```\n\n----------------------------------------\n\nTITLE: Importing Core Dependencies\nDESCRIPTION: Imports required Python modules for file processing, regex operations, and HTTP requests.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/01_core.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom fastcore.utils import *\nfrom fastcore.xml import *\nfrom fastcore.script import *\nimport httpx\nfrom urllib.parse import urlparse\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Utility Functions\nDESCRIPTION: Helper functions for creating named capture groups and optional regex patterns.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/01_core.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef opt_re(s):\n    \"Pattern to optionally match `s`\"\n    return f'(?:{s})?'\n\ndef named_re(nm, pat):\n    \"Pattern to match `pat` in a named capture group\"\n    return f'(?P<{nm}>{pat})'\n\ndef search(pat, txt, flags=0):\n    \"Dictionary of matched groups in `pat` within `txt`\"\n    res = re.search(pat, txt, flags=flags)\n    return res.groupdict() if res else None\n```\n\n----------------------------------------\n\nTITLE: Displaying initial part of generated XML context\nDESCRIPTION: Prints the first 300 characters of the generated XML context to preview its structure.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(ctx[:300])\n```\n\n----------------------------------------\n\nTITLE: Ed Editor LLMs.txt Integration Example\nDESCRIPTION: Example session showing how the ed text editor could integrate with llms.txt, including loading context and generating code\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx.txt#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ ed\n* H\n```\n\nLANGUAGE: sh\nCODE:\n```\n* L docs.fastht.ml\nChecking for /llms.txt at docs.fastht.ml...\nFound /llms.txt. Parsing...\nFetching URLs from \"Docs\" section...  Fetching URLs from \"Examples\" section...\nSkipping \"Optional\" section for brevity.\nCreating XML-based context for Claude...  Context created and loaded.\n```\n\nLANGUAGE: sh\nCODE:\n```\n* x Create a simple FastHTML app which outputs 'Hello, World!', in a <div>.\nAnalyzing context and prompt...\nGenerating FastHTML app...\nApp written to buffer.\n```\n\nLANGUAGE: sh\nCODE:\n```\n* n\n5\n* p\nfrom fasthtml.common import *\napp,rt = fast_app()\n@rt\ndef index(): return div(\"Hello, World!\")\nserve()\n```\n\nLANGUAGE: sh\nCODE:\n```\n*w hello_world.py\n5\n*q\n```\n\n----------------------------------------\n\nTITLE: Demonstrating llms.txt Integration with ed Editor\nDESCRIPTION: A hypothetical example showing how the classic ed text editor could incorporate llms.txt functionality.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-ctx-full.txt#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ ed\n* H\n* L docs.fastht.ml\nChecking for /llms.txt at docs.fastht.ml...\nFound /llms.txt. Parsing...\nFetching URLs from \"Docs\" section...  Fetching URLs from \"Examples\" section...\nSkipping \"Optional\" section for brevity.\nCreating XML-based context for Claude...  Context created and loaded.\n* x Create a simple FastHTML app which outputs 'Hello, World!', in a <div>.\nAnalyzing context and prompt...\nGenerating FastHTML app...\nApp written to buffer.\n* n\n5\n* p\nfrom fasthtml.common import *\napp,rt = fast_app()\n@rt\ndef index(): return div(\"Hello, World!\")\nserve()\n*w hello_world.py\n5\n*q\n```\n\n----------------------------------------\n\nTITLE: Generating FastHTML App with LLM\nDESCRIPTION: Uses hypothetical 'x' command to generate a FastHTML application using the loaded context and LLM\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/ed.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n* x Create a simple FastHTML app which outputs 'Hello, World!', in a <div>.\nAnalyzing context and prompt...\nGenerating FastHTML app...\nApp written to buffer.\n```\n\n----------------------------------------\n\nTITLE: Loading Documentation via llms.txt\nDESCRIPTION: Uses a hypothetical 'L' command to fetch and parse llms.txt from docs.fastht.ml, creating an LLM context\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/ed.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n* L docs.fastht.ml\nChecking for /llms.txt at docs.fastht.ml...\nFound /llms.txt. Parsing...\nFetching URLs from \"Docs\" section...  Fetching URLs from \"Examples\" section...\nSkipping \"Optional\" section for brevity.\nCreating XML-based context for Claude...  Context created and loaded.\n```\n\n----------------------------------------\n\nTITLE: Sample Restaurant Menu Format in Markdown\nDESCRIPTION: An example restaurant menu in Markdown format showing food items, drinks, and sides with their prices organized in tables. The content is based on Franklin's BBQ menu and demonstrates how to structure menu information.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/domains.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## By The Pound\n\n| Item              | Price         |\n| --------------    | -----------   |\n| Brisket           | 34            |\n| Pork Spare Ribs   | 30            |\n| Pulled Pork       | 28            |\n\n## Drinks\n\n| Item              | Price         |\n| --------------    | -----------   |\n| Iced Tea          | 3             |\n| Mexican Coke      | 3             |\n\n## Sides\n\n| Item              | Price         |\n| --------------    | -----------   |\n| Potato Salad      | 4             |\n| Slaw              | 4             |\n```\n\n----------------------------------------\n\nTITLE: Importing fastcore utilities in Python\nDESCRIPTION: Imports utility functions from the fastcore library. This import is marked with a '#| hide' comment, suggesting it might be hidden in certain contexts.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/00_intro.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#| hide\nfrom fastcore.utils import *\n```\n\n----------------------------------------\n\nTITLE: Starting Ed Editor with Error Messages\nDESCRIPTION: Initiates the ed text editor and enables helpful error messages for demonstration purposes\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/ed.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ed\n* H\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated FastHTML Code\nDESCRIPTION: Shows the line count and contents of the generated FastHTML application code\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/ed.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n* n\n5\n* p\nfrom fasthtml.common import *\napp,rt = fast_app()\n@rt\ndef index(): return div(\"Hello, World!\")\nserve()\n```\n\n----------------------------------------\n\nTITLE: Saving and Exiting Ed\nDESCRIPTION: Saves the generated code to a file and exits the editor\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/ed.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n*w hello_world.py\n5\n*q\n```\n\n----------------------------------------\n\nTITLE: FastHTML Serve Usage Example\nDESCRIPTION: Example showing the use of serve() for running uvicorn in FastHTML applications, which automatically handles the __main__ check.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-sample.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nserve()\n```\n\n----------------------------------------\n\nTITLE: FastHTML Titled Component Usage\nDESCRIPTION: Example of using the Titled component in FastHTML which automatically wraps children in Container and includes both meta title and H1 element.\nSOURCE: https://github.com/answerdotai/llms-txt/blob/main/nbs/llms-sample.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTitled\n```"
  }
]